import {
  __export
} from "./chunk-4EOJPDL2.js";

// node_modules/@galacean/engine-core/dist/module.js
var module_exports = {};
__export(module_exports, {
  AmbientLight: () => AmbientLight,
  AnimationArrayCurve: () => AnimationArrayCurve,
  AnimationBoolCurve: () => AnimationBoolCurve,
  AnimationClip: () => AnimationClip,
  AnimationClipCurveBinding: () => AnimationClipCurveBinding,
  AnimationColorCurve: () => AnimationColorCurve,
  AnimationCurve: () => AnimationCurve,
  AnimationEvent: () => AnimationEvent,
  AnimationFloatArrayCurve: () => AnimationFloatArrayCurve,
  AnimationFloatCurve: () => AnimationFloatCurve,
  AnimationQuaternionCurve: () => AnimationQuaternionCurve,
  AnimationVector2Curve: () => AnimationVector2Curve,
  AnimationVector3Curve: () => AnimationVector3Curve,
  AnimationVector4Curve: () => AnimationVector4Curve,
  Animator: () => Animator,
  AnimatorConditionMode: () => AnimatorConditionMode,
  AnimatorController: () => AnimatorController,
  AnimatorControllerLayer: () => AnimatorControllerLayer,
  AnimatorCullingMode: () => AnimatorCullingMode,
  AnimatorLayerBlendingMode: () => AnimatorLayerBlendingMode,
  AnimatorState: () => AnimatorState,
  AnimatorStateMachine: () => AnimatorStateMachine,
  AnimatorStateTransition: () => AnimatorStateTransition,
  AssetPromise: () => AssetPromise,
  AssetType: () => AssetType,
  Background: () => Background,
  BackgroundMode: () => BackgroundMode,
  BackgroundTextureFillMode: () => BackgroundTextureFillMode,
  BaseMaterial: () => BaseMaterial,
  BasicRenderPipeline: () => BasicRenderPipeline,
  BlendFactor: () => BlendFactor,
  BlendMode: () => BlendMode,
  BlendOperation: () => BlendOperation,
  BlendShape: () => BlendShape,
  BlendShapeFrame: () => BlendShapeFrame,
  BlinnPhongMaterial: () => BlinnPhongMaterial,
  BoolUpdateFlag: () => BoolUpdateFlag,
  BoxColliderShape: () => BoxColliderShape,
  Buffer: () => Buffer,
  BufferBindFlag: () => BufferBindFlag,
  BufferMesh: () => BufferMesh,
  BufferUsage: () => BufferUsage,
  BufferUtil: () => BufferUtil,
  Camera: () => Camera,
  CameraClearFlags: () => CameraClearFlags,
  CapsuleColliderShape: () => CapsuleColliderShape,
  CharacterController: () => CharacterController,
  CloneManager: () => CloneManager,
  Collider: () => Collider,
  ColliderShape: () => ColliderShape,
  ColliderShapeUpAxis: () => ColliderShapeUpAxis,
  CollisionDetectionMode: () => CollisionDetectionMode,
  ColorSpace: () => ColorSpace,
  ColorWriteMask: () => ColorWriteMask,
  CompareFunction: () => CompareFunction,
  Component: () => Component,
  ControllerCollisionFlag: () => ControllerCollisionFlag,
  ControllerNonWalkableMode: () => ControllerNonWalkableMode,
  CubeProbe: () => CubeProbe,
  CullMode: () => CullMode,
  DataType: () => DataType,
  DiffuseMode: () => DiffuseMode,
  DirectLight: () => DirectLight,
  DynamicCollider: () => DynamicCollider,
  DynamicColliderConstraints: () => DynamicColliderConstraints,
  Engine: () => Engine,
  EngineObject: () => EngineObject,
  Entity: () => Entity,
  Event: () => Event,
  EventDispatcher: () => EventDispatcher,
  FixedJoint: () => FixedJoint,
  FogMode: () => FogMode,
  Font: () => Font,
  FontStyle: () => FontStyle,
  GLCapabilityType: () => GLCapabilityType,
  HingeJoint: () => HingeJoint,
  HitResult: () => HitResult,
  IndexBufferBinding: () => IndexBufferBinding,
  IndexFormat: () => IndexFormat,
  InputManager: () => InputManager,
  InterpolationType: () => InterpolationType,
  Joint: () => Joint,
  JointLimits: () => JointLimits,
  JointMotor: () => JointMotor,
  Keyframe: () => Keyframe,
  Keys: () => Keys,
  Layer: () => Layer,
  Light: () => Light,
  Loader: () => Loader,
  Logger: () => Logger,
  Material: () => Material,
  Mesh: () => Mesh,
  MeshRenderElement: () => MeshRenderElement,
  MeshRenderer: () => MeshRenderer,
  MeshTopology: () => MeshTopology,
  ModelMesh: () => ModelMesh,
  ObjectValues: () => ObjectValues,
  OverflowMode: () => OverflowMode,
  PBRBaseMaterial: () => PBRBaseMaterial,
  PBRMaterial: () => PBRMaterial,
  PBRSpecularMaterial: () => PBRSpecularMaterial,
  ParticleRenderer: () => ParticleRenderer,
  ParticleRendererBlendMode: () => ParticleRendererBlendMode,
  PhysicsManager: () => PhysicsManager,
  PhysicsMaterial: () => PhysicsMaterial,
  PhysicsMaterialCombineMode: () => PhysicsMaterialCombineMode,
  PlaneColliderShape: () => PlaneColliderShape,
  Platform: () => Platform,
  PointLight: () => PointLight,
  Pointer: () => Pointer,
  PointerButton: () => PointerButton,
  PointerPhase: () => PointerPhase,
  PrimitiveMesh: () => PrimitiveMesh,
  Probe: () => Probe,
  RefObject: () => RefObject,
  RenderBufferDepthFormat: () => RenderBufferDepthFormat,
  RenderFace: () => RenderFace,
  RenderPass: () => RenderPass,
  RenderQueue: () => RenderQueue,
  RenderQueueType: () => RenderQueueType,
  RenderTarget: () => RenderTarget,
  Renderer: () => Renderer,
  ResourceManager: () => ResourceManager,
  Scene: () => Scene,
  SceneManager: () => SceneManager,
  Script: () => Script,
  SetDataOptions: () => SetDataOptions,
  Shader: () => Shader,
  ShaderData: () => ShaderData,
  ShaderFactory: () => ShaderFactory,
  ShaderPass: () => ShaderPass,
  ShaderProperty: () => ShaderProperty,
  ShaderPropertyType: () => ShaderPropertyType,
  ShadowCascadesMode: () => ShadowCascadesMode,
  ShadowResolution: () => ShadowResolution,
  ShadowType: () => ShadowType,
  Skin: () => Skin,
  SkinnedMeshRenderer: () => SkinnedMeshRenderer,
  Sky: () => Sky,
  SkyBoxMaterial: () => SkyBoxMaterial,
  SphereColliderShape: () => SphereColliderShape,
  SpotLight: () => SpotLight,
  SpringJoint: () => SpringJoint,
  Sprite: () => Sprite,
  SpriteAtlas: () => SpriteAtlas,
  SpriteDrawMode: () => SpriteDrawMode,
  SpriteElement: () => SpriteElement,
  SpriteMask: () => SpriteMask,
  SpriteMaskInteraction: () => SpriteMaskInteraction,
  SpriteMaskLayer: () => SpriteMaskLayer,
  SpriteRenderer: () => SpriteRenderer,
  StateMachineScript: () => StateMachineScript,
  StaticCollider: () => StaticCollider,
  StencilOperation: () => StencilOperation,
  SubMesh: () => SubMesh,
  SystemInfo: () => SystemInfo,
  TextHorizontalAlignment: () => TextHorizontalAlignment,
  TextRenderer: () => TextRenderer,
  TextVerticalAlignment: () => TextVerticalAlignment,
  Texture: () => Texture,
  Texture2D: () => Texture2D,
  Texture2DArray: () => Texture2DArray,
  TextureCoordinate: () => TextureCoordinate,
  TextureCube: () => TextureCube,
  TextureCubeFace: () => TextureCubeFace,
  TextureDepthCompareFunction: () => TextureDepthCompareFunction,
  TextureFilterMode: () => TextureFilterMode,
  TextureFormat: () => TextureFormat,
  TextureWrapMode: () => TextureWrapMode,
  Time: () => Time,
  TrailMaterial: () => TrailMaterial,
  TrailRenderer: () => TrailRenderer,
  Transform: () => Transform,
  UnlitMaterial: () => UnlitMaterial,
  Util: () => Util,
  VertexBufferBinding: () => VertexBufferBinding,
  VertexElement: () => VertexElement,
  VertexElementFormat: () => VertexElementFormat,
  WrapMode: () => WrapMode,
  assignmentClone: () => assignmentClone,
  deepClone: () => deepClone,
  dependentComponents: () => dependentComponents,
  ignoreClone: () => ignoreClone,
  request: () => request,
  resourceLoader: () => resourceLoader,
  shallowClone: () => shallowClone
});

// node_modules/@galacean/engine-math/dist/module.js
var ContainmentType;
(function(ContainmentType2) {
  ContainmentType2[ContainmentType2[
    /** Indicates that there is no overlap between two bounding volumes. */
    "Disjoint"
  ] = 0] = "Disjoint";
  ContainmentType2[ContainmentType2[
    /** Indicates that one bounding volume completely contains another volume. */
    "Contains"
  ] = 1] = "Contains";
  ContainmentType2[ContainmentType2[
    /** Indicates that bounding volumes partially overlap one another. */
    "Intersects"
  ] = 2] = "Intersects";
})(ContainmentType || (ContainmentType = {}));
var PlaneIntersectionType;
(function(PlaneIntersectionType2) {
  PlaneIntersectionType2[PlaneIntersectionType2[
    /** There is no intersection, the bounding volume is in the back of the plane. */
    "Back"
  ] = 0] = "Back";
  PlaneIntersectionType2[PlaneIntersectionType2[
    /** There is no intersection, the bounding volume is in the front of the plane. */
    "Front"
  ] = 1] = "Front";
  PlaneIntersectionType2[PlaneIntersectionType2[
    /** The plane is intersected. */
    "Intersecting"
  ] = 2] = "Intersecting";
})(PlaneIntersectionType || (PlaneIntersectionType = {}));
var FrustumFace;
(function(FrustumFace2) {
  FrustumFace2[FrustumFace2[
    /** Near face */
    "Near"
  ] = 0] = "Near";
  FrustumFace2[FrustumFace2[
    /** Far face */
    "Far"
  ] = 1] = "Far";
  FrustumFace2[FrustumFace2[
    /** Left face */
    "Left"
  ] = 2] = "Left";
  FrustumFace2[FrustumFace2[
    /** Right face */
    "Right"
  ] = 3] = "Right";
  FrustumFace2[FrustumFace2[
    /** Bottom face */
    "Bottom"
  ] = 4] = "Bottom";
  FrustumFace2[FrustumFace2[
    /** Top face */
    "Top"
  ] = 5] = "Top";
})(FrustumFace || (FrustumFace = {}));
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _create_class(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}
var MathUtil = function() {
  function MathUtil3() {
  }
  MathUtil3.clamp = function clamp(v, min, max) {
    return Math.max(min, Math.min(max, v));
  };
  MathUtil3.equals = function equals(a, b) {
    return Math.abs(a - b) <= MathUtil3.zeroTolerance;
  };
  MathUtil3.isPowerOf2 = function isPowerOf2(v) {
    return (v & v - 1) === 0;
  };
  MathUtil3.radianToDegree = function radianToDegree(r) {
    return r * MathUtil3.radToDegreeFactor;
  };
  MathUtil3.degreeToRadian = function degreeToRadian(d) {
    return d * MathUtil3.degreeToRadFactor;
  };
  return MathUtil3;
}();
(function() {
  MathUtil.zeroTolerance = 1e-6;
})();
(function() {
  MathUtil.radToDegreeFactor = 180 / Math.PI;
})();
(function() {
  MathUtil.degreeToRadFactor = Math.PI / 180;
})();
var Vector3 = function() {
  function Vector32(x, y, z) {
    if (x === void 0)
      x = 0;
    if (y === void 0)
      y = 0;
    if (z === void 0)
      z = 0;
    this._onValueChanged = null;
    this._x = x;
    this._y = y;
    this._z = z;
  }
  var _proto = Vector32.prototype;
  _proto.set = function set(x, y, z) {
    this._x = x;
    this._y = y;
    this._z = z;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.add = function add(right) {
    this._x += right._x;
    this._y += right._y;
    this._z += right._z;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.subtract = function subtract(right) {
    this._x -= right._x;
    this._y -= right._y;
    this._z -= right._z;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.multiply = function multiply(right) {
    this._x *= right._x;
    this._y *= right._y;
    this._z *= right._z;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.divide = function divide(right) {
    this._x /= right._x;
    this._y /= right._y;
    this._z /= right._z;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.length = function length2() {
    var _this = this, _x = _this._x, _y = _this._y, _z = _this._z;
    return Math.sqrt(_x * _x + _y * _y + _z * _z);
  };
  _proto.lengthSquared = function lengthSquared() {
    var _this = this, _x = _this._x, _y = _this._y, _z = _this._z;
    return _x * _x + _y * _y + _z * _z;
  };
  _proto.negate = function negate() {
    this._x = -this._x;
    this._y = -this._y;
    this._z = -this._z;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.normalize = function normalize() {
    Vector32.normalize(this, this);
    return this;
  };
  _proto.scale = function scale(s) {
    this._x *= s;
    this._y *= s;
    this._z *= s;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.transformNormal = function transformNormal(m) {
    Vector32.transformNormal(this, m, this);
    return this;
  };
  _proto.transformToVec3 = function transformToVec3(m) {
    Vector32.transformToVec3(this, m, this);
    return this;
  };
  _proto.transformCoordinate = function transformCoordinate(m) {
    Vector32.transformCoordinate(this, m, this);
    return this;
  };
  _proto.transformByQuat = function transformByQuat(quaternion) {
    Vector32.transformByQuat(this, quaternion, this);
    return this;
  };
  _proto.clone = function clone2() {
    return new Vector32(this._x, this._y, this._z);
  };
  _proto.copyFrom = function copyFrom(source) {
    this._x = source.x;
    this._y = source.y;
    this._z = source.z;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.copyFromArray = function copyFromArray(array, offset) {
    if (offset === void 0)
      offset = 0;
    this._x = array[offset];
    this._y = array[offset + 1];
    this._z = array[offset + 2];
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.copyToArray = function copyToArray(out, outOffset) {
    if (outOffset === void 0)
      outOffset = 0;
    out[outOffset] = this._x;
    out[outOffset + 1] = this._y;
    out[outOffset + 2] = this._z;
  };
  _proto.toJSON = function toJSON() {
    return {
      x: this._x,
      y: this._y,
      z: this._z
    };
  };
  Vector32.add = function add(left, right, out) {
    out._x = left._x + right._x;
    out._y = left._y + right._y;
    out._z = left._z + right._z;
    out._onValueChanged && out._onValueChanged();
  };
  Vector32.subtract = function subtract(left, right, out) {
    out._x = left._x - right._x;
    out._y = left._y - right._y;
    out._z = left._z - right._z;
    out._onValueChanged && out._onValueChanged();
  };
  Vector32.multiply = function multiply(left, right, out) {
    out._x = left._x * right._x;
    out._y = left._y * right._y;
    out._z = left._z * right._z;
    out._onValueChanged && out._onValueChanged();
  };
  Vector32.divide = function divide(left, right, out) {
    out._x = left._x / right._x;
    out._y = left._y / right._y;
    out._z = left._z / right._z;
    out._onValueChanged && out._onValueChanged();
  };
  Vector32.dot = function dot(left, right) {
    return left._x * right._x + left._y * right._y + left._z * right._z;
  };
  Vector32.cross = function cross(left, right, out) {
    var ax = left._x;
    var ay = left._y;
    var az = left._z;
    var bx = right._x;
    var by = right._y;
    var bz = right._z;
    out.set(ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx);
  };
  Vector32.distance = function distance(a, b) {
    var x = b._x - a._x;
    var y = b._y - a._y;
    var z = b._z - a._z;
    return Math.sqrt(x * x + y * y + z * z);
  };
  Vector32.distanceSquared = function distanceSquared(a, b) {
    var x = b._x - a._x;
    var y = b._y - a._y;
    var z = b._z - a._z;
    return x * x + y * y + z * z;
  };
  Vector32.equals = function equals(left, right) {
    return MathUtil.equals(left._x, right._x) && MathUtil.equals(left._y, right._y) && MathUtil.equals(left._z, right._z);
  };
  Vector32.lerp = function lerp(start, end, t, out) {
    var _x = start._x, _y = start._y, _z = start._z;
    out._x = _x + (end._x - _x) * t;
    out._y = _y + (end._y - _y) * t;
    out._z = _z + (end._z - _z) * t;
    out._onValueChanged && out._onValueChanged();
  };
  Vector32.max = function max(left, right, out) {
    out._x = Math.max(left._x, right._x);
    out._y = Math.max(left._y, right._y);
    out._z = Math.max(left._z, right._z);
    out._onValueChanged && out._onValueChanged();
  };
  Vector32.min = function min(left, right, out) {
    out._x = Math.min(left._x, right._x);
    out._y = Math.min(left._y, right._y);
    out._z = Math.min(left._z, right._z);
    out._onValueChanged && out._onValueChanged();
  };
  Vector32.negate = function negate(a, out) {
    out._x = -a._x;
    out._y = -a._y;
    out._z = -a._z;
    out._onValueChanged && out._onValueChanged();
  };
  Vector32.normalize = function normalize(a, out) {
    var _x = a._x, _y = a._y, _z = a._z;
    var len = Math.sqrt(_x * _x + _y * _y + _z * _z);
    if (len > MathUtil.zeroTolerance) {
      len = 1 / len;
      out.set(_x * len, _y * len, _z * len);
    }
  };
  Vector32.scale = function scale(a, s, out) {
    out._x = a._x * s;
    out._y = a._y * s;
    out._z = a._z * s;
    out._onValueChanged && out._onValueChanged();
  };
  Vector32.transformNormal = function transformNormal(v, m, out) {
    var _x = v._x, _y = v._y, _z = v._z;
    var e = m.elements;
    out._x = _x * e[0] + _y * e[4] + _z * e[8];
    out._y = _x * e[1] + _y * e[5] + _z * e[9];
    out._z = _x * e[2] + _y * e[6] + _z * e[10];
    out._onValueChanged && out._onValueChanged();
  };
  Vector32.transformToVec3 = function transformToVec3(v, m, out) {
    var _x = v._x, _y = v._y, _z = v._z;
    var e = m.elements;
    out._x = _x * e[0] + _y * e[4] + _z * e[8] + e[12];
    out._y = _x * e[1] + _y * e[5] + _z * e[9] + e[13];
    out._z = _x * e[2] + _y * e[6] + _z * e[10] + e[14];
    out._onValueChanged && out._onValueChanged();
  };
  Vector32.transformToVec4 = function transformToVec4(v, m, out) {
    var _x = v._x, _y = v._y, _z = v._z;
    var e = m.elements;
    out._x = _x * e[0] + _y * e[4] + _z * e[8] + e[12];
    out._y = _x * e[1] + _y * e[5] + _z * e[9] + e[13];
    out._z = _x * e[2] + _y * e[6] + _z * e[10] + e[14];
    out._w = _x * e[3] + _y * e[7] + _z * e[11] + e[15];
    out._onValueChanged && out._onValueChanged();
  };
  Vector32.transformCoordinate = function transformCoordinate(v, m, out) {
    var _x = v._x, _y = v._y, _z = v._z;
    var e = m.elements;
    var w = _x * e[3] + _y * e[7] + _z * e[11] + e[15];
    w = 1 / w;
    out._x = (_x * e[0] + _y * e[4] + _z * e[8] + e[12]) * w;
    out._y = (_x * e[1] + _y * e[5] + _z * e[9] + e[13]) * w;
    out._z = (_x * e[2] + _y * e[6] + _z * e[10] + e[14]) * w;
    out._onValueChanged && out._onValueChanged();
  };
  Vector32.transformByQuat = function transformByQuat(v, quaternion, out) {
    var _x = v._x, _y = v._y, _z = v._z;
    var qx = quaternion._x, qy = quaternion._y, qz = quaternion._z, qw = quaternion._w;
    var ix = qw * _x + qy * _z - qz * _y;
    var iy = qw * _y + qz * _x - qx * _z;
    var iz = qw * _z + qx * _y - qy * _x;
    var iw = -qx * _x - qy * _y - qz * _z;
    out._x = ix * qw - iw * qx - iy * qz + iz * qy;
    out._y = iy * qw - iw * qy - iz * qx + ix * qz;
    out._z = iz * qw - iw * qz - ix * qy + iy * qx;
    out._onValueChanged && out._onValueChanged();
  };
  _create_class(Vector32, [
    {
      key: "x",
      get: (
        /**
        * The x component of the vector.
        */
        function get() {
          return this._x;
        }
      ),
      set: function set(value) {
        this._x = value;
        this._onValueChanged && this._onValueChanged();
      }
    },
    {
      key: "y",
      get: (
        /**
        * The y component of the vector.
        */
        function get() {
          return this._y;
        }
      ),
      set: function set(value) {
        this._y = value;
        this._onValueChanged && this._onValueChanged();
      }
    },
    {
      key: "z",
      get: (
        /**
        * The z component of the vector.
        */
        function get() {
          return this._z;
        }
      ),
      set: function set(value) {
        this._z = value;
        this._onValueChanged && this._onValueChanged();
      }
    }
  ]);
  return Vector32;
}();
(function() {
  Vector3._zero = new Vector3(0, 0, 0);
})();
(function() {
  Vector3._one = new Vector3(1, 1, 1);
})();
var BoundingSphere = function() {
  function BoundingSphere2(center, radius) {
    if (center === void 0)
      center = null;
    if (radius === void 0)
      radius = 0;
    this.center = new Vector3();
    this.radius = 0;
    center && this.center.copyFrom(center);
    this.radius = radius;
  }
  var _proto = BoundingSphere2.prototype;
  _proto.clone = function clone2() {
    return new BoundingSphere2(this.center, this.radius);
  };
  _proto.copyFrom = function copyFrom(source) {
    this.center.copyFrom(source.center);
    this.radius = source.radius;
    return this;
  };
  BoundingSphere2.fromPoints = function fromPoints(points, out) {
    if (!points || points.length === 0) {
      throw new Error("points must be array and length must > 0");
    }
    var len = points.length;
    var center = BoundingSphere2._tempVec30;
    center.x = center.y = center.z = 0;
    for (var i = 0; i < len; ++i) {
      Vector3.add(points[i], center, center);
    }
    Vector3.scale(center, 1 / len, out.center);
    var radius = 0;
    for (var i1 = 0; i1 < len; ++i1) {
      var distance = Vector3.distanceSquared(center, points[i1]);
      distance > radius && (radius = distance);
    }
    out.radius = Math.sqrt(radius);
  };
  BoundingSphere2.fromBox = function fromBox(box, out) {
    var center = out.center;
    var min = box.min, max = box.max;
    center.x = (min.x + max.x) * 0.5;
    center.y = (min.y + max.y) * 0.5;
    center.z = (min.z + max.z) * 0.5;
    out.radius = Vector3.distance(center, max);
  };
  return BoundingSphere2;
}();
(function() {
  BoundingSphere._tempVec30 = new Vector3();
})();
var BoundingBox = function() {
  function BoundingBox2(min, max) {
    if (min === void 0)
      min = null;
    if (max === void 0)
      max = null;
    this.min = new Vector3();
    this.max = new Vector3();
    min && this.min.copyFrom(min);
    max && this.max.copyFrom(max);
  }
  var _proto = BoundingBox2.prototype;
  _proto.getCenter = function getCenter(out) {
    Vector3.add(this.min, this.max, out);
    Vector3.scale(out, 0.5, out);
    return out;
  };
  _proto.getExtent = function getExtent(out) {
    Vector3.subtract(this.max, this.min, out);
    Vector3.scale(out, 0.5, out);
    return out;
  };
  _proto.getCorners = function getCorners(out) {
    if (out === void 0)
      out = [];
    var _this = this, min = _this.min, max = _this.max;
    var minX = min.x;
    var minY = min.y;
    var minZ = min.z;
    var maxX = max.x;
    var maxY = max.y;
    var maxZ = max.z;
    var len = out.length;
    if (len < 8) {
      for (var i = 0, l = 8 - len; i < l; ++i) {
        out[len + i] = new Vector3();
      }
    }
    out[0].set(minX, maxY, maxZ);
    out[1].set(maxX, maxY, maxZ);
    out[2].set(maxX, minY, maxZ);
    out[3].set(minX, minY, maxZ);
    out[4].set(minX, maxY, minZ);
    out[5].set(maxX, maxY, minZ);
    out[6].set(maxX, minY, minZ);
    out[7].set(minX, minY, minZ);
    return out;
  };
  _proto.transform = function transform(matrix) {
    BoundingBox2.transform(this, matrix, this);
    return this;
  };
  _proto.clone = function clone2() {
    return new BoundingBox2(this.min, this.max);
  };
  _proto.copyFrom = function copyFrom(source) {
    this.min.copyFrom(source.min);
    this.max.copyFrom(source.max);
    return this;
  };
  BoundingBox2.fromCenterAndExtent = function fromCenterAndExtent(center, extent, out) {
    Vector3.subtract(center, extent, out.min);
    Vector3.add(center, extent, out.max);
  };
  BoundingBox2.fromPoints = function fromPoints(points, out) {
    if (!points || points.length === 0) {
      throw new Error("points must be array and length must > 0");
    }
    var min = out.min, max = out.max;
    min.x = min.y = min.z = Number.MAX_VALUE;
    max.x = max.y = max.z = -Number.MAX_VALUE;
    for (var i = 0, l = points.length; i < l; ++i) {
      var point = points[i];
      Vector3.min(min, point, min);
      Vector3.max(max, point, max);
    }
  };
  BoundingBox2.fromSphere = function fromSphere(sphere, out) {
    var center = sphere.center, radius = sphere.radius;
    var min = out.min, max = out.max;
    min.x = center.x - radius;
    min.y = center.y - radius;
    min.z = center.z - radius;
    max.x = center.x + radius;
    max.y = center.y + radius;
    max.z = center.z + radius;
  };
  BoundingBox2.transform = function transform(source, matrix, out) {
    var center = BoundingBox2._tempVec30;
    var extent = BoundingBox2._tempVec31;
    source.getCenter(center);
    source.getExtent(extent);
    Vector3.transformCoordinate(center, matrix, center);
    var x = extent.x, y = extent.y, z = extent.z;
    var e = matrix.elements;
    extent.x = Math.abs(x * e[0]) + Math.abs(y * e[4]) + Math.abs(z * e[8]);
    extent.y = Math.abs(x * e[1]) + Math.abs(y * e[5]) + Math.abs(z * e[9]);
    extent.z = Math.abs(x * e[2]) + Math.abs(y * e[6]) + Math.abs(z * e[10]);
    Vector3.subtract(center, extent, out.min);
    Vector3.add(center, extent, out.max);
  };
  BoundingBox2.merge = function merge(box1, box2, out) {
    Vector3.min(box1.min, box2.min, out.min);
    Vector3.max(box1.max, box2.max, out.max);
    return out;
  };
  return BoundingBox2;
}();
(function() {
  BoundingBox._tempVec30 = new Vector3();
})();
(function() {
  BoundingBox._tempVec31 = new Vector3();
})();
var CollisionUtil = function() {
  function CollisionUtil2() {
  }
  CollisionUtil2.intersectionPointThreePlanes = function intersectionPointThreePlanes(p1, p2, p3, out) {
    var p1Nor = p1.normal;
    var p2Nor = p2.normal;
    var p3Nor = p3.normal;
    Vector3.cross(p2Nor, p3Nor, CollisionUtil2._tempVec30);
    Vector3.cross(p3Nor, p1Nor, CollisionUtil2._tempVec31);
    Vector3.cross(p1Nor, p2Nor, CollisionUtil2._tempVec32);
    var a = -Vector3.dot(p1Nor, CollisionUtil2._tempVec30);
    var b = -Vector3.dot(p2Nor, CollisionUtil2._tempVec31);
    var c = -Vector3.dot(p3Nor, CollisionUtil2._tempVec32);
    Vector3.scale(CollisionUtil2._tempVec30, p1.distance / a, CollisionUtil2._tempVec30);
    Vector3.scale(CollisionUtil2._tempVec31, p2.distance / b, CollisionUtil2._tempVec31);
    Vector3.scale(CollisionUtil2._tempVec32, p3.distance / c, CollisionUtil2._tempVec32);
    Vector3.add(CollisionUtil2._tempVec30, CollisionUtil2._tempVec31, out);
    Vector3.add(out, CollisionUtil2._tempVec32, out);
  };
  CollisionUtil2.distancePlaneAndPoint = function distancePlaneAndPoint(plane, point) {
    return Vector3.dot(plane.normal, point) + plane.distance;
  };
  CollisionUtil2.intersectsPlaneAndPoint = function intersectsPlaneAndPoint(plane, point) {
    var distance = CollisionUtil2.distancePlaneAndPoint(plane, point);
    if (distance > 0) {
      return PlaneIntersectionType.Front;
    }
    if (distance < 0) {
      return PlaneIntersectionType.Back;
    }
    return PlaneIntersectionType.Intersecting;
  };
  CollisionUtil2.intersectsPlaneAndBox = function intersectsPlaneAndBox(plane, box) {
    var min = box.min, max = box.max;
    var normal = plane.normal;
    var front = CollisionUtil2._tempVec30;
    var back = CollisionUtil2._tempVec31;
    if (normal.x >= 0) {
      front.x = max.x;
      back.x = min.x;
    } else {
      front.x = min.x;
      back.x = max.x;
    }
    if (normal.y >= 0) {
      front.y = max.y;
      back.y = min.y;
    } else {
      front.y = min.y;
      back.y = max.y;
    }
    if (normal.z >= 0) {
      front.z = max.z;
      back.z = min.z;
    } else {
      front.z = min.z;
      back.z = max.z;
    }
    if (CollisionUtil2.distancePlaneAndPoint(plane, front) < 0) {
      return PlaneIntersectionType.Back;
    }
    if (CollisionUtil2.distancePlaneAndPoint(plane, back) > 0) {
      return PlaneIntersectionType.Front;
    }
    return PlaneIntersectionType.Intersecting;
  };
  CollisionUtil2.intersectsPlaneAndSphere = function intersectsPlaneAndSphere(plane, sphere) {
    var center = sphere.center, radius = sphere.radius;
    var distance = CollisionUtil2.distancePlaneAndPoint(plane, center);
    if (distance > radius) {
      return PlaneIntersectionType.Front;
    }
    if (distance < -radius) {
      return PlaneIntersectionType.Back;
    }
    return PlaneIntersectionType.Intersecting;
  };
  CollisionUtil2.intersectsRayAndPlane = function intersectsRayAndPlane(ray, plane) {
    var normal = plane.normal;
    var zeroTolerance = MathUtil.zeroTolerance;
    var dir = Vector3.dot(normal, ray.direction);
    if (Math.abs(dir) < zeroTolerance) {
      return -1;
    }
    var position = Vector3.dot(normal, ray.origin);
    var distance = (-plane.distance - position) / dir;
    if (distance < 0) {
      if (distance < -zeroTolerance) {
        return -1;
      }
      distance = 0;
    }
    return distance;
  };
  CollisionUtil2.intersectsRayAndBox = function intersectsRayAndBox(ray, box) {
    var zeroTolerance = MathUtil.zeroTolerance;
    var origin = ray.origin, direction = ray.direction;
    var min = box.min, max = box.max;
    var dirX = direction.x;
    var dirY = direction.y;
    var dirZ = direction.z;
    var oriX = origin.x;
    var oriY = origin.y;
    var oriZ = origin.z;
    var distance = 0;
    var tmax = Number.MAX_VALUE;
    if (Math.abs(dirX) < zeroTolerance) {
      if (oriX < min.x || oriX > max.x) {
        return -1;
      }
    } else {
      var inverse = 1 / dirX;
      var t1 = (min.x - oriX) * inverse;
      var t2 = (max.x - oriX) * inverse;
      if (t1 > t2) {
        var temp = t1;
        t1 = t2;
        t2 = temp;
      }
      distance = Math.max(t1, distance);
      tmax = Math.min(t2, tmax);
      if (distance > tmax) {
        return -1;
      }
    }
    if (Math.abs(dirY) < zeroTolerance) {
      if (oriY < min.y || oriY > max.y) {
        return -1;
      }
    } else {
      var inverse1 = 1 / dirY;
      var t11 = (min.y - oriY) * inverse1;
      var t21 = (max.y - oriY) * inverse1;
      if (t11 > t21) {
        var temp1 = t11;
        t11 = t21;
        t21 = temp1;
      }
      distance = Math.max(t11, distance);
      tmax = Math.min(t21, tmax);
      if (distance > tmax) {
        return -1;
      }
    }
    if (Math.abs(dirZ) < zeroTolerance) {
      if (oriZ < min.z || oriZ > max.z) {
        return -1;
      }
    } else {
      var inverse2 = 1 / dirZ;
      var t12 = (min.z - oriZ) * inverse2;
      var t22 = (max.z - oriZ) * inverse2;
      if (t12 > t22) {
        var temp2 = t12;
        t12 = t22;
        t22 = temp2;
      }
      distance = Math.max(t12, distance);
      tmax = Math.min(t22, tmax);
      if (distance > tmax) {
        return -1;
      }
    }
    return distance;
  };
  CollisionUtil2.intersectsRayAndSphere = function intersectsRayAndSphere(ray, sphere) {
    var origin = ray.origin, direction = ray.direction;
    var center = sphere.center, radius = sphere.radius;
    var m = CollisionUtil2._tempVec30;
    Vector3.subtract(origin, center, m);
    var b = Vector3.dot(m, direction);
    var c = Vector3.dot(m, m) - radius * radius;
    if (b > 0 && c > 0) {
      return -1;
    }
    var discriminant = b * b - c;
    if (discriminant < 0) {
      return -1;
    }
    var distance = -b - Math.sqrt(discriminant);
    if (distance < 0) {
      distance = 0;
    }
    return distance;
  };
  CollisionUtil2.intersectsBoxAndBox = function intersectsBoxAndBox(boxA, boxB) {
    if (boxA.min.x > boxB.max.x || boxB.min.x > boxA.max.x) {
      return false;
    }
    if (boxA.min.y > boxB.max.y || boxB.min.y > boxA.max.y) {
      return false;
    }
    return !(boxA.min.z > boxB.max.z || boxB.min.z > boxA.max.z);
  };
  CollisionUtil2.intersectsSphereAndSphere = function intersectsSphereAndSphere(sphereA, sphereB) {
    var radiisum = sphereA.radius + sphereB.radius;
    return Vector3.distanceSquared(sphereA.center, sphereB.center) < radiisum * radiisum;
  };
  CollisionUtil2.intersectsSphereAndBox = function intersectsSphereAndBox(sphere, box) {
    var center = sphere.center;
    var max = box.max;
    var min = box.min;
    var closestPoint = CollisionUtil2._tempVec30;
    closestPoint.set(Math.max(min.x, Math.min(center.x, max.x)), Math.max(min.y, Math.min(center.y, max.y)), Math.max(min.z, Math.min(center.z, max.z)));
    var distance = Vector3.distanceSquared(center, closestPoint);
    return distance <= sphere.radius * sphere.radius;
  };
  CollisionUtil2.intersectsFrustumAndBox = function intersectsFrustumAndBox(frustum, box) {
    var min = box.min, max = box.max;
    var p = CollisionUtil2._tempVec30;
    for (var i = 0; i < 6; ++i) {
      var plane = frustum.getPlane(i);
      var normal = plane.normal;
      p.set(normal.x >= 0 ? max.x : min.x, normal.y >= 0 ? max.y : min.y, normal.z >= 0 ? max.z : min.z);
      if (Vector3.dot(normal, p) < -plane.distance) {
        return false;
      }
    }
    return true;
  };
  CollisionUtil2.frustumContainsBox = function frustumContainsBox(frustum, box) {
    var min = box.min, max = box.max;
    var p = CollisionUtil2._tempVec30;
    var n = CollisionUtil2._tempVec31;
    var result = ContainmentType.Contains;
    for (var i = 0; i < 6; ++i) {
      var plane = frustum.getPlane(i);
      var normal = plane.normal;
      if (normal.x >= 0) {
        p.x = max.x;
        n.x = min.x;
      } else {
        p.x = min.x;
        n.x = max.x;
      }
      if (normal.y >= 0) {
        p.y = max.y;
        n.y = min.y;
      } else {
        p.y = min.y;
        n.y = max.y;
      }
      if (normal.z >= 0) {
        p.z = max.z;
        n.z = min.z;
      } else {
        p.z = min.z;
        n.z = max.z;
      }
      if (CollisionUtil2.intersectsPlaneAndPoint(plane, p) === PlaneIntersectionType.Back) {
        return ContainmentType.Disjoint;
      }
      if (CollisionUtil2.intersectsPlaneAndPoint(plane, n) === PlaneIntersectionType.Back) {
        result = ContainmentType.Intersects;
      }
    }
    return result;
  };
  CollisionUtil2.frustumContainsSphere = function frustumContainsSphere(frustum, sphere) {
    var result = ContainmentType.Contains;
    for (var i = 0; i < 6; ++i) {
      var plane = frustum.getPlane(i);
      var intersectionType = CollisionUtil2.intersectsPlaneAndSphere(plane, sphere);
      if (intersectionType === PlaneIntersectionType.Back) {
        return ContainmentType.Disjoint;
      } else if (intersectionType === PlaneIntersectionType.Intersecting) {
        result = ContainmentType.Intersects;
        break;
      }
    }
    return result;
  };
  return CollisionUtil2;
}();
(function() {
  CollisionUtil._tempVec30 = new Vector3();
})();
(function() {
  CollisionUtil._tempVec31 = new Vector3();
})();
(function() {
  CollisionUtil._tempVec32 = new Vector3();
})();
var Plane = function() {
  function Plane2(normal, distance) {
    if (normal === void 0)
      normal = null;
    if (distance === void 0)
      distance = 0;
    this.normal = new Vector3();
    this.distance = 0;
    normal && this.normal.copyFrom(normal);
    this.distance = distance;
  }
  var _proto = Plane2.prototype;
  _proto.normalize = function normalize() {
    Plane2.normalize(this, this);
    return this;
  };
  _proto.clone = function clone2() {
    var out = new Plane2();
    out.copyFrom(this);
    return out;
  };
  _proto.copyFrom = function copyFrom(source) {
    this.normal.copyFrom(source.normal);
    this.distance = source.distance;
    return this;
  };
  Plane2.normalize = function normalize(p, out) {
    var normal = p.normal;
    var factor = 1 / normal.length();
    Vector3.scale(normal, factor, out.normal);
    out.distance = p.distance * factor;
  };
  Plane2.fromPoints = function fromPoints(point0, point1, point2, out) {
    var x0 = point0.x;
    var y0 = point0.y;
    var z0 = point0.z;
    var x1 = point1.x - x0;
    var y1 = point1.y - y0;
    var z1 = point1.z - z0;
    var x2 = point2.x - x0;
    var y2 = point2.y - y0;
    var z2 = point2.z - z0;
    var yz = y1 * z2 - z1 * y2;
    var xz = z1 * x2 - x1 * z2;
    var xy = x1 * y2 - y1 * x2;
    var invPyth = 1 / Math.sqrt(yz * yz + xz * xz + xy * xy);
    var x = yz * invPyth;
    var y = xz * invPyth;
    var z = xy * invPyth;
    var normal = out.normal;
    normal.x = x;
    normal.y = y;
    normal.z = z;
    out.distance = -(x * x0 + y * y0 + z * z0);
  };
  return Plane2;
}();
var BoundingFrustum = function() {
  function BoundingFrustum2(matrix) {
    if (matrix === void 0)
      matrix = null;
    this.near = new Plane();
    this.far = new Plane();
    this.left = new Plane();
    this.right = new Plane();
    this.top = new Plane();
    this.bottom = new Plane();
    matrix && this.calculateFromMatrix(matrix);
  }
  var _proto = BoundingFrustum2.prototype;
  _proto.getPlane = function getPlane(face) {
    switch (face) {
      case FrustumFace.Near:
        return this.near;
      case FrustumFace.Far:
        return this.far;
      case FrustumFace.Left:
        return this.left;
      case FrustumFace.Right:
        return this.right;
      case FrustumFace.Bottom:
        return this.bottom;
      case FrustumFace.Top:
        return this.top;
      default:
        return null;
    }
  };
  _proto.calculateFromMatrix = function calculateFromMatrix(matrix) {
    var me = matrix.elements;
    var m11 = me[0];
    var m12 = me[1];
    var m13 = me[2];
    var m14 = me[3];
    var m21 = me[4];
    var m22 = me[5];
    var m23 = me[6];
    var m24 = me[7];
    var m31 = me[8];
    var m32 = me[9];
    var m33 = me[10];
    var m34 = me[11];
    var m41 = me[12];
    var m42 = me[13];
    var m43 = me[14];
    var m44 = me[15];
    var nearNormal = this.near.normal;
    nearNormal.set(m14 + m13, m24 + m23, m34 + m33);
    this.near.distance = m44 + m43;
    this.near.normalize();
    var farNormal = this.far.normal;
    farNormal.set(m14 - m13, m24 - m23, m34 - m33);
    this.far.distance = m44 - m43;
    this.far.normalize();
    var leftNormal = this.left.normal;
    leftNormal.set(m14 + m11, m24 + m21, m34 + m31);
    this.left.distance = m44 + m41;
    this.left.normalize();
    var rightNormal = this.right.normal;
    rightNormal.set(m14 - m11, m24 - m21, m34 - m31);
    this.right.distance = m44 - m41;
    this.right.normalize();
    var bottomNormal = this.bottom.normal;
    bottomNormal.set(m14 + m12, m24 + m22, m34 + m32);
    this.bottom.distance = m44 + m42;
    this.bottom.normalize();
    var topNormal = this.top.normal;
    topNormal.set(m14 - m12, m24 - m22, m34 - m32);
    this.top.distance = m44 - m42;
    this.top.normalize();
  };
  _proto.intersectsBox = function intersectsBox(box) {
    return CollisionUtil.intersectsFrustumAndBox(this, box);
  };
  _proto.intersectsSphere = function intersectsSphere(sphere) {
    return CollisionUtil.frustumContainsSphere(this, sphere) !== ContainmentType.Disjoint;
  };
  _proto.clone = function clone2() {
    var out = new BoundingFrustum2();
    out.copyFrom(this);
    return out;
  };
  _proto.copyFrom = function copyFrom(source) {
    this.near.copyFrom(source.near);
    this.far.copyFrom(source.far);
    this.left.copyFrom(source.left);
    this.right.copyFrom(source.right);
    this.bottom.copyFrom(source.bottom);
    this.top.copyFrom(source.top);
    return this;
  };
  return BoundingFrustum2;
}();
var Matrix3x3 = function() {
  function Matrix3x32(m11, m12, m13, m21, m22, m23, m31, m32, m33) {
    if (m11 === void 0)
      m11 = 1;
    if (m12 === void 0)
      m12 = 0;
    if (m13 === void 0)
      m13 = 0;
    if (m21 === void 0)
      m21 = 0;
    if (m22 === void 0)
      m22 = 1;
    if (m23 === void 0)
      m23 = 0;
    if (m31 === void 0)
      m31 = 0;
    if (m32 === void 0)
      m32 = 0;
    if (m33 === void 0)
      m33 = 1;
    this.elements = new Float32Array(9);
    var e = this.elements;
    e[0] = m11;
    e[1] = m12;
    e[2] = m13;
    e[3] = m21;
    e[4] = m22;
    e[5] = m23;
    e[6] = m31;
    e[7] = m32;
    e[8] = m33;
  }
  var _proto = Matrix3x32.prototype;
  _proto.set = function set(m11, m12, m13, m21, m22, m23, m31, m32, m33) {
    var e = this.elements;
    e[0] = m11;
    e[1] = m12;
    e[2] = m13;
    e[3] = m21;
    e[4] = m22;
    e[5] = m23;
    e[6] = m31;
    e[7] = m32;
    e[8] = m33;
    return this;
  };
  _proto.add = function add(right) {
    Matrix3x32.add(this, right, this);
    return this;
  };
  _proto.subtract = function subtract(right) {
    Matrix3x32.subtract(this, right, this);
    return this;
  };
  _proto.multiply = function multiply(right) {
    Matrix3x32.multiply(this, right, this);
    return this;
  };
  _proto.determinant = function determinant() {
    var e = this.elements;
    var a11 = e[0], a12 = e[1], a13 = e[2];
    var a21 = e[3], a22 = e[4], a23 = e[5];
    var a31 = e[6], a32 = e[7], a33 = e[8];
    var b12 = a33 * a22 - a23 * a32;
    var b22 = -a33 * a21 + a23 * a31;
    var b32 = a32 * a21 - a22 * a31;
    return a11 * b12 + a12 * b22 + a13 * b32;
  };
  _proto.identity = function identity() {
    var e = this.elements;
    e[0] = 1;
    e[1] = 0;
    e[2] = 0;
    e[3] = 0;
    e[4] = 1;
    e[5] = 0;
    e[6] = 0;
    e[7] = 0;
    e[8] = 1;
    return this;
  };
  _proto.invert = function invert() {
    Matrix3x32.invert(this, this);
    return this;
  };
  _proto.rotate = function rotate(r) {
    Matrix3x32.rotate(this, r, this);
    return this;
  };
  _proto.scale = function scale(s) {
    Matrix3x32.scale(this, s, this);
    return this;
  };
  _proto.translate = function translate(translation) {
    Matrix3x32.translate(this, translation, this);
    return this;
  };
  _proto.transpose = function transpose() {
    Matrix3x32.transpose(this, this);
    return this;
  };
  _proto.clone = function clone2() {
    var e = this.elements;
    var ret = new Matrix3x32(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8]);
    return ret;
  };
  _proto.copyFrom = function copyFrom(source) {
    var e = this.elements;
    var se = source.elements;
    e[0] = se[0];
    e[1] = se[1];
    e[2] = se[2];
    e[3] = se[3];
    e[4] = se[4];
    e[5] = se[5];
    e[6] = se[6];
    e[7] = se[7];
    e[8] = se[8];
    return this;
  };
  _proto.copyFromArray = function copyFromArray(array, offset) {
    if (offset === void 0)
      offset = 0;
    var srce = this.elements;
    for (var i = 0; i < 12; i++) {
      srce[i] = array[i + offset];
    }
    return this;
  };
  _proto.copyToArray = function copyToArray(out, outOffset) {
    if (outOffset === void 0)
      outOffset = 0;
    var e = this.elements;
    out[outOffset] = e[0];
    out[outOffset + 1] = e[1];
    out[outOffset + 2] = e[2];
    out[outOffset + 3] = e[3];
    out[outOffset + 4] = e[4];
    out[outOffset + 5] = e[5];
    out[outOffset + 6] = e[6];
    out[outOffset + 7] = e[7];
    out[outOffset + 8] = e[8];
  };
  _proto.copyFromMatrix = function copyFromMatrix(source) {
    var ae = source.elements;
    var e = this.elements;
    e[0] = ae[0];
    e[1] = ae[1];
    e[2] = ae[2];
    e[3] = ae[4];
    e[4] = ae[5];
    e[5] = ae[6];
    e[6] = ae[8];
    e[7] = ae[9];
    e[8] = ae[10];
    return this;
  };
  Matrix3x32.add = function add(left, right, out) {
    var le = left.elements;
    var re = right.elements;
    var oe = out.elements;
    oe[0] = le[0] + re[0];
    oe[1] = le[1] + re[1];
    oe[2] = le[2] + re[2];
    oe[3] = le[3] + re[3];
    oe[4] = le[4] + re[4];
    oe[5] = le[5] + re[5];
    oe[6] = le[6] + re[6];
    oe[7] = le[7] + re[7];
    oe[8] = le[8] + re[8];
  };
  Matrix3x32.subtract = function subtract(left, right, out) {
    var le = left.elements;
    var re = right.elements;
    var oe = out.elements;
    oe[0] = le[0] - re[0];
    oe[1] = le[1] - re[1];
    oe[2] = le[2] - re[2];
    oe[3] = le[3] - re[3];
    oe[4] = le[4] - re[4];
    oe[5] = le[5] - re[5];
    oe[6] = le[6] - re[6];
    oe[7] = le[7] - re[7];
    oe[8] = le[8] - re[8];
  };
  Matrix3x32.multiply = function multiply(left, right, out) {
    var le = left.elements;
    var re = right.elements;
    var oe = out.elements;
    var l11 = le[0], l12 = le[1], l13 = le[2];
    var l21 = le[3], l22 = le[4], l23 = le[5];
    var l31 = le[6], l32 = le[7], l33 = le[8];
    var r11 = re[0], r12 = re[1], r13 = re[2];
    var r21 = re[3], r22 = re[4], r23 = re[5];
    var r31 = re[6], r32 = re[7], r33 = re[8];
    oe[0] = l11 * r11 + l21 * r12 + l31 * r13;
    oe[1] = l12 * r11 + l22 * r12 + l32 * r13;
    oe[2] = l13 * r11 + l23 * r12 + l33 * r13;
    oe[3] = l11 * r21 + l21 * r22 + l31 * r23;
    oe[4] = l12 * r21 + l22 * r22 + l32 * r23;
    oe[5] = l13 * r21 + l23 * r22 + l33 * r23;
    oe[6] = l11 * r31 + l21 * r32 + l31 * r33;
    oe[7] = l12 * r31 + l22 * r32 + l32 * r33;
    oe[8] = l13 * r31 + l23 * r32 + l33 * r33;
  };
  Matrix3x32.equals = function equals(left, right) {
    var le = left.elements;
    var re = right.elements;
    return MathUtil.equals(le[0], re[0]) && MathUtil.equals(le[1], re[1]) && MathUtil.equals(le[2], re[2]) && MathUtil.equals(le[3], re[3]) && MathUtil.equals(le[4], re[4]) && MathUtil.equals(le[5], re[5]) && MathUtil.equals(le[6], re[6]) && MathUtil.equals(le[7], re[7]) && MathUtil.equals(le[8], re[8]);
  };
  Matrix3x32.lerp = function lerp(start, end, t, out) {
    var se = start.elements;
    var ee = end.elements;
    var oe = out.elements;
    var inv = 1 - t;
    oe[0] = se[0] * inv + ee[0] * t;
    oe[1] = se[1] * inv + ee[1] * t;
    oe[2] = se[2] * inv + ee[2] * t;
    oe[3] = se[3] * inv + ee[3] * t;
    oe[4] = se[4] * inv + ee[4] * t;
    oe[5] = se[5] * inv + ee[5] * t;
    oe[6] = se[6] * inv + ee[6] * t;
    oe[7] = se[7] * inv + ee[7] * t;
    oe[8] = se[8] * inv + ee[8] * t;
  };
  Matrix3x32.rotationQuaternion = function rotationQuaternion(quaternion, out) {
    var oe = out.elements;
    var x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var yx = y * x2;
    var yy = y * y2;
    var zx = z * x2;
    var zy = z * y2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    oe[0] = 1 - yy - zz;
    oe[3] = yx - wz;
    oe[6] = zx + wy;
    oe[1] = yx + wz;
    oe[4] = 1 - xx - zz;
    oe[7] = zy - wx;
    oe[2] = zx - wy;
    oe[5] = zy + wx;
    oe[8] = 1 - xx - yy;
  };
  Matrix3x32.scaling = function scaling(s, out) {
    var oe = out.elements;
    oe[0] = s._x;
    oe[1] = 0;
    oe[2] = 0;
    oe[3] = 0;
    oe[4] = s._y;
    oe[5] = 0;
    oe[6] = 0;
    oe[7] = 0;
    oe[8] = 1;
  };
  Matrix3x32.translation = function translation(translation, out) {
    var oe = out.elements;
    oe[0] = 1;
    oe[1] = 0;
    oe[2] = 0;
    oe[3] = 0;
    oe[4] = 1;
    oe[5] = 0;
    oe[6] = translation._x;
    oe[7] = translation._y;
    oe[8] = 1;
  };
  Matrix3x32.invert = function invert(a, out) {
    var ae = a.elements;
    var oe = out.elements;
    var a11 = ae[0], a12 = ae[1], a13 = ae[2];
    var a21 = ae[3], a22 = ae[4], a23 = ae[5];
    var a31 = ae[6], a32 = ae[7], a33 = ae[8];
    var b12 = a33 * a22 - a23 * a32;
    var b22 = -a33 * a21 + a23 * a31;
    var b32 = a32 * a21 - a22 * a31;
    var det = a11 * b12 + a12 * b22 + a13 * b32;
    if (!det) {
      return;
    }
    det = 1 / det;
    oe[0] = b12 * det;
    oe[1] = (-a33 * a12 + a13 * a32) * det;
    oe[2] = (a23 * a12 - a13 * a22) * det;
    oe[3] = b22 * det;
    oe[4] = (a33 * a11 - a13 * a31) * det;
    oe[5] = (-a23 * a11 + a13 * a21) * det;
    oe[6] = b32 * det;
    oe[7] = (-a32 * a11 + a12 * a31) * det;
    oe[8] = (a22 * a11 - a12 * a21) * det;
  };
  Matrix3x32.normalMatrix = function normalMatrix(mat4, out) {
    var ae = mat4.elements;
    var oe = out.elements;
    var a11 = ae[0], a12 = ae[1], a13 = ae[2], a14 = ae[3];
    var a21 = ae[4], a22 = ae[5], a23 = ae[6], a24 = ae[7];
    var a31 = ae[8], a32 = ae[9], a33 = ae[10], a34 = ae[11];
    var a41 = ae[12], a42 = ae[13], a43 = ae[14], a44 = ae[15];
    var b00 = a11 * a22 - a12 * a21;
    var b01 = a11 * a23 - a13 * a21;
    var b02 = a11 * a24 - a14 * a21;
    var b03 = a12 * a23 - a13 * a22;
    var b04 = a12 * a24 - a14 * a22;
    var b05 = a13 * a24 - a14 * a23;
    var b06 = a31 * a42 - a32 * a41;
    var b07 = a31 * a43 - a33 * a41;
    var b08 = a31 * a44 - a34 * a41;
    var b09 = a32 * a43 - a33 * a42;
    var b10 = a32 * a44 - a34 * a42;
    var b11 = a33 * a44 - a34 * a43;
    var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
      return null;
    }
    det = 1 / det;
    oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;
    oe[1] = (a23 * b08 - a21 * b11 - a24 * b07) * det;
    oe[2] = (a21 * b10 - a22 * b08 + a24 * b06) * det;
    oe[3] = (a13 * b10 - a12 * b11 - a14 * b09) * det;
    oe[4] = (a11 * b11 - a13 * b08 + a14 * b07) * det;
    oe[5] = (a12 * b08 - a11 * b10 - a14 * b06) * det;
    oe[6] = (a42 * b05 - a43 * b04 + a44 * b03) * det;
    oe[7] = (a43 * b02 - a41 * b05 - a44 * b01) * det;
    oe[8] = (a41 * b04 - a42 * b02 + a44 * b00) * det;
  };
  Matrix3x32.rotate = function rotate(a, r, out) {
    var ae = a.elements;
    var oe = out.elements;
    var s = Math.sin(r);
    var c = Math.cos(r);
    var a11 = ae[0], a12 = ae[1], a13 = ae[2];
    var a21 = ae[3], a22 = ae[4], a23 = ae[5];
    var a31 = ae[6], a32 = ae[7], a33 = ae[8];
    oe[0] = c * a11 + s * a21;
    oe[1] = c * a12 + s * a22;
    oe[2] = c * a13 + s * a23;
    oe[3] = c * a21 - s * a11;
    oe[4] = c * a22 - s * a12;
    oe[5] = c * a23 - s * a13;
    oe[6] = a31;
    oe[7] = a32;
    oe[8] = a33;
  };
  Matrix3x32.scale = function scale(m, s, out) {
    var x = s._x, y = s._y;
    var ae = m.elements;
    var oe = out.elements;
    oe[0] = x * ae[0];
    oe[1] = x * ae[1];
    oe[2] = x * ae[2];
    oe[3] = y * ae[3];
    oe[4] = y * ae[4];
    oe[5] = y * ae[5];
    oe[6] = ae[6];
    oe[7] = ae[7];
    oe[8] = ae[8];
  };
  Matrix3x32.translate = function translate(m, translation, out) {
    var x = translation._x, y = translation._y;
    var ae = m.elements;
    var oe = out.elements;
    var a11 = ae[0], a12 = ae[1], a13 = ae[2];
    var a21 = ae[3], a22 = ae[4], a23 = ae[5];
    var a31 = ae[6], a32 = ae[7], a33 = ae[8];
    oe[0] = a11;
    oe[1] = a12;
    oe[2] = a13;
    oe[3] = a21;
    oe[4] = a22;
    oe[5] = a23;
    oe[6] = x * a11 + y * a21 + a31;
    oe[7] = x * a12 + y * a22 + a32;
    oe[8] = x * a13 + y * a23 + a33;
  };
  Matrix3x32.transpose = function transpose(a, out) {
    var ae = a.elements;
    var oe = out.elements;
    if (out === a) {
      var a12 = ae[1];
      var a13 = ae[2];
      var a23 = ae[5];
      oe[1] = ae[3];
      oe[2] = ae[6];
      oe[3] = a12;
      oe[5] = ae[7];
      oe[6] = a13;
      oe[7] = a23;
    } else {
      oe[0] = ae[0];
      oe[1] = ae[3];
      oe[2] = ae[6];
      oe[3] = ae[1];
      oe[4] = ae[4];
      oe[5] = ae[7];
      oe[6] = ae[2];
      oe[7] = ae[5];
      oe[8] = ae[8];
    }
  };
  return Matrix3x32;
}();
var Quaternion = function() {
  function Quaternion2(x, y, z, w) {
    if (x === void 0)
      x = 0;
    if (y === void 0)
      y = 0;
    if (z === void 0)
      z = 0;
    if (w === void 0)
      w = 1;
    this._onValueChanged = null;
    this._x = x;
    this._y = y;
    this._z = z;
    this._w = w;
  }
  var _proto = Quaternion2.prototype;
  _proto.set = function set(x, y, z, w) {
    this._x = x;
    this._y = y;
    this._z = z;
    this._w = w;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.conjugate = function conjugate() {
    this._x *= -1;
    this._y *= -1;
    this._z *= -1;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.getAxisAngle = function getAxisAngle(out) {
    var _this = this, _x = _this._x, _y = _this._y, _z = _this._z;
    var length2 = _x * _x + _y * _y + _z * _z;
    if (length2 < MathUtil.zeroTolerance) {
      out._x = 1;
      out._y = 0;
      out._z = 0;
      return 0;
    } else {
      var inv = 1 / length2;
      out._x = this._x * inv;
      out._y = this._y * inv;
      out._z = this._z * inv;
      return Math.acos(this._w) * 2;
    }
  };
  _proto.identity = function identity() {
    this._x = 0;
    this._y = 0;
    this._z = 0;
    this._w = 1;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.length = function length2() {
    var _this = this, _x = _this._x, _y = _this._y, _z = _this._z, _w = _this._w;
    return Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);
  };
  _proto.lengthSquared = function lengthSquared() {
    var _this = this, _x = _this._x, _y = _this._y, _z = _this._z, _w = _this._w;
    return _x * _x + _y * _y + _z * _z + _w * _w;
  };
  _proto.normalize = function normalize() {
    Quaternion2.normalize(this, this);
    return this;
  };
  _proto.toEuler = function toEuler(out) {
    this._toYawPitchRoll(out);
    var t = out._x;
    out._x = out._y;
    out._y = t;
    out._onValueChanged && out._onValueChanged();
    return out;
  };
  _proto.toYawPitchRoll = function toYawPitchRoll(out) {
    this._toYawPitchRoll(out);
    out._onValueChanged && out._onValueChanged();
    return out;
  };
  _proto.rotateX = function rotateX(rad) {
    Quaternion2.rotateX(this, rad, this);
    return this;
  };
  _proto.rotateY = function rotateY(rad) {
    Quaternion2.rotateY(this, rad, this);
    return this;
  };
  _proto.rotateZ = function rotateZ(rad) {
    Quaternion2.rotateZ(this, rad, this);
    return this;
  };
  _proto.rotationAxisAngle = function rotationAxisAngle(axis, rad) {
    Quaternion2.rotationAxisAngle(axis, rad, this);
    return this;
  };
  _proto.multiply = function multiply(quat) {
    Quaternion2.multiply(this, quat, this);
    return this;
  };
  _proto.invert = function invert() {
    Quaternion2.invert(this, this);
    return this;
  };
  _proto.dot = function dot(quat) {
    return Quaternion2.dot(this, quat);
  };
  _proto.lerp = function lerp(quat, t) {
    Quaternion2.lerp(this, quat, t, this);
    return this;
  };
  _proto.rotateAxisAngle = function rotateAxisAngle(axis, rad) {
    Quaternion2._tempQuat1.rotationAxisAngle(axis, rad);
    this.multiply(Quaternion2._tempQuat1);
    return this;
  };
  _proto.clone = function clone2() {
    return new Quaternion2(this._x, this._y, this._z, this._w);
  };
  _proto.copyFrom = function copyFrom(source) {
    this._x = source.x;
    this._y = source.y;
    this._z = source.z;
    this._w = source.w;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.copyFromArray = function copyFromArray(array, offset) {
    if (offset === void 0)
      offset = 0;
    this._x = array[offset];
    this._y = array[offset + 1];
    this._z = array[offset + 2];
    this._w = array[offset + 3];
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.copyToArray = function copyToArray(out, outOffset) {
    if (outOffset === void 0)
      outOffset = 0;
    out[outOffset] = this._x;
    out[outOffset + 1] = this._y;
    out[outOffset + 2] = this._z;
    out[outOffset + 3] = this._w;
  };
  _proto.toJSON = function toJSON() {
    return {
      x: this._x,
      y: this._y,
      z: this._z,
      w: this._w
    };
  };
  _proto._toYawPitchRoll = function _toYawPitchRoll(out) {
    var _this = this, x = _this._x, y = _this._y, z = _this._z, w = _this._w;
    var xx = x * x;
    var sinP = 2 * (x * w - y * z);
    out._y = Math.abs(sinP) >= 1 ? Math.sign(sinP) * (Math.PI / 2) : Math.asin(sinP);
    out._x = Math.atan2(2 * (z * x + y * w), 1 - 2 * (y * y + xx));
    out._z = Math.atan2(2 * (x * y + z * w), 1 - 2 * (z * z + xx));
  };
  Quaternion2.add = function add(left, right, out) {
    out._x = left._x + right._x;
    out._y = left._y + right._y;
    out._z = left._z + right._z;
    out._w = left._w + right._w;
    out._onValueChanged && out._onValueChanged();
  };
  Quaternion2.multiply = function multiply(left, right, out) {
    var ax = left._x, ay = left._y, az = left._z, aw = left._w;
    var bx = right._x, by = right._y, bz = right._z, bw = right._w;
    out._x = ax * bw + aw * bx + ay * bz - az * by;
    out._y = ay * bw + aw * by + az * bx - ax * bz;
    out._z = az * bw + aw * bz + ax * by - ay * bx;
    out._w = aw * bw - ax * bx - ay * by - az * bz;
    out._onValueChanged && out._onValueChanged();
  };
  Quaternion2.conjugate = function conjugate(a, out) {
    out._x = -a._x;
    out._y = -a._y;
    out._z = -a._z;
    out._w = a._w;
    out._onValueChanged && out._onValueChanged();
  };
  Quaternion2.dot = function dot(left, right) {
    return left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;
  };
  Quaternion2.equals = function equals(left, right) {
    return MathUtil.equals(left._x, right._x) && MathUtil.equals(left._y, right._y) && MathUtil.equals(left._z, right._z) && MathUtil.equals(left._w, right._w);
  };
  Quaternion2.rotationAxisAngle = function rotationAxisAngle(axis, rad, out) {
    var normalAxis = Quaternion2._tempVector3;
    Vector3.normalize(axis, normalAxis);
    rad *= 0.5;
    var s = Math.sin(rad);
    out._x = normalAxis._x * s;
    out._y = normalAxis._y * s;
    out._z = normalAxis._z * s;
    out._w = Math.cos(rad);
    out._onValueChanged && out._onValueChanged();
  };
  Quaternion2.rotationEuler = function rotationEuler(x, y, z, out) {
    Quaternion2.rotationYawPitchRoll(y, x, z, out);
  };
  Quaternion2.rotationYawPitchRoll = function rotationYawPitchRoll(yaw, pitch, roll, out) {
    var halfRoll = roll * 0.5;
    var halfPitch = pitch * 0.5;
    var halfYaw = yaw * 0.5;
    var sinRoll = Math.sin(halfRoll);
    var cosRoll = Math.cos(halfRoll);
    var sinPitch = Math.sin(halfPitch);
    var cosPitch = Math.cos(halfPitch);
    var sinYaw = Math.sin(halfYaw);
    var cosYaw = Math.cos(halfYaw);
    var cosYawPitch = cosYaw * cosPitch;
    var sinYawPitch = sinYaw * sinPitch;
    out._x = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;
    out._y = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;
    out._z = cosYawPitch * sinRoll - sinYawPitch * cosRoll;
    out._w = cosYawPitch * cosRoll + sinYawPitch * sinRoll;
    out._onValueChanged && out._onValueChanged();
  };
  Quaternion2.rotationMatrix3x3 = function rotationMatrix3x3(m, out) {
    var me = m.elements;
    var m11 = me[0], m12 = me[1], m13 = me[2];
    var m21 = me[3], m22 = me[4], m23 = me[5];
    var m31 = me[6], m32 = me[7], m33 = me[8];
    var scale = m11 + m22 + m33;
    var sqrt, half;
    if (scale > 0) {
      sqrt = Math.sqrt(scale + 1);
      out._w = sqrt * 0.5;
      sqrt = 0.5 / sqrt;
      out._x = (m23 - m32) * sqrt;
      out._y = (m31 - m13) * sqrt;
      out._z = (m12 - m21) * sqrt;
    } else if (m11 >= m22 && m11 >= m33) {
      sqrt = Math.sqrt(1 + m11 - m22 - m33);
      half = 0.5 / sqrt;
      out._x = 0.5 * sqrt;
      out._y = (m12 + m21) * half;
      out._z = (m13 + m31) * half;
      out._w = (m23 - m32) * half;
    } else if (m22 > m33) {
      sqrt = Math.sqrt(1 + m22 - m11 - m33);
      half = 0.5 / sqrt;
      out._x = (m21 + m12) * half;
      out._y = 0.5 * sqrt;
      out._z = (m32 + m23) * half;
      out._w = (m31 - m13) * half;
    } else {
      sqrt = Math.sqrt(1 + m33 - m11 - m22);
      half = 0.5 / sqrt;
      out._x = (m13 + m31) * half;
      out._y = (m23 + m32) * half;
      out._z = 0.5 * sqrt;
      out._w = (m12 - m21) * half;
    }
    out._onValueChanged && out._onValueChanged();
  };
  Quaternion2.invert = function invert(a, out) {
    var x = a._x, y = a._y, z = a._z, w = a._w;
    var dot = x * x + y * y + z * z + w * w;
    if (dot > MathUtil.zeroTolerance) {
      var invDot = 1 / dot;
      out._x = -x * invDot;
      out._y = -y * invDot;
      out._z = -z * invDot;
      out._w = w * invDot;
      out._onValueChanged && out._onValueChanged();
    }
  };
  Quaternion2.lerp = function lerp(start, end, t, out) {
    var inv = 1 - t;
    if (Quaternion2.dot(start, end) >= 0) {
      out._x = start._x * inv + end._x * t;
      out._y = start._y * inv + end._y * t;
      out._z = start._z * inv + end._z * t;
      out._w = start._w * inv + end._w * t;
    } else {
      out._x = start._x * inv - end._x * t;
      out._y = start._y * inv - end._y * t;
      out._z = start._z * inv - end._z * t;
      out._w = start._w * inv - end._w * t;
    }
    out.normalize();
  };
  Quaternion2.slerp = function slerp(start, end, amount, out) {
    var opposite;
    var inverse;
    var dot = Quaternion2.dot(start, end);
    if (Math.abs(dot) > 1 - MathUtil.zeroTolerance) {
      inverse = 1 - amount;
      opposite = amount * Math.sign(dot);
    } else {
      var acos = Math.acos(Math.abs(dot));
      var invSin = 1 / Math.sin(acos);
      inverse = Math.sin((1 - amount) * acos) * invSin;
      opposite = Math.sin(amount * acos) * invSin * Math.sign(dot);
    }
    out.x = inverse * start.x + opposite * end.x;
    out.y = inverse * start.y + opposite * end.y;
    out.z = inverse * start.z + opposite * end.z;
    out.w = inverse * start.w + opposite * end.w;
    out._onValueChanged && out._onValueChanged();
  };
  Quaternion2.normalize = function normalize(a, out) {
    var _x = a._x, _y = a._y, _z = a._z, _w = a._w;
    var len = Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);
    if (len > MathUtil.zeroTolerance) {
      len = 1 / len;
      out._x = _x * len;
      out._y = _y * len;
      out._z = _z * len;
      out._w = _w * len;
      out._onValueChanged && out._onValueChanged();
    }
  };
  Quaternion2.rotationX = function rotationX(rad, out) {
    rad *= 0.5;
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out._x = s;
    out._y = 0;
    out._z = 0;
    out._w = c;
    out._onValueChanged && out._onValueChanged();
  };
  Quaternion2.rotationY = function rotationY(rad, out) {
    rad *= 0.5;
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out._x = 0;
    out._y = s;
    out._z = 0;
    out._w = c;
    out._onValueChanged && out._onValueChanged();
  };
  Quaternion2.rotationZ = function rotationZ(rad, out) {
    rad *= 0.5;
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out._x = 0;
    out._y = 0;
    out._z = s;
    out._w = c;
    out._onValueChanged && out._onValueChanged();
  };
  Quaternion2.rotateX = function rotateX(quaternion, rad, out) {
    var _x = quaternion._x, _y = quaternion._y, _z = quaternion._z, _w = quaternion._w;
    rad *= 0.5;
    var bx = Math.sin(rad);
    var bw = Math.cos(rad);
    out._x = _x * bw + _w * bx;
    out._y = _y * bw + _z * bx;
    out._z = _z * bw - _y * bx;
    out._w = _w * bw - _x * bx;
    out._onValueChanged && out._onValueChanged();
  };
  Quaternion2.rotateY = function rotateY(quaternion, rad, out) {
    var _x = quaternion._x, _y = quaternion._y, _z = quaternion._z, _w = quaternion._w;
    rad *= 0.5;
    var by = Math.sin(rad);
    var bw = Math.cos(rad);
    out._x = _x * bw - _z * by;
    out._y = _y * bw + _w * by;
    out._z = _z * bw + _x * by;
    out._w = _w * bw - _y * by;
    out._onValueChanged && out._onValueChanged();
  };
  Quaternion2.rotateZ = function rotateZ(quaternion, rad, out) {
    var _x = quaternion._x, _y = quaternion._y, _z = quaternion._z, _w = quaternion._w;
    rad *= 0.5;
    var bz = Math.sin(rad);
    var bw = Math.cos(rad);
    out._x = _x * bw + _y * bz;
    out._y = _y * bw - _x * bz;
    out._z = _z * bw + _w * bz;
    out._w = _w * bw - _z * bz;
    out._onValueChanged && out._onValueChanged();
  };
  Quaternion2.scale = function scale(a, s, out) {
    out._x = a._x * s;
    out._y = a._y * s;
    out._z = a._z * s;
    out._w = a._w * s;
    out._onValueChanged && out._onValueChanged();
  };
  _create_class(Quaternion2, [
    {
      key: "x",
      get: (
        /**
        * The x component of the quaternion.
        */
        function get() {
          return this._x;
        }
      ),
      set: function set(value) {
        this._x = value;
        this._onValueChanged && this._onValueChanged();
      }
    },
    {
      key: "y",
      get: (
        /**
        * The y component of the quaternion.
        */
        function get() {
          return this._y;
        }
      ),
      set: function set(value) {
        this._y = value;
        this._onValueChanged && this._onValueChanged();
      }
    },
    {
      key: "z",
      get: (
        /**
        * The z component of the quaternion.
        */
        function get() {
          return this._z;
        }
      ),
      set: function set(value) {
        this._z = value;
        this._onValueChanged && this._onValueChanged();
      }
    },
    {
      key: "normalized",
      get: (
        /**
        * Indicting whether this instance is normalized.
        */
        function get() {
          return Math.abs(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w - 1) < MathUtil.zeroTolerance;
        }
      )
    },
    {
      key: "w",
      get: (
        /**
        * The w component of the quaternion.
        */
        function get() {
          return this._w;
        }
      ),
      set: function set(value) {
        this._w = value;
        this._onValueChanged && this._onValueChanged();
      }
    }
  ]);
  return Quaternion2;
}();
(function() {
  Quaternion._tempVector3 = new Vector3();
})();
(function() {
  Quaternion._tempQuat1 = new Quaternion();
})();
var Matrix = function() {
  function Matrix2(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) {
    if (m11 === void 0)
      m11 = 1;
    if (m12 === void 0)
      m12 = 0;
    if (m13 === void 0)
      m13 = 0;
    if (m14 === void 0)
      m14 = 0;
    if (m21 === void 0)
      m21 = 0;
    if (m22 === void 0)
      m22 = 1;
    if (m23 === void 0)
      m23 = 0;
    if (m24 === void 0)
      m24 = 0;
    if (m31 === void 0)
      m31 = 0;
    if (m32 === void 0)
      m32 = 0;
    if (m33 === void 0)
      m33 = 1;
    if (m34 === void 0)
      m34 = 0;
    if (m41 === void 0)
      m41 = 0;
    if (m42 === void 0)
      m42 = 0;
    if (m43 === void 0)
      m43 = 0;
    if (m44 === void 0)
      m44 = 1;
    this.elements = new Float32Array(16);
    var e = this.elements;
    e[0] = m11;
    e[1] = m12;
    e[2] = m13;
    e[3] = m14;
    e[4] = m21;
    e[5] = m22;
    e[6] = m23;
    e[7] = m24;
    e[8] = m31;
    e[9] = m32;
    e[10] = m33;
    e[11] = m34;
    e[12] = m41;
    e[13] = m42;
    e[14] = m43;
    e[15] = m44;
  }
  var _proto = Matrix2.prototype;
  _proto.set = function set(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) {
    var e = this.elements;
    e[0] = m11;
    e[1] = m12;
    e[2] = m13;
    e[3] = m14;
    e[4] = m21;
    e[5] = m22;
    e[6] = m23;
    e[7] = m24;
    e[8] = m31;
    e[9] = m32;
    e[10] = m33;
    e[11] = m34;
    e[12] = m41;
    e[13] = m42;
    e[14] = m43;
    e[15] = m44;
    return this;
  };
  _proto.multiply = function multiply(right) {
    Matrix2.multiply(this, right, this);
    return this;
  };
  _proto.determinant = function determinant() {
    var e = this.elements;
    var a11 = e[0], a12 = e[1], a13 = e[2], a14 = e[3];
    var a21 = e[4], a22 = e[5], a23 = e[6], a24 = e[7];
    var a31 = e[8], a32 = e[9], a33 = e[10], a34 = e[11];
    var a41 = e[12], a42 = e[13], a43 = e[14], a44 = e[15];
    var b00 = a11 * a22 - a12 * a21;
    var b01 = a11 * a23 - a13 * a21;
    var b02 = a11 * a24 - a14 * a21;
    var b03 = a12 * a23 - a13 * a22;
    var b04 = a12 * a24 - a14 * a22;
    var b05 = a13 * a24 - a14 * a23;
    var b06 = a31 * a42 - a32 * a41;
    var b07 = a31 * a43 - a33 * a41;
    var b08 = a31 * a44 - a34 * a41;
    var b09 = a32 * a43 - a33 * a42;
    var b10 = a32 * a44 - a34 * a42;
    var b11 = a33 * a44 - a34 * a43;
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
  };
  _proto.decompose = function decompose(translation, rotation, scale) {
    var rm = Matrix2._tempMat30;
    var e = this.elements;
    var rme = rm.elements;
    var m11 = e[0];
    var m12 = e[1];
    var m13 = e[2];
    var m14 = e[3];
    var m21 = e[4];
    var m22 = e[5];
    var m23 = e[6];
    var m24 = e[7];
    var m31 = e[8];
    var m32 = e[9];
    var m33 = e[10];
    var m34 = e[11];
    translation.set(e[12], e[13], e[14]);
    var xs = Math.sign(m11 * m12 * m13 * m14) < 0 ? -1 : 1;
    var ys = Math.sign(m21 * m22 * m23 * m24) < 0 ? -1 : 1;
    var zs = Math.sign(m31 * m32 * m33 * m34) < 0 ? -1 : 1;
    var sx = xs * Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
    var sy = ys * Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
    var sz = zs * Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);
    scale.set(sx, sy, sz);
    if (Math.abs(sx) < MathUtil.zeroTolerance || Math.abs(sy) < MathUtil.zeroTolerance || Math.abs(sz) < MathUtil.zeroTolerance) {
      rotation.identity();
      return false;
    } else {
      var invSX = 1 / sx;
      var invSY = 1 / sy;
      var invSZ = 1 / sz;
      rme[0] = m11 * invSX;
      rme[1] = m12 * invSX;
      rme[2] = m13 * invSX;
      rme[3] = m21 * invSY;
      rme[4] = m22 * invSY;
      rme[5] = m23 * invSY;
      rme[6] = m31 * invSZ;
      rme[7] = m32 * invSZ;
      rme[8] = m33 * invSZ;
      Quaternion.rotationMatrix3x3(rm, rotation);
      return true;
    }
  };
  _proto.getRotation = function getRotation(out) {
    var e = this.elements;
    var trace = e[0] + e[5] + e[10];
    if (trace > MathUtil.zeroTolerance) {
      var s = Math.sqrt(trace + 1) * 2;
      out._w = 0.25 * s;
      out._x = (e[6] - e[9]) / s;
      out._y = (e[8] - e[2]) / s;
      out._z = (e[1] - e[4]) / s;
    } else if (e[0] > e[5] && e[0] > e[10]) {
      var s1 = Math.sqrt(1 + e[0] - e[5] - e[10]) * 2;
      out._w = (e[6] - e[9]) / s1;
      out._x = 0.25 * s1;
      out._y = (e[1] + e[4]) / s1;
      out._z = (e[8] + e[2]) / s1;
    } else if (e[5] > e[10]) {
      var s2 = Math.sqrt(1 + e[5] - e[0] - e[10]) * 2;
      out._w = (e[8] - e[2]) / s2;
      out._x = (e[1] + e[4]) / s2;
      out._y = 0.25 * s2;
      out._z = (e[6] + e[9]) / s2;
    } else {
      var s3 = Math.sqrt(1 + e[10] - e[0] - e[5]) * 2;
      out._w = (e[1] - e[4]) / s3;
      out._x = (e[8] + e[2]) / s3;
      out._y = (e[6] + e[9]) / s3;
      out._z = 0.25 * s3;
    }
    out._onValueChanged && out._onValueChanged();
    return out;
  };
  _proto.getScaling = function getScaling(out) {
    var e = this.elements;
    var m11 = e[0], m12 = e[1], m13 = e[2];
    var m21 = e[4], m22 = e[5], m23 = e[6];
    var m31 = e[8], m32 = e[9], m33 = e[10];
    out.set(Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13), Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23), Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33));
    return out;
  };
  _proto.getTranslation = function getTranslation(out) {
    var e = this.elements;
    out.set(e[12], e[13], e[14]);
    return out;
  };
  _proto.identity = function identity() {
    var e = this.elements;
    e[0] = 1;
    e[1] = 0;
    e[2] = 0;
    e[3] = 0;
    e[4] = 0;
    e[5] = 1;
    e[6] = 0;
    e[7] = 0;
    e[8] = 0;
    e[9] = 0;
    e[10] = 1;
    e[11] = 0;
    e[12] = 0;
    e[13] = 0;
    e[14] = 0;
    e[15] = 1;
    return this;
  };
  _proto.invert = function invert() {
    Matrix2.invert(this, this);
    return this;
  };
  _proto.rotateAxisAngle = function rotateAxisAngle(axis, r) {
    Matrix2.rotateAxisAngle(this, axis, r, this);
    return this;
  };
  _proto.scale = function scale(s) {
    Matrix2.scale(this, s, this);
    return this;
  };
  _proto.translate = function translate(v) {
    Matrix2.translate(this, v, this);
    return this;
  };
  _proto.transpose = function transpose() {
    Matrix2.transpose(this, this);
    return this;
  };
  _proto.clone = function clone2() {
    var e = this.elements;
    var ret = new Matrix2(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8], e[9], e[10], e[11], e[12], e[13], e[14], e[15]);
    return ret;
  };
  _proto.copyFrom = function copyFrom(source) {
    var e = this.elements;
    var se = source.elements;
    e[0] = se[0];
    e[1] = se[1];
    e[2] = se[2];
    e[3] = se[3];
    e[4] = se[4];
    e[5] = se[5];
    e[6] = se[6];
    e[7] = se[7];
    e[8] = se[8];
    e[9] = se[9];
    e[10] = se[10];
    e[11] = se[11];
    e[12] = se[12];
    e[13] = se[13];
    e[14] = se[14];
    e[15] = se[15];
    return this;
  };
  _proto.copyFromArray = function copyFromArray(array, offset) {
    if (offset === void 0)
      offset = 0;
    var srce = this.elements;
    for (var i = 0; i < 16; i++) {
      srce[i] = array[i + offset];
    }
    return this;
  };
  _proto.copyToArray = function copyToArray(out, outOffset) {
    if (outOffset === void 0)
      outOffset = 0;
    var e = this.elements;
    out[outOffset] = e[0];
    out[outOffset + 1] = e[1];
    out[outOffset + 2] = e[2];
    out[outOffset + 3] = e[3];
    out[outOffset + 4] = e[4];
    out[outOffset + 5] = e[5];
    out[outOffset + 6] = e[6];
    out[outOffset + 7] = e[7];
    out[outOffset + 8] = e[8];
    out[outOffset + 9] = e[9];
    out[outOffset + 10] = e[10];
    out[outOffset + 11] = e[11];
    out[outOffset + 12] = e[12];
    out[outOffset + 13] = e[13];
    out[outOffset + 14] = e[14];
    out[outOffset + 15] = e[15];
  };
  Matrix2.multiply = function multiply(left, right, out) {
    var le = left.elements;
    var re = right.elements;
    var oe = out.elements;
    var l11 = le[0], l12 = le[1], l13 = le[2], l14 = le[3], l21 = le[4], l22 = le[5], l23 = le[6], l24 = le[7], l31 = le[8], l32 = le[9], l33 = le[10], l34 = le[11], l41 = le[12], l42 = le[13], l43 = le[14], l44 = le[15];
    var r11 = re[0], r12 = re[1], r13 = re[2], r14 = re[3], r21 = re[4], r22 = re[5], r23 = re[6], r24 = re[7], r31 = re[8], r32 = re[9], r33 = re[10], r34 = re[11], r41 = re[12], r42 = re[13], r43 = re[14], r44 = re[15];
    oe[0] = l11 * r11 + l21 * r12 + l31 * r13 + l41 * r14;
    oe[1] = l12 * r11 + l22 * r12 + l32 * r13 + l42 * r14;
    oe[2] = l13 * r11 + l23 * r12 + l33 * r13 + l43 * r14;
    oe[3] = l14 * r11 + l24 * r12 + l34 * r13 + l44 * r14;
    oe[4] = l11 * r21 + l21 * r22 + l31 * r23 + l41 * r24;
    oe[5] = l12 * r21 + l22 * r22 + l32 * r23 + l42 * r24;
    oe[6] = l13 * r21 + l23 * r22 + l33 * r23 + l43 * r24;
    oe[7] = l14 * r21 + l24 * r22 + l34 * r23 + l44 * r24;
    oe[8] = l11 * r31 + l21 * r32 + l31 * r33 + l41 * r34;
    oe[9] = l12 * r31 + l22 * r32 + l32 * r33 + l42 * r34;
    oe[10] = l13 * r31 + l23 * r32 + l33 * r33 + l43 * r34;
    oe[11] = l14 * r31 + l24 * r32 + l34 * r33 + l44 * r34;
    oe[12] = l11 * r41 + l21 * r42 + l31 * r43 + l41 * r44;
    oe[13] = l12 * r41 + l22 * r42 + l32 * r43 + l42 * r44;
    oe[14] = l13 * r41 + l23 * r42 + l33 * r43 + l43 * r44;
    oe[15] = l14 * r41 + l24 * r42 + l34 * r43 + l44 * r44;
  };
  Matrix2.equals = function equals(left, right) {
    var le = left.elements;
    var re = right.elements;
    return MathUtil.equals(le[0], re[0]) && MathUtil.equals(le[1], re[1]) && MathUtil.equals(le[2], re[2]) && MathUtil.equals(le[3], re[3]) && MathUtil.equals(le[4], re[4]) && MathUtil.equals(le[5], re[5]) && MathUtil.equals(le[6], re[6]) && MathUtil.equals(le[7], re[7]) && MathUtil.equals(le[8], re[8]) && MathUtil.equals(le[9], re[9]) && MathUtil.equals(le[10], re[10]) && MathUtil.equals(le[11], re[11]) && MathUtil.equals(le[12], re[12]) && MathUtil.equals(le[13], re[13]) && MathUtil.equals(le[14], re[14]) && MathUtil.equals(le[15], re[15]);
  };
  Matrix2.lerp = function lerp(start, end, t, out) {
    var se = start.elements;
    var ee = end.elements;
    var oe = out.elements;
    var inv = 1 - t;
    oe[0] = se[0] * inv + ee[0] * t;
    oe[1] = se[1] * inv + ee[1] * t;
    oe[2] = se[2] * inv + ee[2] * t;
    oe[3] = se[3] * inv + ee[3] * t;
    oe[4] = se[4] * inv + ee[4] * t;
    oe[5] = se[5] * inv + ee[5] * t;
    oe[6] = se[6] * inv + ee[6] * t;
    oe[7] = se[7] * inv + ee[7] * t;
    oe[8] = se[8] * inv + ee[8] * t;
    oe[9] = se[9] * inv + ee[9] * t;
    oe[10] = se[10] * inv + ee[10] * t;
    oe[11] = se[11] * inv + ee[11] * t;
    oe[12] = se[12] * inv + ee[12] * t;
    oe[13] = se[13] * inv + ee[13] * t;
    oe[14] = se[14] * inv + ee[14] * t;
    oe[15] = se[15] * inv + ee[15] * t;
  };
  Matrix2.add = function add(left, right, out) {
    var le = left.elements;
    var re = right.elements;
    var oe = out.elements;
    oe[0] = le[0] + re[0];
    oe[1] = le[1] + re[1];
    oe[2] = le[2] + re[2];
    oe[3] = le[3] + re[3];
    oe[4] = le[4] + re[4];
    oe[5] = le[5] + re[5];
    oe[6] = le[6] + re[6];
    oe[7] = le[7] + re[7];
    oe[8] = le[8] + re[8];
    oe[9] = le[9] + re[9];
    oe[10] = le[10] + re[10];
    oe[11] = le[11] + re[11];
    oe[12] = le[12] + re[12];
    oe[13] = le[13] + re[13];
    oe[14] = le[14] + re[14];
    oe[15] = le[15] + re[15];
  };
  Matrix2.multiplyScalar = function multiplyScalar(source, scalar, out) {
    var se = source.elements;
    var oe = out.elements;
    oe[0] = se[0] * scalar;
    oe[1] = se[1] * scalar;
    oe[2] = se[2] * scalar;
    oe[3] = se[3] * scalar;
    oe[4] = se[4] * scalar;
    oe[5] = se[5] * scalar;
    oe[6] = se[6] * scalar;
    oe[7] = se[7] * scalar;
    oe[8] = se[8] * scalar;
    oe[9] = se[9] * scalar;
    oe[10] = se[10] * scalar;
    oe[11] = se[11] * scalar;
    oe[12] = se[12] * scalar;
    oe[13] = se[13] * scalar;
    oe[14] = se[14] * scalar;
    oe[15] = se[15] * scalar;
  };
  Matrix2.rotationQuaternion = function rotationQuaternion(quaternion, out) {
    var oe = out.elements;
    var x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var yx = y * x2;
    var yy = y * y2;
    var zx = z * x2;
    var zy = z * y2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    oe[0] = 1 - yy - zz;
    oe[1] = yx + wz;
    oe[2] = zx - wy;
    oe[3] = 0;
    oe[4] = yx - wz;
    oe[5] = 1 - xx - zz;
    oe[6] = zy + wx;
    oe[7] = 0;
    oe[8] = zx + wy;
    oe[9] = zy - wx;
    oe[10] = 1 - xx - yy;
    oe[11] = 0;
    oe[12] = 0;
    oe[13] = 0;
    oe[14] = 0;
    oe[15] = 1;
  };
  Matrix2.rotationAxisAngle = function rotationAxisAngle(axis, r, out) {
    var oe = out.elements;
    var x = axis._x, y = axis._y, z = axis._z;
    var len = Math.sqrt(x * x + y * y + z * z);
    var s, c, t;
    if (Math.abs(len) < MathUtil.zeroTolerance) {
      return;
    }
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;
    s = Math.sin(r);
    c = Math.cos(r);
    t = 1 - c;
    oe[0] = x * x * t + c;
    oe[1] = y * x * t + z * s;
    oe[2] = z * x * t - y * s;
    oe[3] = 0;
    oe[4] = x * y * t - z * s;
    oe[5] = y * y * t + c;
    oe[6] = z * y * t + x * s;
    oe[7] = 0;
    oe[8] = x * z * t + y * s;
    oe[9] = y * z * t - x * s;
    oe[10] = z * z * t + c;
    oe[11] = 0;
    oe[12] = 0;
    oe[13] = 0;
    oe[14] = 0;
    oe[15] = 1;
  };
  Matrix2.rotationTranslation = function rotationTranslation(quaternion, translation, out) {
    Matrix2.rotationQuaternion(quaternion, out);
    var oe = out.elements;
    oe[12] = translation._x;
    oe[13] = translation._y;
    oe[14] = translation._z;
  };
  Matrix2.affineTransformation = function affineTransformation(scale, rotation, translation, out) {
    var oe = out.elements;
    var x = rotation._x, y = rotation._y, z = rotation._z, w = rotation._w;
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    var sx = scale._x;
    var sy = scale._y;
    var sz = scale._z;
    oe[0] = (1 - (yy + zz)) * sx;
    oe[1] = (xy + wz) * sx;
    oe[2] = (xz - wy) * sx;
    oe[3] = 0;
    oe[4] = (xy - wz) * sy;
    oe[5] = (1 - (xx + zz)) * sy;
    oe[6] = (yz + wx) * sy;
    oe[7] = 0;
    oe[8] = (xz + wy) * sz;
    oe[9] = (yz - wx) * sz;
    oe[10] = (1 - (xx + yy)) * sz;
    oe[11] = 0;
    oe[12] = translation._x;
    oe[13] = translation._y;
    oe[14] = translation._z;
    oe[15] = 1;
  };
  Matrix2.scaling = function scaling(s, out) {
    var oe = out.elements;
    oe[0] = s._x;
    oe[1] = 0;
    oe[2] = 0;
    oe[3] = 0;
    oe[4] = 0;
    oe[5] = s._y;
    oe[6] = 0;
    oe[7] = 0;
    oe[8] = 0;
    oe[9] = 0;
    oe[10] = s._z;
    oe[11] = 0;
    oe[12] = 0;
    oe[13] = 0;
    oe[14] = 0;
    oe[15] = 1;
  };
  Matrix2.translation = function translation(translation, out) {
    var oe = out.elements;
    oe[0] = 1;
    oe[1] = 0;
    oe[2] = 0;
    oe[3] = 0;
    oe[4] = 0;
    oe[5] = 1;
    oe[6] = 0;
    oe[7] = 0;
    oe[8] = 0;
    oe[9] = 0;
    oe[10] = 1;
    oe[11] = 0;
    oe[12] = translation._x;
    oe[13] = translation._y;
    oe[14] = translation._z;
    oe[15] = 1;
  };
  Matrix2.invert = function invert(a, out) {
    var ae = a.elements;
    var oe = out.elements;
    var a11 = ae[0], a12 = ae[1], a13 = ae[2], a14 = ae[3];
    var a21 = ae[4], a22 = ae[5], a23 = ae[6], a24 = ae[7];
    var a31 = ae[8], a32 = ae[9], a33 = ae[10], a34 = ae[11];
    var a41 = ae[12], a42 = ae[13], a43 = ae[14], a44 = ae[15];
    var b00 = a11 * a22 - a12 * a21;
    var b01 = a11 * a23 - a13 * a21;
    var b02 = a11 * a24 - a14 * a21;
    var b03 = a12 * a23 - a13 * a22;
    var b04 = a12 * a24 - a14 * a22;
    var b05 = a13 * a24 - a14 * a23;
    var b06 = a31 * a42 - a32 * a41;
    var b07 = a31 * a43 - a33 * a41;
    var b08 = a31 * a44 - a34 * a41;
    var b09 = a32 * a43 - a33 * a42;
    var b10 = a32 * a44 - a34 * a42;
    var b11 = a33 * a44 - a34 * a43;
    var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
      return null;
    }
    det = 1 / det;
    oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;
    oe[1] = (a13 * b10 - a12 * b11 - a14 * b09) * det;
    oe[2] = (a42 * b05 - a43 * b04 + a44 * b03) * det;
    oe[3] = (a33 * b04 - a32 * b05 - a34 * b03) * det;
    oe[4] = (a23 * b08 - a21 * b11 - a24 * b07) * det;
    oe[5] = (a11 * b11 - a13 * b08 + a14 * b07) * det;
    oe[6] = (a43 * b02 - a41 * b05 - a44 * b01) * det;
    oe[7] = (a31 * b05 - a33 * b02 + a34 * b01) * det;
    oe[8] = (a21 * b10 - a22 * b08 + a24 * b06) * det;
    oe[9] = (a12 * b08 - a11 * b10 - a14 * b06) * det;
    oe[10] = (a41 * b04 - a42 * b02 + a44 * b00) * det;
    oe[11] = (a32 * b02 - a31 * b04 - a34 * b00) * det;
    oe[12] = (a22 * b07 - a21 * b09 - a23 * b06) * det;
    oe[13] = (a11 * b09 - a12 * b07 + a13 * b06) * det;
    oe[14] = (a42 * b01 - a41 * b03 - a43 * b00) * det;
    oe[15] = (a31 * b03 - a32 * b01 + a33 * b00) * det;
  };
  Matrix2.lookAt = function lookAt(eye, target, up, out) {
    var oe = out.elements;
    var xAxis = Matrix2._tempVec30;
    var yAxis = Matrix2._tempVec31;
    var zAxis = Matrix2._tempVec32;
    Vector3.subtract(eye, target, zAxis);
    zAxis.normalize();
    Vector3.cross(up, zAxis, xAxis);
    xAxis.normalize();
    Vector3.cross(zAxis, xAxis, yAxis);
    oe[0] = xAxis._x;
    oe[1] = yAxis._x;
    oe[2] = zAxis._x;
    oe[3] = 0;
    oe[4] = xAxis._y;
    oe[5] = yAxis._y;
    oe[6] = zAxis._y;
    oe[7] = 0;
    oe[8] = xAxis._z;
    oe[9] = yAxis._z;
    oe[10] = zAxis._z;
    oe[11] = 0;
    oe[12] = -Vector3.dot(xAxis, eye);
    oe[13] = -Vector3.dot(yAxis, eye);
    oe[14] = -Vector3.dot(zAxis, eye);
    oe[15] = 1;
  };
  Matrix2.ortho = function ortho(left, right, bottom, top, near, far, out) {
    var oe = out.elements;
    var lr = 1 / (left - right);
    var bt = 1 / (bottom - top);
    var nf = 1 / (near - far);
    oe[0] = -2 * lr;
    oe[1] = 0;
    oe[2] = 0;
    oe[3] = 0;
    oe[4] = 0;
    oe[5] = -2 * bt;
    oe[6] = 0;
    oe[7] = 0;
    oe[8] = 0;
    oe[9] = 0;
    oe[10] = 2 * nf;
    oe[11] = 0;
    oe[12] = (left + right) * lr;
    oe[13] = (top + bottom) * bt;
    oe[14] = (far + near) * nf;
    oe[15] = 1;
  };
  Matrix2.perspective = function perspective(fovY, aspect, near, far, out) {
    var oe = out.elements;
    var f = 1 / Math.tan(fovY / 2);
    var nf = 1 / (near - far);
    oe[0] = f / aspect;
    oe[1] = 0;
    oe[2] = 0;
    oe[3] = 0;
    oe[4] = 0;
    oe[5] = f;
    oe[6] = 0;
    oe[7] = 0;
    oe[8] = 0;
    oe[9] = 0;
    oe[10] = (far + near) * nf;
    oe[11] = -1;
    oe[12] = 0;
    oe[13] = 0;
    oe[14] = 2 * far * near * nf;
    oe[15] = 0;
  };
  Matrix2.rotateAxisAngle = function rotateAxisAngle(m, axis, r, out) {
    var x = axis._x, y = axis._y, z = axis._z;
    var len = Math.sqrt(x * x + y * y + z * z);
    if (Math.abs(len) < MathUtil.zeroTolerance) {
      return;
    }
    var me = m.elements;
    var oe = out.elements;
    var s, c, t;
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;
    s = Math.sin(r);
    c = Math.cos(r);
    t = 1 - c;
    var a11 = me[0], a12 = me[1], a13 = me[2], a14 = me[3];
    var a21 = me[4], a22 = me[5], a23 = me[6], a24 = me[7];
    var a31 = me[8], a32 = me[9], a33 = me[10], a34 = me[11];
    var b11 = x * x * t + c;
    var b12 = y * x * t + z * s;
    var b13 = z * x * t - y * s;
    var b21 = x * y * t - z * s;
    var b22 = y * y * t + c;
    var b23 = z * y * t + x * s;
    var b31 = x * z * t + y * s;
    var b32 = y * z * t - x * s;
    var b33 = z * z * t + c;
    oe[0] = a11 * b11 + a21 * b12 + a31 * b13;
    oe[1] = a12 * b11 + a22 * b12 + a32 * b13;
    oe[2] = a13 * b11 + a23 * b12 + a33 * b13;
    oe[3] = a14 * b11 + a24 * b12 + a34 * b13;
    oe[4] = a11 * b21 + a21 * b22 + a31 * b23;
    oe[5] = a12 * b21 + a22 * b22 + a32 * b23;
    oe[6] = a13 * b21 + a23 * b22 + a33 * b23;
    oe[7] = a14 * b21 + a24 * b22 + a34 * b23;
    oe[8] = a11 * b31 + a21 * b32 + a31 * b33;
    oe[9] = a12 * b31 + a22 * b32 + a32 * b33;
    oe[10] = a13 * b31 + a23 * b32 + a33 * b33;
    oe[11] = a14 * b31 + a24 * b32 + a34 * b33;
    if (m !== out) {
      oe[12] = me[12];
      oe[13] = me[13];
      oe[14] = me[14];
      oe[15] = me[15];
    }
  };
  Matrix2.scale = function scale(m, s, out) {
    var me = m.elements;
    var oe = out.elements;
    var x = s._x, y = s._y, z = s._z;
    oe[0] = me[0] * x;
    oe[1] = me[1] * x;
    oe[2] = me[2] * x;
    oe[3] = me[3] * x;
    oe[4] = me[4] * y;
    oe[5] = me[5] * y;
    oe[6] = me[6] * y;
    oe[7] = me[7] * y;
    oe[8] = me[8] * z;
    oe[9] = me[9] * z;
    oe[10] = me[10] * z;
    oe[11] = me[11] * z;
    oe[12] = me[12];
    oe[13] = me[13];
    oe[14] = me[14];
    oe[15] = me[15];
  };
  Matrix2.translate = function translate(m, v, out) {
    var me = m.elements;
    var oe = out.elements;
    var x = v._x, y = v._y, z = v._z;
    if (m === out) {
      oe[12] = me[0] * x + me[4] * y + me[8] * z + me[12];
      oe[13] = me[1] * x + me[5] * y + me[9] * z + me[13];
      oe[14] = me[2] * x + me[6] * y + me[10] * z + me[14];
      oe[15] = me[3] * x + me[7] * y + me[11] * z + me[15];
    } else {
      var a11 = me[0], a12 = me[1], a13 = me[2], a14 = me[3];
      var a21 = me[4], a22 = me[5], a23 = me[6], a24 = me[7];
      var a31 = me[8], a32 = me[9], a33 = me[10], a34 = me[11];
      oe[0] = a11, oe[1] = a12, oe[2] = a13, oe[3] = a14;
      oe[4] = a21, oe[5] = a22, oe[6] = a23, oe[7] = a24;
      oe[8] = a31, oe[9] = a32, oe[10] = a33, oe[11] = a34;
      oe[12] = a11 * x + a21 * y + a31 * z + me[12];
      oe[13] = a12 * x + a22 * y + a32 * z + me[13];
      oe[14] = a13 * x + a23 * y + a33 * z + me[14];
      oe[15] = a14 * x + a24 * y + a34 * z + me[15];
    }
  };
  Matrix2.transpose = function transpose(a, out) {
    var ae = a.elements;
    var oe = out.elements;
    if (out === a) {
      var a12 = ae[1];
      var a13 = ae[2];
      var a14 = ae[3];
      var a23 = ae[6];
      var a24 = ae[7];
      var a34 = ae[11];
      oe[1] = ae[4];
      oe[2] = ae[8];
      oe[3] = ae[12];
      oe[4] = a12;
      oe[6] = ae[9];
      oe[7] = ae[13];
      oe[8] = a13;
      oe[9] = a23;
      oe[11] = ae[14];
      oe[12] = a14;
      oe[13] = a24;
      oe[14] = a34;
    } else {
      oe[0] = ae[0];
      oe[1] = ae[4];
      oe[2] = ae[8];
      oe[3] = ae[12];
      oe[4] = ae[1];
      oe[5] = ae[5];
      oe[6] = ae[9];
      oe[7] = ae[13];
      oe[8] = ae[2];
      oe[9] = ae[6];
      oe[10] = ae[10];
      oe[11] = ae[14];
      oe[12] = ae[3];
      oe[13] = ae[7];
      oe[14] = ae[11];
      oe[15] = ae[15];
    }
  };
  return Matrix2;
}();
(function() {
  Matrix._tempVec30 = new Vector3();
})();
(function() {
  Matrix._tempVec31 = new Vector3();
})();
(function() {
  Matrix._tempVec32 = new Vector3();
})();
(function() {
  Matrix._tempMat30 = new Matrix3x3();
})();
(function() {
  Matrix._identity = new Matrix(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
})();
var Ray = function() {
  function Ray2(origin, direction) {
    if (origin === void 0)
      origin = null;
    if (direction === void 0)
      direction = null;
    this.origin = new Vector3();
    this.direction = new Vector3();
    origin && this.origin.copyFrom(origin);
    direction && this.direction.copyFrom(direction);
  }
  var _proto = Ray2.prototype;
  _proto.intersectPlane = function intersectPlane(plane) {
    return CollisionUtil.intersectsRayAndPlane(this, plane);
  };
  _proto.intersectSphere = function intersectSphere(sphere) {
    return CollisionUtil.intersectsRayAndSphere(this, sphere);
  };
  _proto.intersectBox = function intersectBox(box) {
    return CollisionUtil.intersectsRayAndBox(this, box);
  };
  _proto.getPoint = function getPoint(distance, out) {
    Vector3.scale(this.direction, distance, out);
    return out.add(this.origin);
  };
  return Ray2;
}();
var Vector2 = function() {
  function Vector22(x, y) {
    if (x === void 0)
      x = 0;
    if (y === void 0)
      y = 0;
    this._onValueChanged = null;
    this._x = x;
    this._y = y;
  }
  var _proto = Vector22.prototype;
  _proto.set = function set(x, y) {
    this._x = x;
    this._y = y;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.add = function add(right) {
    this._x += right._x;
    this._y += right._y;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.subtract = function subtract(right) {
    this._x -= right._x;
    this._y -= right._y;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.multiply = function multiply(right) {
    this._x *= right._x;
    this._y *= right._y;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.divide = function divide(right) {
    this._x /= right._x;
    this._y /= right._y;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.length = function length2() {
    var _this = this, _x = _this._x, _y = _this._y;
    return Math.sqrt(_x * _x + _y * _y);
  };
  _proto.lengthSquared = function lengthSquared() {
    var _this = this, _x = _this._x, _y = _this._y;
    return _x * _x + _y * _y;
  };
  _proto.negate = function negate() {
    this._x = -this._x;
    this._y = -this._y;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.normalize = function normalize() {
    Vector22.normalize(this, this);
    return this;
  };
  _proto.scale = function scale(s) {
    this._x *= s;
    this._y *= s;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.clone = function clone2() {
    return new Vector22(this._x, this._y);
  };
  _proto.copyFrom = function copyFrom(source) {
    this._x = source.x;
    this._y = source.y;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.copyFromArray = function copyFromArray(array, offset) {
    if (offset === void 0)
      offset = 0;
    this._x = array[offset];
    this._y = array[offset + 1];
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.copyToArray = function copyToArray(out, outOffset) {
    if (outOffset === void 0)
      outOffset = 0;
    out[outOffset] = this._x;
    out[outOffset + 1] = this._y;
  };
  _proto.toJSON = function toJSON() {
    return {
      x: this._x,
      y: this._y
    };
  };
  Vector22.add = function add(left, right, out) {
    out._x = left._x + right._x;
    out._y = left._y + right._y;
    out._onValueChanged && out._onValueChanged();
  };
  Vector22.subtract = function subtract(left, right, out) {
    out._x = left._x - right._x;
    out._y = left._y - right._y;
    out._onValueChanged && out._onValueChanged();
  };
  Vector22.multiply = function multiply(left, right, out) {
    out._x = left._x * right._x;
    out._y = left._y * right._y;
    out._onValueChanged && out._onValueChanged();
  };
  Vector22.divide = function divide(left, right, out) {
    out._x = left._x / right._x;
    out._y = left._y / right._y;
    out._onValueChanged && out._onValueChanged();
  };
  Vector22.dot = function dot(left, right) {
    return left._x * right._x + left._y * right._y;
  };
  Vector22.distance = function distance(left, right) {
    var x = right._x - left._x;
    var y = right._y - left._y;
    return Math.sqrt(x * x + y * y);
  };
  Vector22.distanceSquared = function distanceSquared(left, right) {
    var x = right._x - left._x;
    var y = right._y - left._y;
    return x * x + y * y;
  };
  Vector22.equals = function equals(left, right) {
    return MathUtil.equals(left._x, right._x) && MathUtil.equals(left._y, right._y);
  };
  Vector22.lerp = function lerp(left, right, t, out) {
    var _x = left._x, _y = left._y;
    out._x = _x + (right._x - _x) * t;
    out._y = _y + (right._y - _y) * t;
    out._onValueChanged && out._onValueChanged();
  };
  Vector22.max = function max(left, right, out) {
    out._x = Math.max(left._x, right._x);
    out._y = Math.max(left._y, right._y);
    out._onValueChanged && out._onValueChanged();
  };
  Vector22.min = function min(left, right, out) {
    out._x = Math.min(left._x, right._x);
    out._y = Math.min(left._y, right._y);
    out._onValueChanged && out._onValueChanged();
  };
  Vector22.negate = function negate(left, out) {
    out._x = -left._x;
    out._y = -left._y;
    out._onValueChanged && out._onValueChanged();
  };
  Vector22.normalize = function normalize(left, out) {
    var _x = left._x, _y = left._y;
    var len = Math.sqrt(_x * _x + _y * _y);
    if (len > MathUtil.zeroTolerance) {
      len = 1 / len;
      out._x = _x * len;
      out._y = _y * len;
      out._onValueChanged && out._onValueChanged();
    }
  };
  Vector22.scale = function scale(left, s, out) {
    out._x = left._x * s;
    out._y = left._y * s;
    out._onValueChanged && out._onValueChanged();
  };
  _create_class(Vector22, [
    {
      key: "x",
      get: (
        /**
        * The x component of the vector.
        */
        function get() {
          return this._x;
        }
      ),
      set: function set(value) {
        this._x = value;
        this._onValueChanged && this._onValueChanged();
      }
    },
    {
      key: "y",
      get: (
        /**
        * The y component of the vector.
        */
        function get() {
          return this._y;
        }
      ),
      set: function set(value) {
        this._y = value;
        this._onValueChanged && this._onValueChanged();
      }
    }
  ]);
  return Vector22;
}();
(function() {
  Vector2._zero = new Vector2(0, 0);
})();
(function() {
  Vector2._one = new Vector2(1, 1);
})();
var Vector4 = function() {
  function Vector42(x, y, z, w) {
    if (x === void 0)
      x = 0;
    if (y === void 0)
      y = 0;
    if (z === void 0)
      z = 0;
    if (w === void 0)
      w = 0;
    this._onValueChanged = null;
    this._x = x;
    this._y = y;
    this._z = z;
    this._w = w;
  }
  var _proto = Vector42.prototype;
  _proto.set = function set(x, y, z, w) {
    this._x = x;
    this._y = y;
    this._z = z;
    this._w = w;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.add = function add(right) {
    this._x += right._x;
    this._y += right._y;
    this._z += right._z;
    this._w += right._w;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.subtract = function subtract(right) {
    this._x -= right._x;
    this._y -= right._y;
    this._z -= right._z;
    this._w -= right._w;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.multiply = function multiply(right) {
    this._x *= right._x;
    this._y *= right._y;
    this._z *= right._z;
    this._w *= right._w;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.divide = function divide(right) {
    this._x /= right._x;
    this._y /= right._y;
    this._z /= right._z;
    this._w /= right._w;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.length = function length2() {
    var _this = this, _x = _this._x, _y = _this._y, _z = _this._z, _w = _this._w;
    return Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);
  };
  _proto.lengthSquared = function lengthSquared() {
    var _this = this, _x = _this._x, _y = _this._y, _z = _this._z, _w = _this._w;
    return _x * _x + _y * _y + _z * _z + _w * _w;
  };
  _proto.negate = function negate() {
    this._x = -this._x;
    this._y = -this._y;
    this._z = -this._z;
    this._w = -this._w;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.normalize = function normalize() {
    Vector42.normalize(this, this);
    return this;
  };
  _proto.scale = function scale(s) {
    this._x *= s;
    this._y *= s;
    this._z *= s;
    this._w *= s;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.clone = function clone2() {
    var ret = new Vector42(this._x, this._y, this._z, this._w);
    return ret;
  };
  _proto.copyFrom = function copyFrom(source) {
    this._x = source.x;
    this._y = source.y;
    this._z = source.z;
    this._w = source.w;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.copyFromArray = function copyFromArray(array, offset) {
    if (offset === void 0)
      offset = 0;
    this._x = array[offset];
    this._y = array[offset + 1];
    this._z = array[offset + 2];
    this._w = array[offset + 3];
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.copyToArray = function copyToArray(out, outOffset) {
    if (outOffset === void 0)
      outOffset = 0;
    out[outOffset] = this._x;
    out[outOffset + 1] = this._y;
    out[outOffset + 2] = this._z;
    out[outOffset + 3] = this._w;
  };
  _proto.toJSON = function toJSON() {
    return {
      x: this._x,
      y: this._y,
      z: this._z,
      w: this._w
    };
  };
  Vector42.add = function add(left, right, out) {
    out._x = left._x + right._x;
    out._y = left._y + right._y;
    out._z = left._z + right._z;
    out._w = left._w + right._w;
    out._onValueChanged && out._onValueChanged();
  };
  Vector42.subtract = function subtract(left, right, out) {
    out._x = left._x - right._x;
    out._y = left._y - right._y;
    out._z = left._z - right._z;
    out._w = left._w - right._w;
    out._onValueChanged && out._onValueChanged();
  };
  Vector42.multiply = function multiply(left, right, out) {
    out._x = left._x * right._x;
    out._y = left._y * right._y;
    out._z = left._z * right._z;
    out._w = left._w * right._w;
    out._onValueChanged && out._onValueChanged();
  };
  Vector42.divide = function divide(left, right, out) {
    out._x = left._x / right._x;
    out._y = left._y / right._y;
    out._z = left._z / right._z;
    out._w = left._w / right._w;
    out._onValueChanged && out._onValueChanged();
  };
  Vector42.dot = function dot(left, right) {
    return left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;
  };
  Vector42.distance = function distance(a, b) {
    var x = b._x - a._x;
    var y = b._y - a._y;
    var z = b._z - a._z;
    var w = b._w - a._w;
    return Math.sqrt(x * x + y * y + z * z + w * w);
  };
  Vector42.distanceSquared = function distanceSquared(a, b) {
    var x = b._x - a._x;
    var y = b._y - a._y;
    var z = b._z - a._z;
    var w = b._w - a._w;
    return x * x + y * y + z * z + w * w;
  };
  Vector42.equals = function equals(left, right) {
    return MathUtil.equals(left._x, right._x) && MathUtil.equals(left._y, right._y) && MathUtil.equals(left._z, right._z) && MathUtil.equals(left._w, right._w);
  };
  Vector42.lerp = function lerp(start, end, t, out) {
    var _x = start._x, _y = start._y, _z = start._z, _w = start._w;
    out._x = _x + (end._x - _x) * t;
    out._y = _y + (end._y - _y) * t;
    out._z = _z + (end._z - _z) * t;
    out._w = _w + (end._w - _w) * t;
    out._onValueChanged && out._onValueChanged();
  };
  Vector42.max = function max(left, right, out) {
    out._x = Math.max(left._x, right._x);
    out._y = Math.max(left._y, right._y);
    out._z = Math.max(left._z, right._z);
    out._w = Math.max(left._w, right._w);
    out._onValueChanged && out._onValueChanged();
  };
  Vector42.min = function min(left, right, out) {
    out._x = Math.min(left._x, right._x);
    out._y = Math.min(left._y, right._y);
    out._z = Math.min(left._z, right._z);
    out._w = Math.min(left._w, right._w);
    out._onValueChanged && out._onValueChanged();
  };
  Vector42.negate = function negate(a, out) {
    out._x = -a._x;
    out._y = -a._y;
    out._z = -a._z;
    out._w = -a._w;
    out._onValueChanged && out._onValueChanged();
  };
  Vector42.normalize = function normalize(a, out) {
    var _x = a._x, _y = a._y, _z = a._z, _w = a._w;
    var len = Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);
    if (len > MathUtil.zeroTolerance) {
      len = 1 / len;
      out._x = _x * len;
      out._y = _y * len;
      out._z = _z * len;
      out._w = _w * len;
      out._onValueChanged && out._onValueChanged();
    }
  };
  Vector42.scale = function scale(a, s, out) {
    out._x = a._x * s;
    out._y = a._y * s;
    out._z = a._z * s;
    out._w = a._w * s;
    out._onValueChanged && out._onValueChanged();
  };
  Vector42.transform = function transform(v, m, out) {
    var _x = v._x, _y = v._y, _z = v._z, _w = v._w;
    var e = m.elements;
    out._x = _x * e[0] + _y * e[4] + _z * e[8] + _w * e[12];
    out._y = _x * e[1] + _y * e[5] + _z * e[9] + _w * e[13];
    out._z = _x * e[2] + _y * e[6] + _z * e[10] + _w * e[14];
    out._w = _x * e[3] + _y * e[7] + _z * e[11] + _w * e[15];
    out._onValueChanged && out._onValueChanged();
  };
  Vector42.transformByQuat = function transformByQuat(v, q, out) {
    var x = v._x, y = v._y, z = v._z, w = v._w;
    var qx = q._x;
    var qy = q._y;
    var qz = q._z;
    var qw = q._w;
    var ix = qw * x + qy * z - qz * y;
    var iy = qw * y + qz * x - qx * z;
    var iz = qw * z + qx * y - qy * x;
    var iw = -qx * x - qy * y - qz * z;
    out._x = ix * qw - iw * qx - iy * qz + iz * qy;
    out._y = iy * qw - iw * qy - iz * qx + ix * qz;
    out._z = iz * qw - iw * qz - ix * qy + iy * qx;
    out._w = w;
    out._onValueChanged && out._onValueChanged();
  };
  _create_class(Vector42, [
    {
      key: "x",
      get: (
        /**
        * The x component of the vector.
        */
        function get() {
          return this._x;
        }
      ),
      set: function set(value) {
        this._x = value;
        this._onValueChanged && this._onValueChanged();
      }
    },
    {
      key: "y",
      get: (
        /**
        * The y component of the vector.
        */
        function get() {
          return this._y;
        }
      ),
      set: function set(value) {
        this._y = value;
        this._onValueChanged && this._onValueChanged();
      }
    },
    {
      key: "z",
      get: (
        /**
        * The z component of the vector.
        */
        function get() {
          return this._z;
        }
      ),
      set: function set(value) {
        this._z = value;
        this._onValueChanged && this._onValueChanged();
      }
    },
    {
      key: "w",
      get: (
        /**
        * The w component of the vector.
        */
        function get() {
          return this._w;
        }
      ),
      set: function set(value) {
        this._w = value;
        this._onValueChanged && this._onValueChanged();
      }
    }
  ]);
  return Vector42;
}();
(function() {
  Vector4._zero = new Vector4(0, 0, 0, 0);
})();
(function() {
  Vector4._one = new Vector4(1, 1, 1, 1);
})();
var Color = function() {
  function Color3(r, g, b, a) {
    if (r === void 0)
      r = 1;
    if (g === void 0)
      g = 1;
    if (b === void 0)
      b = 1;
    if (a === void 0)
      a = 1;
    this._onValueChanged = null;
    this._r = r;
    this._g = g;
    this._b = b;
    this._a = a;
  }
  var _proto = Color3.prototype;
  _proto.set = function set(r, g, b, a) {
    this._r = r;
    this._g = g;
    this._b = b;
    this._a = a;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.add = function add(color) {
    this._r += color._r;
    this._g += color._g;
    this._b += color._b;
    this._a += color._a;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.scale = function scale(s) {
    this._r *= s;
    this._g *= s;
    this._b *= s;
    this._a *= s;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.clone = function clone2() {
    var ret = new Color3(this._r, this._g, this._b, this._a);
    return ret;
  };
  _proto.copyFrom = function copyFrom(source) {
    this._r = source.r;
    this._g = source.g;
    this._b = source.b;
    this._a = source.a;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.toLinear = function toLinear(out) {
    out._r = Color3.gammaToLinearSpace(this._r);
    out._g = Color3.gammaToLinearSpace(this._g);
    out._b = Color3.gammaToLinearSpace(this._b);
    this._onValueChanged && this._onValueChanged();
    return out;
  };
  _proto.toGamma = function toGamma(out) {
    out._r = Color3.linearToGammaSpace(this._r);
    out._g = Color3.linearToGammaSpace(this._g);
    out._b = Color3.linearToGammaSpace(this._b);
    this._onValueChanged && this._onValueChanged();
    return out;
  };
  _proto.getBrightness = function getBrightness() {
    var r = this.r;
    var g = this.g;
    var b = this.b;
    var max = r;
    var min = r;
    if (g > max)
      max = g;
    if (b > max)
      max = b;
    if (g < min)
      min = g;
    if (b < min)
      min = b;
    return (max + min) / 2;
  };
  _proto.toJSON = function toJSON() {
    return {
      r: this._r,
      g: this._g,
      b: this._b,
      a: this._a
    };
  };
  Color3.gammaToLinearSpace = function gammaToLinearSpace(value) {
    if (value <= 0)
      return 0;
    else if (value <= 0.04045)
      return value / 12.92;
    else if (value < 1)
      return Math.pow((value + 0.055) / 1.055, 2.4);
    else
      return Math.pow(value, 2.4);
  };
  Color3.linearToGammaSpace = function linearToGammaSpace(value) {
    if (value <= 0)
      return 0;
    else if (value < 31308e-7)
      return 12.92 * value;
    else if (value < 1)
      return 1.055 * Math.pow(value, 0.41666) - 0.055;
    else
      return Math.pow(value, 0.41666);
  };
  Color3.equals = function equals(left, right) {
    return MathUtil.equals(left._r, right._r) && MathUtil.equals(left._g, right._g) && MathUtil.equals(left._b, right._b) && MathUtil.equals(left._a, right._a);
  };
  Color3.add = function add(left, right, out) {
    out._r = left._r + right._r;
    out._g = left._g + right._g;
    out._b = left._b + right._b;
    out._a = left._a + right._a;
    out._onValueChanged && out._onValueChanged();
    return out;
  };
  Color3.subtract = function subtract(left, right, out) {
    out._r = left._r - right._r;
    out._g = left._g - right._g;
    out._b = left._b - right._b;
    out._a = left._a - right._a;
    out._onValueChanged && out._onValueChanged();
  };
  Color3.scale = function scale(left, s, out) {
    out._r = left._r * s;
    out._g = left._g * s;
    out._b = left._b * s;
    out._a = left._a * s;
    out._onValueChanged && out._onValueChanged();
    return out;
  };
  Color3.lerp = function lerp(start, end, t, out) {
    var _r = start._r, _g = start._g, _b = start._b, _a = start._a;
    out._r = _r + (end._r - _r) * t;
    out._g = _g + (end._g - _g) * t;
    out._b = _b + (end._b - _b) * t;
    out._a = _a + (end._a - _a) * t;
    out._onValueChanged && out._onValueChanged();
    return out;
  };
  _create_class(Color3, [
    {
      key: "r",
      get: (
        /**
        * The red component of the color, 0~1.
        */
        function get() {
          return this._r;
        }
      ),
      set: function set(value) {
        this._r = value;
        this._onValueChanged && this._onValueChanged();
      }
    },
    {
      key: "g",
      get: (
        /**
        * The green component of the color, 0~1.
        */
        function get() {
          return this._g;
        }
      ),
      set: function set(value) {
        this._g = value;
        this._onValueChanged && this._onValueChanged();
      }
    },
    {
      key: "b",
      get: (
        /**
        * The blue component of the color, 0~1.
        */
        function get() {
          return this._b;
        }
      ),
      set: function set(value) {
        this._b = value;
        this._onValueChanged && this._onValueChanged();
      }
    },
    {
      key: "a",
      get: (
        /**
        * The alpha component of the color, 0~1.
        */
        function get() {
          return this._a;
        }
      ),
      set: function set(value) {
        this._a = value;
        this._onValueChanged && this._onValueChanged();
      }
    }
  ]);
  return Color3;
}();
var Rect = function() {
  function Rect2(x, y, width, height) {
    if (x === void 0)
      x = 0;
    if (y === void 0)
      y = 0;
    if (width === void 0)
      width = 0;
    if (height === void 0)
      height = 0;
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }
  var _proto = Rect2.prototype;
  _proto.set = function set(x, y, width, height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    return this;
  };
  _proto.clone = function clone2() {
    return new Rect2(this.x, this.y, this.width, this.height);
  };
  _proto.copyFrom = function copyFrom(source) {
    this.x = source.x;
    this.y = source.y;
    this.width = source.width;
    this.height = source.height;
    return this;
  };
  return Rect2;
}();
var SphericalHarmonics3 = function() {
  function SphericalHarmonics32() {
    this.coefficients = new Float32Array(27);
  }
  var _proto = SphericalHarmonics32.prototype;
  _proto.addLight = function addLight(direction, color, deltaSolidAngle) {
    color.scale(deltaSolidAngle);
    var coe = this.coefficients;
    var x = direction._x, y = direction._y, z = direction._z;
    var r = color.r, g = color.g, b = color.b;
    var bv0 = 0.282095;
    var bv1 = -0.488603 * y;
    var bv2 = 0.488603 * z;
    var bv3 = -0.488603 * x;
    var bv4 = 1.092548 * (x * y);
    var bv5 = -1.092548 * (y * z);
    var bv6 = 0.315392 * (3 * z * z - 1);
    var bv7 = -1.092548 * (x * z);
    var bv8 = 0.546274 * (x * x - y * y);
    coe[0] += r * bv0, coe[1] += g * bv0, coe[2] += b * bv0;
    coe[3] += r * bv1, coe[4] += g * bv1, coe[5] += b * bv1;
    coe[6] += r * bv2, coe[7] += g * bv2, coe[8] += b * bv2;
    coe[9] += r * bv3, coe[10] += g * bv3, coe[11] += b * bv3;
    coe[12] += r * bv4, coe[13] += g * bv4, coe[14] += b * bv4;
    coe[15] += r * bv5, coe[16] += g * bv5, coe[17] += b * bv5;
    coe[18] += r * bv6, coe[19] += g * bv6, coe[20] += b * bv6;
    coe[21] += r * bv7, coe[22] += g * bv7, coe[23] += b * bv7;
    coe[24] += r * bv8, coe[25] += g * bv8, coe[26] += b * bv8;
  };
  _proto.evaluate = function evaluate(direction, out) {
    var coe = this.coefficients;
    var x = direction._x, y = direction._y, z = direction._z;
    var bv0 = 0.886227;
    var bv1 = -1.023327 * y;
    var bv2 = 1.023327 * z;
    var bv3 = -1.023327 * x;
    var bv4 = 0.858086 * y * x;
    var bv5 = -0.858086 * y * z;
    var bv6 = 0.247708 * (3 * z * z - 1);
    var bv7 = -0.858086 * z * x;
    var bv8 = 0.429042 * (x * x - y * y);
    var r = coe[0] * bv0;
    var g = coe[1] * bv0;
    var b = coe[2] * bv0;
    r += coe[3] * bv1 + coe[6] * bv2 + coe[9] * bv3;
    g += coe[4] * bv1 + coe[7] * bv2 + coe[10] * bv3;
    b += coe[5] * bv1 + coe[8] * bv2 + coe[11] * bv3;
    r += coe[12] * bv4 + coe[15] * bv5 + coe[18] * bv6 + coe[21] * bv7 + coe[24] * bv8;
    g += coe[13] * bv4 + coe[16] * bv5 + coe[19] * bv6 + coe[22] * bv7 + coe[25] * bv8;
    b += coe[14] * bv4 + coe[17] * bv5 + coe[20] * bv6 + coe[23] * bv7 + coe[26] * bv8;
    out.set(r, g, b, 1);
    return out;
  };
  _proto.scale = function scale(s) {
    var src = this.coefficients;
    src[0] *= s, src[1] *= s, src[2] *= s;
    src[3] *= s, src[4] *= s, src[5] *= s;
    src[6] *= s, src[7] *= s, src[8] *= s;
    src[9] *= s, src[10] *= s, src[11] *= s;
    src[12] *= s, src[13] *= s, src[14] *= s;
    src[15] *= s, src[16] *= s, src[17] *= s;
    src[18] *= s, src[19] *= s, src[20] *= s;
    src[21] *= s, src[22] *= s, src[23] *= s;
    src[24] *= s, src[25] *= s, src[26] *= s;
  };
  _proto.clone = function clone2() {
    var sh = new SphericalHarmonics32();
    sh.copyFrom(this);
    return sh;
  };
  _proto.copyFrom = function copyFrom(source) {
    source.copyToArray(this.coefficients);
    return this;
  };
  _proto.copyFromArray = function copyFromArray(array, offset) {
    if (offset === void 0)
      offset = 0;
    var s = this.coefficients;
    s[0] = array[offset], s[1] = array[1 + offset], s[2] = array[2 + offset];
    s[3] = array[3 + offset], s[4] = array[4 + offset], s[5] = array[5 + offset];
    s[6] = array[6 + offset], s[7] = array[7 + offset], s[8] = array[8 + offset];
    s[9] = array[9 + offset], s[10] = array[10 + offset], s[11] = array[11 + offset];
    s[12] = array[12 + offset], s[13] = array[13 + offset], s[14] = array[14 + offset];
    s[15] = array[15 + offset], s[16] = array[16 + offset], s[17] = array[17 + offset];
    s[18] = array[18 + offset], s[19] = array[19 + offset], s[20] = array[20 + offset];
    s[21] = array[21 + offset], s[22] = array[22 + offset], s[23] = array[23 + offset];
    s[24] = array[24 + offset], s[25] = array[25 + offset], s[26] = array[26 + offset];
  };
  _proto.copyToArray = function copyToArray(out, outOffset) {
    if (outOffset === void 0)
      outOffset = 0;
    var s = this.coefficients;
    out[0 + outOffset] = s[0], out[1 + outOffset] = s[1], out[2 + outOffset] = s[2];
    out[3 + outOffset] = s[3], out[4 + outOffset] = s[4], out[5 + outOffset] = s[5];
    out[6 + outOffset] = s[6], out[7 + outOffset] = s[7], out[8 + outOffset] = s[8];
    out[9 + outOffset] = s[9], out[10 + outOffset] = s[10], out[11 + outOffset] = s[11];
    out[12 + outOffset] = s[12], out[13 + outOffset] = s[13], out[14 + outOffset] = s[14];
    out[15 + outOffset] = s[15], out[16 + outOffset] = s[16], out[17 + outOffset] = s[17];
    out[18 + outOffset] = s[18], out[19 + outOffset] = s[19], out[20 + outOffset] = s[20];
    out[21 + outOffset] = s[21], out[22 + outOffset] = s[22], out[23 + outOffset] = s[23];
    out[24 + outOffset] = s[24], out[25 + outOffset] = s[25], out[26 + outOffset] = s[26];
  };
  return SphericalHarmonics32;
}();

// node_modules/@galacean/engine-core/dist/module.js
var Platform;
(function(Platform2) {
  Platform2[Platform2[
    /** Android platform. */
    "Android"
  ] = 0] = "Android";
  Platform2[Platform2[
    /** IPhone platform. */
    "IPhone"
  ] = 1] = "IPhone";
  Platform2[Platform2[
    /** IPad platform. */
    "IPad"
  ] = 2] = "IPad";
  Platform2[Platform2[
    /** Mac platform. */
    "Mac"
  ] = 3] = "Mac";
  Platform2[Platform2[
    /** Unknown platform. */
    "Unknown"
  ] = 4] = "Unknown";
})(Platform || (Platform = {}));
function _assert_this_initialized(self) {
  if (self === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return self;
}
function _defineProperties2(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _create_class2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties2(Constructor, staticProps);
  return Constructor;
}
function _set_prototype_of(o, p) {
  _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _set_prototype_of(o, p);
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _set_prototype_of(subClass, superClass);
}
var MathUtil2 = function() {
  function MathUtil3() {
  }
  MathUtil3.clamp = function clamp(v, min, max) {
    return Math.max(min, Math.min(max, v));
  };
  MathUtil3.equals = function equals(a, b) {
    return Math.abs(a - b) <= MathUtil3.zeroTolerance;
  };
  MathUtil3.isPowerOf2 = function isPowerOf2(v) {
    return (v & v - 1) === 0;
  };
  MathUtil3.radianToDegree = function radianToDegree(r) {
    return r * MathUtil3.radToDegreeFactor;
  };
  MathUtil3.degreeToRadian = function degreeToRadian(d) {
    return d * MathUtil3.degreeToRadFactor;
  };
  return MathUtil3;
}();
(function() {
  MathUtil2.zeroTolerance = 1e-6;
})();
(function() {
  MathUtil2.radToDegreeFactor = 180 / Math.PI;
})();
(function() {
  MathUtil2.degreeToRadFactor = Math.PI / 180;
})();
var Color2 = function() {
  function Color3(r, g, b, a) {
    if (r === void 0)
      r = 1;
    if (g === void 0)
      g = 1;
    if (b === void 0)
      b = 1;
    if (a === void 0)
      a = 1;
    this._onValueChanged = null;
    this._r = r;
    this._g = g;
    this._b = b;
    this._a = a;
  }
  var _proto = Color3.prototype;
  _proto.set = function set(r, g, b, a) {
    this._r = r;
    this._g = g;
    this._b = b;
    this._a = a;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.add = function add(color) {
    this._r += color._r;
    this._g += color._g;
    this._b += color._b;
    this._a += color._a;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.scale = function scale(s) {
    this._r *= s;
    this._g *= s;
    this._b *= s;
    this._a *= s;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.clone = function clone2() {
    var ret = new Color3(this._r, this._g, this._b, this._a);
    return ret;
  };
  _proto.copyFrom = function copyFrom(source) {
    this._r = source.r;
    this._g = source.g;
    this._b = source.b;
    this._a = source.a;
    this._onValueChanged && this._onValueChanged();
    return this;
  };
  _proto.toLinear = function toLinear(out) {
    out._r = Color3.gammaToLinearSpace(this._r);
    out._g = Color3.gammaToLinearSpace(this._g);
    out._b = Color3.gammaToLinearSpace(this._b);
    this._onValueChanged && this._onValueChanged();
    return out;
  };
  _proto.toGamma = function toGamma(out) {
    out._r = Color3.linearToGammaSpace(this._r);
    out._g = Color3.linearToGammaSpace(this._g);
    out._b = Color3.linearToGammaSpace(this._b);
    this._onValueChanged && this._onValueChanged();
    return out;
  };
  _proto.getBrightness = function getBrightness() {
    var r = this.r;
    var g = this.g;
    var b = this.b;
    var max = r;
    var min = r;
    if (g > max)
      max = g;
    if (b > max)
      max = b;
    if (g < min)
      min = g;
    if (b < min)
      min = b;
    return (max + min) / 2;
  };
  _proto.toJSON = function toJSON() {
    return {
      r: this._r,
      g: this._g,
      b: this._b,
      a: this._a
    };
  };
  Color3.gammaToLinearSpace = function gammaToLinearSpace(value) {
    if (value <= 0)
      return 0;
    else if (value <= 0.04045)
      return value / 12.92;
    else if (value < 1)
      return Math.pow((value + 0.055) / 1.055, 2.4);
    else
      return Math.pow(value, 2.4);
  };
  Color3.linearToGammaSpace = function linearToGammaSpace(value) {
    if (value <= 0)
      return 0;
    else if (value < 31308e-7)
      return 12.92 * value;
    else if (value < 1)
      return 1.055 * Math.pow(value, 0.41666) - 0.055;
    else
      return Math.pow(value, 0.41666);
  };
  Color3.equals = function equals(left, right) {
    return MathUtil2.equals(left._r, right._r) && MathUtil2.equals(left._g, right._g) && MathUtil2.equals(left._b, right._b) && MathUtil2.equals(left._a, right._a);
  };
  Color3.add = function add(left, right, out) {
    out._r = left._r + right._r;
    out._g = left._g + right._g;
    out._b = left._b + right._b;
    out._a = left._a + right._a;
    out._onValueChanged && out._onValueChanged();
    return out;
  };
  Color3.subtract = function subtract(left, right, out) {
    out._r = left._r - right._r;
    out._g = left._g - right._g;
    out._b = left._b - right._b;
    out._a = left._a - right._a;
    out._onValueChanged && out._onValueChanged();
  };
  Color3.scale = function scale(left, s, out) {
    out._r = left._r * s;
    out._g = left._g * s;
    out._b = left._b * s;
    out._a = left._a * s;
    out._onValueChanged && out._onValueChanged();
    return out;
  };
  Color3.lerp = function lerp(start, end, t, out) {
    var _r = start._r, _g = start._g, _b = start._b, _a = start._a;
    out._r = _r + (end._r - _r) * t;
    out._g = _g + (end._g - _g) * t;
    out._b = _b + (end._b - _b) * t;
    out._a = _a + (end._a - _a) * t;
    out._onValueChanged && out._onValueChanged();
    return out;
  };
  _create_class2(Color3, [
    {
      key: "r",
      get: (
        /**
        * The red component of the color, 0~1.
        */
        function get() {
          return this._r;
        }
      ),
      set: function set(value) {
        this._r = value;
        this._onValueChanged && this._onValueChanged();
      }
    },
    {
      key: "g",
      get: (
        /**
        * The green component of the color, 0~1.
        */
        function get() {
          return this._g;
        }
      ),
      set: function set(value) {
        this._g = value;
        this._onValueChanged && this._onValueChanged();
      }
    },
    {
      key: "b",
      get: (
        /**
        * The blue component of the color, 0~1.
        */
        function get() {
          return this._b;
        }
      ),
      set: function set(value) {
        this._b = value;
        this._onValueChanged && this._onValueChanged();
      }
    },
    {
      key: "a",
      get: (
        /**
        * The alpha component of the color, 0~1.
        */
        function get() {
          return this._a;
        }
      ),
      set: function set(value) {
        this._a = value;
        this._onValueChanged && this._onValueChanged();
      }
    }
  ]);
  return Color3;
}();
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function _instanceof(left, right) {
  if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
    return !!right[Symbol.hasInstance](left);
  } else
    return left instanceof right;
}
var CloneMode;
(function(CloneMode2) {
  CloneMode2[CloneMode2[
    /** Ignore clone. */
    "Ignore"
  ] = 0] = "Ignore";
  CloneMode2[CloneMode2[
    /** Assignment clone. */
    "Assignment"
  ] = 1] = "Assignment";
  CloneMode2[CloneMode2[
    /** Shallow clone. */
    "Shallow"
  ] = 2] = "Shallow";
  CloneMode2[CloneMode2[
    /** Deep clone. */
    "Deep"
  ] = 3] = "Deep";
})(CloneMode || (CloneMode = {}));
function ignoreClone(target, propertyKey) {
  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Ignore);
}
function assignmentClone(target, propertyKey) {
  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Assignment);
}
function shallowClone(target, propertyKey) {
  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Shallow);
}
function deepClone(target, propertyKey) {
  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Deep);
}
var CloneManager = function() {
  function CloneManager2() {
  }
  CloneManager2.registerCloneMode = function registerCloneMode(target, propertyKey, mode) {
    var targetMap = CloneManager2._subCloneModeMap.get(target.constructor);
    if (!targetMap) {
      targetMap = /* @__PURE__ */ Object.create(null);
      CloneManager2._subCloneModeMap.set(target.constructor, targetMap);
    }
    targetMap[propertyKey] = mode;
  };
  CloneManager2.getCloneMode = function getCloneMode(type) {
    var cloneModes = CloneManager2._cloneModeMap.get(type);
    if (!cloneModes) {
      cloneModes = /* @__PURE__ */ Object.create(null);
      CloneManager2._cloneModeMap.set(type, cloneModes);
      var objectType = CloneManager2._objectType;
      var cloneModeMap = CloneManager2._subCloneModeMap;
      while (type !== objectType) {
        var subCloneModes = cloneModeMap.get(type);
        if (subCloneModes) {
          Object.assign(cloneModes, subCloneModes);
        }
        type = Object.getPrototypeOf(type);
      }
    }
    return cloneModes;
  };
  CloneManager2.deepCloneObject = function deepCloneObject(source, target) {
    var type = source.constructor;
    switch (type) {
      case Uint8Array:
      case Uint16Array:
      case Uint32Array:
      case Int8Array:
      case Int16Array:
      case Int32Array:
      case Float32Array:
      case Float64Array:
        target.set(source);
        break;
      case Array:
        for (var i = 0, n = source.length; i < n; i++) {
          CloneManager2._deepCloneObjectItem(source, target, i);
        }
        break;
      default:
        var customSource = source;
        if (customSource.clone && customSource.cloneTo) {
          customSource.cloneTo(target);
        } else {
          var keys = Object.keys(source);
          for (var i1 = 0, n1 = keys.length; i1 < n1; i1++) {
            CloneManager2._deepCloneObjectItem(source, target, keys[i1]);
          }
        }
    }
  };
  CloneManager2._deepCloneObjectItem = function _deepCloneObjectItem(source, target, k) {
    var sourceItem = source[k];
    if (_instanceof(sourceItem, Object)) {
      var itemType = sourceItem.constructor;
      switch (itemType) {
        case Uint8Array:
        case Uint16Array:
        case Uint32Array:
        case Int8Array:
        case Int16Array:
        case Int32Array:
        case Float32Array:
        case Float64Array:
          var sourceTypeArrayItem = sourceItem;
          var targetTypeArrayItem = target[k];
          if (targetTypeArrayItem == null) {
            target[k] = sourceTypeArrayItem.slice();
          } else {
            targetTypeArrayItem.set(sourceTypeArrayItem);
          }
          break;
        case Array:
          var sourceArrayItem = sourceItem;
          var targetArrayItem = target[k];
          if (targetArrayItem == null) {
            target[k] = new Array(sourceArrayItem.length);
          } else {
            targetArrayItem.length = sourceArrayItem.length;
          }
          CloneManager2.deepCloneObject(sourceArrayItem, targetArrayItem);
          break;
        default:
          if (sourceItem.clone && sourceItem.cloneTo) {
            var sourceCustomItem = sourceItem;
            var targetCustomItem = target[k];
            if (targetCustomItem) {
              sourceCustomItem.cloneTo(targetCustomItem);
            } else {
              target[k] = sourceCustomItem.clone();
            }
          } else {
            var targetItem = target[k];
            targetItem == null && (target[k] = targetItem = new sourceItem.constructor());
            CloneManager2.deepCloneObject(sourceItem, targetItem);
            break;
          }
      }
    } else {
      target[k] = sourceItem;
    }
  };
  return CloneManager2;
}();
(function() {
  CloneManager._subCloneModeMap = /* @__PURE__ */ new Map();
})();
(function() {
  CloneManager._cloneModeMap = /* @__PURE__ */ new Map();
})();
(function() {
  CloneManager._objectType = Object.getPrototypeOf(Object);
})();
var EngineObject = function() {
  function EngineObject2(engine) {
    this.instanceId = ++EngineObject2._instanceIdCounter;
    this._destroyed = false;
    this._engine = engine;
  }
  var _proto = EngineObject2.prototype;
  _proto.destroy = function destroy() {
    var _this__engine_resourceManager;
    if (this._destroyed)
      return;
    (_this__engine_resourceManager = this._engine.resourceManager) == null ? void 0 : _this__engine_resourceManager._deleteAsset(this);
    this._destroyed = true;
  };
  _create_class2(EngineObject2, [
    {
      key: "engine",
      get: (
        /**
        * Get the engine which the object belongs.
        */
        function get() {
          return this._engine;
        }
      )
    },
    {
      key: "destroyed",
      get: (
        /**
        * Whether it has been destroyed.
        */
        function get() {
          return this._destroyed;
        }
      )
    }
  ]);
  return EngineObject2;
}();
(function() {
  EngineObject._instanceIdCounter = 0;
})();
__decorate([
  ignoreClone
], EngineObject.prototype, "instanceId", void 0);
__decorate([
  ignoreClone
], EngineObject.prototype, "_engine", void 0);
var RefObject = function(EngineObject2) {
  _inherits(RefObject2, EngineObject2);
  function RefObject2(engine) {
    var _this;
    _this = EngineObject2.call(this, engine) || this;
    _this.isGCIgnored = false;
    _this._refCount = 0;
    engine.resourceManager._addRefObject(_this.instanceId, _assert_this_initialized(_this));
    return _this;
  }
  var _proto = RefObject2.prototype;
  _proto.destroy = function destroy(force) {
    if (force === void 0)
      force = false;
    if (this._destroyed)
      return true;
    if (!force && this._refCount !== 0)
      return false;
    var resourceManager = this._engine.resourceManager;
    if (resourceManager) {
      EngineObject2.prototype.destroy.call(this);
      resourceManager._deleteRefObject(this.instanceId);
    }
    var refCount = this._getRefCount();
    if (refCount > 0) {
      this._addRefCount(-refCount);
    }
    this._engine = null;
    this._onDestroy();
    return true;
  };
  _proto._getRefCount = function _getRefCount() {
    return this._refCount;
  };
  _proto._addRefCount = function _addRefCount(value) {
    this._refCount += value;
  };
  _proto._addToResourceManager = function _addToResourceManager(path) {
    this._engine.resourceManager._addAsset(path, this);
  };
  _create_class2(RefObject2, [
    {
      key: "refCount",
      get: (
        /**
        * Counted by valid references.
        */
        function get() {
          return this._refCount;
        }
      )
    }
  ]);
  return RefObject2;
}(EngineObject);
var RenderBufferDepthFormat;
(function(RenderBufferDepthFormat2) {
  RenderBufferDepthFormat2[RenderBufferDepthFormat2[
    /** Render to depth buffer,engine will automatically select the supported precision. */
    "Depth"
  ] = 0] = "Depth";
  RenderBufferDepthFormat2[RenderBufferDepthFormat2[
    /** Render to depth stencil buffer, engine will automatically select the supported precision. */
    "DepthStencil"
  ] = 1] = "DepthStencil";
  RenderBufferDepthFormat2[RenderBufferDepthFormat2[
    /** Render to stencil buffer. */
    "Stencil"
  ] = 2] = "Stencil";
  RenderBufferDepthFormat2[RenderBufferDepthFormat2[
    /** Force 16-bit depth buffer. */
    "Depth16"
  ] = 3] = "Depth16";
  RenderBufferDepthFormat2[RenderBufferDepthFormat2[
    /** Force 24-bit depth buffer. */
    "Depth24"
  ] = 4] = "Depth24";
  RenderBufferDepthFormat2[RenderBufferDepthFormat2[
    /** Force 32-bit depth buffer. */
    "Depth32"
  ] = 5] = "Depth32";
  RenderBufferDepthFormat2[RenderBufferDepthFormat2[
    /** Force 16-bit depth + 8-bit stencil buffer. */
    "Depth24Stencil8"
  ] = 6] = "Depth24Stencil8";
  RenderBufferDepthFormat2[RenderBufferDepthFormat2[
    /** Force 32-bit depth + 8-bit stencil buffer. */
    "Depth32Stencil8"
  ] = 7] = "Depth32Stencil8";
})(RenderBufferDepthFormat || (RenderBufferDepthFormat = {}));
var TextureCubeFace;
(function(TextureCubeFace2) {
  TextureCubeFace2[TextureCubeFace2[
    /** Positive X face for a cube-mapped texture. */
    "PositiveX"
  ] = 0] = "PositiveX";
  TextureCubeFace2[TextureCubeFace2[
    /** Negative X face for a cube-mapped texture. */
    "NegativeX"
  ] = 1] = "NegativeX";
  TextureCubeFace2[TextureCubeFace2[
    /** Positive Y face for a cube-mapped texture. */
    "PositiveY"
  ] = 2] = "PositiveY";
  TextureCubeFace2[TextureCubeFace2[
    /** Negative Y face for a cube-mapped texture. */
    "NegativeY"
  ] = 3] = "NegativeY";
  TextureCubeFace2[TextureCubeFace2[
    /** Positive Z face for a cube-mapped texture. */
    "PositiveZ"
  ] = 4] = "PositiveZ";
  TextureCubeFace2[TextureCubeFace2[
    /** Negative Z face for a cube-mapped texture. */
    "NegativeZ"
  ] = 5] = "NegativeZ";
})(TextureCubeFace || (TextureCubeFace = {}));
var TextureDepthCompareFunction;
(function(TextureDepthCompareFunction2) {
  TextureDepthCompareFunction2[TextureDepthCompareFunction2[
    /** never pass. */
    "Never"
  ] = 0] = "Never";
  TextureDepthCompareFunction2[TextureDepthCompareFunction2[
    /** pass if the compare value is less than the sample value. */
    "Less"
  ] = 1] = "Less";
  TextureDepthCompareFunction2[TextureDepthCompareFunction2[
    /** pass if the compare value equals the sample value. */
    "Equal"
  ] = 2] = "Equal";
  TextureDepthCompareFunction2[TextureDepthCompareFunction2[
    /** pass if the compare value is less than or equal to the sample value. */
    "LessEqual"
  ] = 3] = "LessEqual";
  TextureDepthCompareFunction2[TextureDepthCompareFunction2[
    /** pass if the compare value is greater than the sample value. */
    "Greater"
  ] = 4] = "Greater";
  TextureDepthCompareFunction2[TextureDepthCompareFunction2[
    /** pass if the compare value is not equal to the sample value. */
    "NotEqual"
  ] = 5] = "NotEqual";
  TextureDepthCompareFunction2[TextureDepthCompareFunction2[
    /** pass if the compare value is greater than or equal to the sample value. */
    "GreaterEqual"
  ] = 6] = "GreaterEqual";
  TextureDepthCompareFunction2[TextureDepthCompareFunction2[
    /** always pass. */
    "Always"
  ] = 7] = "Always";
})(TextureDepthCompareFunction || (TextureDepthCompareFunction = {}));
var TextureFilterMode;
(function(TextureFilterMode2) {
  TextureFilterMode2[TextureFilterMode2[
    /** Point filtering. */
    "Point"
  ] = 0] = "Point";
  TextureFilterMode2[TextureFilterMode2[
    /** Bilinear filtering. */
    "Bilinear"
  ] = 1] = "Bilinear";
  TextureFilterMode2[TextureFilterMode2[
    /** Trilinear filtering. */
    "Trilinear"
  ] = 2] = "Trilinear";
})(TextureFilterMode || (TextureFilterMode = {}));
var TextureFormat;
(function(TextureFormat2) {
  TextureFormat2[TextureFormat2[
    /** RGB format,8 bits per channel. */
    "R8G8B8"
  ] = 0] = "R8G8B8";
  TextureFormat2[TextureFormat2[
    /** RGBA format,8 bits per channel. */
    "R8G8B8A8"
  ] = 1] = "R8G8B8A8";
  TextureFormat2[TextureFormat2[
    /** RGBA format,4 bits per channel. */
    "R4G4B4A4"
  ] = 2] = "R4G4B4A4";
  TextureFormat2[TextureFormat2[
    /** RGBA format,5 bits in R channel,5 bits in G channel,5 bits in B channel, 1 bit in A channel. */
    "R5G5B5A1"
  ] = 3] = "R5G5B5A1";
  TextureFormat2[TextureFormat2[
    /** RGB format,5 bits in R channel,6 bits in G channel,5 bits in B channel. */
    "R5G6B5"
  ] = 4] = "R5G6B5";
  TextureFormat2[TextureFormat2[
    /** Transparent format,8 bits. */
    "Alpha8"
  ] = 5] = "Alpha8";
  TextureFormat2[TextureFormat2[
    /** Luminance/alpha in RGB channel, alpha in A channel. */
    "LuminanceAlpha"
  ] = 6] = "LuminanceAlpha";
  TextureFormat2[TextureFormat2[
    /** RGBA format,16 bits per channel. */
    "R16G16B16A16"
  ] = 7] = "R16G16B16A16";
  TextureFormat2[TextureFormat2[
    /** RGBA format,32 bits per channel. */
    "R32G32B32A32"
  ] = 8] = "R32G32B32A32";
  TextureFormat2[TextureFormat2[
    /** RGB compressed format。*/
    "DXT1"
  ] = 9] = "DXT1";
  TextureFormat2[TextureFormat2[
    /** RGBA compressed format。*/
    "DXT5"
  ] = 10] = "DXT5";
  TextureFormat2[TextureFormat2[
    /** RGB compressed format,4 bits per pixel。*/
    "ETC1_RGB"
  ] = 11] = "ETC1_RGB";
  TextureFormat2[TextureFormat2[
    /** RGB compressed format,4 bits per pixel。*/
    "ETC2_RGB"
  ] = 12] = "ETC2_RGB";
  TextureFormat2[TextureFormat2[
    /** RGBA compressed format,5 bits per pixel,4 bit in RGB, 1 bit in A. */
    "ETC2_RGBA5"
  ] = 13] = "ETC2_RGBA5";
  TextureFormat2[TextureFormat2[
    /** RGB compressed format,8 bits per pixel. */
    "ETC2_RGBA8"
  ] = 14] = "ETC2_RGBA8";
  TextureFormat2[TextureFormat2[
    /** RGB compressed format,2 bits per pixel. */
    "PVRTC_RGB2"
  ] = 15] = "PVRTC_RGB2";
  TextureFormat2[TextureFormat2[
    /** RGBA compressed format,2 bits per pixel. */
    "PVRTC_RGBA2"
  ] = 16] = "PVRTC_RGBA2";
  TextureFormat2[TextureFormat2[
    /** RGB compressed format,4 bits per pixel. */
    "PVRTC_RGB4"
  ] = 17] = "PVRTC_RGB4";
  TextureFormat2[TextureFormat2[
    /** RGBA compressed format,4 bits per pixel. */
    "PVRTC_RGBA4"
  ] = 18] = "PVRTC_RGBA4";
  TextureFormat2[TextureFormat2[
    /** RGB(A) compressed format,128 bits per 4x4 pixel block. */
    "ASTC_4x4"
  ] = 19] = "ASTC_4x4";
  TextureFormat2[TextureFormat2[
    /** RGB(A) compressed format,128 bits per 5x5 pixel block. */
    "ASTC_5x5"
  ] = 20] = "ASTC_5x5";
  TextureFormat2[TextureFormat2[
    /** RGB(A) compressed format,128 bits per 6x6 pixel block. */
    "ASTC_6x6"
  ] = 21] = "ASTC_6x6";
  TextureFormat2[TextureFormat2[
    /** RGB(A) compressed format,128 bits per 8x8 pixel block. */
    "ASTC_8x8"
  ] = 22] = "ASTC_8x8";
  TextureFormat2[TextureFormat2[
    /** RGB(A) compressed format,128 bits per 10x10 pixel block. */
    "ASTC_10x10"
  ] = 23] = "ASTC_10x10";
  TextureFormat2[TextureFormat2[
    /** RGB(A) compressed format,128 bits per 12x12 pixel block. */
    "ASTC_12x12"
  ] = 24] = "ASTC_12x12";
  TextureFormat2[TextureFormat2[
    /** Automatic depth format,engine will automatically select the supported precision. */
    "Depth"
  ] = 25] = "Depth";
  TextureFormat2[TextureFormat2[
    /** Automatic depth setncil format, engine will automatically select the supported precision. */
    "DepthStencil"
  ] = 26] = "DepthStencil";
  TextureFormat2[TextureFormat2[
    /** 16-bit depth format. */
    "Depth16"
  ] = 27] = "Depth16";
  TextureFormat2[TextureFormat2[
    /** 24-bit depth format. */
    "Depth24"
  ] = 28] = "Depth24";
  TextureFormat2[TextureFormat2[
    /** 32-bit depth format. */
    "Depth32"
  ] = 29] = "Depth32";
  TextureFormat2[TextureFormat2[
    /** 16-bit depth + 8-bit stencil format. */
    "Depth24Stencil8"
  ] = 30] = "Depth24Stencil8";
  TextureFormat2[TextureFormat2[
    /** 32-bit depth + 8-bit stencil format. */
    "Depth32Stencil8"
  ] = 31] = "Depth32Stencil8";
})(TextureFormat || (TextureFormat = {}));
var TextureWrapMode;
(function(TextureWrapMode3) {
  TextureWrapMode3[TextureWrapMode3[
    /** Clamping mode. use the color of edge pixels beyond the texture boundary. */
    "Clamp"
  ] = 0] = "Clamp";
  TextureWrapMode3[TextureWrapMode3[
    /** Repeating mode. tiling will be repeated if it exceeds the texture boundary. */
    "Repeat"
  ] = 1] = "Repeat";
  TextureWrapMode3[TextureWrapMode3[
    /** Mirror repeat mode. tiling will be mirrored and repeated if it exceeds the texture boundary. */
    "Mirror"
  ] = 2] = "Mirror";
})(TextureWrapMode || (TextureWrapMode = {}));
var Event = function() {
  function Event2(type, target, data, bubbles) {
    if (target === void 0)
      target = null;
    if (data === void 0)
      data = {};
    if (bubbles === void 0)
      bubbles = true;
    this._timeStamp = (/* @__PURE__ */ new Date()).getTime();
    this._target = target;
    this.data = data;
    this._currentTarget = null;
    this._bubbles = bubbles;
    this._propagationStopped = false;
    this._type = type;
  }
  var _proto = Event2.prototype;
  _proto.stopPropagation = function stopPropagation() {
    this._propagationStopped = true;
  };
  _create_class2(Event2, [
    {
      key: "propagationStopped",
      get: function get() {
        return this._propagationStopped;
      }
    },
    {
      key: "target",
      get: function get() {
        return this._target;
      },
      set: function set(t) {
        this._target = t;
      }
    },
    {
      key: "timeStamp",
      get: function get() {
        return this._timeStamp;
      }
    },
    {
      key: "currentTarget",
      get: function get() {
        return this._currentTarget;
      },
      set: function set(t) {
        this._currentTarget = t;
      }
    },
    {
      key: "bubbles",
      get: function get() {
        return this._bubbles;
      }
    },
    {
      key: "type",
      get: function get() {
        return this._type;
      }
    }
  ]);
  return Event2;
}();
var EventDispatcher = function() {
  function EventDispatcher2() {
    this._events = /* @__PURE__ */ Object.create(null);
    this._eventCount = 0;
    this._dispatchingListeners = [];
  }
  var _proto = EventDispatcher2.prototype;
  _proto.hasEvent = function hasEvent(event) {
    return this._events[event] != null;
  };
  _proto.eventNames = function eventNames() {
    if (this._eventCount === 0)
      return [];
    return Object.keys(this._events);
  };
  _proto.listenerCount = function listenerCount(event) {
    var listeners = this._events[event];
    if (!listeners)
      return 0;
    if (Array.isArray(listeners))
      return listeners.length;
    return 1;
  };
  _proto.dispatch = function dispatch(event, data) {
    if (!this._events[event]) {
      return false;
    }
    var listeners = this._events[event];
    if (Array.isArray(listeners)) {
      var count = listeners.length;
      var dispatchingListeners = this._dispatchingListeners;
      dispatchingListeners.length = count;
      for (var i = 0; i < count; i++) {
        dispatchingListeners[i] = listeners[i];
      }
      for (var i1 = 0; i1 < count; i1++) {
        var listener = dispatchingListeners[i1];
        if (!listener.destroyed) {
          if (listener.once)
            this.off(event, listener.fn);
          listener.fn(data);
        }
      }
      dispatchingListeners.length = 0;
    } else {
      if (listeners.once)
        this.off(event, listeners.fn);
      listeners.fn(data);
    }
    return true;
  };
  _proto.on = function on(event, fn) {
    return this.addEventListener(event, fn);
  };
  _proto.once = function once(event, fn) {
    return this.addEventListener(event, fn, true);
  };
  _proto.addEventListener = function addEventListener(event, fn, once) {
    var listener = {
      fn,
      once
    };
    var events = this._events;
    var element = events[event];
    if (!element) {
      events[event] = listener;
      this._eventCount++;
    } else if (Array.isArray(element)) {
      element.push(listener);
    } else {
      events[event] = [
        element,
        listener
      ];
    }
    return this;
  };
  _proto.off = function off(event, fn) {
    if (!this._events[event])
      return this;
    if (!fn) {
      this._clearEvent(event);
      return this;
    }
    var listeners = this._events[event];
    var isArray = Array.isArray(listeners);
    if (!isArray && listeners.fn === fn) {
      this._clearEvent(event);
    } else if (isArray) {
      for (var i = listeners.length - 1; i >= 0; i--) {
        if (listeners[i].fn === fn) {
          listeners[i].destroyed = true;
          listeners.splice(i, 1);
        }
      }
      if (listeners.length === 0) {
        this._clearEvent(event);
      } else if (listeners.length === 1) {
        this._events[event] = listeners[0];
      }
    }
    return this;
  };
  _proto.removeEventListener = function removeEventListener(event, fn) {
    return this.off(event, fn);
  };
  _proto.removeAllEventListeners = function removeAllEventListeners(event) {
    if (event) {
      if (this._events[event])
        this._clearEvent(event);
    } else {
      this._events = /* @__PURE__ */ Object.create(null);
      this._eventCount = 0;
    }
  };
  _proto.trigger = function trigger(e) {
    this.dispatch(e.type, e.data);
  };
  _proto._clearEvent = function _clearEvent(event) {
    if (--this._eventCount === 0) {
      this._events = /* @__PURE__ */ Object.create(null);
    } else {
      delete this._events[event];
    }
  };
  return EventDispatcher2;
}();
var noop = function(message) {
  for (var _len = arguments.length, optionalParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    optionalParams[_key - 1] = arguments[_key];
  }
};
var debug = console.log.bind(console);
var info = console.info.bind(console);
var warn = console.warn.bind(console);
var error = console.error.bind(console);
var Logger = {
  debug: noop,
  info: noop,
  warn: noop,
  error: noop,
  isEnabled: false,
  /** Turn on log */
  enable: function enable() {
    this.debug = debug;
    this.info = info;
    this.warn = warn;
    this.error = error;
    this.isEnabled = true;
  },
  /** Turn off log */
  disable: function disable() {
    this.debug = noop;
    this.info = noop;
    this.warn = noop;
    this.error = noop;
    this.isEnabled = false;
  }
};
var Time = function() {
  function Time2() {
    this._frameCount = 0;
    this._clock = performance ? performance : Date;
    this._timeScale = 1;
    this._deltaTime = 1e-4;
    var now = this._clock.now();
    this._startTime = now;
    this._lastTickTime = now;
  }
  var _proto = Time2.prototype;
  _proto.reset = function reset() {
    this._lastTickTime = this._clock.now();
  };
  _proto.tick = function tick() {
    var now = this.nowTime;
    this._deltaTime = (now - this._lastTickTime) * this._timeScale;
    this._lastTickTime = now;
    this._frameCount++;
  };
  _create_class2(Time2, [
    {
      key: "frameCount",
      get: (
        /*
        * The total number of frames since the start of the engine.
        */
        function get() {
          return this._frameCount;
        }
      )
    },
    {
      key: "nowTime",
      get: (
        /**
        * Current Time
        */
        function get() {
          return this._clock.now();
        }
      )
    },
    {
      key: "deltaTime",
      get: (
        /**
        * Time between two ticks
        */
        function get() {
          return this._deltaTime;
        }
      )
    },
    {
      key: "timeScale",
      get: (
        /**
        * Scaled delta time.
        */
        function get() {
          return this._timeScale;
        }
      ),
      set: function set(s) {
        this._timeScale = s;
      }
    },
    {
      key: "unscaledDeltaTime",
      get: (
        /**
        * Unscaled delta time.
        */
        function get() {
          return this._deltaTime / this._timeScale;
        }
      )
    },
    {
      key: "timeSinceStartup",
      get: (
        /**
        * The elapsed time, after the clock is initialized.
        */
        function get() {
          return this.nowTime - this._startTime;
        }
      )
    }
  ]);
  return Time2;
}();
var Util = {
  isArray: "isArray" in Array ? Array.isArray : function(value) {
    return toString.call(value) === "[object Array]";
  },
  isArrayLike: function isArrayLike(x) {
    return !!x && typeof x.length === "number" && typeof x !== "function";
  },
  clone: function clone(obj) {
    if (typeof obj !== "object" || obj === null) {
      return obj;
    }
    var rst;
    if (Util.isArrayLike(obj)) {
      rst = obj.slice();
      for (var i = 0, l = obj.length; i < l; i++) {
        rst[i] = Util.clone(obj[i]);
      }
    } else {
      rst = {};
      for (var k in obj) {
        if (obj.hasOwnProperty(k)) {
          rst[k] = Util.clone(obj[k]);
        }
      }
    }
    return rst;
  },
  downloadBlob: function downloadBlob(blob, fileName) {
    if (fileName === void 0)
      fileName = "";
    var url = window.URL.createObjectURL(blob);
    var a = document.createElement("a");
    document.body.appendChild(a);
    a.style.display = "none";
    a.href = url;
    a.download = fileName;
    a.addEventListener("click", function() {
      if (a.parentElement) {
        a.parentElement.removeChild(a);
      }
    });
    a.click();
    window.URL.revokeObjectURL(url);
  }
};
function removeFromArray(array, item) {
  var index = array.indexOf(item);
  if (index < 0) {
    return false;
  }
  var last = array.length - 1;
  if (index !== last) {
    var end = array[last];
    array[index] = end;
  }
  array.length--;
  return true;
}
function ObjectValues(obj) {
  return Object.keys(obj).map(function(key) {
    return obj[key];
  });
}
var DataType;
(function(DataType2) {
  DataType2[DataType2[
    /** Float */
    "FLOAT"
  ] = 5126] = "FLOAT";
  DataType2[DataType2[
    /** Floating-point two-dimensional vector */
    "FLOAT_VEC2"
  ] = 35664] = "FLOAT_VEC2";
  DataType2[DataType2[
    /** Floating-point three-dimensional vector */
    "FLOAT_VEC3"
  ] = 35665] = "FLOAT_VEC3";
  DataType2[DataType2[
    /** Floating-point four-dimensional vector */
    "FLOAT_VEC4"
  ] = 35666] = "FLOAT_VEC4";
  DataType2[DataType2[
    /** Integer */
    "INT"
  ] = 5124] = "INT";
  DataType2[DataType2[
    /** Integer two-dimensional vector */
    "INT_VEC2"
  ] = 35667] = "INT_VEC2";
  DataType2[DataType2[
    /** Integer three-dimensional vector */
    "INT_VEC3"
  ] = 35668] = "INT_VEC3";
  DataType2[DataType2[
    /** Integer four-dimensional vector */
    "INT_VEC4"
  ] = 35669] = "INT_VEC4";
  DataType2[DataType2[
    /** Boolean */
    "BOOL"
  ] = 35670] = "BOOL";
  DataType2[DataType2[
    /** Boolean two-dimensional vector */
    "BOOL_VEC2"
  ] = 35671] = "BOOL_VEC2";
  DataType2[DataType2[
    /** Boolean three-dimensional vector */
    "BOOL_VEC3"
  ] = 35672] = "BOOL_VEC3";
  DataType2[DataType2[
    /** Boolean four-dimensional vector */
    "BOOL_VEC4"
  ] = 35673] = "BOOL_VEC4";
  DataType2[DataType2[
    /** Second-order matrix */
    "FLOAT_MAT2"
  ] = 35674] = "FLOAT_MAT2";
  DataType2[DataType2[
    /** Third-order matrix */
    "FLOAT_MAT3"
  ] = 35675] = "FLOAT_MAT3";
  DataType2[DataType2[
    /** Fourth-order matrix */
    "FLOAT_MAT4"
  ] = 35676] = "FLOAT_MAT4";
  DataType2[DataType2[
    /** Float array */
    "FLOAT_ARRAY"
  ] = 35677] = "FLOAT_ARRAY";
  DataType2[DataType2[
    /** Floating-point two-dimensional vector array */
    "FLOAT_VEC2_ARRAY"
  ] = 1e5] = "FLOAT_VEC2_ARRAY";
  DataType2[DataType2[
    /** Floating-point three-dimensional vector array */
    "FLOAT_VEC3_ARRAY"
  ] = 100001] = "FLOAT_VEC3_ARRAY";
  DataType2[DataType2[
    /** Floating-point four-dimensional vector array */
    "FLOAT_VEC4_ARRAY"
  ] = 100002] = "FLOAT_VEC4_ARRAY";
  DataType2[DataType2[
    /** Integer array */
    "INT_ARRAY"
  ] = 100003] = "INT_ARRAY";
  DataType2[DataType2[
    /** Integer two-dimensional vector array */
    "INT_VEC2_ARRAY"
  ] = 100004] = "INT_VEC2_ARRAY";
  DataType2[DataType2[
    /** Integer three-dimensional vector array */
    "INT_VEC3_ARRAY"
  ] = 100005] = "INT_VEC3_ARRAY";
  DataType2[DataType2[
    /** Integer four-dimensional vector array */
    "INT_VEC4_ARRAY"
  ] = 100006] = "INT_VEC4_ARRAY";
  DataType2[DataType2[
    /** Second-order matrix array */
    "FLOAT_MAT2_ARRAY"
  ] = 100007] = "FLOAT_MAT2_ARRAY";
  DataType2[DataType2[
    /** Third-order matrix array */
    "FLOAT_MAT3_ARRAY"
  ] = 100008] = "FLOAT_MAT3_ARRAY";
  DataType2[DataType2[
    /** Fourth-order matrix array */
    "FLOAT_MAT4_ARRAY"
  ] = 100009] = "FLOAT_MAT4_ARRAY";
  DataType2[DataType2[
    /** 2D texture sampler array */
    "SAMPLER_2D_ARRAY"
  ] = 100010] = "SAMPLER_2D_ARRAY";
  DataType2[DataType2[
    /** Cube map texture sampler array */
    "SAMPLER_CUBE_ARRAY"
  ] = 100011] = "SAMPLER_CUBE_ARRAY";
  DataType2[DataType2[
    /** 2D sampler */
    "SAMPLER_2D"
  ] = 35678] = "SAMPLER_2D";
  DataType2[DataType2[
    /** Cube map Texture sampler */
    "SAMPLER_CUBE"
  ] = 35680] = "SAMPLER_CUBE";
  DataType2[DataType2[
    /** Byte */
    "BYTE"
  ] = 5120] = "BYTE";
  DataType2[DataType2[
    /** Unsigned byte */
    "UNSIGNED_BYTE"
  ] = 5121] = "UNSIGNED_BYTE";
  DataType2[DataType2[
    /** Short */
    "SHORT"
  ] = 5122] = "SHORT";
  DataType2[DataType2[
    /** Unsigned short */
    "UNSIGNED_SHORT"
  ] = 5123] = "UNSIGNED_SHORT";
  DataType2[
    DataType2[
      /** Unsigned int */
      "UNSIGNED_INT"
    ] = 5125
    // gl.UNSIGNED_INT
  ] = "UNSIGNED_INT";
})(DataType || (DataType = {}));
var GLCapabilityType;
(function(GLCapabilityType2) {
  GLCapabilityType2["shaderVertexID"] = "shaderVertexID";
  GLCapabilityType2["standardDerivatives"] = "OES_standard_derivatives";
  GLCapabilityType2["shaderTextureLod"] = "EXT_shader_texture_lod";
  GLCapabilityType2["elementIndexUint"] = "OES_element_index_uint";
  GLCapabilityType2["depthTexture"] = "WEBGL_depth_texture";
  GLCapabilityType2["drawBuffers"] = "WEBGL_draw_buffers";
  GLCapabilityType2["vertexArrayObject"] = "OES_vertex_array_object";
  GLCapabilityType2["instancedArrays"] = "ANGLE_instanced_arrays";
  GLCapabilityType2["multipleSample"] = "multipleSampleOnlySupportedInWebGL2";
  GLCapabilityType2["textureFloat"] = "OES_texture_float";
  GLCapabilityType2["textureFloatLinear"] = "OES_texture_float_linear";
  GLCapabilityType2["textureHalfFloat"] = "OES_texture_half_float";
  GLCapabilityType2["textureHalfFloatLinear"] = "OES_texture_half_float_linear";
  GLCapabilityType2["WEBGL_colorBufferFloat"] = "WEBGL_color_buffer_float";
  GLCapabilityType2["colorBufferFloat"] = "EXT_color_buffer_float";
  GLCapabilityType2["colorBufferHalfFloat"] = "EXT_color_buffer_half_float";
  GLCapabilityType2["textureFilterAnisotropic"] = "EXT_texture_filter_anisotropic";
  GLCapabilityType2["blendMinMax"] = "EXT_blend_minmax";
  GLCapabilityType2["astc"] = "WEBGL_compressed_texture_astc";
  GLCapabilityType2["astc_webkit"] = "WEBKIT_WEBGL_compressed_texture_astc";
  GLCapabilityType2["etc"] = "WEBGL_compressed_texture_etc";
  GLCapabilityType2["etc_webkit"] = "WEBKIT_WEBGL_compressed_texture_etc";
  GLCapabilityType2["etc1"] = "WEBGL_compressed_texture_etc1";
  GLCapabilityType2["etc1_webkit"] = "WEBKIT_WEBGL_compressed_texture_etc1";
  GLCapabilityType2["pvrtc"] = "WEBGL_compressed_texture_pvrtc";
  GLCapabilityType2["pvrtc_webkit"] = "WEBKIT_WEBGL_compressed_texture_pvrtc";
  GLCapabilityType2["s3tc"] = "WEBGL_compressed_texture_s3tc";
  GLCapabilityType2["s3tc_webkit"] = "WEBKIT_WEBGL_compressed_texture_s3tc";
})(GLCapabilityType || (GLCapabilityType = {}));
var Texture = function(RefObject2) {
  _inherits(Texture2, RefObject2);
  function Texture2() {
    var _this;
    _this = RefObject2.apply(this, arguments) || this;
    _this._isDepthTexture = false;
    _this._anisoLevel = 1;
    _this._useDepthCompareMode = false;
    return _this;
  }
  var _proto = Texture2.prototype;
  _proto.generateMipmaps = function generateMipmaps() {
    if (!this._mipmap)
      return;
    this._platformTexture.generateMipmaps();
  };
  _proto._setUseDepthCompareMode = function _setUseDepthCompareMode(value) {
    if (this._useDepthCompareMode !== value) {
      this._platformTexture.setUseDepthCompareMode(value);
      this._useDepthCompareMode = value;
    }
  };
  _proto._onDestroy = function _onDestroy() {
    this._platformTexture.destroy();
    this._platformTexture = null;
  };
  _proto._getMaxMiplevel = function _getMaxMiplevel(size) {
    return Math.floor(Math.log2(size));
  };
  _proto._getMipmapCount = function _getMipmapCount() {
    return this._mipmap ? Math.floor(Math.log2(Math.max(this._width, this._height))) + 1 : 1;
  };
  _create_class2(Texture2, [
    {
      key: "format",
      get: (
        /**
        * Texture format.
        */
        function get() {
          return this._format;
        }
      )
    },
    {
      key: "width",
      get: (
        /**
        * The width of the texture.
        */
        function get() {
          return this._width;
        }
      )
    },
    {
      key: "height",
      get: (
        /**
        * The height of the texture.
        */
        function get() {
          return this._height;
        }
      )
    },
    {
      key: "wrapModeU",
      get: (
        /**
        * Wrapping mode for texture coordinate S.
        */
        function get() {
          return this._wrapModeU;
        }
      ),
      set: function set(value) {
        if (value === this._wrapModeU)
          return;
        this._wrapModeU = value;
        this._platformTexture.wrapModeU = value;
      }
    },
    {
      key: "wrapModeV",
      get: (
        /**
        * Wrapping mode for texture coordinate T.
        */
        function get() {
          return this._wrapModeV;
        }
      ),
      set: function set(value) {
        if (value === this._wrapModeV)
          return;
        this._wrapModeV = value;
        this._platformTexture.wrapModeV = value;
      }
    },
    {
      key: "mipmapCount",
      get: (
        /**
        * Texture mipmapping count.
        */
        function get() {
          return this._mipmapCount;
        }
      )
    },
    {
      key: "filterMode",
      get: (
        /**
        * Filter mode for texture.
        */
        function get() {
          return this._filterMode;
        }
      ),
      set: function set(value) {
        if (value === this._filterMode)
          return;
        this._filterMode = value;
        this._platformTexture.filterMode = value;
      }
    },
    {
      key: "anisoLevel",
      get: (
        /**
        * Anisotropic level for texture.
        */
        function get() {
          return this._anisoLevel;
        }
      ),
      set: function set(value) {
        var max = this._engine._hardwareRenderer.capability.maxAnisoLevel;
        if (value > max) {
          Logger.warn("anisoLevel:" + value + ", exceeds the limit and is automatically downgraded to:" + max);
          value = max;
        }
        if (value < 1) {
          Logger.warn("anisoLevel:" + value + ", must be greater than 0, and is automatically downgraded to 1");
          value = 1;
        }
        if (value === this._anisoLevel)
          return;
        this._anisoLevel = value;
        this._platformTexture.anisoLevel = value;
      }
    },
    {
      key: "depthCompareFunction",
      get: (
        /**
        * Filter mode when texture as depth Texture.
        * @remarks Only depth-related formats take effect.
        */
        function get() {
          return this._depthCompareFunction;
        }
      ),
      set: function set(value) {
        if (!this._engine._hardwareRenderer._isWebGL2) {
          console.warn("depthCompareFunction only support WebGL2");
          return;
        }
        if (value !== this._depthCompareFunction) {
          this._depthCompareFunction = value;
          this._platformTexture.depthCompareFunction = value;
        }
      }
    }
  ]);
  return Texture2;
}(RefObject);
var RenderTarget = function(EngineObject2) {
  _inherits(RenderTarget2, EngineObject2);
  function RenderTarget2(engine, width, height, renderTexture, depth, antiAliasing) {
    if (depth === void 0)
      depth = RenderBufferDepthFormat.Depth;
    if (antiAliasing === void 0)
      antiAliasing = 1;
    var _this;
    _this = EngineObject2.call(this, engine) || this;
    _this._autoGenerateMipmaps = true;
    _this._width = width;
    _this._height = height;
    _this._antiAliasing = antiAliasing;
    _this._depth = depth;
    if (renderTexture) {
      var colorTextures = _instanceof(renderTexture, Array) ? renderTexture.slice() : [
        renderTexture
      ];
      for (var i = 0, n = colorTextures.length; i < n; i++) {
        if (colorTextures[i]._isDepthTexture) {
          throw "Render texture can't use depth format.";
        }
      }
      _this._colorTextures = colorTextures;
    } else {
      _this._colorTextures = [];
    }
    if (_instanceof(depth, Texture)) {
      if (!depth._isDepthTexture) {
        throw "Depth texture must use depth format.";
      }
      _this._depthTexture = depth;
    }
    _this._platformRenderTarget = engine._hardwareRenderer.createPlatformRenderTarget(_assert_this_initialized(_this));
    return _this;
  }
  var _proto = RenderTarget2.prototype;
  _proto.getColorTexture = function getColorTexture(index) {
    if (index === void 0)
      index = 0;
    return this._colorTextures[index];
  };
  _proto.generateMipmaps = function generateMipmaps() {
    if (this._autoGenerateMipmaps) {
      var colorTextures = this._colorTextures;
      for (var i = 0, n = colorTextures.length; i < n; i++) {
        var colorTexture = colorTextures[i];
        colorTexture.generateMipmaps();
      }
      this._depthTexture && this._depthTexture.generateMipmaps();
    }
  };
  _proto.destroy = function destroy() {
    this._platformRenderTarget.destroy();
    this._colorTextures.length = 0;
    this._depthTexture = null;
    this._depth = null;
  };
  _proto._setRenderTargetInfo = function _setRenderTargetInfo(faceIndex, mipLevel) {
    this._platformRenderTarget.setRenderTargetInfo(faceIndex, mipLevel);
  };
  _proto._blitRenderTarget = function _blitRenderTarget() {
    this._platformRenderTarget.blitRenderTarget();
  };
  _create_class2(RenderTarget2, [
    {
      key: "autoGenerateMipmaps",
      get: (
        /**
        * Whether to automatically generate multi-level textures.
        */
        function get() {
          return this._autoGenerateMipmaps;
        }
      ),
      set: function set(value) {
        this._autoGenerateMipmaps = value;
      }
    },
    {
      key: "width",
      get: (
        /**
        * Render target width.
        */
        function get() {
          return this._width;
        }
      )
    },
    {
      key: "height",
      get: (
        /**
        * Render target height.
        */
        function get() {
          return this._height;
        }
      )
    },
    {
      key: "colorTextureCount",
      get: (
        /**
        * Render color texture count.
        */
        function get() {
          return this._colorTextures.length;
        }
      )
    },
    {
      key: "depthTexture",
      get: (
        /**
        * Depth texture.
        */
        function get() {
          return this._depthTexture;
        }
      )
    },
    {
      key: "antiAliasing",
      get: (
        /**
        * Anti-aliasing level.
        * @remarks If the anti-aliasing level set is greater than the maximum level supported by the hardware, the maximum level of the hardware will be used.
        */
        function get() {
          return this._antiAliasing;
        }
      )
    }
  ]);
  return RenderTarget2;
}(EngineObject);
var Texture2D = function(Texture2) {
  _inherits(Texture2D2, Texture2);
  function Texture2D2(engine, width, height, format, mipmap) {
    if (format === void 0)
      format = TextureFormat.R8G8B8A8;
    if (mipmap === void 0)
      mipmap = true;
    var _this;
    _this = Texture2.call(this, engine) || this;
    _this._mipmap = mipmap;
    _this._width = width;
    _this._height = height;
    _this._format = format;
    _this._mipmapCount = _this._getMipmapCount();
    _this._isDepthTexture = format == TextureFormat.Depth || format == TextureFormat.DepthStencil || format == TextureFormat.Depth16 || format == TextureFormat.Depth24 || format == TextureFormat.Depth32 || format == TextureFormat.Depth24Stencil8 || format == TextureFormat.Depth32Stencil8;
    _this._platformTexture = engine._hardwareRenderer.createPlatformTexture2D(_assert_this_initialized(_this));
    _this.filterMode = TextureFilterMode.Bilinear;
    _this.wrapModeU = _this.wrapModeV = TextureWrapMode.Repeat;
    return _this;
  }
  var _proto = Texture2D2.prototype;
  _proto.setPixelBuffer = function setPixelBuffer(colorBuffer, mipLevel, x, y, width, height) {
    if (mipLevel === void 0)
      mipLevel = 0;
    if (x === void 0)
      x = 0;
    if (y === void 0)
      y = 0;
    this._platformTexture.setPixelBuffer(colorBuffer, mipLevel, x, y, width, height);
  };
  _proto.setImageSource = function setImageSource(imageSource, mipLevel, flipY, premultiplyAlpha, x, y) {
    if (mipLevel === void 0)
      mipLevel = 0;
    if (flipY === void 0)
      flipY = false;
    if (premultiplyAlpha === void 0)
      premultiplyAlpha = false;
    if (x === void 0)
      x = 0;
    if (y === void 0)
      y = 0;
    this._platformTexture.setImageSource(imageSource, mipLevel, flipY, premultiplyAlpha, x, y);
  };
  _proto.getPixelBuffer = function getPixelBuffer(xOrMipLevelOrOut, yOrMipLevel, width, height, mipLevelOrOut, out) {
    var argsLength = arguments.length;
    if (argsLength === 1) {
      this._platformTexture.getPixelBuffer(0, 0, this._width, this._height, 0, xOrMipLevelOrOut);
    } else if (argsLength === 2) {
      this._platformTexture.getPixelBuffer(0, 0, this._width >> xOrMipLevelOrOut, this._height >> xOrMipLevelOrOut, xOrMipLevelOrOut, yOrMipLevel);
    } else if (argsLength === 5) {
      this._platformTexture.getPixelBuffer(xOrMipLevelOrOut, yOrMipLevel, width, height, 0, mipLevelOrOut);
    } else if (argsLength === 6) {
      this._platformTexture.getPixelBuffer(xOrMipLevelOrOut, yOrMipLevel, width, height, mipLevelOrOut, out);
    }
  };
  return Texture2D2;
}(Texture);
var Texture2DArray = function(Texture2) {
  _inherits(Texture2DArray2, Texture2);
  function Texture2DArray2(engine, width, height, length2, format, mipmap) {
    if (format === void 0)
      format = TextureFormat.R8G8B8A8;
    if (mipmap === void 0)
      mipmap = true;
    var _this;
    _this = Texture2.call(this, engine) || this;
    _this._mipmap = mipmap;
    _this._width = width;
    _this._height = height;
    _this._length = length2;
    _this._format = format;
    _this._mipmapCount = _this._getMipmapCount();
    _this._platformTexture = engine._hardwareRenderer.createPlatformTexture2DArray(_assert_this_initialized(_this));
    _this.filterMode = TextureFilterMode.Bilinear;
    _this.wrapModeU = _this.wrapModeV = TextureWrapMode.Repeat;
    return _this;
  }
  var _proto = Texture2DArray2.prototype;
  _proto.setPixelBuffer = function setPixelBuffer(offsetIndex, colorBuffer, mipLevel, x, y, width, height, length2) {
    if (mipLevel === void 0)
      mipLevel = 0;
    if (x === void 0)
      x = 0;
    if (y === void 0)
      y = 0;
    this._platformTexture.setPixelBuffer(offsetIndex, colorBuffer, mipLevel, x, y, width, height, length2);
  };
  _proto.setImageSource = function setImageSource(elementIndex, imageSource, mipLevel, flipY, premultiplyAlpha, x, y) {
    if (mipLevel === void 0)
      mipLevel = 0;
    if (flipY === void 0)
      flipY = false;
    if (premultiplyAlpha === void 0)
      premultiplyAlpha = false;
    if (x === void 0)
      x = 0;
    if (y === void 0)
      y = 0;
    this._platformTexture.setImageSource(elementIndex, imageSource, mipLevel, flipY, premultiplyAlpha, x, y);
  };
  _proto.getPixelBuffer = function getPixelBuffer(elementIndex, xOrMipLevelOrOut, yOrMipLevel, width, height, mipLevelOrOut, out) {
    var argsLength = arguments.length;
    if (argsLength === 1) {
      this._platformTexture.getPixelBuffer(elementIndex, 0, 0, this._width, this._height, 0, xOrMipLevelOrOut);
    } else if (argsLength === 2) {
      this._platformTexture.getPixelBuffer(elementIndex, 0, 0, this._width >> xOrMipLevelOrOut, this._height >> xOrMipLevelOrOut, xOrMipLevelOrOut, yOrMipLevel);
    } else if (argsLength === 5) {
      this._platformTexture.getPixelBuffer(elementIndex, xOrMipLevelOrOut, yOrMipLevel, width, height, 0, mipLevelOrOut);
    } else if (argsLength === 6) {
      this._platformTexture.getPixelBuffer(elementIndex, xOrMipLevelOrOut, yOrMipLevel, width, height, mipLevelOrOut, out);
    }
  };
  _create_class2(Texture2DArray2, [
    {
      key: "length",
      get: (
        /**
        * The length of the texture.
        */
        function get() {
          return this._length;
        }
      )
    }
  ]);
  return Texture2DArray2;
}(Texture);
var TextureCube = function(Texture2) {
  _inherits(TextureCube2, Texture2);
  function TextureCube2(engine, size, format, mipmap) {
    if (format === void 0)
      format = TextureFormat.R8G8B8A8;
    if (mipmap === void 0)
      mipmap = true;
    var _this;
    _this = Texture2.call(this, engine) || this;
    _this._mipmap = mipmap;
    _this._width = size;
    _this._height = size;
    _this._format = format;
    _this._mipmapCount = _this._getMipmapCount();
    _this._platformTexture = engine._hardwareRenderer.createPlatformTextureCube(_assert_this_initialized(_this));
    _this.filterMode = TextureFilterMode.Bilinear;
    _this.wrapModeU = _this.wrapModeV = TextureWrapMode.Clamp;
    return _this;
  }
  var _proto = TextureCube2.prototype;
  _proto.setPixelBuffer = function setPixelBuffer(face, colorBuffer, mipLevel, x, y, width, height) {
    if (mipLevel === void 0)
      mipLevel = 0;
    if (x === void 0)
      x = 0;
    if (y === void 0)
      y = 0;
    this._platformTexture.setPixelBuffer(face, colorBuffer, mipLevel, x, y, width, height);
  };
  _proto.setImageSource = function setImageSource(face, imageSource, mipLevel, flipY, premultiplyAlpha, x, y) {
    if (mipLevel === void 0)
      mipLevel = 0;
    if (flipY === void 0)
      flipY = false;
    if (premultiplyAlpha === void 0)
      premultiplyAlpha = false;
    if (x === void 0)
      x = 0;
    if (y === void 0)
      y = 0;
    this._platformTexture.setImageSource(face, imageSource, mipLevel, flipY, premultiplyAlpha, x, y);
  };
  _proto.getPixelBuffer = function getPixelBuffer(face, xOrMipLevelOrOut, yOrMipLevel, width, height, mipLevelOrOut, out) {
    var argsLength = arguments.length;
    if (argsLength === 2) {
      this._platformTexture.getPixelBuffer(face, 0, 0, this._width, this._height, 0, xOrMipLevelOrOut);
    } else if (argsLength === 3) {
      this._platformTexture.getPixelBuffer(face, 0, 0, this._width >> xOrMipLevelOrOut, this._height >> xOrMipLevelOrOut, xOrMipLevelOrOut, yOrMipLevel);
    } else if (argsLength === 6) {
      this._platformTexture.getPixelBuffer(face, xOrMipLevelOrOut, yOrMipLevel, width, height, 0, mipLevelOrOut);
    } else if (argsLength === 7) {
      this._platformTexture.getPixelBuffer(face, xOrMipLevelOrOut, yOrMipLevel, width, height, mipLevelOrOut, out);
    }
  };
  return TextureCube2;
}(Texture);
var FontAtlas = function(RefObject2) {
  _inherits(FontAtlas2, RefObject2);
  function FontAtlas2(engine) {
    var _this;
    _this = RefObject2.call(this, engine) || this;
    _this._charInfoMap = {};
    _this._space = 1;
    _this._curX = 1;
    _this._curY = 1;
    _this._nextY = 1;
    return _this;
  }
  var _proto = FontAtlas2.prototype;
  _proto._onDestroy = function _onDestroy() {
    this._texture.destroy();
    this._texture = null;
    this._charInfoMap = {};
  };
  _proto.uploadCharTexture = function uploadCharTexture(charInfo) {
    var width = charInfo.w, height = charInfo.h, data = charInfo.data;
    var _this = this, space = _this._space, texture = _this.texture;
    var textureSize = texture.width;
    var offsetWidth = width + space;
    var offsetHeight = height + space;
    if (1 + offsetWidth >= textureSize || 1 + offsetHeight >= textureSize) {
      throw Error("The char fontSize is too large.");
    }
    var endX = this._curX + offsetWidth;
    if (endX >= textureSize) {
      this._curX = space;
      this._curY = this._nextY + space;
    }
    var endY = this._curY + offsetHeight;
    if (endY > this._nextY) {
      this._nextY = endY;
    }
    if (endY >= textureSize) {
      return false;
    }
    if (width > 0 && height > 0 && data) {
      texture.setPixelBuffer(data, 0, this._curX, this._curY, width, height);
      texture.generateMipmaps();
    }
    var textureSizeReciprocal = 1 / textureSize;
    var x = this._curX;
    var y = this._curY;
    var w = width;
    var h = height;
    var u0 = x * textureSizeReciprocal;
    var u1 = (x + w) * textureSizeReciprocal;
    var v0 = y * textureSizeReciprocal;
    var v1 = (y + h) * textureSizeReciprocal;
    charInfo.x = x;
    charInfo.y = y;
    var uvs = charInfo.uvs;
    uvs[0].set(u0, v0);
    uvs[1].set(u1, v0);
    uvs[2].set(u1, v1);
    uvs[3].set(u0, v1);
    this._curX += offsetWidth + space;
    return true;
  };
  _proto.addCharInfo = function addCharInfo(char, charInfo) {
    this._charInfoMap[char.charCodeAt(0)] = charInfo;
  };
  _proto.getCharInfo = function getCharInfo(char) {
    return this._charInfoMap[char.charCodeAt(0)];
  };
  _create_class2(FontAtlas2, [
    {
      key: "texture",
      get: function get() {
        return this._texture;
      },
      set: function set(value) {
        this._texture = value;
      }
    }
  ]);
  return FontAtlas2;
}(RefObject);
var SubFont = function() {
  function SubFont2(engine) {
    this._fontAtlases = [];
    this._lastIndex = -1;
    this._engine = engine;
  }
  var _proto = SubFont2.prototype;
  _proto.destroy = function destroy() {
    var fontAtlases = this._fontAtlases;
    for (var i = 0, n = fontAtlases.length; i < n; ++i) {
      fontAtlases[i].destroy(true);
    }
    fontAtlases.length = 0;
  };
  _proto._uploadCharTexture = function _uploadCharTexture(charInfo) {
    var fontAtlases = this._fontAtlases;
    var lastIndex = this._lastIndex;
    if (lastIndex === -1) {
      this._createFontAtlas();
      lastIndex++;
    }
    var fontAtlas = fontAtlases[lastIndex];
    if (!fontAtlas.uploadCharTexture(charInfo)) {
      fontAtlas = this._createFontAtlas();
      fontAtlas.uploadCharTexture(charInfo);
      lastIndex++;
    }
    this._lastIndex = lastIndex;
    charInfo.data = null;
  };
  _proto._addCharInfo = function _addCharInfo(char, charInfo) {
    var lastIndex = this._lastIndex;
    charInfo.index = lastIndex;
    this._fontAtlases[lastIndex].addCharInfo(char, charInfo);
  };
  _proto._getCharInfo = function _getCharInfo(char) {
    var fontAtlases = this._fontAtlases;
    for (var i = 0, n = fontAtlases.length; i < n; ++i) {
      var fontAtlas = fontAtlases[i];
      var charInfo = fontAtlas.getCharInfo(char);
      if (charInfo) {
        return charInfo;
      }
    }
    return null;
  };
  _proto._getTextureByIndex = function _getTextureByIndex(index) {
    var fontAtlas = this._fontAtlases[index];
    if (fontAtlas) {
      return fontAtlas.texture;
    }
    return null;
  };
  _proto._getLastIndex = function _getLastIndex() {
    return this._lastIndex;
  };
  _proto._createFontAtlas = function _createFontAtlas() {
    var _this = this, engine = _this._engine;
    var fontAtlas = new FontAtlas(engine);
    var texture = new Texture2D(engine, 256, 256);
    fontAtlas.texture = texture;
    this._fontAtlases.push(fontAtlas);
    return fontAtlas;
  };
  return SubFont2;
}();
var Font = function(RefObject2) {
  _inherits(Font2, RefObject2);
  function Font2(engine, name) {
    if (name === void 0)
      name = "";
    var _this;
    _this = RefObject2.call(this, engine) || this;
    _this._name = "";
    _this._subFontMap = {};
    _this._name = name;
    return _this;
  }
  var _proto = Font2.prototype;
  _proto._getSubFont = function _getSubFont(fontSize, fontStyle) {
    var key = fontSize + "-" + fontStyle;
    var subFontMap = this._subFontMap;
    var subFont = subFontMap[key];
    if (subFont) {
      return subFont;
    }
    subFont = new SubFont(this.engine);
    subFontMap[key] = subFont;
    return subFont;
  };
  _proto._onDestroy = function _onDestroy() {
    var subFontMap = this._subFontMap;
    for (var k in subFontMap) {
      subFontMap[k].destroy();
    }
    this._subFontMap = null;
    delete Font2._fontMap[this._name];
  };
  Font2.createFromOS = function createFromOS(engine, name) {
    if (name) {
      var fontMap = Font2._fontMap;
      var font = fontMap[name];
      if (font) {
        return font;
      }
      font = new Font2(engine, name);
      fontMap[name] = font;
      return font;
    }
    return null;
  };
  _create_class2(Font2, [
    {
      key: "name",
      get: (
        /**
        * The name of the font object.
        */
        function get() {
          return this._name;
        }
      )
    }
  ]);
  return Font2;
}(RefObject);
(function() {
  Font._fontMap = {};
})();
var AssetPromise = function() {
  function AssetPromise2(executor) {
    var _this = this;
    this._state = "pending";
    this._onProgressCallback = [];
    this._promise = new Promise(function(resolve, reject) {
      _this._reject = reject;
      var onResolve = function(value) {
        if (_this._state === "pending") {
          resolve(value);
          _this._state = "fulfilled";
          _this._onProgressCallback = void 0;
        }
      };
      var onReject = function(reason) {
        if (_this._state === "pending") {
          reject(reason);
          _this._state = "rejected";
          _this._onProgressCallback = void 0;
        }
      };
      var onCancel = function(callback) {
        if (_this._state === "pending") {
          _this._onCancelHandler = callback;
        }
      };
      var setProgress = function(progress) {
        if (_this._state === "pending") {
          _this._onProgressCallback.forEach(function(callback) {
            return callback(progress);
          });
        }
      };
      executor(onResolve, onReject, setProgress, onCancel);
    });
  }
  var _proto = AssetPromise2.prototype;
  _proto.onProgress = function onProgress(callback) {
    this._onProgressCallback.push(callback);
    return this;
  };
  _proto.then = function then(onfulfilled, onrejected) {
    var _this = this;
    return new AssetPromise2(function(resolve, reject) {
      _this._promise.then(onfulfilled, onrejected).then(resolve).catch(reject);
    });
  };
  _proto.catch = function _catch(onRejected) {
    var _this = this;
    return new AssetPromise2(function(resolve, reject) {
      _this._promise.catch(onRejected).then(resolve).catch(reject);
    });
  };
  _proto.finally = function _finally(onFinally) {
    return this._promise.finally(onFinally);
  };
  _proto.cancel = function cancel() {
    if (this._state !== "pending") {
      return;
    }
    this._state = "canceled";
    this._reject("canceled");
    this._onCancelHandler && this._onCancelHandler();
    return this;
  };
  AssetPromise2.all = function all(promises) {
    return new AssetPromise2(function(resolve, reject, setProgress) {
      var onComplete = function onComplete2(index, resultValue) {
        completed++;
        results[index] = resultValue;
        setProgress(completed / count);
        if (completed === count) {
          resolve(results);
        }
      };
      var onProgress = function onProgress2(promise, index) {
        if (_instanceof(promise, Promise) || _instanceof(promise, AssetPromise2)) {
          promise.then(function(value) {
            onComplete(index, value);
          }, reject);
        } else {
          Promise.resolve().then(function() {
            onComplete(index, promise);
          });
        }
      };
      var count = promises.length;
      var results = new Array(count);
      var completed = 0;
      if (count === 0) {
        return resolve(results);
      }
      for (var i = 0; i < count; i++) {
        onProgress(promises[i], i);
      }
    });
  };
  _create_class2(AssetPromise2, [
    {
      key: Symbol.toStringTag,
      get: (
        /** compatible with Promise */
        function get() {
          return "AssetPromise";
        }
      )
    }
  ]);
  return AssetPromise2;
}();
var PromiseState;
(function(PromiseState2) {
  PromiseState2["Pending"] = "pending";
  PromiseState2["Fulfilled"] = "fulfilled";
  PromiseState2["Rejected"] = "rejected";
  PromiseState2["Canceled"] = "canceled";
})(PromiseState || (PromiseState = {}));
var ResourceManager = function() {
  function ResourceManager2(engine) {
    this.engine = engine;
    this.retryCount = 1;
    this.retryInterval = 0;
    this.timeout = Infinity;
    this._assetPool = /* @__PURE__ */ Object.create(null);
    this._assetUrlPool = /* @__PURE__ */ Object.create(null);
    this._refObjectPool = /* @__PURE__ */ Object.create(null);
    this._loadingPromises = {};
    this._objectPool = /* @__PURE__ */ Object.create(null);
    this._editorResourceConfig = /* @__PURE__ */ Object.create(null);
    this._virtualPathMap = /* @__PURE__ */ Object.create(null);
  }
  var _proto = ResourceManager2.prototype;
  _proto.load = function load(assetInfo) {
    var _this = this;
    if (!Array.isArray(assetInfo)) {
      return this._loadSingleItem(assetInfo);
    }
    var promises = assetInfo.map(function(item) {
      return _this._loadSingleItem(item);
    });
    return AssetPromise.all(promises);
  };
  _proto.getFromCache = function getFromCache(url) {
    var _this__assetUrlPool_url;
    return (_this__assetUrlPool_url = this._assetUrlPool[url]) != null ? _this__assetUrlPool_url : null;
  };
  _proto.getAssetPath = function getAssetPath(instanceId) {
    return this._assetPool[instanceId];
  };
  _proto.cancelNotLoaded = function cancelNotLoaded(url) {
    var _this = this;
    if (!url) {
      ObjectValues(this._loadingPromises).forEach(function(promise) {
        promise.cancel();
      });
    } else if (typeof url === "string") {
      var _this__loadingPromises_url;
      (_this__loadingPromises_url = this._loadingPromises[url]) == null ? void 0 : _this__loadingPromises_url.cancel();
    } else {
      url.forEach(function(p) {
        var _this__loadingPromises_p;
        (_this__loadingPromises_p = _this._loadingPromises[p]) == null ? void 0 : _this__loadingPromises_p.cancel();
      });
    }
  };
  _proto.gc = function gc() {
    this._gc(false);
  };
  _proto._addAsset = function _addAsset(path, asset) {
    this._assetPool[asset.instanceId] = path;
    this._assetUrlPool[path] = asset;
  };
  _proto._deleteAsset = function _deleteAsset(asset) {
    var id = asset.instanceId;
    var path = this._assetPool[id];
    if (path) {
      delete this._assetPool[id];
      delete this._assetUrlPool[path];
    }
  };
  _proto._addRefObject = function _addRefObject(id, asset) {
    this._refObjectPool[id] = asset;
  };
  _proto._deleteRefObject = function _deleteRefObject(id) {
    delete this._refObjectPool[id];
  };
  _proto._destroy = function _destroy() {
    this.cancelNotLoaded();
    this._gc(true);
    this._assetPool = null;
    this._assetUrlPool = null;
    this._refObjectPool = null;
  };
  _proto._assignDefaultOptions = function _assignDefaultOptions(assetInfo) {
    var _assetInfo_type;
    assetInfo.type = (_assetInfo_type = assetInfo.type) != null ? _assetInfo_type : ResourceManager2._getTypeByUrl(assetInfo.url);
    if (assetInfo.type === void 0) {
      throw "asset type should be specified: " + assetInfo.url;
    }
    var _assetInfo_retryCount;
    assetInfo.retryCount = (_assetInfo_retryCount = assetInfo.retryCount) != null ? _assetInfo_retryCount : this.retryCount;
    var _assetInfo_timeout;
    assetInfo.timeout = (_assetInfo_timeout = assetInfo.timeout) != null ? _assetInfo_timeout : this.timeout;
    var _assetInfo_retryInterval;
    assetInfo.retryInterval = (_assetInfo_retryInterval = assetInfo.retryInterval) != null ? _assetInfo_retryInterval : this.retryInterval;
    var _assetInfo_url;
    assetInfo.url = (_assetInfo_url = assetInfo.url) != null ? _assetInfo_url : assetInfo.urls.join(",");
    return assetInfo;
  };
  _proto._loadSingleItem = function _loadSingleItem(itemOrURL) {
    var _this = this;
    var item = this._assignDefaultOptions(typeof itemOrURL === "string" ? {
      url: itemOrURL
    } : itemOrURL);
    var itemURL = item.url;
    var url = this._virtualPathMap[itemURL] ? this._virtualPathMap[itemURL] : itemURL;
    var _this__parseURL = this._parseURL(url), assetBaseURL = _this__parseURL.assetBaseURL, queryPath = _this__parseURL.queryPath;
    var paths = queryPath ? this._parseQueryPath(queryPath) : [];
    var cacheObject = this._assetUrlPool[assetBaseURL];
    if (cacheObject) {
      return new AssetPromise(function(resolve) {
        resolve(_this._getResolveResource(cacheObject, paths));
      });
    }
    var assetURL = assetBaseURL;
    if (queryPath) {
      assetURL += "?q=" + paths.shift();
    }
    var loadingPromises = this._loadingPromises;
    var loadingPromise = loadingPromises[assetURL];
    if (loadingPromise) {
      return new AssetPromise(function(resolve, reject) {
        loadingPromise.then(function(resource) {
          resolve(_this._getResolveResource(resource, paths));
        }).catch(function(error2) {
          reject(error2);
        });
      });
    }
    var loader = ResourceManager2._loaders[item.type];
    if (!loader) {
      throw "loader not found: " + item.type;
    }
    item.url = assetBaseURL;
    var promise = loader.load(item, this);
    if (_instanceof(promise, AssetPromise)) {
      loadingPromises[assetBaseURL] = promise;
      promise.then(function(resource) {
        if (loader.useCache) {
          _this._addAsset(assetBaseURL, resource);
        }
        delete loadingPromises[assetBaseURL];
      }, function() {
        return delete loadingPromises[assetBaseURL];
      });
      return promise;
    } else {
      var _loop = function(subURL2) {
        var subPromise = promise[subURL2];
        var isMaster = assetBaseURL === subURL2;
        loadingPromises[subURL2] = subPromise;
        subPromise.then(function(resource) {
          if (isMaster) {
            if (loader.useCache) {
              _this._addAsset(subURL2, resource);
              for (var k in promise)
                delete loadingPromises[k];
            }
          }
        }, function() {
          for (var k in promise)
            delete loadingPromises[k];
        });
      };
      for (var subURL in promise)
        _loop(subURL);
      return promise[assetURL].then(function(resource) {
        return _this._getResolveResource(resource, paths);
      });
    }
  };
  _proto._gc = function _gc(forceDestroy) {
    var objects = ObjectValues(this._refObjectPool);
    for (var i = 0, len = objects.length; i < len; i++) {
      if (!objects[i].isGCIgnored || forceDestroy) {
        objects[i].destroy();
      }
    }
  };
  _proto._getResolveResource = function _getResolveResource(resource, paths) {
    var subResource = resource;
    if (paths) {
      for (var i = 0, n = paths.length; i < n; i++) {
        var path = paths[i];
        subResource = subResource[path];
      }
    }
    return subResource;
  };
  _proto._parseURL = function _parseURL(path) {
    var assetBaseURL = path;
    var index = assetBaseURL.indexOf("?");
    if (index !== -1) {
      assetBaseURL = assetBaseURL.slice(0, index);
    }
    return {
      assetBaseURL,
      queryPath: this._getParameterByName("q", path)
    };
  };
  _proto._getParameterByName = function _getParameterByName(name, url) {
    if (url === void 0)
      url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"), results = regex.exec(url);
    if (!results)
      return null;
    if (!results[2])
      return "";
    return decodeURIComponent(results[2].replace(/\+/g, " "));
  };
  _proto._parseQueryPath = function _parseQueryPath(string) {
    var result = [];
    if (string.charCodeAt(0) === charCodeOfDot$1) {
      result.push("");
    }
    string.replace(rePropName$1, function(match, expression, quote, subString) {
      var key = match;
      if (quote) {
        key = subString.replace(reEscapeChar$1, "$1");
      } else if (expression) {
        key = expression.trim();
      }
      result.push(key);
    });
    return result;
  };
  _proto.getResourceByRef = function getResourceByRef(ref) {
    var refId = ref.refId, key = ref.key, isClone = ref.isClone;
    var obj = this._objectPool[refId];
    var promise;
    if (obj) {
      promise = Promise.resolve(obj);
    } else {
      var _this__editorResourceConfig_refId;
      var url = (_this__editorResourceConfig_refId = this._editorResourceConfig[refId]) == null ? void 0 : _this__editorResourceConfig_refId.path;
      if (!url) {
        Logger.warn("refId:" + refId + " is not find in this._editorResourceConfig.");
        return Promise.resolve(null);
      }
      url = key ? "" + url + (url.indexOf("?") > -1 ? "&" : "?") + "q=" + key : url;
      promise = this.load({
        url,
        type: this._editorResourceConfig[refId].type
      });
    }
    return promise.then(function(item) {
      return isClone ? item.clone() : item;
    });
  };
  _proto.initVirtualResources = function initVirtualResources(config) {
    var _this = this;
    config.forEach(function(element) {
      _this._virtualPathMap[element.virtualPath] = element.path;
      _this._editorResourceConfig[element.id] = element;
    });
  };
  ResourceManager2._addLoader = function _addLoader(type, loader, extNames) {
    this._loaders[type] = loader;
    for (var i = 0, len = extNames.length; i < len; i++) {
      this._extTypeMapping[extNames[i]] = type;
    }
  };
  ResourceManager2._getTypeByUrl = function _getTypeByUrl(url) {
    var path = url.split("?")[0];
    return this._extTypeMapping[path.substring(path.lastIndexOf(".") + 1)];
  };
  return ResourceManager2;
}();
(function() {
  ResourceManager._loaders = {};
})();
(function() {
  ResourceManager._extTypeMapping = {};
})();
function resourceLoader(assetType, extnames, useCache) {
  if (useCache === void 0)
    useCache = true;
  return function(Target) {
    var loader = new Target(useCache);
    ResourceManager._addLoader(assetType, loader, extnames);
  };
}
var charCodeOfDot$1 = ".".charCodeAt(0);
var reEscapeChar$1 = /\\(\\)?/g;
var rePropName$1 = RegExp(
  // Match anything that isn't a dot or bracket.
  `[^.[\\]]+|\\[(?:([^"'][^[]*)|(["'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))`,
  "g"
);
var DisorderedArray = function() {
  function DisorderedArray2(count) {
    if (count === void 0)
      count = 0;
    this.length = 0;
    this._elements = new Array(count);
  }
  var _proto = DisorderedArray2.prototype;
  _proto.add = function add(element) {
    if (this.length === this._elements.length)
      this._elements.push(element);
    else
      this._elements[this.length] = element;
    this.length++;
  };
  _proto.delete = function _delete(element) {
    var index = this._elements.indexOf(element);
    this.deleteByIndex(index);
  };
  _proto.get = function get(index) {
    if (index >= this.length) {
      throw "Index is out of range.";
    }
    return this._elements[index];
  };
  _proto.deleteByIndex = function deleteByIndex(index) {
    var elements = this._elements;
    var end = null;
    var lastIndex = this.length - 1;
    if (index !== lastIndex) {
      end = elements[lastIndex];
      elements[index] = end;
    }
    this.length--;
    return end;
  };
  _proto.garbageCollection = function garbageCollection() {
    this._elements.length = this.length;
  };
  return DisorderedArray2;
}();
var ComponentsManager = function() {
  function ComponentsManager2() {
    this._renderers = new DisorderedArray();
    this._onStartScripts = new DisorderedArray();
    this._onUpdateScripts = new DisorderedArray();
    this._onLateUpdateScripts = new DisorderedArray();
    this._onPhysicsUpdateScripts = new DisorderedArray();
    this._disableScripts = [];
    this._pendingDestroyScripts = [];
    this._disposeDestroyScripts = [];
    this._onUpdateAnimations = new DisorderedArray();
    this._onUpdateRenderers = new DisorderedArray();
    this._componentsContainerPool = [];
  }
  var _proto = ComponentsManager2.prototype;
  _proto.addRenderer = function addRenderer(renderer) {
    renderer._rendererIndex = this._renderers.length;
    this._renderers.add(renderer);
  };
  _proto.removeRenderer = function removeRenderer(renderer) {
    var replaced = this._renderers.deleteByIndex(renderer._rendererIndex);
    replaced && (replaced._rendererIndex = renderer._rendererIndex);
    renderer._rendererIndex = -1;
  };
  _proto.addOnStartScript = function addOnStartScript(script) {
    script._onStartIndex = this._onStartScripts.length;
    this._onStartScripts.add(script);
  };
  _proto.removeOnStartScript = function removeOnStartScript(script) {
    var replaced = this._onStartScripts.deleteByIndex(script._onStartIndex);
    replaced && (replaced._onStartIndex = script._onStartIndex);
    script._onStartIndex = -1;
  };
  _proto.addOnUpdateScript = function addOnUpdateScript(script) {
    script._onUpdateIndex = this._onUpdateScripts.length;
    this._onUpdateScripts.add(script);
  };
  _proto.removeOnUpdateScript = function removeOnUpdateScript(script) {
    var replaced = this._onUpdateScripts.deleteByIndex(script._onUpdateIndex);
    replaced && (replaced._onUpdateIndex = script._onUpdateIndex);
    script._onUpdateIndex = -1;
  };
  _proto.addOnLateUpdateScript = function addOnLateUpdateScript(script) {
    script._onLateUpdateIndex = this._onLateUpdateScripts.length;
    this._onLateUpdateScripts.add(script);
  };
  _proto.removeOnLateUpdateScript = function removeOnLateUpdateScript(script) {
    var replaced = this._onLateUpdateScripts.deleteByIndex(script._onLateUpdateIndex);
    replaced && (replaced._onLateUpdateIndex = script._onLateUpdateIndex);
    script._onLateUpdateIndex = -1;
  };
  _proto.addOnPhysicsUpdateScript = function addOnPhysicsUpdateScript(script) {
    script._onPhysicsUpdateIndex = this._onPhysicsUpdateScripts.length;
    this._onPhysicsUpdateScripts.add(script);
  };
  _proto.removeOnPhysicsUpdateScript = function removeOnPhysicsUpdateScript(script) {
    var replaced = this._onPhysicsUpdateScripts.deleteByIndex(script._onPhysicsUpdateIndex);
    replaced && (replaced._onPhysicsUpdateIndex = script._onPhysicsUpdateIndex);
    script._onPhysicsUpdateIndex = -1;
  };
  _proto.addOnUpdateAnimations = function addOnUpdateAnimations(animation) {
    animation._onUpdateIndex = this._onUpdateAnimations.length;
    this._onUpdateAnimations.add(animation);
  };
  _proto.removeOnUpdateAnimations = function removeOnUpdateAnimations(animation) {
    var replaced = this._onUpdateAnimations.deleteByIndex(animation._onUpdateIndex);
    replaced && (replaced._onUpdateIndex = animation._onUpdateIndex);
    animation._onUpdateIndex = -1;
  };
  _proto.addOnUpdateRenderers = function addOnUpdateRenderers(renderer) {
    renderer._onUpdateIndex = this._onUpdateRenderers.length;
    this._onUpdateRenderers.add(renderer);
  };
  _proto.removeOnUpdateRenderers = function removeOnUpdateRenderers(renderer) {
    var replaced = this._onUpdateRenderers.deleteByIndex(renderer._onUpdateIndex);
    replaced && (replaced._onUpdateIndex = renderer._onUpdateIndex);
    renderer._onUpdateIndex = -1;
  };
  _proto.addDisableScript = function addDisableScript(component) {
    this._disableScripts.push(component);
  };
  _proto.addPendingDestroyScript = function addPendingDestroyScript(component) {
    this._pendingDestroyScripts.push(component);
  };
  _proto.callScriptOnStart = function callScriptOnStart() {
    var onStartScripts = this._onStartScripts;
    if (onStartScripts.length > 0) {
      var elements = onStartScripts._elements;
      for (var i = 0; i < onStartScripts.length; i++) {
        var script = elements[i];
        if (!script._waitHandlingInValid) {
          script._started = true;
          script._onStartIndex = -1;
          script.onStart();
        }
      }
      onStartScripts.length = 0;
    }
  };
  _proto.callScriptOnUpdate = function callScriptOnUpdate(deltaTime) {
    var elements = this._onUpdateScripts._elements;
    for (var i = this._onUpdateScripts.length - 1; i >= 0; --i) {
      var element = elements[i];
      if (!element._waitHandlingInValid && element._started) {
        element.onUpdate(deltaTime);
      }
    }
  };
  _proto.callScriptOnLateUpdate = function callScriptOnLateUpdate(deltaTime) {
    var elements = this._onLateUpdateScripts._elements;
    for (var i = this._onLateUpdateScripts.length - 1; i >= 0; --i) {
      var element = elements[i];
      if (!element._waitHandlingInValid && element._started) {
        element.onLateUpdate(deltaTime);
      }
    }
  };
  _proto.callScriptOnPhysicsUpdate = function callScriptOnPhysicsUpdate() {
    var elements = this._onPhysicsUpdateScripts._elements;
    for (var i = this._onPhysicsUpdateScripts.length - 1; i >= 0; --i) {
      var element = elements[i];
      if (!element._waitHandlingInValid && element._started) {
        element.onPhysicsUpdate();
      }
    }
  };
  _proto.callAnimationUpdate = function callAnimationUpdate(deltaTime) {
    var elements = this._onUpdateAnimations._elements;
    for (var i = this._onUpdateAnimations.length - 1; i >= 0; --i) {
      elements[i].update(deltaTime);
    }
  };
  _proto.callRendererOnUpdate = function callRendererOnUpdate(deltaTime) {
    var elements = this._onUpdateRenderers._elements;
    for (var i = this._onUpdateRenderers.length - 1; i >= 0; --i) {
      elements[i].update(deltaTime);
    }
  };
  _proto.handlingInvalidScripts = function handlingInvalidScripts() {
    var _this = this, disableScripts = _this._disableScripts;
    var length2 = disableScripts.length;
    if (length2 > 0) {
      for (var i = length2 - 1; i >= 0; i--) {
        var disableScript = disableScripts[i];
        disableScript._waitHandlingInValid && disableScript._handlingInValid();
      }
      disableScripts.length = 0;
    }
    var _this1 = this, pendingDestroyScripts = _this1._disposeDestroyScripts, disposeDestroyScripts = _this1._pendingDestroyScripts;
    this._disposeDestroyScripts = disposeDestroyScripts;
    this._pendingDestroyScripts = pendingDestroyScripts;
    length2 = disposeDestroyScripts.length;
    if (length2 > 0) {
      for (var i1 = length2 - 1; i1 >= 0; i1--) {
        disposeDestroyScripts[i1].onDestroy();
      }
      disposeDestroyScripts.length = 0;
    }
  };
  _proto.callCameraOnBeginRender = function callCameraOnBeginRender(camera) {
    var scripts = camera.entity._scripts;
    for (var i = scripts.length - 1; i >= 0; --i) {
      var script = scripts.get(i);
      script._waitHandlingInValid || script.onBeginRender(camera);
    }
  };
  _proto.callCameraOnEndRender = function callCameraOnEndRender(camera) {
    var scripts = camera.entity._scripts;
    for (var i = scripts.length - 1; i >= 0; --i) {
      var script = scripts.get(i);
      script._waitHandlingInValid || script.onEndRender(camera);
    }
  };
  _proto.getActiveChangedTempList = function getActiveChangedTempList() {
    return this._componentsContainerPool.length ? this._componentsContainerPool.pop() : [];
  };
  _proto.putActiveChangedTempList = function putActiveChangedTempList(componentContainer) {
    componentContainer.length = 0;
    this._componentsContainerPool.push(componentContainer);
  };
  return ComponentsManager2;
}();
var ComponentCloner = function() {
  function ComponentCloner2() {
  }
  ComponentCloner2.cloneComponent = function cloneComponent(source, target) {
    var cloneModes = CloneManager.getCloneMode(source.constructor);
    var keys = Object.keys(source);
    for (var i = 0, n = keys.length; i < n; i++) {
      var k = keys[i];
      var cloneMode = cloneModes[k];
      switch (cloneMode) {
        case void 0:
        case CloneMode.Assignment:
          target[k] = source[k];
          break;
        case CloneMode.Shallow:
          var sourcePropS = source[k];
          if (_instanceof(sourcePropS, Object)) {
            var tarProp = target[k];
            tarProp == null && (tarProp = target[k] = sourcePropS.constructor());
            Object.assign(tarProp, sourcePropS);
          } else {
            target[k] = sourcePropS;
          }
          break;
        case CloneMode.Deep:
          var sourcePropD = source[k];
          if (_instanceof(sourcePropD, Object)) {
            var tarProp1 = target[k];
            tarProp1 == null && (tarProp1 = target[k] = sourcePropD.constructor());
            CloneManager.deepCloneObject(sourcePropD, tarProp1);
          } else {
            target[k] = sourcePropD;
          }
          break;
      }
    }
    if (source._cloneTo) {
      source._cloneTo(target);
    }
  };
  return ComponentCloner2;
}();
var ComponentsDependencies = function() {
  function ComponentsDependencies2() {
  }
  ComponentsDependencies2._register = function _register(currentComponent, dependentComponent) {
    this._addDependency(currentComponent, dependentComponent, this._dependenciesMap);
    this._addDependency(dependentComponent, currentComponent, this._invDependenciesMap);
  };
  ComponentsDependencies2._addCheck = function _addCheck(entity, type) {
    var dependentComponents2 = ComponentsDependencies2._dependenciesMap.get(type);
    if (dependentComponents2) {
      for (var i = 0, n = dependentComponents2.length; i < n; i++) {
        var dependentComponent = dependentComponents2[i];
        if (!entity.getComponent(dependentComponent)) {
          entity.addComponent(dependentComponent);
        }
      }
    }
  };
  ComponentsDependencies2._removeCheck = function _removeCheck(entity, type) {
    var invDependencies = ComponentsDependencies2._invDependenciesMap.get(type);
    if (invDependencies) {
      for (var i = 0, len = invDependencies.length; i < len; i++) {
        if (entity.getComponent(invDependencies[i])) {
          throw "you should remove " + invDependencies[i] + " before adding " + type;
        }
      }
    }
  };
  ComponentsDependencies2._addDependency = function _addDependency(currentComponent, dependentComponent, map) {
    var components = map.get(currentComponent);
    if (!components) {
      components = [];
      map.set(currentComponent, components);
    }
    if (components.indexOf(dependentComponent) === -1) {
      components.push(dependentComponent);
    }
  };
  return ComponentsDependencies2;
}();
(function() {
  ComponentsDependencies._dependenciesMap = /* @__PURE__ */ new Map();
})();
(function() {
  ComponentsDependencies._invDependenciesMap = /* @__PURE__ */ new Map();
})();
function dependentComponents() {
  for (var _len = arguments.length, components = new Array(_len), _key = 0; _key < _len; _key++) {
    components[_key] = arguments[_key];
  }
  return function(target) {
    components.forEach(function(component) {
      return ComponentsDependencies._register(target, component);
    });
  };
}
var Layer;
(function(Layer2) {
  Layer2[Layer2[
    /** Layer 0. */
    "Layer0"
  ] = 1] = "Layer0";
  Layer2[Layer2[
    /** Layer 1. */
    "Layer1"
  ] = 2] = "Layer1";
  Layer2[Layer2[
    /** Layer 2. */
    "Layer2"
  ] = 4] = "Layer2";
  Layer2[Layer2[
    /** Layer 3. */
    "Layer3"
  ] = 8] = "Layer3";
  Layer2[Layer2[
    /** Layer 4. */
    "Layer4"
  ] = 16] = "Layer4";
  Layer2[Layer2[
    /** Layer 5. */
    "Layer5"
  ] = 32] = "Layer5";
  Layer2[Layer2[
    /** Layer 6. */
    "Layer6"
  ] = 64] = "Layer6";
  Layer2[Layer2[
    /** Layer 7. */
    "Layer7"
  ] = 128] = "Layer7";
  Layer2[Layer2[
    /** Layer 8. */
    "Layer8"
  ] = 256] = "Layer8";
  Layer2[Layer2[
    /** Layer 9. */
    "Layer9"
  ] = 512] = "Layer9";
  Layer2[Layer2[
    /** Layer 10. */
    "Layer10"
  ] = 1024] = "Layer10";
  Layer2[Layer2[
    /** Layer 11. */
    "Layer11"
  ] = 2048] = "Layer11";
  Layer2[Layer2[
    /** Layer 12. */
    "Layer12"
  ] = 4096] = "Layer12";
  Layer2[Layer2[
    /** Layer 13. */
    "Layer13"
  ] = 8192] = "Layer13";
  Layer2[Layer2[
    /** Layer 14. */
    "Layer14"
  ] = 16384] = "Layer14";
  Layer2[Layer2[
    /** Layer 15. */
    "Layer15"
  ] = 32768] = "Layer15";
  Layer2[Layer2[
    /** Layer 16. */
    "Layer16"
  ] = 65536] = "Layer16";
  Layer2[Layer2[
    /** Layer 17. */
    "Layer17"
  ] = 131072] = "Layer17";
  Layer2[Layer2[
    /** Layer 18. */
    "Layer18"
  ] = 262144] = "Layer18";
  Layer2[Layer2[
    /** Layer 19. */
    "Layer19"
  ] = 524288] = "Layer19";
  Layer2[Layer2[
    /** Layer 20. */
    "Layer20"
  ] = 1048576] = "Layer20";
  Layer2[Layer2[
    /** Layer 21. */
    "Layer21"
  ] = 2097152] = "Layer21";
  Layer2[Layer2[
    /** Layer 22. */
    "Layer22"
  ] = 4194304] = "Layer22";
  Layer2[Layer2[
    /** Layer 23. */
    "Layer23"
  ] = 8388608] = "Layer23";
  Layer2[Layer2[
    /** Layer 24. */
    "Layer24"
  ] = 16777216] = "Layer24";
  Layer2[Layer2[
    /** Layer 25. */
    "Layer25"
  ] = 33554432] = "Layer25";
  Layer2[Layer2[
    /** Layer 26. */
    "Layer26"
  ] = 67108864] = "Layer26";
  Layer2[Layer2[
    /** Layer 27. */
    "Layer27"
  ] = 134217728] = "Layer27";
  Layer2[Layer2[
    /** Layer 28. */
    "Layer28"
  ] = 268435456] = "Layer28";
  Layer2[Layer2[
    /** Layer 29. */
    "Layer29"
  ] = 536870912] = "Layer29";
  Layer2[Layer2[
    /** Layer 30. */
    "Layer30"
  ] = 1073741824] = "Layer30";
  Layer2[Layer2[
    /** Layer 31. */
    "Layer31"
  ] = 2147483648] = "Layer31";
  Layer2[Layer2[
    /** All layers. */
    "Everything"
  ] = 4294967295] = "Everything";
  Layer2[Layer2[
    /** None layer. */
    "Nothing"
  ] = 0] = "Nothing";
})(Layer || (Layer = {}));
var UpdateFlag = function() {
  function UpdateFlag2() {
    this._flagManagers = [];
  }
  var _proto = UpdateFlag2.prototype;
  _proto.clearFromManagers = function clearFromManagers() {
    this._removeFromManagers();
    this._flagManagers.length = 0;
  };
  _proto.destroy = function destroy() {
    this._removeFromManagers();
    this._flagManagers = null;
  };
  _proto._removeFromManagers = function _removeFromManagers() {
    var flagManagers = this._flagManagers;
    for (var i = 0, n = flagManagers.length; i < n; i++) {
      removeFromArray(flagManagers[i]._updateFlags, this);
    }
  };
  return UpdateFlag2;
}();
var BoolUpdateFlag = function(UpdateFlag2) {
  _inherits(BoolUpdateFlag2, UpdateFlag2);
  function BoolUpdateFlag2() {
    var _this;
    _this = UpdateFlag2.apply(this, arguments) || this;
    _this.flag = true;
    return _this;
  }
  var _proto = BoolUpdateFlag2.prototype;
  _proto.dispatch = function dispatch() {
    this.flag = true;
  };
  return BoolUpdateFlag2;
}(UpdateFlag);
var Component = function(EngineObject2) {
  _inherits(Component2, EngineObject2);
  function Component2(entity) {
    var _this;
    _this = EngineObject2.call(this, entity.engine) || this;
    _this._awoken = false;
    _this._destroyed = false;
    _this._phasedActive = false;
    _this._enabled = true;
    _this._entity = entity;
    return _this;
  }
  var _proto = Component2.prototype;
  _proto.destroy = function destroy() {
    if (this._destroyed) {
      return;
    }
    this._entity._removeComponent(this);
    if (this._entity.isActiveInHierarchy) {
      this._enabled && this._onDisable();
    }
    this._destroyed = true;
    this._onDestroy();
  };
  _proto._onAwake = function _onAwake() {
  };
  _proto._onEnable = function _onEnable() {
  };
  _proto._onDisable = function _onDisable() {
  };
  _proto._onDestroy = function _onDestroy() {
  };
  _proto._setActive = function _setActive(value) {
    var entity = this._entity;
    if (value) {
      if (!this._awoken && entity._isActiveInHierarchy) {
        this._awoken = true;
        this._onAwake();
      }
      if (!this._phasedActive && entity._isActiveInHierarchy && this._enabled) {
        this._phasedActive = true;
        this._onEnable();
      }
    } else {
      if (this._phasedActive && !(entity._isActiveInHierarchy && this._enabled)) {
        this._phasedActive = false;
        this._onDisable();
      }
    }
  };
  _create_class2(Component2, [
    {
      key: "enabled",
      get: (
        /**
        * Indicates whether the component is enabled.
        */
        function get() {
          return this._enabled;
        }
      ),
      set: function set(value) {
        if (value !== this._enabled) {
          this._enabled = value;
          if (this._entity.isActiveInHierarchy) {
            if (value) {
              this._phasedActive = true;
              this._onEnable();
            } else {
              this._phasedActive = false;
              this._onDisable();
            }
          }
        }
      }
    },
    {
      key: "destroyed",
      get: (
        /**
        * Indicates whether the component is destroyed.
        */
        function get() {
          return this._destroyed;
        }
      )
    },
    {
      key: "entity",
      get: (
        /**
        * The entity which the component belongs to.
        */
        function get() {
          return this._entity;
        }
      )
    },
    {
      key: "scene",
      get: (
        /**
        * The scene which the component's entity belongs to.
        */
        function get() {
          return this._entity.scene;
        }
      )
    }
  ]);
  return Component2;
}(EngineObject);
__decorate([
  ignoreClone
], Component.prototype, "_entity", void 0);
__decorate([
  ignoreClone
], Component.prototype, "_awoken", void 0);
__decorate([
  ignoreClone
], Component.prototype, "_destroyed", void 0);
__decorate([
  ignoreClone
], Component.prototype, "_phasedActive", void 0);
__decorate([
  assignmentClone
], Component.prototype, "_enabled", void 0);
var UpdateFlagManager = function() {
  function UpdateFlagManager2() {
    this._updateFlags = [];
    this._listensers = [];
  }
  var _proto = UpdateFlagManager2.prototype;
  _proto.createFlag = function createFlag(type) {
    var flag = new type();
    this.addFlag(flag);
    return flag;
  };
  _proto.addFlag = function addFlag(flag) {
    this._updateFlags.push(flag);
    flag._flagManagers.push(this);
  };
  _proto.removeFlag = function removeFlag(flag) {
    var success = removeFromArray(this._updateFlags, flag);
    if (success) {
      removeFromArray(flag._flagManagers, this);
    }
  };
  _proto.addListener = function addListener(listener) {
    this._listensers.push(listener);
  };
  _proto.removeListener = function removeListener(listener) {
    removeFromArray(this._listensers, listener);
  };
  _proto.dispatch = function dispatch(type, param) {
    var updateFlags = this._updateFlags;
    for (var i = updateFlags.length - 1; i >= 0; i--) {
      updateFlags[i].dispatch(type, param);
    }
    var listeners = this._listensers;
    for (var i1 = listeners.length - 1; i1 >= 0; i1--) {
      listeners[i1](type, param);
    }
  };
  return UpdateFlagManager2;
}();
var Transform = function(Component2) {
  _inherits(Transform2, Component2);
  function Transform2(entity) {
    var _this;
    _this = Component2.call(this, entity) || this;
    _this._position = new Vector3();
    _this._rotation = new Vector3();
    _this._rotationQuaternion = new Quaternion();
    _this._scale = new Vector3(1, 1, 1);
    _this._worldPosition = new Vector3();
    _this._worldRotation = new Vector3();
    _this._worldRotationQuaternion = new Quaternion();
    _this._lossyWorldScale = new Vector3(1, 1, 1);
    _this._localMatrix = new Matrix();
    _this._worldMatrix = new Matrix();
    _this._isParentDirty = true;
    _this._parentTransformCache = null;
    _this._dirtyFlag = 188;
    _this._updateFlagManager = new UpdateFlagManager();
    _this._onPositionChanged = _this._onPositionChanged.bind(_assert_this_initialized(_this));
    _this._onWorldPositionChanged = _this._onWorldPositionChanged.bind(_assert_this_initialized(_this));
    _this._onRotationChanged = _this._onRotationChanged.bind(_assert_this_initialized(_this));
    _this._onWorldRotationChanged = _this._onWorldRotationChanged.bind(_assert_this_initialized(_this));
    _this._onRotationQuaternionChanged = _this._onRotationQuaternionChanged.bind(_assert_this_initialized(_this));
    _this._onWorldRotationQuaternionChanged = _this._onWorldRotationQuaternionChanged.bind(_assert_this_initialized(_this));
    _this._onScaleChanged = _this._onScaleChanged.bind(_assert_this_initialized(_this));
    _this._position._onValueChanged = _this._onPositionChanged;
    _this._worldPosition._onValueChanged = _this._onWorldPositionChanged;
    _this._rotation._onValueChanged = _this._onRotationChanged;
    _this._worldRotation._onValueChanged = _this._onWorldRotationChanged;
    _this._rotationQuaternion._onValueChanged = _this._onRotationQuaternionChanged;
    _this._worldRotationQuaternion._onValueChanged = _this._onWorldRotationQuaternionChanged;
    _this._scale._onValueChanged = _this._onScaleChanged;
    return _this;
  }
  var _proto = Transform2.prototype;
  _proto.setPosition = function setPosition(x, y, z) {
    this._position.set(x, y, z);
  };
  _proto.setRotation = function setRotation(x, y, z) {
    this._rotation.set(x, y, z);
  };
  _proto.setRotationQuaternion = function setRotationQuaternion(x, y, z, w) {
    this._rotationQuaternion.set(x, y, z, w);
  };
  _proto.setScale = function setScale(x, y, z) {
    this._scale.set(x, y, z);
  };
  _proto.setWorldPosition = function setWorldPosition(x, y, z) {
    this._worldPosition.set(x, y, z);
  };
  _proto.setWorldRotation = function setWorldRotation(x, y, z) {
    this._worldRotation.set(x, y, z);
  };
  _proto.setWorldRotationQuaternion = function setWorldRotationQuaternion(x, y, z, w) {
    this._worldRotationQuaternion.set(x, y, z, w);
  };
  _proto.getWorldForward = function getWorldForward(forward) {
    var e = this.worldMatrix.elements;
    forward.set(-e[8], -e[9], -e[10]);
    return forward.normalize();
  };
  _proto.getWorldRight = function getWorldRight(right) {
    var e = this.worldMatrix.elements;
    right.set(e[0], e[1], e[2]);
    return right.normalize();
  };
  _proto.getWorldUp = function getWorldUp(up) {
    var e = this.worldMatrix.elements;
    up.set(e[4], e[5], e[6]);
    return up.normalize();
  };
  _proto.translate = function translate(translationOrX, relativeToLocalOrY, z, relativeToLocal) {
    if (typeof translationOrX === "number") {
      var translate2 = Transform2._tempVec30;
      translate2.set(translationOrX, relativeToLocalOrY, z);
      this._translate(translate2, relativeToLocal);
    } else {
      this._translate(translationOrX, relativeToLocalOrY);
    }
  };
  _proto.rotate = function rotate(rotationOrX, relativeToLocalOrY, z, relativeToLocal) {
    if (typeof rotationOrX === "number") {
      this._rotateXYZ(rotationOrX, relativeToLocalOrY, z, relativeToLocal);
    } else {
      this._rotateXYZ(rotationOrX.x, rotationOrX.y, rotationOrX.z, relativeToLocalOrY);
    }
  };
  _proto.rotateByAxis = function rotateByAxis(axis, angle, relativeToLocal) {
    if (relativeToLocal === void 0)
      relativeToLocal = true;
    var rad = angle * MathUtil.degreeToRadFactor;
    Quaternion.rotationAxisAngle(axis, rad, Transform2._tempQuat0);
    this._rotateByQuat(Transform2._tempQuat0, relativeToLocal);
  };
  _proto.lookAt = function lookAt(targetPosition, worldUp) {
    var zAxis = Transform2._tempVec30;
    Vector3.subtract(this.worldPosition, targetPosition, zAxis);
    var axisLen = zAxis.length();
    if (axisLen <= MathUtil.zeroTolerance) {
      return;
    }
    zAxis.scale(1 / axisLen);
    var xAxis = Transform2._tempVec31;
    if (worldUp) {
      Vector3.cross(worldUp, zAxis, xAxis);
    } else {
      xAxis.set(zAxis.z, 0, -zAxis.x);
    }
    axisLen = xAxis.length();
    if (axisLen <= MathUtil.zeroTolerance) {
      return;
    }
    xAxis.scale(1 / axisLen);
    var yAxis = Transform2._tempVec32;
    Vector3.cross(zAxis, xAxis, yAxis);
    var rotMat = Transform2._tempMat41;
    var e = rotMat.elements;
    e[0] = xAxis.x, e[1] = xAxis.y, e[2] = xAxis.z;
    e[4] = yAxis.x, e[5] = yAxis.y, e[6] = yAxis.z;
    e[8] = zAxis.x, e[9] = zAxis.y, e[10] = zAxis.z;
    rotMat.getRotation(this._worldRotationQuaternion);
  };
  _proto.registerWorldChangeFlag = function registerWorldChangeFlag() {
    return this._updateFlagManager.createFlag(BoolUpdateFlag);
  };
  _proto._parentChange = function _parentChange() {
    this._isParentDirty = true;
    this._updateAllWorldFlag();
  };
  _proto._isFrontFaceInvert = function _isFrontFaceInvert() {
    var scale = this.lossyWorldScale;
    var isInvert = scale.x < 0;
    scale.y < 0 && (isInvert = !isInvert);
    scale.z < 0 && (isInvert = !isInvert);
    return isInvert;
  };
  _proto._updateWorldPositionFlag = function _updateWorldPositionFlag() {
    if (!this._isContainDirtyFlags(132)) {
      this._worldAssociatedChange(132);
      var nodeChildren = this._entity._children;
      for (var i = 0, n = nodeChildren.length; i < n; i++) {
        var _nodeChildren_i_transform;
        (_nodeChildren_i_transform = nodeChildren[i].transform) == null ? void 0 : _nodeChildren_i_transform._updateWorldPositionFlag();
      }
    }
  };
  _proto._updateWorldRotationFlag = function _updateWorldRotationFlag() {
    if (!this._isContainDirtyFlags(152)) {
      this._worldAssociatedChange(152);
      var nodeChildren = this._entity._children;
      for (var i = 0, n = nodeChildren.length; i < n; i++) {
        var _nodeChildren_i_transform;
        (_nodeChildren_i_transform = nodeChildren[i].transform) == null ? void 0 : _nodeChildren_i_transform._updateWorldPositionAndRotationFlag();
      }
    }
  };
  _proto._updateWorldPositionAndRotationFlag = function _updateWorldPositionAndRotationFlag() {
    if (!this._isContainDirtyFlags(156)) {
      this._worldAssociatedChange(156);
      var nodeChildren = this._entity._children;
      for (var i = 0, n = nodeChildren.length; i < n; i++) {
        var _nodeChildren_i_transform;
        (_nodeChildren_i_transform = nodeChildren[i].transform) == null ? void 0 : _nodeChildren_i_transform._updateWorldPositionAndRotationFlag();
      }
    }
  };
  _proto._updateWorldScaleFlag = function _updateWorldScaleFlag() {
    if (!this._isContainDirtyFlags(160)) {
      this._worldAssociatedChange(160);
      var nodeChildren = this._entity._children;
      for (var i = 0, n = nodeChildren.length; i < n; i++) {
        var _nodeChildren_i_transform;
        (_nodeChildren_i_transform = nodeChildren[i].transform) == null ? void 0 : _nodeChildren_i_transform._updateWorldPositionAndScaleFlag();
      }
    }
  };
  _proto._updateWorldPositionAndScaleFlag = function _updateWorldPositionAndScaleFlag() {
    if (!this._isContainDirtyFlags(164)) {
      this._worldAssociatedChange(164);
      var nodeChildren = this._entity._children;
      for (var i = 0, n = nodeChildren.length; i < n; i++) {
        var _nodeChildren_i_transform;
        (_nodeChildren_i_transform = nodeChildren[i].transform) == null ? void 0 : _nodeChildren_i_transform._updateWorldPositionAndScaleFlag();
      }
    }
  };
  _proto._updateAllWorldFlag = function _updateAllWorldFlag() {
    if (!this._isContainDirtyFlags(188)) {
      this._worldAssociatedChange(188);
      var nodeChildren = this._entity._children;
      for (var i = 0, n = nodeChildren.length; i < n; i++) {
        var _nodeChildren_i_transform;
        (_nodeChildren_i_transform = nodeChildren[i].transform) == null ? void 0 : _nodeChildren_i_transform._updateAllWorldFlag();
      }
    }
  };
  _proto._getParentTransform = function _getParentTransform() {
    if (!this._isParentDirty) {
      return this._parentTransformCache;
    }
    var parentCache = null;
    var parent = this._entity.parent;
    while (parent) {
      var transform = parent.transform;
      if (transform) {
        parentCache = transform;
        break;
      } else {
        parent = parent.parent;
      }
    }
    this._parentTransformCache = parentCache;
    this._isParentDirty = false;
    return parentCache;
  };
  _proto._getScaleMatrix = function _getScaleMatrix() {
    var invRotation = Transform2._tempQuat0;
    var invRotationMat = Transform2._tempMat30;
    var worldRotScaMat = Transform2._tempMat31;
    var scaMat = Transform2._tempMat32;
    worldRotScaMat.copyFromMatrix(this.worldMatrix);
    Quaternion.invert(this.worldRotationQuaternion, invRotation);
    Matrix3x3.rotationQuaternion(invRotation, invRotationMat);
    Matrix3x3.multiply(invRotationMat, worldRotScaMat, scaMat);
    return scaMat;
  };
  _proto._isContainDirtyFlags = function _isContainDirtyFlags(targetDirtyFlags) {
    return (this._dirtyFlag & targetDirtyFlags) === targetDirtyFlags;
  };
  _proto._isContainDirtyFlag = function _isContainDirtyFlag(type) {
    return (this._dirtyFlag & type) != 0;
  };
  _proto._setDirtyFlagTrue = function _setDirtyFlagTrue(type) {
    this._dirtyFlag |= type;
  };
  _proto._setDirtyFlagFalse = function _setDirtyFlagFalse(type) {
    this._dirtyFlag &= ~type;
  };
  _proto._worldAssociatedChange = function _worldAssociatedChange(type) {
    this._dirtyFlag |= type;
    this._updateFlagManager.dispatch(128);
  };
  _proto._rotateByQuat = function _rotateByQuat(rotateQuat, relativeToLocal) {
    if (relativeToLocal) {
      Quaternion.multiply(this.rotationQuaternion, rotateQuat, this._rotationQuaternion);
    } else {
      Quaternion.multiply(rotateQuat, this.worldRotationQuaternion, this._worldRotationQuaternion);
    }
  };
  _proto._translate = function _translate(translation, relativeToLocal) {
    if (relativeToLocal === void 0)
      relativeToLocal = true;
    if (relativeToLocal) {
      var _tempVec30 = Transform2._tempVec30;
      Vector3.transformByQuat(translation, this.worldRotationQuaternion, _tempVec30);
      this._worldPosition.add(_tempVec30);
    } else {
      this._worldPosition.add(translation);
    }
  };
  _proto._rotateXYZ = function _rotateXYZ(x, y, z, relativeToLocal) {
    if (relativeToLocal === void 0)
      relativeToLocal = true;
    var radFactor = MathUtil.degreeToRadFactor;
    var rotQuat = Transform2._tempQuat0;
    Quaternion.rotationEuler(x * radFactor, y * radFactor, z * radFactor, rotQuat);
    this._rotateByQuat(rotQuat, relativeToLocal);
  };
  _proto._onPositionChanged = function _onPositionChanged() {
    this._setDirtyFlagTrue(64);
    this._updateWorldPositionFlag();
  };
  _proto._onWorldPositionChanged = function _onWorldPositionChanged() {
    var worldPosition = this._worldPosition;
    var parent = this._getParentTransform();
    if (parent) {
      Matrix.invert(parent.worldMatrix, Transform2._tempMat41);
      Vector3.transformCoordinate(worldPosition, Transform2._tempMat41, this._position);
    } else {
      this._position.copyFrom(worldPosition);
    }
    this._setDirtyFlagFalse(4);
  };
  _proto._onRotationChanged = function _onRotationChanged() {
    this._setDirtyFlagTrue(64 | 2);
    this._setDirtyFlagFalse(1);
    this._updateWorldRotationFlag();
  };
  _proto._onWorldRotationChanged = function _onWorldRotationChanged() {
    var worldRotation = this._worldRotation;
    Quaternion.rotationEuler(MathUtil.degreeToRadian(worldRotation.x), MathUtil.degreeToRadian(worldRotation.y), MathUtil.degreeToRadian(worldRotation.z), this._worldRotationQuaternion);
    this._setDirtyFlagFalse(8);
  };
  _proto._onRotationQuaternionChanged = function _onRotationQuaternionChanged() {
    this._setDirtyFlagTrue(64 | 1);
    this._setDirtyFlagFalse(2);
    this._updateWorldRotationFlag();
  };
  _proto._onWorldRotationQuaternionChanged = function _onWorldRotationQuaternionChanged() {
    var worldRotationQuaternion = this._worldRotationQuaternion;
    var parent = this._getParentTransform();
    if (parent) {
      var invParentQuaternion = Transform2._tempQuat0;
      Quaternion.invert(parent.worldRotationQuaternion, invParentQuaternion);
      Quaternion.multiply(invParentQuaternion, worldRotationQuaternion, this._rotationQuaternion);
    } else {
      this._rotationQuaternion.copyFrom(worldRotationQuaternion);
    }
    this._setDirtyFlagFalse(16);
  };
  _proto._onScaleChanged = function _onScaleChanged() {
    this._setDirtyFlagTrue(64);
    this._updateWorldScaleFlag();
  };
  _create_class2(Transform2, [
    {
      key: "position",
      get: (
        /**
        * Local position.
        */
        function get() {
          return this._position;
        }
      ),
      set: function set(value) {
        if (this._position !== value) {
          this._position.copyFrom(value);
        }
      }
    },
    {
      key: "worldPosition",
      get: (
        /**
        * World position.
        */
        function get() {
          var worldPosition = this._worldPosition;
          if (this._isContainDirtyFlag(4)) {
            worldPosition._onValueChanged = null;
            if (this._getParentTransform()) {
              this.worldMatrix.getTranslation(worldPosition);
            } else {
              worldPosition.copyFrom(this._position);
            }
            worldPosition._onValueChanged = this._onWorldPositionChanged;
            this._setDirtyFlagFalse(4);
          }
          return worldPosition;
        }
      ),
      set: function set(value) {
        if (this._worldPosition !== value) {
          this._worldPosition.copyFrom(value);
        }
      }
    },
    {
      key: "rotation",
      get: (
        /**
        * Local rotation, defining the rotation value in degrees.
        * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.
        */
        function get() {
          var rotation = this._rotation;
          if (this._isContainDirtyFlag(1)) {
            rotation._onValueChanged = null;
            this._rotationQuaternion.toEuler(rotation);
            rotation.scale(MathUtil.radToDegreeFactor);
            rotation._onValueChanged = this._onRotationChanged;
            this._setDirtyFlagFalse(1);
          }
          return rotation;
        }
      ),
      set: function set(value) {
        if (this._rotation !== value) {
          this._rotation.copyFrom(value);
        }
      }
    },
    {
      key: "worldRotation",
      get: (
        /**
        * World rotation, defining the rotation value in degrees.
        * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.
        */
        function get() {
          var worldRotation = this._worldRotation;
          if (this._isContainDirtyFlag(8)) {
            worldRotation._onValueChanged = null;
            this.worldRotationQuaternion.toEuler(worldRotation);
            worldRotation.scale(MathUtil.radToDegreeFactor);
            worldRotation._onValueChanged = this._onWorldRotationChanged;
            this._setDirtyFlagFalse(8);
          }
          return worldRotation;
        }
      ),
      set: function set(value) {
        if (this._worldRotation !== value) {
          this._worldRotation.copyFrom(value);
        }
      }
    },
    {
      key: "rotationQuaternion",
      get: (
        /**
        * Local rotation, defining the rotation by using a unit quaternion.
        */
        function get() {
          var rotationQuaternion = this._rotationQuaternion;
          if (this._isContainDirtyFlag(2)) {
            rotationQuaternion._onValueChanged = null;
            Quaternion.rotationEuler(MathUtil.degreeToRadian(this._rotation.x), MathUtil.degreeToRadian(this._rotation.y), MathUtil.degreeToRadian(this._rotation.z), rotationQuaternion);
            rotationQuaternion._onValueChanged = this._onRotationQuaternionChanged;
            this._setDirtyFlagFalse(2);
          }
          return rotationQuaternion;
        }
      ),
      set: function set(value) {
        if (this._rotationQuaternion !== value) {
          if (value.normalized) {
            this._rotationQuaternion.copyFrom(value);
          } else {
            Quaternion.normalize(value, this._rotationQuaternion);
          }
        } else {
          value.normalized || value.normalize();
        }
      }
    },
    {
      key: "worldRotationQuaternion",
      get: (
        /**
        * World rotation, defining the rotation by using a unit quaternion.
        */
        function get() {
          var worldRotationQuaternion = this._worldRotationQuaternion;
          if (this._isContainDirtyFlag(16)) {
            worldRotationQuaternion._onValueChanged = null;
            var parent = this._getParentTransform();
            if (parent != null) {
              Quaternion.multiply(parent.worldRotationQuaternion, this.rotationQuaternion, worldRotationQuaternion);
            } else {
              worldRotationQuaternion.copyFrom(this.rotationQuaternion);
            }
            worldRotationQuaternion._onValueChanged = this._onWorldRotationQuaternionChanged;
            this._setDirtyFlagFalse(16);
          }
          return worldRotationQuaternion;
        }
      ),
      set: function set(value) {
        if (this._worldRotationQuaternion !== value) {
          if (value.normalized) {
            this._worldRotationQuaternion.copyFrom(value);
          } else {
            Quaternion.normalize(value, this._worldRotationQuaternion);
          }
        }
        value.normalized || value.normalize();
      }
    },
    {
      key: "scale",
      get: (
        /**
        * Local scaling.
        */
        function get() {
          return this._scale;
        }
      ),
      set: function set(value) {
        if (this._scale !== value) {
          this._scale.copyFrom(value);
        }
      }
    },
    {
      key: "lossyWorldScale",
      get: (
        /**
        * Local lossy scaling.
        * @remarks The value obtained may not be correct under certain conditions(for example, the parent node has scaling,
        * and the child node has a rotation), the scaling will be tilted. Vector3 cannot be used to correctly represent the scaling. Must use Matrix3x3.
        */
        function get() {
          if (this._isContainDirtyFlag(32)) {
            if (this._getParentTransform()) {
              var scaleMat = this._getScaleMatrix();
              var e = scaleMat.elements;
              this._lossyWorldScale.set(e[0], e[4], e[8]);
            } else {
              this._lossyWorldScale.copyFrom(this._scale);
            }
            this._setDirtyFlagFalse(32);
          }
          return this._lossyWorldScale;
        }
      )
    },
    {
      key: "localMatrix",
      get: (
        /**
        * Local matrix.
        * @remarks Need to re-assign after modification to ensure that the modification takes effect.
        */
        function get() {
          if (this._isContainDirtyFlag(64)) {
            Matrix.affineTransformation(this._scale, this.rotationQuaternion, this._position, this._localMatrix);
            this._setDirtyFlagFalse(64);
          }
          return this._localMatrix;
        }
      ),
      set: function set(value) {
        if (this._localMatrix !== value) {
          this._localMatrix.copyFrom(value);
        }
        this._position._onValueChanged = this._rotationQuaternion._onValueChanged = this._scale._onValueChanged = null;
        this._localMatrix.decompose(this._position, this._rotationQuaternion, this._scale);
        this._position._onValueChanged = this._onPositionChanged;
        this._rotationQuaternion._onValueChanged = this._onRotationQuaternionChanged;
        this._scale._onValueChanged = this._onScaleChanged;
        this._setDirtyFlagTrue(1);
        this._setDirtyFlagFalse(64 | 2);
        this._updateAllWorldFlag();
      }
    },
    {
      key: "worldMatrix",
      get: (
        /**
        * World matrix.
        * @remarks Need to re-assign after modification to ensure that the modification takes effect.
        */
        function get() {
          if (this._isContainDirtyFlag(128)) {
            var parent = this._getParentTransform();
            if (parent) {
              Matrix.multiply(parent.worldMatrix, this.localMatrix, this._worldMatrix);
            } else {
              this._worldMatrix.copyFrom(this.localMatrix);
            }
            this._setDirtyFlagFalse(128);
          }
          return this._worldMatrix;
        }
      ),
      set: function set(value) {
        if (this._worldMatrix !== value) {
          this._worldMatrix.copyFrom(value);
        }
        var parent = this._getParentTransform();
        if (parent) {
          Matrix.invert(parent.worldMatrix, Transform2._tempMat42);
          Matrix.multiply(Transform2._tempMat42, value, this._localMatrix);
        } else {
          this._localMatrix.copyFrom(value);
        }
        this.localMatrix = this._localMatrix;
        this._setDirtyFlagFalse(128);
      }
    }
  ]);
  return Transform2;
}(Component);
(function() {
  Transform._tempQuat0 = new Quaternion();
})();
(function() {
  Transform._tempVec30 = new Vector3();
})();
(function() {
  Transform._tempVec31 = new Vector3();
})();
(function() {
  Transform._tempVec32 = new Vector3();
})();
(function() {
  Transform._tempMat30 = new Matrix3x3();
})();
(function() {
  Transform._tempMat31 = new Matrix3x3();
})();
(function() {
  Transform._tempMat32 = new Matrix3x3();
})();
(function() {
  Transform._tempMat41 = new Matrix();
})();
(function() {
  Transform._tempMat42 = new Matrix();
})();
__decorate([
  deepClone
], Transform.prototype, "_position", void 0);
__decorate([
  deepClone
], Transform.prototype, "_rotation", void 0);
__decorate([
  deepClone
], Transform.prototype, "_rotationQuaternion", void 0);
__decorate([
  deepClone
], Transform.prototype, "_scale", void 0);
__decorate([
  deepClone
], Transform.prototype, "_worldPosition", void 0);
__decorate([
  deepClone
], Transform.prototype, "_worldRotation", void 0);
__decorate([
  deepClone
], Transform.prototype, "_worldRotationQuaternion", void 0);
__decorate([
  deepClone
], Transform.prototype, "_lossyWorldScale", void 0);
__decorate([
  deepClone
], Transform.prototype, "_localMatrix", void 0);
__decorate([
  deepClone
], Transform.prototype, "_worldMatrix", void 0);
__decorate([
  ignoreClone
], Transform.prototype, "_isParentDirty", void 0);
__decorate([
  ignoreClone
], Transform.prototype, "_parentTransformCache", void 0);
__decorate([
  ignoreClone
], Transform.prototype, "_updateFlagManager", void 0);
__decorate([
  ignoreClone
], Transform.prototype, "_onPositionChanged", null);
__decorate([
  ignoreClone
], Transform.prototype, "_onWorldPositionChanged", null);
__decorate([
  ignoreClone
], Transform.prototype, "_onRotationChanged", null);
__decorate([
  ignoreClone
], Transform.prototype, "_onWorldRotationChanged", null);
__decorate([
  ignoreClone
], Transform.prototype, "_onRotationQuaternionChanged", null);
__decorate([
  ignoreClone
], Transform.prototype, "_onWorldRotationQuaternionChanged", null);
__decorate([
  ignoreClone
], Transform.prototype, "_onScaleChanged", null);
var TransformModifyFlags;
(function(TransformModifyFlags2) {
  TransformModifyFlags2[TransformModifyFlags2["LocalEuler"] = 1] = "LocalEuler";
  TransformModifyFlags2[TransformModifyFlags2["LocalQuat"] = 2] = "LocalQuat";
  TransformModifyFlags2[TransformModifyFlags2["WorldPosition"] = 4] = "WorldPosition";
  TransformModifyFlags2[TransformModifyFlags2["WorldEuler"] = 8] = "WorldEuler";
  TransformModifyFlags2[TransformModifyFlags2["WorldQuat"] = 16] = "WorldQuat";
  TransformModifyFlags2[TransformModifyFlags2["WorldScale"] = 32] = "WorldScale";
  TransformModifyFlags2[TransformModifyFlags2["LocalMatrix"] = 64] = "LocalMatrix";
  TransformModifyFlags2[TransformModifyFlags2["WorldMatrix"] = 128] = "WorldMatrix";
  TransformModifyFlags2[TransformModifyFlags2[
    /** WorldMatrix | WorldPosition */
    "WmWp"
  ] = 132] = "WmWp";
  TransformModifyFlags2[TransformModifyFlags2[
    /** WorldMatrix | WorldEuler | WorldQuat */
    "WmWeWq"
  ] = 152] = "WmWeWq";
  TransformModifyFlags2[TransformModifyFlags2[
    /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat */
    "WmWpWeWq"
  ] = 156] = "WmWpWeWq";
  TransformModifyFlags2[TransformModifyFlags2[
    /** WorldMatrix | WorldScale */
    "WmWs"
  ] = 160] = "WmWs";
  TransformModifyFlags2[TransformModifyFlags2[
    /** WorldMatrix | WorldPosition | WorldScale */
    "WmWpWs"
  ] = 164] = "WmWpWs";
  TransformModifyFlags2[TransformModifyFlags2[
    /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat | WorldScale */
    "WmWpWeWqWs"
  ] = 188] = "WmWpWeWqWs";
})(TransformModifyFlags || (TransformModifyFlags = {}));
var Entity = function(EngineObject2) {
  _inherits(Entity2, EngineObject2);
  function Entity2(engine, name) {
    var _this;
    _this = EngineObject2.call(this, engine) || this;
    _this.layer = Layer.Layer0;
    _this._isActiveInHierarchy = false;
    _this._components = [];
    _this._scripts = new DisorderedArray();
    _this._children = [];
    _this._isRoot = false;
    _this._isActive = true;
    _this._siblingIndex = -1;
    _this._parent = null;
    _this._invModelMatrix = new Matrix();
    _this.name = name;
    _this.transform = _this.addComponent(Transform);
    _this._inverseWorldMatFlag = _this.transform.registerWorldChangeFlag();
    return _this;
  }
  var _proto = Entity2.prototype;
  _proto.addComponent = function addComponent(type) {
    ComponentsDependencies._addCheck(this, type);
    var component = new type(this);
    this._components.push(component);
    component._setActive(true);
    return component;
  };
  _proto.getComponent = function getComponent(type) {
    var components = this._components;
    for (var i = components.length - 1; i >= 0; i--) {
      var component = components[i];
      if (_instanceof(component, type)) {
        return component;
      }
    }
  };
  _proto.getComponents = function getComponents(type, results) {
    results.length = 0;
    var components = this._components;
    for (var i = 0, n = components.length; i < n; i++) {
      var component = components[i];
      if (_instanceof(component, type)) {
        results.push(component);
      }
    }
    return results;
  };
  _proto.getComponentsIncludeChildren = function getComponentsIncludeChildren(type, results) {
    results.length = 0;
    this._getComponentsInChildren(type, results);
    return results;
  };
  _proto.addChild = function addChild(indexOrChild, child) {
    var index;
    if (typeof indexOrChild === "number") {
      index = indexOrChild;
    } else {
      index = void 0;
      child = indexOrChild;
    }
    if (child._isRoot) {
      child._scene._removeFromEntityList(child);
      child._isRoot = false;
      this._addToChildrenList(index, child);
      child._parent = this;
      var newScene = this._scene;
      if (child._scene !== newScene) {
        Entity2._traverseSetOwnerScene(child, newScene);
      }
      if (this._isActiveInHierarchy) {
        !child._isActiveInHierarchy && child._isActive && child._processActive();
      } else {
        child._isActiveInHierarchy && child._processInActive();
      }
      child._setTransformDirty();
    } else {
      child._setParent(this, index);
    }
  };
  _proto.removeChild = function removeChild(child) {
    child._setParent(null);
  };
  _proto.getChild = function getChild(index) {
    return this._children[index];
  };
  _proto.findByName = function findByName(name) {
    if (name === this.name) {
      return this;
    }
    var children = this._children;
    for (var i = 0, n = children.length; i < n; i++) {
      var target = children[i].findByName(name);
      if (target) {
        return target;
      }
    }
    return null;
  };
  _proto.findByPath = function findByPath(path) {
    var splits = path.split("/");
    var entity = this;
    for (var i = 0, length2 = splits.length; i < length2; ++i) {
      var split = splits[i];
      if (split) {
        entity = Entity2._findChildByName(entity, split);
        if (!entity) {
          return null;
        }
      }
    }
    return entity;
  };
  _proto.createChild = function createChild(name) {
    var child = new Entity2(this.engine, name);
    child.layer = this.layer;
    child.parent = this;
    return child;
  };
  _proto.clearChildren = function clearChildren() {
    var children = this._children;
    for (var i = children.length - 1; i >= 0; i--) {
      var child = children[i];
      child._parent = null;
      child._isActiveInHierarchy && child._processInActive();
      Entity2._traverseSetOwnerScene(child, null);
    }
    children.length = 0;
  };
  _proto.clone = function clone2() {
    var cloneEntity = new Entity2(this._engine, this.name);
    cloneEntity._isActive = this._isActive;
    cloneEntity.transform.localMatrix = this.transform.localMatrix;
    var children = this._children;
    for (var i = 0, len = this._children.length; i < len; i++) {
      var child = children[i];
      cloneEntity.addChild(child.clone());
    }
    var components = this._components;
    for (var i1 = 0, n = components.length; i1 < n; i1++) {
      var sourceComp = components[i1];
      if (!_instanceof(sourceComp, Transform)) {
        var targetComp = cloneEntity.addComponent(sourceComp.constructor);
        ComponentCloner.cloneComponent(sourceComp, targetComp);
      }
    }
    return cloneEntity;
  };
  _proto.destroy = function destroy() {
    if (this._destroyed) {
      return;
    }
    EngineObject2.prototype.destroy.call(this);
    var components = this._components;
    for (var i = components.length - 1; i >= 0; i--) {
      components[i].destroy();
    }
    this._components.length = 0;
    var children = this._children;
    while (children.length > 0) {
      children[0].destroy();
    }
    if (this._isRoot) {
      this._scene._removeFromEntityList(this);
      this._isRoot = false;
    } else {
      this._removeFromParent();
    }
  };
  _proto._removeComponent = function _removeComponent(component) {
    ComponentsDependencies._removeCheck(this, component.constructor);
    var components = this._components;
    components.splice(components.indexOf(component), 1);
  };
  _proto._addScript = function _addScript(script) {
    script._entityScriptsIndex = this._scripts.length;
    this._scripts.add(script);
  };
  _proto._removeScript = function _removeScript(script) {
    var replaced = this._scripts.deleteByIndex(script._entityScriptsIndex);
    replaced && (replaced._entityScriptsIndex = script._entityScriptsIndex);
    script._entityScriptsIndex = -1;
  };
  _proto._removeFromParent = function _removeFromParent() {
    var oldParent = this._parent;
    if (oldParent != null) {
      var oldSibling = oldParent._children;
      var index = this._siblingIndex;
      oldSibling.splice(index, 1);
      for (var n = oldSibling.length; index < n; index++) {
        oldSibling[index]._siblingIndex--;
      }
      this._parent = null;
      this._siblingIndex = -1;
    }
  };
  _proto._processActive = function _processActive() {
    if (this._activeChangedComponents) {
      throw "Note: can't set the 'main inActive entity' active in hierarchy, if the operation is in main inActive entity or it's children script's onDisable Event.";
    }
    this._activeChangedComponents = this._engine._componentsManager.getActiveChangedTempList();
    this._setActiveInHierarchy(this._activeChangedComponents);
    this._setActiveComponents(true);
  };
  _proto._processInActive = function _processInActive() {
    if (this._activeChangedComponents) {
      throw "Note: can't set the 'main active entity' inActive in hierarchy, if the operation is in main active entity or it's children script's onEnable Event.";
    }
    this._activeChangedComponents = this._engine._componentsManager.getActiveChangedTempList();
    this._setInActiveInHierarchy(this._activeChangedComponents);
    this._setActiveComponents(false);
  };
  _proto._addToChildrenList = function _addToChildrenList(index, child) {
    var children = this._children;
    var childCount = children.length;
    if (index === void 0) {
      child._siblingIndex = childCount;
      children.push(child);
    } else {
      if (index < 0 || index > childCount) {
        throw "The index " + index + " is out of child list bounds " + childCount;
      }
      child._siblingIndex = index;
      children.splice(index, 0, child);
      for (var i = index + 1, n = childCount + 1; i < n; i++) {
        children[i]._siblingIndex++;
      }
    }
  };
  _proto._setParent = function _setParent(parent, siblingIndex) {
    var oldParent = this._parent;
    if (parent !== oldParent) {
      this._removeFromParent();
      this._parent = parent;
      if (parent) {
        parent._addToChildrenList(siblingIndex, this);
        var parentScene = parent._scene;
        if (this._scene !== parentScene) {
          Entity2._traverseSetOwnerScene(this, parentScene);
        }
        if (parent._isActiveInHierarchy) {
          !this._isActiveInHierarchy && this._isActive && this._processActive();
        } else {
          this._isActiveInHierarchy && this._processInActive();
        }
      } else {
        this._isActiveInHierarchy && this._processInActive();
        if (oldParent) {
          Entity2._traverseSetOwnerScene(this, null);
        }
      }
      this._setTransformDirty();
    }
  };
  _proto._getComponentsInChildren = function _getComponentsInChildren(type, results) {
    for (var i = this._components.length - 1; i >= 0; i--) {
      var component = this._components[i];
      if (_instanceof(component, type)) {
        results.push(component);
      }
    }
    for (var i1 = this._children.length - 1; i1 >= 0; i1--) {
      this._children[i1]._getComponentsInChildren(type, results);
    }
  };
  _proto._setActiveComponents = function _setActiveComponents(isActive) {
    var activeChangedComponents = this._activeChangedComponents;
    for (var i = 0, length2 = activeChangedComponents.length; i < length2; ++i) {
      activeChangedComponents[i]._setActive(isActive);
    }
    this._engine._componentsManager.putActiveChangedTempList(activeChangedComponents);
    this._activeChangedComponents = null;
  };
  _proto._setActiveInHierarchy = function _setActiveInHierarchy(activeChangedComponents) {
    this._isActiveInHierarchy = true;
    var components = this._components;
    for (var i = components.length - 1; i >= 0; i--) {
      var component = components[i];
      (component.enabled || !component._awoken) && activeChangedComponents.push(component);
    }
    var children = this._children;
    for (var i1 = children.length - 1; i1 >= 0; i1--) {
      var child = children[i1];
      child.isActive && child._setActiveInHierarchy(activeChangedComponents);
    }
  };
  _proto._setInActiveInHierarchy = function _setInActiveInHierarchy(activeChangedComponents) {
    this._isActiveInHierarchy = false;
    var components = this._components;
    for (var i = components.length - 1; i >= 0; i--) {
      var component = components[i];
      component.enabled && activeChangedComponents.push(component);
    }
    var children = this._children;
    for (var i1 = children.length - 1; i1 >= 0; i1--) {
      var child = children[i1];
      child.isActive && child._setInActiveInHierarchy(activeChangedComponents);
    }
  };
  _proto._setTransformDirty = function _setTransformDirty() {
    if (this.transform) {
      this.transform._parentChange();
    } else {
      for (var i = 0, len = this._children.length; i < len; i++) {
        this._children[i]._setTransformDirty();
      }
    }
  };
  _proto._setSiblingIndex = function _setSiblingIndex(sibling, target) {
    target = Math.min(target, sibling.length - 1);
    if (target < 0) {
      throw "Sibling index " + target + " should large than 0";
    }
    if (this._siblingIndex !== target) {
      var oldIndex = this._siblingIndex;
      if (target < oldIndex) {
        for (var i = oldIndex; i >= target; i--) {
          var child = i == target ? this : sibling[i - 1];
          sibling[i] = child;
          child._siblingIndex = i;
        }
      } else {
        for (var i1 = oldIndex; i1 <= target; i1++) {
          var child1 = i1 == target ? this : sibling[i1 + 1];
          sibling[i1] = child1;
          child1._siblingIndex = i1;
        }
      }
    }
  };
  _proto.getInvModelMatrix = function getInvModelMatrix() {
    if (this._inverseWorldMatFlag.flag) {
      Matrix.invert(this.transform.worldMatrix, this._invModelMatrix);
      this._inverseWorldMatFlag.flag = false;
    }
    return this._invModelMatrix;
  };
  Entity2._findChildByName = function _findChildByName(root, name) {
    var children = root._children;
    for (var i = children.length - 1; i >= 0; i--) {
      var child = children[i];
      if (child.name === name) {
        return child;
      }
    }
    return null;
  };
  Entity2._traverseSetOwnerScene = function _traverseSetOwnerScene(entity, scene) {
    entity._scene = scene;
    var children = entity._children;
    for (var i = entity.childCount - 1; i >= 0; i--) {
      this._traverseSetOwnerScene(children[i], scene);
    }
  };
  _create_class2(Entity2, [
    {
      key: "isActive",
      get: (
        /**
        * Whether to activate locally.
        */
        function get() {
          return this._isActive;
        }
      ),
      set: function set(value) {
        if (value !== this._isActive) {
          this._isActive = value;
          if (value) {
            var parent = this._parent;
            if ((parent == null ? void 0 : parent._isActiveInHierarchy) || this._isRoot && this._scene._isActiveInEngine) {
              this._processActive();
            }
          } else {
            if (this._isActiveInHierarchy) {
              this._processInActive();
            }
          }
        }
      }
    },
    {
      key: "isActiveInHierarchy",
      get: (
        /**
        * Whether it is active in the hierarchy.
        */
        function get() {
          return this._isActiveInHierarchy;
        }
      )
    },
    {
      key: "parent",
      get: (
        /**
        * The parent entity.
        */
        function get() {
          return this._parent;
        }
      ),
      set: function set(value) {
        this._setParent(value);
      }
    },
    {
      key: "children",
      get: (
        /**
        * The children entities
        */
        function get() {
          return this._children;
        }
      )
    },
    {
      key: "childCount",
      get: (
        /**
        * @deprecated Please use `children.length` property instead.
        * Number of the children entities
        */
        function get() {
          return this._children.length;
        }
      )
    },
    {
      key: "scene",
      get: (
        /**
        * The scene the entity belongs to.
        */
        function get() {
          return this._scene;
        }
      )
    },
    {
      key: "siblingIndex",
      get: (
        /**
        * The sibling index.
        */
        function get() {
          return this._siblingIndex;
        }
      ),
      set: function set(value) {
        if (this._siblingIndex === -1) {
          throw "The entity " + this.name + " is not in the hierarchy";
        }
        this._setSiblingIndex(this._isRoot ? this._scene._rootEntities : this._parent._children, value);
      }
    }
  ]);
  return Entity2;
}(EngineObject);
var ColorSpace;
(function(ColorSpace2) {
  ColorSpace2[ColorSpace2[
    /** Linear color space. */
    "Linear"
  ] = 0] = "Linear";
  ColorSpace2[ColorSpace2[
    /** Gamma color space. */
    "Gamma"
  ] = 1] = "Gamma";
})(ColorSpace || (ColorSpace = {}));
var PointerPhase;
(function(PointerPhase2) {
  PointerPhase2[PointerPhase2[
    /** A Pointer pressed on the screen. */
    "Down"
  ] = 0] = "Down";
  PointerPhase2[PointerPhase2[
    /** A pointer moved on the screen. */
    "Move"
  ] = 1] = "Move";
  PointerPhase2[PointerPhase2[
    /** A Pointer pressed on the screen but hasn't moved. */
    "Stationary"
  ] = 2] = "Stationary";
  PointerPhase2[PointerPhase2[
    /** A pointer was lifted from the screen. */
    "Up"
  ] = 3] = "Up";
  PointerPhase2[PointerPhase2[
    /** The system cancelled tracking for the pointer. */
    "Leave"
  ] = 4] = "Leave";
})(PointerPhase || (PointerPhase = {}));
var Pointer = function() {
  function Pointer2(id) {
    this.phase = PointerPhase.Leave;
    this.position = new Vector2();
    this.deltaPosition = new Vector2();
    this._events = [];
    this._upMap = [];
    this._downMap = [];
    this._upList = new DisorderedArray();
    this._downList = new DisorderedArray();
    this.id = id;
  }
  var _proto = Pointer2.prototype;
  _proto._firePointerExitAndEnter = function _firePointerExitAndEnter(rayCastEntity) {
    if (this._currentEnteredEntity !== rayCastEntity) {
      if (this._currentEnteredEntity) {
        var scripts = this._currentEnteredEntity._scripts;
        for (var i = scripts.length - 1; i >= 0; i--) {
          var script = scripts.get(i);
          script._waitHandlingInValid || script.onPointerExit(this);
        }
      }
      if (rayCastEntity) {
        var scripts1 = rayCastEntity._scripts;
        for (var i1 = scripts1.length - 1; i1 >= 0; i1--) {
          var script1 = scripts1.get(i1);
          script1._waitHandlingInValid || script1.onPointerEnter(this);
        }
      }
      this._currentEnteredEntity = rayCastEntity;
    }
  };
  _proto._firePointerDown = function _firePointerDown(rayCastEntity) {
    if (rayCastEntity) {
      var scripts = rayCastEntity._scripts;
      for (var i = scripts.length - 1; i >= 0; i--) {
        var script = scripts.get(i);
        script._waitHandlingInValid || script.onPointerDown(this);
      }
    }
    this._currentPressedEntity = rayCastEntity;
  };
  _proto._firePointerDrag = function _firePointerDrag() {
    if (this._currentPressedEntity) {
      var scripts = this._currentPressedEntity._scripts;
      for (var i = scripts.length - 1; i >= 0; i--) {
        var script = scripts.get(i);
        script._waitHandlingInValid || script.onPointerDrag(this);
      }
    }
  };
  _proto._firePointerUpAndClick = function _firePointerUpAndClick(rayCastEntity) {
    var _this = this, pressedEntity = _this._currentPressedEntity;
    if (pressedEntity) {
      var sameTarget = pressedEntity === rayCastEntity;
      var scripts = pressedEntity._scripts;
      for (var i = scripts.length - 1; i >= 0; i--) {
        var script = scripts.get(i);
        if (!script._waitHandlingInValid) {
          sameTarget && script.onPointerClick(this);
          script.onPointerUp(this);
        }
      }
      this._currentPressedEntity = null;
    }
  };
  return Pointer2;
}();
var SystemInfo = function() {
  function SystemInfo2() {
  }
  SystemInfo2._initialize = function _initialize() {
    {
      if (typeof navigator == "undefined") {
        return;
      }
      var userAgent = navigator.userAgent;
      if (/iPhone/i.test(userAgent)) {
        SystemInfo2.platform = Platform.IPhone;
      } else if (/iPad/i.test(userAgent)) {
        SystemInfo2.platform = Platform.IPad;
      } else if (/Android/i.test(userAgent)) {
        SystemInfo2.platform = Platform.Android;
      } else if (/Macintosh/i.test(userAgent)) {
        SystemInfo2.platform = Platform.Mac;
      }
      var v;
      switch (SystemInfo2.platform) {
        case Platform.IPhone:
          v = userAgent.match(/OS (\d+)_?(\d+)?_?(\d+)?/);
          this.operatingSystem = v ? "iPhone OS " + v[1] + "." + (v[2] || 0) + "." + (v[3] || 0) : "iPhone OS";
          break;
        case Platform.IPad:
          v = userAgent.match(/OS (\d+)_?(\d+)?_?(\d+)?/);
          this.operatingSystem = v ? "iPad OS " + v[1] + "." + (v[2] || 0) + "." + (v[3] || 0) : "iPad OS";
          break;
        case Platform.Android:
          v = userAgent.match(/Android (\d+).?(\d+)?.?(\d+)?/);
          this.operatingSystem = v ? "Android " + v[1] + "." + (v[2] || 0) + "." + (v[3] || 0) : "Android";
          break;
        case Platform.Mac:
          v = userAgent.match(/Mac OS X (\d+)_?(\d+)?_?(\d+)?/);
          this.operatingSystem = v ? "Mac OS X " + v[1] + "." + (v[2] || 0) + "." + (v[3] || 0) : "Mac OS X";
          break;
      }
    }
  };
  _create_class2(SystemInfo2, null, [
    {
      key: "devicePixelRatio",
      get: (
        /**
        * The pixel ratio of the device.
        */
        function get() {
          return window.devicePixelRatio;
        }
      )
    }
  ]);
  return SystemInfo2;
}();
(function() {
  SystemInfo.platform = Platform.Unknown;
})();
(function() {
  SystemInfo.operatingSystem = "";
})();
SystemInfo._initialize();
var Keys;
(function(Keys2) {
  Keys2[Keys2[
    /** `~ on a US keyboard. This is the 半角/全角/漢字 (hankaku/zenkaku/kanji) key on Japanese keyboards. */
    "Backquote"
  ] = 0] = "Backquote";
  Keys2[Keys2[
    /** Used for both the US \| (on the 101-key layout) and also for the key located between the " and Enter keys on row C of the 102-, 104- and 106-key layouts. Labelled #~ on a UK (102) keyboard. */
    "Backslash"
  ] = 1] = "Backslash";
  Keys2[Keys2[
    /**	Backspace or ⌫. Labelled Delete on Apple keyboards. */
    "Backspace"
  ] = 2] = "Backspace";
  Keys2[Keys2[
    /** [{ on a US keyboard. */
    "BracketLeft"
  ] = 3] = "BracketLeft";
  Keys2[Keys2[
    /** ]} on a US keyboard. */
    "BracketRight"
  ] = 4] = "BracketRight";
  Keys2[Keys2[
    /** ,< on a US keyboard. */
    "Comma"
  ] = 5] = "Comma";
  Keys2[Keys2[
    /** 0) on a US keyboard. */
    "Digit0"
  ] = 6] = "Digit0";
  Keys2[Keys2[
    /** 1! on a US keyboard. */
    "Digit1"
  ] = 7] = "Digit1";
  Keys2[Keys2[
    /** 2@ on a US keyboard. */
    "Digit2"
  ] = 8] = "Digit2";
  Keys2[Keys2[
    /** 3# on a US keyboard. */
    "Digit3"
  ] = 9] = "Digit3";
  Keys2[Keys2[
    /** 4$ on a US keyboard. */
    "Digit4"
  ] = 10] = "Digit4";
  Keys2[Keys2[
    /** 5% on a US keyboard. */
    "Digit5"
  ] = 11] = "Digit5";
  Keys2[Keys2[
    /** 6^ on a US keyboard. */
    "Digit6"
  ] = 12] = "Digit6";
  Keys2[Keys2[
    /** 7& on a US keyboard. */
    "Digit7"
  ] = 13] = "Digit7";
  Keys2[Keys2[
    /** 8* on a US keyboard. */
    "Digit8"
  ] = 14] = "Digit8";
  Keys2[Keys2[
    /** 9( on a US keyboard. */
    "Digit9"
  ] = 15] = "Digit9";
  Keys2[Keys2[
    /** =+ on a US keyboard. */
    "Equal"
  ] = 16] = "Equal";
  Keys2[Keys2[
    /** Located between the left Shift and Z keys. Labelled \| on a UK keyboard. */
    "IntlBackslash"
  ] = 17] = "IntlBackslash";
  Keys2[Keys2[
    /** Located between the / and right Shift keys. Labelled \ろ (ro) on a Japanese keyboard. */
    "IntlRo"
  ] = 18] = "IntlRo";
  Keys2[Keys2[
    /** Located between the = and Backspace keys. Labelled ¥ (yen) on a Japanese keyboard. \/ on a Russian keyboard. */
    "IntlYen"
  ] = 19] = "IntlYen";
  Keys2[Keys2[
    /** a on a US keyboard. Labelled q on an AZERTY (e.g., French) keyboard. */
    "KeyA"
  ] = 20] = "KeyA";
  Keys2[Keys2[
    /** b on a US keyboard. */
    "KeyB"
  ] = 21] = "KeyB";
  Keys2[Keys2[
    /** c on a US keyboard. */
    "KeyC"
  ] = 22] = "KeyC";
  Keys2[Keys2[
    /** d on a US keyboard. */
    "KeyD"
  ] = 23] = "KeyD";
  Keys2[Keys2[
    /** e on a US keyboard. */
    "KeyE"
  ] = 24] = "KeyE";
  Keys2[Keys2[
    /** f on a US keyboard. */
    "KeyF"
  ] = 25] = "KeyF";
  Keys2[Keys2[
    /** g on a US keyboard. */
    "KeyG"
  ] = 26] = "KeyG";
  Keys2[Keys2[
    /** h on a US keyboard. */
    "KeyH"
  ] = 27] = "KeyH";
  Keys2[Keys2[
    /** i on a US keyboard. */
    "KeyI"
  ] = 28] = "KeyI";
  Keys2[Keys2[
    /** j on a US keyboard. */
    "KeyJ"
  ] = 29] = "KeyJ";
  Keys2[Keys2[
    /** k on a US keyboard. */
    "KeyK"
  ] = 30] = "KeyK";
  Keys2[Keys2[
    /** l on a US keyboard. */
    "KeyL"
  ] = 31] = "KeyL";
  Keys2[Keys2[
    /** m on a US keyboard. */
    "KeyM"
  ] = 32] = "KeyM";
  Keys2[Keys2[
    /** n on a US keyboard. */
    "KeyN"
  ] = 33] = "KeyN";
  Keys2[Keys2[
    /** o on a US keyboard. */
    "KeyO"
  ] = 34] = "KeyO";
  Keys2[Keys2[
    /** p on a US keyboard. */
    "KeyP"
  ] = 35] = "KeyP";
  Keys2[Keys2[
    /** q on a US keyboard. Labelled a on an AZERTY (e.g., French) keyboard. */
    "KeyQ"
  ] = 36] = "KeyQ";
  Keys2[Keys2[
    /** r on a US keyboard. */
    "KeyR"
  ] = 37] = "KeyR";
  Keys2[Keys2[
    /** s on a US keyboard. */
    "KeyS"
  ] = 38] = "KeyS";
  Keys2[Keys2[
    /** t on a US keyboard. */
    "KeyT"
  ] = 39] = "KeyT";
  Keys2[Keys2[
    /** u on a US keyboard. */
    "KeyU"
  ] = 40] = "KeyU";
  Keys2[Keys2[
    /** v on a US keyboard. */
    "KeyV"
  ] = 41] = "KeyV";
  Keys2[Keys2[
    /** w on a US keyboard. Labelled z on an AZERTY (e.g., French) keyboard. */
    "KeyW"
  ] = 42] = "KeyW";
  Keys2[Keys2[
    /** x on a US keyboard. */
    "KeyX"
  ] = 43] = "KeyX";
  Keys2[Keys2[
    /** y on a US keyboard. Labelled z on a QWERTZ (e.g., German) keyboard. */
    "KeyY"
  ] = 44] = "KeyY";
  Keys2[Keys2[
    /** z on a US keyboard. Labelled w on an AZERTY (e.g., French) keyboard, and y on a QWERTZ (e.g., German) keyboard. */
    "KeyZ"
  ] = 45] = "KeyZ";
  Keys2[Keys2[
    /** -_ on a US keyboard. */
    "Minus"
  ] = 46] = "Minus";
  Keys2[Keys2[
    /** .> on a US keyboard. */
    "Period"
  ] = 47] = "Period";
  Keys2[Keys2[
    /** '" on a US keyboard. */
    "Quote"
  ] = 48] = "Quote";
  Keys2[Keys2[
    /** ;: on a US keyboard. */
    "Semicolon"
  ] = 49] = "Semicolon";
  Keys2[Keys2[
    /** /? on a US keyboard. */
    "Slash"
  ] = 50] = "Slash";
  Keys2[Keys2[
    /** Alt, Option or ⌥. */
    "AltLeft"
  ] = 51] = "AltLeft";
  Keys2[Keys2[
    /** Alt, Option or ⌥. This is labelled AltGr key on many keyboard layouts. */
    "AltRight"
  ] = 52] = "AltRight";
  Keys2[Keys2[
    /** CapsLock or ⇪. */
    "CapsLock"
  ] = 53] = "CapsLock";
  Keys2[Keys2[
    /** The application context menu key, which is typically found between the right Meta key and the right Control key. */
    "ContextMenu"
  ] = 54] = "ContextMenu";
  Keys2[Keys2[
    /** Control or ⌃. */
    "ControlLeft"
  ] = 55] = "ControlLeft";
  Keys2[Keys2[
    /** Control or ⌃. */
    "ControlRight"
  ] = 56] = "ControlRight";
  Keys2[Keys2[
    /** Enter or ↵. Labelled Return on Apple keyboards. */
    "Enter"
  ] = 57] = "Enter";
  Keys2[Keys2[
    /** The Windows, ⌘, Command or other OS symbol key. */
    "MetaLeft"
  ] = 58] = "MetaLeft";
  Keys2[Keys2[
    /** The Windows, ⌘, Command or other OS symbol key. */
    "MetaRight"
  ] = 59] = "MetaRight";
  Keys2[Keys2[
    /** Shift or ⇧. */
    "ShiftLeft"
  ] = 60] = "ShiftLeft";
  Keys2[Keys2[
    /** Shift or ⇧. */
    "ShiftRight"
  ] = 61] = "ShiftRight";
  Keys2[Keys2[
    /** Space. */
    "Space"
  ] = 62] = "Space";
  Keys2[Keys2[
    /** Tab or ⇥. */
    "Tab"
  ] = 63] = "Tab";
  Keys2[Keys2[
    /** Japanese: 変換 (henkan). */
    "Convert"
  ] = 64] = "Convert";
  Keys2[Keys2[
    /** Japanese: カタカナ/ひらがな/ローマ字 (katakana/hiragana/romaji). */
    "KanaMode"
  ] = 65] = "KanaMode";
  Keys2[Keys2[
    /** 
    * Korean: HangulMode 한/영 (han/yeong).
    * Japanese (Mac keyboard): かな (kana).
    * */
    "Lang1"
  ] = 66] = "Lang1";
  Keys2[Keys2[
    /**
    * 	Korean: Hanja 한자 (hanja).
    *  Japanese (Mac keyboard): 英数 (eisu).
    */
    "Lang2"
  ] = 67] = "Lang2";
  Keys2[Keys2[
    /** Japanese (word-processing keyboard): Katakana. */
    "Lang3"
  ] = 68] = "Lang3";
  Keys2[Keys2[
    /** Japanese (word-processing keyboard): Hiragana. */
    "Lang4"
  ] = 69] = "Lang4";
  Keys2[Keys2[
    /** Japanese (word-processing keyboard): Zenkaku/Hankaku. */
    "Lang5"
  ] = 70] = "Lang5";
  Keys2[Keys2[
    /** Japanese: 無変換 (muhenkan). */
    "NonConvert"
  ] = 71] = "NonConvert";
  Keys2[Keys2[
    /** ⌦. The forward delete key. Note that on Apple keyboards, the key labelled Delete on the main part of the keyboard should be encoded as "Backspace". */
    "Delete"
  ] = 72] = "Delete";
  Keys2[Keys2[
    /** Page Down, End or ↘. */
    "End"
  ] = 73] = "End";
  Keys2[Keys2[
    /** Help. Not present on standard PC keyboards. */
    "Help"
  ] = 74] = "Help";
  Keys2[Keys2[
    /** Home or ↖. */
    "Home"
  ] = 75] = "Home";
  Keys2[Keys2[
    /** Insert or Ins. Not present on Apple keyboards. */
    "Insert"
  ] = 76] = "Insert";
  Keys2[Keys2[
    /** Page Down, PgDn or ⇟. */
    "PageDown"
  ] = 77] = "PageDown";
  Keys2[Keys2[
    /** Page Up, PgUp or ⇞. */
    "PageUp"
  ] = 78] = "PageUp";
  Keys2[Keys2[
    /** ↓ */
    "ArrowDown"
  ] = 79] = "ArrowDown";
  Keys2[Keys2[
    /** ← */
    "ArrowLeft"
  ] = 80] = "ArrowLeft";
  Keys2[Keys2[
    /** → */
    "ArrowRight"
  ] = 81] = "ArrowRight";
  Keys2[Keys2[
    /** ↑ */
    "ArrowUp"
  ] = 82] = "ArrowUp";
  Keys2[Keys2[
    /** On the Mac, the "NumLock" code should be used for the numpad Clear key. */
    "NumLock"
  ] = 83] = "NumLock";
  Keys2[Keys2[
    /** 
    * 0 Ins on a keyboard.
    * 0 on a phone or remote control.
    * */
    "Numpad0"
  ] = 84] = "Numpad0";
  Keys2[Keys2[
    /**
    * 1 End on a keyboard.
    * 1 or 1 QZ on a phone or remote control.
    */
    "Numpad1"
  ] = 85] = "Numpad1";
  Keys2[Keys2[
    /**
    * 2 ↓ on a keyboard.
    * 2 ABC on a phone or remote control.
    */
    "Numpad2"
  ] = 86] = "Numpad2";
  Keys2[Keys2[
    /**
    * 3 PgDn on a keyboard.
    * 3 DEF on a phone or remote control.
    */
    "Numpad3"
  ] = 87] = "Numpad3";
  Keys2[Keys2[
    /**
    * 4 ← on a keyboard.
    * 4 GHI on a phone or remote control.
    */
    "Numpad4"
  ] = 88] = "Numpad4";
  Keys2[Keys2[
    /**
    * 5 on a keyboard.
    * 5 JKL on a phone or remote control.
    */
    "Numpad5"
  ] = 89] = "Numpad5";
  Keys2[Keys2[
    /**
    * 6 → on a keyboard.
    * 6 MNO on a phone or remote control.
    */
    "Numpad6"
  ] = 90] = "Numpad6";
  Keys2[Keys2[
    /**
    * 7 Home on a keyboard.
    * 7 PQRS or 7 PRS on a phone or remote control.
    */
    "Numpad7"
  ] = 91] = "Numpad7";
  Keys2[Keys2[
    /**
    * 8 ↑ on a keyboard.
    * 8 TUV on a phone or remote control.
    */
    "Numpad8"
  ] = 92] = "Numpad8";
  Keys2[Keys2[
    /**
    * 9 PgUp on a keyboard.
    * 9 WXYZ or 9 WXY on a phone or remote control.
    */
    "Numpad9"
  ] = 93] = "Numpad9";
  Keys2[Keys2[
    /** + */
    "NumpadAdd"
  ] = 94] = "NumpadAdd";
  Keys2[Keys2[
    /** Found on the Microsoft Natural Keyboard. */
    "NumpadBackspace"
  ] = 95] = "NumpadBackspace";
  Keys2[Keys2[
    /** C or AC (All Clear). Also for use with numpads that have a Clear key that is separate from the NumLock key. On the Mac, the numpad Clear key should always be encoded as "NumLock". */
    "NumpadClear"
  ] = 96] = "NumpadClear";
  Keys2[Keys2[
    /** CE (Clear Entry) */
    "NumpadClearEntry"
  ] = 97] = "NumpadClearEntry";
  Keys2[Keys2[
    /** , (thousands separator). For locales where the thousands separator is a "." (e.g., Brazil), this key may generate a .. */
    "NumpadComma"
  ] = 98] = "NumpadComma";
  Keys2[Keys2[
    /** . Del. For locales where the decimal separator is "," (e.g., Brazil), this key may generate a ,. */
    "NumpadDecimal"
  ] = 99] = "NumpadDecimal";
  Keys2[Keys2[
    /** / */
    "NumpadDivide"
  ] = 100] = "NumpadDivide";
  Keys2[Keys2[
    /** Numpad Enter */
    "NumpadEnter"
  ] = 101] = "NumpadEnter";
  Keys2[Keys2[
    /** = */
    "NumpadEqual"
  ] = 102] = "NumpadEqual";
  Keys2[Keys2[
    /** # on a phone or remote control device. This key is typically found below the 9 key and to the right of the 0 key. */
    "NumpadHash"
  ] = 103] = "NumpadHash";
  Keys2[Keys2[
    /** M+ Add current entry to the value stored in memory. */
    "NumpadMemoryAdd"
  ] = 104] = "NumpadMemoryAdd";
  Keys2[Keys2[
    /** MC Clear the value stored in memory. */
    "NumpadMemoryClear"
  ] = 105] = "NumpadMemoryClear";
  Keys2[Keys2[
    /** MR Replace the current entry with the value stored in memory. */
    "NumpadMemoryRecall"
  ] = 106] = "NumpadMemoryRecall";
  Keys2[Keys2[
    /** MS Replace the value stored in memory with the current entry. */
    "NumpadMemoryStore"
  ] = 107] = "NumpadMemoryStore";
  Keys2[Keys2[
    /** M- Subtract current entry from the value stored in memory. */
    "NumpadMemorySubtract"
  ] = 108] = "NumpadMemorySubtract";
  Keys2[Keys2[
    /** 
    * * on a keyboard. For use with numpads that provide mathematical operations (+, -, * and /).
    * Use "NumpadStar" for the * key on phones and remote controls.
    */
    "NumpadMultiply"
  ] = 109] = "NumpadMultiply";
  Keys2[Keys2[
    /** ( Found on the Microsoft Natural Keyboard. */
    "NumpadParenLeft"
  ] = 110] = "NumpadParenLeft";
  Keys2[Keys2[
    /** ) Found on the Microsoft Natural Keyboard. */
    "NumpadParenRight"
  ] = 111] = "NumpadParenRight";
  Keys2[Keys2[
    /**
    * * on a phone or remote control device. This key is typically found below the 7 key and to the left of the 0 key.
    * Use "NumpadMultiply" for the * key on numeric keypads.
    */
    "NumpadStar"
  ] = 112] = "NumpadStar";
  Keys2[Keys2[
    /** - */
    "NumpadSubtract"
  ] = 113] = "NumpadSubtract";
  Keys2[Keys2[
    /** Esc or ⎋. */
    "Escape"
  ] = 114] = "Escape";
  Keys2[Keys2[
    /** F1 */
    "F1"
  ] = 115] = "F1";
  Keys2[Keys2[
    /** F2 */
    "F2"
  ] = 116] = "F2";
  Keys2[Keys2[
    /** F3 */
    "F3"
  ] = 117] = "F3";
  Keys2[Keys2[
    /** F4 */
    "F4"
  ] = 118] = "F4";
  Keys2[Keys2[
    /** F5 */
    "F5"
  ] = 119] = "F5";
  Keys2[Keys2[
    /** F6 */
    "F6"
  ] = 120] = "F6";
  Keys2[Keys2[
    /** F7 */
    "F7"
  ] = 121] = "F7";
  Keys2[Keys2[
    /** F8 */
    "F8"
  ] = 122] = "F8";
  Keys2[Keys2[
    /** F9 */
    "F9"
  ] = 123] = "F9";
  Keys2[Keys2[
    /** F10 */
    "F10"
  ] = 124] = "F10";
  Keys2[Keys2[
    /** F11 */
    "F11"
  ] = 125] = "F11";
  Keys2[Keys2[
    /** F12 */
    "F12"
  ] = 126] = "F12";
  Keys2[Keys2[
    /** F13 */
    "F13"
  ] = 127] = "F13";
  Keys2[Keys2[
    /** F14 */
    "F14"
  ] = 128] = "F14";
  Keys2[Keys2[
    /** F15 */
    "F15"
  ] = 129] = "F15";
  Keys2[Keys2[
    /** Fn This is typically a hardware key that does not generate a separate code. Most keyboards do not place this key in the function section, but it is included here to keep it with related keys. */
    "Fn"
  ] = 130] = "Fn";
  Keys2[Keys2[
    /** FLock or FnLock. Function Lock key. Found on the Microsoft Natural Keyboard. */
    "FnLock"
  ] = 131] = "FnLock";
  Keys2[Keys2[
    /** PrtScr SysRq or Print Screen. */
    "PrintScreen"
  ] = 132] = "PrintScreen";
  Keys2[Keys2[
    /** Scroll Lock */
    "ScrollLock"
  ] = 133] = "ScrollLock";
  Keys2[Keys2[
    /** Pause Break */
    "Pause"
  ] = 134] = "Pause";
  Keys2[Keys2[
    /** Some laptops place this key to the left of the ↑ key. */
    "BrowserBack"
  ] = 135] = "BrowserBack";
  Keys2[Keys2[
    /** Browser Favorites */
    "BrowserFavorites"
  ] = 136] = "BrowserFavorites";
  Keys2[Keys2[
    /** Some laptops place this key to the right of the ↑ key. */
    "BrowserForward"
  ] = 137] = "BrowserForward";
  Keys2[Keys2[
    /** Browser Home */
    "BrowserHome"
  ] = 138] = "BrowserHome";
  Keys2[Keys2[
    /** Browser Refresh */
    "BrowserRefresh"
  ] = 139] = "BrowserRefresh";
  Keys2[Keys2[
    /** Browser Search */
    "BrowserSearch"
  ] = 140] = "BrowserSearch";
  Keys2[Keys2[
    /** Browser Stop */
    "BrowserStop"
  ] = 141] = "BrowserStop";
  Keys2[Keys2[
    /** Eject or ⏏. This key is placed in the function section on some Apple keyboards. */
    "Eject"
  ] = 142] = "Eject";
  Keys2[Keys2[
    /** Sometimes labelled My Computer on the keyboard. */
    "LaunchApp1"
  ] = 143] = "LaunchApp1";
  Keys2[Keys2[
    /** Sometimes labelled Calculator on the keyboard. */
    "LaunchApp2"
  ] = 144] = "LaunchApp2";
  Keys2[Keys2[
    /** Launch Mail */
    "LaunchMail"
  ] = 145] = "LaunchMail";
  Keys2[Keys2[
    /** Media Play/Pause */
    "MediaPlayPause"
  ] = 146] = "MediaPlayPause";
  Keys2[Keys2[
    /** Media Select */
    "MediaSelect"
  ] = 147] = "MediaSelect";
  Keys2[Keys2[
    /** Media Stop */
    "MediaStop"
  ] = 148] = "MediaStop";
  Keys2[Keys2[
    /** Media Track Next */
    "MediaTrackNext"
  ] = 149] = "MediaTrackNext";
  Keys2[Keys2[
    /** Media Track Previous */
    "MediaTrackPrevious"
  ] = 150] = "MediaTrackPrevious";
  Keys2[Keys2[
    /** This key is placed in the function section on some Apple keyboards, replacing the Eject key. */
    "Power"
  ] = 151] = "Power";
  Keys2[Keys2[
    /** Sleep */
    "Sleep"
  ] = 152] = "Sleep";
  Keys2[Keys2[
    /** Audio Volume Down */
    "AudioVolumeDown"
  ] = 153] = "AudioVolumeDown";
  Keys2[Keys2[
    /** Audio Volume Mute */
    "AudioVolumeMute"
  ] = 154] = "AudioVolumeMute";
  Keys2[Keys2[
    /** Audio Volume Up */
    "AudioVolumeUp"
  ] = 155] = "AudioVolumeUp";
  Keys2[Keys2[
    /** Wake Up */
    "WakeUp"
  ] = 156] = "WakeUp";
  Keys2[Keys2[
    /** Hyper */
    "Hyper"
  ] = 157] = "Hyper";
  Keys2[Keys2[
    /** Super */
    "Super"
  ] = 158] = "Super";
  Keys2[Keys2[
    /** Turbo */
    "Turbo"
  ] = 159] = "Turbo";
  Keys2[Keys2[
    /** Abort */
    "Abort"
  ] = 160] = "Abort";
  Keys2[Keys2[
    /** Resume */
    "Resume"
  ] = 161] = "Resume";
  Keys2[Keys2[
    /** Suspend */
    "Suspend"
  ] = 162] = "Suspend";
  Keys2[Keys2[
    /** Found on Sun’s USB keyboard. */
    "Again"
  ] = 163] = "Again";
  Keys2[Keys2[
    /** Found on Sun’s USB keyboard. */
    "Copy"
  ] = 164] = "Copy";
  Keys2[Keys2[
    /** Found on Sun’s USB keyboard. */
    "Cut"
  ] = 165] = "Cut";
  Keys2[Keys2[
    /** Found on Sun’s USB keyboard. */
    "Find"
  ] = 166] = "Find";
  Keys2[Keys2[
    /** Found on Sun’s USB keyboard. */
    "Open"
  ] = 167] = "Open";
  Keys2[Keys2[
    /** Found on Sun’s USB keyboard. */
    "Paste"
  ] = 168] = "Paste";
  Keys2[Keys2[
    /** Found on Sun’s USB keyboard. */
    "Props"
  ] = 169] = "Props";
  Keys2[Keys2[
    /** Found on Sun’s USB keyboard. */
    "Select"
  ] = 170] = "Select";
  Keys2[Keys2[
    /** Found on Sun’s USB keyboard. */
    "Undo"
  ] = 171] = "Undo";
  Keys2[Keys2[
    /** Use for dedicated ひらがな key found on some Japanese word processing keyboards. */
    "Hiragana"
  ] = 172] = "Hiragana";
  Keys2[Keys2[
    /** Use for dedicated カタカナ key found on some Japanese word processing keyboards. */
    "Katakana"
  ] = 173] = "Katakana";
  Keys2[Keys2[
    /** This value code should be used when no other value given in this specification is appropriate. */
    "Unidentified"
  ] = 174] = "Unidentified";
})(Keys || (Keys = {}));
var KeyboardManager = function() {
  function KeyboardManager2(htmlCanvas) {
    this._curHeldDownKeyToIndexMap = [];
    this._upKeyToFrameCountMap = [];
    this._downKeyToFrameCountMap = [];
    this._curFrameHeldDownList = new DisorderedArray();
    this._curFrameDownList = new DisorderedArray();
    this._curFrameUpList = new DisorderedArray();
    this._nativeEvents = [];
    this._hadListener = false;
    this._htmlCanvas = htmlCanvas;
    htmlCanvas.tabIndex = htmlCanvas.tabIndex;
    this._onKeyEvent = this._onKeyEvent.bind(this);
    htmlCanvas.addEventListener("keydown", this._onKeyEvent);
    htmlCanvas.addEventListener("keyup", this._onKeyEvent);
    this._hadListener = true;
  }
  var _proto = KeyboardManager2.prototype;
  _proto._update = function _update(frameCount) {
    var _this = this, nativeEvents = _this._nativeEvents, curFrameDownList = _this._curFrameDownList, curFrameUpList = _this._curFrameUpList;
    curFrameDownList.length = 0;
    curFrameUpList.length = 0;
    if (nativeEvents.length > 0) {
      var _this1 = this, curHeldDownKeyToIndexMap = _this1._curHeldDownKeyToIndexMap, curFrameHeldDownList = _this1._curFrameHeldDownList, downKeyToFrameCountMap = _this1._downKeyToFrameCountMap, upKeyToFrameCountMap = _this1._upKeyToFrameCountMap;
      for (var i = 0, n = nativeEvents.length; i < n; i++) {
        var evt = nativeEvents[i];
        var codeKey = Keys[evt.code];
        switch (evt.type) {
          case "keydown":
            if (curHeldDownKeyToIndexMap[codeKey] == null) {
              curFrameDownList.add(codeKey);
              curFrameHeldDownList.add(codeKey);
              curHeldDownKeyToIndexMap[codeKey] = curFrameHeldDownList.length - 1;
              downKeyToFrameCountMap[codeKey] = frameCount;
            }
            break;
          case "keyup":
            var delIndex = curHeldDownKeyToIndexMap[codeKey];
            if (delIndex != null) {
              curHeldDownKeyToIndexMap[codeKey] = null;
              var swapCode = curFrameHeldDownList.deleteByIndex(delIndex);
              swapCode && (curHeldDownKeyToIndexMap[swapCode] = delIndex);
            }
            curFrameUpList.add(codeKey);
            upKeyToFrameCountMap[codeKey] = frameCount;
            if (SystemInfo.platform === Platform.Mac && (codeKey === Keys.MetaLeft || codeKey === Keys.MetaRight)) {
              for (var i1 = 0, len = curFrameHeldDownList.length; i1 < len; i1++) {
                curHeldDownKeyToIndexMap[curFrameHeldDownList.get(i1)] = null;
              }
              curFrameHeldDownList.length = 0;
            }
            break;
        }
      }
      nativeEvents.length = 0;
    }
  };
  _proto._onFocus = function _onFocus() {
    if (!this._hadListener) {
      this._htmlCanvas.addEventListener("keydown", this._onKeyEvent);
      this._htmlCanvas.addEventListener("keyup", this._onKeyEvent);
      this._hadListener = true;
    }
  };
  _proto._onBlur = function _onBlur() {
    if (this._hadListener) {
      this._htmlCanvas.removeEventListener("keydown", this._onKeyEvent);
      this._htmlCanvas.removeEventListener("keyup", this._onKeyEvent);
      this._curHeldDownKeyToIndexMap.length = 0;
      this._curFrameHeldDownList.length = 0;
      this._curFrameDownList.length = 0;
      this._curFrameUpList.length = 0;
      this._nativeEvents.length = 0;
      this._hadListener = false;
    }
  };
  _proto._destroy = function _destroy() {
    if (this._hadListener) {
      this._htmlCanvas.removeEventListener("keydown", this._onKeyEvent);
      this._htmlCanvas.removeEventListener("keyup", this._onKeyEvent);
      this._hadListener = false;
    }
    this._curHeldDownKeyToIndexMap = null;
    this._upKeyToFrameCountMap = null;
    this._downKeyToFrameCountMap = null;
    this._nativeEvents = null;
    this._curFrameHeldDownList = null;
    this._curFrameDownList = null;
    this._curFrameUpList = null;
  };
  _proto._onKeyEvent = function _onKeyEvent(evt) {
    this._nativeEvents.push(evt);
  };
  return KeyboardManager2;
}();
var CameraClearFlags;
(function(CameraClearFlags2) {
  CameraClearFlags2[CameraClearFlags2[
    /* Do nothing. */
    "None"
  ] = 0] = "None";
  CameraClearFlags2[CameraClearFlags2[
    /* Clear color with scene background. */
    "Color"
  ] = 1] = "Color";
  CameraClearFlags2[CameraClearFlags2[
    /* Clear depth only. */
    "Depth"
  ] = 2] = "Depth";
  CameraClearFlags2[CameraClearFlags2[
    /* Clear depth only. */
    "Stencil"
  ] = 4] = "Stencil";
  CameraClearFlags2[CameraClearFlags2[
    /* Clear color with scene background and depth. */
    "ColorDepth"
  ] = 3] = "ColorDepth";
  CameraClearFlags2[CameraClearFlags2[
    /* Clear color with scene background and stencil. */
    "ColorStencil"
  ] = 5] = "ColorStencil";
  CameraClearFlags2[CameraClearFlags2[
    /* Clear depth and stencil. */
    "DepthStencil"
  ] = 6] = "DepthStencil";
  CameraClearFlags2[CameraClearFlags2[
    /* Clear color with scene background, depth, and stencil. */
    "All"
  ] = 7] = "All";
})(CameraClearFlags || (CameraClearFlags = {}));
var HitResult = function HitResult2() {
  this.entity = null;
  this.distance = 0;
  this.point = new Vector3();
  this.normal = new Vector3();
};
var PhysicsManager = function() {
  function PhysicsManager2(engine) {
    var _this = this;
    this._initialized = false;
    this._restTime = 0;
    this._colliders = new DisorderedArray();
    this._gravity = new Vector3(0, -9.81, 0);
    this._physicalObjectsMap = {};
    this._onContactEnter = function(obj1, obj2) {
      var shape1 = _this._physicalObjectsMap[obj1];
      var shape2 = _this._physicalObjectsMap[obj2];
      var scripts = shape1.collider.entity._scripts;
      for (var i = 0, len = scripts.length; i < len; i++) {
        var script = scripts.get(i);
        script._waitHandlingInValid || script.onCollisionEnter(shape2);
      }
      scripts = shape2.collider.entity._scripts;
      for (var i1 = 0, len1 = scripts.length; i1 < len1; i1++) {
        var script1 = scripts.get(i1);
        script1._waitHandlingInValid || script1.onCollisionEnter(shape1);
      }
    };
    this._onContactExit = function(obj1, obj2) {
      var shape1 = _this._physicalObjectsMap[obj1];
      var shape2 = _this._physicalObjectsMap[obj2];
      var scripts = shape1.collider.entity._scripts;
      for (var i = 0, len = scripts.length; i < len; i++) {
        var script = scripts.get(i);
        script._waitHandlingInValid || script.onCollisionExit(shape2);
      }
      scripts = shape2.collider.entity._scripts;
      for (var i1 = 0, len1 = scripts.length; i1 < len1; i1++) {
        var script1 = scripts.get(i1);
        script1._waitHandlingInValid || script1.onCollisionExit(shape1);
      }
    };
    this._onContactStay = function(obj1, obj2) {
      var shape1 = _this._physicalObjectsMap[obj1];
      var shape2 = _this._physicalObjectsMap[obj2];
      var scripts = shape1.collider.entity._scripts;
      for (var i = 0, len = scripts.length; i < len; i++) {
        var script = scripts.get(i);
        script._waitHandlingInValid || script.onCollisionStay(shape2);
      }
      scripts = shape2.collider.entity._scripts;
      for (var i1 = 0, len1 = scripts.length; i1 < len1; i1++) {
        var script1 = scripts.get(i1);
        script1._waitHandlingInValid || script1.onCollisionStay(shape1);
      }
    };
    this._onTriggerEnter = function(obj1, obj2) {
      var shape1 = _this._physicalObjectsMap[obj1];
      var shape2 = _this._physicalObjectsMap[obj2];
      var scripts = shape1.collider.entity._scripts;
      for (var i = 0, len = scripts.length; i < len; i++) {
        var script = scripts.get(i);
        script._waitHandlingInValid || script.onTriggerEnter(shape2);
      }
      scripts = shape2.collider.entity._scripts;
      for (var i1 = 0, len1 = scripts.length; i1 < len1; i1++) {
        var script1 = scripts.get(i1);
        script1._waitHandlingInValid || script1.onTriggerEnter(shape1);
      }
    };
    this._onTriggerExit = function(obj1, obj2) {
      var shape1 = _this._physicalObjectsMap[obj1];
      var shape2 = _this._physicalObjectsMap[obj2];
      var scripts = shape1.collider.entity._scripts;
      for (var i = 0, n = scripts.length; i < n; i++) {
        var script = scripts.get(i);
        script._waitHandlingInValid || script.onTriggerExit(shape2);
      }
      scripts = shape2.collider.entity._scripts;
      for (var i1 = 0, n1 = scripts.length; i1 < n1; i1++) {
        var script1 = scripts.get(i1);
        script1._waitHandlingInValid || script1.onTriggerExit(shape1);
      }
    };
    this._onTriggerStay = function(obj1, obj2) {
      var shape1 = _this._physicalObjectsMap[obj1];
      var shape2 = _this._physicalObjectsMap[obj2];
      var scripts = shape1.collider.entity._scripts;
      for (var i = 0, len = scripts.length; i < len; i++) {
        var script = scripts.get(i);
        script._waitHandlingInValid || script.onTriggerStay(shape2);
      }
      scripts = shape2.collider.entity._scripts;
      for (var i1 = 0, len1 = scripts.length; i1 < len1; i1++) {
        var script1 = scripts.get(i1);
        script1._waitHandlingInValid || script1.onTriggerStay(shape1);
      }
    };
    this.fixedTimeStep = 1 / 60;
    this.maxAllowedTimeStep = 1 / 3;
    this._engine = engine;
    this._setGravity = this._setGravity.bind(this);
    this._gravity._onValueChanged = this._setGravity;
  }
  var _proto = PhysicsManager2.prototype;
  _proto.initialize = function initialize(physics) {
    if (this._initialized) {
      return;
    }
    PhysicsManager2._nativePhysics = physics;
    this._nativePhysicsManager = PhysicsManager2._nativePhysics.createPhysicsManager(this._onContactEnter, this._onContactExit, this._onContactStay, this._onTriggerEnter, this._onTriggerExit, this._onTriggerStay);
    this._initialized = true;
  };
  _proto.raycast = function raycast(ray, distanceOrResult, layerMaskOrResult, outHitResult) {
    var _this = this;
    var hitResult;
    var distance = Number.MAX_VALUE;
    if (typeof distanceOrResult === "number") {
      distance = distanceOrResult;
    } else if (distanceOrResult != void 0) {
      hitResult = distanceOrResult;
    }
    var layerMask = Layer.Everything;
    if (typeof layerMaskOrResult === "number") {
      layerMask = layerMaskOrResult;
    } else if (layerMaskOrResult != void 0) {
      hitResult = layerMaskOrResult;
    }
    if (outHitResult) {
      hitResult = outHitResult;
    }
    var onRaycast = function(obj) {
      var shape = _this._physicalObjectsMap[obj];
      return shape.collider.entity.layer & layerMask && shape.isSceneQuery;
    };
    if (hitResult != void 0) {
      var result = this._nativePhysicsManager.raycast(ray, distance, onRaycast, function(idx, distance2, position, normal) {
        hitResult.entity = _this._physicalObjectsMap[idx]._collider.entity;
        hitResult.distance = distance2;
        hitResult.normal.copyFrom(normal);
        hitResult.point.copyFrom(position);
      });
      if (result) {
        return true;
      } else {
        hitResult.entity = null;
        hitResult.distance = 0;
        hitResult.point.set(0, 0, 0);
        hitResult.normal.set(0, 0, 0);
        return false;
      }
    } else {
      return this._nativePhysicsManager.raycast(ray, distance, onRaycast);
    }
  };
  _proto._update = function _update(deltaTime) {
    var _this = this, fixedTimeStep = _this.fixedTimeStep, nativePhysicsManager = _this._nativePhysicsManager;
    var componentsManager = this._engine._componentsManager;
    var simulateTime = Math.min(this.maxAllowedTimeStep, this._restTime + deltaTime);
    var step = Math.floor(simulateTime / fixedTimeStep);
    this._restTime = simulateTime - step * fixedTimeStep;
    for (var i = 0; i < step; i++) {
      componentsManager.callScriptOnPhysicsUpdate();
      this._callColliderOnUpdate();
      nativePhysicsManager.update(fixedTimeStep);
      this._callColliderOnLateUpdate();
    }
  };
  _proto._addColliderShape = function _addColliderShape(colliderShape) {
    this._physicalObjectsMap[colliderShape.id] = colliderShape;
    this._nativePhysicsManager.addColliderShape(colliderShape._nativeShape);
  };
  _proto._removeColliderShape = function _removeColliderShape(colliderShape) {
    delete this._physicalObjectsMap[colliderShape.id];
    this._nativePhysicsManager.removeColliderShape(colliderShape._nativeShape);
  };
  _proto._addCollider = function _addCollider(collider) {
    if (collider._index === -1) {
      collider._index = this._colliders.length;
      this._colliders.add(collider);
    }
    this._nativePhysicsManager.addCollider(collider._nativeCollider);
  };
  _proto._addCharacterController = function _addCharacterController(controller) {
    if (controller._index === -1) {
      controller._index = this._colliders.length;
      this._colliders.add(controller);
    }
    this._nativePhysicsManager.addCharacterController(controller._nativeCollider);
  };
  _proto._removeCollider = function _removeCollider(collider) {
    var replaced = this._colliders.deleteByIndex(collider._index);
    replaced && (replaced._index = collider._index);
    collider._index = -1;
    this._nativePhysicsManager.removeCollider(collider._nativeCollider);
  };
  _proto._removeCharacterController = function _removeCharacterController(controller) {
    var replaced = this._colliders.deleteByIndex(controller._index);
    replaced && (replaced._index = controller._index);
    controller._index = -1;
    this._nativePhysicsManager.removeCharacterController(controller._nativeCollider);
  };
  _proto._callColliderOnUpdate = function _callColliderOnUpdate() {
    var elements = this._colliders._elements;
    for (var i = this._colliders.length - 1; i >= 0; --i) {
      elements[i]._onUpdate();
    }
  };
  _proto._callColliderOnLateUpdate = function _callColliderOnLateUpdate() {
    var elements = this._colliders._elements;
    for (var i = this._colliders.length - 1; i >= 0; --i) {
      elements[i]._onLateUpdate();
    }
  };
  _proto._setGravity = function _setGravity() {
    this._nativePhysicsManager.setGravity(this._gravity);
  };
  _create_class2(PhysicsManager2, [
    {
      key: "gravity",
      get: (
        /**
        * The gravity of physics scene.
        */
        function get() {
          return this._gravity;
        }
      ),
      set: function set(value) {
        var gravity = this._gravity;
        if (gravity !== value) {
          gravity.copyFrom(value);
        }
      }
    },
    {
      key: "maxSumTimeStep",
      get: (
        /**
        * @deprecated
        * Please use `maxAllowedTimeStep` instead.
        */
        function get() {
          return this.maxAllowedTimeStep;
        }
      ),
      set: function set(value) {
        this.maxAllowedTimeStep = value;
      }
    }
  ]);
  return PhysicsManager2;
}();
var PhysicsMaterialCombineMode;
(function(PhysicsMaterialCombineMode2) {
  PhysicsMaterialCombineMode2[PhysicsMaterialCombineMode2[
    /** Averages the friction/bounce of the two colliding materials. */
    "Average"
  ] = 0] = "Average";
  PhysicsMaterialCombineMode2[PhysicsMaterialCombineMode2[
    /** Uses the smaller friction/bounce of the two colliding materials. */
    "Minimum"
  ] = 1] = "Minimum";
  PhysicsMaterialCombineMode2[PhysicsMaterialCombineMode2[
    /** Multiplies the friction/bounce of the two colliding materials. */
    "Multiply"
  ] = 2] = "Multiply";
  PhysicsMaterialCombineMode2[PhysicsMaterialCombineMode2[
    /** Uses the larger friction/bounce of the two colliding materials. */
    "Maximum"
  ] = 3] = "Maximum";
})(PhysicsMaterialCombineMode || (PhysicsMaterialCombineMode = {}));
var PhysicsMaterial = function() {
  function PhysicsMaterial2() {
    this._bounciness = 0.1;
    this._dynamicFriction = 0.1;
    this._staticFriction = 0.1;
    this._bounceCombine = PhysicsMaterialCombineMode.Average;
    this._frictionCombine = PhysicsMaterialCombineMode.Average;
    this._nativeMaterial = PhysicsManager._nativePhysics.createPhysicsMaterial(this._staticFriction, this._dynamicFriction, this._bounciness, this._bounceCombine, this._frictionCombine);
  }
  var _proto = PhysicsMaterial2.prototype;
  _proto._destroy = function _destroy() {
    this._nativeMaterial.destroy();
  };
  _create_class2(PhysicsMaterial2, [
    {
      key: "bounciness",
      get: (
        /**
        * The coefficient of bounciness.
        */
        function get() {
          return this._bounciness;
        }
      ),
      set: function set(value) {
        if (this._bounciness !== value) {
          this._bounciness = value;
          this._nativeMaterial.setBounciness(value);
        }
      }
    },
    {
      key: "dynamicFriction",
      get: (
        /**
        * The DynamicFriction value.
        */
        function get() {
          return this._dynamicFriction;
        }
      ),
      set: function set(value) {
        if (this._dynamicFriction !== value) {
          this._dynamicFriction = value;
          this._nativeMaterial.setDynamicFriction(value);
        }
      }
    },
    {
      key: "staticFriction",
      get: (
        /**
        * The coefficient of static friction.
        */
        function get() {
          return this._staticFriction;
        }
      ),
      set: function set(value) {
        if (this._staticFriction !== value) {
          this._staticFriction = value;
          this._nativeMaterial.setStaticFriction(value);
        }
      }
    },
    {
      key: "bounceCombine",
      get: (
        /**
        * The restitution combine mode.
        */
        function get() {
          return this._bounceCombine;
        }
      ),
      set: function set(value) {
        if (this._bounceCombine !== value) {
          this._bounceCombine = value;
          this._nativeMaterial.setBounceCombine(value);
        }
      }
    },
    {
      key: "frictionCombine",
      get: (
        /**
        * The friction combine mode.
        */
        function get() {
          return this._frictionCombine;
        }
      ),
      set: function set(value) {
        if (this._frictionCombine !== value) {
          this._frictionCombine = value;
          this._nativeMaterial.setFrictionCombine(value);
        }
      }
    }
  ]);
  return PhysicsMaterial2;
}();
var Collider = function(Component2) {
  _inherits(Collider2, Component2);
  function Collider2(entity) {
    var _this;
    _this = Component2.call(this, entity) || this;
    _this._index = -1;
    _this._shapes = [];
    _this._updateFlag = _this.entity.transform.registerWorldChangeFlag();
    return _this;
  }
  var _proto = Collider2.prototype;
  _proto.addShape = function addShape(shape) {
    var oldCollider = shape._collider;
    if (oldCollider !== this) {
      if (oldCollider) {
        oldCollider.removeShape(shape);
      }
      this._shapes.push(shape);
      this.engine.physicsManager._addColliderShape(shape);
      shape._collider = this;
      this._nativeCollider.addShape(shape._nativeShape);
    }
  };
  _proto.removeShape = function removeShape(shape) {
    var index = this._shapes.indexOf(shape);
    if (index !== -1) {
      this._shapes.splice(index, 1);
      this.engine.physicsManager._removeColliderShape(shape);
      shape._collider = null;
      this._nativeCollider.removeShape(shape._nativeShape);
    }
  };
  _proto.clearShapes = function clearShapes() {
    var shapes = this._shapes;
    for (var i = 0, n = shapes.length; i < n; i++) {
      var shape = shapes[i];
      this.engine.physicsManager._removeColliderShape(shape);
      shape._destroy();
      this._nativeCollider.removeShape(shape._nativeShape);
    }
    shapes.length = 0;
  };
  _proto._onUpdate = function _onUpdate() {
    if (this._updateFlag.flag) {
      var transform = this.entity.transform;
      this._nativeCollider.setWorldTransform(transform.worldPosition, transform.worldRotationQuaternion);
      var worldScale = transform.lossyWorldScale;
      for (var i = 0, n = this.shapes.length; i < n; i++) {
        this.shapes[i]._nativeShape.setWorldScale(worldScale);
      }
      this._updateFlag.flag = false;
    }
  };
  _proto._onLateUpdate = function _onLateUpdate() {
  };
  _proto._onEnable = function _onEnable() {
    this.engine.physicsManager._addCollider(this);
  };
  _proto._onDisable = function _onDisable() {
    this.engine.physicsManager._removeCollider(this);
  };
  _proto._onDestroy = function _onDestroy() {
    this.clearShapes();
    this._nativeCollider.destroy();
  };
  _create_class2(Collider2, [
    {
      key: "shapes",
      get: (
        /**
        * The shapes of this collider.
        */
        function get() {
          return this._shapes;
        }
      )
    }
  ]);
  return Collider2;
}(Component);
__decorate([
  ignoreClone
], Collider.prototype, "_index", void 0);
Collider = __decorate([
  dependentComponents(Transform)
], Collider);
var ControllerNonWalkableMode;
(function(ControllerNonWalkableMode2) {
  ControllerNonWalkableMode2[ControllerNonWalkableMode2[
    /** Stops character from climbing up non-walkable slopes, but doesn't move it otherwise. */
    "PreventClimbing"
  ] = 0] = "PreventClimbing";
  ControllerNonWalkableMode2[ControllerNonWalkableMode2[
    /** Stops character from climbing up non-walkable slopes, and forces it to slide down those slopes. */
    "PreventClimbingAndForceSliding"
  ] = 1] = "PreventClimbingAndForceSliding";
})(ControllerNonWalkableMode || (ControllerNonWalkableMode = {}));
var CharacterController = function(Collider2) {
  _inherits(CharacterController2, Collider2);
  function CharacterController2(entity) {
    var _this;
    _this = Collider2.call(this, entity) || this;
    _this._index = -1;
    _this._stepOffset = 0.5;
    _this._nonWalkableMode = ControllerNonWalkableMode.PreventClimbing;
    _this._upDirection = new Vector3(0, 1, 0);
    _this._slopeLimit = 0.707;
    _this._nativeCollider = PhysicsManager._nativePhysics.createCharacterController();
    _this._setUpDirection = _this._setUpDirection.bind(_assert_this_initialized(_this));
    _this._upDirection._onValueChanged = _this._setUpDirection;
    return _this;
  }
  var _proto = CharacterController2.prototype;
  _proto.move = function move(disp, minDist, elapsedTime) {
    return this._nativeCollider.move(disp, minDist, elapsedTime);
  };
  _proto.addShape = function addShape(shape) {
    if (this._shapes.length > 0) {
      throw "only allow single shape on controller!";
    }
    Collider2.prototype.addShape.call(this, shape);
    this._updateFlag.flag = true;
  };
  _proto.clearShapes = function clearShapes() {
    if (this._shapes.length > 0) {
      Collider2.prototype.removeShape.call(this, this._shapes[0]);
    }
  };
  _proto._onUpdate = function _onUpdate() {
    if (this._updateFlag.flag) {
      var transform = this.entity.transform;
      var shapes = this.shapes;
      this._nativeCollider.setWorldPosition(transform.worldPosition);
      var worldScale = transform.lossyWorldScale;
      for (var i = 0, n = shapes.length; i < n; i++) {
        shapes[i]._nativeShape.setWorldScale(worldScale);
      }
      this._updateFlag.flag = false;
    }
  };
  _proto._onLateUpdate = function _onLateUpdate() {
    var position = this.entity.transform.worldPosition;
    this._nativeCollider.getWorldPosition(position);
    this.entity.transform.worldPosition = position;
    this._updateFlag.flag = false;
  };
  _proto._onEnable = function _onEnable() {
    this.engine.physicsManager._addCharacterController(this);
  };
  _proto._onDisable = function _onDisable() {
    this.engine.physicsManager._removeCharacterController(this);
  };
  _proto._setUpDirection = function _setUpDirection() {
    this._nativeCollider.setUpDirection(this._upDirection);
  };
  _create_class2(CharacterController2, [
    {
      key: "stepOffset",
      get: (
        /**
        * The step offset for the controller.
        */
        function get() {
          return this._stepOffset;
        }
      ),
      set: function set(value) {
        if (this._stepOffset !== value) {
          this._stepOffset = value;
          this._nativeCollider.setStepOffset(value);
        }
      }
    },
    {
      key: "nonWalkableMode",
      get: (
        /**
        * The value of the non-walkable mode.
        */
        function get() {
          return this._nonWalkableMode;
        }
      ),
      set: function set(value) {
        if (this._nonWalkableMode !== value) {
          this._nonWalkableMode = value;
          this._nativeCollider.setNonWalkableMode(value);
        }
      }
    },
    {
      key: "upDirection",
      get: (
        /**
        * The up direction for the controller.
        */
        function get() {
          return this._upDirection;
        }
      ),
      set: function set(value) {
        if (this._upDirection !== value) {
          this._upDirection.copyFrom(value);
        }
      }
    },
    {
      key: "slopeLimit",
      get: (
        /**
        * The slope limit for the controller.
        */
        function get() {
          return this._slopeLimit;
        }
      ),
      set: function set(value) {
        if (this._slopeLimit !== value) {
          this._slopeLimit = value;
          this._nativeCollider.setSlopeLimit(value);
        }
      }
    }
  ]);
  return CharacterController2;
}(Collider);
var ColliderShape = function() {
  function ColliderShape2() {
    this._isTrigger = false;
    this._rotation = new Vector3();
    this._position = new Vector3();
    this._contactOffset = 0.02;
    this.isSceneQuery = true;
    this._material = new PhysicsMaterial();
    this._id = ColliderShape2._idGenerator++;
    this._setRotation = this._setRotation.bind(this);
    this._setPosition = this._setPosition.bind(this);
    this._rotation._onValueChanged = this._setRotation;
    this._position._onValueChanged = this._setPosition;
  }
  var _proto = ColliderShape2.prototype;
  _proto._destroy = function _destroy() {
    this._material._destroy();
    this._nativeShape.destroy();
  };
  _proto._setPosition = function _setPosition() {
    this._nativeShape.setPosition(this._position);
  };
  _proto._setRotation = function _setRotation() {
    this._nativeShape.setRotation(this._rotation);
  };
  _create_class2(ColliderShape2, [
    {
      key: "collider",
      get: (
        /**
        * Collider owner of this shape.
        */
        function get() {
          return this._collider;
        }
      )
    },
    {
      key: "id",
      get: (
        /**
        * Unique id for this shape.
        */
        function get() {
          return this._id;
        }
      )
    },
    {
      key: "contactOffset",
      get: (
        /**
        * Contact offset for this shape.
        */
        function get() {
          return this._contactOffset;
        }
      ),
      set: function set(value) {
        if (this._contactOffset !== value) {
          this._contactOffset = value;
          this._nativeShape.setContactOffset(value);
        }
      }
    },
    {
      key: "material",
      get: (
        /**
        * Physical material.
        */
        function get() {
          return this._material;
        }
      ),
      set: function set(value) {
        if (this._material !== value) {
          this._material = value;
          this._nativeShape.setMaterial(value._nativeMaterial);
        }
      }
    },
    {
      key: "rotation",
      get: (
        /**
        * The local rotation of this ColliderShape.
        */
        function get() {
          return this._rotation;
        }
      ),
      set: function set(value) {
        if (this._rotation != value) {
          this._rotation.copyFrom(value);
        }
      }
    },
    {
      key: "position",
      get: (
        /**
        * The local position of this ColliderShape.
        */
        function get() {
          return this._position;
        }
      ),
      set: function set(value) {
        if (this._position !== value) {
          this._position.copyFrom(value);
        }
      }
    },
    {
      key: "isTrigger",
      get: (
        /**
        * True for TriggerShape, false for SimulationShape.
        */
        function get() {
          return this._isTrigger;
        }
      ),
      set: function set(value) {
        if (this._isTrigger !== value) {
          this._isTrigger = value;
          this._nativeShape.setIsTrigger(value);
        }
      }
    }
  ]);
  return ColliderShape2;
}();
(function() {
  ColliderShape._idGenerator = 0;
})();
var BoxColliderShape = function(ColliderShape2) {
  _inherits(BoxColliderShape2, ColliderShape2);
  function BoxColliderShape2() {
    var _this;
    _this = ColliderShape2.call(this) || this;
    _this._size = new Vector3(1, 1, 1);
    _this._nativeShape = PhysicsManager._nativePhysics.createBoxColliderShape(_this._id, _this._size, _this._material._nativeMaterial);
    _this._setSize = _this._setSize.bind(_assert_this_initialized(_this));
    _this._size._onValueChanged = _this._setSize;
    return _this;
  }
  var _proto = BoxColliderShape2.prototype;
  _proto._setSize = function _setSize() {
    this._nativeShape.setSize(this._size);
  };
  _create_class2(BoxColliderShape2, [
    {
      key: "size",
      get: (
        /**
        * Size of box shape.
        */
        function get() {
          return this._size;
        }
      ),
      set: function set(value) {
        if (this._size !== value) {
          this._size.copyFrom(value);
        }
      }
    }
  ]);
  return BoxColliderShape2;
}(ColliderShape);
var SphereColliderShape = function(ColliderShape2) {
  _inherits(SphereColliderShape2, ColliderShape2);
  function SphereColliderShape2() {
    var _this;
    _this = ColliderShape2.call(this) || this;
    _this._radius = 1;
    _this._nativeShape = PhysicsManager._nativePhysics.createSphereColliderShape(_this._id, _this._radius, _this._material._nativeMaterial);
    return _this;
  }
  _create_class2(SphereColliderShape2, [
    {
      key: "radius",
      get: (
        /**
        * Radius of sphere shape.
        */
        function get() {
          return this._radius;
        }
      ),
      set: function set(value) {
        if (this._radius !== value) {
          this._radius = value;
          this._nativeShape.setRadius(value);
        }
      }
    }
  ]);
  return SphereColliderShape2;
}(ColliderShape);
var PlaneColliderShape = function(ColliderShape2) {
  _inherits(PlaneColliderShape2, ColliderShape2);
  function PlaneColliderShape2() {
    var _this;
    _this = ColliderShape2.call(this) || this;
    _this._nativeShape = PhysicsManager._nativePhysics.createPlaneColliderShape(_this._id, _this._material._nativeMaterial);
    return _this;
  }
  return PlaneColliderShape2;
}(ColliderShape);
var ColliderShapeUpAxis;
(function(ColliderShapeUpAxis2) {
  ColliderShapeUpAxis2[ColliderShapeUpAxis2[
    /** Up axis is X. */
    "X"
  ] = 0] = "X";
  ColliderShapeUpAxis2[ColliderShapeUpAxis2[
    /** Up axis is Y. */
    "Y"
  ] = 1] = "Y";
  ColliderShapeUpAxis2[ColliderShapeUpAxis2[
    /** Up axis is Z. */
    "Z"
  ] = 2] = "Z";
})(ColliderShapeUpAxis || (ColliderShapeUpAxis = {}));
var CapsuleColliderShape = function(ColliderShape2) {
  _inherits(CapsuleColliderShape2, ColliderShape2);
  function CapsuleColliderShape2() {
    var _this;
    _this = ColliderShape2.call(this) || this;
    _this._radius = 1;
    _this._height = 2;
    _this._upAxis = ColliderShapeUpAxis.Y;
    _this._nativeShape = PhysicsManager._nativePhysics.createCapsuleColliderShape(_this._id, _this._radius, _this._height, _this._material._nativeMaterial);
    return _this;
  }
  _create_class2(CapsuleColliderShape2, [
    {
      key: "radius",
      get: (
        /**
        * Radius of capsule.
        */
        function get() {
          return this._radius;
        }
      ),
      set: function set(value) {
        if (this._radius !== value) {
          this._radius = value;
          this._nativeShape.setRadius(value);
        }
      }
    },
    {
      key: "height",
      get: (
        /**
        * Height of capsule.
        */
        function get() {
          return this._height;
        }
      ),
      set: function set(value) {
        if (this._height !== value) {
          this._height = value;
          this._nativeShape.setHeight(value);
        }
      }
    },
    {
      key: "upAxis",
      get: (
        /**
        * Up axis of capsule.
        */
        function get() {
          return this._upAxis;
        }
      ),
      set: function set(value) {
        if (this._upAxis !== value) {
          this._upAxis = value;
          this._nativeShape.setUpAxis(value);
        }
      }
    }
  ]);
  return CapsuleColliderShape2;
}(ColliderShape);
var Joint = function(Component2) {
  _inherits(Joint2, Component2);
  function Joint2(entity) {
    var _this;
    _this = Component2.call(this, entity) || this;
    _this._connectedCollider = new JointCollider();
    _this._collider = new JointCollider();
    _this._force = 0;
    _this._torque = 0;
    _this._connectedCollider.localPosition = new Vector3();
    return _this;
  }
  _create_class2(Joint2, [
    {
      key: "connectedCollider",
      get: (
        /**
        * The connected collider.
        */
        function get() {
          return this._connectedCollider.collider;
        }
      ),
      set: function set(value) {
        if (this._connectedCollider.collider !== value) {
          this._connectedCollider.collider = value;
          this._nativeJoint.setConnectedCollider(value._nativeCollider);
        }
      }
    },
    {
      key: "connectedAnchor",
      get: (
        /**
        * The connected anchor position.
        * @remarks If connectedCollider is set, this anchor is relative offset, or the anchor is world position.
        */
        function get() {
          return this._connectedCollider.localPosition;
        }
      ),
      set: function set(value) {
        var connectedAnchor = this._connectedCollider.localPosition;
        if (value !== connectedAnchor) {
          connectedAnchor.copyFrom(value);
        }
        this._nativeJoint.setConnectedAnchor(value);
      }
    },
    {
      key: "connectedMassScale",
      get: (
        /**
        *  The scale to apply to the inverse mass of collider 0 for resolving this constraint.
        */
        function get() {
          return this._connectedCollider.massScale;
        }
      ),
      set: function set(value) {
        if (value !== this._connectedCollider.massScale) {
          this._connectedCollider.massScale = value;
          this._nativeJoint.setConnectedMassScale(value);
        }
      }
    },
    {
      key: "connectedInertiaScale",
      get: (
        /**
        * The scale to apply to the inverse inertia of collider0 for resolving this constraint.
        */
        function get() {
          return this._connectedCollider.inertiaScale;
        }
      ),
      set: function set(value) {
        if (value !== this._connectedCollider.inertiaScale) {
          this._connectedCollider.inertiaScale = value;
          this._nativeJoint.setConnectedInertiaScale(value);
        }
      }
    },
    {
      key: "massScale",
      get: (
        /**
        * The scale to apply to the inverse mass of collider 1 for resolving this constraint.
        */
        function get() {
          return this._collider.massScale;
        }
      ),
      set: function set(value) {
        if (value !== this._collider.massScale) {
          this._collider.massScale = value;
          this._nativeJoint.setMassScale(value);
        }
      }
    },
    {
      key: "inertiaScale",
      get: (
        /**
        * The scale to apply to the inverse inertia of collider1 for resolving this constraint.
        */
        function get() {
          return this._collider.inertiaScale;
        }
      ),
      set: function set(value) {
        if (value !== this._collider.inertiaScale) {
          this._collider.inertiaScale = value;
          this._nativeJoint.setInertiaScale(value);
        }
      }
    },
    {
      key: "breakForce",
      get: (
        /**
        * The maximum force the joint can apply before breaking.
        */
        function get() {
          return this._force;
        }
      ),
      set: function set(value) {
        if (value !== this._force) {
          this._force = value;
          this._nativeJoint.setBreakForce(value);
        }
      }
    },
    {
      key: "breakTorque",
      get: (
        /**
        * The maximum torque the joint can apply before breaking.
        */
        function get() {
          return this._torque;
        }
      ),
      set: function set(value) {
        if (value !== this._torque) {
          this._torque = value;
          this._nativeJoint.setBreakTorque(value);
        }
      }
    }
  ]);
  return Joint2;
}(Component);
Joint = __decorate([
  dependentComponents(Collider)
], Joint);
var JointCollider = function JointCollider2() {
  this.collider = null;
  this.massScale = 0;
  this.inertiaScale = 0;
};
var FixedJoint = function(Joint2) {
  _inherits(FixedJoint2, Joint2);
  function FixedJoint2() {
    return Joint2.apply(this, arguments);
  }
  var _proto = FixedJoint2.prototype;
  _proto._onAwake = function _onAwake() {
    var collider = this._collider;
    collider.collider = this.entity.getComponent(Collider);
    this._nativeJoint = PhysicsManager._nativePhysics.createFixedJoint(collider.collider._nativeCollider);
  };
  return FixedJoint2;
}(Joint);
var HingeJointFlag;
(function(HingeJointFlag2) {
  HingeJointFlag2[HingeJointFlag2[
    /** enable the limit */
    "LimitEnabled"
  ] = 1] = "LimitEnabled";
  HingeJointFlag2[HingeJointFlag2[
    /** enable the drive */
    "DriveEnabled"
  ] = 2] = "DriveEnabled";
  HingeJointFlag2[HingeJointFlag2[
    /** if the existing velocity is beyond the drive velocity, do not add force */
    "DriveFreeSpin"
  ] = 4] = "DriveFreeSpin";
})(HingeJointFlag || (HingeJointFlag = {}));
var HingeJoint = function(Joint2) {
  _inherits(HingeJoint2, Joint2);
  function HingeJoint2() {
    var _this;
    _this = Joint2.apply(this, arguments) || this;
    _this._axis = new Vector3(1, 0, 0);
    _this._hingeFlags = 0;
    _this._useSpring = false;
    return _this;
  }
  var _proto = HingeJoint2.prototype;
  _proto._onAwake = function _onAwake() {
    var collider = this._collider;
    collider.localPosition = new Vector3();
    collider.collider = this.entity.getComponent(Collider);
    this._nativeJoint = PhysicsManager._nativePhysics.createHingeJoint(collider.collider._nativeCollider);
  };
  _create_class2(HingeJoint2, [
    {
      key: "axis",
      get: (
        /**
        * The anchor rotation.
        */
        function get() {
          return this._axis;
        }
      ),
      set: function set(value) {
        var axis = this._axis;
        if (value !== axis) {
          axis.copyFrom(value);
        }
        this._nativeJoint.setAxis(axis);
      }
    },
    {
      key: "swingOffset",
      get: (
        /**
        * The swing offset.
        */
        function get() {
          return this._collider.localPosition;
        }
      ),
      set: function set(value) {
        var swingOffset = this._collider.localPosition;
        if (value !== swingOffset) {
          swingOffset.copyFrom(value);
        }
        this._nativeJoint.setSwingOffset(swingOffset);
      }
    },
    {
      key: "angle",
      get: (
        /**
        * The current angle in degrees of the joint relative to its rest position.
        */
        function get() {
          return this._nativeJoint.getAngle();
        }
      )
    },
    {
      key: "velocity",
      get: (
        /**
        * The angular velocity of the joint in degrees per second.
        */
        function get() {
          return this._nativeJoint.getVelocity();
        }
      )
    },
    {
      key: "useLimits",
      get: (
        /**
        * Enables the joint's limits. Disabled by default.
        */
        function get() {
          return (this._hingeFlags & HingeJointFlag.LimitEnabled) == HingeJointFlag.LimitEnabled;
        }
      ),
      set: function set(value) {
        if (value !== this.useLimits) {
          this._hingeFlags |= HingeJointFlag.LimitEnabled;
        }
        this._nativeJoint.setHingeJointFlag(HingeJointFlag.LimitEnabled, value);
      }
    },
    {
      key: "useMotor",
      get: (
        /**
        * Enables the joint's motor. Disabled by default.
        */
        function get() {
          return (this._hingeFlags & HingeJointFlag.DriveEnabled) == HingeJointFlag.DriveEnabled;
        }
      ),
      set: function set(value) {
        if (value !== this.useMotor) {
          this._hingeFlags |= HingeJointFlag.DriveEnabled;
        }
        this._nativeJoint.setHingeJointFlag(HingeJointFlag.DriveEnabled, value);
      }
    },
    {
      key: "useSpring",
      get: (
        /**
        * Enables the joint's spring. Disabled by default.
        */
        function get() {
          return this._useSpring;
        }
      ),
      set: function set(value) {
        if (this._useSpring !== value) {
          this._useSpring = value;
          this.limits = this._limits;
        }
      }
    },
    {
      key: "motor",
      get: (
        /**
        * The motor will apply a force up to a maximum force to achieve the target velocity in degrees per second.
        */
        function get() {
          return this._jointMonitor;
        }
      ),
      set: function set(value) {
        if (this._jointMonitor !== value) {
          this._jointMonitor = value;
          this._nativeJoint.setDriveVelocity(value.targetVelocity);
          this._nativeJoint.setDriveForceLimit(value.forceLimit);
          this._nativeJoint.setDriveGearRatio(value.gearRation);
          this._nativeJoint.setHingeJointFlag(HingeJointFlag.DriveFreeSpin, value.freeSpin);
        }
      }
    },
    {
      key: "limits",
      get: (
        /**
        * Limit of angular rotation (in degrees) on the hinge joint.
        */
        function get() {
          return this._limits;
        }
      ),
      set: function set(value) {
        if (this._limits !== value) {
          this._limits = value;
          if (this.useSpring) {
            this._nativeJoint.setSoftLimit(value.min, value.max, value.stiffness, value.damping);
          } else {
            this._nativeJoint.setHardLimit(value.min, value.max, value.contactDistance);
          }
        }
      }
    }
  ]);
  return HingeJoint2;
}(Joint);
var SpringJoint = function(Joint2) {
  _inherits(SpringJoint2, Joint2);
  function SpringJoint2() {
    var _this;
    _this = Joint2.apply(this, arguments) || this;
    _this._minDistance = 0;
    _this._maxDistance = 0;
    _this._tolerance = 0.25;
    _this._stiffness = 0;
    _this._damping = 0;
    return _this;
  }
  var _proto = SpringJoint2.prototype;
  _proto._onAwake = function _onAwake() {
    var collider = this._collider;
    collider.localPosition = new Vector3();
    collider.collider = this.entity.getComponent(Collider);
    this._nativeJoint = PhysicsManager._nativePhysics.createSpringJoint(collider.collider._nativeCollider);
  };
  _create_class2(SpringJoint2, [
    {
      key: "swingOffset",
      get: (
        /**
        * The swing offset.
        */
        function get() {
          return this._collider.localPosition;
        }
      ),
      set: function set(value) {
        var swingOffset = this._collider.localPosition;
        if (value !== swingOffset) {
          swingOffset.copyFrom(value);
        }
        this._nativeJoint.setSwingOffset(value);
      }
    },
    {
      key: "minDistance",
      get: (
        /**
        * The minimum distance.
        */
        function get() {
          return this._minDistance;
        }
      ),
      set: function set(value) {
        if (this._minDistance !== value) {
          this._minDistance = value;
          this._nativeJoint.setMinDistance(value);
        }
      }
    },
    {
      key: "maxDistance",
      get: (
        /**
        * The maximum distance.
        */
        function get() {
          return this._maxDistance;
        }
      ),
      set: function set(value) {
        if (this._maxDistance !== value) {
          this._maxDistance = value;
          this._nativeJoint.setMaxDistance(value);
        }
      }
    },
    {
      key: "tolerance",
      get: (
        /**
        * The distance beyond the allowed range at which the joint becomes active.
        */
        function get() {
          return this._tolerance;
        }
      ),
      set: function set(value) {
        if (this._tolerance !== value) {
          this._tolerance = value;
          this._nativeJoint.setTolerance(value);
        }
      }
    },
    {
      key: "stiffness",
      get: (
        /**
        * The spring strength of the joint.
        */
        function get() {
          return this._stiffness;
        }
      ),
      set: function set(value) {
        if (this._stiffness !== value) {
          this._stiffness = value;
          this._nativeJoint.setStiffness(value);
        }
      }
    },
    {
      key: "damping",
      get: (
        /**
        * The degree of damping of the joint spring of the joint.
        */
        function get() {
          return this._damping;
        }
      ),
      set: function set(value) {
        if (this._damping !== value) {
          this._damping = value;
          this._nativeJoint.setDamping(value);
        }
      }
    }
  ]);
  return SpringJoint2;
}(Joint);
var JointLimits = function JointLimits2() {
  this.max = 0;
  this.min = 0;
  this.contactDistance = -1;
  this.stiffness = 0;
  this.damping = 0;
};
var JointMotor = function JointMotor2() {
  this.targetVelocity = 0;
  this.forceLimit = Number.MAX_VALUE;
  this.gearRation = 1;
  this.freeSpin = false;
};
var ControllerCollisionFlag;
(function(ControllerCollisionFlag2) {
  ControllerCollisionFlag2[ControllerCollisionFlag2[
    /** Character is colliding to the sides. */
    "Sides"
  ] = 1] = "Sides";
  ControllerCollisionFlag2[ControllerCollisionFlag2[
    /** Character has collision above. */
    "Up"
  ] = 2] = "Up";
  ControllerCollisionFlag2[ControllerCollisionFlag2[
    /** Character has collision below. */
    "Down"
  ] = 4] = "Down";
})(ControllerCollisionFlag || (ControllerCollisionFlag = {}));
var StaticCollider = function(Collider2) {
  _inherits(StaticCollider2, Collider2);
  function StaticCollider2(entity) {
    var _this;
    _this = Collider2.call(this, entity) || this;
    var transform = _this.entity.transform;
    _this._nativeCollider = PhysicsManager._nativePhysics.createStaticCollider(transform.worldPosition, transform.worldRotationQuaternion);
    return _this;
  }
  return StaticCollider2;
}(Collider);
var DynamicCollider = function(Collider2) {
  _inherits(DynamicCollider2, Collider2);
  function DynamicCollider2(entity) {
    var _this;
    _this = Collider2.call(this, entity) || this;
    _this._linearDamping = 0;
    _this._angularDamping = 0.05;
    _this._linearVelocity = new Vector3();
    _this._angularVelocity = new Vector3();
    _this._mass = 1;
    _this._centerOfMass = new Vector3();
    _this._inertiaTensor = new Vector3(1, 1, 1);
    _this._maxAngularVelocity = 100;
    _this._maxDepenetrationVelocity = 1e3;
    _this._solverIterations = 4;
    _this._isKinematic = false;
    _this._constraints = 0;
    _this._collisionDetectionMode = /** Continuous collision detection is off for this dynamic collider. */
    0;
    _this._sleepThreshold = 5e-3;
    var transform = _this.entity.transform;
    _this._nativeCollider = PhysicsManager._nativePhysics.createDynamicCollider(transform.worldPosition, transform.worldRotationQuaternion);
    _this._setLinearVelocity = _this._setLinearVelocity.bind(_assert_this_initialized(_this));
    _this._setAngularVelocity = _this._setAngularVelocity.bind(_assert_this_initialized(_this));
    _this._setCenterOfMass = _this._setCenterOfMass.bind(_assert_this_initialized(_this));
    _this._setInertiaTensor = _this._setInertiaTensor.bind(_assert_this_initialized(_this));
    _this._linearVelocity._onValueChanged = _this._setLinearVelocity;
    _this._angularVelocity._onValueChanged = _this._setAngularVelocity;
    _this._centerOfMass._onValueChanged = _this._setCenterOfMass;
    _this._inertiaTensor._onValueChanged = _this._setInertiaTensor;
    return _this;
  }
  var _proto = DynamicCollider2.prototype;
  _proto.applyForce = function applyForce(force) {
    this._nativeCollider.addForce(force);
  };
  _proto.applyTorque = function applyTorque(torque) {
    this._nativeCollider.addTorque(torque);
  };
  _proto.move = function move(positionOrRotation, rotation) {
    this._nativeCollider.move(positionOrRotation, rotation);
  };
  _proto.sleep = function sleep() {
    this._nativeCollider.sleep();
  };
  _proto.wakeUp = function wakeUp() {
    this._nativeCollider.wakeUp();
  };
  _proto._onLateUpdate = function _onLateUpdate() {
    var transform = this.entity.transform;
    var worldPosition = transform.worldPosition, worldRotationQuaternion = transform.worldRotationQuaternion;
    this._nativeCollider.getWorldTransform(worldPosition, worldRotationQuaternion);
    this._updateFlag.flag = false;
  };
  _proto._setLinearVelocity = function _setLinearVelocity() {
    this._nativeCollider.setLinearVelocity(this._linearVelocity);
  };
  _proto._setAngularVelocity = function _setAngularVelocity() {
    this._nativeCollider.setAngularVelocity(this._angularVelocity);
  };
  _proto._setCenterOfMass = function _setCenterOfMass() {
    this._nativeCollider.setCenterOfMass(this._centerOfMass);
  };
  _proto._setInertiaTensor = function _setInertiaTensor() {
    this._nativeCollider.setInertiaTensor(this._inertiaTensor);
  };
  _create_class2(DynamicCollider2, [
    {
      key: "linearDamping",
      get: (
        /**
        * The linear damping of the dynamic collider.
        */
        function get() {
          return this._linearDamping;
        }
      ),
      set: function set(value) {
        if (this._linearDamping !== value) {
          this._linearDamping = value;
          this._nativeCollider.setLinearDamping(value);
        }
      }
    },
    {
      key: "angularDamping",
      get: (
        /**
        * The angular damping of the dynamic collider.
        */
        function get() {
          return this._angularDamping;
        }
      ),
      set: function set(value) {
        if (this._angularDamping !== value) {
          this._angularDamping = value;
          this._nativeCollider.setAngularDamping(value);
        }
      }
    },
    {
      key: "linearVelocity",
      get: (
        /**
        * The linear velocity vector of the dynamic collider measured in world unit per second.
        */
        function get() {
          return this._linearVelocity;
        }
      ),
      set: function set(value) {
        if (this._linearVelocity !== value) {
          this._linearVelocity.copyFrom(value);
        }
      }
    },
    {
      key: "angularVelocity",
      get: (
        /**
        * The angular velocity vector of the dynamic collider measured in radians per second.
        */
        function get() {
          return this._angularVelocity;
        }
      ),
      set: function set(value) {
        if (this._angularVelocity !== value) {
          this._angularVelocity.copyFrom(value);
        }
      }
    },
    {
      key: "mass",
      get: (
        /**
        * The mass of the dynamic collider.
        */
        function get() {
          return this._mass;
        }
      ),
      set: function set(value) {
        if (this._mass !== value) {
          this._mass = value;
          this._nativeCollider.setMass(value);
        }
      }
    },
    {
      key: "centerOfMass",
      get: (
        /**
        * The center of mass relative to the transform's origin.
        */
        function get() {
          return this._centerOfMass;
        }
      ),
      set: function set(value) {
        if (this._centerOfMass !== value) {
          this._centerOfMass.copyFrom(value);
        }
      }
    },
    {
      key: "inertiaTensor",
      get: (
        /**
        * The diagonal inertia tensor of mass relative to the center of mass.
        */
        function get() {
          return this._inertiaTensor;
        }
      ),
      set: function set(value) {
        if (this._inertiaTensor !== value) {
          this._inertiaTensor.copyFrom(value);
        }
      }
    },
    {
      key: "maxAngularVelocity",
      get: (
        /**
        * The maximum angular velocity of the collider measured in radians per second. (Default 7) range { 0, infinity }.
        */
        function get() {
          return this._maxAngularVelocity;
        }
      ),
      set: function set(value) {
        if (this._maxAngularVelocity !== value) {
          this._maxAngularVelocity = value;
          this._nativeCollider.setMaxAngularVelocity(value);
        }
      }
    },
    {
      key: "maxDepenetrationVelocity",
      get: (
        /**
        * Maximum velocity of a collider when moving out of penetrating state.
        */
        function get() {
          return this._maxDepenetrationVelocity;
        }
      ),
      set: function set(value) {
        if (this._maxDepenetrationVelocity !== value) {
          this._maxDepenetrationVelocity = value;
          this._nativeCollider.setMaxDepenetrationVelocity(value);
        }
      }
    },
    {
      key: "sleepThreshold",
      get: (
        /**
        * The mass-normalized energy threshold, below which objects start going to sleep.
        */
        function get() {
          return this._sleepThreshold;
        }
      ),
      set: function set(value) {
        if (value !== this._sleepThreshold) {
          this._sleepThreshold = value;
          this._nativeCollider.setSleepThreshold(value);
        }
      }
    },
    {
      key: "solverIterations",
      get: (
        /**
        * The solverIterations determines how accurately collider joints and collision contacts are resolved.
        */
        function get() {
          return this._solverIterations;
        }
      ),
      set: function set(value) {
        if (this._solverIterations !== value) {
          this._solverIterations = value;
          this._nativeCollider.setSolverIterations(value);
        }
      }
    },
    {
      key: "isKinematic",
      get: (
        /**
        * Controls whether physics affects the dynamic collider.
        */
        function get() {
          return this._isKinematic;
        }
      ),
      set: function set(value) {
        if (this._isKinematic !== value) {
          this._isKinematic = value;
          this._nativeCollider.setIsKinematic(value);
        }
      }
    },
    {
      key: "constraints",
      get: (
        /**
        * The particular rigid dynamic lock flag.
        */
        function get() {
          return this._constraints;
        }
      ),
      set: function set(value) {
        if (this._constraints !== value) {
          this._constraints = value;
          this._nativeCollider.setConstraints(value);
        }
      }
    },
    {
      key: "collisionDetectionMode",
      get: (
        /**
        * The colliders' collision detection mode.
        */
        function get() {
          return this._collisionDetectionMode;
        }
      ),
      set: function set(value) {
        if (this._collisionDetectionMode !== value) {
          this._collisionDetectionMode = value;
          this._nativeCollider.setCollisionDetectionMode(value);
        }
      }
    }
  ]);
  return DynamicCollider2;
}(Collider);
var CollisionDetectionMode;
(function(CollisionDetectionMode2) {
  CollisionDetectionMode2[CollisionDetectionMode2["Discrete"] = 0] = "Discrete";
  CollisionDetectionMode2[CollisionDetectionMode2[
    /** Continuous collision detection is on for colliding with static mesh geometry. */
    "Continuous"
  ] = 1] = "Continuous";
  CollisionDetectionMode2[CollisionDetectionMode2[
    /** Continuous collision detection is on for colliding with static and dynamic geometry. */
    "ContinuousDynamic"
  ] = 2] = "ContinuousDynamic";
  CollisionDetectionMode2[CollisionDetectionMode2[
    /** Speculative continuous collision detection is on for static and dynamic geometries */
    "ContinuousSpeculative"
  ] = 3] = "ContinuousSpeculative";
})(CollisionDetectionMode || (CollisionDetectionMode = {}));
var DynamicColliderConstraints;
(function(DynamicColliderConstraints2) {
  DynamicColliderConstraints2[DynamicColliderConstraints2[
    /** Not Freeze. */
    "None"
  ] = 0] = "None";
  DynamicColliderConstraints2[DynamicColliderConstraints2[
    /** Freeze motion along the X-axis. */
    "FreezePositionX"
  ] = 1] = "FreezePositionX";
  DynamicColliderConstraints2[DynamicColliderConstraints2[
    /** Freeze motion along the Y-axis. */
    "FreezePositionY"
  ] = 2] = "FreezePositionY";
  DynamicColliderConstraints2[DynamicColliderConstraints2[
    /** Freeze motion along the Z-axis. */
    "FreezePositionZ"
  ] = 4] = "FreezePositionZ";
  DynamicColliderConstraints2[DynamicColliderConstraints2[
    /** Freeze rotation along the X-axis. */
    "FreezeRotationX"
  ] = 8] = "FreezeRotationX";
  DynamicColliderConstraints2[DynamicColliderConstraints2[
    /** Freeze rotation along the Y-axis. */
    "FreezeRotationY"
  ] = 16] = "FreezeRotationY";
  DynamicColliderConstraints2[DynamicColliderConstraints2[
    /** Freeze rotation along the Z-axis. */
    "FreezeRotationZ"
  ] = 32] = "FreezeRotationZ";
})(DynamicColliderConstraints || (DynamicColliderConstraints = {}));
var PointerButton;
(function(PointerButton2) {
  PointerButton2[PointerButton2[
    /** No button. */
    "None"
  ] = 0] = "None";
  PointerButton2[PointerButton2[
    /** Indicate the primary pointer of the device (in general, the left button or the only button on single-button devices, used to activate a user interface control or select text) or the un-initialized value. */
    "Primary"
  ] = 1] = "Primary";
  PointerButton2[PointerButton2[
    /** Indicate the secondary pointer (in general, the right button, often used to display a context menu). */
    "Secondary"
  ] = 2] = "Secondary";
  PointerButton2[PointerButton2[
    /** Indicate the auxiliary pointer (in general, the middle button, often combined with a mouse wheel). */
    "Auxiliary"
  ] = 4] = "Auxiliary";
  PointerButton2[PointerButton2[
    /** Indicate the X1 (back) pointer. */
    "XButton1"
  ] = 8] = "XButton1";
  PointerButton2[PointerButton2[
    /** Indicate the X2 (forward) pointer. */
    "XButton2"
  ] = 16] = "XButton2";
  PointerButton2[PointerButton2[
    /** Indicate the X3 pointer. */
    "XButton3"
  ] = 32] = "XButton3";
  PointerButton2[PointerButton2[
    /** Indicate the X4 pointer. */
    "XButton4"
  ] = 64] = "XButton4";
  PointerButton2[PointerButton2[
    /** Indicate the X5 pointer. */
    "XButton5"
  ] = 128] = "XButton5";
  PointerButton2[PointerButton2[
    /** Indicate the X6 pointer. */
    "XButton6"
  ] = 256] = "XButton6";
  PointerButton2[PointerButton2[
    /** Indicate the X7 pointer. */
    "XButton7"
  ] = 512] = "XButton7";
  PointerButton2[PointerButton2[
    /** Indicate the X8 pointer. */
    "XButton8"
  ] = 1024] = "XButton8";
})(PointerButton || (PointerButton = {}));
var _pointerDec2BinMap = [
  1,
  4,
  2,
  8,
  16,
  32,
  64,
  128,
  256,
  512,
  1024
];
var _pointerBin2DecMap = {
  /** Primary */
  1: 0,
  /** Secondary */
  2: 2,
  /** Auxiliary */
  4: 1,
  /** XButton1 */
  8: 3,
  /** XButton2 */
  16: 4,
  /** XButton3 */
  32: 5,
  /** XButton4 */
  64: 6,
  /** XButton5 */
  128: 7,
  /** XButton6 */
  256: 8,
  /** XButton7 */
  512: 9,
  /** XButton8 */
  1024: 10
};
var PointerManager = function() {
  function PointerManager2(engine, htmlCanvas) {
    this._pointers = [];
    this._multiPointerEnabled = true;
    this._buttons = PointerButton.None;
    this._upMap = [];
    this._downMap = [];
    this._upList = new DisorderedArray();
    this._downList = new DisorderedArray();
    this._nativeEvents = [];
    this._hadListener = false;
    this._engine = engine;
    this._canvas = engine.canvas;
    this._htmlCanvas = htmlCanvas;
    this._onPointerEvent = this._onPointerEvent.bind(this);
    this._updatePointerWithPhysics = this._updatePointerWithPhysics.bind(this);
    this._updatePointerWithoutPhysics = this._updatePointerWithoutPhysics.bind(this);
    this._onFocus();
    this._pointerPool = new Array(11);
  }
  var _proto = PointerManager2.prototype;
  _proto._update = function _update(frameCount) {
    var _this = this, pointers = _this._pointers, nativeEvents = _this._nativeEvents;
    var lastIndex = pointers.length - 1;
    if (lastIndex >= 0) {
      for (var i = lastIndex; i >= 0; i--) {
        if (pointers[i].phase === PointerPhase.Leave) {
          pointers.splice(i, 1);
        }
      }
    }
    lastIndex = nativeEvents.length - 1;
    if (lastIndex >= 0) {
      for (var i1 = 0; i1 <= lastIndex; i1++) {
        var _this__getPointer;
        var evt = nativeEvents[i1];
        (_this__getPointer = this._getPointer(evt.pointerId)) == null ? void 0 : _this__getPointer._events.push(evt);
      }
      nativeEvents.length = 0;
    }
    this._upList.length = this._downList.length = 0;
    this._buttons = PointerButton.None;
    lastIndex = pointers.length - 1;
    if (lastIndex >= 0) {
      var updatePointer = this._engine.physicsManager._initialized ? this._updatePointerWithPhysics : this._updatePointerWithoutPhysics;
      var clientRect = this._htmlCanvas.getBoundingClientRect();
      var _this__htmlCanvas = this._htmlCanvas, clientWidth = _this__htmlCanvas.clientWidth, clientHeight = _this__htmlCanvas.clientHeight;
      var _this__canvas = this._canvas, width = _this__canvas.width, height = _this__canvas.height;
      for (var i2 = lastIndex; i2 >= 0; i2--) {
        var pointer = pointers[i2];
        pointer._upList.length = pointer._downList.length = 0;
        updatePointer(frameCount, pointer, clientRect, clientWidth, clientHeight, width, height);
        this._buttons |= pointer.pressedButtons;
      }
    }
  };
  _proto._onFocus = function _onFocus() {
    if (!this._hadListener) {
      var _this = this, htmlCanvas = _this._htmlCanvas, onPointerEvent = _this._onPointerEvent;
      htmlCanvas.addEventListener("pointerdown", onPointerEvent);
      htmlCanvas.addEventListener("pointerup", onPointerEvent);
      htmlCanvas.addEventListener("pointerleave", onPointerEvent);
      htmlCanvas.addEventListener("pointermove", onPointerEvent);
      htmlCanvas.addEventListener("pointercancel", onPointerEvent);
      this._hadListener = true;
    }
  };
  _proto._onBlur = function _onBlur() {
    if (this._hadListener) {
      var _this = this, htmlCanvas = _this._htmlCanvas, onPointerEvent = _this._onPointerEvent;
      htmlCanvas.removeEventListener("pointerdown", onPointerEvent);
      htmlCanvas.removeEventListener("pointerup", onPointerEvent);
      htmlCanvas.removeEventListener("pointerleave", onPointerEvent);
      htmlCanvas.removeEventListener("pointermove", onPointerEvent);
      htmlCanvas.removeEventListener("pointercancel", onPointerEvent);
      this._hadListener = false;
      this._downList.length = 0;
      this._upList.length = 0;
      var _this1 = this, pointers = _this1._pointers;
      for (var i = pointers.length - 1; i >= 0; i--) {
        pointers[i].phase = PointerPhase.Leave;
      }
      pointers.length = 0;
    }
  };
  _proto._destroy = function _destroy() {
    if (this._hadListener) {
      var _this = this, htmlCanvas = _this._htmlCanvas, onPointerEvent = _this._onPointerEvent;
      htmlCanvas.removeEventListener("pointerdown", onPointerEvent);
      htmlCanvas.removeEventListener("pointerup", onPointerEvent);
      htmlCanvas.removeEventListener("pointerleave", onPointerEvent);
      htmlCanvas.removeEventListener("pointermove", onPointerEvent);
      htmlCanvas.removeEventListener("pointercancel", onPointerEvent);
      this._hadListener = false;
    }
    this._pointerPool.length = 0;
    this._pointers.length = 0;
    this._downList.length = 0;
    this._upList.length = 0;
    this._htmlCanvas = null;
    this._engine = null;
  };
  _proto._onPointerEvent = function _onPointerEvent(evt) {
    evt.type === "pointerdown" && this._htmlCanvas.focus();
    this._nativeEvents.push(evt);
  };
  _proto._getIndexByPointerID = function _getIndexByPointerID(pointerId) {
    var _this = this, pointers = _this._pointers;
    for (var i = pointers.length - 1; i >= 0; i--) {
      if (pointers[i]._uniqueID === pointerId) {
        return i;
      }
    }
    return -1;
  };
  _proto._getPointer = function _getPointer(pointerId) {
    var _this = this, pointers = _this._pointers;
    var index = this._getIndexByPointerID(pointerId);
    if (index >= 0) {
      return pointers[index];
    } else {
      var lastCount = pointers.length;
      if (lastCount === 0 || this._multiPointerEnabled) {
        var _this1 = this, pointerPool = _this1._pointerPool;
        var i = 0;
        for (; i < lastCount; i++) {
          if (pointers[i].id > i) {
            break;
          }
        }
        var pointer = pointerPool[i];
        if (!pointer) {
          pointer = pointerPool[i] = new Pointer(i);
        }
        pointer._uniqueID = pointerId;
        pointers.splice(i, 0, pointer);
        return pointer;
      } else {
        return null;
      }
    }
  };
  _proto._pointerRayCast = function _pointerRayCast(normalizedX, normalizedY) {
    var point = PointerManager2._tempPoint, ray = PointerManager2._tempRay, hitResult = PointerManager2._tempHitResult;
    var _this__engine_sceneManager_activeScene = this._engine.sceneManager.activeScene, cameras = _this__engine_sceneManager_activeScene._activeCameras;
    for (var i = cameras.length - 1; i >= 0; i--) {
      var camera = cameras[i];
      if (!camera.enabled || camera.renderTarget) {
        continue;
      }
      var _camera_viewport = camera.viewport, vpX = _camera_viewport.x, vpY = _camera_viewport.y, vpW = _camera_viewport.z, vpH = _camera_viewport.w;
      if (normalizedX >= vpX && normalizedY >= vpY && normalizedX - vpX <= vpW && normalizedY - vpY <= vpH) {
        point.set((normalizedX - vpX) / vpW, (normalizedY - vpY) / vpH);
        if (this._engine.physicsManager.raycast(camera.viewportPointToRay(point, ray), Number.MAX_VALUE, camera.cullingMask, hitResult)) {
          return hitResult.entity;
        } else if (camera.clearFlags & CameraClearFlags.Color) {
          return null;
        }
      }
    }
  };
  _proto._updatePointerWithPhysics = function _updatePointerWithPhysics(frameCount, pointer, rect, clientW, clientH, canvasW, canvasH) {
    var events = pointer._events, position = pointer.position;
    var length2 = events.length;
    if (length2 > 0) {
      var _this = this, _upList = _this._upList, _upMap = _this._upMap, _downList = _this._downList, _downMap = _this._downMap;
      var latestEvent = events[length2 - 1];
      var normalizedX = (latestEvent.clientX - rect.left) / clientW;
      var normalizedY = (latestEvent.clientY - rect.top) / clientH;
      var currX = normalizedX * canvasW;
      var currY = normalizedY * canvasH;
      pointer.deltaPosition.set(currX - position.x, currY - position.y);
      position.set(currX, currY);
      pointer._firePointerDrag();
      var rayCastEntity = this._pointerRayCast(normalizedX, normalizedY);
      pointer._firePointerExitAndEnter(rayCastEntity);
      for (var i = 0; i < length2; i++) {
        var event = events[i];
        var button = event.button;
        pointer.button = _pointerDec2BinMap[button] || PointerButton.None;
        pointer.pressedButtons = event.buttons;
        switch (event.type) {
          case "pointerdown":
            _downList.add(button);
            _downMap[button] = frameCount;
            pointer._downList.add(button);
            pointer._downMap[button] = frameCount;
            pointer.phase = PointerPhase.Down;
            pointer._firePointerDown(rayCastEntity);
            break;
          case "pointerup":
            _upList.add(button);
            _upMap[button] = frameCount;
            pointer._upList.add(button);
            pointer._upMap[button] = frameCount;
            pointer.phase = PointerPhase.Up;
            pointer._firePointerUpAndClick(rayCastEntity);
            break;
          case "pointermove":
            pointer.phase = PointerPhase.Move;
            break;
          case "pointerleave":
          case "pointercancel":
            pointer.phase = PointerPhase.Leave;
            pointer._firePointerExitAndEnter(null);
        }
      }
      pointer._events.length = 0;
    } else {
      pointer.deltaPosition.set(0, 0);
      pointer.phase = PointerPhase.Stationary;
      pointer._firePointerDrag();
      pointer._firePointerExitAndEnter(this._pointerRayCast(position.x / canvasW, position.y / canvasH));
    }
  };
  _proto._updatePointerWithoutPhysics = function _updatePointerWithoutPhysics(frameCount, pointer, rect, clientW, clientH, canvasW, canvasH) {
    var events = pointer._events;
    var length2 = events.length;
    if (length2 > 0) {
      var position = pointer.position;
      var latestEvent = events[length2 - 1];
      var currX = (latestEvent.clientX - rect.left) / clientW * canvasW;
      var currY = (latestEvent.clientY - rect.top) / clientH * canvasH;
      pointer.deltaPosition.set(currX - position.x, currY - position.y);
      position.set(currX, currY);
      pointer.button = _pointerDec2BinMap[latestEvent.button] || PointerButton.None;
      pointer.pressedButtons = latestEvent.buttons;
      var _this = this, _upList = _this._upList, _upMap = _this._upMap, _downList = _this._downList, _downMap = _this._downMap;
      for (var i = 0; i < length2; i++) {
        var button = events[i].button;
        switch (events[i].type) {
          case "pointerdown":
            _downList.add(button);
            _downMap[button] = frameCount;
            pointer._downList.add(button);
            pointer._downMap[button] = frameCount;
            pointer.phase = PointerPhase.Down;
            break;
          case "pointerup":
            _upList.add(button);
            _upMap[button] = frameCount;
            pointer._upList.add(button);
            pointer._upMap[button] = frameCount;
            pointer.phase = PointerPhase.Up;
            break;
          case "pointermove":
            pointer.phase = PointerPhase.Move;
            break;
          case "pointerleave":
          case "pointercancel":
            pointer.phase = PointerPhase.Leave;
        }
      }
      pointer._events.length = 0;
    } else {
      pointer.deltaPosition.set(0, 0);
      pointer.phase = PointerPhase.Stationary;
    }
  };
  return PointerManager2;
}();
(function() {
  PointerManager._tempRay = new Ray();
})();
(function() {
  PointerManager._tempPoint = new Vector2();
})();
(function() {
  PointerManager._tempHitResult = new HitResult();
})();
var WheelManager = function() {
  function WheelManager2(htmlCanvas) {
    this._delta = new Vector3();
    this._nativeEvents = [];
    this._onWheelEvent = this._onWheelEvent.bind(this);
    htmlCanvas.addEventListener("wheel", this._onWheelEvent);
    this._canvas = htmlCanvas;
    this._hadListener = true;
  }
  var _proto = WheelManager2.prototype;
  _proto._update = function _update() {
    var _this = this, delta = _this._delta;
    delta.set(0, 0, 0);
    var _this1 = this, nativeEvents = _this1._nativeEvents;
    if (nativeEvents.length > 0) {
      for (var i = nativeEvents.length - 1; i >= 0; i--) {
        var evt = nativeEvents[i];
        delta.x += evt.deltaX;
        delta.y += evt.deltaY;
        delta.z += evt.deltaZ;
      }
      nativeEvents.length = 0;
    }
  };
  _proto._onFocus = function _onFocus() {
    if (!this._hadListener) {
      this._canvas.addEventListener("wheel", this._onWheelEvent);
      this._hadListener = true;
    }
  };
  _proto._onBlur = function _onBlur() {
    if (this._hadListener) {
      this._canvas.removeEventListener("wheel", this._onWheelEvent);
      this._nativeEvents.length = 0;
      this._delta.set(0, 0, 0);
      this._hadListener = false;
    }
  };
  _proto._destroy = function _destroy() {
    if (this._hadListener) {
      this._canvas.removeEventListener("wheel", this._onWheelEvent);
      this._hadListener = false;
    }
    this._nativeEvents = null;
  };
  _proto._onWheelEvent = function _onWheelEvent(evt) {
    evt.cancelable && evt.preventDefault();
    this._nativeEvents.push(evt);
  };
  return WheelManager2;
}();
var InputManager = function() {
  function InputManager2(engine) {
    this._initialized = false;
    this._curFrameCount = 0;
    var canvas = engine._canvas._webCanvas;
    if (typeof OffscreenCanvas === "undefined" || !_instanceof(canvas, OffscreenCanvas)) {
      this._wheelManager = new WheelManager(canvas);
      this._pointerManager = new PointerManager(engine, canvas);
      this._keyboardManager = new KeyboardManager(canvas);
      this._onBlur = this._onBlur.bind(this);
      window.addEventListener("blur", this._onBlur);
      this._onFocus = this._onFocus.bind(this);
      window.addEventListener("focus", this._onFocus);
      this._initialized = true;
    }
  }
  var _proto = InputManager2.prototype;
  _proto.isKeyHeldDown = function isKeyHeldDown(key) {
    if (this._initialized) {
      if (key === void 0) {
        return this._keyboardManager._curFrameHeldDownList.length > 0;
      } else {
        return this._keyboardManager._curHeldDownKeyToIndexMap[key] != null;
      }
    } else {
      return false;
    }
  };
  _proto.isKeyDown = function isKeyDown(key) {
    if (this._initialized) {
      if (key === void 0) {
        return this._keyboardManager._curFrameDownList.length > 0;
      } else {
        return this._keyboardManager._downKeyToFrameCountMap[key] === this._curFrameCount;
      }
    } else {
      return false;
    }
  };
  _proto.isKeyUp = function isKeyUp(key) {
    if (this._initialized) {
      if (key === void 0) {
        return this._keyboardManager._curFrameUpList.length > 0;
      } else {
        return this._keyboardManager._upKeyToFrameCountMap[key] === this._curFrameCount;
      }
    } else {
      return false;
    }
  };
  _proto.isPointerHeldDown = function isPointerHeldDown(pointerButton) {
    if (this._initialized) {
      if (pointerButton === void 0) {
        return this._pointerManager._buttons !== 0;
      } else {
        return (this._pointerManager._buttons & pointerButton) !== 0;
      }
    } else {
      return false;
    }
  };
  _proto.isPointerDown = function isPointerDown(pointerButton) {
    if (this._initialized) {
      if (pointerButton === void 0) {
        return this._pointerManager._downList.length > 0;
      } else {
        return this._pointerManager._downMap[_pointerBin2DecMap[pointerButton]] === this._curFrameCount;
      }
    } else {
      return false;
    }
  };
  _proto.isPointerUp = function isPointerUp(pointerButton) {
    if (this._initialized) {
      if (pointerButton === void 0) {
        return this._pointerManager._upList.length > 0;
      } else {
        return this._pointerManager._upMap[_pointerBin2DecMap[pointerButton]] === this._curFrameCount;
      }
    } else {
      return false;
    }
  };
  _proto._update = function _update() {
    if (this._initialized) {
      ++this._curFrameCount;
      this._wheelManager._update();
      this._pointerManager._update(this._curFrameCount);
      this._keyboardManager._update(this._curFrameCount);
    }
  };
  _proto._destroy = function _destroy() {
    if (this._initialized) {
      window.removeEventListener("blur", this._onBlur);
      window.removeEventListener("focus", this._onFocus);
      this._wheelManager._destroy();
      this._pointerManager._destroy();
      this._keyboardManager._destroy();
    }
  };
  _proto._onBlur = function _onBlur() {
    this._wheelManager._onBlur();
    this._pointerManager._onBlur();
    this._keyboardManager._onBlur();
  };
  _proto._onFocus = function _onFocus() {
    this._wheelManager._onFocus();
    this._pointerManager._onFocus();
    this._keyboardManager._onFocus();
  };
  _create_class2(InputManager2, [
    {
      key: "pointers",
      get: (
        /**
        * Pointer list.
        */
        function get() {
          return this._initialized ? this._pointerManager._pointers : [];
        }
      )
    },
    {
      key: "multiPointerEnabled",
      get: (
        /**
        *  Whether to handle multi-pointer.
        */
        function get() {
          return this._initialized ? this._pointerManager._multiPointerEnabled : false;
        }
      ),
      set: function set(enabled) {
        this._initialized && (this._pointerManager._multiPointerEnabled = enabled);
      }
    },
    {
      key: "wheelDelta",
      get: (
        /**
        * Get the change of the scroll wheel on the x-axis.
        * @returns Change value
        */
        function get() {
          return this._initialized ? this._wheelManager._delta : null;
        }
      )
    }
  ]);
  return InputManager2;
}();
var ShadowCascadesMode;
(function(ShadowCascadesMode2) {
  ShadowCascadesMode2[ShadowCascadesMode2[
    /** No cascades */
    "NoCascades"
  ] = 1] = "NoCascades";
  ShadowCascadesMode2[ShadowCascadesMode2[
    /** Two cascades */
    "TwoCascades"
  ] = 2] = "TwoCascades";
  ShadowCascadesMode2[ShadowCascadesMode2[
    /** Four cascades */
    "FourCascades"
  ] = 4] = "FourCascades";
})(ShadowCascadesMode || (ShadowCascadesMode = {}));
var ShadowResolution;
(function(ShadowResolution2) {
  ShadowResolution2[ShadowResolution2[
    /** Low shadow map resolution. */
    "Low"
  ] = 0] = "Low";
  ShadowResolution2[ShadowResolution2[
    /** Medium shadow map resolution. */
    "Medium"
  ] = 1] = "Medium";
  ShadowResolution2[ShadowResolution2[
    /**  High shadow map resolution. */
    "High"
  ] = 2] = "High";
  ShadowResolution2[ShadowResolution2[
    /** Very high shadow map resolution. */
    "VeryHigh"
  ] = 3] = "VeryHigh";
})(ShadowResolution || (ShadowResolution = {}));
var ShadowType;
(function(ShadowType2) {
  ShadowType2[ShadowType2[
    /** Disable Shadows. */
    "None"
  ] = 0] = "None";
  ShadowType2[ShadowType2[
    /** Hard Shadows Only. */
    "Hard"
  ] = 1] = "Hard";
  ShadowType2[ShadowType2[
    /** Cast "soft" shadows with low range. */
    "SoftLow"
  ] = 2] = "SoftLow";
  ShadowType2[ShadowType2[
    /** Cast "soft" shadows with large range. */
    "SoftHigh"
  ] = 3] = "SoftHigh";
})(ShadowType || (ShadowType = {}));
var RenderQueueType;
(function(RenderQueueType2) {
  RenderQueueType2[RenderQueueType2[
    /** Opaque queue. */
    "Opaque"
  ] = 0] = "Opaque";
  RenderQueueType2[RenderQueueType2[
    /** Opaque queue, alpha cutoff. */
    "AlphaTest"
  ] = 1] = "AlphaTest";
  RenderQueueType2[RenderQueueType2[
    /** Transparent queue, rendering from back to front to ensure correct rendering of transparent objects. */
    "Transparent"
  ] = 2] = "Transparent";
})(RenderQueueType || (RenderQueueType = {}));
var BlendFactor;
(function(BlendFactor2) {
  BlendFactor2[BlendFactor2[
    /** (0, 0, 0, 0)*/
    "Zero"
  ] = 0] = "Zero";
  BlendFactor2[BlendFactor2[
    /** (1, 1, 1, 1)*/
    "One"
  ] = 1] = "One";
  BlendFactor2[BlendFactor2[
    /** (Rs, Gs, Bs, As) */
    "SourceColor"
  ] = 2] = "SourceColor";
  BlendFactor2[BlendFactor2[
    /** (1 - Rs, 1 - Gs, 1 - Bs, 1 - As)*/
    "OneMinusSourceColor"
  ] = 3] = "OneMinusSourceColor";
  BlendFactor2[BlendFactor2[
    /** (Rd, Gd, Bd, Ad)*/
    "DestinationColor"
  ] = 4] = "DestinationColor";
  BlendFactor2[BlendFactor2[
    /** (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad)*/
    "OneMinusDestinationColor"
  ] = 5] = "OneMinusDestinationColor";
  BlendFactor2[BlendFactor2[
    /** (As, As, As, As)*/
    "SourceAlpha"
  ] = 6] = "SourceAlpha";
  BlendFactor2[BlendFactor2[
    /** (1 - As, 1 - As, 1 - As, 1 - As)*/
    "OneMinusSourceAlpha"
  ] = 7] = "OneMinusSourceAlpha";
  BlendFactor2[BlendFactor2[
    /** (Ad, Ad, Ad, Ad)*/
    "DestinationAlpha"
  ] = 8] = "DestinationAlpha";
  BlendFactor2[BlendFactor2[
    /** (1 - Ad, 1 - Ad, 1 - Ad, 1 - Ad)*/
    "OneMinusDestinationAlpha"
  ] = 9] = "OneMinusDestinationAlpha";
  BlendFactor2[BlendFactor2[
    /** (min(As, 1 - Ad), min(As, 1 - Ad), min(As, 1 - Ad), 10)*/
    "SourceAlphaSaturate"
  ] = 10] = "SourceAlphaSaturate";
  BlendFactor2[BlendFactor2[
    /** (Rc, Gc, Bc, Ac)*/
    "BlendColor"
  ] = 11] = "BlendColor";
  BlendFactor2[BlendFactor2[
    /** (1 - Rc, 1 - Gc, 1 - Bc, 1 - Ac)*/
    "OneMinusBlendColor"
  ] = 12] = "OneMinusBlendColor";
})(BlendFactor || (BlendFactor = {}));
var BlendOperation;
(function(BlendOperation2) {
  BlendOperation2[BlendOperation2[
    /** src + dst. */
    "Add"
  ] = 0] = "Add";
  BlendOperation2[BlendOperation2[
    /** src - dst. */
    "Subtract"
  ] = 1] = "Subtract";
  BlendOperation2[BlendOperation2[
    /** dst - src. */
    "ReverseSubtract"
  ] = 2] = "ReverseSubtract";
  BlendOperation2[BlendOperation2[
    /** Minimum of source and destination. */
    "Min"
  ] = 3] = "Min";
  BlendOperation2[BlendOperation2[
    /** Maximum of source and destination. */
    "Max"
  ] = 4] = "Max";
})(BlendOperation || (BlendOperation = {}));
var ColorWriteMask;
(function(ColorWriteMask2) {
  ColorWriteMask2[ColorWriteMask2[
    /** Do not write to any channel. */
    "None"
  ] = 0] = "None";
  ColorWriteMask2[ColorWriteMask2[
    /** Write to the red channel. */
    "Red"
  ] = 1] = "Red";
  ColorWriteMask2[ColorWriteMask2[
    /** Write to the green channel. */
    "Green"
  ] = 2] = "Green";
  ColorWriteMask2[ColorWriteMask2[
    /** Write to the blue channel. */
    "Blue"
  ] = 4] = "Blue";
  ColorWriteMask2[ColorWriteMask2[
    /** Write to the alpha channel. */
    "Alpha"
  ] = 8] = "Alpha";
  ColorWriteMask2[ColorWriteMask2[
    /** Write to all channel. */
    "All"
  ] = 15] = "All";
})(ColorWriteMask || (ColorWriteMask = {}));
var CompareFunction;
(function(CompareFunction2) {
  CompareFunction2[CompareFunction2[
    /** never pass. */
    "Never"
  ] = 0] = "Never";
  CompareFunction2[CompareFunction2[
    /** pass if the incoming value is less than the depth/stencil buffer value. */
    "Less"
  ] = 1] = "Less";
  CompareFunction2[CompareFunction2[
    /** pass if the incoming value equals the depth/stencil buffer value. */
    "Equal"
  ] = 2] = "Equal";
  CompareFunction2[CompareFunction2[
    /** pass if the incoming value is less than or equal to the depth/stencil buffer value. */
    "LessEqual"
  ] = 3] = "LessEqual";
  CompareFunction2[CompareFunction2[
    /** pass if the incoming value is greater than the depth/stencil buffer value. */
    "Greater"
  ] = 4] = "Greater";
  CompareFunction2[CompareFunction2[
    /** pass if the incoming value is not equal to the depth/stencil buffer value. */
    "NotEqual"
  ] = 5] = "NotEqual";
  CompareFunction2[CompareFunction2[
    /** pass if the incoming value is greater than or equal to the depth/stencil buffer value. */
    "GreaterEqual"
  ] = 6] = "GreaterEqual";
  CompareFunction2[CompareFunction2[
    /** always pass. */
    "Always"
  ] = 7] = "Always";
})(CompareFunction || (CompareFunction = {}));
var CullMode;
(function(CullMode2) {
  CullMode2[CullMode2[
    /** Disable culling. */
    "Off"
  ] = 0] = "Off";
  CullMode2[CullMode2[
    /** cut the front-face of the polygons. */
    "Front"
  ] = 1] = "Front";
  CullMode2[CullMode2[
    /** cut the back-face of the polygons. */
    "Back"
  ] = 2] = "Back";
})(CullMode || (CullMode = {}));
var ShaderPropertyType;
(function(ShaderPropertyType2) {
  ShaderPropertyType2[ShaderPropertyType2[
    /** Float type. */
    "Float"
  ] = 0] = "Float";
  ShaderPropertyType2[ShaderPropertyType2[
    /** Int type. */
    "Int"
  ] = 1] = "Int";
  ShaderPropertyType2[ShaderPropertyType2[
    /** Vector2 type. */
    "Vector2"
  ] = 2] = "Vector2";
  ShaderPropertyType2[ShaderPropertyType2[
    /** Vector3 type. */
    "Vector3"
  ] = 3] = "Vector3";
  ShaderPropertyType2[ShaderPropertyType2[
    /** Vector4 type. */
    "Vector4"
  ] = 4] = "Vector4";
  ShaderPropertyType2[ShaderPropertyType2[
    /** Matrix type. */
    "Matrix"
  ] = 5] = "Matrix";
  ShaderPropertyType2[ShaderPropertyType2[
    /** Color type. */
    "Color"
  ] = 6] = "Color";
  ShaderPropertyType2[ShaderPropertyType2[
    /** Texture type. */
    "Texture"
  ] = 7] = "Texture";
  ShaderPropertyType2[ShaderPropertyType2[
    /** Float array type. */
    "FloatArray"
  ] = 8] = "FloatArray";
  ShaderPropertyType2[ShaderPropertyType2[
    /** Int array type. */
    "IntArray"
  ] = 9] = "IntArray";
  ShaderPropertyType2[ShaderPropertyType2[
    /** Texture array type. */
    "TextureArray"
  ] = 10] = "TextureArray";
})(ShaderPropertyType || (ShaderPropertyType = {}));
var StencilOperation;
(function(StencilOperation2) {
  StencilOperation2[StencilOperation2[
    /** Keeps the current value. */
    "Keep"
  ] = 0] = "Keep";
  StencilOperation2[StencilOperation2[
    /** Sets the stencil buffer value to 0. */
    "Zero"
  ] = 1] = "Zero";
  StencilOperation2[StencilOperation2[
    /** Sets the stencil buffer value to the reference value. */
    "Replace"
  ] = 2] = "Replace";
  StencilOperation2[StencilOperation2[
    /** Increments the current stencil buffer value. Clamps to the maximum representable unsigned value. */
    "IncrementSaturate"
  ] = 3] = "IncrementSaturate";
  StencilOperation2[StencilOperation2[
    /** Decrements the current stencil buffer value. Clamps to 0. */
    "DecrementSaturate"
  ] = 4] = "DecrementSaturate";
  StencilOperation2[StencilOperation2[
    /** Inverts the current stencil buffer value bitwise. */
    "Invert"
  ] = 5] = "Invert";
  StencilOperation2[StencilOperation2[
    /** Increments the current stencil buffer value. Wraps stencil buffer value to zero when incrementing the maximum representable unsigned value. */
    "IncrementWrap"
  ] = 6] = "IncrementWrap";
  StencilOperation2[StencilOperation2[
    /** Decrements the current stencil buffer value. Wraps stencil buffer value to the maximum representable unsigned value when decrementing a stencil buffer value of 0. */
    "DecrementWrap"
  ] = 7] = "DecrementWrap";
})(StencilOperation || (StencilOperation = {}));
var ShaderMacro = function ShaderMacro2(name, value, maskIndex, maskValue) {
  this.name = name;
  this._maskIndex = maskIndex;
  this._maskValue = maskValue;
  this.value = value;
  var macroNameIDMap = ShaderMacro2._macroNameIdMap;
  var nameID = macroNameIDMap[name];
  if (macroNameIDMap[name] === void 0) {
    macroNameIDMap[name] = nameID = ShaderMacro2._macroNameCounter++;
  }
  this._nameId = nameID;
};
(function() {
  ShaderMacro._macroNameIdMap = /* @__PURE__ */ Object.create(null);
})();
(function() {
  ShaderMacro._macroNameCounter = 0;
})();
var ShaderMacroCollection = function() {
  function ShaderMacroCollection2() {
    this._mask = [];
    this._length = 0;
  }
  var _proto = ShaderMacroCollection2.prototype;
  _proto.enable = function enable2(macro) {
    var index = macro._maskIndex;
    var size = index + 1;
    var mask = this._mask;
    var maskStart = this._length;
    if (maskStart < size) {
      mask.length < size && (mask.length = size);
      for (; maskStart < index; maskStart++) {
        mask[maskStart] = 0;
      }
      mask[index] = macro._maskValue;
      this._length = size;
    } else {
      mask[index] |= macro._maskValue;
    }
  };
  _proto.disable = function disable2(macro) {
    var index = macro._maskIndex;
    var mask = this._mask;
    var endIndex = this._length - 1;
    if (index > endIndex) {
      return;
    }
    var newValue = mask[index] & ~macro._maskValue;
    if (index == endIndex && newValue === 0) {
      this._length--;
    } else {
      mask[index] = newValue;
    }
  };
  _proto.unionCollection = function unionCollection(macroCollection) {
    var addMask = macroCollection._mask;
    var addSize = macroCollection._length;
    var mask = this._mask;
    var maskSize = this._length;
    if (maskSize < addSize) {
      mask.length < addSize && (mask.length = addSize);
      var i = 0;
      for (; i < maskSize; i++) {
        mask[i] |= addMask[i];
      }
      for (; i < addSize; i++) {
        mask[i] = addMask[i];
      }
      this._length = addSize;
    } else {
      for (var i1 = 0; i1 < addSize; i1++) {
        mask[i1] |= addMask[i1];
      }
    }
  };
  _proto.complementaryCollection = function complementaryCollection(macroCollection) {
    var removeMask = macroCollection._mask;
    var mask = this._mask;
    var endIndex = this._length - 1;
    var i = Math.min(macroCollection._length - 1, endIndex);
    for (; i >= 0; i--) {
      var newValue = mask[i] & ~removeMask[i];
      if (i == endIndex && newValue === 0) {
        endIndex--;
        this._length--;
      } else {
        mask[i] = newValue;
      }
    }
  };
  _proto.intersectionCollection = function intersectionCollection(macroCollection) {
    var unionMask = macroCollection._mask;
    var mask = this._mask;
    for (var i = this._length - 1; i >= 0; i--) {
      var value = mask[i] & unionMask[i];
      if (value == 0 && i == this._length - 1) {
        this._length--;
      } else {
        mask[i] = value;
      }
    }
  };
  _proto.isEnable = function isEnable(macro) {
    var index = macro._maskIndex;
    if (index >= this._length) {
      return false;
    }
    return (this._mask[index] & macro._maskValue) !== 0;
  };
  _proto.clear = function clear() {
    this._length = 0;
  };
  ShaderMacroCollection2.unionCollection = function unionCollection(left, right, out) {
    var outMask = out._mask;
    var minSize, maxSize;
    var minMask, maxMask;
    if (left._length < right._length) {
      minSize = left._length;
      maxSize = right._length;
      minMask = left._mask;
      maxMask = right._mask;
    } else {
      minSize = right._length;
      maxSize = left._length;
      minMask = right._mask;
      maxMask = left._mask;
    }
    var i = 0;
    outMask.length < maxSize && (outMask.length = maxSize);
    for (; i < minSize; i++) {
      outMask[i] = minMask[i] | maxMask[i];
    }
    for (; i < maxSize; i++) {
      outMask[i] = maxMask[i];
    }
    out._length = maxSize;
  };
  return ShaderMacroCollection2;
}();
function _extends() {
  _extends = Object.assign || function assign(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source)
        if (Object.prototype.hasOwnProperty.call(source, key))
          target[key] = source[key];
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var camera_declare = "#define GLSLIFY 1\nuniform vec3 u_cameraPos;";
var common = "#define GLSLIFY 1\n#define PI 3.14159265359\n#define RECIPROCAL_PI 0.31830988618\n#define EPSILON 1e-6\n#define LOG2 1.442695\n#define saturate( a ) clamp( a, 0.0, 1.0 )\nfloat pow2(float x){return x*x;}vec4 RGBMToLinear(vec4 value,float maxRange){return vec4(value.rgb*value.a*maxRange,1.0);}vec4 gammaToLinear(vec4 srgbIn){return vec4(pow(srgbIn.rgb,vec3(2.2)),srgbIn.a);}vec4 linearToGamma(vec4 linearIn){return vec4(pow(linearIn.rgb,vec3(1.0/2.2)),linearIn.a);}\n#ifdef GRAPHICS_API_WEBGL2\n#define INVERSE_MAT(mat) inverse(mat)\n#else\nmat2 inverseMat(mat2 m){return mat2(m[1][1],-m[0][1],-m[1][0],m[0][0])/(m[0][0]*m[1][1]-m[0][1]*m[1][0]);}mat3 inverseMat(mat3 m){float a00=m[0][0],a01=m[0][1],a02=m[0][2];float a10=m[1][0],a11=m[1][1],a12=m[1][2];float a20=m[2][0],a21=m[2][1],a22=m[2][2];float b01=a22*a11-a12*a21;float b11=-a22*a10+a12*a20;float b21=a21*a10-a11*a20;float det=a00*b01+a01*b11+a02*b21;return mat3(b01,(-a22*a01+a02*a21),(a12*a01-a02*a11),b11,(a22*a00-a02*a20),(-a12*a00+a02*a10),b21,(-a21*a00+a01*a20),(a11*a00-a01*a10))/det;}mat4 inverseMat(mat4 m){float a00=m[0][0],a01=m[0][1],a02=m[0][2],a03=m[0][3],a10=m[1][0],a11=m[1][1],a12=m[1][2],a13=m[1][3],a20=m[2][0],a21=m[2][1],a22=m[2][2],a23=m[2][3],a30=m[3][0],a31=m[3][1],a32=m[3][2],a33=m[3][3],b00=a00*a11-a01*a10,b01=a00*a12-a02*a10,b02=a00*a13-a03*a10,b03=a01*a12-a02*a11,b04=a01*a13-a03*a11,b05=a02*a13-a03*a12,b06=a20*a31-a21*a30,b07=a20*a32-a22*a30,b08=a20*a33-a23*a30,b09=a21*a32-a22*a31,b10=a21*a33-a23*a31,b11=a22*a33-a23*a32,det=b00*b11-b01*b10+b02*b09+b03*b08-b04*b07+b05*b06;return mat4(a11*b11-a12*b10+a13*b09,a02*b10-a01*b11-a03*b09,a31*b05-a32*b04+a33*b03,a22*b04-a21*b05-a23*b03,a12*b08-a10*b11-a13*b07,a00*b11-a02*b08+a03*b07,a32*b02-a30*b05-a33*b01,a20*b05-a22*b02+a23*b01,a10*b10-a11*b08+a13*b06,a01*b08-a00*b10-a03*b06,a30*b04-a31*b02+a33*b00,a21*b02-a20*b04-a23*b00,a11*b07-a10*b09-a12*b06,a00*b09-a01*b07+a02*b06,a31*b01-a30*b03-a32*b00,a20*b03-a21*b01+a22*b00)/det;}\n#define INVERSE_MAT(mat) inverseMat(mat)\n#endif\n";
var common_vert = "#define GLSLIFY 1\nattribute vec3 POSITION;\n#ifdef O3_HAS_UV\nattribute vec2 TEXCOORD_0;\n#endif\n#ifdef O3_HAS_UV1\nattribute vec2 TEXCOORD_1;\n#endif\n#ifdef O3_HAS_SKIN\nattribute vec4 JOINTS_0;attribute vec4 WEIGHTS_0;\n#ifdef O3_USE_JOINT_TEXTURE\nuniform sampler2D u_jointSampler;uniform float u_jointCount;mat4 getJointMatrix(sampler2D smp,float index){float base=index/u_jointCount;float hf=0.5/u_jointCount;float v=base+hf;vec4 m0=texture2D(smp,vec2(0.125,v));vec4 m1=texture2D(smp,vec2(0.375,v));vec4 m2=texture2D(smp,vec2(0.625,v));vec4 m3=texture2D(smp,vec2(0.875,v));return mat4(m0,m1,m2,m3);}\n#else\nuniform mat4 u_jointMatrix[O3_JOINTS_NUM];\n#endif\n#endif\n#ifdef O3_HAS_VERTEXCOLOR\nattribute vec4 COLOR_0;\n#endif\n#include <transform_declare>\n#include <camera_declare>\nuniform vec4 u_tilingOffset;\n#ifndef OMIT_NORMAL\n#ifdef O3_HAS_NORMAL\nattribute vec3 NORMAL;\n#endif\n#ifdef O3_HAS_TANGENT\nattribute vec4 TANGENT;\n#endif\n#endif\n";
var transform_declare = "#define GLSLIFY 1\nuniform mat4 u_localMat;uniform mat4 u_modelMat;uniform mat4 u_viewMat;uniform mat4 u_projMat;uniform mat4 u_MVMat;uniform mat4 u_MVPMat;uniform mat4 u_normalMat;";
var color_share = "#define GLSLIFY 1\n#ifdef O3_HAS_VERTEXCOLOR\nvarying vec4 v_color;\n#endif\n";
var FogFragmentDeclaration = "#define GLSLIFY 1\n#if OASIS_FOG_MODE != 0\nvarying vec3 v_positionVS;uniform vec4 oasis_FogColor;uniform vec4 oasis_FogParams;float ComputeFogIntensity(float fogDepth){\n#if OASIS_FOG_MODE == 1\nreturn clamp(fogDepth*oasis_FogParams.x+oasis_FogParams.y,0.0,1.0);\n#elif OASIS_FOG_MODE == 2\nreturn clamp(exp2(-fogDepth*oasis_FogParams.z),0.0,1.0);\n#elif OASIS_FOG_MODE == 3\nfloat factor=fogDepth*oasis_FogParams.w;return clamp(exp2(-factor*factor),0.0,1.0);\n#endif\n}\n#endif\n";
var FogVertexDeclaration = "#define GLSLIFY 1\n#if OASIS_FOG_MODE != 0\nvarying vec3 v_positionVS;\n#endif\n";
var normal_share = "#define GLSLIFY 1\n#ifndef OMIT_NORMAL\n#ifdef O3_HAS_NORMAL\nvarying vec3 v_normal;\n#if defined(O3_HAS_TANGENT) && ( defined(NORMALTEXTURE) || defined(HAS_CLEARCOATNORMALTEXTURE) )\nvarying mat3 v_TBN;\n#endif\n#endif\n#endif\n";
var uv_share = "#define GLSLIFY 1\nvarying vec2 v_uv;\n#ifdef O3_HAS_UV1\nvarying vec2 v_uv1;\n#endif\n";
var worldpos_share = "#define GLSLIFY 1\n#ifdef O3_NEED_WORLDPOS\nvarying vec3 v_pos;\n#endif\n";
var begin_normal_vert = "#define GLSLIFY 1\n#ifndef OMIT_NORMAL\n#ifdef O3_HAS_NORMAL\nvec3 normal=vec3(NORMAL);\n#endif\n#ifdef O3_HAS_TANGENT\nvec4 tangent=vec4(TANGENT);\n#endif\n#endif\n";
var begin_position_vert = "#define GLSLIFY 1\nvec4 position=vec4(POSITION,1.0);";
var blendShape_input = "#define GLSLIFY 1\n#ifdef OASIS_BLENDSHAPE\n#ifdef OASIS_BLENDSHAPE_TEXTURE\nuniform mediump sampler2DArray u_blendShapeTexture;uniform ivec3 u_blendShapeTextureInfo;uniform float u_blendShapeWeights[OASIS_BLENDSHAPE_COUNT];\n#else\nattribute vec3 POSITION_BS0;attribute vec3 POSITION_BS1;\n#if defined( OASIS_BLENDSHAPE_NORMAL ) && defined( OASIS_BLENDSHAPE_TANGENT )\nattribute vec3 NORMAL_BS0;attribute vec3 NORMAL_BS1;attribute vec3 TANGENT_BS0;attribute vec3 TANGENT_BS1;uniform float u_blendShapeWeights[2];\n#else\n#if defined( OASIS_BLENDSHAPE_NORMAL ) || defined( OASIS_BLENDSHAPE_TANGENT )\nattribute vec3 POSITION_BS2;attribute vec3 POSITION_BS3;\n#ifdef OASIS_BLENDSHAPE_NORMAL\nattribute vec3 NORMAL_BS0;attribute vec3 NORMAL_BS1;attribute vec3 NORMAL_BS2;attribute vec3 NORMAL_BS3;\n#endif\n#ifdef OASIS_BLENDSHAPE_TANGENT\nattribute vec3 TANGENT_BS0;attribute vec3 TANGENT_BS1;attribute vec3 TANGENT_BS2;attribute vec3 TANGENT_BS3;\n#endif\nuniform float u_blendShapeWeights[4];\n#else\nattribute vec3 POSITION_BS2;attribute vec3 POSITION_BS3;attribute vec3 POSITION_BS4;attribute vec3 POSITION_BS5;attribute vec3 POSITION_BS6;attribute vec3 POSITION_BS7;uniform float u_blendShapeWeights[8];\n#endif\n#endif\n#endif\n#ifdef OASIS_BLENDSHAPE_TEXTURE\nvec3 getBlendShapeVertexElement(int blendShapeIndex,int vertexElementIndex){int y=vertexElementIndex/u_blendShapeTextureInfo.y;int x=vertexElementIndex-y*u_blendShapeTextureInfo.y;ivec3 uv=ivec3(x,y,blendShapeIndex);return texelFetch(u_blendShapeTexture,uv,0).xyz;}\n#endif\n#endif\n";
var blendShape_vert = "#define GLSLIFY 1\n#ifdef OASIS_BLENDSHAPE\n#ifdef OASIS_BLENDSHAPE_TEXTURE\nint vertexOffset=gl_VertexID*u_blendShapeTextureInfo.x;for(int i=0;i<OASIS_BLENDSHAPE_COUNT;i++){int vertexElementOffset=vertexOffset;float weight=u_blendShapeWeights[i];position.xyz+=getBlendShapeVertexElement(i,vertexElementOffset)*weight;\n#ifndef OMIT_NORMAL\n#if defined( O3_HAS_NORMAL ) && defined( OASIS_BLENDSHAPE_NORMAL )\nvertexElementOffset+=1;normal+=getBlendShapeVertexElement(i,vertexElementOffset)*weight;\n#endif\n#if defined( O3_HAS_TANGENT ) && defined(OASIS_BLENDSHAPE_TANGENT) && ( defined(NORMALTEXTURE) || defined(HAS_CLEARCOATNORMALTEXTURE) )\nvertexElementOffset+=1;tangent.xyz+=getBlendShapeVertexElement(i,vertexElementOffset)*weight;\n#endif\n#endif\n}\n#else\nposition.xyz+=POSITION_BS0*u_blendShapeWeights[0];position.xyz+=POSITION_BS1*u_blendShapeWeights[1];\n#if defined( OASIS_BLENDSHAPE_NORMAL ) && defined( OASIS_BLENDSHAPE_TANGENT )\n#ifndef OMIT_NORMAL\n#ifdef O3_HAS_NORMAL\nnormal+=NORMAL_BS0*u_blendShapeWeights[0];normal+=NORMAL_BS1*u_blendShapeWeights[1];\n#endif\n#if defined( O3_HAS_TANGENT ) && ( defined(NORMALTEXTURE) || defined(HAS_CLEARCOATNORMALTEXTURE) )\ntangent.xyz+=TANGENT_BS0*u_blendShapeWeights[0];tangent.xyz+=TANGENT_BS1*u_blendShapeWeights[1];\n#endif\n#endif\n#else\n#if defined( OASIS_BLENDSHAPE_NORMAL ) || defined( OASIS_BLENDSHAPE_TANGENT )\n#ifndef OMIT_NORMAL\nposition.xyz+=POSITION_BS2*u_blendShapeWeights[2];position.xyz+=POSITION_BS3*u_blendShapeWeights[3];\n#if defined( OASIS_BLENDSHAPE_NORMAL ) && defined( O3_HAS_NORMAL )\nnormal+=NORMAL_BS0*u_blendShapeWeights[0];normal+=NORMAL_BS1*u_blendShapeWeights[1];normal+=NORMAL_BS2*u_blendShapeWeights[2];normal+=NORMAL_BS3*u_blendShapeWeights[3];\n#endif\n#if defined(OASIS_BLENDSHAPE_TANGENT) && defined( O3_HAS_TANGENT ) && ( defined(NORMALTEXTURE) || defined(HAS_CLEARCOATNORMALTEXTURE) )\ntangent.xyz+=TANGENT_BS0*u_blendShapeWeights[0];tangent.xyz+=TANGENT_BS1*u_blendShapeWeights[1];tangent.xyz+=TANGENT_BS2*u_blendShapeWeights[2];tangent.xyz+=TANGENT_BS3*u_blendShapeWeights[3];\n#endif\n#endif\n#else\nposition.xyz+=POSITION_BS2*u_blendShapeWeights[2];position.xyz+=POSITION_BS3*u_blendShapeWeights[3];position.xyz+=POSITION_BS4*u_blendShapeWeights[4];position.xyz+=POSITION_BS5*u_blendShapeWeights[5];position.xyz+=POSITION_BS6*u_blendShapeWeights[6];position.xyz+=POSITION_BS7*u_blendShapeWeights[7];\n#endif\n#endif\n#endif\n#endif\n";
var color_vert = "#define GLSLIFY 1\n#ifdef O3_HAS_VERTEXCOLOR\nv_color=COLOR_0;\n#endif\n";
var FogVertex = "#define GLSLIFY 1\n#if OASIS_FOG_MODE != 0\nvec4 positionVS=u_MVMat*position;v_positionVS=positionVS.xyz/positionVS.w;\n#endif\n";
var normal_vert = "#define GLSLIFY 1\n#ifndef OMIT_NORMAL\n#ifdef O3_HAS_NORMAL\nv_normal=normalize(mat3(u_normalMat)*normal);\n#if defined(O3_HAS_TANGENT) && ( defined(NORMALTEXTURE) || defined(HAS_CLEARCOATNORMALTEXTURE) )\nvec3 normalW=normalize(mat3(u_normalMat)*normal.xyz);vec3 tangentW=normalize(mat3(u_normalMat)*tangent.xyz);vec3 bitangentW=cross(normalW,tangentW)*tangent.w;v_TBN=mat3(tangentW,bitangentW,normalW);\n#endif\n#endif\n#endif\n";
var position_vert = "#define GLSLIFY 1\ngl_Position=u_MVPMat*position;";
var skinning_vert = "#define GLSLIFY 1\n#ifdef O3_HAS_SKIN\n#ifdef O3_USE_JOINT_TEXTURE\nmat4 skinMatrix=WEIGHTS_0.x*getJointMatrix(u_jointSampler,JOINTS_0.x)+WEIGHTS_0.y*getJointMatrix(u_jointSampler,JOINTS_0.y)+WEIGHTS_0.z*getJointMatrix(u_jointSampler,JOINTS_0.z)+WEIGHTS_0.w*getJointMatrix(u_jointSampler,JOINTS_0.w);\n#else\nmat4 skinMatrix=WEIGHTS_0.x*u_jointMatrix[int(JOINTS_0.x)]+WEIGHTS_0.y*u_jointMatrix[int(JOINTS_0.y)]+WEIGHTS_0.z*u_jointMatrix[int(JOINTS_0.z)]+WEIGHTS_0.w*u_jointMatrix[int(JOINTS_0.w)];\n#endif\nposition=skinMatrix*position;\n#if defined(O3_HAS_NORMAL) && !defined(OMIT_NORMAL)\nmat3 skinNormalMatrix=INVERSE_MAT(mat3(skinMatrix));normal=normal*skinNormalMatrix;\n#if defined(O3_HAS_TANGENT) && ( defined(NORMALTEXTURE) || defined(HAS_CLEARCOATNORMALTEXTURE) )\ntangent.xyz=tangent.xyz*skinNormalMatrix;\n#endif\n#endif\n#endif\n";
var uv_vert = "#define GLSLIFY 1\n#ifdef O3_HAS_UV\nv_uv=TEXCOORD_0;\n#else\nv_uv=vec2(0.,0.);\n#endif\n#ifdef O3_HAS_UV1\nv_uv1=TEXCOORD_1;\n#endif\n#ifdef O3_NEED_TILINGOFFSET\nv_uv=v_uv*u_tilingOffset.xy+u_tilingOffset.zw;\n#endif\n";
var worldpos_vert = "#define GLSLIFY 1\n#ifdef O3_NEED_WORLDPOS\nvec4 temp_pos=u_modelMat*position;v_pos=temp_pos.xyz/temp_pos.w;\n#endif\n";
var FogFragment = "#define GLSLIFY 1\n#if OASIS_FOG_MODE != 0\nfloat fogIntensity=ComputeFogIntensity(length(v_positionVS));gl_FragColor.rgb=mix(oasis_FogColor.rgb,gl_FragColor.rgb,fogIntensity);\n#endif\n";
var light_frag_define = "#define GLSLIFY 1\n#ifdef O3_DIRECT_LIGHT_COUNT\nstruct DirectLight{vec3 color;vec3 direction;};uniform ivec2 u_directLightCullingMask[O3_DIRECT_LIGHT_COUNT];uniform vec3 u_directLightColor[O3_DIRECT_LIGHT_COUNT];uniform vec3 u_directLightDirection[O3_DIRECT_LIGHT_COUNT];\n#endif\n#ifdef O3_POINT_LIGHT_COUNT\nstruct PointLight{vec3 color;vec3 position;float distance;};uniform ivec2 u_pointLightCullingMask[O3_POINT_LIGHT_COUNT];uniform vec3 u_pointLightColor[O3_POINT_LIGHT_COUNT];uniform vec3 u_pointLightPosition[O3_POINT_LIGHT_COUNT];uniform float u_pointLightDistance[O3_POINT_LIGHT_COUNT];\n#endif\n#ifdef O3_SPOT_LIGHT_COUNT\nstruct SpotLight{vec3 color;vec3 position;vec3 direction;float distance;float angleCos;float penumbraCos;};uniform ivec2 u_spotLightCullingMask[O3_SPOT_LIGHT_COUNT];uniform vec3 u_spotLightColor[O3_SPOT_LIGHT_COUNT];uniform vec3 u_spotLightPosition[O3_SPOT_LIGHT_COUNT];uniform vec3 u_spotLightDirection[O3_SPOT_LIGHT_COUNT];uniform float u_spotLightDistance[O3_SPOT_LIGHT_COUNT];uniform float u_spotLightAngleCos[O3_SPOT_LIGHT_COUNT];uniform float u_spotLightPenumbraCos[O3_SPOT_LIGHT_COUNT];\n#endif\nstruct EnvMapLight{vec3 diffuse;float mipMapLevel;float diffuseIntensity;float specularIntensity;};uniform EnvMapLight u_envMapLight;uniform ivec4 oasis_RendererLayer;\n#ifdef O3_USE_SH\nuniform vec3 u_env_sh[9];\n#endif\n#ifdef O3_USE_SPECULAR_ENV\nuniform samplerCube u_env_specularSampler;\n#endif\n#ifndef GRAPHICS_API_WEBGL2\nbool isBitSet(float value,float mask,float bitIndex){return mod(floor(value/pow(2.0,bitIndex)),2.0)==1.0&&mod(floor(mask/pow(2.0,bitIndex)),2.0)==1.0;}\n#endif\nbool isRendererCulledByLight(ivec2 rendererLayer,ivec2 lightCullingMask){\n#ifdef GRAPHICS_API_WEBGL2\nreturn!((rendererLayer.x&lightCullingMask.x)!=0||(rendererLayer.y&lightCullingMask.y)!=0);\n#else\nfor(int i=0;i<16;i++){if(isBitSet(float(rendererLayer.x),float(lightCullingMask.x),float(i))||isBitSet(float(rendererLayer.y),float(lightCullingMask.y),float(i))){return false;}}return true;\n#endif\n}";
var mobile_material_frag = "#define GLSLIFY 1\nuniform vec4 u_emissiveColor;uniform vec4 u_baseColor;uniform vec4 u_specularColor;uniform float u_shininess;uniform float u_normalIntensity;uniform float u_alphaCutoff;\n#ifdef EMISSIVETEXTURE\nuniform sampler2D u_emissiveTexture;\n#endif\n#ifdef BASETEXTURE\nuniform sampler2D u_baseTexture;\n#endif\n#ifdef O3_SPECULAR_TEXTURE\nuniform sampler2D u_specularTexture;\n#endif\n#ifdef NORMALTEXTURE\nuniform sampler2D u_normalTexture;\n#endif\n";
var begin_mobile_frag = "#define GLSLIFY 1\nvec4 ambient=vec4(0.0);vec4 emission=u_emissiveColor;vec4 diffuse=u_baseColor;vec4 specular=u_specularColor;\n#ifdef EMISSIVETEXTURE\nvec4 emissiveTextureColor=texture2D(u_emissiveTexture,v_uv);\n#ifndef OASIS_COLORSPACE_GAMMA\nemissiveTextureColor=gammaToLinear(emissiveTextureColor);\n#endif\nemission*=emissiveTextureColor;\n#endif\n#ifdef BASETEXTURE\nvec4 diffuseTextureColor=texture2D(u_baseTexture,v_uv);\n#ifndef OASIS_COLORSPACE_GAMMA\ndiffuseTextureColor=gammaToLinear(diffuseTextureColor);\n#endif\ndiffuse*=diffuseTextureColor;\n#endif\n#ifdef O3_HAS_VERTEXCOLOR\ndiffuse*=v_color;\n#endif\n#ifdef O3_SPECULAR_TEXTURE\nvec4 specularTextureColor=texture2D(u_specularTexture,v_uv);\n#ifndef OASIS_COLORSPACE_GAMMA\nspecularTextureColor=gammaToLinear(specularTextureColor);\n#endif\nspecular*=specularTextureColor;\n#endif\nambient=vec4(u_envMapLight.diffuse*u_envMapLight.diffuseIntensity,1.0)*diffuse;";
var begin_viewdir_frag = "#define GLSLIFY 1\n#ifdef O3_NEED_WORLDPOS\nvec3 V=normalize(u_cameraPos-v_pos);\n#endif\n";
var mobile_blinnphong_frag = "#define GLSLIFY 1\n#ifdef NORMALTEXTURE\nmat3 tbn=getTBN(gl_FrontFacing);vec3 N=getNormalByNormalTexture(tbn,u_normalTexture,u_normalIntensity,v_uv,gl_FrontFacing);\n#else\nvec3 N=getNormal(gl_FrontFacing);\n#endif\nvec3 lightDiffuse=vec3(0.0,0.0,0.0);vec3 lightSpecular=vec3(0.0,0.0,0.0);float shadowAttenuation=1.0;\n#ifdef O3_DIRECT_LIGHT_COUNT\nshadowAttenuation=1.0;\n#ifdef OASIS_CALCULATE_SHADOWS\nshadowAttenuation*=sampleShadowMap();int sunIndex=int(u_shadowInfo.z);\n#endif\nDirectLight directionalLight;for(int i=0;i<O3_DIRECT_LIGHT_COUNT;i++){if(isRendererCulledByLight(oasis_RendererLayer.xy,u_directLightCullingMask[i]))continue;directionalLight.color=u_directLightColor[i];\n#ifdef OASIS_CALCULATE_SHADOWS\nif(i==sunIndex){directionalLight.color*=shadowAttenuation;}\n#endif\ndirectionalLight.direction=u_directLightDirection[i];float d=max(dot(N,-directionalLight.direction),0.0);lightDiffuse+=directionalLight.color*d;vec3 halfDir=normalize(V-directionalLight.direction);float s=pow(clamp(dot(N,halfDir),0.0,1.0),u_shininess);lightSpecular+=directionalLight.color*s;}\n#endif\n#ifdef O3_POINT_LIGHT_COUNT\nPointLight pointLight;for(int i=0;i<O3_POINT_LIGHT_COUNT;i++){if(isRendererCulledByLight(oasis_RendererLayer.xy,u_pointLightCullingMask[i]))continue;pointLight.color=u_pointLightColor[i];pointLight.position=u_pointLightPosition[i];pointLight.distance=u_pointLightDistance[i];vec3 direction=v_pos-pointLight.position;float dist=length(direction);direction/=dist;float decay=clamp(1.0-pow(dist/pointLight.distance,4.0),0.0,1.0);float d=max(dot(N,-direction),0.0)*decay;lightDiffuse+=pointLight.color*d;vec3 halfDir=normalize(V-direction);float s=pow(clamp(dot(N,halfDir),0.0,1.0),u_shininess)*decay;lightSpecular+=pointLight.color*s;}\n#endif\n#ifdef O3_SPOT_LIGHT_COUNT\nSpotLight spotLight;for(int i=0;i<O3_SPOT_LIGHT_COUNT;i++){if(isRendererCulledByLight(oasis_RendererLayer.xy,u_spotLightCullingMask[i]))continue;spotLight.color=u_spotLightColor[i];spotLight.position=u_spotLightPosition[i];spotLight.direction=u_spotLightDirection[i];spotLight.distance=u_spotLightDistance[i];spotLight.angleCos=u_spotLightAngleCos[i];spotLight.penumbraCos=u_spotLightPenumbraCos[i];vec3 direction=spotLight.position-v_pos;float lightDistance=length(direction);direction/=lightDistance;float angleCos=dot(direction,-spotLight.direction);float decay=clamp(1.0-pow(lightDistance/spotLight.distance,4.0),0.0,1.0);float spotEffect=smoothstep(spotLight.penumbraCos,spotLight.angleCos,angleCos);float decayTotal=decay*spotEffect;float d=max(dot(N,direction),0.0)*decayTotal;lightDiffuse+=spotLight.color*d;vec3 halfDir=normalize(V+direction);float s=pow(clamp(dot(N,halfDir),0.0,1.0),u_shininess)*decayTotal;lightSpecular+=spotLight.color*s;}\n#endif\ndiffuse*=vec4(lightDiffuse,1.0);specular*=vec4(lightSpecular,1.0);\n#ifdef ALPHA_CUTOFF\nif(diffuse.a<u_alphaCutoff){discard;}\n#endif\n";
var noise_cellular = "#define GLSLIFY 1\n#include <noise_cellular_2D>\n#include <noise_cellular_3D>\n#include <noise_cellular_2x2>\n#include <noise_cellular_2x2x2>\n";
var noise_cellular_2D = "#define GLSLIFY 1\nvec2 cellular(vec2 P){vec2 Pi=mod289(floor(P));vec2 Pf=fract(P);vec3 oi=vec3(-1.0,0.0,1.0);vec3 of=vec3(-0.5,0.5,1.5);vec3 px=permute(Pi.x+oi);vec3 p=permute(px.x+Pi.y+oi);vec3 ox=fract(p*K)-Ko;vec3 oy=mod7(floor(p*K))*K-Ko;vec3 dx=Pf.x+0.5+jitter*ox;vec3 dy=Pf.y-of+jitter*oy;vec3 d1=dx*dx+dy*dy;p=permute(px.y+Pi.y+oi);ox=fract(p*K)-Ko;oy=mod7(floor(p*K))*K-Ko;dx=Pf.x-0.5+jitter*ox;dy=Pf.y-of+jitter*oy;vec3 d2=dx*dx+dy*dy;p=permute(px.z+Pi.y+oi);ox=fract(p*K)-Ko;oy=mod7(floor(p*K))*K-Ko;dx=Pf.x-1.5+jitter*ox;dy=Pf.y-of+jitter*oy;vec3 d3=dx*dx+dy*dy;vec3 d1a=min(d1,d2);d2=max(d1,d2);d2=min(d2,d3);d1=min(d1a,d2);d2=max(d1a,d2);d1.xy=(d1.x<d1.y)? d1.xy : d1.yx;d1.xz=(d1.x<d1.z)? d1.xz : d1.zx;d1.yz=min(d1.yz,d2.yz);d1.y=min(d1.y,d1.z);d1.y=min(d1.y,d2.x);return sqrt(d1.xy);}";
var noise_cellular_2x2 = "#define GLSLIFY 1\nvec2 cellular2x2(vec2 P){vec2 Pi=mod289(floor(P));vec2 Pf=fract(P);vec4 Pfx=Pf.x+vec4(-0.5,-1.5,-0.5,-1.5);vec4 Pfy=Pf.y+vec4(-0.5,-0.5,-1.5,-1.5);vec4 p=permute(Pi.x+vec4(0.0,1.0,0.0,1.0));p=permute(p+Pi.y+vec4(0.0,0.0,1.0,1.0));vec4 ox=mod7(p)*K+Kd2;vec4 oy=mod7(floor(p*K))*K+Kd2;vec4 dx=Pfx+jitter1*ox;vec4 dy=Pfy+jitter1*oy;vec4 d=dx*dx+dy*dy;d.xy=(d.x<d.y)? d.xy : d.yx;d.xz=(d.x<d.z)? d.xz : d.zx;d.xw=(d.x<d.w)? d.xw : d.wx;d.y=min(d.y,d.z);d.y=min(d.y,d.w);return sqrt(d.xy);}";
var noise_cellular_2x2x2 = "#define GLSLIFY 1\nvec2 cellular2x2x2(vec3 P){vec3 Pi=mod289(floor(P));vec3 Pf=fract(P);vec4 Pfx=Pf.x+vec4(0.0,-1.0,0.0,-1.0);vec4 Pfy=Pf.y+vec4(0.0,0.0,-1.0,-1.0);vec4 p=permute(Pi.x+vec4(0.0,1.0,0.0,1.0));p=permute(p+Pi.y+vec4(0.0,0.0,1.0,1.0));vec4 p1=permute(p+Pi.z);vec4 p2=permute(p+Pi.z+vec4(1.0));vec4 ox1=fract(p1*K)-Ko;vec4 oy1=mod7(floor(p1*K))*K-Ko;vec4 oz1=floor(p1*K2)*Kz-Kzo;vec4 ox2=fract(p2*K)-Ko;vec4 oy2=mod7(floor(p2*K))*K-Ko;vec4 oz2=floor(p2*K2)*Kz-Kzo;vec4 dx1=Pfx+jitter1*ox1;vec4 dy1=Pfy+jitter1*oy1;vec4 dz1=Pf.z+jitter1*oz1;vec4 dx2=Pfx+jitter1*ox2;vec4 dy2=Pfy+jitter1*oy2;vec4 dz2=Pf.z-1.0+jitter1*oz2;vec4 d1=dx1*dx1+dy1*dy1+dz1*dz1;vec4 d2=dx2*dx2+dy2*dy2+dz2*dz2;vec4 d=min(d1,d2);d2=max(d1,d2);d.xy=(d.x<d.y)? d.xy : d.yx;d.xz=(d.x<d.z)? d.xz : d.zx;d.xw=(d.x<d.w)? d.xw : d.wx;d.yzw=min(d.yzw,d2.yzw);d.y=min(d.y,d.z);d.y=min(d.y,d.w);d.y=min(d.y,d2.x);return sqrt(d.xy);}";
var noise_cellular_3D = "#define GLSLIFY 1\nvec2 cellular(vec3 P){vec3 Pi=mod289(floor(P));vec3 Pf=fract(P)-0.5;vec3 Pfx=Pf.x+vec3(1.0,0.0,-1.0);vec3 Pfy=Pf.y+vec3(1.0,0.0,-1.0);vec3 Pfz=Pf.z+vec3(1.0,0.0,-1.0);vec3 p=permute(Pi.x+vec3(-1.0,0.0,1.0));vec3 p1=permute(p+Pi.y-1.0);vec3 p2=permute(p+Pi.y);vec3 p3=permute(p+Pi.y+1.0);vec3 p11=permute(p1+Pi.z-1.0);vec3 p12=permute(p1+Pi.z);vec3 p13=permute(p1+Pi.z+1.0);vec3 p21=permute(p2+Pi.z-1.0);vec3 p22=permute(p2+Pi.z);vec3 p23=permute(p2+Pi.z+1.0);vec3 p31=permute(p3+Pi.z-1.0);vec3 p32=permute(p3+Pi.z);vec3 p33=permute(p3+Pi.z+1.0);vec3 ox11=fract(p11*K)-Ko;vec3 oy11=mod7(floor(p11*K))*K-Ko;vec3 oz11=floor(p11*K2)*Kz-Kzo;vec3 ox12=fract(p12*K)-Ko;vec3 oy12=mod7(floor(p12*K))*K-Ko;vec3 oz12=floor(p12*K2)*Kz-Kzo;vec3 ox13=fract(p13*K)-Ko;vec3 oy13=mod7(floor(p13*K))*K-Ko;vec3 oz13=floor(p13*K2)*Kz-Kzo;vec3 ox21=fract(p21*K)-Ko;vec3 oy21=mod7(floor(p21*K))*K-Ko;vec3 oz21=floor(p21*K2)*Kz-Kzo;vec3 ox22=fract(p22*K)-Ko;vec3 oy22=mod7(floor(p22*K))*K-Ko;vec3 oz22=floor(p22*K2)*Kz-Kzo;vec3 ox23=fract(p23*K)-Ko;vec3 oy23=mod7(floor(p23*K))*K-Ko;vec3 oz23=floor(p23*K2)*Kz-Kzo;vec3 ox31=fract(p31*K)-Ko;vec3 oy31=mod7(floor(p31*K))*K-Ko;vec3 oz31=floor(p31*K2)*Kz-Kzo;vec3 ox32=fract(p32*K)-Ko;vec3 oy32=mod7(floor(p32*K))*K-Ko;vec3 oz32=floor(p32*K2)*Kz-Kzo;vec3 ox33=fract(p33*K)-Ko;vec3 oy33=mod7(floor(p33*K))*K-Ko;vec3 oz33=floor(p33*K2)*Kz-Kzo;vec3 dx11=Pfx+jitter*ox11;vec3 dy11=Pfy.x+jitter*oy11;vec3 dz11=Pfz.x+jitter*oz11;vec3 dx12=Pfx+jitter*ox12;vec3 dy12=Pfy.x+jitter*oy12;vec3 dz12=Pfz.y+jitter*oz12;vec3 dx13=Pfx+jitter*ox13;vec3 dy13=Pfy.x+jitter*oy13;vec3 dz13=Pfz.z+jitter*oz13;vec3 dx21=Pfx+jitter*ox21;vec3 dy21=Pfy.y+jitter*oy21;vec3 dz21=Pfz.x+jitter*oz21;vec3 dx22=Pfx+jitter*ox22;vec3 dy22=Pfy.y+jitter*oy22;vec3 dz22=Pfz.y+jitter*oz22;vec3 dx23=Pfx+jitter*ox23;vec3 dy23=Pfy.y+jitter*oy23;vec3 dz23=Pfz.z+jitter*oz23;vec3 dx31=Pfx+jitter*ox31;vec3 dy31=Pfy.z+jitter*oy31;vec3 dz31=Pfz.x+jitter*oz31;vec3 dx32=Pfx+jitter*ox32;vec3 dy32=Pfy.z+jitter*oy32;vec3 dz32=Pfz.y+jitter*oz32;vec3 dx33=Pfx+jitter*ox33;vec3 dy33=Pfy.z+jitter*oy33;vec3 dz33=Pfz.z+jitter*oz33;vec3 d11=dx11*dx11+dy11*dy11+dz11*dz11;vec3 d12=dx12*dx12+dy12*dy12+dz12*dz12;vec3 d13=dx13*dx13+dy13*dy13+dz13*dz13;vec3 d21=dx21*dx21+dy21*dy21+dz21*dz21;vec3 d22=dx22*dx22+dy22*dy22+dz22*dz22;vec3 d23=dx23*dx23+dy23*dy23+dz23*dz23;vec3 d31=dx31*dx31+dy31*dy31+dz31*dz31;vec3 d32=dx32*dx32+dy32*dy32+dz32*dz32;vec3 d33=dx33*dx33+dy33*dy33+dz33*dz33;vec3 d1a=min(d11,d12);d12=max(d11,d12);d11=min(d1a,d13);d13=max(d1a,d13);d12=min(d12,d13);vec3 d2a=min(d21,d22);d22=max(d21,d22);d21=min(d2a,d23);d23=max(d2a,d23);d22=min(d22,d23);vec3 d3a=min(d31,d32);d32=max(d31,d32);d31=min(d3a,d33);d33=max(d3a,d33);d32=min(d32,d33);vec3 da=min(d11,d21);d21=max(d11,d21);d11=min(da,d31);d31=max(da,d31);d11.xy=(d11.x<d11.y)? d11.xy : d11.yx;d11.xz=(d11.x<d11.z)? d11.xz : d11.zx;d12=min(d12,d21);d12=min(d12,d22);d12=min(d12,d31);d12=min(d12,d32);d11.yz=min(d11.yz,d12.xy);d11.y=min(d11.y,d12.z);d11.y=min(d11.y,d11.z);return sqrt(d11.xy);}";
var noise_common = "#define GLSLIFY 1\nvec4 mod289(vec4 x){return x-floor(x*(1.0/289.0))*289.0;}vec3 mod289(vec3 x){return x-floor(x*(1.0/289.0))*289.0;}vec2 mod289(vec2 x){return x-floor(x*(1.0/289.0))*289.0;}float mod289(float x){return x-floor(x*(1.0/289.0))*289.0;}vec4 mod7(vec4 x){return x-floor(x*(1.0/7.0))*7.0;}vec3 mod7(vec3 x){return x-floor(x*(1.0/7.0))*7.0;}vec4 permute(vec4 x){return mod289((34.0*x+1.0)*x);}vec3 permute(vec3 x){return mod289((34.0*x+1.0)*x);}float permute(float x){return mod289(((x*34.0)+1.0)*x);}vec4 taylorInvSqrt(vec4 r){return 1.79284291400159-0.85373472095314*r;}float taylorInvSqrt(float r){return 1.79284291400159-0.85373472095314*r;}vec4 fade(vec4 t){return t*t*t*(t*(t*6.0-15.0)+10.0);}vec3 fade(vec3 t){return t*t*t*(t*(t*6.0-15.0)+10.0);}vec2 fade(vec2 t){return t*t*t*(t*(t*6.0-15.0)+10.0);}\n#define K 0.142857142857\n#define Ko 0.428571428571\n#define K2 0.020408163265306\n#define Kd2 0.0714285714285\n#define Kz 0.166666666667\n#define Kzo 0.416666666667\n#define jitter 1.0\n#define jitter1 0.8\n";
var noise_perlin = "#define GLSLIFY 1\n#include <noise_perlin_2D>\n#include <noise_perlin_3D>\n#include <noise_perlin_4D>\n";
var noise_perlin_2D = "#define GLSLIFY 1\nfloat perlin(vec2 P){vec4 Pi=floor(P.xyxy)+vec4(0.0,0.0,1.0,1.0);vec4 Pf=fract(P.xyxy)-vec4(0.0,0.0,1.0,1.0);Pi=mod289(Pi);vec4 ix=Pi.xzxz;vec4 iy=Pi.yyww;vec4 fx=Pf.xzxz;vec4 fy=Pf.yyww;vec4 i=permute(permute(ix)+iy);vec4 gx=fract(i*(1.0/41.0))*2.0-1.0;vec4 gy=abs(gx)-0.5;vec4 tx=floor(gx+0.5);gx=gx-tx;vec2 g00=vec2(gx.x,gy.x);vec2 g10=vec2(gx.y,gy.y);vec2 g01=vec2(gx.z,gy.z);vec2 g11=vec2(gx.w,gy.w);vec4 norm=taylorInvSqrt(vec4(dot(g00,g00),dot(g01,g01),dot(g10,g10),dot(g11,g11)));g00*=norm.x;g01*=norm.y;g10*=norm.z;g11*=norm.w;float n00=dot(g00,vec2(fx.x,fy.x));float n10=dot(g10,vec2(fx.y,fy.y));float n01=dot(g01,vec2(fx.z,fy.z));float n11=dot(g11,vec2(fx.w,fy.w));vec2 fade_xy=fade(Pf.xy);vec2 n_x=mix(vec2(n00,n01),vec2(n10,n11),fade_xy.x);float n_xy=mix(n_x.x,n_x.y,fade_xy.y);return 2.3*n_xy;}float perlin(vec2 P,vec2 rep){vec4 Pi=floor(P.xyxy)+vec4(0.0,0.0,1.0,1.0);vec4 Pf=fract(P.xyxy)-vec4(0.0,0.0,1.0,1.0);Pi=mod(Pi,rep.xyxy);Pi=mod289(Pi);vec4 ix=Pi.xzxz;vec4 iy=Pi.yyww;vec4 fx=Pf.xzxz;vec4 fy=Pf.yyww;vec4 i=permute(permute(ix)+iy);vec4 gx=fract(i*(1.0/41.0))*2.0-1.0;vec4 gy=abs(gx)-0.5;vec4 tx=floor(gx+0.5);gx=gx-tx;vec2 g00=vec2(gx.x,gy.x);vec2 g10=vec2(gx.y,gy.y);vec2 g01=vec2(gx.z,gy.z);vec2 g11=vec2(gx.w,gy.w);vec4 norm=taylorInvSqrt(vec4(dot(g00,g00),dot(g01,g01),dot(g10,g10),dot(g11,g11)));g00*=norm.x;g01*=norm.y;g10*=norm.z;g11*=norm.w;float n00=dot(g00,vec2(fx.x,fy.x));float n10=dot(g10,vec2(fx.y,fy.y));float n01=dot(g01,vec2(fx.z,fy.z));float n11=dot(g11,vec2(fx.w,fy.w));vec2 fade_xy=fade(Pf.xy);vec2 n_x=mix(vec2(n00,n01),vec2(n10,n11),fade_xy.x);float n_xy=mix(n_x.x,n_x.y,fade_xy.y);return 2.3*n_xy;}";
var noise_perlin_3D = "#define GLSLIFY 1\nfloat perlin(vec3 P){vec3 Pi0=floor(P);vec3 Pi1=Pi0+vec3(1.0);Pi0=mod289(Pi0);Pi1=mod289(Pi1);vec3 Pf0=fract(P);vec3 Pf1=Pf0-vec3(1.0);vec4 ix=vec4(Pi0.x,Pi1.x,Pi0.x,Pi1.x);vec4 iy=vec4(Pi0.yy,Pi1.yy);vec4 iz0=Pi0.zzzz;vec4 iz1=Pi1.zzzz;vec4 ixy=permute(permute(ix)+iy);vec4 ixy0=permute(ixy+iz0);vec4 ixy1=permute(ixy+iz1);vec4 gx0=ixy0*(1.0/7.0);vec4 gy0=fract(floor(gx0)*(1.0/7.0))-0.5;gx0=fract(gx0);vec4 gz0=vec4(0.5)-abs(gx0)-abs(gy0);vec4 sz0=step(gz0,vec4(0.0));gx0-=sz0*(step(0.0,gx0)-0.5);gy0-=sz0*(step(0.0,gy0)-0.5);vec4 gx1=ixy1*(1.0/7.0);vec4 gy1=fract(floor(gx1)*(1.0/7.0))-0.5;gx1=fract(gx1);vec4 gz1=vec4(0.5)-abs(gx1)-abs(gy1);vec4 sz1=step(gz1,vec4(0.0));gx1-=sz1*(step(0.0,gx1)-0.5);gy1-=sz1*(step(0.0,gy1)-0.5);vec3 g000=vec3(gx0.x,gy0.x,gz0.x);vec3 g100=vec3(gx0.y,gy0.y,gz0.y);vec3 g010=vec3(gx0.z,gy0.z,gz0.z);vec3 g110=vec3(gx0.w,gy0.w,gz0.w);vec3 g001=vec3(gx1.x,gy1.x,gz1.x);vec3 g101=vec3(gx1.y,gy1.y,gz1.y);vec3 g011=vec3(gx1.z,gy1.z,gz1.z);vec3 g111=vec3(gx1.w,gy1.w,gz1.w);vec4 norm0=taylorInvSqrt(vec4(dot(g000,g000),dot(g010,g010),dot(g100,g100),dot(g110,g110)));g000*=norm0.x;g010*=norm0.y;g100*=norm0.z;g110*=norm0.w;vec4 norm1=taylorInvSqrt(vec4(dot(g001,g001),dot(g011,g011),dot(g101,g101),dot(g111,g111)));g001*=norm1.x;g011*=norm1.y;g101*=norm1.z;g111*=norm1.w;float n000=dot(g000,Pf0);float n100=dot(g100,vec3(Pf1.x,Pf0.yz));float n010=dot(g010,vec3(Pf0.x,Pf1.y,Pf0.z));float n110=dot(g110,vec3(Pf1.xy,Pf0.z));float n001=dot(g001,vec3(Pf0.xy,Pf1.z));float n101=dot(g101,vec3(Pf1.x,Pf0.y,Pf1.z));float n011=dot(g011,vec3(Pf0.x,Pf1.yz));float n111=dot(g111,Pf1);vec3 fade_xyz=fade(Pf0);vec4 n_z=mix(vec4(n000,n100,n010,n110),vec4(n001,n101,n011,n111),fade_xyz.z);vec2 n_yz=mix(n_z.xy,n_z.zw,fade_xyz.y);float n_xyz=mix(n_yz.x,n_yz.y,fade_xyz.x);return 2.2*n_xyz;}float perlin(vec3 P,vec3 rep){vec3 Pi0=mod(floor(P),rep);vec3 Pi1=mod(Pi0+vec3(1.0),rep);Pi0=mod289(Pi0);Pi1=mod289(Pi1);vec3 Pf0=fract(P);vec3 Pf1=Pf0-vec3(1.0);vec4 ix=vec4(Pi0.x,Pi1.x,Pi0.x,Pi1.x);vec4 iy=vec4(Pi0.yy,Pi1.yy);vec4 iz0=Pi0.zzzz;vec4 iz1=Pi1.zzzz;vec4 ixy=permute(permute(ix)+iy);vec4 ixy0=permute(ixy+iz0);vec4 ixy1=permute(ixy+iz1);vec4 gx0=ixy0*(1.0/7.0);vec4 gy0=fract(floor(gx0)*(1.0/7.0))-0.5;gx0=fract(gx0);vec4 gz0=vec4(0.5)-abs(gx0)-abs(gy0);vec4 sz0=step(gz0,vec4(0.0));gx0-=sz0*(step(0.0,gx0)-0.5);gy0-=sz0*(step(0.0,gy0)-0.5);vec4 gx1=ixy1*(1.0/7.0);vec4 gy1=fract(floor(gx1)*(1.0/7.0))-0.5;gx1=fract(gx1);vec4 gz1=vec4(0.5)-abs(gx1)-abs(gy1);vec4 sz1=step(gz1,vec4(0.0));gx1-=sz1*(step(0.0,gx1)-0.5);gy1-=sz1*(step(0.0,gy1)-0.5);vec3 g000=vec3(gx0.x,gy0.x,gz0.x);vec3 g100=vec3(gx0.y,gy0.y,gz0.y);vec3 g010=vec3(gx0.z,gy0.z,gz0.z);vec3 g110=vec3(gx0.w,gy0.w,gz0.w);vec3 g001=vec3(gx1.x,gy1.x,gz1.x);vec3 g101=vec3(gx1.y,gy1.y,gz1.y);vec3 g011=vec3(gx1.z,gy1.z,gz1.z);vec3 g111=vec3(gx1.w,gy1.w,gz1.w);vec4 norm0=taylorInvSqrt(vec4(dot(g000,g000),dot(g010,g010),dot(g100,g100),dot(g110,g110)));g000*=norm0.x;g010*=norm0.y;g100*=norm0.z;g110*=norm0.w;vec4 norm1=taylorInvSqrt(vec4(dot(g001,g001),dot(g011,g011),dot(g101,g101),dot(g111,g111)));g001*=norm1.x;g011*=norm1.y;g101*=norm1.z;g111*=norm1.w;float n000=dot(g000,Pf0);float n100=dot(g100,vec3(Pf1.x,Pf0.yz));float n010=dot(g010,vec3(Pf0.x,Pf1.y,Pf0.z));float n110=dot(g110,vec3(Pf1.xy,Pf0.z));float n001=dot(g001,vec3(Pf0.xy,Pf1.z));float n101=dot(g101,vec3(Pf1.x,Pf0.y,Pf1.z));float n011=dot(g011,vec3(Pf0.x,Pf1.yz));float n111=dot(g111,Pf1);vec3 fade_xyz=fade(Pf0);vec4 n_z=mix(vec4(n000,n100,n010,n110),vec4(n001,n101,n011,n111),fade_xyz.z);vec2 n_yz=mix(n_z.xy,n_z.zw,fade_xyz.y);float n_xyz=mix(n_yz.x,n_yz.y,fade_xyz.x);return 2.2*n_xyz;}";
var noise_perlin_4D = "#define GLSLIFY 1\nfloat perlin(vec4 P){vec4 Pi0=floor(P);vec4 Pi1=Pi0+1.0;Pi0=mod289(Pi0);Pi1=mod289(Pi1);vec4 Pf0=fract(P);vec4 Pf1=Pf0-1.0;vec4 ix=vec4(Pi0.x,Pi1.x,Pi0.x,Pi1.x);vec4 iy=vec4(Pi0.yy,Pi1.yy);vec4 iz0=vec4(Pi0.zzzz);vec4 iz1=vec4(Pi1.zzzz);vec4 iw0=vec4(Pi0.wwww);vec4 iw1=vec4(Pi1.wwww);vec4 ixy=permute(permute(ix)+iy);vec4 ixy0=permute(ixy+iz0);vec4 ixy1=permute(ixy+iz1);vec4 ixy00=permute(ixy0+iw0);vec4 ixy01=permute(ixy0+iw1);vec4 ixy10=permute(ixy1+iw0);vec4 ixy11=permute(ixy1+iw1);vec4 gx00=ixy00*(1.0/7.0);vec4 gy00=floor(gx00)*(1.0/7.0);vec4 gz00=floor(gy00)*(1.0/6.0);gx00=fract(gx00)-0.5;gy00=fract(gy00)-0.5;gz00=fract(gz00)-0.5;vec4 gw00=vec4(0.75)-abs(gx00)-abs(gy00)-abs(gz00);vec4 sw00=step(gw00,vec4(0.0));gx00-=sw00*(step(0.0,gx00)-0.5);gy00-=sw00*(step(0.0,gy00)-0.5);vec4 gx01=ixy01*(1.0/7.0);vec4 gy01=floor(gx01)*(1.0/7.0);vec4 gz01=floor(gy01)*(1.0/6.0);gx01=fract(gx01)-0.5;gy01=fract(gy01)-0.5;gz01=fract(gz01)-0.5;vec4 gw01=vec4(0.75)-abs(gx01)-abs(gy01)-abs(gz01);vec4 sw01=step(gw01,vec4(0.0));gx01-=sw01*(step(0.0,gx01)-0.5);gy01-=sw01*(step(0.0,gy01)-0.5);vec4 gx10=ixy10*(1.0/7.0);vec4 gy10=floor(gx10)*(1.0/7.0);vec4 gz10=floor(gy10)*(1.0/6.0);gx10=fract(gx10)-0.5;gy10=fract(gy10)-0.5;gz10=fract(gz10)-0.5;vec4 gw10=vec4(0.75)-abs(gx10)-abs(gy10)-abs(gz10);vec4 sw10=step(gw10,vec4(0.0));gx10-=sw10*(step(0.0,gx10)-0.5);gy10-=sw10*(step(0.0,gy10)-0.5);vec4 gx11=ixy11*(1.0/7.0);vec4 gy11=floor(gx11)*(1.0/7.0);vec4 gz11=floor(gy11)*(1.0/6.0);gx11=fract(gx11)-0.5;gy11=fract(gy11)-0.5;gz11=fract(gz11)-0.5;vec4 gw11=vec4(0.75)-abs(gx11)-abs(gy11)-abs(gz11);vec4 sw11=step(gw11,vec4(0.0));gx11-=sw11*(step(0.0,gx11)-0.5);gy11-=sw11*(step(0.0,gy11)-0.5);vec4 g0000=vec4(gx00.x,gy00.x,gz00.x,gw00.x);vec4 g1000=vec4(gx00.y,gy00.y,gz00.y,gw00.y);vec4 g0100=vec4(gx00.z,gy00.z,gz00.z,gw00.z);vec4 g1100=vec4(gx00.w,gy00.w,gz00.w,gw00.w);vec4 g0010=vec4(gx10.x,gy10.x,gz10.x,gw10.x);vec4 g1010=vec4(gx10.y,gy10.y,gz10.y,gw10.y);vec4 g0110=vec4(gx10.z,gy10.z,gz10.z,gw10.z);vec4 g1110=vec4(gx10.w,gy10.w,gz10.w,gw10.w);vec4 g0001=vec4(gx01.x,gy01.x,gz01.x,gw01.x);vec4 g1001=vec4(gx01.y,gy01.y,gz01.y,gw01.y);vec4 g0101=vec4(gx01.z,gy01.z,gz01.z,gw01.z);vec4 g1101=vec4(gx01.w,gy01.w,gz01.w,gw01.w);vec4 g0011=vec4(gx11.x,gy11.x,gz11.x,gw11.x);vec4 g1011=vec4(gx11.y,gy11.y,gz11.y,gw11.y);vec4 g0111=vec4(gx11.z,gy11.z,gz11.z,gw11.z);vec4 g1111=vec4(gx11.w,gy11.w,gz11.w,gw11.w);vec4 norm00=taylorInvSqrt(vec4(dot(g0000,g0000),dot(g0100,g0100),dot(g1000,g1000),dot(g1100,g1100)));g0000*=norm00.x;g0100*=norm00.y;g1000*=norm00.z;g1100*=norm00.w;vec4 norm01=taylorInvSqrt(vec4(dot(g0001,g0001),dot(g0101,g0101),dot(g1001,g1001),dot(g1101,g1101)));g0001*=norm01.x;g0101*=norm01.y;g1001*=norm01.z;g1101*=norm01.w;vec4 norm10=taylorInvSqrt(vec4(dot(g0010,g0010),dot(g0110,g0110),dot(g1010,g1010),dot(g1110,g1110)));g0010*=norm10.x;g0110*=norm10.y;g1010*=norm10.z;g1110*=norm10.w;vec4 norm11=taylorInvSqrt(vec4(dot(g0011,g0011),dot(g0111,g0111),dot(g1011,g1011),dot(g1111,g1111)));g0011*=norm11.x;g0111*=norm11.y;g1011*=norm11.z;g1111*=norm11.w;float n0000=dot(g0000,Pf0);float n1000=dot(g1000,vec4(Pf1.x,Pf0.yzw));float n0100=dot(g0100,vec4(Pf0.x,Pf1.y,Pf0.zw));float n1100=dot(g1100,vec4(Pf1.xy,Pf0.zw));float n0010=dot(g0010,vec4(Pf0.xy,Pf1.z,Pf0.w));float n1010=dot(g1010,vec4(Pf1.x,Pf0.y,Pf1.z,Pf0.w));float n0110=dot(g0110,vec4(Pf0.x,Pf1.yz,Pf0.w));float n1110=dot(g1110,vec4(Pf1.xyz,Pf0.w));float n0001=dot(g0001,vec4(Pf0.xyz,Pf1.w));float n1001=dot(g1001,vec4(Pf1.x,Pf0.yz,Pf1.w));float n0101=dot(g0101,vec4(Pf0.x,Pf1.y,Pf0.z,Pf1.w));float n1101=dot(g1101,vec4(Pf1.xy,Pf0.z,Pf1.w));float n0011=dot(g0011,vec4(Pf0.xy,Pf1.zw));float n1011=dot(g1011,vec4(Pf1.x,Pf0.y,Pf1.zw));float n0111=dot(g0111,vec4(Pf0.x,Pf1.yzw));float n1111=dot(g1111,Pf1);vec4 fade_xyzw=fade(Pf0);vec4 n_0w=mix(vec4(n0000,n1000,n0100,n1100),vec4(n0001,n1001,n0101,n1101),fade_xyzw.w);vec4 n_1w=mix(vec4(n0010,n1010,n0110,n1110),vec4(n0011,n1011,n0111,n1111),fade_xyzw.w);vec4 n_zw=mix(n_0w,n_1w,fade_xyzw.z);vec2 n_yzw=mix(n_zw.xy,n_zw.zw,fade_xyzw.y);float n_xyzw=mix(n_yzw.x,n_yzw.y,fade_xyzw.x);return 2.2*n_xyzw;}float perlin(vec4 P,vec4 rep){vec4 Pi0=mod(floor(P),rep);vec4 Pi1=mod(Pi0+1.0,rep);Pi0=mod289(Pi0);Pi1=mod289(Pi1);vec4 Pf0=fract(P);vec4 Pf1=Pf0-1.0;vec4 ix=vec4(Pi0.x,Pi1.x,Pi0.x,Pi1.x);vec4 iy=vec4(Pi0.yy,Pi1.yy);vec4 iz0=vec4(Pi0.zzzz);vec4 iz1=vec4(Pi1.zzzz);vec4 iw0=vec4(Pi0.wwww);vec4 iw1=vec4(Pi1.wwww);vec4 ixy=permute(permute(ix)+iy);vec4 ixy0=permute(ixy+iz0);vec4 ixy1=permute(ixy+iz1);vec4 ixy00=permute(ixy0+iw0);vec4 ixy01=permute(ixy0+iw1);vec4 ixy10=permute(ixy1+iw0);vec4 ixy11=permute(ixy1+iw1);vec4 gx00=ixy00*(1.0/7.0);vec4 gy00=floor(gx00)*(1.0/7.0);vec4 gz00=floor(gy00)*(1.0/6.0);gx00=fract(gx00)-0.5;gy00=fract(gy00)-0.5;gz00=fract(gz00)-0.5;vec4 gw00=vec4(0.75)-abs(gx00)-abs(gy00)-abs(gz00);vec4 sw00=step(gw00,vec4(0.0));gx00-=sw00*(step(0.0,gx00)-0.5);gy00-=sw00*(step(0.0,gy00)-0.5);vec4 gx01=ixy01*(1.0/7.0);vec4 gy01=floor(gx01)*(1.0/7.0);vec4 gz01=floor(gy01)*(1.0/6.0);gx01=fract(gx01)-0.5;gy01=fract(gy01)-0.5;gz01=fract(gz01)-0.5;vec4 gw01=vec4(0.75)-abs(gx01)-abs(gy01)-abs(gz01);vec4 sw01=step(gw01,vec4(0.0));gx01-=sw01*(step(0.0,gx01)-0.5);gy01-=sw01*(step(0.0,gy01)-0.5);vec4 gx10=ixy10*(1.0/7.0);vec4 gy10=floor(gx10)*(1.0/7.0);vec4 gz10=floor(gy10)*(1.0/6.0);gx10=fract(gx10)-0.5;gy10=fract(gy10)-0.5;gz10=fract(gz10)-0.5;vec4 gw10=vec4(0.75)-abs(gx10)-abs(gy10)-abs(gz10);vec4 sw10=step(gw10,vec4(0.0));gx10-=sw10*(step(0.0,gx10)-0.5);gy10-=sw10*(step(0.0,gy10)-0.5);vec4 gx11=ixy11*(1.0/7.0);vec4 gy11=floor(gx11)*(1.0/7.0);vec4 gz11=floor(gy11)*(1.0/6.0);gx11=fract(gx11)-0.5;gy11=fract(gy11)-0.5;gz11=fract(gz11)-0.5;vec4 gw11=vec4(0.75)-abs(gx11)-abs(gy11)-abs(gz11);vec4 sw11=step(gw11,vec4(0.0));gx11-=sw11*(step(0.0,gx11)-0.5);gy11-=sw11*(step(0.0,gy11)-0.5);vec4 g0000=vec4(gx00.x,gy00.x,gz00.x,gw00.x);vec4 g1000=vec4(gx00.y,gy00.y,gz00.y,gw00.y);vec4 g0100=vec4(gx00.z,gy00.z,gz00.z,gw00.z);vec4 g1100=vec4(gx00.w,gy00.w,gz00.w,gw00.w);vec4 g0010=vec4(gx10.x,gy10.x,gz10.x,gw10.x);vec4 g1010=vec4(gx10.y,gy10.y,gz10.y,gw10.y);vec4 g0110=vec4(gx10.z,gy10.z,gz10.z,gw10.z);vec4 g1110=vec4(gx10.w,gy10.w,gz10.w,gw10.w);vec4 g0001=vec4(gx01.x,gy01.x,gz01.x,gw01.x);vec4 g1001=vec4(gx01.y,gy01.y,gz01.y,gw01.y);vec4 g0101=vec4(gx01.z,gy01.z,gz01.z,gw01.z);vec4 g1101=vec4(gx01.w,gy01.w,gz01.w,gw01.w);vec4 g0011=vec4(gx11.x,gy11.x,gz11.x,gw11.x);vec4 g1011=vec4(gx11.y,gy11.y,gz11.y,gw11.y);vec4 g0111=vec4(gx11.z,gy11.z,gz11.z,gw11.z);vec4 g1111=vec4(gx11.w,gy11.w,gz11.w,gw11.w);vec4 norm00=taylorInvSqrt(vec4(dot(g0000,g0000),dot(g0100,g0100),dot(g1000,g1000),dot(g1100,g1100)));g0000*=norm00.x;g0100*=norm00.y;g1000*=norm00.z;g1100*=norm00.w;vec4 norm01=taylorInvSqrt(vec4(dot(g0001,g0001),dot(g0101,g0101),dot(g1001,g1001),dot(g1101,g1101)));g0001*=norm01.x;g0101*=norm01.y;g1001*=norm01.z;g1101*=norm01.w;vec4 norm10=taylorInvSqrt(vec4(dot(g0010,g0010),dot(g0110,g0110),dot(g1010,g1010),dot(g1110,g1110)));g0010*=norm10.x;g0110*=norm10.y;g1010*=norm10.z;g1110*=norm10.w;vec4 norm11=taylorInvSqrt(vec4(dot(g0011,g0011),dot(g0111,g0111),dot(g1011,g1011),dot(g1111,g1111)));g0011*=norm11.x;g0111*=norm11.y;g1011*=norm11.z;g1111*=norm11.w;float n0000=dot(g0000,Pf0);float n1000=dot(g1000,vec4(Pf1.x,Pf0.yzw));float n0100=dot(g0100,vec4(Pf0.x,Pf1.y,Pf0.zw));float n1100=dot(g1100,vec4(Pf1.xy,Pf0.zw));float n0010=dot(g0010,vec4(Pf0.xy,Pf1.z,Pf0.w));float n1010=dot(g1010,vec4(Pf1.x,Pf0.y,Pf1.z,Pf0.w));float n0110=dot(g0110,vec4(Pf0.x,Pf1.yz,Pf0.w));float n1110=dot(g1110,vec4(Pf1.xyz,Pf0.w));float n0001=dot(g0001,vec4(Pf0.xyz,Pf1.w));float n1001=dot(g1001,vec4(Pf1.x,Pf0.yz,Pf1.w));float n0101=dot(g0101,vec4(Pf0.x,Pf1.y,Pf0.z,Pf1.w));float n1101=dot(g1101,vec4(Pf1.xy,Pf0.z,Pf1.w));float n0011=dot(g0011,vec4(Pf0.xy,Pf1.zw));float n1011=dot(g1011,vec4(Pf1.x,Pf0.y,Pf1.zw));float n0111=dot(g0111,vec4(Pf0.x,Pf1.yzw));float n1111=dot(g1111,Pf1);vec4 fade_xyzw=fade(Pf0);vec4 n_0w=mix(vec4(n0000,n1000,n0100,n1100),vec4(n0001,n1001,n0101,n1101),fade_xyzw.w);vec4 n_1w=mix(vec4(n0010,n1010,n0110,n1110),vec4(n0011,n1011,n0111,n1111),fade_xyzw.w);vec4 n_zw=mix(n_0w,n_1w,fade_xyzw.z);vec2 n_yzw=mix(n_zw.xy,n_zw.zw,fade_xyzw.y);float n_xyzw=mix(n_yzw.x,n_yzw.y,fade_xyzw.x);return 2.2*n_xyzw;}";
var noise_psrd_2D = "#define GLSLIFY 1\nvec2 rgrad2(vec2 p,float rot){float u=permute(permute(p.x)+p.y)*0.0243902439+rot;u=fract(u)*6.28318530718;return vec2(cos(u),sin(u));}vec3 psrdnoise(vec2 pos,vec2 per,float rot){pos.y+=0.01;vec2 uv=vec2(pos.x+pos.y*0.5,pos.y);vec2 i0=floor(uv);vec2 f0=fract(uv);vec2 i1=(f0.x>f0.y)? vec2(1.0,0.0): vec2(0.0,1.0);vec2 p0=vec2(i0.x-i0.y*0.5,i0.y);vec2 p1=vec2(p0.x+i1.x-i1.y*0.5,p0.y+i1.y);vec2 p2=vec2(p0.x+0.5,p0.y+1.0);i1=i0+i1;vec2 i2=i0+vec2(1.0,1.0);vec2 d0=pos-p0;vec2 d1=pos-p1;vec2 d2=pos-p2;vec3 xw=mod(vec3(p0.x,p1.x,p2.x),per.x);vec3 yw=mod(vec3(p0.y,p1.y,p2.y),per.y);vec3 iuw=xw+0.5*yw;vec3 ivw=yw;vec2 g0=rgrad2(vec2(iuw.x,ivw.x),rot);vec2 g1=rgrad2(vec2(iuw.y,ivw.y),rot);vec2 g2=rgrad2(vec2(iuw.z,ivw.z),rot);vec3 w=vec3(dot(g0,d0),dot(g1,d1),dot(g2,d2));vec3 t=0.8-vec3(dot(d0,d0),dot(d1,d1),dot(d2,d2));vec3 dtdx=-2.0*vec3(d0.x,d1.x,d2.x);vec3 dtdy=-2.0*vec3(d0.y,d1.y,d2.y);if(t.x<0.0){dtdx.x=0.0;dtdy.x=0.0;t.x=0.0;}if(t.y<0.0){dtdx.y=0.0;dtdy.y=0.0;t.y=0.0;}if(t.z<0.0){dtdx.z=0.0;dtdy.z=0.0;t.z=0.0;}vec3 t2=t*t;vec3 t4=t2*t2;vec3 t3=t2*t;float n=dot(t4,w);vec2 dt0=vec2(dtdx.x,dtdy.x)*4.0*t3.x;vec2 dn0=t4.x*g0+dt0*w.x;vec2 dt1=vec2(dtdx.y,dtdy.y)*4.0*t3.y;vec2 dn1=t4.y*g1+dt1*w.y;vec2 dt2=vec2(dtdx.z,dtdy.z)*4.0*t3.z;vec2 dn2=t4.z*g2+dt2*w.z;return 11.0*vec3(n,dn0+dn1+dn2);}vec3 psdnoise(vec2 pos,vec2 per){return psrdnoise(pos,per,0.0);}float psrnoise(vec2 pos,vec2 per,float rot){pos.y+=0.001;vec2 uv=vec2(pos.x+pos.y*0.5,pos.y);vec2 i0=floor(uv);vec2 f0=fract(uv);vec2 i1=(f0.x>f0.y)? vec2(1.0,0.0): vec2(0.0,1.0);vec2 p0=vec2(i0.x-i0.y*0.5,i0.y);vec2 p1=vec2(p0.x+i1.x-i1.y*0.5,p0.y+i1.y);vec2 p2=vec2(p0.x+0.5,p0.y+1.0);i1=i0+i1;vec2 i2=i0+vec2(1.0,1.0);vec2 d0=pos-p0;vec2 d1=pos-p1;vec2 d2=pos-p2;vec3 xw=mod(vec3(p0.x,p1.x,p2.x),per.x);vec3 yw=mod(vec3(p0.y,p1.y,p2.y),per.y);vec3 iuw=xw+0.5*yw;vec3 ivw=yw;vec2 g0=rgrad2(vec2(iuw.x,ivw.x),rot);vec2 g1=rgrad2(vec2(iuw.y,ivw.y),rot);vec2 g2=rgrad2(vec2(iuw.z,ivw.z),rot);vec3 w=vec3(dot(g0,d0),dot(g1,d1),dot(g2,d2));vec3 t=0.8-vec3(dot(d0,d0),dot(d1,d1),dot(d2,d2));t=max(t,0.0);vec3 t2=t*t;vec3 t4=t2*t2;float n=dot(t4,w);return 11.0*n;}float psnoise(vec2 pos,vec2 per){return psrnoise(pos,per,0.0);}vec3 srdnoise(vec2 pos,float rot){pos.y+=0.001;vec2 uv=vec2(pos.x+pos.y*0.5,pos.y);vec2 i0=floor(uv);vec2 f0=fract(uv);vec2 i1=(f0.x>f0.y)? vec2(1.0,0.0): vec2(0.0,1.0);vec2 p0=vec2(i0.x-i0.y*0.5,i0.y);vec2 p1=vec2(p0.x+i1.x-i1.y*0.5,p0.y+i1.y);vec2 p2=vec2(p0.x+0.5,p0.y+1.0);i1=i0+i1;vec2 i2=i0+vec2(1.0,1.0);vec2 d0=pos-p0;vec2 d1=pos-p1;vec2 d2=pos-p2;vec3 x=vec3(p0.x,p1.x,p2.x);vec3 y=vec3(p0.y,p1.y,p2.y);vec3 iuw=x+0.5*y;vec3 ivw=y;iuw=mod289(iuw);ivw=mod289(ivw);vec2 g0=rgrad2(vec2(iuw.x,ivw.x),rot);vec2 g1=rgrad2(vec2(iuw.y,ivw.y),rot);vec2 g2=rgrad2(vec2(iuw.z,ivw.z),rot);vec3 w=vec3(dot(g0,d0),dot(g1,d1),dot(g2,d2));vec3 t=0.8-vec3(dot(d0,d0),dot(d1,d1),dot(d2,d2));vec3 dtdx=-2.0*vec3(d0.x,d1.x,d2.x);vec3 dtdy=-2.0*vec3(d0.y,d1.y,d2.y);if(t.x<0.0){dtdx.x=0.0;dtdy.x=0.0;t.x=0.0;}if(t.y<0.0){dtdx.y=0.0;dtdy.y=0.0;t.y=0.0;}if(t.z<0.0){dtdx.z=0.0;dtdy.z=0.0;t.z=0.0;}vec3 t2=t*t;vec3 t4=t2*t2;vec3 t3=t2*t;float n=dot(t4,w);vec2 dt0=vec2(dtdx.x,dtdy.x)*4.0*t3.x;vec2 dn0=t4.x*g0+dt0*w.x;vec2 dt1=vec2(dtdx.y,dtdy.y)*4.0*t3.y;vec2 dn1=t4.y*g1+dt1*w.y;vec2 dt2=vec2(dtdx.z,dtdy.z)*4.0*t3.z;vec2 dn2=t4.z*g2+dt2*w.z;return 11.0*vec3(n,dn0+dn1+dn2);}vec3 sdnoise(vec2 pos){return srdnoise(pos,0.0);}float srnoise(vec2 pos,float rot){pos.y+=0.001;vec2 uv=vec2(pos.x+pos.y*0.5,pos.y);vec2 i0=floor(uv);vec2 f0=fract(uv);vec2 i1=(f0.x>f0.y)? vec2(1.0,0.0): vec2(0.0,1.0);vec2 p0=vec2(i0.x-i0.y*0.5,i0.y);vec2 p1=vec2(p0.x+i1.x-i1.y*0.5,p0.y+i1.y);vec2 p2=vec2(p0.x+0.5,p0.y+1.0);i1=i0+i1;vec2 i2=i0+vec2(1.0,1.0);vec2 d0=pos-p0;vec2 d1=pos-p1;vec2 d2=pos-p2;vec3 x=vec3(p0.x,p1.x,p2.x);vec3 y=vec3(p0.y,p1.y,p2.y);vec3 iuw=x+0.5*y;vec3 ivw=y;iuw=mod289(iuw);ivw=mod289(ivw);vec2 g0=rgrad2(vec2(iuw.x,ivw.x),rot);vec2 g1=rgrad2(vec2(iuw.y,ivw.y),rot);vec2 g2=rgrad2(vec2(iuw.z,ivw.z),rot);vec3 w=vec3(dot(g0,d0),dot(g1,d1),dot(g2,d2));vec3 t=0.8-vec3(dot(d0,d0),dot(d1,d1),dot(d2,d2));t=max(t,0.0);vec3 t2=t*t;vec3 t4=t2*t2;float n=dot(t4,w);return 11.0*n;}float snoise(vec2 pos){return srnoise(pos,0.0);}";
var noise_simplex = "#define GLSLIFY 1\n#include <noise_simplex_2D>\n#include <noise_simplex_3D>\n#include <noise_simplex_3D_grad>\n#include <noise_simplex_4D>\n";
var noise_simplex_2D = "#define GLSLIFY 1\nfloat simplex(vec2 v){const vec4 C=vec4(0.211324865405187,0.366025403784439,-0.577350269189626,0.024390243902439);vec2 i=floor(v+dot(v,C.yy));vec2 x0=v-i+dot(i,C.xx);vec2 i1;i1=(x0.x>x0.y)? vec2(1.0,0.0): vec2(0.0,1.0);vec4 x12=x0.xyxy+C.xxzz;x12.xy-=i1;i=mod289(i);vec3 p=permute(permute(i.y+vec3(0.0,i1.y,1.0))+i.x+vec3(0.0,i1.x,1.0));vec3 m=max(0.5-vec3(dot(x0,x0),dot(x12.xy,x12.xy),dot(x12.zw,x12.zw)),0.0);m=m*m;m=m*m;vec3 x=2.0*fract(p*C.www)-1.0;vec3 h=abs(x)-0.5;vec3 ox=floor(x+0.5);vec3 a0=x-ox;m*=1.79284291400159-0.85373472095314*(a0*a0+h*h);vec3 g;g.x=a0.x*x0.x+h.x*x0.y;g.yz=a0.yz*x12.xz+h.yz*x12.yw;return 130.0*dot(m,g);}";
var noise_simplex_3D = "#define GLSLIFY 1\nfloat simplex(vec3 v){const vec2 C=vec2(1.0/6.0,1.0/3.0);const vec4 D=vec4(0.0,0.5,1.0,2.0);vec3 i=floor(v+dot(v,C.yyy));vec3 x0=v-i+dot(i,C.xxx);vec3 g=step(x0.yzx,x0.xyz);vec3 l=1.0-g;vec3 i1=min(g.xyz,l.zxy);vec3 i2=max(g.xyz,l.zxy);vec3 x1=x0-i1+C.xxx;vec3 x2=x0-i2+C.yyy;vec3 x3=x0-D.yyy;i=mod289(i);vec4 p=permute(permute(permute(i.z+vec4(0.0,i1.z,i2.z,1.0))+i.y+vec4(0.0,i1.y,i2.y,1.0))+i.x+vec4(0.0,i1.x,i2.x,1.0));float n_=0.142857142857;vec3 ns=n_*D.wyz-D.xzx;vec4 j=p-49.0*floor(p*ns.z*ns.z);vec4 x_=floor(j*ns.z);vec4 y_=floor(j-7.0*x_);vec4 x=x_*ns.x+ns.yyyy;vec4 y=y_*ns.x+ns.yyyy;vec4 h=1.0-abs(x)-abs(y);vec4 b0=vec4(x.xy,y.xy);vec4 b1=vec4(x.zw,y.zw);vec4 s0=floor(b0)*2.0+1.0;vec4 s1=floor(b1)*2.0+1.0;vec4 sh=-step(h,vec4(0.0));vec4 a0=b0.xzyw+s0.xzyw*sh.xxyy;vec4 a1=b1.xzyw+s1.xzyw*sh.zzww;vec3 p0=vec3(a0.xy,h.x);vec3 p1=vec3(a0.zw,h.y);vec3 p2=vec3(a1.xy,h.z);vec3 p3=vec3(a1.zw,h.w);vec4 norm=taylorInvSqrt(vec4(dot(p0,p0),dot(p1,p1),dot(p2,p2),dot(p3,p3)));p0*=norm.x;p1*=norm.y;p2*=norm.z;p3*=norm.w;vec4 m=max(0.6-vec4(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),0.0);m=m*m;return 42.0*dot(m*m,vec4(dot(p0,x0),dot(p1,x1),dot(p2,x2),dot(p3,x3)));}";
var noise_simplex_3D_grad = "#define GLSLIFY 1\nfloat simplex(vec3 v,out vec3 gradient){const vec2 C=vec2(1.0/6.0,1.0/3.0);const vec4 D=vec4(0.0,0.5,1.0,2.0);vec3 i=floor(v+dot(v,C.yyy));vec3 x0=v-i+dot(i,C.xxx);vec3 g=step(x0.yzx,x0.xyz);vec3 l=1.0-g;vec3 i1=min(g.xyz,l.zxy);vec3 i2=max(g.xyz,l.zxy);vec3 x1=x0-i1+C.xxx;vec3 x2=x0-i2+C.yyy;vec3 x3=x0-D.yyy;i=mod289(i);vec4 p=permute(permute(permute(i.z+vec4(0.0,i1.z,i2.z,1.0))+i.y+vec4(0.0,i1.y,i2.y,1.0))+i.x+vec4(0.0,i1.x,i2.x,1.0));float n_=0.142857142857;vec3 ns=n_*D.wyz-D.xzx;vec4 j=p-49.0*floor(p*ns.z*ns.z);vec4 x_=floor(j*ns.z);vec4 y_=floor(j-7.0*x_);vec4 x=x_*ns.x+ns.yyyy;vec4 y=y_*ns.x+ns.yyyy;vec4 h=1.0-abs(x)-abs(y);vec4 b0=vec4(x.xy,y.xy);vec4 b1=vec4(x.zw,y.zw);vec4 s0=floor(b0)*2.0+1.0;vec4 s1=floor(b1)*2.0+1.0;vec4 sh=-step(h,vec4(0.0));vec4 a0=b0.xzyw+s0.xzyw*sh.xxyy;vec4 a1=b1.xzyw+s1.xzyw*sh.zzww;vec3 p0=vec3(a0.xy,h.x);vec3 p1=vec3(a0.zw,h.y);vec3 p2=vec3(a1.xy,h.z);vec3 p3=vec3(a1.zw,h.w);vec4 norm=taylorInvSqrt(vec4(dot(p0,p0),dot(p1,p1),dot(p2,p2),dot(p3,p3)));p0*=norm.x;p1*=norm.y;p2*=norm.z;p3*=norm.w;vec4 m=max(0.6-vec4(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),0.0);vec4 m2=m*m;vec4 m4=m2*m2;vec4 pdotx=vec4(dot(p0,x0),dot(p1,x1),dot(p2,x2),dot(p3,x3));vec4 temp=m2*m*pdotx;gradient=-8.0*(temp.x*x0+temp.y*x1+temp.z*x2+temp.w*x3);gradient+=m4.x*p0+m4.y*p1+m4.z*p2+m4.w*p3;gradient*=42.0;return 42.0*dot(m4,pdotx);}";
var noise_simplex_4D = "#define GLSLIFY 1\nvec4 grad4(float j,vec4 ip){const vec4 ones=vec4(1.0,1.0,1.0,-1.0);vec4 p,s;p.xyz=floor(fract(vec3(j)*ip.xyz)*7.0)*ip.z-1.0;p.w=1.5-dot(abs(p.xyz),ones.xyz);s=vec4(lessThan(p,vec4(0.0)));p.xyz=p.xyz+(s.xyz*2.0-1.0)*s.www;return p;}\n#define F4 0.309016994374947451\nfloat simplex(vec4 v){const vec4 C=vec4(0.138196601125011,0.276393202250021,0.414589803375032,-0.447213595499958);vec4 i=floor(v+dot(v,vec4(F4)));vec4 x0=v-i+dot(i,C.xxxx);vec4 i0;vec3 isX=step(x0.yzw,x0.xxx);vec3 isYZ=step(x0.zww,x0.yyz);i0.x=isX.x+isX.y+isX.z;i0.yzw=1.0-isX;i0.y+=isYZ.x+isYZ.y;i0.zw+=1.0-isYZ.xy;i0.z+=isYZ.z;i0.w+=1.0-isYZ.z;vec4 i3=clamp(i0,0.0,1.0);vec4 i2=clamp(i0-1.0,0.0,1.0);vec4 i1=clamp(i0-2.0,0.0,1.0);vec4 x1=x0-i1+C.xxxx;vec4 x2=x0-i2+C.yyyy;vec4 x3=x0-i3+C.zzzz;vec4 x4=x0+C.wwww;i=mod289(i);float j0=permute(permute(permute(permute(i.w)+i.z)+i.y)+i.x);vec4 j1=permute(permute(permute(permute(i.w+vec4(i1.w,i2.w,i3.w,1.0))+i.z+vec4(i1.z,i2.z,i3.z,1.0))+i.y+vec4(i1.y,i2.y,i3.y,1.0))+i.x+vec4(i1.x,i2.x,i3.x,1.0));vec4 ip=vec4(1.0/294.0,1.0/49.0,1.0/7.0,0.0);vec4 p0=grad4(j0,ip);vec4 p1=grad4(j1.x,ip);vec4 p2=grad4(j1.y,ip);vec4 p3=grad4(j1.z,ip);vec4 p4=grad4(j1.w,ip);vec4 norm=taylorInvSqrt(vec4(dot(p0,p0),dot(p1,p1),dot(p2,p2),dot(p3,p3)));p0*=norm.x;p1*=norm.y;p2*=norm.z;p3*=norm.w;p4*=taylorInvSqrt(dot(p4,p4));vec3 m0=max(0.6-vec3(dot(x0,x0),dot(x1,x1),dot(x2,x2)),0.0);vec2 m1=max(0.6-vec2(dot(x3,x3),dot(x4,x4)),0.0);m0=m0*m0;m1=m1*m1;return 49.0*(dot(m0*m0,vec3(dot(p0,x0),dot(p1,x1),dot(p2,x2)))+dot(m1*m1,vec2(dot(p3,x3),dot(p4,x4))));}";
var pbr_frag_define = "#define GLSLIFY 1\nuniform float u_alphaCutoff;uniform vec4 u_baseColor;uniform float u_metal;uniform float u_roughness;uniform vec3 u_PBRSpecularColor;uniform float u_glossiness;uniform vec3 u_emissiveColor;\n#ifdef CLEARCOAT\nuniform float u_clearCoat;uniform float u_clearCoatRoughness;\n#endif\nuniform float u_normalIntensity;uniform float u_occlusionIntensity;uniform float u_occlusionTextureCoord;\n#ifdef BASETEXTURE\nuniform sampler2D u_baseTexture;\n#endif\n#ifdef NORMALTEXTURE\nuniform sampler2D u_normalTexture;\n#endif\n#ifdef EMISSIVETEXTURE\nuniform sampler2D u_emissiveTexture;\n#endif\n#ifdef ROUGHNESSMETALLICTEXTURE\nuniform sampler2D u_roughnessMetallicTexture;\n#endif\n#ifdef SPECULARGLOSSINESSTEXTURE\nuniform sampler2D u_specularGlossinessTexture;\n#endif\n#ifdef OCCLUSIONTEXTURE\nuniform sampler2D u_occlusionTexture;\n#endif\n#ifdef HAS_CLEARCOATTEXTURE\nuniform sampler2D u_clearCoatTexture;\n#endif\n#ifdef HAS_CLEARCOATROUGHNESSTEXTURE\nuniform sampler2D u_clearCoatRoughnessTexture;\n#endif\n#ifdef HAS_CLEARCOATNORMALTEXTURE\nuniform sampler2D u_clearCoatNormalTexture;\n#endif\nstruct ReflectedLight{vec3 directDiffuse;vec3 directSpecular;vec3 indirectDiffuse;vec3 indirectSpecular;};struct Geometry{vec3 position;vec3 normal;vec3 viewDir;float dotNV;\n#ifdef CLEARCOAT\nvec3 clearCoatNormal;float clearCoatDotNV;\n#endif\n};struct Material{vec3 diffuseColor;float roughness;vec3 specularColor;float opacity;\n#ifdef CLEARCOAT\nfloat clearCoat;float clearCoatRoughness;\n#endif\n};uniform float material_IOR;";
var pbr_helper = "#define GLSLIFY 1\n#include <normal_get>\nfloat computeSpecularOcclusion(float ambientOcclusion,float roughness,float dotNV){return saturate(pow(dotNV+ambientOcclusion,exp2(-16.0*roughness-1.0))-1.0+ambientOcclusion);}float getAARoughnessFactor(vec3 normal){\n#ifdef HAS_DERIVATIVES\nvec3 dxy=max(abs(dFdx(normal)),abs(dFdy(normal)));return 0.04+max(max(dxy.x,dxy.y),dxy.z);\n#else\nreturn 0.04;\n#endif\n}void initGeometry(out Geometry geometry,bool isFrontFacing){geometry.position=v_pos;geometry.viewDir=normalize(u_cameraPos-v_pos);\n#if defined(NORMALTEXTURE) || defined(HAS_CLEARCOATNORMALTEXTURE)\nmat3 tbn=getTBN(isFrontFacing);\n#endif\n#ifdef NORMALTEXTURE\ngeometry.normal=getNormalByNormalTexture(tbn,u_normalTexture,u_normalIntensity,v_uv,isFrontFacing);\n#else\ngeometry.normal=getNormal(isFrontFacing);\n#endif\ngeometry.dotNV=saturate(dot(geometry.normal,geometry.viewDir));\n#ifdef CLEARCOAT\n#ifdef HAS_CLEARCOATNORMALTEXTURE\ngeometry.clearCoatNormal=getNormalByNormalTexture(tbn,u_clearCoatNormalTexture,u_normalIntensity,v_uv,isFrontFacing);\n#else\ngeometry.clearCoatNormal=getNormal(isFrontFacing);\n#endif\ngeometry.clearCoatDotNV=saturate(dot(geometry.clearCoatNormal,geometry.viewDir));\n#endif\n}void initMaterial(out Material material,const in Geometry geometry){vec4 baseColor=u_baseColor;float metal=u_metal;float roughness=u_roughness;vec3 specularColor=u_PBRSpecularColor;float glossiness=u_glossiness;float alphaCutoff=u_alphaCutoff;float F0=pow2((material_IOR-1.0)/(material_IOR+1.0));\n#ifdef BASETEXTURE\nvec4 baseTextureColor=texture2D(u_baseTexture,v_uv);\n#ifndef OASIS_COLORSPACE_GAMMA\nbaseTextureColor=gammaToLinear(baseTextureColor);\n#endif\nbaseColor*=baseTextureColor;\n#endif\n#ifdef O3_HAS_VERTEXCOLOR\nbaseColor*=v_color;\n#endif\n#ifdef ALPHA_CUTOFF\nif(baseColor.a<alphaCutoff){discard;}\n#endif\n#ifdef ROUGHNESSMETALLICTEXTURE\nvec4 metalRoughMapColor=texture2D(u_roughnessMetallicTexture,v_uv);roughness*=metalRoughMapColor.g;metal*=metalRoughMapColor.b;\n#endif\n#ifdef SPECULARGLOSSINESSTEXTURE\nvec4 specularGlossinessColor=texture2D(u_specularGlossinessTexture,v_uv);\n#ifndef OASIS_COLORSPACE_GAMMA\nspecularGlossinessColor=gammaToLinear(specularGlossinessColor);\n#endif\nspecularColor*=specularGlossinessColor.rgb;glossiness*=specularGlossinessColor.a;\n#endif\n#ifdef IS_METALLIC_WORKFLOW\nmaterial.diffuseColor=baseColor.rgb*(1.0-metal);material.specularColor=mix(vec3(F0),baseColor.rgb,metal);material.roughness=roughness;\n#else\nfloat specularStrength=max(max(specularColor.r,specularColor.g),specularColor.b);material.diffuseColor=baseColor.rgb*(1.0-specularStrength);material.specularColor=specularColor;material.roughness=1.0-glossiness;\n#endif\nmaterial.roughness=max(material.roughness,getAARoughnessFactor(geometry.normal));\n#ifdef CLEARCOAT\nmaterial.clearCoat=u_clearCoat;material.clearCoatRoughness=u_clearCoatRoughness;\n#ifdef HAS_CLEARCOATTEXTURE\nmaterial.clearCoat*=texture2D(u_clearCoatTexture,v_uv).r;\n#endif\n#ifdef HAS_CLEARCOATROUGHNESSTEXTURE\nmaterial.clearCoatRoughness*=texture2D(u_clearCoatRoughnessTexture,v_uv).g;\n#endif\nmaterial.clearCoat=saturate(material.clearCoat);material.clearCoatRoughness=max(material.clearCoatRoughness,getAARoughnessFactor(geometry.clearCoatNormal));\n#endif\n#ifdef OASIS_TRANSPARENT\nmaterial.opacity=baseColor.a;\n#else\nmaterial.opacity=1.0;\n#endif\n}\n#include <brdf>\n#include <direct_irradiance_frag_define>\n#include <ibl_frag_define>\n";
var brdf = "#define GLSLIFY 1\nfloat F_Schlick(float dotLH){return 0.04+0.96*(pow(1.0-dotLH,5.0));}vec3 F_Schlick(vec3 specularColor,float dotLH){float fresnel=exp2((-5.55473*dotLH-6.98316)*dotLH);return(1.0-specularColor)*fresnel+specularColor;}float G_GGX_SmithCorrelated(float alpha,float dotNL,float dotNV){float a2=pow2(alpha);float gv=dotNL*sqrt(a2+(1.0-a2)*pow2(dotNV));float gl=dotNV*sqrt(a2+(1.0-a2)*pow2(dotNL));return 0.5/max(gv+gl,EPSILON);}float D_GGX(float alpha,float dotNH){float a2=pow2(alpha);float denom=pow2(dotNH)*(a2-1.0)+1.0;return RECIPROCAL_PI*a2/pow2(denom);}vec3 BRDF_Specular_GGX(vec3 incidentDirection,vec3 viewDir,vec3 normal,vec3 specularColor,float roughness){float alpha=pow2(roughness);vec3 halfDir=normalize(incidentDirection+viewDir);float dotNL=saturate(dot(normal,incidentDirection));float dotNV=saturate(dot(normal,viewDir));float dotNH=saturate(dot(normal,halfDir));float dotLH=saturate(dot(incidentDirection,halfDir));vec3 F=F_Schlick(specularColor,dotLH);float G=G_GGX_SmithCorrelated(alpha,dotNL,dotNV);float D=D_GGX(alpha,dotNH);return F*(G*D);}vec3 BRDF_Diffuse_Lambert(vec3 diffuseColor){return RECIPROCAL_PI*diffuseColor;}";
var direct_irradiance_frag_define = "#define GLSLIFY 1\n#include <ShadowFragmentDeclaration>\nvoid addDirectRadiance(vec3 incidentDirection,vec3 color,Geometry geometry,Material material,inout ReflectedLight reflectedLight){float attenuation=1.0;\n#ifdef CLEARCOAT\nfloat clearCoatDotNL=saturate(dot(geometry.clearCoatNormal,incidentDirection));vec3 clearCoatIrradiance=clearCoatDotNL*color;reflectedLight.directSpecular+=material.clearCoat*clearCoatIrradiance*BRDF_Specular_GGX(incidentDirection,geometry.viewDir,geometry.clearCoatNormal,vec3(0.04),material.clearCoatRoughness);attenuation-=material.clearCoat*F_Schlick(geometry.clearCoatDotNV);\n#endif\nfloat dotNL=saturate(dot(geometry.normal,incidentDirection));vec3 irradiance=dotNL*color*PI;reflectedLight.directSpecular+=attenuation*irradiance*BRDF_Specular_GGX(incidentDirection,geometry.viewDir,geometry.normal,material.specularColor,material.roughness);reflectedLight.directDiffuse+=attenuation*irradiance*BRDF_Diffuse_Lambert(material.diffuseColor);}\n#ifdef O3_DIRECT_LIGHT_COUNT\nvoid addDirectionalDirectLightRadiance(DirectLight directionalLight,Geometry geometry,Material material,inout ReflectedLight reflectedLight){vec3 color=directionalLight.color;vec3 direction=-directionalLight.direction;addDirectRadiance(direction,color,geometry,material,reflectedLight);}\n#endif\n#ifdef O3_POINT_LIGHT_COUNT\nvoid addPointDirectLightRadiance(PointLight pointLight,Geometry geometry,Material material,inout ReflectedLight reflectedLight){vec3 lVector=pointLight.position-geometry.position;vec3 direction=normalize(lVector);float lightDistance=length(lVector);vec3 color=pointLight.color;color*=clamp(1.0-pow(lightDistance/pointLight.distance,4.0),0.0,1.0);addDirectRadiance(direction,color,geometry,material,reflectedLight);}\n#endif\n#ifdef O3_SPOT_LIGHT_COUNT\nvoid addSpotDirectLightRadiance(SpotLight spotLight,Geometry geometry,Material material,inout ReflectedLight reflectedLight){vec3 lVector=spotLight.position-geometry.position;vec3 direction=normalize(lVector);float lightDistance=length(lVector);float angleCos=dot(direction,-spotLight.direction);float spotEffect=smoothstep(spotLight.penumbraCos,spotLight.angleCos,angleCos);float decayEffect=clamp(1.0-pow(lightDistance/spotLight.distance,4.0),0.0,1.0);vec3 color=spotLight.color;color*=spotEffect*decayEffect;addDirectRadiance(direction,color,geometry,material,reflectedLight);}\n#endif\nvoid addTotalDirectRadiance(Geometry geometry,Material material,inout ReflectedLight reflectedLight){float shadowAttenuation=1.0;\n#ifdef O3_DIRECT_LIGHT_COUNT\nshadowAttenuation=1.0;\n#ifdef OASIS_CALCULATE_SHADOWS\nshadowAttenuation*=sampleShadowMap();int sunIndex=int(u_shadowInfo.z);\n#endif\nDirectLight directionalLight;for(int i=0;i<O3_DIRECT_LIGHT_COUNT;i++){if(isRendererCulledByLight(oasis_RendererLayer.xy,u_directLightCullingMask[i]))continue;directionalLight.color=u_directLightColor[i];\n#ifdef OASIS_CALCULATE_SHADOWS\nif(i==sunIndex){directionalLight.color*=shadowAttenuation;}\n#endif\ndirectionalLight.direction=u_directLightDirection[i];addDirectionalDirectLightRadiance(directionalLight,geometry,material,reflectedLight);}\n#endif\n#ifdef O3_POINT_LIGHT_COUNT\nPointLight pointLight;for(int i=0;i<O3_POINT_LIGHT_COUNT;i++){if(isRendererCulledByLight(oasis_RendererLayer.xy,u_pointLightCullingMask[i]))continue;pointLight.color=u_pointLightColor[i];pointLight.position=u_pointLightPosition[i];pointLight.distance=u_pointLightDistance[i];addPointDirectLightRadiance(pointLight,geometry,material,reflectedLight);}\n#endif\n#ifdef O3_SPOT_LIGHT_COUNT\nSpotLight spotLight;for(int i=0;i<O3_SPOT_LIGHT_COUNT;i++){if(isRendererCulledByLight(oasis_RendererLayer.xy,u_spotLightCullingMask[i]))continue;spotLight.color=u_spotLightColor[i];spotLight.position=u_spotLightPosition[i];spotLight.direction=u_spotLightDirection[i];spotLight.distance=u_spotLightDistance[i];spotLight.angleCos=u_spotLightAngleCos[i];spotLight.penumbraCos=u_spotLightPenumbraCos[i];addSpotDirectLightRadiance(spotLight,geometry,material,reflectedLight);}\n#endif\n}";
var ibl_frag_define = "#define GLSLIFY 1\nvec3 getLightProbeIrradiance(vec3 sh[9],vec3 normal){normal.x=-normal.x;vec3 result=sh[0]+sh[1]*(normal.y)+sh[2]*(normal.z)+sh[3]*(normal.x)+sh[4]*(normal.y*normal.x)+sh[5]*(normal.y*normal.z)+sh[6]*(3.0*normal.z*normal.z-1.0)+sh[7]*(normal.z*normal.x)+sh[8]*(normal.x*normal.x-normal.y*normal.y);return max(result,vec3(0.0));}vec3 envBRDFApprox(vec3 specularColor,float roughness,float dotNV){const vec4 c0=vec4(-1,-0.0275,-0.572,0.022);const vec4 c1=vec4(1,0.0425,1.04,-0.04);vec4 r=roughness*c0+c1;float a004=min(r.x*r.x,exp2(-9.28*dotNV))*r.x+r.y;vec2 AB=vec2(-1.04,1.04)*a004+r.zw;return specularColor*AB.x+AB.y;}float getSpecularMIPLevel(float roughness,int maxMIPLevel){return roughness*float(maxMIPLevel);}vec3 getLightProbeRadiance(vec3 viewDir,vec3 normal,float roughness,int maxMIPLevel,float specularIntensity){\n#ifndef O3_USE_SPECULAR_ENV\nreturn vec3(0);\n#else\nvec3 reflectVec=reflect(-viewDir,normal);reflectVec.x=-reflectVec.x;float specularMIPLevel=getSpecularMIPLevel(roughness,maxMIPLevel);\n#ifdef HAS_TEX_LOD\nvec4 envMapColor=textureCubeLodEXT(u_env_specularSampler,reflectVec,specularMIPLevel);\n#else\nvec4 envMapColor=textureCube(u_env_specularSampler,reflectVec,specularMIPLevel);\n#endif\n#ifdef O3_DECODE_ENV_RGBM\nenvMapColor.rgb=RGBMToLinear(envMapColor,5.0).rgb;\n#ifdef OASIS_COLORSPACE_GAMMA\nenvMapColor=linearToGamma(envMapColor);\n#endif\n#else\n#ifndef OASIS_COLORSPACE_GAMMA\nenvMapColor=gammaToLinear(envMapColor);\n#endif\n#endif\nreturn envMapColor.rgb*specularIntensity;\n#endif\n}";
var pbr_frag = "#define GLSLIFY 1\nGeometry geometry;Material material;ReflectedLight reflectedLight=ReflectedLight(vec3(0.0),vec3(0.0),vec3(0.0),vec3(0.0));initGeometry(geometry,gl_FrontFacing);initMaterial(material,geometry);addTotalDirectRadiance(geometry,material,reflectedLight);\n#ifdef O3_USE_SH\nvec3 irradiance=getLightProbeIrradiance(u_env_sh,geometry.normal);\n#ifdef OASIS_COLORSPACE_GAMMA\nirradiance=linearToGamma(vec4(irradiance,1.0)).rgb;\n#endif\nirradiance*=u_envMapLight.diffuseIntensity;\n#else\nvec3 irradiance=u_envMapLight.diffuse*u_envMapLight.diffuseIntensity;irradiance*=PI;\n#endif\nreflectedLight.indirectDiffuse+=irradiance*BRDF_Diffuse_Lambert(material.diffuseColor);vec3 radiance=getLightProbeRadiance(geometry.viewDir,geometry.normal,material.roughness,int(u_envMapLight.mipMapLevel),u_envMapLight.specularIntensity);float radianceAttenuation=1.0;\n#ifdef CLEARCOAT\nvec3 clearCoatRadiance=getLightProbeRadiance(geometry.viewDir,geometry.clearCoatNormal,material.clearCoatRoughness,int(u_envMapLight.mipMapLevel),u_envMapLight.specularIntensity);reflectedLight.indirectSpecular+=clearCoatRadiance*material.clearCoat*envBRDFApprox(vec3(0.04),material.clearCoatRoughness,geometry.clearCoatDotNV);radianceAttenuation-=material.clearCoat*F_Schlick(geometry.clearCoatDotNV);\n#endif\nreflectedLight.indirectSpecular+=radianceAttenuation*radiance*envBRDFApprox(material.specularColor,material.roughness,geometry.dotNV);\n#ifdef OCCLUSIONTEXTURE\nvec2 aoUV=v_uv;\n#ifdef O3_HAS_UV1\nif(u_occlusionTextureCoord==1.0){aoUV=v_uv1;}\n#endif\nfloat ambientOcclusion=(texture2D(u_occlusionTexture,aoUV).r-1.0)*u_occlusionIntensity+1.0;reflectedLight.indirectDiffuse*=ambientOcclusion;\n#ifdef O3_USE_SPECULAR_ENV\nreflectedLight.indirectSpecular*=computeSpecularOcclusion(ambientOcclusion,material.roughness,geometry.dotNV);\n#endif\n#endif\nvec3 emissiveRadiance=u_emissiveColor;\n#ifdef EMISSIVETEXTURE\nvec4 emissiveColor=texture2D(u_emissiveTexture,v_uv);\n#ifndef OASIS_COLORSPACE_GAMMA\nemissiveColor=gammaToLinear(emissiveColor);\n#endif\nemissiveRadiance*=emissiveColor.rgb;\n#endif\nvec3 totalRadiance=reflectedLight.directDiffuse+reflectedLight.indirectDiffuse+reflectedLight.directSpecular+reflectedLight.indirectSpecular+emissiveRadiance;vec4 targetColor=vec4(totalRadiance,material.opacity);gl_FragColor=targetColor;";
var PBRShaderLib = {
  pbr_frag_define,
  pbr_helper,
  brdf,
  direct_irradiance_frag_define,
  ibl_frag_define,
  pbr_frag
};
var ShadowCoord = "#define GLSLIFY 1\nuniform mat4 u_shadowMatrices[CASCADED_COUNT+1];uniform vec4 u_shadowSplitSpheres[4];mediump int computeCascadeIndex(vec3 positionWS){vec3 fromCenter0=positionWS-u_shadowSplitSpheres[0].xyz;vec3 fromCenter1=positionWS-u_shadowSplitSpheres[1].xyz;vec3 fromCenter2=positionWS-u_shadowSplitSpheres[2].xyz;vec3 fromCenter3=positionWS-u_shadowSplitSpheres[3].xyz;mediump vec4 comparison=vec4(dot(fromCenter0,fromCenter0)<u_shadowSplitSpheres[0].w,dot(fromCenter1,fromCenter1)<u_shadowSplitSpheres[1].w,dot(fromCenter2,fromCenter2)<u_shadowSplitSpheres[2].w,dot(fromCenter3,fromCenter3)<u_shadowSplitSpheres[3].w);comparison.yzw=clamp(comparison.yzw-comparison.xyz,0.0,1.0);mediump vec4 indexCoefficient=vec4(4.0,3.0,2.0,1.0);mediump int index=4-int(dot(comparison,indexCoefficient));return index;}vec3 getShadowCoord(){\n#if CASCADED_COUNT == 1\nmediump int cascadeIndex=0;\n#else\nmediump int cascadeIndex=computeCascadeIndex(v_pos);\n#endif\n#ifdef GRAPHICS_API_WEBGL2\nmat4 shadowMatrix=u_shadowMatrices[cascadeIndex];\n#else\nmat4 shadowMatrix;\n#if CASCADED_COUNT == 4\nif(cascadeIndex==0){shadowMatrix=u_shadowMatrices[0];}else if(cascadeIndex==1){shadowMatrix=u_shadowMatrices[1];}else if(cascadeIndex==2){shadowMatrix=u_shadowMatrices[2];}else if(cascadeIndex==3){shadowMatrix=u_shadowMatrices[3];}else{shadowMatrix=u_shadowMatrices[4];}\n#endif\n#if CASCADED_COUNT == 2\nif(cascadeIndex==0){shadowMatrix=u_shadowMatrices[0];}else if(cascadeIndex==1){shadowMatrix=u_shadowMatrices[1];}else{shadowMatrix=u_shadowMatrices[2];}\n#endif\n#if CASCADED_COUNT == 1\nif(cascadeIndex==0){shadowMatrix=u_shadowMatrices[0];}else{shadowMatrix=u_shadowMatrices[1];}\n#endif\n#endif\nvec4 shadowCoord=shadowMatrix*vec4(v_pos,1.0);return shadowCoord.xyz;}";
var ShadowFragmentDeclaration = "#define GLSLIFY 1\n#if defined(SHADOW_TYPE) && defined(OASIS_RECEIVE_SHADOWS)\n#define OASIS_CALCULATE_SHADOWS\n#endif\n#ifdef OASIS_CALCULATE_SHADOWS\n#if CASCADED_COUNT == 1\nvarying vec3 v_shadowCoord;\n#else\n#include <ShadowCoord>\n#endif\nuniform vec3 u_shadowInfo;uniform vec4 u_shadowMapSize;\n#ifdef GRAPHICS_API_WEBGL2\nuniform mediump sampler2DShadow u_shadowMap;\n#define SAMPLE_TEXTURE2D_SHADOW(textureName, coord3) textureLod(textureName, coord3 , 0.0)\n#define TEXTURE2D_SHADOW_PARAM(shadowMap) mediump sampler2DShadow shadowMap\n#else\nuniform sampler2D u_shadowMap;\n#ifdef OASIS_NO_DEPTH_TEXTURE\nconst vec4 bitShift=vec4(1.0,1.0/256.0,1.0/(256.0*256.0),1.0/(256.0*256.0*256.0));float unpack(const in vec4 rgbaDepth){return dot(rgbaDepth,bitShift);}\n#define SAMPLE_TEXTURE2D_SHADOW(textureName, coord3) (unpack(texture2D(textureName, coord3.xy)) < coord3.z ? 0.0 : 1.0)\n#else\n#define SAMPLE_TEXTURE2D_SHADOW(textureName, coord3) (texture2D(textureName, coord3.xy).r < coord3.z ? 0.0 : 1.0)\n#endif\n#define TEXTURE2D_SHADOW_PARAM(shadowMap) mediump sampler2D shadowMap\n#endif\n#if SHADOW_TYPE == 2\nfloat sampleShadowMapFiltered4(TEXTURE2D_SHADOW_PARAM(shadowMap),vec3 shadowCoord,vec4 shadowMapSize){float attenuation;vec4 attenuation4;vec2 offset=shadowMapSize.xy/2.0;vec3 shadowCoord0=shadowCoord+vec3(-offset,0.0);vec3 shadowCoord1=shadowCoord+vec3(offset.x,-offset.y,0.0);vec3 shadowCoord2=shadowCoord+vec3(-offset.x,offset.y,0.0);vec3 shadowCoord3=shadowCoord+vec3(offset,0.0);attenuation4.x=SAMPLE_TEXTURE2D_SHADOW(shadowMap,shadowCoord0);attenuation4.y=SAMPLE_TEXTURE2D_SHADOW(shadowMap,shadowCoord1);attenuation4.z=SAMPLE_TEXTURE2D_SHADOW(shadowMap,shadowCoord2);attenuation4.w=SAMPLE_TEXTURE2D_SHADOW(shadowMap,shadowCoord3);attenuation=dot(attenuation4,vec4(0.25));return attenuation;}\n#endif\n#if SHADOW_TYPE == 3\n#include <shadow_sample_tent>\nfloat sampleShadowMapFiltered9(TEXTURE2D_SHADOW_PARAM(shadowMap),vec3 shadowCoord,vec4 shadowmapSize){float attenuation;float fetchesWeights[9];vec2 fetchesUV[9];sampleShadowComputeSamplesTent5x5(shadowmapSize,shadowCoord.xy,fetchesWeights,fetchesUV);attenuation=fetchesWeights[0]*SAMPLE_TEXTURE2D_SHADOW(shadowMap,vec3(fetchesUV[0].xy,shadowCoord.z));attenuation+=fetchesWeights[1]*SAMPLE_TEXTURE2D_SHADOW(shadowMap,vec3(fetchesUV[1].xy,shadowCoord.z));attenuation+=fetchesWeights[2]*SAMPLE_TEXTURE2D_SHADOW(shadowMap,vec3(fetchesUV[2].xy,shadowCoord.z));attenuation+=fetchesWeights[3]*SAMPLE_TEXTURE2D_SHADOW(shadowMap,vec3(fetchesUV[3].xy,shadowCoord.z));attenuation+=fetchesWeights[4]*SAMPLE_TEXTURE2D_SHADOW(shadowMap,vec3(fetchesUV[4].xy,shadowCoord.z));attenuation+=fetchesWeights[5]*SAMPLE_TEXTURE2D_SHADOW(shadowMap,vec3(fetchesUV[5].xy,shadowCoord.z));attenuation+=fetchesWeights[6]*SAMPLE_TEXTURE2D_SHADOW(shadowMap,vec3(fetchesUV[6].xy,shadowCoord.z));attenuation+=fetchesWeights[7]*SAMPLE_TEXTURE2D_SHADOW(shadowMap,vec3(fetchesUV[7].xy,shadowCoord.z));attenuation+=fetchesWeights[8]*SAMPLE_TEXTURE2D_SHADOW(shadowMap,vec3(fetchesUV[8].xy,shadowCoord.z));return attenuation;}\n#endif\nfloat sampleShadowMap(){\n#if CASCADED_COUNT == 1\nvec3 shadowCoord=v_shadowCoord;\n#else\nvec3 shadowCoord=getShadowCoord();\n#endif\nfloat attenuation=1.0;if(shadowCoord.z>0.0&&shadowCoord.z<1.0){\n#if SHADOW_TYPE == 1\nattenuation=SAMPLE_TEXTURE2D_SHADOW(u_shadowMap,shadowCoord);\n#endif\n#if SHADOW_TYPE == 2\nattenuation=sampleShadowMapFiltered4(u_shadowMap,shadowCoord,u_shadowMapSize);\n#endif\n#if SHADOW_TYPE == 3\nattenuation=sampleShadowMapFiltered9(u_shadowMap,shadowCoord,u_shadowMapSize);\n#endif\nattenuation=mix(1.0,attenuation,u_shadowInfo.x);}return attenuation;}\n#endif\n";
var shadow_sample_tent = "#define GLSLIFY 1\nfloat sampleShadowGetIRTriangleTexelArea(float triangleHeight){return triangleHeight-0.5;}void sampleShadowGetTexelAreasTent3x3(float offset,out vec4 computedArea,out vec4 computedAreaUncut){float a=offset+0.5;float offsetSquaredHalved=a*a*0.5;computedAreaUncut.x=computedArea.x=offsetSquaredHalved-offset;computedAreaUncut.w=computedArea.w=offsetSquaredHalved;computedAreaUncut.y=sampleShadowGetIRTriangleTexelArea(1.5-offset);float clampedOffsetLeft=min(offset,0.0);float areaOfSmallLeftTriangle=clampedOffsetLeft*clampedOffsetLeft;computedArea.y=computedAreaUncut.y-areaOfSmallLeftTriangle;computedAreaUncut.z=sampleShadowGetIRTriangleTexelArea(1.5+offset);float clampedOffsetRight=max(offset,0.0);float areaOfSmallRightTriangle=clampedOffsetRight*clampedOffsetRight;computedArea.z=computedAreaUncut.z-areaOfSmallRightTriangle;}void sampleShadowGetTexelWeightsTent5x5(float offset,out vec3 texelsWeightsA,out vec3 texelsWeightsB){vec4 areaFrom3texelTriangle;vec4 areaUncutFrom3texelTriangle;sampleShadowGetTexelAreasTent3x3(offset,areaFrom3texelTriangle,areaUncutFrom3texelTriangle);texelsWeightsA.x=0.16*(areaFrom3texelTriangle.x);texelsWeightsA.y=0.16*(areaUncutFrom3texelTriangle.y);texelsWeightsA.z=0.16*(areaFrom3texelTriangle.y+1.0);texelsWeightsB.x=0.16*(areaFrom3texelTriangle.z+1.0);texelsWeightsB.y=0.16*(areaUncutFrom3texelTriangle.z);texelsWeightsB.z=0.16*(areaFrom3texelTriangle.w);}void sampleShadowComputeSamplesTent5x5(vec4 shadowMapTextureTexelSize,vec2 coord,out float fetchesWeights[9],out vec2 fetchesUV[9]){vec2 tentCenterInTexelSpace=coord.xy*shadowMapTextureTexelSize.zw;vec2 centerOfFetchesInTexelSpace=floor(tentCenterInTexelSpace+0.5);vec2 offsetFromTentCenterToCenterOfFetches=tentCenterInTexelSpace-centerOfFetchesInTexelSpace;vec3 texelsWeightsUA,texelsWeightsUB;vec3 texelsWeightsVA,texelsWeightsVB;sampleShadowGetTexelWeightsTent5x5(offsetFromTentCenterToCenterOfFetches.x,texelsWeightsUA,texelsWeightsUB);sampleShadowGetTexelWeightsTent5x5(offsetFromTentCenterToCenterOfFetches.y,texelsWeightsVA,texelsWeightsVB);vec3 fetchesWeightsU=vec3(texelsWeightsUA.xz,texelsWeightsUB.y)+vec3(texelsWeightsUA.y,texelsWeightsUB.xz);vec3 fetchesWeightsV=vec3(texelsWeightsVA.xz,texelsWeightsVB.y)+vec3(texelsWeightsVA.y,texelsWeightsVB.xz);vec3 fetchesOffsetsU=vec3(texelsWeightsUA.y,texelsWeightsUB.xz)/fetchesWeightsU.xyz+vec3(-2.5,-0.5,1.5);vec3 fetchesOffsetsV=vec3(texelsWeightsVA.y,texelsWeightsVB.xz)/fetchesWeightsV.xyz+vec3(-2.5,-0.5,1.5);fetchesOffsetsU*=shadowMapTextureTexelSize.xxx;fetchesOffsetsV*=shadowMapTextureTexelSize.yyy;vec2 bilinearFetchOrigin=centerOfFetchesInTexelSpace*shadowMapTextureTexelSize.xy;fetchesUV[0]=bilinearFetchOrigin+vec2(fetchesOffsetsU.x,fetchesOffsetsV.x);fetchesUV[1]=bilinearFetchOrigin+vec2(fetchesOffsetsU.y,fetchesOffsetsV.x);fetchesUV[2]=bilinearFetchOrigin+vec2(fetchesOffsetsU.z,fetchesOffsetsV.x);fetchesUV[3]=bilinearFetchOrigin+vec2(fetchesOffsetsU.x,fetchesOffsetsV.y);fetchesUV[4]=bilinearFetchOrigin+vec2(fetchesOffsetsU.y,fetchesOffsetsV.y);fetchesUV[5]=bilinearFetchOrigin+vec2(fetchesOffsetsU.z,fetchesOffsetsV.y);fetchesUV[6]=bilinearFetchOrigin+vec2(fetchesOffsetsU.x,fetchesOffsetsV.z);fetchesUV[7]=bilinearFetchOrigin+vec2(fetchesOffsetsU.y,fetchesOffsetsV.z);fetchesUV[8]=bilinearFetchOrigin+vec2(fetchesOffsetsU.z,fetchesOffsetsV.z);fetchesWeights[0]=fetchesWeightsU.x*fetchesWeightsV.x;fetchesWeights[1]=fetchesWeightsU.y*fetchesWeightsV.x;fetchesWeights[2]=fetchesWeightsU.z*fetchesWeightsV.x;fetchesWeights[3]=fetchesWeightsU.x*fetchesWeightsV.y;fetchesWeights[4]=fetchesWeightsU.y*fetchesWeightsV.y;fetchesWeights[5]=fetchesWeightsU.z*fetchesWeightsV.y;fetchesWeights[6]=fetchesWeightsU.x*fetchesWeightsV.z;fetchesWeights[7]=fetchesWeightsU.y*fetchesWeightsV.z;fetchesWeights[8]=fetchesWeightsU.z*fetchesWeightsV.z;}";
var ShadowVertexDeclaration = "#define GLSLIFY 1\n#if defined(SHADOW_TYPE) && defined(OASIS_RECEIVE_SHADOWS)\n#define OASIS_CALCULATE_SHADOWS\n#endif\n#ifdef OASIS_CALCULATE_SHADOWS\n#if CASCADED_COUNT==1\n#include <ShadowCoord>\nvarying vec3 v_shadowCoord;\n#endif\n#endif\n";
var ShadowVertex = "#define GLSLIFY 1\n#ifdef OASIS_CALCULATE_SHADOWS\n#if CASCADED_COUNT == 1\nv_shadowCoord=getShadowCoord();\n#endif\n#endif\n";
var ShadowLib = {
  ShadowCoord,
  ShadowFragmentDeclaration,
  shadow_sample_tent,
  ShadowVertexDeclaration,
  ShadowVertex
};
var normal_get = "#define GLSLIFY 1\nvec3 getNormal(bool isFrontFacing){\n#ifdef O3_HAS_NORMAL\nvec3 normal=normalize(v_normal);\n#elif defined(HAS_DERIVATIVES)\nvec3 pos_dx=dFdx(v_pos);vec3 pos_dy=dFdy(v_pos);vec3 normal=normalize(cross(pos_dx,pos_dy));\n#else\nvec3 normal=vec3(0,0,1);\n#endif\nnormal*=float(isFrontFacing)*2.0-1.0;return normal;}vec3 getNormalByNormalTexture(mat3 tbn,sampler2D normalTexture,float normalIntensity,vec2 uv,bool isFrontFacing){vec3 normal=texture2D(normalTexture,uv).rgb;normal=normalize(tbn*((2.0*normal-1.0)*vec3(normalIntensity,normalIntensity,1.0)));normal*=float(isFrontFacing)*2.0-1.0;return normal;}mat3 getTBN(bool isFrontFacing){\n#if defined(O3_HAS_NORMAL) && defined(O3_HAS_TANGENT) && ( defined(NORMALTEXTURE) || defined(HAS_CLEARCOATNORMALTEXTURE) )\nmat3 tbn=v_TBN;\n#else\nvec3 normal=getNormal(isFrontFacing);vec3 position=v_pos;vec2 uv=isFrontFacing? v_uv:-v_uv;\n#ifdef HAS_DERIVATIVES\nvec3 dp1=dFdx(position);vec3 dp2=dFdy(position);vec2 duv1=dFdx(uv);vec2 duv2=dFdy(uv);vec3 dp2perp=cross(dp2,normal);vec3 dp1perp=cross(normal,dp1);vec3 tangent=dp2perp*duv1.x+dp1perp*duv2.x;vec3 binormal=dp2perp*duv1.y+dp1perp*duv2.y;float invmax=inversesqrt(max(dot(tangent,tangent),dot(binormal,binormal)));mat3 tbn=mat3(tangent*invmax,binormal*invmax,normal);\n#else\nmat3 tbn=mat3(vec3(0.0),vec3(0.0),normal);\n#endif\n#endif\nreturn tbn;}";
var ShaderLib = _extends({
  common,
  common_vert,
  transform_declare,
  camera_declare,
  color_share,
  normal_share,
  uv_share,
  worldpos_share,
  FogVertexDeclaration,
  FogFragmentDeclaration,
  begin_normal_vert,
  begin_position_vert,
  position_vert,
  color_vert,
  normal_vert,
  skinning_vert,
  blendShape_input,
  blendShape_vert,
  uv_vert,
  worldpos_vert,
  FogVertex,
  light_frag_define,
  mobile_material_frag,
  FogFragment,
  begin_mobile_frag,
  begin_viewdir_frag,
  mobile_blinnphong_frag,
  noise_common,
  noise_cellular_2D,
  noise_cellular_2x2,
  noise_cellular_2x2x2,
  noise_cellular_3D,
  noise_cellular,
  noise_perlin_2D,
  noise_perlin_3D,
  noise_perlin_4D,
  noise_perlin,
  noise_psrd_2D,
  noise_simplex_2D,
  noise_simplex_3D_grad,
  noise_simplex_3D,
  noise_simplex_4D,
  noise_simplex
}, ShadowLib, PBRShaderLib, {
  normal_get
});
var ShaderFactory = function() {
  function ShaderFactory2() {
  }
  ShaderFactory2.parseCustomMacros = function parseCustomMacros(macros) {
    return macros.map(function(m) {
      return "#define " + m + "\n";
    }).join("");
  };
  ShaderFactory2.parseIncludes = function parseIncludes(src) {
    var replace = function replace2(match, slice) {
      var replace3 = ShaderLib[slice];
      if (replace3 === void 0) {
        Logger.error('Shader slice "' + match.trim() + '" not founded.');
        return "";
      }
      return ShaderFactory2.parseIncludes(replace3);
    };
    var regex = /^[ \t]*#include +<([\w\d.]+)>/gm;
    return src.replace(regex, replace);
  };
  ShaderFactory2.parseExtension = function parseExtension(extensions) {
    return extensions.map(function(e) {
      return "#extension " + e + " : enable\n";
    }).join("");
  };
  ShaderFactory2.convertTo300 = function convertTo300(shader, isFrag) {
    shader = shader.replace(/\battribute\b/g, "in");
    shader = shader.replace(/\bvarying\b/g, isFrag ? "in" : "out");
    shader = shader.replace(/\btexture(2D|Cube)\b/g, "texture");
    shader = shader.replace(/\btexture(2D|Cube)LodEXT\b/g, "textureLod");
    if (isFrag) {
      var isMRT = /\bgl_FragData\[.+?\]/g.test(shader);
      if (isMRT) {
        shader = shader.replace(/\bgl_FragColor\b/g, "gl_FragData[0]");
        var result = shader.match(/\bgl_FragData\[.+?\]/g);
        shader = this._replaceMRTShader(shader, result);
      } else {
        shader = shader.replace(/void\s+?main\s*\(/g, "out vec4 glFragColor;\nvoid main(");
        shader = shader.replace(/\bgl_FragColor\b/g, "glFragColor");
      }
    }
    return shader;
  };
  ShaderFactory2._replaceMRTShader = function _replaceMRTShader(shader, result) {
    var declaration = "";
    var mrtIndexSet = /* @__PURE__ */ new Set();
    for (var i = 0; i < result.length; i++) {
      var res = result[i].match(/\bgl_FragData\[(.+?)\]/);
      mrtIndexSet.add(res[1]);
    }
    mrtIndexSet.forEach(function(index) {
      declaration += "layout(location=" + index + ") out vec4 fragOutColor" + index + ";\n";
    });
    declaration += "void main(";
    shader = shader.replace(/\bgl_FragData\[(.+?)\]/g, "fragOutColor$1");
    shader = shader.replace(/void\s+?main\s*\(/g, declaration);
    return shader;
  };
  return ShaderFactory2;
}();
var ShaderDataGroup;
(function(ShaderDataGroup2) {
  ShaderDataGroup2[ShaderDataGroup2[
    /** Scene group. */
    "Scene"
  ] = 0] = "Scene";
  ShaderDataGroup2[ShaderDataGroup2[
    /** Camera group. */
    "Camera"
  ] = 1] = "Camera";
  ShaderDataGroup2[ShaderDataGroup2[
    /** Renderer group. */
    "Renderer"
  ] = 2] = "Renderer";
  ShaderDataGroup2[ShaderDataGroup2[
    /** material group. */
    "Material"
  ] = 3] = "Material";
})(ShaderDataGroup || (ShaderDataGroup = {}));
var ShaderUniform = function() {
  function ShaderUniform2(engine) {
    this.textureUseComporeMode = false;
    var rhi = engine._hardwareRenderer;
    this._rhi = rhi;
    this._gl = rhi.gl;
    this._colorSpace = engine.settings.colorSpace;
  }
  var _proto = ShaderUniform2.prototype;
  _proto.upload1f = function upload1f(shaderUniform, value) {
    if (this.cacheValue !== value) {
      this._gl.uniform1f(shaderUniform.location, value);
      this.cacheValue = value;
    }
  };
  _proto.upload1fv = function upload1fv(shaderUniform, value) {
    this._gl.uniform1fv(shaderUniform.location, value);
  };
  _proto.upload2f = function upload2f(shaderUniform, value) {
    var cacheValue = this.cacheValue;
    if (value.r !== void 0) {
      if (cacheValue.x !== value.r || cacheValue.y !== value.g) {
        if (this._colorSpace === ColorSpace.Linear) {
          this._gl.uniform2f(shaderUniform.location, Color.gammaToLinearSpace(value.r), Color.gammaToLinearSpace(value.g));
        } else {
          this._gl.uniform2f(shaderUniform.location, value.r, value.g);
        }
        cacheValue.x = value.r;
        cacheValue.y = value.g;
      }
    } else {
      if (cacheValue.x !== value.x || cacheValue.y !== value.y) {
        this._gl.uniform2f(shaderUniform.location, value.x, value.y);
        cacheValue.x = value.x;
        cacheValue.y = value.y;
      }
    }
  };
  _proto.upload2fv = function upload2fv(shaderUniform, value) {
    this._gl.uniform2fv(shaderUniform.location, value);
  };
  _proto.upload3f = function upload3f(shaderUniform, value) {
    var cacheValue = this.cacheValue;
    if (value.r !== void 0) {
      if (cacheValue.x !== value.r || cacheValue.y !== value.g || cacheValue.z !== value.b) {
        if (this._colorSpace === ColorSpace.Linear) {
          this._gl.uniform3f(shaderUniform.location, Color.gammaToLinearSpace(value.r), Color.gammaToLinearSpace(value.g), Color.gammaToLinearSpace(value.b));
        } else {
          this._gl.uniform3f(shaderUniform.location, value.r, value.g, value.b);
        }
        cacheValue.x = value.r;
        cacheValue.y = value.g;
        cacheValue.z = value.b;
      }
    } else {
      if (cacheValue.x !== value.x || cacheValue.y !== value.y || cacheValue.z !== value.z) {
        this._gl.uniform3f(shaderUniform.location, value.x, value.y, value.z);
        cacheValue.x = value.x;
        cacheValue.y = value.y;
        cacheValue.z = value.z;
      }
    }
  };
  _proto.upload3fv = function upload3fv(shaderUniform, value) {
    this._gl.uniform3fv(shaderUniform.location, value);
  };
  _proto.upload4f = function upload4f(shaderUniform, value) {
    var cacheValue = this.cacheValue;
    if (value.r !== void 0) {
      if (cacheValue.x !== value.r || cacheValue.y !== value.g || cacheValue.z !== value.b || cacheValue.w !== value.a) {
        if (this._colorSpace === ColorSpace.Linear) {
          this._gl.uniform4f(shaderUniform.location, Color.gammaToLinearSpace(value.r), Color.gammaToLinearSpace(value.g), Color.gammaToLinearSpace(value.b), value.a);
        } else {
          this._gl.uniform4f(shaderUniform.location, value.r, value.g, value.b, value.a);
        }
        cacheValue.x = value.r;
        cacheValue.y = value.g;
        cacheValue.z = value.b;
        cacheValue.w = value.a;
      }
    } else {
      if (cacheValue.x !== value.x || cacheValue.y !== value.y || cacheValue.z !== value.z || cacheValue.w !== value.w) {
        this._gl.uniform4f(shaderUniform.location, value.x, value.y, value.z, value.w);
        cacheValue.x = value.x;
        cacheValue.y = value.y;
        cacheValue.z = value.z;
        cacheValue.w = value.w;
      }
    }
  };
  _proto.upload4fv = function upload4fv(shaderUniform, value) {
    this._gl.uniform4fv(shaderUniform.location, value);
  };
  _proto.upload1i = function upload1i(shaderUniform, value) {
    if (this.cacheValue !== value) {
      this._gl.uniform1i(shaderUniform.location, value);
      this.cacheValue = value;
    }
  };
  _proto.upload1iv = function upload1iv(shaderUniform, value) {
    this._gl.uniform1iv(shaderUniform.location, value);
  };
  _proto.upload2i = function upload2i(shaderUniform, value) {
    var cacheValue = this.cacheValue;
    if (value.r !== void 0) {
      if (cacheValue.x !== value.r || cacheValue.y !== value.g) {
        this._gl.uniform2i(shaderUniform.location, value.r, value.g);
        cacheValue.x = value.r;
        cacheValue.y = value.g;
      }
    } else {
      if (cacheValue.x !== value.x || cacheValue.y !== value.y) {
        this._gl.uniform2i(shaderUniform.location, value.x, value.y);
        cacheValue.x = value.x;
        cacheValue.y = value.y;
      }
    }
  };
  _proto.upload2iv = function upload2iv(shaderUniform, value) {
    this._gl.uniform2iv(shaderUniform.location, value);
  };
  _proto.upload3i = function upload3i(shaderUniform, value) {
    var cacheValue = this.cacheValue;
    if (value.r !== void 0) {
      if (cacheValue.x !== value.r || cacheValue.y !== value.g || cacheValue.z !== value.b) {
        this._gl.uniform3i(shaderUniform.location, value.r, value.g, value.b);
        cacheValue.x = value.r;
        cacheValue.y = value.g;
        cacheValue.z = value.b;
      }
    } else {
      if (cacheValue.x !== value.x || cacheValue.y !== value.y || cacheValue.z !== value.z) {
        this._gl.uniform3i(shaderUniform.location, value.x, value.y, value.z);
        cacheValue.x = value.x;
        cacheValue.y = value.y;
        cacheValue.z = value.z;
      }
    }
  };
  _proto.upload3iv = function upload3iv(shaderUniform, value) {
    this._gl.uniform3iv(shaderUniform.location, value);
  };
  _proto.upload4i = function upload4i(shaderUniform, value) {
    var cacheValue = this.cacheValue;
    if (value.r !== void 0) {
      if (cacheValue.x !== value.r || cacheValue.y !== value.g || cacheValue.z !== value.b || cacheValue.w !== value.a) {
        this._gl.uniform4i(shaderUniform.location, value.r, value.g, value.b, value.a);
        cacheValue.x = value.r;
        cacheValue.y = value.g;
        cacheValue.z = value.b;
        cacheValue.w = value.a;
      }
    } else {
      if (cacheValue.x !== value.x || cacheValue.y !== value.y || cacheValue.z !== value.z || cacheValue.w !== value.w) {
        this._gl.uniform4i(shaderUniform.location, value.x, value.y, value.z, value.w);
        cacheValue.x = value.x;
        cacheValue.y = value.y;
        cacheValue.z = value.z;
        cacheValue.w = value.w;
      }
    }
  };
  _proto.upload4iv = function upload4iv(shaderUniform, value) {
    this._gl.uniform4iv(shaderUniform.location, value);
  };
  _proto.uploadMat4 = function uploadMat4(shaderUniform, value) {
    this._gl.uniformMatrix4fv(shaderUniform.location, false, value.elements);
  };
  _proto.uploadMat4v = function uploadMat4v(shaderUniform, value) {
    this._gl.uniformMatrix4fv(shaderUniform.location, false, value);
  };
  _proto.uploadTexture = function uploadTexture(shaderUniform, value) {
    var rhi = this._rhi;
    rhi.activeTexture(shaderUniform.textureIndex);
    rhi.bindTexture(value._platformTexture);
    value._setUseDepthCompareMode(shaderUniform.textureUseComporeMode);
  };
  _proto.uploadTextureArray = function uploadTextureArray(shaderUniform, value) {
    var rhi = this._rhi;
    var textureIndices = shaderUniform.textureIndex;
    for (var i = 0; i < value.length; i++) {
      var texture = value[i];
      rhi.activeTexture(textureIndices[i]);
      rhi.bindTexture(texture._platformTexture);
      texture._setUseDepthCompareMode(shaderUniform.textureUseComporeMode);
    }
  };
  return ShaderUniform2;
}();
var ShaderUniformBlock = function ShaderUniformBlock2() {
  this.constUniforms = [];
  this.textureUniforms = [];
};
var ShaderProgram = function() {
  function ShaderProgram2(engine, vertexSource, fragmentSource) {
    this.sceneUniformBlock = new ShaderUniformBlock();
    this.cameraUniformBlock = new ShaderUniformBlock();
    this.rendererUniformBlock = new ShaderUniformBlock();
    this.materialUniformBlock = new ShaderUniformBlock();
    this.otherUniformBlock = new ShaderUniformBlock();
    this._uploadRenderCount = -1;
    this.attributeLocation = /* @__PURE__ */ Object.create(null);
    this._activeTextureUint = 0;
    this._engine = engine;
    this._gl = engine._hardwareRenderer.gl;
    this._glProgram = this._createProgram(vertexSource, fragmentSource);
    if (this._glProgram) {
      this._isValid = true;
      this._recordLocation();
    } else {
      this._isValid = false;
    }
    this.id = ShaderProgram2._counter++;
  }
  var _proto = ShaderProgram2.prototype;
  _proto.uploadAll = function uploadAll(uniformBlock, shaderData) {
    this.uploadUniforms(uniformBlock, shaderData);
    this.uploadTextures(uniformBlock, shaderData);
  };
  _proto.uploadUniforms = function uploadUniforms(uniformBlock, shaderData) {
    var propertyValueMap = shaderData._propertyValueMap;
    var constUniforms = uniformBlock.constUniforms;
    for (var i = 0, n = constUniforms.length; i < n; i++) {
      var uniform = constUniforms[i];
      var data = propertyValueMap[uniform.propertyId];
      data != null && uniform.applyFunc(uniform, data);
    }
  };
  _proto.uploadTextures = function uploadTextures(uniformBlock, shaderData) {
    var propertyValueMap = shaderData._propertyValueMap;
    var textureUniforms = uniformBlock.textureUniforms;
    if (textureUniforms) {
      for (var i = 0, n = textureUniforms.length; i < n; i++) {
        var uniform = textureUniforms[i];
        var texture = propertyValueMap[uniform.propertyId];
        if (texture && !texture.destroyed) {
          uniform.applyFunc(uniform, texture);
        } else {
          uniform.applyFunc(uniform, uniform.textureDefault);
        }
      }
    }
  };
  _proto.uploadUnGroupTextures = function uploadUnGroupTextures() {
    var textureUniforms = this.otherUniformBlock.textureUniforms;
    if (textureUniforms) {
      for (var i = 0, n = textureUniforms.length; i < n; i++) {
        var uniform = textureUniforms[i];
        uniform.applyFunc(uniform, uniform.textureDefault);
      }
    }
  };
  _proto.groupingOtherUniformBlock = function groupingOtherUniformBlock() {
    var _this_otherUniformBlock = this.otherUniformBlock, constUniforms = _this_otherUniformBlock.constUniforms, textureUniforms = _this_otherUniformBlock.textureUniforms;
    constUniforms.length > 0 && this._groupingSubOtherUniforms(constUniforms, false);
    textureUniforms.length > 0 && this._groupingSubOtherUniforms(textureUniforms, true);
  };
  _proto.bind = function bind() {
    var rhi = this._engine._hardwareRenderer;
    if (rhi._currentBind !== this) {
      this._gl.useProgram(this._glProgram);
      rhi._currentBind = this;
      return true;
    } else {
      return false;
    }
  };
  _proto.destroy = function destroy() {
    var gl = this._gl;
    this._vertexShader && gl.deleteShader(this._vertexShader);
    this._fragmentShader && gl.deleteShader(this._fragmentShader);
    this._glProgram && gl.deleteProgram(this._glProgram);
  };
  _proto._groupingSubOtherUniforms = function _groupingSubOtherUniforms(uniforms, isTexture) {
    for (var i = uniforms.length - 1; i >= 0; i--) {
      var uniform = uniforms[i];
      var group = Shader._getShaderPropertyGroup(uniform.name);
      if (group !== void 0) {
        uniforms.splice(uniforms.indexOf(uniform), 1);
        this._groupingUniform(uniform, group, isTexture);
      }
    }
  };
  _proto._groupingUniform = function _groupingUniform(uniform, group, isTexture) {
    switch (group) {
      case ShaderDataGroup.Scene:
        if (isTexture) {
          this.sceneUniformBlock.textureUniforms.push(uniform);
        } else {
          this.sceneUniformBlock.constUniforms.push(uniform);
        }
        break;
      case ShaderDataGroup.Camera:
        if (isTexture) {
          this.cameraUniformBlock.textureUniforms.push(uniform);
        } else {
          this.cameraUniformBlock.constUniforms.push(uniform);
        }
        break;
      case ShaderDataGroup.Renderer:
        if (isTexture) {
          this.rendererUniformBlock.textureUniforms.push(uniform);
        } else {
          this.rendererUniformBlock.constUniforms.push(uniform);
        }
        break;
      case ShaderDataGroup.Material:
        if (isTexture) {
          this.materialUniformBlock.textureUniforms.push(uniform);
        } else {
          this.materialUniformBlock.constUniforms.push(uniform);
        }
        break;
      default:
        if (isTexture) {
          this.otherUniformBlock.textureUniforms.push(uniform);
        } else {
          this.otherUniformBlock.constUniforms.push(uniform);
        }
    }
  };
  _proto._createProgram = function _createProgram(vertexSource, fragmentSource) {
    var gl = this._gl;
    var vertexShader = this._createShader(gl.VERTEX_SHADER, vertexSource);
    if (!vertexShader) {
      return null;
    }
    var fragmentShader = this._createShader(gl.FRAGMENT_SHADER, fragmentSource);
    if (!fragmentShader) {
      return null;
    }
    var program = gl.createProgram();
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.linkProgram(program);
    gl.validateProgram(program);
    if (gl.isContextLost()) {
      Logger.error("Context lost while linking program.");
      gl.deleteShader(vertexShader);
      gl.deleteShader(fragmentShader);
      return null;
    }
    if (Logger.isEnabled && !gl.getProgramParameter(program, gl.LINK_STATUS)) {
      Logger.error("Could not link WebGL program. \n" + gl.getProgramInfoLog(program));
      gl.deleteProgram(program);
      return null;
    }
    this._vertexShader = vertexShader;
    this._fragmentShader = fragmentShader;
    return program;
  };
  _proto._createShader = function _createShader(shaderType, shaderSource) {
    var gl = this._gl;
    var shader = gl.createShader(shaderType);
    if (!shader) {
      console.warn("Context lost while create shader.");
      return null;
    }
    gl.shaderSource(shader, shaderSource);
    gl.compileShader(shader);
    if (gl.isContextLost()) {
      console.warn("Context lost while compiling shader.");
      gl.deleteShader(shader);
      return null;
    }
    if (Logger.isEnabled && !gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      console.warn("Could not compile WebGL shader.\n" + gl.getShaderInfoLog(shader), ShaderProgram2._addLineNum(shaderSource));
      gl.deleteShader(shader);
      return null;
    }
    return shader;
  };
  _proto._recordLocation = function _recordLocation() {
    var _this = this;
    var gl = this._gl;
    var program = this._glProgram;
    var uniformInfos = this._getUniformInfos();
    var attributeInfos = this._getAttributeInfos();
    uniformInfos.forEach(function(param) {
      var name = param.name, size = param.size, type = param.type;
      var shaderUniform = new ShaderUniform(_this._engine);
      var isArray = false;
      var isTexture = false;
      if (name.indexOf("[0]") > 0) {
        name = name.substr(0, name.length - 3);
        isArray = true;
      }
      var location = gl.getUniformLocation(program, name);
      shaderUniform.name = name;
      shaderUniform.propertyId = Shader.getPropertyByName(name)._uniqueId;
      shaderUniform.location = location;
      switch (type) {
        case gl.FLOAT:
          if (isArray) {
            shaderUniform.applyFunc = shaderUniform.upload1fv;
          } else {
            shaderUniform.applyFunc = shaderUniform.upload1f;
            shaderUniform.cacheValue = 0;
          }
          break;
        case gl.FLOAT_VEC2:
          if (isArray) {
            shaderUniform.applyFunc = shaderUniform.upload2fv;
          } else {
            shaderUniform.applyFunc = shaderUniform.upload2f;
            shaderUniform.cacheValue = new Vector2(0, 0);
          }
          break;
        case gl.FLOAT_VEC3:
          if (isArray) {
            shaderUniform.applyFunc = shaderUniform.upload3fv;
          } else {
            shaderUniform.applyFunc = shaderUniform.upload3f;
            shaderUniform.cacheValue = new Vector3(0, 0, 0);
          }
          break;
        case gl.FLOAT_VEC4:
          if (isArray) {
            shaderUniform.applyFunc = shaderUniform.upload4fv;
          } else {
            shaderUniform.applyFunc = shaderUniform.upload4f;
            shaderUniform.cacheValue = new Vector4(0, 0, 0, 0);
          }
          break;
        case gl.BOOL:
        case gl.INT:
          if (isArray) {
            shaderUniform.applyFunc = shaderUniform.upload1iv;
          } else {
            shaderUniform.applyFunc = shaderUniform.upload1i;
            shaderUniform.cacheValue = 0;
          }
          break;
        case gl.BOOL_VEC2:
        case gl.INT_VEC2:
          if (isArray) {
            shaderUniform.applyFunc = shaderUniform.upload2iv;
          } else {
            shaderUniform.applyFunc = shaderUniform.upload2i;
            shaderUniform.cacheValue = new Vector2(0, 0);
          }
          break;
        case gl.BOOL_VEC3:
        case gl.INT_VEC3:
          shaderUniform.applyFunc = isArray ? shaderUniform.upload3iv : shaderUniform.upload3i;
          shaderUniform.cacheValue = new Vector3(0, 0, 0);
          break;
        case gl.BOOL_VEC4:
        case gl.INT_VEC4:
          if (isArray) {
            shaderUniform.applyFunc = shaderUniform.upload4iv;
          } else {
            shaderUniform.applyFunc = shaderUniform.upload4i;
            shaderUniform.cacheValue = new Vector4(0, 0, 0);
          }
          break;
        case gl.FLOAT_MAT4:
          shaderUniform.applyFunc = isArray ? shaderUniform.uploadMat4v : shaderUniform.uploadMat4;
          break;
        case gl.SAMPLER_2D:
        case gl.SAMPLER_CUBE:
        case gl.SAMPLER_2D_ARRAY:
        case gl.SAMPLER_2D_SHADOW:
          var defaultTexture;
          switch (type) {
            case gl.SAMPLER_2D:
              defaultTexture = _this._engine._magentaTexture2D;
              break;
            case gl.SAMPLER_CUBE:
              defaultTexture = _this._engine._magentaTextureCube;
              break;
            case gl.SAMPLER_2D_ARRAY:
              defaultTexture = _this._engine._magentaTexture2DArray;
              break;
            case gl.SAMPLER_2D_SHADOW:
              defaultTexture = _this._engine._depthTexture2D;
              shaderUniform.textureUseComporeMode = true;
              break;
          }
          isTexture = true;
          if (isArray) {
            var defaultTextures = new Array(size);
            var textureIndices = new Int32Array(size);
            var glTextureIndices = new Array(size);
            for (var i = 0; i < size; i++) {
              defaultTextures[i] = defaultTexture;
              textureIndices[i] = _this._activeTextureUint;
              glTextureIndices[i] = gl.TEXTURE0 + _this._activeTextureUint++;
            }
            shaderUniform.textureDefault = defaultTextures;
            shaderUniform.textureIndex = glTextureIndices;
            shaderUniform.applyFunc = shaderUniform.uploadTextureArray;
            _this.bind();
            gl.uniform1iv(location, textureIndices);
          } else {
            var glTextureIndex = gl.TEXTURE0 + _this._activeTextureUint;
            shaderUniform.textureDefault = defaultTexture;
            shaderUniform.textureIndex = glTextureIndex;
            shaderUniform.applyFunc = shaderUniform.uploadTexture;
            _this.bind();
            gl.uniform1i(location, _this._activeTextureUint++);
          }
          break;
        default:
          throw new Error("Unsupported uniform type");
      }
      var group = Shader._getShaderPropertyGroup(name);
      _this._groupingUniform(shaderUniform, group, isTexture);
    });
    attributeInfos.forEach(function(param) {
      var name = param.name;
      _this.attributeLocation[name] = gl.getAttribLocation(program, name);
    });
  };
  _proto._getUniformInfos = function _getUniformInfos() {
    var gl = this._gl;
    var program = this._glProgram;
    var uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
    var uniformInfos = new Array(uniformCount);
    for (var i = 0; i < uniformCount; ++i) {
      var info2 = gl.getActiveUniform(program, i);
      uniformInfos[i] = info2;
    }
    return uniformInfos;
  };
  _proto._getAttributeInfos = function _getAttributeInfos() {
    var gl = this._gl;
    var program = this._glProgram;
    var attributeInfos = new Array();
    var attributeCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
    for (var i = 0; i < attributeCount; ++i) {
      var info2 = gl.getActiveAttrib(program, i);
      attributeInfos[i] = info2;
    }
    return attributeInfos;
  };
  ShaderProgram2._addLineNum = function _addLineNum(str) {
    var lines = str.split("\n");
    var limitLength = (lines.length + 1).toString().length + 6;
    var prefix;
    return lines.map(function(line, index) {
      prefix = "0:" + (index + 1);
      if (prefix.length >= limitLength)
        return prefix.substring(0, limitLength) + line;
      for (var i = 0; i < limitLength - prefix.length; i++)
        prefix += " ";
      return prefix + line;
    }).join("\n");
  };
  _create_class2(ShaderProgram2, [
    {
      key: "isValid",
      get: (
        /**
        * Whether this shader program is valid.
        */
        function get() {
          return this._isValid;
        }
      )
    }
  ]);
  return ShaderProgram2;
}();
(function() {
  ShaderProgram._counter = 0;
})();
var ShaderPass = function() {
  function ShaderPass2(vertexSource, fragmentSource) {
    this._shaderPassId = 0;
    this._shaderPassId = ShaderPass2._shaderPassCounter++;
    this._vertexSource = vertexSource;
    this._fragmentSource = fragmentSource;
  }
  var _proto = ShaderPass2.prototype;
  _proto._getShaderProgram = function _getShaderProgram(engine, macroCollection) {
    var shaderProgramPool = engine._getShaderProgramPool(this);
    var shaderProgram = shaderProgramPool.get(macroCollection);
    if (shaderProgram) {
      return shaderProgram;
    }
    var isWebGL2 = engine._hardwareRenderer.isWebGL2;
    var macroNameList = [];
    Shader._getNamesByMacros(macroCollection, macroNameList);
    var macroNameStr = ShaderFactory.parseCustomMacros(macroNameList);
    var versionStr = isWebGL2 ? "#version 300 es" : "#version 100";
    var graphicAPI = isWebGL2 ? "#define GRAPHICS_API_WEBGL2" : "#define GRAPHICS_API_WEBGL1";
    var precisionStr = "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n      precision highp int;\n    #else\n      precision mediump float;\n      precision mediump int;\n    #endif\n    ";
    if (engine._hardwareRenderer.canIUse(GLCapabilityType.shaderTextureLod)) {
      precisionStr += "#define HAS_TEX_LOD\n";
    }
    if (engine._hardwareRenderer.canIUse(GLCapabilityType.standardDerivatives)) {
      precisionStr += "#define HAS_DERIVATIVES\n";
    }
    var vertexSource = ShaderFactory.parseIncludes(" " + versionStr + "\n        " + graphicAPI + "\n        " + macroNameStr + "\n      " + this._vertexSource);
    var fragmentSource = ShaderFactory.parseIncludes(" " + versionStr + "\n        " + graphicAPI + "\n        " + (isWebGL2 ? "" : ShaderFactory.parseExtension(Shader._shaderExtension)) + "\n        " + precisionStr + "\n        " + macroNameStr + "\n      " + this._fragmentSource);
    if (isWebGL2) {
      vertexSource = ShaderFactory.convertTo300(vertexSource);
      fragmentSource = ShaderFactory.convertTo300(fragmentSource, true);
    }
    shaderProgram = new ShaderProgram(engine, vertexSource, fragmentSource);
    shaderProgramPool.cache(shaderProgram);
    return shaderProgram;
  };
  return ShaderPass2;
}();
(function() {
  ShaderPass._shaderPassCounter = 0;
})();
var ShaderProperty = function() {
  function ShaderProperty2(name) {
    this.name = name;
    this._uniqueId = ShaderProperty2._propertyNameCounter++;
  }
  _create_class2(ShaderProperty2, [
    {
      key: "type",
      get: (
        /**
        * Shader property type.
        */
        function get() {
          return this._type;
        }
      )
    }
  ]);
  return ShaderProperty2;
}();
(function() {
  ShaderProperty._propertyNameCounter = 0;
})();
var Shader = function() {
  function Shader2(name, vertexSourceOrShaderPasses, fragmentSource) {
    this._passes = [];
    this.name = name;
    if (typeof vertexSourceOrShaderPasses === "string") {
      this._passes.push(new ShaderPass(vertexSourceOrShaderPasses, fragmentSource));
    } else {
      var passCount = vertexSourceOrShaderPasses.length;
      if (passCount < 1) {
        throw "Shader pass count must large than 0.";
      }
      for (var i = 0; i < passCount; i++) {
        this._passes.push(vertexSourceOrShaderPasses[i]);
      }
    }
  }
  var _proto = Shader2.prototype;
  _proto.compileVariant = function compileVariant(engine, macros) {
    var compileMacros = Shader2._compileMacros;
    compileMacros.clear();
    for (var i = 0, n = macros.length; i < n; i++) {
      compileMacros.enable(Shader2.getMacroByName(macros[i]));
    }
    var isValid2 = true;
    var passes = this._passes;
    for (var i1 = 0, n1 = passes.length; i1 < n1; i1++) {
      isValid2 && (isValid2 = passes[i1]._getShaderProgram(engine, compileMacros).isValid);
    }
    return isValid2;
  };
  Shader2.create = function create(name, vertexSourceOrShaderPasses, fragmentSource) {
    var shaderMap = Shader2._shaderMap;
    if (shaderMap[name]) {
      throw 'Shader named "' + name + '" already exists.';
    }
    return shaderMap[name] = new Shader2(name, vertexSourceOrShaderPasses, fragmentSource);
  };
  Shader2.find = function find(name) {
    return Shader2._shaderMap[name];
  };
  Shader2.getMacroByName = function getMacroByName(name, value) {
    var key = value ? name + " " + value : name;
    var macro = Shader2._macroMap[key];
    if (!macro) {
      var maskMap = Shader2._macroMaskMap;
      var counter = Shader2._macroCounter;
      var index = Math.floor(counter / 32);
      var bit = counter % 32;
      macro = new ShaderMacro(name, value, index, 1 << bit);
      Shader2._macroMap[key] = macro;
      if (index == maskMap.length) {
        maskMap.length++;
        maskMap[index] = new Array(32);
      }
      maskMap[index][bit] = key;
      Shader2._macroCounter++;
    }
    return macro;
  };
  Shader2.getPropertyByName = function getPropertyByName(name) {
    var propertyNameMap = Shader2._propertyNameMap;
    if (propertyNameMap[name] != null) {
      return propertyNameMap[name];
    } else {
      var property = new ShaderProperty(name);
      propertyNameMap[name] = property;
      Shader2._propertyIdMap[property._uniqueId] = property;
      return property;
    }
  };
  Shader2._getShaderPropertyGroup = function _getShaderPropertyGroup(propertyName) {
    var shaderProperty = Shader2._propertyNameMap[propertyName];
    return shaderProperty == null ? void 0 : shaderProperty._group;
  };
  Shader2._getNamesByMacros = function _getNamesByMacros(macros, out) {
    var maskMap = Shader2._macroMaskMap;
    var mask = macros._mask;
    out.length = 0;
    for (var i = 0, n = macros._length; i < n; i++) {
      var subMaskMap = maskMap[i];
      var subMask = mask[i];
      var m = subMask < 0 ? 32 : Math.floor(Math.log2(subMask)) + 1;
      for (var j = 0; j < m; j++) {
        if (subMask & 1 << j) {
          out.push(subMaskMap[j]);
        }
      }
    }
  };
  _create_class2(Shader2, [
    {
      key: "passes",
      get: (
        /**
        *  Shader passes.
        */
        function get() {
          return this._passes;
        }
      )
    }
  ]);
  return Shader2;
}();
(function() {
  Shader._compileMacros = new ShaderMacroCollection();
})();
(function() {
  Shader._shaderExtension = [
    "GL_EXT_shader_texture_lod",
    "GL_OES_standard_derivatives",
    "GL_EXT_draw_buffers"
  ];
})();
(function() {
  Shader._propertyIdMap = /* @__PURE__ */ Object.create(null);
})();
(function() {
  Shader._shaderMap = /* @__PURE__ */ Object.create(null);
})();
(function() {
  Shader._propertyNameMap = /* @__PURE__ */ Object.create(null);
})();
(function() {
  Shader._macroMaskMap = [];
})();
(function() {
  Shader._macroCounter = 0;
})();
(function() {
  Shader._macroMap = /* @__PURE__ */ Object.create(null);
})();
var ShaderData = function() {
  function ShaderData2(group) {
    this._propertyValueMap = /* @__PURE__ */ Object.create(null);
    this._macroCollection = new ShaderMacroCollection();
    this._macroMap = /* @__PURE__ */ Object.create(null);
    this._refCount = 0;
    this._group = group;
  }
  var _proto = ShaderData2.prototype;
  _proto.getFloat = function getFloat(property) {
    return this.getPropertyValue(property);
  };
  _proto.setFloat = function setFloat(property, value) {
    this._setPropertyValue(property, ShaderPropertyType.Float, value);
  };
  _proto.getInt = function getInt(property) {
    return this.getPropertyValue(property);
  };
  _proto.setInt = function setInt(property, value) {
    this._setPropertyValue(property, ShaderPropertyType.Int, value);
  };
  _proto.getFloatArray = function getFloatArray(property) {
    return this.getPropertyValue(property);
  };
  _proto.setFloatArray = function setFloatArray(property, value) {
    this._setPropertyValue(property, ShaderPropertyType.FloatArray, value);
  };
  _proto.getIntArray = function getIntArray(property) {
    return this.getPropertyValue(property);
  };
  _proto.setIntArray = function setIntArray(property, value) {
    this._setPropertyValue(property, ShaderPropertyType.IntArray, value);
  };
  _proto.getVector2 = function getVector2(property) {
    return this.getPropertyValue(property);
  };
  _proto.setVector2 = function setVector2(property, value) {
    this._setPropertyValue(property, ShaderPropertyType.Vector2, value);
  };
  _proto.getVector3 = function getVector3(property) {
    return this.getPropertyValue(property);
  };
  _proto.setVector3 = function setVector3(property, value) {
    this._setPropertyValue(property, ShaderPropertyType.Vector3, value);
  };
  _proto.getVector4 = function getVector4(property) {
    return this.getPropertyValue(property);
  };
  _proto.setVector4 = function setVector4(property, value) {
    this._setPropertyValue(property, ShaderPropertyType.Vector4, value);
  };
  _proto.getMatrix = function getMatrix(property) {
    return this.getPropertyValue(property);
  };
  _proto.setMatrix = function setMatrix(property, value) {
    this._setPropertyValue(property, ShaderPropertyType.Matrix, value);
  };
  _proto.getColor = function getColor(property) {
    return this.getPropertyValue(property);
  };
  _proto.setColor = function setColor(property, value) {
    this._setPropertyValue(property, ShaderPropertyType.Color, value);
  };
  _proto.getTexture = function getTexture(property) {
    return this.getPropertyValue(property);
  };
  _proto.setTexture = function setTexture(property, value) {
    if (this._getRefCount() > 0) {
      var lastValue = this.getPropertyValue(property);
      lastValue && lastValue._addRefCount(-1);
      value && value._addRefCount(1);
    }
    this._setPropertyValue(property, ShaderPropertyType.Texture, value);
  };
  _proto.getTextureArray = function getTextureArray(property) {
    return this.getPropertyValue(property);
  };
  _proto.setTextureArray = function setTextureArray(property, value) {
    if (this._getRefCount() > 0) {
      var lastValue = this.getPropertyValue(property);
      if (lastValue) {
        for (var i = 0, n = lastValue.length; i < n; i++) {
          lastValue[i]._addRefCount(-1);
        }
      }
      if (value) {
        for (var i1 = 0, n1 = value.length; i1 < n1; i1++) {
          value[i1]._addRefCount(1);
        }
      }
    }
    this._setPropertyValue(property, ShaderPropertyType.TextureArray, value);
  };
  _proto.getPropertyValue = function getPropertyValue(property) {
    if (typeof property === "string") {
      property = Shader.getPropertyByName(property);
    }
    return this._propertyValueMap[property._uniqueId];
  };
  _proto.enableMacro = function enableMacro(macro, value) {
    if (typeof macro === "string") {
      macro = Shader.getMacroByName(macro, value);
    }
    var nameID = macro._nameId;
    var lastMacro = this._macroMap[nameID];
    if (lastMacro !== macro) {
      var macroCollection = this._macroCollection;
      lastMacro && macroCollection.disable(lastMacro);
      macroCollection.enable(macro);
      this._macroMap[nameID] = macro;
    }
  };
  _proto.disableMacro = function disableMacro(macro) {
    var nameID;
    if (typeof macro === "string") {
      nameID = ShaderMacro._macroNameIdMap[macro];
      if (nameID === void 0) {
        return;
      }
    } else {
      nameID = macro._nameId;
    }
    var currentMacro = this._macroMap[nameID];
    if (currentMacro) {
      this._macroCollection.disable(currentMacro);
      delete this._macroMap[nameID];
    }
  };
  _proto.getMacros = function getMacros(out) {
    if (out) {
      var macroMap = this._macroMap;
      out.length = 0;
      for (var key in macroMap) {
        out.push(macroMap[key]);
      }
    } else {
      return Object.values(this._macroMap);
    }
  };
  _proto.getProperties = function getProperties(out) {
    var properties;
    if (out) {
      out.length = 0;
      properties = out;
    } else {
      properties = [];
    }
    var propertyValueMap = this._propertyValueMap;
    var propertyIdMap = Shader._propertyIdMap;
    for (var key in propertyValueMap) {
      properties.push(propertyIdMap[key]);
    }
    if (!out) {
      return properties;
    }
  };
  _proto.clone = function clone2() {
    var shaderData = new ShaderData2(this._group);
    this.cloneTo(shaderData);
    return shaderData;
  };
  _proto.cloneTo = function cloneTo(target) {
    CloneManager.deepCloneObject(this._macroCollection, target._macroCollection);
    Object.assign(target._macroMap, this._macroMap);
    var propertyValueMap = this._propertyValueMap;
    var targetPropertyValueMap = target._propertyValueMap;
    var keys = Object.keys(propertyValueMap);
    for (var i = 0, n = keys.length; i < n; i++) {
      var k = keys[i];
      var property = propertyValueMap[k];
      if (property != null) {
        if (typeof property === "number") {
          targetPropertyValueMap[k] = property;
        } else if (_instanceof(property, Texture)) {
          targetPropertyValueMap[k] = property;
        } else if (_instanceof(property, Array) || _instanceof(property, Float32Array) || _instanceof(property, Int32Array)) {
          targetPropertyValueMap[k] = property.slice();
        } else {
          var targetProperty = targetPropertyValueMap[k];
          if (targetProperty) {
            targetProperty.copyFrom(property);
          } else {
            targetPropertyValueMap[k] = property.clone();
          }
        }
      } else {
        targetPropertyValueMap[k] = property;
      }
    }
  };
  _proto._setPropertyValue = function _setPropertyValue(property, type, value) {
    if (typeof property === "string") {
      property = Shader.getPropertyByName(property);
    }
    if (property._group !== this._group) {
      if (property._group === void 0) {
        property._group = this._group;
      } else {
        throw "Shader property " + property.name + " has been used as " + ShaderDataGroup[property._group] + " group.";
      }
    }
    if (property._type !== type) {
      if (property._type === void 0) {
        property._type = type;
      } else {
        throw "Shader property " + property.name + " has been used as " + ShaderPropertyType[property._type] + " type.";
      }
    }
    this._propertyValueMap[property._uniqueId] = value;
  };
  _proto._getRefCount = function _getRefCount() {
    return this._refCount;
  };
  _proto._addRefCount = function _addRefCount(value) {
    this._refCount += value;
    var properties = this._propertyValueMap;
    for (var k in properties) {
      var property = properties[k];
      if (property && _instanceof(property, Texture)) {
        property._addRefCount(value);
      }
    }
  };
  return ShaderData2;
}();
var Light = function(Component2) {
  _inherits(Light2, Component2);
  function Light2() {
    var _this;
    _this = Component2.apply(this, arguments) || this;
    _this.intensity = 1;
    _this.cullingMask = Layer.Everything;
    _this.shadowType = ShadowType.None;
    _this.shadowBias = 1;
    _this.shadowNormalBias = 1;
    _this.shadowNearPlane = 0.1;
    _this.shadowStrength = 1;
    _this._lightIndex = -1;
    _this._color = new Color(1, 1, 1, 1);
    _this._lightColor = new Color();
    return _this;
  }
  var _proto = Light2.prototype;
  _proto._getLightColor = function _getLightColor() {
    this._lightColor.r = this.color.r * this.intensity;
    this._lightColor.g = this.color.g * this.intensity;
    this._lightColor.b = this.color.b * this.intensity;
    this._lightColor.a = this.color.a * this.intensity;
    return this._lightColor;
  };
  _create_class2(Light2, [
    {
      key: "color",
      get: (
        /**
        * Light Color.
        */
        function get() {
          return this._color;
        }
      ),
      set: function set(value) {
        if (this._color !== value) {
          this._color.copyFrom(value);
        }
      }
    },
    {
      key: "viewMatrix",
      get: (
        /**
        * View matrix.
        */
        function get() {
          if (!this._viewMat)
            this._viewMat = new Matrix();
          Matrix.invert(this.entity.transform.worldMatrix, this._viewMat);
          return this._viewMat;
        }
      )
    },
    {
      key: "inverseViewMatrix",
      get: (
        /**
        * Inverse view matrix.
        */
        function get() {
          if (!this._inverseViewMat)
            this._inverseViewMat = new Matrix();
          Matrix.invert(this.viewMatrix, this._inverseViewMat);
          return this._inverseViewMat;
        }
      )
    }
  ]);
  return Light2;
}(Component);
(function() {
  Light._maxLight = 10;
})();
__decorate([
  ignoreClone
], Light.prototype, "_lightIndex", void 0);
var DirectLight = function(Light2) {
  _inherits(DirectLight2, Light2);
  function DirectLight2() {
    var _this;
    _this = Light2.apply(this, arguments) || this;
    _this._forward = new Vector3();
    _this._reverseDirection = new Vector3();
    return _this;
  }
  var _proto = DirectLight2.prototype;
  _proto._appendData = function _appendData(lightIndex) {
    var cullingMaskStart = lightIndex * 2;
    var colorStart = lightIndex * 3;
    var directionStart = lightIndex * 3;
    var lightColor = this._getLightColor();
    var direction = this.direction;
    var data = DirectLight2._combinedData;
    var cullingMask = this.cullingMask;
    data.cullingMask[cullingMaskStart] = cullingMask & 65535;
    data.cullingMask[cullingMaskStart + 1] = cullingMask >>> 16 & 65535;
    data.color[colorStart] = lightColor.r;
    data.color[colorStart + 1] = lightColor.g;
    data.color[colorStart + 2] = lightColor.b;
    data.direction[directionStart] = direction.x;
    data.direction[directionStart + 1] = direction.y;
    data.direction[directionStart + 2] = direction.z;
  };
  _proto._onEnable = function _onEnable() {
    this.engine._lightManager._attachDirectLight(this);
  };
  _proto._onDisable = function _onDisable() {
    this.engine._lightManager._detachDirectLight(this);
  };
  DirectLight2._updateShaderData = function _updateShaderData(shaderData) {
    var data = DirectLight2._combinedData;
    shaderData.setIntArray(DirectLight2._cullingMaskProperty, data.cullingMask);
    shaderData.setFloatArray(DirectLight2._colorProperty, data.color);
    shaderData.setFloatArray(DirectLight2._directionProperty, data.direction);
  };
  _create_class2(DirectLight2, [
    {
      key: "direction",
      get: (
        /**
        * Get direction.
        */
        function get() {
          this.entity.transform.getWorldForward(this._forward);
          return this._forward;
        }
      )
    },
    {
      key: "reverseDirection",
      get: (
        /**
        * Get the opposite direction of the directional light direction.
        */
        function get() {
          Vector3.scale(this.direction, -1, this._reverseDirection);
          return this._reverseDirection;
        }
      )
    },
    {
      key: "_shadowProjectionMatrix",
      get: (
        /**
        * @internal
        * @override
        */
        function get() {
          throw "Unknown!";
        }
      )
    }
  ]);
  return DirectLight2;
}(Light);
(function() {
  DirectLight._cullingMaskProperty = Shader.getPropertyByName("u_directLightCullingMask");
})();
(function() {
  DirectLight._colorProperty = Shader.getPropertyByName("u_directLightColor");
})();
(function() {
  DirectLight._directionProperty = Shader.getPropertyByName("u_directLightDirection");
})();
(function() {
  DirectLight._combinedData = {
    cullingMask: new Int32Array(Light._maxLight * 2),
    color: new Float32Array(Light._maxLight * 3),
    direction: new Float32Array(Light._maxLight * 3)
  };
})();
var PointLight = function(Light2) {
  _inherits(PointLight2, Light2);
  function PointLight2() {
    var _this;
    _this = Light2.apply(this, arguments) || this;
    _this.distance = 100;
    return _this;
  }
  var _proto = PointLight2.prototype;
  _proto._appendData = function _appendData(lightIndex) {
    var cullingMaskStart = lightIndex * 2;
    var colorStart = lightIndex * 3;
    var positionStart = lightIndex * 3;
    var distanceStart = lightIndex;
    var lightColor = this._getLightColor();
    var lightPosition = this.position;
    var data = PointLight2._combinedData;
    var cullingMask = this.cullingMask;
    data.cullingMask[cullingMaskStart] = cullingMask & 65535;
    data.cullingMask[cullingMaskStart + 1] = cullingMask >>> 16 & 65535;
    data.color[colorStart] = lightColor.r;
    data.color[colorStart + 1] = lightColor.g;
    data.color[colorStart + 2] = lightColor.b;
    data.position[positionStart] = lightPosition.x;
    data.position[positionStart + 1] = lightPosition.y;
    data.position[positionStart + 2] = lightPosition.z;
    data.distance[distanceStart] = this.distance;
  };
  _proto._onEnable = function _onEnable() {
    this.engine._lightManager._attachPointLight(this);
  };
  _proto._onDisable = function _onDisable() {
    this.engine._lightManager._detachPointLight(this);
  };
  PointLight2._updateShaderData = function _updateShaderData(shaderData) {
    var data = PointLight2._combinedData;
    shaderData.setIntArray(PointLight2._cullingMaskProperty, data.cullingMask);
    shaderData.setFloatArray(PointLight2._colorProperty, data.color);
    shaderData.setFloatArray(PointLight2._positionProperty, data.position);
    shaderData.setFloatArray(PointLight2._distanceProperty, data.distance);
  };
  _create_class2(PointLight2, [
    {
      key: "position",
      get: (
        /**
        * Get light position.
        */
        function get() {
          return this.entity.transform.worldPosition;
        }
      )
    },
    {
      key: "_shadowProjectionMatrix",
      get: (
        /**
        * @internal
        * @override
        */
        function get() {
          throw "Unknown!";
        }
      )
    }
  ]);
  return PointLight2;
}(Light);
(function() {
  PointLight._cullingMaskProperty = Shader.getPropertyByName("u_pointLightCullingMask");
})();
(function() {
  PointLight._colorProperty = Shader.getPropertyByName("u_pointLightColor");
})();
(function() {
  PointLight._positionProperty = Shader.getPropertyByName("u_pointLightPosition");
})();
(function() {
  PointLight._distanceProperty = Shader.getPropertyByName("u_pointLightDistance");
})();
(function() {
  PointLight._combinedData = {
    cullingMask: new Int32Array(Light._maxLight * 2),
    color: new Float32Array(Light._maxLight * 3),
    position: new Float32Array(Light._maxLight * 3),
    distance: new Float32Array(Light._maxLight)
  };
})();
var SpotLight = function(Light2) {
  _inherits(SpotLight2, Light2);
  function SpotLight2() {
    var _this;
    _this = Light2.apply(this, arguments) || this;
    _this.distance = 100;
    _this.angle = Math.PI / 6;
    _this.penumbra = Math.PI / 12;
    _this._forward = new Vector3();
    _this._inverseDirection = new Vector3();
    _this._projectMatrix = new Matrix();
    return _this;
  }
  var _proto = SpotLight2.prototype;
  _proto._appendData = function _appendData(lightIndex) {
    var cullingMaskStart = lightIndex * 2;
    var colorStart = lightIndex * 3;
    var positionStart = lightIndex * 3;
    var directionStart = lightIndex * 3;
    var distanceStart = lightIndex;
    var penumbraCosStart = lightIndex;
    var angleCosStart = lightIndex;
    var color = this._getLightColor();
    var position = this.position;
    var direction = this.direction;
    var data = SpotLight2._combinedData;
    var cullingMask = this.cullingMask;
    data.cullingMask[cullingMaskStart] = cullingMask & 65535;
    data.cullingMask[cullingMaskStart + 1] = cullingMask >>> 16 & 65535;
    data.color[colorStart] = color.r;
    data.color[colorStart + 1] = color.g;
    data.color[colorStart + 2] = color.b;
    data.position[positionStart] = position.x;
    data.position[positionStart + 1] = position.y;
    data.position[positionStart + 2] = position.z;
    data.direction[directionStart] = direction.x;
    data.direction[directionStart + 1] = direction.y;
    data.direction[directionStart + 2] = direction.z;
    data.distance[distanceStart] = this.distance;
    data.angleCos[angleCosStart] = Math.cos(this.angle);
    data.penumbraCos[penumbraCosStart] = Math.cos(this.angle + this.penumbra);
  };
  _proto._onEnable = function _onEnable() {
    this.engine._lightManager._attachSpotLight(this);
  };
  _proto._onDisable = function _onDisable() {
    this.engine._lightManager._detachSpotLight(this);
  };
  SpotLight2._updateShaderData = function _updateShaderData(shaderData) {
    var data = SpotLight2._combinedData;
    shaderData.setIntArray(SpotLight2._cullingMaskProperty, data.cullingMask);
    shaderData.setFloatArray(SpotLight2._colorProperty, data.color);
    shaderData.setFloatArray(SpotLight2._positionProperty, data.position);
    shaderData.setFloatArray(SpotLight2._directionProperty, data.direction);
    shaderData.setFloatArray(SpotLight2._distanceProperty, data.distance);
    shaderData.setFloatArray(SpotLight2._angleCosProperty, data.angleCos);
    shaderData.setFloatArray(SpotLight2._penumbraCosProperty, data.penumbraCos);
  };
  _create_class2(SpotLight2, [
    {
      key: "position",
      get: (
        /**
        * Get light position.
        */
        function get() {
          return this.entity.transform.worldPosition;
        }
      )
    },
    {
      key: "direction",
      get: (
        /**
        * Get light direction.
        */
        function get() {
          this.entity.transform.getWorldForward(this._forward);
          return this._forward;
        }
      )
    },
    {
      key: "reverseDirection",
      get: (
        /**
        * Get the opposite direction of the spotlight.
        */
        function get() {
          Vector3.scale(this.direction, -1, this._inverseDirection);
          return this._inverseDirection;
        }
      )
    },
    {
      key: "_shadowProjectionMatrix",
      get: (
        /**
        * @internal
        * @override
        */
        function get() {
          var matrix = this._projectMatrix;
          var fov = Math.min(Math.PI / 2, this.angle * 2 * Math.sqrt(2));
          Matrix.perspective(fov, 1, this.shadowNearPlane, this.distance + this.shadowNearPlane, matrix);
          return matrix;
        }
      )
    }
  ]);
  return SpotLight2;
}(Light);
(function() {
  SpotLight._cullingMaskProperty = Shader.getPropertyByName("u_spotLightCullingMask");
})();
(function() {
  SpotLight._colorProperty = Shader.getPropertyByName("u_spotLightColor");
})();
(function() {
  SpotLight._positionProperty = Shader.getPropertyByName("u_spotLightPosition");
})();
(function() {
  SpotLight._directionProperty = Shader.getPropertyByName("u_spotLightDirection");
})();
(function() {
  SpotLight._distanceProperty = Shader.getPropertyByName("u_spotLightDistance");
})();
(function() {
  SpotLight._angleCosProperty = Shader.getPropertyByName("u_spotLightAngleCos");
})();
(function() {
  SpotLight._penumbraCosProperty = Shader.getPropertyByName("u_spotLightPenumbraCos");
})();
(function() {
  SpotLight._combinedData = {
    cullingMask: new Int32Array(Light._maxLight * 2),
    color: new Float32Array(Light._maxLight * 3),
    position: new Float32Array(Light._maxLight * 3),
    direction: new Float32Array(Light._maxLight * 3),
    distance: new Float32Array(Light._maxLight),
    angleCos: new Float32Array(Light._maxLight),
    penumbraCos: new Float32Array(Light._maxLight)
  };
})();
var LightManager = function() {
  function LightManager2() {
    this._spotLights = new DisorderedArray();
    this._pointLights = new DisorderedArray();
    this._directLights = new DisorderedArray();
  }
  var _proto = LightManager2.prototype;
  _proto._attachSpotLight = function _attachSpotLight(light) {
    light._lightIndex = this._spotLights.length;
    this._spotLights.add(light);
  };
  _proto._detachSpotLight = function _detachSpotLight(light) {
    var replaced = this._spotLights.deleteByIndex(light._lightIndex);
    replaced && (replaced._lightIndex = light._lightIndex);
    light._lightIndex = -1;
  };
  _proto._attachPointLight = function _attachPointLight(light) {
    light._lightIndex = this._pointLights.length;
    this._pointLights.add(light);
  };
  _proto._detachPointLight = function _detachPointLight(light) {
    var replaced = this._pointLights.deleteByIndex(light._lightIndex);
    replaced && (replaced._lightIndex = light._lightIndex);
    light._lightIndex = -1;
  };
  _proto._attachDirectLight = function _attachDirectLight(light) {
    light._lightIndex = this._directLights.length;
    this._directLights.add(light);
  };
  _proto._detachDirectLight = function _detachDirectLight(light) {
    var replaced = this._directLights.deleteByIndex(light._lightIndex);
    replaced && (replaced._lightIndex = light._lightIndex);
    light._lightIndex = -1;
  };
  _proto._getSunLightIndex = function _getSunLightIndex() {
    var directLights = this._directLights;
    var sunLightIndex = -1;
    var maxIntensity = Number.NEGATIVE_INFINITY;
    var hasShadowLight = false;
    for (var i = 0, n = directLights.length; i < n; i++) {
      var directLight = directLights.get(i);
      if (directLight.shadowType !== ShadowType.None && !hasShadowLight) {
        maxIntensity = Number.NEGATIVE_INFINITY;
        hasShadowLight = true;
      }
      var intensity = directLight.intensity * directLight.color.getBrightness();
      if (hasShadowLight) {
        if (directLight.shadowType !== ShadowType.None && maxIntensity < intensity) {
          maxIntensity = intensity;
          sunLightIndex = i;
        }
      } else {
        if (maxIntensity < intensity) {
          maxIntensity = intensity;
          sunLightIndex = i;
        }
      }
    }
    return sunLightIndex;
  };
  _proto._updateShaderData = function _updateShaderData(shaderData) {
    var spotLight = this._spotLights;
    var pointLight = this._pointLights;
    var directLight = this._directLights;
    var spotLightCount = spotLight.length;
    var pointLightCount = pointLight.length;
    var directLightCount = directLight.length;
    for (var i = 0, len = spotLightCount; i < len; i++) {
      var light = spotLight.get(i);
      light._appendData(i);
    }
    for (var i1 = 0, len1 = pointLightCount; i1 < len1; i1++) {
      var light1 = pointLight.get(i1);
      light1._appendData(i1);
    }
    for (var i2 = 0, len2 = directLightCount; i2 < len2; i2++) {
      var light2 = directLight.get(i2);
      light2._appendData(i2);
    }
    if (directLightCount) {
      DirectLight._updateShaderData(shaderData);
      shaderData.enableMacro("O3_DIRECT_LIGHT_COUNT", directLightCount.toString());
    } else {
      shaderData.disableMacro("O3_DIRECT_LIGHT_COUNT");
    }
    if (pointLightCount) {
      PointLight._updateShaderData(shaderData);
      shaderData.enableMacro("O3_POINT_LIGHT_COUNT", pointLightCount.toString());
    } else {
      shaderData.disableMacro("O3_POINT_LIGHT_COUNT");
    }
    if (spotLightCount) {
      SpotLight._updateShaderData(shaderData);
      shaderData.enableMacro("O3_SPOT_LIGHT_COUNT", spotLightCount.toString());
    } else {
      shaderData.disableMacro("O3_SPOT_LIGHT_COUNT");
    }
  };
  return LightManager2;
}();
var RenderTargetBlendState = function RenderTargetBlendState2() {
  this.enabled = false;
  this.colorBlendOperation = BlendOperation.Add;
  this.alphaBlendOperation = BlendOperation.Add;
  this.sourceColorBlendFactor = BlendFactor.One;
  this.sourceAlphaBlendFactor = BlendFactor.One;
  this.destinationColorBlendFactor = BlendFactor.Zero;
  this.destinationAlphaBlendFactor = BlendFactor.Zero;
  this.colorWriteMask = ColorWriteMask.All;
};
var BlendState = function() {
  function BlendState2() {
    this.targetBlendState = new RenderTargetBlendState();
    this.blendColor = new Color(0, 0, 0, 0);
    this.alphaToCoverage = false;
  }
  var _proto = BlendState2.prototype;
  _proto._apply = function _apply(hardwareRenderer, lastRenderState) {
    this._platformApply(hardwareRenderer, lastRenderState.blendState);
  };
  _proto._platformApply = function _platformApply(rhi, lastState) {
    var gl = rhi.gl;
    var lastTargetBlendState = lastState.targetBlendState;
    var _this_targetBlendState = this.targetBlendState, enabled = _this_targetBlendState.enabled, colorBlendOperation = _this_targetBlendState.colorBlendOperation, alphaBlendOperation = _this_targetBlendState.alphaBlendOperation, sourceColorBlendFactor = _this_targetBlendState.sourceColorBlendFactor, destinationColorBlendFactor = _this_targetBlendState.destinationColorBlendFactor, sourceAlphaBlendFactor = _this_targetBlendState.sourceAlphaBlendFactor, destinationAlphaBlendFactor = _this_targetBlendState.destinationAlphaBlendFactor, colorWriteMask = _this_targetBlendState.colorWriteMask;
    if (enabled !== lastTargetBlendState.enabled) {
      if (enabled) {
        gl.enable(gl.BLEND);
      } else {
        gl.disable(gl.BLEND);
      }
      lastTargetBlendState.enabled = enabled;
    }
    if (enabled) {
      if (sourceColorBlendFactor !== lastTargetBlendState.sourceColorBlendFactor || destinationColorBlendFactor !== lastTargetBlendState.destinationColorBlendFactor || sourceAlphaBlendFactor !== lastTargetBlendState.sourceAlphaBlendFactor || destinationAlphaBlendFactor !== lastTargetBlendState.destinationAlphaBlendFactor) {
        gl.blendFuncSeparate(BlendState2._getGLBlendFactor(rhi, sourceColorBlendFactor), BlendState2._getGLBlendFactor(rhi, destinationColorBlendFactor), BlendState2._getGLBlendFactor(rhi, sourceAlphaBlendFactor), BlendState2._getGLBlendFactor(rhi, destinationAlphaBlendFactor));
        lastTargetBlendState.sourceColorBlendFactor = sourceColorBlendFactor;
        lastTargetBlendState.destinationColorBlendFactor = destinationColorBlendFactor;
        lastTargetBlendState.sourceAlphaBlendFactor = sourceAlphaBlendFactor;
        lastTargetBlendState.destinationAlphaBlendFactor = destinationAlphaBlendFactor;
      }
      if (colorBlendOperation !== lastTargetBlendState.colorBlendOperation || alphaBlendOperation !== lastTargetBlendState.alphaBlendOperation) {
        gl.blendEquationSeparate(BlendState2._getGLBlendOperation(rhi, colorBlendOperation), BlendState2._getGLBlendOperation(rhi, alphaBlendOperation));
        lastTargetBlendState.colorBlendOperation = colorBlendOperation;
        lastTargetBlendState.alphaBlendOperation = alphaBlendOperation;
      }
      var blendColor = this.blendColor;
      if (!Color.equals(lastState.blendColor, blendColor)) {
        gl.blendColor(blendColor.r, blendColor.g, blendColor.b, blendColor.a);
        lastState.blendColor.copyFrom(blendColor);
      }
    }
    if (colorWriteMask !== lastTargetBlendState.colorWriteMask) {
      gl.colorMask((colorWriteMask & ColorWriteMask.Red) !== 0, (colorWriteMask & ColorWriteMask.Green) !== 0, (colorWriteMask & ColorWriteMask.Blue) !== 0, (colorWriteMask & ColorWriteMask.Alpha) !== 0);
      lastTargetBlendState.colorWriteMask = colorWriteMask;
    }
    var alphaToCoverage = this.alphaToCoverage;
    if (alphaToCoverage !== lastState.alphaToCoverage) {
      if (alphaToCoverage) {
        gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);
      } else {
        gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
      }
      lastState.alphaToCoverage = alphaToCoverage;
    }
  };
  BlendState2._getGLBlendFactor = function _getGLBlendFactor(rhi, blendFactor) {
    var gl = rhi.gl;
    switch (blendFactor) {
      case BlendFactor.Zero:
        return gl.ZERO;
      case BlendFactor.One:
        return gl.ONE;
      case BlendFactor.SourceColor:
        return gl.SRC_COLOR;
      case BlendFactor.OneMinusSourceColor:
        return gl.ONE_MINUS_SRC_COLOR;
      case BlendFactor.DestinationColor:
        return gl.DST_COLOR;
      case BlendFactor.OneMinusDestinationColor:
        return gl.ONE_MINUS_DST_COLOR;
      case BlendFactor.SourceAlpha:
        return gl.SRC_ALPHA;
      case BlendFactor.OneMinusSourceAlpha:
        return gl.ONE_MINUS_SRC_ALPHA;
      case BlendFactor.DestinationAlpha:
        return gl.DST_ALPHA;
      case BlendFactor.OneMinusDestinationAlpha:
        return gl.ONE_MINUS_DST_ALPHA;
      case BlendFactor.SourceAlphaSaturate:
        return gl.SRC_ALPHA_SATURATE;
      case BlendFactor.BlendColor:
        return gl.CONSTANT_COLOR;
      case BlendFactor.OneMinusBlendColor:
        return gl.ONE_MINUS_CONSTANT_COLOR;
    }
  };
  BlendState2._getGLBlendOperation = function _getGLBlendOperation(rhi, blendOperation) {
    var gl = rhi.gl;
    switch (blendOperation) {
      case BlendOperation.Add:
        return gl.FUNC_ADD;
      case BlendOperation.Subtract:
        return gl.FUNC_SUBTRACT;
      case BlendOperation.ReverseSubtract:
        return gl.FUNC_REVERSE_SUBTRACT;
      case BlendOperation.Min:
        if (!rhi.canIUse(GLCapabilityType.blendMinMax)) {
          throw new Error("BlendOperation.Min is not supported in this context");
        }
        return gl.MIN;
      case BlendOperation.Max:
        if (!rhi.canIUse(GLCapabilityType.blendMinMax)) {
          throw new Error("BlendOperation.Max is not supported in this context");
        }
        return gl.MAX;
    }
  };
  return BlendState2;
}();
var DepthState = function() {
  function DepthState2() {
    this.enabled = true;
    this.writeEnabled = true;
    this.compareFunction = CompareFunction.Less;
  }
  var _proto = DepthState2.prototype;
  _proto._apply = function _apply(hardwareRenderer, lastRenderState) {
    this._platformApply(hardwareRenderer, lastRenderState.depthState);
  };
  _proto._platformApply = function _platformApply(rhi, lastState) {
    var gl = rhi.gl;
    var _this = this, enabled = _this.enabled, compareFunction = _this.compareFunction, writeEnabled = _this.writeEnabled;
    if (enabled != lastState.enabled) {
      if (enabled) {
        gl.enable(gl.DEPTH_TEST);
      } else {
        gl.disable(gl.DEPTH_TEST);
      }
      lastState.enabled = enabled;
    }
    if (enabled) {
      if (compareFunction != lastState.compareFunction) {
        gl.depthFunc(DepthState2._getGLCompareFunction(rhi, compareFunction));
        lastState.compareFunction = compareFunction;
      }
      if (writeEnabled != lastState.writeEnabled) {
        gl.depthMask(writeEnabled);
        lastState.writeEnabled = writeEnabled;
      }
    }
  };
  DepthState2._getGLCompareFunction = function _getGLCompareFunction(rhi, compareFunction) {
    var gl = rhi.gl;
    switch (compareFunction) {
      case CompareFunction.Never:
        return gl.NEVER;
      case CompareFunction.Less:
        return gl.LESS;
      case CompareFunction.Equal:
        return gl.EQUAL;
      case CompareFunction.LessEqual:
        return gl.LEQUAL;
      case CompareFunction.Greater:
        return gl.GREATER;
      case CompareFunction.NotEqual:
        return gl.NOTEQUAL;
      case CompareFunction.GreaterEqual:
        return gl.GEQUAL;
      case CompareFunction.Always:
        return gl.ALWAYS;
    }
  };
  return DepthState2;
}();
var RasterState = function() {
  function RasterState2() {
    this.cullMode = CullMode.Back;
    this.depthBias = 0;
    this.slopeScaledDepthBias = 0;
    this._cullFaceEnable = true;
    this._frontFaceInvert = false;
  }
  var _proto = RasterState2.prototype;
  _proto._apply = function _apply(hardwareRenderer, lastRenderState, frontFaceInvert) {
    this._platformApply(hardwareRenderer, lastRenderState.rasterState, frontFaceInvert);
  };
  _proto._platformApply = function _platformApply(rhi, lastState, frontFaceInvert) {
    var gl = rhi.gl;
    var _this = this, cullMode = _this.cullMode, depthBias = _this.depthBias, slopeScaledDepthBias = _this.slopeScaledDepthBias;
    var cullFaceEnable = cullMode !== CullMode.Off;
    if (cullFaceEnable !== lastState._cullFaceEnable) {
      if (cullFaceEnable) {
        gl.enable(gl.CULL_FACE);
      } else {
        gl.disable(gl.CULL_FACE);
      }
      lastState._cullFaceEnable = cullFaceEnable;
    }
    if (cullFaceEnable) {
      if (cullMode !== lastState.cullMode) {
        if (cullMode == CullMode.Back) {
          gl.cullFace(gl.BACK);
        } else {
          gl.cullFace(gl.FRONT);
        }
        lastState.cullMode = cullMode;
      }
    }
    if (frontFaceInvert !== lastState._frontFaceInvert) {
      if (frontFaceInvert) {
        gl.frontFace(gl.CW);
      } else {
        gl.frontFace(gl.CCW);
      }
      lastState._frontFaceInvert = frontFaceInvert;
    }
    if (!rhi._enableGlobalDepthBias) {
      if (depthBias !== lastState.depthBias || slopeScaledDepthBias !== lastState.slopeScaledDepthBias) {
        if (depthBias !== 0 || slopeScaledDepthBias !== 0) {
          gl.enable(gl.POLYGON_OFFSET_FILL);
          gl.polygonOffset(slopeScaledDepthBias, depthBias);
        } else {
          gl.disable(gl.POLYGON_OFFSET_FILL);
        }
        lastState.depthBias = depthBias;
        lastState.slopeScaledDepthBias = slopeScaledDepthBias;
      }
    }
  };
  return RasterState2;
}();
var StencilState = function() {
  function StencilState2() {
    this.enabled = false;
    this.referenceValue = 0;
    this.mask = 255;
    this.writeMask = 255;
    this.compareFunctionFront = CompareFunction.Always;
    this.compareFunctionBack = CompareFunction.Always;
    this.passOperationFront = StencilOperation.Keep;
    this.passOperationBack = StencilOperation.Keep;
    this.failOperationFront = StencilOperation.Keep;
    this.failOperationBack = StencilOperation.Keep;
    this.zFailOperationFront = StencilOperation.Keep;
    this.zFailOperationBack = StencilOperation.Keep;
  }
  var _proto = StencilState2.prototype;
  _proto._apply = function _apply(hardwareRenderer, lastRenderState) {
    this._platformApply(hardwareRenderer, lastRenderState.stencilState);
  };
  _proto._platformApply = function _platformApply(rhi, lastState) {
    var gl = rhi.gl;
    var _this = this, enabled = _this.enabled, referenceValue = _this.referenceValue, mask = _this.mask, compareFunctionFront = _this.compareFunctionFront, compareFunctionBack = _this.compareFunctionBack, failOperationFront = _this.failOperationFront, zFailOperationFront = _this.zFailOperationFront, passOperationFront = _this.passOperationFront, failOperationBack = _this.failOperationBack, zFailOperationBack = _this.zFailOperationBack, passOperationBack = _this.passOperationBack, writeMask = _this.writeMask;
    if (enabled != lastState.enabled) {
      if (enabled) {
        gl.enable(gl.STENCIL_TEST);
      } else {
        gl.disable(gl.STENCIL_TEST);
      }
      lastState.enabled = enabled;
    }
    if (enabled) {
      var referenceOrMaskChange = referenceValue !== lastState.referenceValue || mask !== lastState.mask;
      if (referenceOrMaskChange || compareFunctionFront !== lastState.compareFunctionFront) {
        gl.stencilFuncSeparate(gl.FRONT, StencilState2._getGLCompareFunction(rhi, compareFunctionFront), referenceValue, mask);
        lastState.compareFunctionFront = compareFunctionFront;
      }
      if (referenceOrMaskChange || compareFunctionBack !== lastState.compareFunctionBack) {
        gl.stencilFuncSeparate(gl.BACK, StencilState2._getGLCompareFunction(rhi, compareFunctionBack), referenceValue, mask);
        lastState.compareFunctionBack = this.compareFunctionBack;
      }
      if (referenceOrMaskChange) {
        lastState.referenceValue = this.referenceValue;
        lastState.mask = this.mask;
      }
      if (failOperationFront !== lastState.failOperationFront || zFailOperationFront !== lastState.zFailOperationFront || passOperationFront !== lastState.passOperationFront) {
        gl.stencilOpSeparate(gl.FRONT, StencilState2._getGLStencilOperation(rhi, failOperationFront), StencilState2._getGLStencilOperation(rhi, zFailOperationFront), StencilState2._getGLStencilOperation(rhi, passOperationFront));
        lastState.failOperationFront = failOperationFront;
        lastState.zFailOperationFront = zFailOperationFront;
        lastState.passOperationFront = passOperationFront;
      }
      if (failOperationBack !== lastState.failOperationBack || zFailOperationBack !== lastState.zFailOperationBack || passOperationBack !== lastState.passOperationBack) {
        gl.stencilOpSeparate(gl.BACK, StencilState2._getGLStencilOperation(rhi, failOperationBack), StencilState2._getGLStencilOperation(rhi, zFailOperationBack), StencilState2._getGLStencilOperation(rhi, passOperationBack));
        lastState.failOperationBack = failOperationBack;
        lastState.zFailOperationBack = zFailOperationBack;
        lastState.passOperationBack = passOperationBack;
      }
      if (writeMask !== lastState.writeMask) {
        gl.stencilMask(writeMask);
        lastState.writeMask = writeMask;
      }
    }
  };
  StencilState2._getGLCompareFunction = function _getGLCompareFunction(rhi, compareFunction) {
    var gl = rhi.gl;
    switch (compareFunction) {
      case CompareFunction.Never:
        return gl.NEVER;
      case CompareFunction.Less:
        return gl.LESS;
      case CompareFunction.Equal:
        return gl.EQUAL;
      case CompareFunction.LessEqual:
        return gl.LEQUAL;
      case CompareFunction.Greater:
        return gl.GREATER;
      case CompareFunction.NotEqual:
        return gl.NOTEQUAL;
      case CompareFunction.GreaterEqual:
        return gl.GEQUAL;
      case CompareFunction.Always:
        return gl.ALWAYS;
    }
  };
  StencilState2._getGLStencilOperation = function _getGLStencilOperation(rhi, compareFunction) {
    var gl = rhi.gl;
    switch (compareFunction) {
      case StencilOperation.Keep:
        return gl.KEEP;
      case StencilOperation.Zero:
        return gl.ZERO;
      case StencilOperation.Replace:
        return gl.REPLACE;
      case StencilOperation.IncrementSaturate:
        return gl.INCR;
      case StencilOperation.DecrementSaturate:
        return gl.DECR;
      case StencilOperation.Invert:
        return gl.INVERT;
      case StencilOperation.IncrementWrap:
        return gl.INCR_WRAP;
      case StencilOperation.DecrementWrap:
        return gl.DECR_WRAP;
    }
  };
  return StencilState2;
}();
var RenderState = function() {
  function RenderState2() {
    this.blendState = new BlendState();
    this.depthState = new DepthState();
    this.stencilState = new StencilState();
    this.rasterState = new RasterState();
    this.renderQueueType = RenderQueueType.Opaque;
  }
  var _proto = RenderState2.prototype;
  _proto._apply = function _apply(engine, frontFaceInvert) {
    var hardwareRenderer = engine._hardwareRenderer;
    var lastRenderState = engine._lastRenderState;
    this.blendState._apply(hardwareRenderer, lastRenderState);
    this.depthState._apply(hardwareRenderer, lastRenderState);
    this.stencilState._apply(hardwareRenderer, lastRenderState);
    this.rasterState._apply(hardwareRenderer, lastRenderState, frontFaceInvert);
  };
  return RenderState2;
}();
var Material = function(RefObject2) {
  _inherits(Material2, RefObject2);
  function Material2(engine, shader) {
    var _this;
    _this = RefObject2.call(this, engine) || this;
    _this.shaderData = new ShaderData(ShaderDataGroup.Material);
    _this._renderStates = [];
    _this.shader = shader;
    return _this;
  }
  var _proto = Material2.prototype;
  _proto.clone = function clone2() {
    var dest = new Material2(this._engine, this.shader);
    this.cloneTo(dest);
    return dest;
  };
  _proto.cloneTo = function cloneTo(target) {
    target.shader = this.shader;
    this.shaderData.cloneTo(target.shaderData);
    CloneManager.deepCloneObject(this.renderStates, target.renderStates);
  };
  _proto._addRefCount = function _addRefCount(value) {
    RefObject2.prototype._addRefCount.call(this, value);
    this.shaderData._addRefCount(value);
  };
  _proto._preRender = function _preRender(renderElement) {
  };
  _proto._onDestroy = function _onDestroy() {
  };
  _create_class2(Material2, [
    {
      key: "shader",
      get: (
        /**
        * Shader used by the material.
        */
        function get() {
          return this._shader;
        }
      ),
      set: function set(value) {
        this._shader = value;
        var renderStates = this._renderStates;
        var lastStatesCount = renderStates.length;
        var passCount = value.passes.length;
        if (lastStatesCount < passCount) {
          for (var i = lastStatesCount; i < passCount; i++) {
            renderStates.push(new RenderState());
          }
        } else {
          renderStates.length = passCount;
        }
      }
    },
    {
      key: "renderState",
      get: (
        /**
        * First Render state.
        */
        function get() {
          return this._renderStates[0];
        }
      )
    },
    {
      key: "renderStates",
      get: (
        /**
        * Render states.
        */
        function get() {
          return this._renderStates;
        }
      )
    }
  ]);
  return Material2;
}(RefObject);
var ClassPool = function() {
  function ClassPool2(type) {
    this._elementPoolIndex = 0;
    this._elementPool = [];
    this._type = type;
  }
  var _proto = ClassPool2.prototype;
  _proto.getFromPool = function getFromPool() {
    var _this = this, index = _this._elementPoolIndex, pool = _this._elementPool;
    this._elementPoolIndex++;
    if (pool.length === index) {
      var element = new this._type();
      pool.push(element);
      return element;
    } else {
      return pool[index];
    }
  };
  _proto.resetPool = function resetPool() {
    this._elementPoolIndex = 0;
  };
  return ClassPool2;
}();
var RenderElement = function RenderElement2() {
};
var MeshRenderElement = function(RenderElement3) {
  _inherits(MeshRenderElement2, RenderElement3);
  function MeshRenderElement2() {
    return RenderElement3.apply(this, arguments);
  }
  var _proto = MeshRenderElement2.prototype;
  _proto.setValue = function setValue(component, mesh, subMesh, material, renderState, shaderPass) {
    this.component = component;
    this.mesh = mesh;
    this.subMesh = subMesh;
    this.material = material;
    this.renderState = renderState;
    this.shaderPass = shaderPass;
  };
  return MeshRenderElement2;
}(RenderElement);
var RenderContext = function() {
  function RenderContext2() {
  }
  var _proto = RenderContext2.prototype;
  _proto.applyVirtualCamera = function applyVirtualCamera(virtualCamera) {
    this.virtualCamera = virtualCamera;
    var shaderData = this.camera.shaderData;
    shaderData.setMatrix(RenderContext2._viewMatrixProperty, virtualCamera.viewMatrix);
    shaderData.setMatrix(RenderContext2._projectionMatrixProperty, virtualCamera.projectionMatrix);
    shaderData.setMatrix(RenderContext2._vpMatrixProperty, virtualCamera.viewProjectionMatrix);
  };
  return RenderContext2;
}();
(function() {
  RenderContext._vpMatrixProperty = Shader.getPropertyByName("u_VPMat");
})();
(function() {
  RenderContext._viewMatrixProperty = Shader.getPropertyByName("u_viewMat");
})();
(function() {
  RenderContext._projectionMatrixProperty = Shader.getPropertyByName("u_projMat");
})();
var SpriteElement = function(RenderElement3) {
  _inherits(SpriteElement2, RenderElement3);
  function SpriteElement2() {
    var _this;
    _this = RenderElement3.call(this) || this;
    _this.multiRenderData = false;
    return _this;
  }
  var _proto = SpriteElement2.prototype;
  _proto.setValue = function setValue(component, renderDate, material, texture, renderState, shaderPass) {
    this.component = component;
    this.renderData = renderDate;
    this.material = material;
    this.texture = texture;
    this.renderState = renderState;
    this.shaderPass = shaderPass;
  };
  return SpriteElement2;
}(RenderElement);
var SpriteMaskElement = function(RenderElement3) {
  _inherits(SpriteMaskElement2, RenderElement3);
  function SpriteMaskElement2() {
    var _this;
    _this = RenderElement3.call(this) || this;
    _this.isAdd = true;
    _this.multiRenderData = false;
    return _this;
  }
  var _proto = SpriteMaskElement2.prototype;
  _proto.setValue = function setValue(component, renderData, material) {
    this.component = component;
    this.renderData = renderData;
    this.material = material;
  };
  return SpriteMaskElement2;
}(RenderElement);
var SpriteMaskInteraction;
(function(SpriteMaskInteraction2) {
  SpriteMaskInteraction2[SpriteMaskInteraction2[
    /** The sprite will not interact with the masking system. */
    "None"
  ] = 0] = "None";
  SpriteMaskInteraction2[SpriteMaskInteraction2[
    /** The sprite will be visible only in areas where a mask is present. */
    "VisibleInsideMask"
  ] = 1] = "VisibleInsideMask";
  SpriteMaskInteraction2[SpriteMaskInteraction2[
    /** The sprite will be visible only in areas where no mask is present. */
    "VisibleOutsideMask"
  ] = 2] = "VisibleOutsideMask";
})(SpriteMaskInteraction || (SpriteMaskInteraction = {}));
var _Renderer;
var Renderer = (_Renderer = function(Component2) {
  _inherits(Renderer1, Component2);
  function Renderer1(entity) {
    var _this;
    _this = Component2.call(this, entity) || this;
    _this.shaderData = new ShaderData(ShaderDataGroup.Renderer);
    _this._onUpdateIndex = -1;
    _this._rendererIndex = -1;
    _this._globalShaderMacro = new ShaderMacroCollection();
    _this._bounds = new BoundingBox();
    _this._overrideUpdate = false;
    _this._materials = [];
    _this._dirtyUpdateFlag = 0;
    _this._mvMatrix = new Matrix();
    _this._mvpMatrix = new Matrix();
    _this._mvInvMatrix = new Matrix();
    _this._normalMatrix = new Matrix();
    _this._materialsInstanced = [];
    _this._priority = 0;
    _this._receiveShadows = true;
    _this._rendererLayer = new Vector4();
    _this.castShadows = true;
    var prototype = Renderer.prototype;
    var shaderData = _this.shaderData;
    _this._overrideUpdate = _this.update !== prototype.update;
    shaderData._addRefCount(1);
    _this._onTransformChanged = _this._onTransformChanged.bind(_assert_this_initialized(_this));
    _this._registerEntityTransformListener();
    shaderData.enableMacro(Renderer._receiveShadowMacro);
    shaderData.setVector4(Renderer._rendererLayerProperty, _this._rendererLayer);
    return _this;
  }
  var _proto = Renderer1.prototype;
  _proto.getInstanceMaterial = function getInstanceMaterial(index) {
    if (index === void 0)
      index = 0;
    var materials = this._materials;
    if (materials.length > index) {
      var material = materials[index];
      if (material) {
        if (this._materialsInstanced[index]) {
          return material;
        } else {
          return this._createInstanceMaterial(material, index);
        }
      }
    }
    return null;
  };
  _proto.getMaterial = function getMaterial(index) {
    if (index === void 0)
      index = 0;
    return this._materials[index] || null;
  };
  _proto.setMaterial = function setMaterial(indexOrMaterial, material) {
    if (material === void 0)
      material = null;
    if (typeof indexOrMaterial === "number") {
      this._setMaterial(indexOrMaterial, material);
    } else {
      this._setMaterial(0, indexOrMaterial);
    }
  };
  _proto.getInstanceMaterials = function getInstanceMaterials() {
    var materials = this._materials;
    var materialsInstance = this._materialsInstanced;
    for (var i = 0, n = materials.length; i < n; i++) {
      if (!materialsInstance[i]) {
        this._createInstanceMaterial(this._materials[i], i);
      }
    }
    return materials;
  };
  _proto.getMaterials = function getMaterials() {
    return this._materials;
  };
  _proto.setMaterials = function setMaterials(materials) {
    var count = materials.length;
    var internalMaterials = this._materials;
    var materialsInstanced = this._materialsInstanced;
    for (var i = count, n = internalMaterials.length; i < n; i++) {
      var internalMaterial = internalMaterials[i];
      internalMaterial && internalMaterial._addRefCount(-1);
    }
    internalMaterials.length !== count && (internalMaterials.length = count);
    materialsInstanced.length !== 0 && (materialsInstanced.length = 0);
    for (var i1 = 0; i1 < count; i1++) {
      var internalMaterial1 = internalMaterials[i1];
      var material = materials[i1];
      if (internalMaterial1 !== material) {
        internalMaterials[i1] = material;
        internalMaterial1 && internalMaterial1._addRefCount(-1);
        material && material._addRefCount(1);
      }
    }
  };
  _proto.update = function update(deltaTime) {
  };
  _proto._onEnable = function _onEnable() {
    var componentsManager = this.engine._componentsManager;
    if (this._overrideUpdate) {
      componentsManager.addOnUpdateRenderers(this);
    }
    componentsManager.addRenderer(this);
  };
  _proto._onDisable = function _onDisable() {
    var componentsManager = this.engine._componentsManager;
    if (this._overrideUpdate) {
      componentsManager.removeOnUpdateRenderers(this);
    }
    componentsManager.removeRenderer(this);
  };
  _proto._prepareRender = function _prepareRender(context) {
    var virtualCamera = context.virtualCamera;
    var cameraPosition = virtualCamera.position;
    var boundsCenter = this.bounds.getCenter(Renderer._tempVector0);
    if (virtualCamera.isOrthographic) {
      Vector3.subtract(boundsCenter, cameraPosition, boundsCenter);
      this._distanceForSort = Vector3.dot(boundsCenter, virtualCamera.forward);
    } else {
      this._distanceForSort = Vector3.distanceSquared(boundsCenter, cameraPosition);
    }
    this._updateShaderData(context);
    this._render(context);
    ShaderMacroCollection.unionCollection(context.camera._globalShaderMacro, this.shaderData._macroCollection, this._globalShaderMacro);
  };
  _proto._onDestroy = function _onDestroy() {
    this.entity.transform._updateFlagManager.removeListener(this._onTransformChanged);
    this.shaderData._addRefCount(-1);
    var materials = this._materials;
    for (var i = 0, n = materials.length; i < n; i++) {
      var _materials_i;
      (_materials_i = materials[i]) == null ? void 0 : _materials_i._addRefCount(-1);
    }
  };
  _proto._updateShaderData = function _updateShaderData(context) {
    var entity = this.entity;
    var worldMatrix = entity.transform.worldMatrix;
    this._updateTransformShaderData(context, worldMatrix);
    var layer = entity.layer;
    this._rendererLayer.set(layer & 65535, layer >>> 16 & 65535, 0, 0);
  };
  _proto._updateTransformShaderData = function _updateTransformShaderData(context, worldMatrix) {
    var shaderData = this.shaderData;
    var virtualCamera = context.virtualCamera;
    var mvMatrix = this._mvMatrix;
    var mvpMatrix = this._mvpMatrix;
    var mvInvMatrix = this._mvInvMatrix;
    var normalMatrix = this._normalMatrix;
    Matrix.multiply(virtualCamera.viewMatrix, worldMatrix, mvMatrix);
    Matrix.multiply(virtualCamera.viewProjectionMatrix, worldMatrix, mvpMatrix);
    Matrix.invert(mvMatrix, mvInvMatrix);
    Matrix.invert(worldMatrix, normalMatrix);
    normalMatrix.transpose();
    shaderData.setMatrix(Renderer._localMatrixProperty, this.entity.transform.localMatrix);
    shaderData.setMatrix(Renderer._worldMatrixProperty, worldMatrix);
    shaderData.setMatrix(Renderer._mvMatrixProperty, mvMatrix);
    shaderData.setMatrix(Renderer._mvpMatrixProperty, mvpMatrix);
    shaderData.setMatrix(Renderer._mvInvMatrixProperty, mvInvMatrix);
    shaderData.setMatrix(Renderer._normalMatrixProperty, normalMatrix);
  };
  _proto._registerEntityTransformListener = function _registerEntityTransformListener() {
    this.entity.transform._updateFlagManager.addListener(this._onTransformChanged);
  };
  _proto._updateBounds = function _updateBounds(worldBounds) {
  };
  _proto._render = function _render(context) {
    throw "not implement";
  };
  _proto._createInstanceMaterial = function _createInstanceMaterial(material, index) {
    var insMaterial = material.clone();
    insMaterial.name = insMaterial.name + "(Instance)";
    material._addRefCount(-1);
    insMaterial._addRefCount(1);
    this._materialsInstanced[index] = true;
    this._materials[index] = insMaterial;
    return insMaterial;
  };
  _proto._setMaterial = function _setMaterial(index, material) {
    var materials = this._materials;
    if (index >= materials.length) {
      materials.length = index + 1;
    }
    var internalMaterial = materials[index];
    if (internalMaterial !== material) {
      var materialsInstance = this._materialsInstanced;
      index < materialsInstance.length && (materialsInstance[index] = false);
      internalMaterial && internalMaterial._addRefCount(-1);
      material && material._addRefCount(1);
      materials[index] = material;
    }
  };
  _proto._onTransformChanged = function _onTransformChanged(type) {
    this._dirtyUpdateFlag |= 1;
  };
  _create_class2(Renderer1, [
    {
      key: "isCulled",
      get: (
        /**
        * Whether it is culled in the current frame and does not participate in rendering.
        */
        function get() {
          return !(this._renderFrameCount === void 0 || this._renderFrameCount === this._engine.time.frameCount - 1);
        }
      )
    },
    {
      key: "receiveShadows",
      get: (
        /**
        * Whether receive shadow.
        */
        function get() {
          return this._receiveShadows;
        }
      ),
      set: function set(value) {
        if (this._receiveShadows !== value) {
          if (value) {
            this.shaderData.enableMacro(Renderer._receiveShadowMacro);
          } else {
            this.shaderData.disableMacro(Renderer._receiveShadowMacro);
          }
          this._receiveShadows = value;
        }
      }
    },
    {
      key: "materialCount",
      get: (
        /**
        * Material count.
        */
        function get() {
          return this._materials.length;
        }
      ),
      set: function set(value) {
        var materials = this._materials;
        var materialsInstanced = this._materialsInstanced;
        materials.length !== value && (materials.length = value);
        materialsInstanced.length > value && (materialsInstanced.length = value);
      }
    },
    {
      key: "bounds",
      get: (
        /**
        * The bounding volume of the renderer.
        */
        function get() {
          if (this._dirtyUpdateFlag & 1) {
            this._updateBounds(this._bounds);
            this._dirtyUpdateFlag &= ~1;
          }
          return this._bounds;
        }
      )
    },
    {
      key: "priority",
      get: (
        /**
        * The render priority of the renderer, lower values are rendered first and higher values are rendered last.
        */
        function get() {
          return this._priority;
        }
      ),
      set: function set(value) {
        this._priority = value;
      }
    }
  ]);
  return Renderer1;
}(Component), function() {
  _Renderer._tempVector0 = new Vector3();
}(), function() {
  _Renderer._receiveShadowMacro = Shader.getMacroByName("OASIS_RECEIVE_SHADOWS");
}(), function() {
  _Renderer._localMatrixProperty = Shader.getPropertyByName("u_localMat");
}(), function() {
  _Renderer._worldMatrixProperty = Shader.getPropertyByName("u_modelMat");
}(), function() {
  _Renderer._mvMatrixProperty = Shader.getPropertyByName("u_MVMat");
}(), function() {
  _Renderer._mvpMatrixProperty = Shader.getPropertyByName("u_MVPMat");
}(), function() {
  _Renderer._mvInvMatrixProperty = Shader.getPropertyByName("u_MVInvMat");
}(), function() {
  _Renderer._normalMatrixProperty = Shader.getPropertyByName("u_normalMat");
}(), function() {
  _Renderer._rendererLayerProperty = Shader.getPropertyByName("oasis_RendererLayer");
}(), _Renderer);
__decorate([
  deepClone
], Renderer.prototype, "shaderData", void 0);
__decorate([
  ignoreClone
], Renderer.prototype, "_distanceForSort", void 0);
__decorate([
  ignoreClone
], Renderer.prototype, "_onUpdateIndex", void 0);
__decorate([
  ignoreClone
], Renderer.prototype, "_rendererIndex", void 0);
__decorate([
  ignoreClone
], Renderer.prototype, "_globalShaderMacro", void 0);
__decorate([
  deepClone
], Renderer.prototype, "_bounds", void 0);
__decorate([
  ignoreClone
], Renderer.prototype, "_renderFrameCount", void 0);
__decorate([
  ignoreClone
], Renderer.prototype, "_overrideUpdate", void 0);
__decorate([
  shallowClone
], Renderer.prototype, "_materials", void 0);
__decorate([
  ignoreClone
], Renderer.prototype, "_dirtyUpdateFlag", void 0);
__decorate([
  ignoreClone
], Renderer.prototype, "_mvMatrix", void 0);
__decorate([
  ignoreClone
], Renderer.prototype, "_mvpMatrix", void 0);
__decorate([
  ignoreClone
], Renderer.prototype, "_mvInvMatrix", void 0);
__decorate([
  ignoreClone
], Renderer.prototype, "_normalMatrix", void 0);
__decorate([
  ignoreClone
], Renderer.prototype, "_materialsInstanced", void 0);
__decorate([
  ignoreClone
], Renderer.prototype, "_priority", void 0);
__decorate([
  assignmentClone
], Renderer.prototype, "_receiveShadows", void 0);
__decorate([
  ignoreClone
], Renderer.prototype, "_rendererLayer", void 0);
__decorate([
  ignoreClone
], Renderer.prototype, "_onTransformChanged", null);
Renderer = __decorate([
  dependentComponents(Transform)
], Renderer);
var RendererUpdateFlags;
(function(RendererUpdateFlags2) {
  RendererUpdateFlags2[RendererUpdateFlags2[
    /** Include world position and world bounds. */
    "WorldVolume"
  ] = 1] = "WorldVolume";
})(RendererUpdateFlags || (RendererUpdateFlags = {}));
function StaticInterfaceImplement() {
  return function(constructor) {
  };
}
var _SimpleSpriteAssembler;
var SimpleSpriteAssembler = (_SimpleSpriteAssembler = function() {
  function SimpleSpriteAssembler1() {
  }
  SimpleSpriteAssembler1.resetData = function resetData(renderer) {
    var renderData = renderer._renderData;
    var vertexCount = renderData.vertexCount = 4;
    var positions = renderData.positions, uvs = renderData.uvs;
    if (positions.length < vertexCount) {
      for (var i = positions.length; i < vertexCount; i++) {
        positions.push(new Vector3());
        uvs.push(new Vector2());
      }
    }
    renderData.triangles = SimpleSpriteAssembler._rectangleTriangles;
  };
  SimpleSpriteAssembler1.updatePositions = function updatePositions(renderer) {
    var width = renderer.width, height = renderer.height, sprite = renderer.sprite;
    var _sprite_pivot = sprite.pivot, pivotX = _sprite_pivot.x, pivotY = _sprite_pivot.y;
    var worldMatrix = SimpleSpriteAssembler._worldMatrix;
    var wE = worldMatrix.elements;
    var _renderer_entity_transform_worldMatrix = renderer.entity.transform.worldMatrix, pWE = _renderer_entity_transform_worldMatrix.elements;
    var sx = renderer.flipX ? -width : width;
    var sy = renderer.flipY ? -height : height;
    wE[0] = pWE[0] * sx, wE[1] = pWE[1] * sx, wE[2] = pWE[2] * sx;
    wE[4] = pWE[4] * sy, wE[5] = pWE[5] * sy, wE[6] = pWE[6] * sy;
    wE[8] = pWE[8], wE[9] = pWE[9], wE[10] = pWE[10];
    wE[12] = pWE[12] - pivotX * wE[0] - pivotY * wE[4];
    wE[13] = pWE[13] - pivotX * wE[1] - pivotY * wE[5];
    wE[14] = pWE[14] - pivotX * wE[2] - pivotY * wE[6];
    var spritePositions = sprite._getPositions();
    var positions = renderer._renderData.positions;
    for (var i = 0; i < 4; i++) {
      var _spritePositions_i = spritePositions[i], x = _spritePositions_i.x, y = _spritePositions_i.y;
      positions[i].set(wE[0] * x + wE[4] * y + wE[12], wE[1] * x + wE[5] * y + wE[13], wE[2] * x + wE[6] * y + wE[14]);
    }
    BoundingBox.transform(sprite._getBounds(), worldMatrix, renderer._bounds);
  };
  SimpleSpriteAssembler1.updateUVs = function updateUVs(renderer) {
    var spriteUVs = renderer.sprite._getUVs();
    var renderUVs = renderer._renderData.uvs;
    var _spriteUVs_ = spriteUVs[0], left = _spriteUVs_.x, bottom = _spriteUVs_.y;
    var _spriteUVs_1 = spriteUVs[3], right = _spriteUVs_1.x, top = _spriteUVs_1.y;
    renderUVs[0].set(left, bottom);
    renderUVs[1].set(right, bottom);
    renderUVs[2].set(left, top);
    renderUVs[3].set(right, top);
  };
  return SimpleSpriteAssembler1;
}(), function() {
  _SimpleSpriteAssembler._rectangleTriangles = [
    0,
    1,
    2,
    2,
    1,
    3
  ];
}(), function() {
  _SimpleSpriteAssembler._worldMatrix = new Matrix();
}(), _SimpleSpriteAssembler);
SimpleSpriteAssembler = __decorate([
  StaticInterfaceImplement()
], SimpleSpriteAssembler);
var RenderData2D = function RenderData2D2(vertexCount, positions, uvs, triangles, color) {
  if (triangles === void 0)
    triangles = null;
  if (color === void 0)
    color = null;
  this.vertexCount = vertexCount;
  this.positions = positions;
  this.uvs = uvs;
  this.triangles = triangles;
  this.color = color;
};
var SpriteMaskLayer;
(function(SpriteMaskLayer2) {
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 0. */
    "Layer0"
  ] = 1] = "Layer0";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 1. */
    "Layer1"
  ] = 2] = "Layer1";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 2. */
    "Layer2"
  ] = 4] = "Layer2";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 3. */
    "Layer3"
  ] = 8] = "Layer3";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 4. */
    "Layer4"
  ] = 16] = "Layer4";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 5. */
    "Layer5"
  ] = 32] = "Layer5";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 6. */
    "Layer6"
  ] = 64] = "Layer6";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 7. */
    "Layer7"
  ] = 128] = "Layer7";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 8. */
    "Layer8"
  ] = 256] = "Layer8";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 9. */
    "Layer9"
  ] = 512] = "Layer9";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 10. */
    "Layer10"
  ] = 1024] = "Layer10";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 11. */
    "Layer11"
  ] = 2048] = "Layer11";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 12. */
    "Layer12"
  ] = 4096] = "Layer12";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 13. */
    "Layer13"
  ] = 8192] = "Layer13";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 14. */
    "Layer14"
  ] = 16384] = "Layer14";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 15. */
    "Layer15"
  ] = 32768] = "Layer15";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 16. */
    "Layer16"
  ] = 65536] = "Layer16";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 17. */
    "Layer17"
  ] = 131072] = "Layer17";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 18. */
    "Layer18"
  ] = 262144] = "Layer18";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 19. */
    "Layer19"
  ] = 524288] = "Layer19";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 20. */
    "Layer20"
  ] = 1048576] = "Layer20";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 21. */
    "Layer21"
  ] = 2097152] = "Layer21";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 22. */
    "Layer22"
  ] = 4194304] = "Layer22";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 23. */
    "Layer23"
  ] = 8388608] = "Layer23";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 24. */
    "Layer24"
  ] = 16777216] = "Layer24";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 25. */
    "Layer25"
  ] = 33554432] = "Layer25";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 26. */
    "Layer26"
  ] = 67108864] = "Layer26";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 27. */
    "Layer27"
  ] = 134217728] = "Layer27";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 28. */
    "Layer28"
  ] = 268435456] = "Layer28";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 29. */
    "Layer29"
  ] = 536870912] = "Layer29";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 30. */
    "Layer30"
  ] = 1073741824] = "Layer30";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** Mask layer 31. */
    "Layer31"
  ] = 2147483648] = "Layer31";
  SpriteMaskLayer2[SpriteMaskLayer2[
    /** All mask layers. */
    "Everything"
  ] = 4294967295] = "Everything";
})(SpriteMaskLayer || (SpriteMaskLayer = {}));
var SpriteModifyFlags;
(function(SpriteModifyFlags2) {
  SpriteModifyFlags2[SpriteModifyFlags2["texture"] = 1] = "texture";
  SpriteModifyFlags2[SpriteModifyFlags2["size"] = 2] = "size";
  SpriteModifyFlags2[SpriteModifyFlags2["atlasRotate"] = 4] = "atlasRotate";
  SpriteModifyFlags2[SpriteModifyFlags2["atlasRegion"] = 8] = "atlasRegion";
  SpriteModifyFlags2[SpriteModifyFlags2["atlasRegionOffset"] = 16] = "atlasRegionOffset";
  SpriteModifyFlags2[SpriteModifyFlags2["region"] = 32] = "region";
  SpriteModifyFlags2[SpriteModifyFlags2["pivot"] = 64] = "pivot";
  SpriteModifyFlags2[SpriteModifyFlags2["border"] = 128] = "border";
})(SpriteModifyFlags || (SpriteModifyFlags = {}));
var SpriteMask = function(Renderer2) {
  _inherits(SpriteMask2, Renderer2);
  function SpriteMask2(entity) {
    var _this;
    _this = Renderer2.call(this, entity) || this;
    _this.influenceLayers = SpriteMaskLayer.Everything;
    _this._sprite = null;
    _this._automaticWidth = 0;
    _this._automaticHeight = 0;
    _this._customWidth = void 0;
    _this._customHeight = void 0;
    _this._flipX = false;
    _this._flipY = false;
    _this._alphaCutoff = 0.5;
    _this._renderData = new RenderData2D(4, [], []);
    SimpleSpriteAssembler.resetData(_assert_this_initialized(_this));
    _this.setMaterial(_this._engine._spriteMaskDefaultMaterial);
    _this.shaderData.setFloat(SpriteMask2._alphaCutoffProperty, _this._alphaCutoff);
    _this._onSpriteChange = _this._onSpriteChange.bind(_assert_this_initialized(_this));
    return _this;
  }
  var _proto = SpriteMask2.prototype;
  _proto._onDestroy = function _onDestroy() {
    var _this__sprite;
    (_this__sprite = this._sprite) == null ? void 0 : _this__sprite._updateFlagManager.removeListener(this._onSpriteChange);
    this._sprite = null;
    this._renderData = null;
    Renderer2.prototype._onDestroy.call(this);
  };
  _proto._cloneTo = function _cloneTo(target) {
    target.sprite = this._sprite;
  };
  _proto._updateBounds = function _updateBounds(worldBounds) {
    if (this.sprite) {
      SimpleSpriteAssembler.updatePositions(this);
    } else {
      worldBounds.min.set(0, 0, 0);
      worldBounds.max.set(0, 0, 0);
    }
  };
  _proto._render = function _render(context) {
    var _this_sprite;
    if (!((_this_sprite = this.sprite) == null ? void 0 : _this_sprite.texture) || !this.width || !this.height) {
      return;
    }
    if (this._dirtyUpdateFlag & RendererUpdateFlags.WorldVolume) {
      SimpleSpriteAssembler.updatePositions(this);
      this._dirtyUpdateFlag &= ~RendererUpdateFlags.WorldVolume;
    }
    if (this._dirtyUpdateFlag & 2) {
      SimpleSpriteAssembler.updateUVs(this);
      this._dirtyUpdateFlag &= ~2;
    }
    var spriteMaskElementPool = this._engine._spriteMaskElementPool;
    var maskElement = spriteMaskElementPool.getFromPool();
    maskElement.setValue(this, this._renderData, this.getMaterial());
    context.camera._renderPipeline._allSpriteMasks.add(this);
    this._maskElement = maskElement;
  };
  _proto._calDefaultSize = function _calDefaultSize() {
    var sprite = this._sprite;
    if (sprite) {
      this._automaticWidth = sprite.width;
      this._automaticHeight = sprite.height;
    } else {
      this._automaticWidth = this._automaticHeight = 0;
    }
    this._dirtyUpdateFlag &= ~4;
  };
  _proto._onSpriteChange = function _onSpriteChange(type) {
    switch (type) {
      case SpriteModifyFlags.texture:
        this.shaderData.setTexture(SpriteMask2._textureProperty, this.sprite.texture);
        break;
      case SpriteModifyFlags.size:
        this._dirtyUpdateFlag |= 4;
        if (this._customWidth === void 0 || this._customHeight === void 0) {
          this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;
        }
        break;
      case SpriteModifyFlags.region:
      case SpriteModifyFlags.atlasRegionOffset:
        this._dirtyUpdateFlag |= 3;
        break;
      case SpriteModifyFlags.atlasRegion:
        this._dirtyUpdateFlag |= 2;
        break;
      case SpriteModifyFlags.pivot:
        this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;
        break;
    }
  };
  _create_class2(SpriteMask2, [
    {
      key: "width",
      get: (
        /**
        * Render width (in world coordinates).
        *
        * @remarks
        * If width is set, return the set value,
        * otherwise return `SpriteMask.sprite.width`.
        */
        function get() {
          if (this._customWidth !== void 0) {
            return this._customWidth;
          } else {
            this._dirtyUpdateFlag & 4 && this._calDefaultSize();
            return this._automaticWidth;
          }
        }
      ),
      set: function set(value) {
        if (this._customWidth !== value) {
          this._customWidth = value;
          this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;
        }
      }
    },
    {
      key: "height",
      get: (
        /**
        * Render height (in world coordinates).
        *
        * @remarks
        * If height is set, return the set value,
        * otherwise return `SpriteMask.sprite.height`.
        */
        function get() {
          if (this._customHeight !== void 0) {
            return this._customHeight;
          } else {
            this._dirtyUpdateFlag & 4 && this._calDefaultSize();
            return this._automaticHeight;
          }
        }
      ),
      set: function set(value) {
        if (this._customHeight !== value) {
          this._customHeight = value;
          this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;
        }
      }
    },
    {
      key: "flipX",
      get: (
        /**
        * Flips the sprite on the X axis.
        */
        function get() {
          return this._flipX;
        }
      ),
      set: function set(value) {
        if (this._flipX !== value) {
          this._flipX = value;
          this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;
        }
      }
    },
    {
      key: "flipY",
      get: (
        /**
        * Flips the sprite on the Y axis.
        */
        function get() {
          return this._flipY;
        }
      ),
      set: function set(value) {
        if (this._flipY !== value) {
          this._flipY = value;
          this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;
        }
      }
    },
    {
      key: "sprite",
      get: (
        /**
        * The Sprite to render.
        */
        function get() {
          return this._sprite;
        }
      ),
      set: function set(value) {
        var lastSprite = this._sprite;
        if (lastSprite !== value) {
          lastSprite && lastSprite._updateFlagManager.removeListener(this._onSpriteChange);
          this._dirtyUpdateFlag |= 7;
          if (value) {
            value._updateFlagManager.addListener(this._onSpriteChange);
            this.shaderData.setTexture(SpriteMask2._textureProperty, value.texture);
          } else {
            this.shaderData.setTexture(SpriteMask2._textureProperty, null);
          }
          this._sprite = value;
        }
      }
    },
    {
      key: "alphaCutoff",
      get: (
        /**
        * The minimum alpha value used by the mask to select the area of influence defined over the mask's sprite. Value between 0 and 1.
        */
        function get() {
          return this._alphaCutoff;
        }
      ),
      set: function set(value) {
        if (this._alphaCutoff !== value) {
          this._alphaCutoff = value;
          this.shaderData.setFloat(SpriteMask2._alphaCutoffProperty, value);
        }
      }
    }
  ]);
  return SpriteMask2;
}(Renderer);
(function() {
  SpriteMask._textureProperty = Shader.getPropertyByName("u_maskTexture");
})();
(function() {
  SpriteMask._alphaCutoffProperty = Shader.getPropertyByName("u_maskAlphaCutoff");
})();
__decorate([
  assignmentClone
], SpriteMask.prototype, "influenceLayers", void 0);
__decorate([
  ignoreClone
], SpriteMask.prototype, "_sprite", void 0);
__decorate([
  ignoreClone
], SpriteMask.prototype, "_automaticWidth", void 0);
__decorate([
  ignoreClone
], SpriteMask.prototype, "_automaticHeight", void 0);
__decorate([
  assignmentClone
], SpriteMask.prototype, "_customWidth", void 0);
__decorate([
  assignmentClone
], SpriteMask.prototype, "_customHeight", void 0);
__decorate([
  assignmentClone
], SpriteMask.prototype, "_flipX", void 0);
__decorate([
  assignmentClone
], SpriteMask.prototype, "_flipY", void 0);
__decorate([
  assignmentClone
], SpriteMask.prototype, "_alphaCutoff", void 0);
__decorate([
  ignoreClone
], SpriteMask.prototype, "_onSpriteChange", null);
var SpriteMaskUpdateFlags;
(function(SpriteMaskUpdateFlags2) {
  SpriteMaskUpdateFlags2[SpriteMaskUpdateFlags2[
    /** UV. */
    "UV"
  ] = 2] = "UV";
  SpriteMaskUpdateFlags2[SpriteMaskUpdateFlags2[
    /** WorldVolume and UV . */
    "RenderData"
  ] = 3] = "RenderData";
  SpriteMaskUpdateFlags2[SpriteMaskUpdateFlags2[
    /** Automatic Size. */
    "AutomaticSize"
  ] = 4] = "AutomaticSize";
  SpriteMaskUpdateFlags2[SpriteMaskUpdateFlags2[
    /** All. */
    "All"
  ] = 7] = "All";
})(SpriteMaskUpdateFlags || (SpriteMaskUpdateFlags = {}));
var VertexElementFormat;
(function(VertexElementFormat2) {
  VertexElementFormat2[VertexElementFormat2[
    /** 32-bit float */
    "Float"
  ] = 0] = "Float";
  VertexElementFormat2[VertexElementFormat2[
    /** Two-dimensional 32-bit float */
    "Vector2"
  ] = 1] = "Vector2";
  VertexElementFormat2[VertexElementFormat2[
    /** Three-dimensional 32-bit float */
    "Vector3"
  ] = 2] = "Vector3";
  VertexElementFormat2[VertexElementFormat2[
    /** Four-dimensional 32-bit float */
    "Vector4"
  ] = 3] = "Vector4";
  VertexElementFormat2[VertexElementFormat2[
    /** Four-dimensional 8-bit integer,range is [-128,127] */
    "Byte4"
  ] = 4] = "Byte4";
  VertexElementFormat2[VertexElementFormat2[
    /** Four-dimensional 8-bit Unsigned integer, range is [0,255] */
    "UByte4"
  ] = 5] = "UByte4";
  VertexElementFormat2[VertexElementFormat2[
    /** Four-dimensional 8-bit Normalized integer, range is [-1,1] */
    "NormalizedByte4"
  ] = 6] = "NormalizedByte4";
  VertexElementFormat2[VertexElementFormat2[
    /** Four-dimensional 8-bit Normalized unsigned integer, range is [0,1] */
    "NormalizedUByte4"
  ] = 7] = "NormalizedUByte4";
  VertexElementFormat2[VertexElementFormat2[
    /** Two-dimensional 16-bit integer, range is[-32768, 32767] */
    "Short2"
  ] = 8] = "Short2";
  VertexElementFormat2[VertexElementFormat2[
    /** Two-dimensional 16-bit Unsigned integer, range is [0, 65535] */
    "UShort2"
  ] = 9] = "UShort2";
  VertexElementFormat2[VertexElementFormat2[
    /** Two-dimensional 16-bit Unsigned integer, range is [-1, 1] */
    "NormalizedShort2"
  ] = 10] = "NormalizedShort2";
  VertexElementFormat2[VertexElementFormat2[
    /** Two-dimensional 16-bit Normalized unsigned integer, range is [0, 1] */
    "NormalizedUShort2"
  ] = 11] = "NormalizedUShort2";
  VertexElementFormat2[VertexElementFormat2[
    /** Four-dimensional 16-bit integer, range is [-32768, 32767] */
    "Short4"
  ] = 12] = "Short4";
  VertexElementFormat2[VertexElementFormat2[
    /** Four-dimensional 16-bit Unsigned integer, range is [0, 65535] */
    "UShort4"
  ] = 13] = "UShort4";
  VertexElementFormat2[VertexElementFormat2[
    /** Four-dimensional 16-bit Normalized integer, range is[-1, 1] */
    "NormalizedShort4"
  ] = 14] = "NormalizedShort4";
  VertexElementFormat2[VertexElementFormat2[
    /** Four-dimensional 16-bit Normalized unsigned integer, range is [0, 1] */
    "NormalizedUShort4"
  ] = 15] = "NormalizedUShort4";
})(VertexElementFormat || (VertexElementFormat = {}));
var BufferUsage;
(function(BufferUsage2) {
  BufferUsage2[BufferUsage2[
    /** The buffer content are intended to be specified once, and used many times */
    "Static"
  ] = 0] = "Static";
  BufferUsage2[BufferUsage2[
    /** The buffer contents are intended to be respecified repeatedly, and used many times */
    "Dynamic"
  ] = 1] = "Dynamic";
  BufferUsage2[BufferUsage2[
    /** The buffer contents are intended to be specified once, and used at most a few times */
    "Stream"
  ] = 2] = "Stream";
})(BufferUsage || (BufferUsage = {}));
var IndexFormat;
(function(IndexFormat2) {
  IndexFormat2[IndexFormat2[
    /** 8 bit */
    "UInt8"
  ] = 0] = "UInt8";
  IndexFormat2[IndexFormat2[
    /** 16 bit */
    "UInt16"
  ] = 1] = "UInt16";
  IndexFormat2[IndexFormat2[
    /** 32 bit */
    "UInt32"
  ] = 2] = "UInt32";
})(IndexFormat || (IndexFormat = {}));
var BufferUtil = function() {
  function BufferUtil2() {
  }
  BufferUtil2._getGLBufferUsage = function _getGLBufferUsage(gl, bufferUsage) {
    switch (bufferUsage) {
      case BufferUsage.Static:
        return gl.STATIC_DRAW;
      case BufferUsage.Dynamic:
        return gl.DYNAMIC_DRAW;
      case BufferUsage.Stream:
        return gl.STREAM_DRAW;
    }
  };
  BufferUtil2._getGLIndexType = function _getGLIndexType(indexFormat) {
    switch (indexFormat) {
      case IndexFormat.UInt8:
        return DataType.UNSIGNED_BYTE;
      case IndexFormat.UInt16:
        return DataType.UNSIGNED_SHORT;
      case IndexFormat.UInt32:
        return DataType.UNSIGNED_INT;
    }
  };
  BufferUtil2._getGLIndexByteCount = function _getGLIndexByteCount(indexFormat) {
    switch (indexFormat) {
      case IndexFormat.UInt8:
        return 1;
      case IndexFormat.UInt16:
        return 2;
      case IndexFormat.UInt32:
        return 4;
    }
  };
  BufferUtil2._getElementInfo = function _getElementInfo(format) {
    var size;
    var type;
    var normalized = false;
    switch (format) {
      case VertexElementFormat.Float:
        size = 1;
        type = DataType.FLOAT;
        break;
      case VertexElementFormat.Vector2:
        size = 2;
        type = DataType.FLOAT;
        break;
      case VertexElementFormat.Vector3:
        size = 3;
        type = DataType.FLOAT;
        break;
      case VertexElementFormat.Vector4:
        size = 4;
        type = DataType.FLOAT;
        break;
      case VertexElementFormat.Byte4:
        size = 4;
        type = DataType.BYTE;
        break;
      case VertexElementFormat.UByte4:
        size = 4;
        type = DataType.UNSIGNED_BYTE;
        break;
      case VertexElementFormat.NormalizedByte4:
        size = 4;
        type = DataType.BYTE;
        normalized = true;
        break;
      case VertexElementFormat.NormalizedUByte4:
        size = 4;
        type = DataType.UNSIGNED_BYTE;
        normalized = true;
        break;
      case VertexElementFormat.Short2:
        size = 2;
        type = DataType.SHORT;
        break;
      case VertexElementFormat.UShort2:
        size = 2;
        type = DataType.UNSIGNED_SHORT;
        break;
      case VertexElementFormat.NormalizedShort2:
        size = 2;
        type = DataType.SHORT;
        normalized = true;
        break;
      case VertexElementFormat.NormalizedUShort2:
        size = 2;
        type = DataType.UNSIGNED_SHORT;
        normalized = true;
        break;
      case VertexElementFormat.Short4:
        size = 4;
        type = DataType.SHORT;
        break;
      case VertexElementFormat.UShort4:
        size = 4;
        type = DataType.UNSIGNED_SHORT;
        break;
      case VertexElementFormat.NormalizedShort4:
        size = 4;
        type = DataType.SHORT;
        normalized = true;
        break;
      case VertexElementFormat.NormalizedUShort4:
        size = 4;
        type = DataType.UNSIGNED_SHORT;
        normalized = true;
        break;
    }
    return {
      size,
      type,
      normalized
    };
  };
  return BufferUtil2;
}();
var VertexElement = function() {
  function VertexElement2(semantic, offset, format, bindingIndex, instanceStepRate) {
    if (instanceStepRate === void 0)
      instanceStepRate = 0;
    this._semantic = semantic;
    this._offset = offset;
    this._format = format;
    this._bindingIndex = bindingIndex;
    this._glElementInfo = BufferUtil._getElementInfo(this.format);
    this._instanceStepRate = Math.floor(instanceStepRate);
  }
  _create_class2(VertexElement2, [
    {
      key: "semantic",
      get: (
        /**
        * Vertex semantic.
        */
        function get() {
          return this._semantic;
        }
      )
    },
    {
      key: "offset",
      get: (
        /**
        * Vertex data byte offset.
        */
        function get() {
          return this._offset;
        }
      ),
      set: function set(value) {
        this._offset = value;
      }
    },
    {
      key: "format",
      get: (
        /**
        * Vertex data format.
        */
        function get() {
          return this._format;
        }
      )
    },
    {
      key: "bindingIndex",
      get: (
        /**
        * Vertex buffer binding index.
        */
        function get() {
          return this._bindingIndex;
        }
      ),
      set: function set(value) {
        this._bindingIndex = value;
      }
    },
    {
      key: "instanceStepRate",
      get: (
        /**
        * Instance cadence, the number of instances drawn for each vertex in the buffer, non-instance elements must be 0.
        */
        function get() {
          return this._instanceStepRate;
        }
      )
    }
  ]);
  return VertexElement2;
}();
var BufferBindFlag;
(function(BufferBindFlag2) {
  BufferBindFlag2[BufferBindFlag2[
    /** Vertex buffer binding flag */
    "VertexBuffer"
  ] = 0] = "VertexBuffer";
  BufferBindFlag2[BufferBindFlag2[
    /** Index buffer binding flag */
    "IndexBuffer"
  ] = 1] = "IndexBuffer";
})(BufferBindFlag || (BufferBindFlag = {}));
var SetDataOptions;
(function(SetDataOptions2) {
  SetDataOptions2[SetDataOptions2[
    /** Can overwrite part of used buffer data and ensure correct rendering */
    "None"
  ] = 0] = "None";
  SetDataOptions2[SetDataOptions2[
    /** Discard old buffer and create a new buffer, and won't affect the previous rendering */
    "Discard"
  ] = 1] = "Discard";
})(SetDataOptions || (SetDataOptions = {}));
var Buffer = function(RefObject2) {
  _inherits(Buffer2, RefObject2);
  function Buffer2(engine, type, byteLengthOrData, bufferUsage) {
    if (bufferUsage === void 0)
      bufferUsage = BufferUsage.Static;
    var _this;
    _this = RefObject2.call(this, engine) || this;
    _this._engine = engine;
    _this._type = type;
    _this._bufferUsage = bufferUsage;
    var hardwareRenderer = engine._hardwareRenderer;
    var gl = hardwareRenderer.gl;
    var glBufferUsage = BufferUtil._getGLBufferUsage(gl, bufferUsage);
    var glBindTarget = type === BufferBindFlag.VertexBuffer ? gl.ARRAY_BUFFER : gl.ELEMENT_ARRAY_BUFFER;
    _this._nativeBuffer = gl.createBuffer();
    _this._hardwareRenderer = hardwareRenderer;
    _this._glBufferUsage = glBufferUsage;
    _this._glBindTarget = glBindTarget;
    _this.bind();
    if (typeof byteLengthOrData === "number") {
      _this._byteLength = byteLengthOrData;
      gl.bufferData(glBindTarget, byteLengthOrData, glBufferUsage);
    } else {
      _this._byteLength = byteLengthOrData.byteLength;
      gl.bufferData(glBindTarget, byteLengthOrData, glBufferUsage);
    }
    gl.bindBuffer(glBindTarget, null);
    return _this;
  }
  var _proto = Buffer2.prototype;
  _proto.bind = function bind() {
    var gl = this._hardwareRenderer.gl;
    gl.bindBuffer(this._glBindTarget, this._nativeBuffer);
  };
  _proto.setData = function setData(data, bufferByteOffset, dataOffset, dataLength, options) {
    if (bufferByteOffset === void 0)
      bufferByteOffset = 0;
    if (dataOffset === void 0)
      dataOffset = 0;
    if (options === void 0)
      options = SetDataOptions.None;
    var gl = this._hardwareRenderer.gl;
    var isWebGL2 = this._hardwareRenderer.isWebGL2;
    var glBindTarget = this._glBindTarget;
    this.bind();
    if (options === SetDataOptions.Discard) {
      gl.bufferData(glBindTarget, this._byteLength, this._glBufferUsage);
    }
    var byteSize = data.BYTES_PER_ELEMENT || 1;
    var dataByteLength = dataLength ? byteSize * dataLength : data.byteLength;
    if (dataOffset !== 0 || dataByteLength < data.byteLength) {
      var isArrayBufferView = data.byteOffset !== void 0;
      if (isWebGL2 && isArrayBufferView) {
        gl.bufferSubData(glBindTarget, bufferByteOffset, data, dataOffset, dataByteLength / byteSize);
      } else {
        var subData = new Uint8Array(isArrayBufferView ? data.buffer : data, dataOffset * byteSize, dataByteLength);
        gl.bufferSubData(glBindTarget, bufferByteOffset, subData);
      }
    } else {
      gl.bufferSubData(glBindTarget, bufferByteOffset, data);
    }
    gl.bindBuffer(glBindTarget, null);
  };
  _proto.getData = function getData(data, bufferByteOffset, dataOffset, dataLength) {
    if (bufferByteOffset === void 0)
      bufferByteOffset = 0;
    if (dataOffset === void 0)
      dataOffset = 0;
    var isWebGL2 = this._hardwareRenderer.isWebGL2;
    if (isWebGL2) {
      var gl = this._hardwareRenderer.gl;
      this.bind();
      gl.getBufferSubData(this._glBindTarget, bufferByteOffset, data, dataOffset, dataLength);
    } else {
      throw "Buffer is write-only on WebGL1.0 platforms.";
    }
  };
  _proto._onDestroy = function _onDestroy() {
    var gl = this._hardwareRenderer.gl;
    gl.deleteBuffer(this._nativeBuffer);
    this._nativeBuffer = null;
    this._hardwareRenderer = null;
  };
  _proto.resize = function resize(dataLength) {
    this.bind();
    var gl = this._hardwareRenderer.gl;
    gl.bufferData(this._glBindTarget, dataLength, this._glBufferUsage);
    this._byteLength = dataLength;
  };
  _create_class2(Buffer2, [
    {
      key: "type",
      get: (
        /**
        * Buffer binding flag.
        */
        function get() {
          return this._type;
        }
      )
    },
    {
      key: "byteLength",
      get: (
        /**
        * Byte length.
        */
        function get() {
          return this._byteLength;
        }
      )
    },
    {
      key: "bufferUsage",
      get: (
        /**
        * Buffer usage.
        */
        function get() {
          return this._bufferUsage;
        }
      )
    }
  ]);
  return Buffer2;
}(RefObject);
var MeshTopology;
(function(MeshTopology2) {
  MeshTopology2[MeshTopology2[
    /** Draws a single dot */
    "Points"
  ] = 0] = "Points";
  MeshTopology2[MeshTopology2[
    /** Draws a line between a pair of vertices */
    "Lines"
  ] = 1] = "Lines";
  MeshTopology2[MeshTopology2[
    /** Draws a straight line to the next vertex, and connects the last vertex back to the first */
    "LineLoop"
  ] = 2] = "LineLoop";
  MeshTopology2[MeshTopology2[
    /** Draws a straight line to the next vertex. */
    "LineStrip"
  ] = 3] = "LineStrip";
  MeshTopology2[MeshTopology2[
    /** Draws a triangle for a group of three vertices */
    "Triangles"
  ] = 4] = "Triangles";
  MeshTopology2[MeshTopology2[
    /** Draws a triangle strip */
    "TriangleStrip"
  ] = 5] = "TriangleStrip";
  MeshTopology2[MeshTopology2[
    /** Draws a triangle fan */
    "TriangleFan"
  ] = 6] = "TriangleFan";
})(MeshTopology || (MeshTopology = {}));
var IndexBufferBinding = function() {
  function IndexBufferBinding2(buffer, format) {
    this._buffer = buffer;
    this._format = format;
  }
  _create_class2(IndexBufferBinding2, [
    {
      key: "buffer",
      get: (
        /**
        * Index buffer.
        */
        function get() {
          return this._buffer;
        }
      )
    },
    {
      key: "format",
      get: (
        /**
        * Index buffer format.
        */
        function get() {
          return this._format;
        }
      )
    }
  ]);
  return IndexBufferBinding2;
}();
var SubMesh = function SubMesh2(start, count, topology) {
  if (start === void 0)
    start = 0;
  if (count === void 0)
    count = 0;
  if (topology === void 0)
    topology = MeshTopology.Triangles;
  this.start = start;
  this.count = count;
  this.topology = topology;
};
var Mesh = function(RefObject2) {
  _inherits(Mesh2, RefObject2);
  function Mesh2(engine, name) {
    var _this;
    _this = RefObject2.call(this, engine) || this;
    _this._vertexElementMap = {};
    _this._instanceCount = 0;
    _this._vertexBufferBindings = [];
    _this._indexBufferBinding = null;
    _this._vertexElements = [];
    _this._enableVAO = true;
    _this._updateFlagManager = new UpdateFlagManager();
    _this._bounds = new BoundingBox();
    _this._subMeshes = [];
    _this.name = name;
    _this._platformPrimitive = _this._engine._hardwareRenderer.createPlatformPrimitive(_assert_this_initialized(_this));
    _this._onBoundsChanged = _this._onBoundsChanged.bind(_assert_this_initialized(_this));
    var bounds = _this._bounds;
    bounds.min._onValueChanged = _this._onBoundsChanged;
    bounds.max._onValueChanged = _this._onBoundsChanged;
    return _this;
  }
  var _proto = Mesh2.prototype;
  _proto.addSubMesh = function addSubMesh(startOrSubMesh, count, topology) {
    if (topology === void 0)
      topology = MeshTopology.Triangles;
    if (typeof startOrSubMesh === "number") {
      startOrSubMesh = new SubMesh(startOrSubMesh, count, topology);
    }
    this._subMeshes.push(startOrSubMesh);
    return startOrSubMesh;
  };
  _proto.removeSubMesh = function removeSubMesh(subMesh) {
    var subMeshes = this._subMeshes;
    var index = subMeshes.indexOf(subMesh);
    if (index !== -1) {
      subMeshes.splice(index, 1);
    }
  };
  _proto.clearSubMesh = function clearSubMesh() {
    this._subMeshes.length = 0;
  };
  _proto._clearVertexElements = function _clearVertexElements() {
    this._vertexElements.length = 0;
    var vertexElementMap = this._vertexElementMap;
    for (var k in vertexElementMap) {
      delete vertexElementMap[k];
    }
  };
  _proto._addVertexElement = function _addVertexElement(element) {
    var semantic = element.semantic;
    this._vertexElementMap[semantic] = element;
    this._vertexElements.push(element);
    this._updateFlagManager.dispatch(2);
    this._bufferStructChanged = true;
  };
  _proto._insertVertexElement = function _insertVertexElement(i, element) {
    var semantic = element.semantic;
    this._vertexElementMap[semantic] = element;
    this._vertexElements.splice(i, 0, element);
    this._updateFlagManager.dispatch(2);
    this._bufferStructChanged = true;
  };
  _proto._setVertexBufferBinding = function _setVertexBufferBinding(index, binding) {
    if (this._getRefCount() > 0) {
      var lastBinding = this._vertexBufferBindings[index];
      lastBinding && lastBinding._buffer._addRefCount(-1);
      binding._buffer._addRefCount(1);
    }
    this._vertexBufferBindings[index] = binding;
    this._bufferStructChanged = true;
  };
  _proto._draw = function _draw(shaderProgram, subMesh) {
    this._platformPrimitive.draw(shaderProgram, subMesh);
    this._bufferStructChanged = false;
  };
  _proto._addRefCount = function _addRefCount(value) {
    RefObject2.prototype._addRefCount.call(this, value);
    var vertexBufferBindings = this._vertexBufferBindings;
    for (var i = 0, n = vertexBufferBindings.length; i < n; i++) {
      vertexBufferBindings[i]._buffer._addRefCount(value);
    }
  };
  _proto._onDestroy = function _onDestroy() {
    this._vertexBufferBindings = null;
    this._indexBufferBinding = null;
    this._vertexElements = null;
    this._vertexElementMap = null;
    this._platformPrimitive.destroy();
  };
  _proto._setVertexElements = function _setVertexElements(elements) {
    this._clearVertexElements();
    for (var i = 0, n = elements.length; i < n; i++) {
      this._addVertexElement(elements[i]);
    }
  };
  _proto._setIndexBufferBinding = function _setIndexBufferBinding(binding) {
    var lastBinding = this._indexBufferBinding;
    if (binding) {
      this._indexBufferBinding = binding;
      this._glIndexType = BufferUtil._getGLIndexType(binding.format);
      this._glIndexByteCount = BufferUtil._getGLIndexByteCount(binding.format);
      (!lastBinding || lastBinding._buffer !== binding._buffer) && (this._bufferStructChanged = true);
    } else {
      this._indexBufferBinding = null;
      this._glIndexType = void 0;
      lastBinding && (this._bufferStructChanged = true);
    }
  };
  _proto._onBoundsChanged = function _onBoundsChanged() {
    this._updateFlagManager.dispatch(1);
  };
  _create_class2(Mesh2, [
    {
      key: "bounds",
      get: (
        /**
        * The bounding volume of the mesh.
        */
        function get() {
          return this._bounds;
        }
      ),
      set: function set(value) {
        if (this._bounds !== value) {
          this._bounds.copyFrom(value);
        }
      }
    },
    {
      key: "subMesh",
      get: (
        /**
        * First sub-mesh. Rendered using the first material.
        */
        function get() {
          return this._subMeshes[0] || null;
        }
      )
    },
    {
      key: "subMeshes",
      get: (
        /**
        * A collection of sub-mesh, each sub-mesh can be rendered with an independent material.
        */
        function get() {
          return this._subMeshes;
        }
      )
    }
  ]);
  return Mesh2;
}(RefObject);
var MeshModifyFlags;
(function(MeshModifyFlags2) {
  MeshModifyFlags2[MeshModifyFlags2["Bounds"] = 1] = "Bounds";
  MeshModifyFlags2[MeshModifyFlags2["VertexElements"] = 2] = "VertexElements";
})(MeshModifyFlags || (MeshModifyFlags = {}));
var VertexBufferBinding = function() {
  function VertexBufferBinding2(buffer, stride) {
    this._buffer = buffer;
    this._stride = stride;
  }
  _create_class2(VertexBufferBinding2, [
    {
      key: "buffer",
      get: (
        /**
        * Vertex buffer.
        */
        function get() {
          return this._buffer;
        }
      )
    },
    {
      key: "stride",
      get: (
        /**
        * Vertex buffer stride.
        */
        function get() {
          return this._stride;
        }
      )
    }
  ]);
  return VertexBufferBinding2;
}();
var BlendShapeManager = function() {
  function BlendShapeManager2(engine, modelMesh) {
    this._blendShapeCount = 0;
    this._blendShapes = [];
    this._subDataDirtyFlags = [];
    this._vertexBuffers = [];
    this._uniformOccupiesCount = 0;
    this._useBlendNormal = false;
    this._useBlendTangent = false;
    this._vertexElementCount = 0;
    this._storeInVertexBufferInfo = [];
    this._maxCountSingleVertexBuffer = 0;
    this._lastCreateHostInfo = new Vector3(0, 0, 0);
    this._canUseTextureStoreData = true;
    this._dataTextureInfo = new Vector3();
    this._engine = engine;
    this._modelMesh = modelMesh;
    this._canUseTextureStoreData = this._engine._hardwareRenderer.capability.canUseFloatTextureBlendShape;
    this._updateLayoutChange = this._updateLayoutChange.bind(this);
  }
  var _proto = BlendShapeManager2.prototype;
  _proto._addBlendShape = function _addBlendShape(blendShape) {
    this._blendShapes.push(blendShape);
    this._blendShapeCount++;
    blendShape._layoutChangeManager.addListener(this._updateLayoutChange);
    this._updateLayoutChange(0, blendShape);
    this._subDataDirtyFlags.push(blendShape._createSubDataDirtyFlag());
  };
  _proto._clearBlendShapes = function _clearBlendShapes() {
    var blendShapes = this._blendShapes;
    for (var i = 0, n = blendShapes.length; i < n; i++) {
      blendShapes[i]._layoutChangeManager.removeListener(this._updateLayoutChange);
    }
    this._useBlendNormal = false;
    this._useBlendTangent = false;
    this._vertexElementCount = 0;
    this._blendShapes.length = 0;
    this._blendShapeCount = 0;
    var subDataDirtyFlags = this._subDataDirtyFlags;
    for (var i1 = 0, n1 = subDataDirtyFlags.length; i1 < n1; i1++) {
      subDataDirtyFlags[i1].destroy();
    }
    subDataDirtyFlags.length = 0;
  };
  _proto._updateShaderData = function _updateShaderData(shaderData, skinnedMeshRenderer) {
    var blendShapeCount = this._blendShapeCount;
    if (blendShapeCount > 0) {
      shaderData.enableMacro(BlendShapeManager2._blendShapeMacro);
      if (this._useTextureMode()) {
        shaderData.enableMacro(BlendShapeManager2._blendShapeTextureMacro);
        shaderData.setTexture(BlendShapeManager2._blendShapeTextureProperty, this._vertexTexture);
        shaderData.setVector3(BlendShapeManager2._blendShapeTextureInfoProperty, this._dataTextureInfo);
        shaderData.setFloatArray(BlendShapeManager2._blendShapeWeightsProperty, skinnedMeshRenderer.blendShapeWeights);
        shaderData.enableMacro("OASIS_BLENDSHAPE_COUNT", blendShapeCount.toString());
        this._uniformOccupiesCount = blendShapeCount + 1;
      } else {
        var maxBlendCount = this._getVertexBufferModeSupportCount();
        if (blendShapeCount > maxBlendCount) {
          var condensedBlendShapeWeights = skinnedMeshRenderer._condensedBlendShapeWeights;
          if (!condensedBlendShapeWeights) {
            condensedBlendShapeWeights = new Float32Array(maxBlendCount);
            skinnedMeshRenderer._condensedBlendShapeWeights = condensedBlendShapeWeights;
          }
          this._filterCondensedBlendShapeWeights(skinnedMeshRenderer.blendShapeWeights, condensedBlendShapeWeights);
          shaderData.setFloatArray(BlendShapeManager2._blendShapeWeightsProperty, condensedBlendShapeWeights);
          this._modelMesh._enableVAO = false;
          blendShapeCount = maxBlendCount;
        } else {
          shaderData.setFloatArray(BlendShapeManager2._blendShapeWeightsProperty, skinnedMeshRenderer.blendShapeWeights);
          this._modelMesh._enableVAO = true;
        }
        shaderData.disableMacro(BlendShapeManager2._blendShapeTextureMacro);
        shaderData.disableMacro("OASIS_BLENDSHAPE_COUNT");
        this._uniformOccupiesCount = blendShapeCount;
      }
      if (this._useBlendNormal) {
        shaderData.enableMacro(BlendShapeManager2._blendShapeNormalMacro);
      } else {
        shaderData.disableMacro(BlendShapeManager2._blendShapeNormalMacro);
      }
      if (this._useBlendTangent) {
        shaderData.enableMacro(BlendShapeManager2._blendShapeTangentMacro);
      } else {
        shaderData.disableMacro(BlendShapeManager2._blendShapeTangentMacro);
      }
    } else {
      shaderData.disableMacro(BlendShapeManager2._blendShapeMacro);
      shaderData.disableMacro("OASIS_BLENDSHAPE_COUNT");
    }
  };
  _proto._useTextureMode = function _useTextureMode() {
    if (!this._canUseTextureStoreData) {
      return false;
    }
    return this._blendShapeCount > this._getVertexBufferModeSupportCount();
  };
  _proto._layoutOrCountChange = function _layoutOrCountChange() {
    var last = this._lastCreateHostInfo;
    return last.x !== this._blendShapeCount || !!last.y !== this._useBlendNormal || !!last.z !== this._useBlendTangent;
  };
  _proto._vertexElementsNeedUpdate = function _vertexElementsNeedUpdate() {
    var maxSupportCount = this._getVertexBufferModeSupportCount();
    var info2 = this._lastCreateHostInfo;
    return Math.min(info2.x, maxSupportCount) !== Math.min(this._blendShapeCount, maxSupportCount) || !!info2.y !== this._useBlendNormal || !!info2.z !== this._useBlendTangent;
  };
  _proto._needUpdateData = function _needUpdateData() {
    var subDataDirtyFlags = this._subDataDirtyFlags;
    for (var i = 0, n = subDataDirtyFlags.length; i < n; i++) {
      if (subDataDirtyFlags[i].flag) {
        return true;
      }
    }
    return false;
  };
  _proto._setAttributeModeOffsetInfo = function _setAttributeModeOffsetInfo(vertexElementOffset, bufferBindingOffset) {
    this._vertexElementOffset = vertexElementOffset;
    this._bufferBindingOffset = bufferBindingOffset;
  };
  _proto._addVertexElements = function _addVertexElements(modelMesh) {
    var bindingOffset = this._bufferBindingOffset;
    var offset = 0;
    for (var i = 0, n = Math.min(this._blendShapeCount, this._getVertexBufferModeSupportCount()); i < n; i++) {
      modelMesh._addVertexElement(new VertexElement("POSITION_BS" + i, offset, VertexElementFormat.Vector3, bindingOffset));
      offset += 12;
      if (this._useBlendNormal) {
        modelMesh._addVertexElement(new VertexElement("NORMAL_BS" + i, offset, VertexElementFormat.Vector3, bindingOffset));
        offset += 12;
      }
      if (this._useBlendTangent) {
        modelMesh._addVertexElement(new VertexElement("TANGENT_BS" + i, offset, VertexElementFormat.Vector3, bindingOffset));
        offset += 12;
      }
    }
  };
  _proto._update = function _update(vertexCountChange, noLongerAccessible) {
    var vertexCount = this._modelMesh.vertexCount;
    var useTexture = this._useTextureMode();
    var createHost = this._layoutOrCountChange() || vertexCountChange;
    if (createHost) {
      if (useTexture) {
        this._createTextureArray(vertexCount);
      } else {
        this._createVertexBuffers(vertexCount, noLongerAccessible);
      }
      this._lastCreateHostInfo.set(this._blendShapeCount, +this._useBlendNormal, +this._useBlendTangent);
    }
    if (this._needUpdateData()) {
      if (useTexture) {
        this._updateTextureArray(vertexCount, createHost);
      } else {
        this._updateVertexBuffers(vertexCount, createHost);
      }
    }
  };
  _proto._releaseMemoryCache = function _releaseMemoryCache() {
    var _this = this, blendShapes = _this._blendShapes;
    var blendShapeCount = blendShapes.length;
    var blendShapeNamesMap = new Array(blendShapeCount);
    for (var i = 0; i < blendShapeCount; i++) {
      blendShapeNamesMap[i] = blendShapes[i].name;
    }
    this._blendShapeNames = blendShapeNamesMap;
    for (var i1 = 0, n = blendShapes.length; i1 < n; i1++) {
      blendShapes[i1]._layoutChangeManager.removeListener(this._updateLayoutChange);
    }
    var dataChangedFlags = this._subDataDirtyFlags;
    for (var i2 = 0, n1 = dataChangedFlags.length; i2 < n1; i2++) {
      dataChangedFlags[i2].destroy();
    }
    this._subDataDirtyFlags = null;
    this._blendShapes = null;
    this._vertices = null;
  };
  _proto._createVertexBuffers = function _createVertexBuffers(vertexCount, noLongerAccessible) {
    var _this = this, engine = _this._engine, modelMesh = _this._modelMesh, blendShapeCount = _this._blendShapeCount, vertexBuffers = _this._vertexBuffers;
    var vertexFloatCount = this._vertexElementCount * 3;
    var vertexByteCount = vertexFloatCount * 4;
    var maxCountSingleBuffer = Math.floor(255 / vertexByteCount);
    var bufferCount = Math.ceil(blendShapeCount / maxCountSingleBuffer);
    var floatCount = vertexFloatCount * vertexCount * Math.min(maxCountSingleBuffer, blendShapeCount);
    vertexBuffers.length = bufferCount;
    this._vertices = new Float32Array(floatCount);
    this._maxCountSingleVertexBuffer = maxCountSingleBuffer;
    this._storeInVertexBufferInfo.length = blendShapeCount;
    var bufferBindingOffset = this._bufferBindingOffset;
    for (var i = 0; i < bufferCount; i++) {
      var lastIndex = bufferCount - 1;
      var containCount = i === lastIndex ? blendShapeCount - lastIndex * maxCountSingleBuffer : maxCountSingleBuffer;
      var stride = containCount * vertexByteCount;
      var byteLength = stride * vertexCount;
      var usage = noLongerAccessible ? BufferUsage.Static : BufferUsage.Dynamic;
      var blendShapeBuffer = new Buffer(engine, BufferBindFlag.VertexBuffer, byteLength, usage);
      modelMesh._setVertexBufferBinding(bufferBindingOffset + i, new VertexBufferBinding(blendShapeBuffer, stride));
      vertexBuffers[i] = blendShapeBuffer;
    }
  };
  _proto._createTextureArray = function _createTextureArray(vertexCount) {
    var maxTextureSize = this._engine._hardwareRenderer.capability.maxTextureSize;
    var vertexPixelStride = this._vertexElementCount;
    var textureWidth = vertexPixelStride * vertexCount;
    var textureHeight = 1;
    if (textureWidth > maxTextureSize) {
      textureHeight = Math.ceil(textureWidth / maxTextureSize);
      textureWidth = maxTextureSize;
    }
    var blendShapeDataTexture = this._vertexTexture;
    var blendShapeCount = this._blendShapes.length;
    blendShapeDataTexture && blendShapeDataTexture.destroy();
    blendShapeDataTexture = new Texture2DArray(this._engine, textureWidth, textureHeight, blendShapeCount, TextureFormat.R32G32B32A32, false);
    blendShapeDataTexture.filterMode = TextureFilterMode.Point;
    this._vertices = new Float32Array(blendShapeCount * textureWidth * textureHeight * 4);
    this._vertexTexture = blendShapeDataTexture;
    this._dataTextureInfo.set(vertexPixelStride, textureWidth, textureHeight);
  };
  _proto._updateVertexBuffers = function _updateVertexBuffers(vertexCount, force) {
    var _this = this, blendShapes = _this._blendShapes, maxCountSingleBuffer = _this._maxCountSingleVertexBuffer;
    var _this1 = this, vertices = _this1._vertices, vertexBuffers = _this1._vertexBuffers, storeInfos = _this1._storeInVertexBufferInfo;
    var subDataDirtyFlags = this._subDataDirtyFlags;
    var blendShapeFloatStride = this._vertexElementCount * 3;
    var blendShapeByteStride = blendShapeFloatStride * 4;
    var bufferOffset = this._bufferBindingOffset;
    for (var i = 0, n = blendShapes.length; i < n; i++) {
      var dataChangedFlag = subDataDirtyFlags[i];
      if (force || dataChangedFlag.flag) {
        var frames = blendShapes[i].frames;
        var frameCount = frames.length;
        var endFrame = frames[frameCount - 1];
        if (frameCount > 0 && endFrame.deltaPositions.length !== vertexCount) {
          throw "BlendShape frame deltaPositions length must same with mesh vertexCount.";
        }
        var bufferIndex = Math.floor(i / maxCountSingleBuffer);
        var indexInBuffer = i % maxCountSingleBuffer;
        var buffer = vertexBuffers[bufferIndex];
        var bufferFloatStride = buffer.byteLength / (vertexCount * 4);
        var offset = indexInBuffer * blendShapeFloatStride;
        var storeInfo = storeInfos[i];
        storeInfo || (storeInfos[i] = storeInfo = new Vector2());
        storeInfo.set(bufferOffset + bufferIndex, indexInBuffer * blendShapeByteStride);
        var deltaPositions = endFrame.deltaPositions;
        for (var j = 0; j < vertexCount; j++) {
          var start = offset + bufferFloatStride * j;
          var deltaPosition = deltaPositions[j];
          if (deltaPosition) {
            vertices[start] = deltaPosition.x;
            vertices[start + 1] = deltaPosition.y;
            vertices[start + 2] = deltaPosition.z;
          }
        }
        offset += 3;
        if (this._useBlendNormal) {
          var deltaNormals = endFrame.deltaNormals;
          if (deltaNormals) {
            for (var j1 = 0; j1 < vertexCount; j1++) {
              var start1 = offset + bufferFloatStride * j1;
              var deltaNormal = deltaNormals[j1];
              if (deltaNormal) {
                vertices[start1] = deltaNormal.x;
                vertices[start1 + 1] = deltaNormal.y;
                vertices[start1 + 2] = deltaNormal.z;
              }
            }
          }
          offset += 3;
        }
        if (this._useBlendTangent) {
          var deltaTangents = endFrame.deltaTangents;
          if (deltaTangents) {
            for (var j2 = 0; j2 < vertexCount; j2++) {
              var start2 = offset + bufferFloatStride * j2;
              var deltaTangent = deltaTangents[j2];
              if (deltaTangent) {
                vertices[start2] = deltaTangent.x;
                vertices[start2 + 1] = deltaTangent.y;
                vertices[start2 + 2] = deltaTangent.z;
              }
            }
          }
          offset += 3;
        }
        if (indexInBuffer === maxCountSingleBuffer - 1 || i === n - 1) {
          buffer.setData(vertices, 0, 0, buffer.byteLength / 4);
        }
        dataChangedFlag.flag = false;
      }
    }
  };
  _proto._updateTextureArray = function _updateTextureArray(vertexCount, force) {
    var _this = this, blendShapes = _this._blendShapes, vertexTexture = _this._vertexTexture, vertices = _this._vertices, subDataDirtyFlags = _this._subDataDirtyFlags;
    for (var i = 0, n = blendShapes.length; i < n; i++) {
      var subDirtyFlag = subDataDirtyFlags[i];
      var subBlendShapeDataStride = vertexTexture.width * vertexTexture.height * 4;
      if (force || subDirtyFlag.flag) {
        var frames = blendShapes[i].frames;
        var frameCount = frames.length;
        var endFrame = frames[frameCount - 1];
        if (frameCount > 0 && endFrame.deltaPositions.length !== vertexCount) {
          throw "BlendShape frame deltaPositions length must same with mesh vertexCount.";
        }
        var deltaPositions = endFrame.deltaPositions, deltaNormals = endFrame.deltaNormals, deltaTangents = endFrame.deltaTangents;
        var offset = i * subBlendShapeDataStride;
        for (var j = 0; j < vertexCount; j++) {
          var position = deltaPositions[j];
          vertices[offset] = position.x;
          vertices[offset + 1] = position.y;
          vertices[offset + 2] = position.z;
          offset += 4;
          if (deltaNormals) {
            var normal = deltaNormals[j];
            vertices[offset] = normal.x;
            vertices[offset + 1] = normal.y;
            vertices[offset + 2] = normal.z;
            offset += 4;
          }
          if (deltaTangents) {
            var tangent = deltaTangents[j];
            vertices[offset] = tangent.x;
            vertices[offset + 1] = tangent.y;
            vertices[offset + 2] = tangent.z;
            offset += 4;
          }
        }
        subDirtyFlag.flag = false;
      }
    }
    vertexTexture.setPixelBuffer(0, vertices);
  };
  _proto._updateLayoutChange = function _updateLayoutChange(type, blendShape) {
    var notFirst = this._blendShapeCount > 1;
    var vertexElementCount = 1;
    var useBlendNormal = blendShape._useBlendShapeNormal;
    var useBlendTangent = blendShape._useBlendShapeTangent;
    if (notFirst) {
      useBlendNormal && (useBlendNormal = this._useBlendNormal);
      useBlendTangent && (useBlendTangent = this._useBlendTangent);
    }
    useBlendNormal && vertexElementCount++;
    useBlendTangent && vertexElementCount++;
    this._useBlendNormal = useBlendNormal;
    this._useBlendTangent = useBlendTangent;
    this._vertexElementCount = vertexElementCount;
  };
  _proto._attributeModeUpdateVertexElement = function _attributeModeUpdateVertexElement(vertexElements, vertexBufferStoreInfo, index, condensedIndex) {
    var elementOffset = this._vertexElementOffset + this._vertexElementCount * condensedIndex;
    var _vertexBufferStoreInfo_index = vertexBufferStoreInfo[index], bufferIndex = _vertexBufferStoreInfo_index.x, offset = _vertexBufferStoreInfo_index.y;
    var vertexElement = vertexElements[elementOffset];
    vertexElement.bindingIndex = bufferIndex;
    vertexElement.offset = offset;
    if (this._useBlendNormal) {
      var vertexElement1 = vertexElements[++elementOffset];
      offset += 12;
      vertexElement1.bindingIndex = bufferIndex;
      vertexElement1.offset = offset;
    }
    if (this._useBlendTangent) {
      var vertexElement2 = vertexElements[++elementOffset];
      offset += 12;
      vertexElement2.bindingIndex = bufferIndex;
      vertexElement2.offset = offset;
    }
  };
  _proto._getVertexBufferModeSupportCount = function _getVertexBufferModeSupportCount() {
    if (this._useBlendNormal && this._useBlendTangent) {
      return 2;
    } else {
      return this._useBlendNormal || this._useBlendTangent ? 4 : 8;
    }
  };
  _proto._filterCondensedBlendShapeWeights = function _filterCondensedBlendShapeWeights(blendShapeWeights, condensedBlendShapeWeights) {
    var condensedWeightsCount = condensedBlendShapeWeights.length;
    var vertexElements = this._modelMesh._vertexElements;
    var vertexBufferStoreInfo = this._storeInVertexBufferInfo;
    var thresholdWeight = Number.POSITIVE_INFINITY;
    var thresholdIndex;
    for (var i = 0, n = Math.min(blendShapeWeights.length, this._blendShapeCount); i < n; i++) {
      var weight = blendShapeWeights[i];
      if (i < condensedWeightsCount) {
        this._attributeModeUpdateVertexElement(vertexElements, vertexBufferStoreInfo, i, i);
        condensedBlendShapeWeights[i] = weight;
        if (weight < thresholdWeight) {
          thresholdWeight = weight;
          thresholdIndex = i;
        }
      } else if (weight > thresholdWeight) {
        this._attributeModeUpdateVertexElement(vertexElements, vertexBufferStoreInfo, i, thresholdIndex);
        condensedBlendShapeWeights[thresholdIndex] = weight;
        thresholdWeight = Number.POSITIVE_INFINITY;
        for (var j = 0; j < condensedWeightsCount; j++) {
          var condensedWeight = condensedBlendShapeWeights[j];
          if (condensedWeight < thresholdWeight) {
            thresholdWeight = condensedWeight;
            thresholdIndex = j;
          }
        }
      }
    }
  };
  return BlendShapeManager2;
}();
(function() {
  BlendShapeManager._blendShapeMacro = Shader.getMacroByName("OASIS_BLENDSHAPE");
})();
(function() {
  BlendShapeManager._blendShapeTextureMacro = Shader.getMacroByName("OASIS_BLENDSHAPE_TEXTURE");
})();
(function() {
  BlendShapeManager._blendShapeNormalMacro = Shader.getMacroByName("OASIS_BLENDSHAPE_NORMAL");
})();
(function() {
  BlendShapeManager._blendShapeTangentMacro = Shader.getMacroByName("OASIS_BLENDSHAPE_TANGENT");
})();
(function() {
  BlendShapeManager._blendShapeWeightsProperty = Shader.getPropertyByName("u_blendShapeWeights");
})();
(function() {
  BlendShapeManager._blendShapeTextureProperty = Shader.getPropertyByName("u_blendShapeTexture");
})();
(function() {
  BlendShapeManager._blendShapeTextureInfoProperty = Shader.getPropertyByName("u_blendShapeTextureInfo");
})();
var VertexAttribute;
(function(VertexAttribute2) {
  VertexAttribute2[
    /** Vertex position. */
    "Position"
  ] = "POSITION";
  VertexAttribute2[
    /** Vertex normal. */
    "Normal"
  ] = "NORMAL";
  VertexAttribute2[
    /** Vertex color. */
    "Color"
  ] = "COLOR_0";
  VertexAttribute2[
    /** Vertex tangent. */
    "Tangent"
  ] = "TANGENT";
  VertexAttribute2[
    /** Vertex bone weight. */
    "BoneWeight"
  ] = "WEIGHTS_0";
  VertexAttribute2[
    /** Vertex bone index. */
    "BoneIndex"
  ] = "JOINTS_0";
  VertexAttribute2[
    /** Vertex UV. */
    "UV"
  ] = "TEXCOORD_0";
  VertexAttribute2[
    /** Vertex UV1. */
    "UV1"
  ] = "TEXCOORD_1";
  VertexAttribute2[
    /** Vertex UV2. */
    "UV2"
  ] = "TEXCOORD_2";
  VertexAttribute2[
    /** Vertex UV3. */
    "UV3"
  ] = "TEXCOORD_3";
  VertexAttribute2[
    /** Vertex UV4. */
    "UV4"
  ] = "TEXCOORD_4";
  VertexAttribute2[
    /** Vertex UV5. */
    "UV5"
  ] = "TEXCOORD_5";
  VertexAttribute2[
    /** Vertex UV6. */
    "UV6"
  ] = "TEXCOORD_6";
  VertexAttribute2[
    /** Vertex UV7. */
    "UV7"
  ] = "TEXCOORD_7";
})(VertexAttribute || (VertexAttribute = {}));
var ModelMesh = function(Mesh2) {
  _inherits(ModelMesh2, Mesh2);
  function ModelMesh2(engine, name) {
    var _this;
    _this = Mesh2.call(this, engine) || this;
    _this._vertexCount = 0;
    _this._accessible = true;
    _this._verticesFloat32 = null;
    _this._verticesUint8 = null;
    _this._indices = null;
    _this._indicesFormat = null;
    _this._indicesChangeFlag = false;
    _this._positions = null;
    _this._normals = null;
    _this._colors = null;
    _this._tangents = null;
    _this._uv = null;
    _this._uv1 = null;
    _this._uv2 = null;
    _this._uv3 = null;
    _this._uv4 = null;
    _this._uv5 = null;
    _this._uv6 = null;
    _this._uv7 = null;
    _this._boneWeights = null;
    _this._boneIndices = null;
    _this._bufferStrides = [];
    _this._vertexBufferUpdateFlag = 0;
    _this._vertexDataUpdateFlag = 0;
    _this._vertexElementsUpdate = false;
    _this._customVertexElements = [];
    _this._vertexCountChanged = false;
    _this.name = name;
    _this._blendShapeManager = new BlendShapeManager(engine, _assert_this_initialized(_this));
    return _this;
  }
  var _proto = ModelMesh2.prototype;
  _proto.setPositions = function setPositions(positions) {
    if (!this._accessible) {
      throw "Not allowed to access data while accessible is false.";
    }
    if (!this._positions && !positions) {
      return;
    }
    var newVertexCount = (positions == null ? void 0 : positions.length) || 0;
    this._vertexCountChanged = this._vertexCount != newVertexCount;
    this._vertexCount = newVertexCount;
    this._vertexElementsUpdate = !!this._positions !== !!positions;
    this._vertexBufferUpdateFlag |= 1;
    this._vertexDataUpdateFlag &= ~1;
    this._positions = positions;
  };
  _proto.getPositions = function getPositions() {
    if (!this._accessible) {
      throw "Not allowed to access data while accessible is false.";
    }
    return this._positions;
  };
  _proto.setNormals = function setNormals(normals) {
    if (!this._accessible) {
      throw "Not allowed to access data while accessible is false.";
    }
    if (normals) {
      if (normals.length !== this._vertexCount) {
        throw "The array provided needs to be the same size as vertex count.";
      }
    } else if (!this._normals) {
      return;
    }
    this._vertexElementsUpdate = !!this._normals !== !!normals;
    this._vertexBufferUpdateFlag |= 2;
    this._vertexDataUpdateFlag &= ~2;
    this._normals = normals;
  };
  _proto.getNormals = function getNormals() {
    if (!this._accessible) {
      throw "Not allowed to access data while accessible is false.";
    }
    return this._normals;
  };
  _proto.setColors = function setColors(colors) {
    if (!this._accessible) {
      throw "Not allowed to access data while accessible is false.";
    }
    if (colors) {
      if (colors.length !== this._vertexCount) {
        throw "The array provided needs to be the same size as vertex count.";
      }
    } else if (!this._colors) {
      return;
    }
    this._vertexElementsUpdate = !!this._colors !== !!colors;
    this._vertexBufferUpdateFlag |= 4;
    this._vertexDataUpdateFlag &= ~4;
    this._colors = colors;
  };
  _proto.getColors = function getColors() {
    if (!this._accessible) {
      throw "Not allowed to access data while accessible is false.";
    }
    return this._colors;
  };
  _proto.setBoneWeights = function setBoneWeights(boneWeights) {
    if (!this._accessible) {
      throw "Not allowed to access data while accessible is false.";
    }
    if (boneWeights) {
      if (boneWeights.length !== this._vertexCount) {
        throw "The array provided needs to be the same size as vertex count.";
      }
    } else if (!this._boneWeights) {
      return;
    }
    this._vertexElementsUpdate = !!this._boneWeights !== !!boneWeights;
    this._vertexBufferUpdateFlag |= 16;
    this._vertexDataUpdateFlag &= ~16;
    this._boneWeights = boneWeights;
  };
  _proto.getBoneWeights = function getBoneWeights() {
    if (!this._accessible) {
      throw "Not allowed to access data while accessible is false.";
    }
    return this._boneWeights;
  };
  _proto.setBoneIndices = function setBoneIndices(boneIndices) {
    if (!this._accessible) {
      throw "Not allowed to access data while accessible is false.";
    }
    if (boneIndices) {
      if ((boneIndices == null ? void 0 : boneIndices.length) !== this._vertexCount) {
        throw "The array provided needs to be the same size as vertex count.";
      }
    } else if (!this._boneIndices) {
      return;
    }
    this._vertexElementsUpdate = !!this._boneIndices !== !!boneIndices;
    this._vertexBufferUpdateFlag |= 32;
    this._vertexDataUpdateFlag &= ~32;
    this._boneIndices = boneIndices;
  };
  _proto.getBoneIndices = function getBoneIndices() {
    if (!this._accessible) {
      throw "Not allowed to access data while accessible is false.";
    }
    return this._boneIndices;
  };
  _proto.setTangents = function setTangents(tangents) {
    if (!this._accessible) {
      throw "Not allowed to access data while accessible is false.";
    }
    if (tangents) {
      if (tangents.length !== this._vertexCount) {
        throw "The array provided needs to be the same size as vertex count.";
      }
    } else if (!this._tangents) {
      return;
    }
    this._vertexElementsUpdate = !!this._tangents !== !!tangents;
    this._vertexBufferUpdateFlag |= 8;
    this._vertexDataUpdateFlag &= ~8;
    this._tangents = tangents;
  };
  _proto.getTangents = function getTangents() {
    if (!this._accessible) {
      throw "Not allowed to access data while accessible is false.";
    }
    return this._tangents;
  };
  _proto.setUVs = function setUVs(uv, channelIndex) {
    if (!this._accessible) {
      throw "Not allowed to access data while accessible is false.";
    }
    if (uv && uv.length !== this._vertexCount) {
      throw "The array provided needs to be the same size as vertex count.";
    }
    channelIndex = channelIndex != null ? channelIndex : 0;
    switch (channelIndex) {
      case 0:
        if (!this._uv && !uv) {
          return;
        }
        this._vertexElementsUpdate = !!this._uv !== !!uv;
        this._vertexBufferUpdateFlag |= 64;
        this._vertexDataUpdateFlag &= ~64;
        this._uv = uv;
        break;
      case 1:
        if (!this._uv1 && !uv) {
          return;
        }
        this._vertexElementsUpdate = !!this._uv1 !== !!uv;
        this._vertexBufferUpdateFlag |= 128;
        this._vertexDataUpdateFlag &= ~128;
        this._uv1 = uv;
        break;
      case 2:
        if (!this._uv2 && !uv) {
          return;
        }
        this._vertexElementsUpdate = !!this._uv2 !== !!uv;
        this._vertexBufferUpdateFlag |= 256;
        this._vertexDataUpdateFlag &= ~256;
        this._uv2 = uv;
        break;
      case 3:
        if (!this._uv3 && !uv) {
          return;
        }
        this._vertexElementsUpdate = !!this._uv3 !== !!uv;
        this._vertexBufferUpdateFlag |= 512;
        this._vertexDataUpdateFlag &= ~512;
        this._uv3 = uv;
        break;
      case 4:
        if (!this._uv4 && !uv) {
          return;
        }
        this._vertexElementsUpdate = !!this._uv4 !== !!uv;
        this._vertexBufferUpdateFlag |= 1024;
        this._vertexDataUpdateFlag &= ~1024;
        this._uv4 = uv;
        break;
      case 5:
        if (!this._uv5 && !uv) {
          return;
        }
        this._vertexElementsUpdate = !!this._uv5 !== !!uv;
        this._vertexBufferUpdateFlag |= 2048;
        this._vertexDataUpdateFlag &= ~2048;
        this._uv5 = uv;
        break;
      case 6:
        if (!this._uv6 && !uv) {
          return;
        }
        this._vertexElementsUpdate = !!this._uv6 !== !!uv;
        this._vertexBufferUpdateFlag |= 4096;
        this._vertexDataUpdateFlag &= ~4096;
        this._uv6 = uv;
        break;
      case 7:
        if (!this._uv7 && !uv) {
          return;
        }
        this._vertexElementsUpdate = !!this._uv7 !== !!uv;
        this._vertexBufferUpdateFlag |= 8192;
        this._vertexDataUpdateFlag &= ~8192;
        this._uv7 = uv;
        break;
      default:
        throw "The index of channel needs to be in range [0 - 7].";
    }
  };
  _proto.getUVs = function getUVs(channelIndex) {
    if (!this._accessible) {
      throw "Not allowed to access data while accessible is false.";
    }
    channelIndex = channelIndex != null ? channelIndex : 0;
    switch (channelIndex) {
      case 0:
        return this._uv;
      case 1:
        return this._uv1;
      case 2:
        return this._uv2;
      case 3:
        return this._uv3;
      case 4:
        return this._uv4;
      case 5:
        return this._uv5;
      case 6:
        return this._uv6;
      case 7:
        return this._uv7;
    }
    throw "The index of channel needs to be in range [0 - 7].";
  };
  _proto.setIndices = function setIndices(indices) {
    if (!this._accessible) {
      throw "Not allowed to access data while accessible is false.";
    }
    if (this._indices !== indices) {
      this._indices = indices;
      if (_instanceof(indices, Uint8Array)) {
        this._indicesFormat = IndexFormat.UInt8;
      } else if (_instanceof(indices, Uint16Array)) {
        this._indicesFormat = IndexFormat.UInt16;
      } else if (_instanceof(indices, Uint32Array)) {
        this._indicesFormat = IndexFormat.UInt32;
      }
    }
    this._indicesChangeFlag = true;
  };
  _proto.getIndices = function getIndices() {
    if (!this._accessible) {
      throw "Not allowed to access data while accessible is false.";
    }
    return this._indices;
  };
  _proto.setVertexElements = function setVertexElements(elements) {
    if (!this._accessible) {
      throw "Not allowed to access data while accessible is false.";
    }
    var customVertexElements = this._customVertexElements;
    customVertexElements.length = 0;
    var customVertexElementMap = {};
    for (var i = 0, n = elements.length; i < n; i++) {
      var element = elements[i];
      customVertexElements.push(element);
      customVertexElementMap[element.semantic] = element;
    }
    if (customVertexElementMap[VertexAttribute.Position]) {
      var positions = this.getPositions();
      positions && (this._vertexBufferUpdateFlag |= 1);
    } else {
      this.setPositions(null);
    }
    if (customVertexElementMap[VertexAttribute.Normal]) {
      var normals = this.getNormals();
      normals && (this._vertexBufferUpdateFlag |= 2);
    } else {
      this.setNormals(null);
    }
    if (customVertexElementMap[VertexAttribute.Color]) {
      var colors = this.getColors();
      colors && (this._vertexBufferUpdateFlag |= 4);
    } else {
      this.setColors(null);
    }
    if (customVertexElementMap[VertexAttribute.BoneWeight]) {
      var boneWeights = this.getBoneWeights();
      boneWeights && (this._vertexBufferUpdateFlag |= 16);
    } else {
      this.setBoneWeights(null);
    }
    if (customVertexElementMap[VertexAttribute.BoneIndex]) {
      var boneIndices = this.getBoneIndices();
      boneIndices && (this._vertexBufferUpdateFlag |= 32);
    } else {
      this.setBoneIndices(null);
    }
    if (customVertexElementMap[VertexAttribute.Tangent]) {
      var tangents = this.getTangents();
      tangents && (this._vertexBufferUpdateFlag |= 8);
    } else {
      this.setTangents(null);
    }
    if (customVertexElementMap[VertexAttribute.UV]) {
      var uvs = this.getUVs(0);
      uvs && (this._vertexBufferUpdateFlag |= 64);
    } else {
      this.setUVs(null, 0);
    }
    if (customVertexElementMap[VertexAttribute.UV1]) {
      var uv1s = this.getUVs(1);
      uv1s && (this._vertexBufferUpdateFlag |= 128);
    } else {
      this.setUVs(null, 1);
    }
    if (customVertexElementMap[VertexAttribute.UV2]) {
      var uv2s = this.getUVs(2);
      uv2s && (this._vertexBufferUpdateFlag |= 256);
    } else {
      this.setUVs(null, 2);
    }
    if (customVertexElementMap[VertexAttribute.UV3]) {
      var uv3s = this.getUVs(3);
      uv3s && (this._vertexBufferUpdateFlag |= 512);
    } else {
      this.setUVs(null, 3);
    }
    if (customVertexElementMap[VertexAttribute.UV4]) {
      var uv4s = this.getUVs(4);
      uv4s && (this._vertexBufferUpdateFlag |= 1024);
    } else {
      this.setUVs(null, 4);
    }
    if (customVertexElementMap[VertexAttribute.UV5]) {
      var uv5s = this.getUVs(5);
      uv5s && (this._vertexBufferUpdateFlag |= 2048);
    } else {
      this.setUVs(null, 5);
    }
    if (customVertexElementMap[VertexAttribute.UV6]) {
      var uv6s = this.getUVs(6);
      uv6s && (this._vertexBufferUpdateFlag |= 4096);
    } else {
      this.setUVs(null, 6);
    }
    if (customVertexElementMap[VertexAttribute.UV7]) {
      var uv7s = this.getUVs(7);
      uv7s && (this._vertexBufferUpdateFlag |= 8192);
    } else {
      this.setUVs(null, 7);
    }
    this._vertexElementsUpdate = true;
  };
  _proto.setVertexBufferBinding = function setVertexBufferBinding(bufferOrBinding, strideOrFirstIndex, index) {
    if (strideOrFirstIndex === void 0)
      strideOrFirstIndex = 0;
    if (index === void 0)
      index = 0;
    var binding = bufferOrBinding;
    var isBinding = binding.buffer !== void 0;
    isBinding || (binding = new VertexBufferBinding(bufferOrBinding, strideOrFirstIndex));
    var bindings = this._vertexBufferBindings;
    bindings.length <= index && (bindings.length = index + 1);
    this._setVertexBufferBinding(isBinding ? strideOrFirstIndex : index, binding);
    this._vertexDataUpdateFlag |= 1;
  };
  _proto.setVertexBufferBindings = function setVertexBufferBindings(vertexBufferBindings, firstIndex) {
    if (firstIndex === void 0)
      firstIndex = 0;
    var bindings = this._vertexBufferBindings;
    var count = vertexBufferBindings.length;
    var needLength = firstIndex + count;
    bindings.length < needLength && (bindings.length = needLength);
    for (var i = 0; i < count; i++) {
      this._setVertexBufferBinding(firstIndex + i, vertexBufferBindings[i]);
    }
  };
  _proto.addBlendShape = function addBlendShape(blendShape) {
    if (!this._accessible) {
      throw "Not allowed to access data while accessible is false.";
    }
    this._blendShapeManager._addBlendShape(blendShape);
  };
  _proto.clearBlendShapes = function clearBlendShapes() {
    if (!this._accessible) {
      throw "Not allowed to access data while accessible is false.";
    }
    this._blendShapeManager._clearBlendShapes();
  };
  _proto.getBlendShapeName = function getBlendShapeName(index) {
    if (this._accessible) {
      var blendShapes = this._blendShapeManager._blendShapes;
      return blendShapes[index].name;
    } else {
      return this._blendShapeManager._blendShapeNames[index];
    }
  };
  _proto.uploadData = function uploadData(noLongerAccessible) {
    var _this__vertexBufferBindings_, _this__indexBufferBinding;
    if (!this._accessible) {
      throw "Not allowed to access data while accessible is false.";
    }
    this._updateVertexElements();
    var vertexBuffer = (_this__vertexBufferBindings_ = this._vertexBufferBindings[0]) == null ? void 0 : _this__vertexBufferBindings_._buffer;
    if (this._vertexCountChanged) {
      this._vertexBufferUpdateFlag = 65535;
      vertexBuffer == null ? void 0 : vertexBuffer.destroy();
      var elementCount = this._bufferStrides[0] / 4;
      var vertexFloatCount = elementCount * this.vertexCount;
      var vertices = new Float32Array(vertexFloatCount);
      this._verticesFloat32 = vertices;
      this._verticesUint8 = new Uint8Array(vertices.buffer);
      this._updateVertices(vertices);
      var bufferUsage = noLongerAccessible ? BufferUsage.Static : BufferUsage.Dynamic;
      var newVertexBuffer = new Buffer(this._engine, BufferBindFlag.VertexBuffer, vertices, bufferUsage);
      this._setVertexBufferBinding(0, new VertexBufferBinding(newVertexBuffer, elementCount * 4));
      this._vertexCountChanged = false;
    } else {
      if (this._vertexBufferUpdateFlag & 65535) {
        var vertices1 = this._verticesFloat32;
        this._updateVertices(vertices1);
        vertexBuffer.setData(vertices1);
      }
    }
    var _this = this, indices = _this._indices;
    var indexBuffer = (_this__indexBufferBinding = this._indexBufferBinding) == null ? void 0 : _this__indexBufferBinding._buffer;
    if (indices) {
      if (!indexBuffer || indices.byteLength != indexBuffer.byteLength) {
        indexBuffer == null ? void 0 : indexBuffer.destroy();
        var newIndexBuffer = new Buffer(this._engine, BufferBindFlag.IndexBuffer, indices);
        this._setIndexBufferBinding(new IndexBufferBinding(newIndexBuffer, this._indicesFormat));
        this._indicesChangeFlag = false;
      } else if (this._indicesChangeFlag) {
        indexBuffer.setData(indices);
        if (this._indexBufferBinding._format !== this._indicesFormat) {
          this._setIndexBufferBinding(new IndexBufferBinding(indexBuffer, this._indicesFormat));
        }
        this._indicesChangeFlag = false;
      }
    } else if (indexBuffer) {
      indexBuffer.destroy();
      this._setIndexBufferBinding(null);
    }
    var _this1 = this, blendShapeManager = _this1._blendShapeManager;
    blendShapeManager._blendShapeCount > 0 && blendShapeManager._update(this._vertexCountChanged, noLongerAccessible);
    if (noLongerAccessible) {
      this._accessible = false;
      this._releaseCache();
    }
  };
  _proto.calculateTangents = function calculateTangents() {
    if (!this._normals || !this._uv) {
      throw "Set normal and uv before calculation.";
    }
    var _this = this, indices = _this._indices, positions = _this._positions, normals = _this._normals, uvs = _this._uv, vertexCount = _this._vertexCount;
    var e1 = ModelMesh2._tempVec0, e2 = ModelMesh2._tempVec1, t = ModelMesh2._tempVec2, b = ModelMesh2._tempVec3, temp = ModelMesh2._tempVec4;
    var triangleCount = indices ? indices.length / 3 : positions.length / 3;
    var tangents = new Array(vertexCount);
    var biTangents = new Array(vertexCount);
    for (var i = 0; i < vertexCount; i++) {
      tangents[i] = new Vector4();
      biTangents[i] = new Vector3();
    }
    for (var k = 0; k < triangleCount; k++) {
      var i0 = 3 * k;
      var i1 = 3 * k + 1;
      var i2 = 3 * k + 2;
      if (indices) {
        i0 = indices[i0];
        i1 = indices[i1];
        i2 = indices[i2];
      }
      var p0 = positions[i0];
      var p1 = positions[i1];
      var p2 = positions[i2];
      var w0 = uvs[i0];
      var w1 = uvs[i1];
      var w2 = uvs[i2];
      Vector3.subtract(p1, p0, e1);
      Vector3.subtract(p2, p0, e2);
      var x1 = w1.x - w0.x;
      var x2 = w2.x - w0.x;
      var y1 = w1.y - w0.y;
      var y2 = w2.y - w0.y;
      var r = 1 / (x1 * y2 - x2 * y1);
      Vector3.scale(e1, y2 * r, t);
      Vector3.scale(e2, y1 * r, temp);
      Vector3.subtract(t, temp, t);
      Vector3.scale(e2, x1 * r, b);
      Vector3.scale(e1, x2 * r, temp);
      Vector3.subtract(b, temp, b);
      var tangent = tangents[i0];
      tangent.set(tangent.x + t.x, tangent.y + t.y, tangent.z + t.z, 1);
      tangent = tangents[i1];
      tangent.set(tangent.x + t.x, tangent.y + t.y, tangent.z + t.z, 1);
      tangent = tangents[i2];
      tangent.set(tangent.x + t.x, tangent.y + t.y, tangent.z + t.z, 1);
      biTangents[i0].add(b);
      biTangents[i1].add(b);
      biTangents[i2].add(b);
    }
    for (var i3 = 0; i3 < vertexCount; i3++) {
      var n = normals[i3];
      var b1 = biTangents[i3];
      var tangent1 = tangents[i3];
      t.set(tangent1.x, tangent1.y, tangent1.z);
      Vector3.cross(t, b1, temp);
      var w = Vector3.dot(temp, n) > 0 ? 1 : -1;
      Vector3.scale(n, Vector3.dot(t, n), temp);
      Vector3.subtract(t, temp, t);
      t.normalize();
      tangent1.set(t.x, t.y, t.z, w);
    }
    this.setTangents(tangents);
  };
  _proto._onDestroy = function _onDestroy() {
    Mesh2.prototype._onDestroy.call(this);
    this._accessible && this._releaseCache();
  };
  _proto._supplementaryVertexElements = function _supplementaryVertexElements() {
    this._clearVertexElements();
    var customVertexElements = this._customVertexElements;
    for (var i = 0, n = customVertexElements.length; i < n; i++) {
      this._addVertexElement(customVertexElements[i]);
    }
    var vertexElementMap = this._vertexElementMap;
    if (this._positions && !vertexElementMap[VertexAttribute.Position]) {
      this._insertVertexAttribute(VertexAttribute.Position);
    }
    if (this._normals && !vertexElementMap[VertexAttribute.Normal]) {
      this._insertVertexAttribute(VertexAttribute.Normal);
    }
    if (this._colors && !vertexElementMap[VertexAttribute.Color]) {
      this._insertVertexAttribute(VertexAttribute.Color);
    }
    if (this._boneWeights && !vertexElementMap[VertexAttribute.BoneWeight]) {
      this._insertVertexAttribute(VertexAttribute.BoneWeight);
    }
    if (this._boneIndices && !vertexElementMap[VertexAttribute.BoneIndex]) {
      this._insertVertexAttribute(VertexAttribute.BoneIndex);
    }
    if (this._tangents && !vertexElementMap[VertexAttribute.Tangent]) {
      this._insertVertexAttribute(VertexAttribute.Tangent);
    }
    if (this._uv && !vertexElementMap[VertexAttribute.UV]) {
      this._insertVertexAttribute(VertexAttribute.UV);
    }
    if (this._uv1 && !vertexElementMap[VertexAttribute.UV1]) {
      this._insertVertexAttribute(VertexAttribute.UV1);
    }
    if (this._uv2 && !vertexElementMap[VertexAttribute.UV2]) {
      this._insertVertexAttribute(VertexAttribute.UV2);
    }
    if (this._uv3 && !vertexElementMap[VertexAttribute.UV3]) {
      this._insertVertexAttribute(VertexAttribute.UV3);
    }
    if (this._uv4 && !vertexElementMap[VertexAttribute.UV4]) {
      this._insertVertexAttribute(VertexAttribute.UV4);
    }
    if (this._uv5 && !vertexElementMap[VertexAttribute.UV5]) {
      this._insertVertexAttribute(VertexAttribute.UV5);
    }
    if (this._uv6 && !vertexElementMap[VertexAttribute.UV6]) {
      this._insertVertexAttribute(VertexAttribute.UV6);
    }
    if (this._uv7 && !vertexElementMap[VertexAttribute.UV7]) {
      this._insertVertexAttribute(VertexAttribute.UV7);
    }
  };
  _proto._updateVertexElements = function _updateVertexElements() {
    var bsManager = this._blendShapeManager;
    var bsAttributeUpdate = !bsManager._useTextureMode() && bsManager._vertexElementsNeedUpdate();
    if (this._vertexElementsUpdate || bsAttributeUpdate) {
      this._supplementaryVertexElements();
      if (bsAttributeUpdate && bsManager._blendShapeCount > 0) {
        bsManager._setAttributeModeOffsetInfo(this._vertexElements.length, this._vertexBufferBindings.length || 1);
        bsManager._addVertexElements(this);
      }
      this._vertexElementsUpdate = false;
    }
  };
  _proto._updateVertices = function _updateVertices(vertices) {
    var _this = this, _bufferStrides = _this._bufferStrides, _vertexCount = _this._vertexCount, _positions = _this._positions, _normals = _this._normals, _colors = _this._colors, _vertexChangeFlag = _this._vertexBufferUpdateFlag, _boneWeights = _this._boneWeights, _boneIndices = _this._boneIndices, _tangents = _this._tangents, _uv = _this._uv, _uv1 = _this._uv1, _uv2 = _this._uv2, _uv3 = _this._uv3, _uv4 = _this._uv4, _uv5 = _this._uv5, _uv6 = _this._uv6, _uv7 = _this._uv7;
    var _vertexStrideFloat = _bufferStrides[0] / 4;
    if (_vertexChangeFlag & 1) {
      for (var i = 0; i < _vertexCount; i++) {
        var start = _vertexStrideFloat * i;
        var position = _positions[i];
        vertices[start] = position.x;
        vertices[start + 1] = position.y;
        vertices[start + 2] = position.z;
      }
    }
    var offset = 3;
    if (_normals) {
      if (_vertexChangeFlag & 2) {
        for (var i1 = 0; i1 < _vertexCount; i1++) {
          var start1 = _vertexStrideFloat * i1 + offset;
          var normal = _normals[i1];
          if (normal) {
            vertices[start1] = normal.x;
            vertices[start1 + 1] = normal.y;
            vertices[start1 + 2] = normal.z;
          }
        }
      }
      offset += 3;
    }
    if (_colors) {
      if (_vertexChangeFlag & 4) {
        for (var i2 = 0; i2 < _vertexCount; i2++) {
          var start2 = _vertexStrideFloat * i2 + offset;
          var color = _colors[i2];
          if (color) {
            vertices[start2] = color.r;
            vertices[start2 + 1] = color.g;
            vertices[start2 + 2] = color.b;
            vertices[start2 + 3] = color.a;
          }
        }
      }
      offset += 4;
    }
    if (_boneWeights) {
      if (_vertexChangeFlag & 16) {
        for (var i3 = 0; i3 < _vertexCount; i3++) {
          var start3 = _vertexStrideFloat * i3 + offset;
          var weight = _boneWeights[i3];
          if (weight) {
            vertices[start3] = weight.x;
            vertices[start3 + 1] = weight.y;
            vertices[start3 + 2] = weight.z;
            vertices[start3 + 3] = weight.w;
          }
        }
      }
      offset += 4;
    }
    if (_boneIndices) {
      if (_vertexChangeFlag & 32) {
        var _verticesUint8 = this._verticesUint8;
        for (var i4 = 0; i4 < _vertexCount; i4++) {
          var start4 = _vertexStrideFloat * i4 + offset;
          var joint = _boneIndices[i4];
          if (joint) {
            var internalStart = start4 * 4;
            _verticesUint8[internalStart] = joint.x;
            _verticesUint8[internalStart + 1] = joint.y;
            _verticesUint8[internalStart + 2] = joint.z;
            _verticesUint8[internalStart + 3] = joint.w;
          }
        }
      }
      offset += 1;
    }
    if (_tangents) {
      if (_vertexChangeFlag & 8) {
        for (var i5 = 0; i5 < _vertexCount; i5++) {
          var start5 = _vertexStrideFloat * i5 + offset;
          var tangent = _tangents[i5];
          if (tangent) {
            vertices[start5] = tangent.x;
            vertices[start5 + 1] = tangent.y;
            vertices[start5 + 2] = tangent.z;
            vertices[start5 + 3] = tangent.w;
          }
        }
      }
      offset += 4;
    }
    if (_uv) {
      if (_vertexChangeFlag & 64) {
        for (var i6 = 0; i6 < _vertexCount; i6++) {
          var start6 = _vertexStrideFloat * i6 + offset;
          var uv = _uv[i6];
          if (uv) {
            vertices[start6] = uv.x;
            vertices[start6 + 1] = uv.y;
          }
        }
      }
      offset += 2;
    }
    if (_uv1) {
      if (_vertexChangeFlag & 128) {
        for (var i7 = 0; i7 < _vertexCount; i7++) {
          var start7 = _vertexStrideFloat * i7 + offset;
          var uv1 = _uv1[i7];
          if (uv1) {
            vertices[start7] = uv1.x;
            vertices[start7 + 1] = uv1.y;
          }
        }
      }
      offset += 2;
    }
    if (_uv2) {
      if (_vertexChangeFlag & 256) {
        for (var i8 = 0; i8 < _vertexCount; i8++) {
          var start8 = _vertexStrideFloat * i8 + offset;
          var uv2 = _uv2[i8];
          if (uv2) {
            vertices[start8] = uv2.x;
            vertices[start8 + 1] = uv2.y;
          }
        }
      }
      offset += 2;
    }
    if (_uv3) {
      if (_vertexChangeFlag & 512) {
        for (var i9 = 0; i9 < _vertexCount; i9++) {
          var start9 = _vertexStrideFloat * i9 + offset;
          var uv3 = _uv3[i9];
          if (uv3) {
            vertices[start9] = uv3.x;
            vertices[start9 + 1] = uv3.y;
          }
        }
      }
      offset += 2;
    }
    if (_uv4) {
      if (_vertexChangeFlag & 1024) {
        for (var i10 = 0; i10 < _vertexCount; i10++) {
          var start10 = _vertexStrideFloat * i10 + offset;
          var uv4 = _uv4[i10];
          if (uv4) {
            vertices[start10] = uv4.x;
            vertices[start10 + 1] = uv4.y;
          }
        }
      }
      offset += 2;
    }
    if (_uv5) {
      if (_vertexChangeFlag & 2048) {
        for (var i11 = 0; i11 < _vertexCount; i11++) {
          var start11 = _vertexStrideFloat * i11 + offset;
          var uv5 = _uv5[i11];
          if (uv5) {
            vertices[start11] = uv5.x;
            vertices[start11 + 1] = uv5.y;
          }
        }
      }
      offset += 2;
    }
    if (_uv6) {
      if (_vertexChangeFlag & 4096) {
        for (var i12 = 0; i12 < _vertexCount; i12++) {
          var start12 = _vertexStrideFloat * i12 + offset;
          var uv6 = _uv6[i12];
          if (uv6) {
            vertices[start12] = uv6.x;
            vertices[start12 + 1] = uv6.y;
          }
        }
      }
      offset += 2;
    }
    if (_uv7) {
      if (_vertexChangeFlag & 8192) {
        for (var i13 = 0; i13 < _vertexCount; i13++) {
          var start13 = _vertexStrideFloat * i13 + offset;
          var uv7 = _uv7[i13];
          if (uv7) {
            vertices[start13] = uv7.x;
            vertices[start13 + 1] = uv7.y;
          }
        }
      }
      offset += 2;
    }
    this._vertexBufferUpdateFlag = 0;
  };
  _proto._insertVertexAttribute = function _insertVertexAttribute(vertexAttribute) {
    var format = this._getAttributeFormat(vertexAttribute);
    var needByteLength = this._getAttributeByteLength(vertexAttribute);
    var vertexElements = this._vertexElements;
    var i = 0;
    var lastOffset = 0;
    for (var n = vertexElements.length; i < n; i++) {
      var vertexElement = vertexElements[i];
      if (vertexElement.bindingIndex == 0) {
        if (vertexElement.offset - lastOffset >= needByteLength) {
          break;
        }
        lastOffset = vertexElement.offset + this._getAttributeByteLength(vertexElement.semantic);
      }
    }
    this._insertVertexElement(i, new VertexElement(vertexAttribute, lastOffset, format, 0));
    this._bufferStrides[0] = lastOffset + needByteLength;
  };
  _proto._getAttributeFormat = function _getAttributeFormat(attribute) {
    switch (attribute) {
      case VertexAttribute.Position:
        return VertexElementFormat.Vector3;
      case VertexAttribute.Normal:
        return VertexElementFormat.Vector3;
      case VertexAttribute.Color:
        return VertexElementFormat.Vector4;
      case VertexAttribute.BoneWeight:
        return VertexElementFormat.Vector4;
      case VertexAttribute.BoneIndex:
        return VertexElementFormat.UByte4;
      case VertexAttribute.Tangent:
        return VertexElementFormat.Vector4;
      case VertexAttribute.UV:
      case VertexAttribute.UV1:
      case VertexAttribute.UV2:
      case VertexAttribute.UV3:
      case VertexAttribute.UV4:
      case VertexAttribute.UV5:
      case VertexAttribute.UV6:
      case VertexAttribute.UV7:
        return VertexElementFormat.Vector2;
    }
  };
  _proto._getAttributeByteLength = function _getAttributeByteLength(attribute) {
    switch (attribute) {
      case VertexAttribute.Position:
        return 12;
      case VertexAttribute.Normal:
        return 12;
      case VertexAttribute.Color:
        return 16;
      case VertexAttribute.BoneWeight:
        return 16;
      case VertexAttribute.BoneIndex:
        return 4;
      case VertexAttribute.Tangent:
        return 16;
      case VertexAttribute.UV:
      case VertexAttribute.UV1:
      case VertexAttribute.UV2:
      case VertexAttribute.UV3:
      case VertexAttribute.UV4:
      case VertexAttribute.UV5:
      case VertexAttribute.UV6:
      case VertexAttribute.UV7:
        return 8;
    }
  };
  _proto._releaseCache = function _releaseCache() {
    this._verticesUint8 = null;
    this._indices = null;
    this._verticesFloat32 = null;
    this._positions = null;
    this._tangents = null;
    this._normals = null;
    this._colors = null;
    this._uv = null;
    this._uv1 = null;
    this._uv2 = null;
    this._uv3 = null;
    this._uv4 = null;
    this._uv5 = null;
    this._uv6 = null;
    this._uv7 = null;
    this._blendShapeManager._releaseMemoryCache();
  };
  _create_class2(ModelMesh2, [
    {
      key: "accessible",
      get: (
        /**
        * Whether to access data of the mesh.
        */
        function get() {
          return this._accessible;
        }
      )
    },
    {
      key: "vertexCount",
      get: (
        /**
        * Vertex count of current mesh.
        */
        function get() {
          if (this._vertexDataUpdateFlag & 1) {
            var vertexCount = 0;
            var positionElement = this._vertexElementMap[VertexAttribute.Position];
            if (positionElement) {
              var positionBufferBinding = this._vertexBufferBindings[positionElement.bindingIndex];
              if (positionBufferBinding) {
                vertexCount = positionBufferBinding.buffer.byteLength / positionBufferBinding.stride;
              }
            }
            this._vertexCount = vertexCount;
            this._vertexDataUpdateFlag &= ~1;
          }
          return this._vertexCount;
        }
      )
    },
    {
      key: "vertexElements",
      get: (
        /**
        * Vertex element collection.
        */
        function get() {
          this._updateVertexElements();
          return this._vertexElements;
        }
      )
    },
    {
      key: "vertexBufferBindings",
      get: (
        /**
        * Vertex buffer binding collection.
        */
        function get() {
          return this._vertexBufferBindings;
        }
      )
    },
    {
      key: "blendShapes",
      get: (
        /**
        * BlendShapes of this ModelMesh.
        */
        function get() {
          if (!this._accessible) {
            throw "Not allowed to access data while accessible is false.";
          }
          return this._blendShapeManager._blendShapes;
        }
      )
    },
    {
      key: "blendShapeCount",
      get: (
        /**
        * BlendShape count of this ModelMesh.
        */
        function get() {
          return this._blendShapeManager._blendShapeCount;
        }
      )
    }
  ]);
  return ModelMesh2;
}(Mesh);
(function() {
  ModelMesh._tempVec0 = new Vector3();
})();
(function() {
  ModelMesh._tempVec1 = new Vector3();
})();
(function() {
  ModelMesh._tempVec2 = new Vector3();
})();
(function() {
  ModelMesh._tempVec3 = new Vector3();
})();
(function() {
  ModelMesh._tempVec4 = new Vector3();
})();
var VertexChangedFlags;
(function(VertexChangedFlags2) {
  VertexChangedFlags2[VertexChangedFlags2["Position"] = 1] = "Position";
  VertexChangedFlags2[VertexChangedFlags2["Normal"] = 2] = "Normal";
  VertexChangedFlags2[VertexChangedFlags2["Color"] = 4] = "Color";
  VertexChangedFlags2[VertexChangedFlags2["Tangent"] = 8] = "Tangent";
  VertexChangedFlags2[VertexChangedFlags2["BoneWeight"] = 16] = "BoneWeight";
  VertexChangedFlags2[VertexChangedFlags2["BoneIndex"] = 32] = "BoneIndex";
  VertexChangedFlags2[VertexChangedFlags2["UV"] = 64] = "UV";
  VertexChangedFlags2[VertexChangedFlags2["UV1"] = 128] = "UV1";
  VertexChangedFlags2[VertexChangedFlags2["UV2"] = 256] = "UV2";
  VertexChangedFlags2[VertexChangedFlags2["UV3"] = 512] = "UV3";
  VertexChangedFlags2[VertexChangedFlags2["UV4"] = 1024] = "UV4";
  VertexChangedFlags2[VertexChangedFlags2["UV5"] = 2048] = "UV5";
  VertexChangedFlags2[VertexChangedFlags2["UV6"] = 4096] = "UV6";
  VertexChangedFlags2[VertexChangedFlags2["UV7"] = 8192] = "UV7";
  VertexChangedFlags2[VertexChangedFlags2["All"] = 65535] = "All";
})(VertexChangedFlags || (VertexChangedFlags = {}));
var Skin = function(EngineObject2) {
  _inherits(Skin2, EngineObject2);
  function Skin2(name) {
    var _this;
    _this = EngineObject2.call(this, null) || this;
    _this.name = name;
    _this.inverseBindMatrices = [];
    _this.joints = [];
    _this.skeleton = "none";
    return _this;
  }
  return Skin2;
}(EngineObject);
var MeshRenderer = function(Renderer2) {
  _inherits(MeshRenderer2, Renderer2);
  function MeshRenderer2(entity) {
    var _this;
    _this = Renderer2.call(this, entity) || this;
    _this._enableVertexColor = false;
    _this._onMeshChanged = _this._onMeshChanged.bind(_assert_this_initialized(_this));
    return _this;
  }
  var _proto = MeshRenderer2.prototype;
  _proto._onDestroy = function _onDestroy() {
    Renderer2.prototype._onDestroy.call(this);
    var mesh = this._mesh;
    if (mesh && !mesh.destroyed) {
      mesh._addRefCount(-1);
      this._mesh = null;
    }
  };
  _proto._cloneTo = function _cloneTo(target) {
    target.mesh = this._mesh;
  };
  _proto._updateBounds = function _updateBounds(worldBounds) {
    var mesh = this._mesh;
    if (mesh) {
      var localBounds = mesh.bounds;
      var worldMatrix = this._entity.transform.worldMatrix;
      BoundingBox.transform(localBounds, worldMatrix, worldBounds);
    } else {
      worldBounds.min.set(0, 0, 0);
      worldBounds.max.set(0, 0, 0);
    }
  };
  _proto._render = function _render(context) {
    var mesh = this._mesh;
    if (mesh) {
      if (this._dirtyUpdateFlag & 2) {
        var shaderData = this.shaderData;
        var vertexElements = mesh._vertexElements;
        shaderData.disableMacro(MeshRenderer2._uvMacro);
        shaderData.disableMacro(MeshRenderer2._uv1Macro);
        shaderData.disableMacro(MeshRenderer2._normalMacro);
        shaderData.disableMacro(MeshRenderer2._tangentMacro);
        shaderData.disableMacro(MeshRenderer2._vertexColorMacro);
        for (var i = 0, n = vertexElements.length; i < n; i++) {
          switch (vertexElements[i].semantic) {
            case "TEXCOORD_0":
              shaderData.enableMacro(MeshRenderer2._uvMacro);
              break;
            case "TEXCOORD_1":
              shaderData.enableMacro(MeshRenderer2._uv1Macro);
              break;
            case "NORMAL":
              shaderData.enableMacro(MeshRenderer2._normalMacro);
              break;
            case "TANGENT":
              shaderData.enableMacro(MeshRenderer2._tangentMacro);
              break;
            case "COLOR_0":
              this.enableVertexColor && shaderData.enableMacro(MeshRenderer2._vertexColorMacro);
              break;
          }
        }
        this._dirtyUpdateFlag &= ~2;
      }
      var subMeshes = mesh.subMeshes;
      var renderPipeline = context.camera._renderPipeline;
      var renderElementPool = this._engine._renderElementPool;
      for (var i1 = 0, n1 = subMeshes.length; i1 < n1; i1++) {
        var material = this._materials[i1];
        if (material) {
          var renderStates = material.renderStates;
          var shaderPasses = material.shader.passes;
          for (var j = 0, m = shaderPasses.length; j < m; j++) {
            var element = renderElementPool.getFromPool();
            element.setValue(this, mesh, subMeshes[i1], material, renderStates[j], shaderPasses[j]);
            renderPipeline.pushPrimitive(element);
          }
        }
      }
    } else {
      Logger.error("mesh is null.");
    }
  };
  _proto._setMesh = function _setMesh(mesh) {
    var lastMesh = this._mesh;
    if (lastMesh) {
      lastMesh._addRefCount(-1);
      lastMesh._updateFlagManager.removeListener(this._onMeshChanged);
    }
    if (mesh) {
      mesh._addRefCount(1);
      mesh._updateFlagManager.addListener(this._onMeshChanged);
      this._dirtyUpdateFlag |= 3;
    }
    this._mesh = mesh;
  };
  _proto._onMeshChanged = function _onMeshChanged(type) {
    type & MeshModifyFlags.Bounds && (this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume);
    type & MeshModifyFlags.VertexElements && (this._dirtyUpdateFlag |= 2);
  };
  _create_class2(MeshRenderer2, [
    {
      key: "mesh",
      get: (
        /**
        * Mesh assigned to the renderer.
        */
        function get() {
          return this._mesh;
        }
      ),
      set: function set(value) {
        if (this._mesh !== value) {
          this._setMesh(value);
        }
      }
    },
    {
      key: "enableVertexColor",
      get: (
        /**
        * Whether enable vertex color.
        */
        function get() {
          return this._enableVertexColor;
        }
      ),
      set: function set(value) {
        if (value !== this._enableVertexColor) {
          this._dirtyUpdateFlag |= 2;
          this._enableVertexColor = value;
        }
      }
    }
  ]);
  return MeshRenderer2;
}(Renderer);
(function() {
  MeshRenderer._uvMacro = Shader.getMacroByName("O3_HAS_UV");
})();
(function() {
  MeshRenderer._uv1Macro = Shader.getMacroByName("O3_HAS_UV1");
})();
(function() {
  MeshRenderer._normalMacro = Shader.getMacroByName("O3_HAS_NORMAL");
})();
(function() {
  MeshRenderer._tangentMacro = Shader.getMacroByName("O3_HAS_TANGENT");
})();
(function() {
  MeshRenderer._vertexColorMacro = Shader.getMacroByName("O3_HAS_VERTEXCOLOR");
})();
__decorate([
  ignoreClone
], MeshRenderer.prototype, "_mesh", void 0);
__decorate([
  ignoreClone
], MeshRenderer.prototype, "_onMeshChanged", null);
var MeshRendererUpdateFlags;
(function(MeshRendererUpdateFlags2) {
  MeshRendererUpdateFlags2[MeshRendererUpdateFlags2[
    /** VertexElementMacro. */
    "VertexElementMacro"
  ] = 2] = "VertexElementMacro";
  MeshRendererUpdateFlags2[MeshRendererUpdateFlags2[
    /** All. */
    "All"
  ] = 3] = "All";
})(MeshRendererUpdateFlags || (MeshRendererUpdateFlags = {}));
var Utils = function() {
  function Utils2() {
  }
  Utils2._floatMatrixMultiply = function _floatMatrixMultiply(left, re, rOffset, oe, offset) {
    var le = left.elements;
    var l11 = le[0], l12 = le[1], l13 = le[2], l14 = le[3], l21 = le[4], l22 = le[5], l23 = le[6], l24 = le[7], l31 = le[8], l32 = le[9], l33 = le[10], l34 = le[11], l41 = le[12], l42 = le[13], l43 = le[14], l44 = le[15];
    var r11 = re[rOffset], r12 = re[rOffset + 1], r13 = re[rOffset + 2], r14 = re[rOffset + 3], r21 = re[rOffset + 4], r22 = re[rOffset + 5], r23 = re[rOffset + 6], r24 = re[rOffset + 7], r31 = re[rOffset + 8], r32 = re[rOffset + 9], r33 = re[rOffset + 10], r34 = re[rOffset + 11], r41 = re[rOffset + 12], r42 = re[rOffset + 13], r43 = re[rOffset + 14], r44 = re[rOffset + 15];
    oe[offset] = l11 * r11 + l21 * r12 + l31 * r13 + l41 * r14;
    oe[offset + 1] = l12 * r11 + l22 * r12 + l32 * r13 + l42 * r14;
    oe[offset + 2] = l13 * r11 + l23 * r12 + l33 * r13 + l43 * r14;
    oe[offset + 3] = l14 * r11 + l24 * r12 + l34 * r13 + l44 * r14;
    oe[offset + 4] = l11 * r21 + l21 * r22 + l31 * r23 + l41 * r24;
    oe[offset + 5] = l12 * r21 + l22 * r22 + l32 * r23 + l42 * r24;
    oe[offset + 6] = l13 * r21 + l23 * r22 + l33 * r23 + l43 * r24;
    oe[offset + 7] = l14 * r21 + l24 * r22 + l34 * r23 + l44 * r24;
    oe[offset + 8] = l11 * r31 + l21 * r32 + l31 * r33 + l41 * r34;
    oe[offset + 9] = l12 * r31 + l22 * r32 + l32 * r33 + l42 * r34;
    oe[offset + 10] = l13 * r31 + l23 * r32 + l33 * r33 + l43 * r34;
    oe[offset + 11] = l14 * r31 + l24 * r32 + l34 * r33 + l44 * r34;
    oe[offset + 12] = l11 * r41 + l21 * r42 + l31 * r43 + l41 * r44;
    oe[offset + 13] = l12 * r41 + l22 * r42 + l32 * r43 + l42 * r44;
    oe[offset + 14] = l13 * r41 + l23 * r42 + l33 * r43 + l43 * r44;
    oe[offset + 15] = l14 * r41 + l24 * r42 + l34 * r43 + l44 * r44;
  };
  Utils2._reflectGet = function _reflectGet(target, path) {
    var pathArr = this._stringToPath(path);
    var object = target;
    var index = 0;
    var length2 = pathArr.length;
    while (object != null && index < length2) {
      object = object[pathArr[index++]];
    }
    return index && index == length2 ? object : void 0;
  };
  Utils2._stringToPath = function _stringToPath(string) {
    var result = [];
    if (string.charCodeAt(0) === charCodeOfDot) {
      result.push("");
    }
    string.replace(rePropName, function(match, expression, quote, subString) {
      var key = match;
      if (quote) {
        key = subString.replace(reEscapeChar, "$1");
      } else if (expression) {
        key = expression.trim();
      }
      result.push(key);
    });
    return result;
  };
  return Utils2;
}();
var charCodeOfDot = ".".charCodeAt(0);
var reEscapeChar = /\\(\\)?/g;
var rePropName = RegExp(
  // Match anything that isn't a dot or bracket.
  `[^.[\\]]+|\\[(?:([^"'][^[]*)|(["'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))`,
  "g"
);
var SkinnedMeshRenderer = function(MeshRenderer2) {
  _inherits(SkinnedMeshRenderer2, MeshRenderer2);
  function SkinnedMeshRenderer2(entity) {
    var _this;
    _this = MeshRenderer2.call(this, entity) || this;
    _this._supportSkinning = false;
    _this._hasInitSkin = false;
    _this._jointDataCreateCache = new Vector2(-1, -1);
    _this._localBounds = new BoundingBox();
    _this._skin = null;
    var rhi = _this.entity.engine._hardwareRenderer;
    var maxVertexUniformVectors = rhi.renderStates.getParameter(rhi.gl.MAX_VERTEX_UNIFORM_VECTORS);
    maxVertexUniformVectors = Math.min(maxVertexUniformVectors, rhi._options._maxAllowSkinUniformVectorCount);
    _this._maxVertexUniformVectors = maxVertexUniformVectors;
    _this._onLocalBoundsChanged = _this._onLocalBoundsChanged.bind(_assert_this_initialized(_this));
    var localBounds = _this._localBounds;
    localBounds.min._onValueChanged = _this._onLocalBoundsChanged;
    localBounds.max._onValueChanged = _this._onLocalBoundsChanged;
    return _this;
  }
  var _proto = SkinnedMeshRenderer2.prototype;
  _proto.update = function update() {
    if (!this._hasInitSkin) {
      this._initSkin();
      this._hasInitSkin = true;
    }
    if (this._supportSkinning) {
      var ibms = this._skin.inverseBindMatrices;
      var worldToLocal = this._rootBone.getInvModelMatrix();
      var _this = this, joints = _this._jointEntities, jointMatrices = _this._jointMatrices;
      for (var i = joints.length - 1; i >= 0; i--) {
        var joint = joints[i];
        var offset = i * 16;
        if (joint) {
          Utils._floatMatrixMultiply(joint.transform.worldMatrix, ibms[i].elements, 0, jointMatrices, offset);
        } else {
          jointMatrices.set(ibms[i].elements, offset);
        }
        Utils._floatMatrixMultiply(worldToLocal, jointMatrices, offset, jointMatrices, offset);
      }
    }
  };
  _proto._updateShaderData = function _updateShaderData(context) {
    var entity = this.entity;
    var shaderData = this.shaderData;
    var mesh = this.mesh;
    var blendShapeManager = mesh._blendShapeManager;
    blendShapeManager._updateShaderData(shaderData, this);
    var skin = this._skin;
    if (skin) {
      var bsUniformOccupiesCount = blendShapeManager._uniformOccupiesCount;
      var jointCount = skin.joints.length;
      var jointDataCreateCache = this._jointDataCreateCache;
      var jointCountChange = jointCount !== jointDataCreateCache.x;
      if (jointCountChange || bsUniformOccupiesCount !== jointDataCreateCache.y) {
        var remainUniformJointCount = Math.ceil((this._maxVertexUniformVectors - (44 + bsUniformOccupiesCount)) / 4);
        if (jointCount > remainUniformJointCount) {
          var engine = this.engine;
          if (engine._hardwareRenderer.canIUseMoreJoints) {
            if (jointCountChange) {
              var _this__jointTexture;
              (_this__jointTexture = this._jointTexture) == null ? void 0 : _this__jointTexture.destroy();
              this._jointTexture = new Texture2D(engine, 4, jointCount, TextureFormat.R32G32B32A32, false);
              this._jointTexture.filterMode = TextureFilterMode.Point;
            }
            shaderData.disableMacro("O3_JOINTS_NUM");
            shaderData.enableMacro("O3_USE_JOINT_TEXTURE");
            shaderData.setTexture(SkinnedMeshRenderer2._jointSamplerProperty, this._jointTexture);
            this._supportSkinning = true;
          } else {
            var _this__jointTexture1;
            this._supportSkinning = false;
            (_this__jointTexture1 = this._jointTexture) == null ? void 0 : _this__jointTexture1.destroy();
            shaderData.disableMacro("O3_HAS_SKIN");
            Logger.warn("component's joints count(" + jointCount + ") greater than device's MAX_VERTEX_UNIFORM_VECTORS number " + this._maxVertexUniformVectors + ", and don't support jointTexture in this device. suggest joint count less than " + remainUniformJointCount + ".", this);
          }
        } else {
          var _this__jointTexture2;
          this._supportSkinning = true;
          (_this__jointTexture2 = this._jointTexture) == null ? void 0 : _this__jointTexture2.destroy();
          shaderData.disableMacro("O3_USE_JOINT_TEXTURE");
          shaderData.enableMacro("O3_JOINTS_NUM", remainUniformJointCount.toString());
          shaderData.setFloatArray(SkinnedMeshRenderer2._jointMatrixProperty, this._jointMatrices);
        }
        jointDataCreateCache.set(jointCount, bsUniformOccupiesCount);
      }
      if (this._jointTexture) {
        this._jointTexture.setPixelBuffer(this._jointMatrices);
      }
    }
    var worldMatrix = this._supportSkinning && this._rootBone ? this._rootBone.transform.worldMatrix : entity.transform.worldMatrix;
    this._updateTransformShaderData(context, worldMatrix);
    var layer = entity.layer;
    this._rendererLayer.set(layer & 65535, layer >>> 16 & 65535, 0, 0);
  };
  _proto._cloneTo = function _cloneTo(target) {
    MeshRenderer2.prototype._cloneTo.call(this, target);
    this._blendShapeWeights && (target._blendShapeWeights = this._blendShapeWeights.slice());
  };
  _proto._registerEntityTransformListener = function _registerEntityTransformListener() {
  };
  _proto._updateBounds = function _updateBounds(worldBounds) {
    if (this._rootBone) {
      var localBounds = this._localBounds;
      var worldMatrix = this._rootBone.transform.worldMatrix;
      BoundingBox.transform(localBounds, worldMatrix, worldBounds);
    } else {
      MeshRenderer2.prototype._updateBounds.call(this, worldBounds);
    }
  };
  _proto._initSkin = function _initSkin() {
    var rhi = this.entity.engine._hardwareRenderer;
    if (!rhi)
      return;
    var _this = this, skin = _this._skin, shaderData = _this.shaderData;
    if (!skin) {
      shaderData.disableMacro("O3_HAS_SKIN");
      return;
    }
    var joints = skin.joints;
    var jointCount = joints.length;
    var jointEntities = new Array(jointCount);
    for (var i = jointCount - 1; i >= 0; i--) {
      jointEntities[i] = this._findByEntityName(this.entity, joints[i]);
    }
    this._jointEntities = jointEntities;
    this._jointMatrices = new Float32Array(jointCount * 16);
    var lastRootBone = this._rootBone;
    var rootBone = this._findByEntityName(this.entity, skin.skeleton);
    lastRootBone && lastRootBone.transform._updateFlagManager.removeListener(this._onTransformChanged);
    rootBone.transform._updateFlagManager.addListener(this._onTransformChanged);
    var rootIndex = joints.indexOf(skin.skeleton);
    if (rootIndex !== -1) {
      BoundingBox.transform(this._mesh.bounds, skin.inverseBindMatrices[rootIndex], this._localBounds);
    } else {
      var approximateBindMatrix = new Matrix(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      var subRootBoneCount = this._computeApproximateBindMatrix(jointEntities, skin.inverseBindMatrices, rootBone, approximateBindMatrix);
      if (subRootBoneCount !== 0) {
        Matrix.multiplyScalar(approximateBindMatrix, 1 / subRootBoneCount, approximateBindMatrix);
        BoundingBox.transform(this._mesh.bounds, approximateBindMatrix, this._localBounds);
      } else {
        this._localBounds.copyFrom(this._mesh.bounds);
      }
    }
    this._rootBone = rootBone;
    if (jointCount) {
      shaderData.enableMacro("O3_HAS_SKIN");
      shaderData.setInt(SkinnedMeshRenderer2._jointCountProperty, jointCount);
    } else {
      shaderData.disableMacro("O3_HAS_SKIN");
    }
  };
  _proto._computeApproximateBindMatrix = function _computeApproximateBindMatrix(jointEntities, inverseBindMatrices, rootEntity, approximateBindMatrix) {
    var subRootBoneCount = 0;
    var children = rootEntity.children;
    for (var i = 0, n = children.length; i < n; i++) {
      var rootChild = children[i];
      var index = jointEntities.indexOf(rootChild);
      if (index !== -1) {
        Matrix.add(approximateBindMatrix, inverseBindMatrices[index], approximateBindMatrix);
        subRootBoneCount++;
      } else {
        subRootBoneCount += this._computeApproximateBindMatrix(jointEntities, inverseBindMatrices, rootChild, approximateBindMatrix);
      }
    }
    return subRootBoneCount;
  };
  _proto._findByEntityName = function _findByEntityName(rootEntity, name) {
    if (!rootEntity) {
      return null;
    }
    var result = rootEntity.findByName(name);
    if (result) {
      return result;
    }
    return this._findByEntityName(rootEntity.parent, name);
  };
  _proto._checkBlendShapeWeightLength = function _checkBlendShapeWeightLength() {
    var mesh = this._mesh;
    var newBlendShapeCount = mesh ? mesh.blendShapeCount : 0;
    var lastBlendShapeWeights = this._blendShapeWeights;
    if (lastBlendShapeWeights) {
      var lastBlendShapeWeightsCount = lastBlendShapeWeights.length;
      if (lastBlendShapeWeightsCount !== newBlendShapeCount) {
        var newBlendShapeWeights = new Float32Array(newBlendShapeCount);
        if (newBlendShapeCount > lastBlendShapeWeightsCount) {
          newBlendShapeWeights.set(lastBlendShapeWeights);
        } else {
          for (var i = 0; i < newBlendShapeCount; i++) {
            newBlendShapeWeights[i] = lastBlendShapeWeights[i];
          }
        }
        this._blendShapeWeights = newBlendShapeWeights;
      }
    } else {
      this._blendShapeWeights = new Float32Array(newBlendShapeCount);
    }
  };
  _proto._onLocalBoundsChanged = function _onLocalBoundsChanged() {
    this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;
  };
  _create_class2(SkinnedMeshRenderer2, [
    {
      key: "blendShapeWeights",
      get: (
        /**
        * The weights of the BlendShapes.
        * @remarks Array index is BlendShape index.
        */
        function get() {
          this._checkBlendShapeWeightLength();
          return this._blendShapeWeights;
        }
      ),
      set: function set(value) {
        this._checkBlendShapeWeightLength();
        var blendShapeWeights = this._blendShapeWeights;
        if (value.length <= blendShapeWeights.length) {
          blendShapeWeights.set(value);
        } else {
          for (var i = 0, n = blendShapeWeights.length; i < n; i++) {
            blendShapeWeights[i] = value[i];
          }
        }
      }
    },
    {
      key: "skin",
      get: (
        /**
        * Skin Object.
        */
        function get() {
          return this._skin;
        }
      ),
      set: function set(value) {
        if (this._skin !== value) {
          this._skin = value;
          this._hasInitSkin = false;
        }
      }
    },
    {
      key: "localBounds",
      get: (
        /**
        * Local bounds.
        */
        function get() {
          return this._localBounds;
        }
      ),
      set: function set(value) {
        if (this._localBounds !== value) {
          this._localBounds.copyFrom(value);
        }
      }
    },
    {
      key: "rootBone",
      get: (
        /**
        * Root bone.
        */
        function get() {
          return this._rootBone;
        }
      ),
      set: function set(value) {
        this._skin.skeleton = value.name;
        this._hasInitSkin = false;
        this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;
      }
    }
  ]);
  return SkinnedMeshRenderer2;
}(MeshRenderer);
(function() {
  SkinnedMeshRenderer._tempMatrix = new Matrix();
})();
(function() {
  SkinnedMeshRenderer._jointCountProperty = Shader.getPropertyByName("u_jointCount");
})();
(function() {
  SkinnedMeshRenderer._jointSamplerProperty = Shader.getPropertyByName("u_jointSampler");
})();
(function() {
  SkinnedMeshRenderer._jointMatrixProperty = Shader.getPropertyByName("u_jointMatrix");
})();
__decorate([
  ignoreClone
], SkinnedMeshRenderer.prototype, "_supportSkinning", void 0);
__decorate([
  ignoreClone
], SkinnedMeshRenderer.prototype, "_hasInitSkin", void 0);
__decorate([
  ignoreClone
], SkinnedMeshRenderer.prototype, "_jointDataCreateCache", void 0);
__decorate([
  ignoreClone
], SkinnedMeshRenderer.prototype, "_blendShapeWeights", void 0);
__decorate([
  ignoreClone
], SkinnedMeshRenderer.prototype, "_maxVertexUniformVectors", void 0);
__decorate([
  ignoreClone
], SkinnedMeshRenderer.prototype, "_rootBone", void 0);
__decorate([
  ignoreClone
], SkinnedMeshRenderer.prototype, "_localBounds", void 0);
__decorate([
  ignoreClone
], SkinnedMeshRenderer.prototype, "_jointMatrices", void 0);
__decorate([
  ignoreClone
], SkinnedMeshRenderer.prototype, "_jointTexture", void 0);
__decorate([
  ignoreClone
], SkinnedMeshRenderer.prototype, "_jointEntities", void 0);
__decorate([
  ignoreClone
], SkinnedMeshRenderer.prototype, "_condensedBlendShapeWeights", void 0);
__decorate([
  ignoreClone
], SkinnedMeshRenderer.prototype, "_onLocalBoundsChanged", null);
var PrimitiveMesh = function() {
  function PrimitiveMesh2() {
  }
  PrimitiveMesh2.createSphere = function createSphere(engine, radius, segments, noLongerAccessible) {
    if (radius === void 0)
      radius = 0.5;
    if (segments === void 0)
      segments = 18;
    if (noLongerAccessible === void 0)
      noLongerAccessible = true;
    var mesh = new ModelMesh(engine);
    segments = Math.max(2, Math.floor(segments));
    var count = segments + 1;
    var vertexCount = count * count;
    var rectangleCount = segments * segments;
    var indices = PrimitiveMesh2._generateIndices(engine, vertexCount, rectangleCount * 6);
    var thetaRange = Math.PI;
    var alphaRange = thetaRange * 2;
    var countReciprocal = 1 / count;
    var segmentsReciprocal = 1 / segments;
    var positions = new Array(vertexCount);
    var normals = new Array(vertexCount);
    var uvs = new Array(vertexCount);
    for (var i = 0; i < vertexCount; ++i) {
      var x = i % count;
      var y = i * countReciprocal | 0;
      var u = x * segmentsReciprocal;
      var v = y * segmentsReciprocal;
      var alphaDelta = u * alphaRange;
      var thetaDelta = v * thetaRange;
      var sinTheta = Math.sin(thetaDelta);
      var posX = -radius * Math.cos(alphaDelta) * sinTheta;
      var posY = radius * Math.cos(thetaDelta);
      var posZ = radius * Math.sin(alphaDelta) * sinTheta;
      positions[i] = new Vector3(posX, posY, posZ);
      normals[i] = new Vector3(posX, posY, posZ);
      uvs[i] = new Vector2(u, v);
    }
    var offset = 0;
    for (var i1 = 0; i1 < rectangleCount; ++i1) {
      var x1 = i1 % segments;
      var y1 = i1 * segmentsReciprocal | 0;
      var a = y1 * count + x1;
      var b = a + 1;
      var c = a + count;
      var d = c + 1;
      indices[offset++] = b;
      indices[offset++] = a;
      indices[offset++] = d;
      indices[offset++] = a;
      indices[offset++] = c;
      indices[offset++] = d;
    }
    var bounds = mesh.bounds;
    bounds.min.set(-radius, -radius, -radius);
    bounds.max.set(radius, radius, radius);
    PrimitiveMesh2._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);
    return mesh;
  };
  PrimitiveMesh2.createCuboid = function createCuboid(engine, width, height, depth, noLongerAccessible) {
    if (width === void 0)
      width = 1;
    if (height === void 0)
      height = 1;
    if (depth === void 0)
      depth = 1;
    if (noLongerAccessible === void 0)
      noLongerAccessible = true;
    var mesh = new ModelMesh(engine);
    var halfWidth = width / 2;
    var halfHeight = height / 2;
    var halfDepth = depth / 2;
    var positions = new Array(24);
    var normals = new Array(24);
    var uvs = new Array(24);
    positions[0] = new Vector3(-halfWidth, halfHeight, -halfDepth);
    positions[1] = new Vector3(halfWidth, halfHeight, -halfDepth);
    positions[2] = new Vector3(halfWidth, halfHeight, halfDepth);
    positions[3] = new Vector3(-halfWidth, halfHeight, halfDepth);
    normals[0] = new Vector3(0, 1, 0);
    normals[1] = new Vector3(0, 1, 0);
    normals[2] = new Vector3(0, 1, 0);
    normals[3] = new Vector3(0, 1, 0);
    uvs[0] = new Vector2(0, 0);
    uvs[1] = new Vector2(1, 0);
    uvs[2] = new Vector2(1, 1);
    uvs[3] = new Vector2(0, 1);
    positions[4] = new Vector3(-halfWidth, -halfHeight, -halfDepth);
    positions[5] = new Vector3(halfWidth, -halfHeight, -halfDepth);
    positions[6] = new Vector3(halfWidth, -halfHeight, halfDepth);
    positions[7] = new Vector3(-halfWidth, -halfHeight, halfDepth);
    normals[4] = new Vector3(0, -1, 0);
    normals[5] = new Vector3(0, -1, 0);
    normals[6] = new Vector3(0, -1, 0);
    normals[7] = new Vector3(0, -1, 0);
    uvs[4] = new Vector2(0, 1);
    uvs[5] = new Vector2(1, 1);
    uvs[6] = new Vector2(1, 0);
    uvs[7] = new Vector2(0, 0);
    positions[8] = new Vector3(-halfWidth, halfHeight, -halfDepth);
    positions[9] = new Vector3(-halfWidth, halfHeight, halfDepth);
    positions[10] = new Vector3(-halfWidth, -halfHeight, halfDepth);
    positions[11] = new Vector3(-halfWidth, -halfHeight, -halfDepth);
    normals[8] = new Vector3(-1, 0, 0);
    normals[9] = new Vector3(-1, 0, 0);
    normals[10] = new Vector3(-1, 0, 0);
    normals[11] = new Vector3(-1, 0, 0);
    uvs[8] = new Vector2(0, 0);
    uvs[9] = new Vector2(1, 0);
    uvs[10] = new Vector2(1, 1);
    uvs[11] = new Vector2(0, 1);
    positions[12] = new Vector3(halfWidth, halfHeight, -halfDepth);
    positions[13] = new Vector3(halfWidth, halfHeight, halfDepth);
    positions[14] = new Vector3(halfWidth, -halfHeight, halfDepth);
    positions[15] = new Vector3(halfWidth, -halfHeight, -halfDepth);
    normals[12] = new Vector3(1, 0, 0);
    normals[13] = new Vector3(1, 0, 0);
    normals[14] = new Vector3(1, 0, 0);
    normals[15] = new Vector3(1, 0, 0);
    uvs[12] = new Vector2(1, 0);
    uvs[13] = new Vector2(0, 0);
    uvs[14] = new Vector2(0, 1);
    uvs[15] = new Vector2(1, 1);
    positions[16] = new Vector3(-halfWidth, halfHeight, halfDepth);
    positions[17] = new Vector3(halfWidth, halfHeight, halfDepth);
    positions[18] = new Vector3(halfWidth, -halfHeight, halfDepth);
    positions[19] = new Vector3(-halfWidth, -halfHeight, halfDepth);
    normals[16] = new Vector3(0, 0, 1);
    normals[17] = new Vector3(0, 0, 1);
    normals[18] = new Vector3(0, 0, 1);
    normals[19] = new Vector3(0, 0, 1);
    uvs[16] = new Vector2(0, 0);
    uvs[17] = new Vector2(1, 0);
    uvs[18] = new Vector2(1, 1);
    uvs[19] = new Vector2(0, 1);
    positions[20] = new Vector3(-halfWidth, halfHeight, -halfDepth);
    positions[21] = new Vector3(halfWidth, halfHeight, -halfDepth);
    positions[22] = new Vector3(halfWidth, -halfHeight, -halfDepth);
    positions[23] = new Vector3(-halfWidth, -halfHeight, -halfDepth);
    normals[20] = new Vector3(0, 0, -1);
    normals[21] = new Vector3(0, 0, -1);
    normals[22] = new Vector3(0, 0, -1);
    normals[23] = new Vector3(0, 0, -1);
    uvs[20] = new Vector2(1, 0);
    uvs[21] = new Vector2(0, 0);
    uvs[22] = new Vector2(0, 1);
    uvs[23] = new Vector2(1, 1);
    var indices = new Uint16Array(36);
    indices[0] = 0, indices[1] = 2, indices[2] = 1, indices[3] = 2, indices[4] = 0, indices[5] = 3, // Down
    indices[6] = 4, indices[7] = 6, indices[8] = 7, indices[9] = 6, indices[10] = 4, indices[11] = 5, // Left
    indices[12] = 8, indices[13] = 10, indices[14] = 9, indices[15] = 10, indices[16] = 8, indices[17] = 11, // Right
    indices[18] = 12, indices[19] = 14, indices[20] = 15, indices[21] = 14, indices[22] = 12, indices[23] = 13, // Front
    indices[24] = 16, indices[25] = 18, indices[26] = 17, indices[27] = 18, indices[28] = 16, indices[29] = 19, // Back
    indices[30] = 20, indices[31] = 22, indices[32] = 23, indices[33] = 22, indices[34] = 20, indices[35] = 21;
    var bounds = mesh.bounds;
    bounds.min.set(-halfWidth, -halfHeight, -halfDepth);
    bounds.max.set(halfWidth, halfHeight, halfDepth);
    PrimitiveMesh2._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);
    return mesh;
  };
  PrimitiveMesh2.createPlane = function createPlane(engine, width, height, horizontalSegments, verticalSegments, noLongerAccessible) {
    if (width === void 0)
      width = 1;
    if (height === void 0)
      height = 1;
    if (horizontalSegments === void 0)
      horizontalSegments = 1;
    if (verticalSegments === void 0)
      verticalSegments = 1;
    if (noLongerAccessible === void 0)
      noLongerAccessible = true;
    var mesh = new ModelMesh(engine);
    horizontalSegments = Math.max(1, Math.floor(horizontalSegments));
    verticalSegments = Math.max(1, Math.floor(verticalSegments));
    var horizontalCount = horizontalSegments + 1;
    var verticalCount = verticalSegments + 1;
    var halfWidth = width / 2;
    var halfHeight = height / 2;
    var gridWidth = width / horizontalSegments;
    var gridHeight = height / verticalSegments;
    var vertexCount = horizontalCount * verticalCount;
    var rectangleCount = verticalSegments * horizontalSegments;
    var indices = PrimitiveMesh2._generateIndices(engine, vertexCount, rectangleCount * 6);
    var horizontalCountReciprocal = 1 / horizontalCount;
    var horizontalSegmentsReciprocal = 1 / horizontalSegments;
    var verticalSegmentsReciprocal = 1 / verticalSegments;
    var positions = new Array(vertexCount);
    var normals = new Array(vertexCount);
    var uvs = new Array(vertexCount);
    for (var i = 0; i < vertexCount; ++i) {
      var x = i % horizontalCount;
      var z = i * horizontalCountReciprocal | 0;
      positions[i] = new Vector3(x * gridWidth - halfWidth, 0, z * gridHeight - halfHeight);
      normals[i] = new Vector3(0, 1, 0);
      uvs[i] = new Vector2(x * horizontalSegmentsReciprocal, z * verticalSegmentsReciprocal);
    }
    var offset = 0;
    for (var i1 = 0; i1 < rectangleCount; ++i1) {
      var x1 = i1 % horizontalSegments;
      var y = i1 * horizontalSegmentsReciprocal | 0;
      var a = y * horizontalCount + x1;
      var b = a + 1;
      var c = a + horizontalCount;
      var d = c + 1;
      indices[offset++] = a;
      indices[offset++] = c;
      indices[offset++] = b;
      indices[offset++] = c;
      indices[offset++] = d;
      indices[offset++] = b;
    }
    var bounds = mesh.bounds;
    bounds.min.set(-halfWidth, 0, -halfHeight);
    bounds.max.set(halfWidth, 0, halfHeight);
    PrimitiveMesh2._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);
    return mesh;
  };
  PrimitiveMesh2.createCylinder = function createCylinder(engine, radiusTop, radiusBottom, height, radialSegments, heightSegments, noLongerAccessible) {
    if (radiusTop === void 0)
      radiusTop = 0.5;
    if (radiusBottom === void 0)
      radiusBottom = 0.5;
    if (height === void 0)
      height = 2;
    if (radialSegments === void 0)
      radialSegments = 20;
    if (heightSegments === void 0)
      heightSegments = 1;
    if (noLongerAccessible === void 0)
      noLongerAccessible = true;
    var mesh = new ModelMesh(engine);
    radialSegments = Math.floor(radialSegments);
    heightSegments = Math.floor(heightSegments);
    var radialCount = radialSegments + 1;
    var verticalCount = heightSegments + 1;
    var halfHeight = height * 0.5;
    var unitHeight = height / heightSegments;
    var torsoVertexCount = radialCount * verticalCount;
    var torsoRectangleCount = radialSegments * heightSegments;
    var capTriangleCount = radialSegments * 2;
    var totalVertexCount = torsoVertexCount + 2 + capTriangleCount;
    var indices = PrimitiveMesh2._generateIndices(engine, totalVertexCount, torsoRectangleCount * 6 + capTriangleCount * 3);
    var radialCountReciprocal = 1 / radialCount;
    var radialSegmentsReciprocal = 1 / radialSegments;
    var heightSegmentsReciprocal = 1 / heightSegments;
    var positions = new Array(totalVertexCount);
    var normals = new Array(totalVertexCount);
    var uvs = new Array(totalVertexCount);
    var indicesOffset = 0;
    var thetaStart = Math.PI;
    var thetaRange = Math.PI * 2;
    var radiusDiff = radiusBottom - radiusTop;
    var slope = radiusDiff / height;
    var radiusSlope = radiusDiff / heightSegments;
    for (var i = 0; i < torsoVertexCount; ++i) {
      var x = i % radialCount;
      var y = i * radialCountReciprocal | 0;
      var u = x * radialSegmentsReciprocal;
      var v = y * heightSegmentsReciprocal;
      var theta = thetaStart + u * thetaRange;
      var sinTheta = Math.sin(theta);
      var cosTheta = Math.cos(theta);
      var radius = radiusBottom - y * radiusSlope;
      var posX = radius * sinTheta;
      var posY = y * unitHeight - halfHeight;
      var posZ = radius * cosTheta;
      positions[i] = new Vector3(posX, posY, posZ);
      normals[i] = new Vector3(sinTheta, slope, cosTheta);
      uvs[i] = new Vector2(u, 1 - v);
    }
    for (var i1 = 0; i1 < torsoRectangleCount; ++i1) {
      var x1 = i1 % radialSegments;
      var y1 = i1 * radialSegmentsReciprocal | 0;
      var a = y1 * radialCount + x1;
      var b = a + 1;
      var c = a + radialCount;
      var d = c + 1;
      indices[indicesOffset++] = b;
      indices[indicesOffset++] = c;
      indices[indicesOffset++] = a;
      indices[indicesOffset++] = b;
      indices[indicesOffset++] = d;
      indices[indicesOffset++] = c;
    }
    positions[torsoVertexCount] = new Vector3(0, -halfHeight, 0);
    normals[torsoVertexCount] = new Vector3(0, -1, 0);
    uvs[torsoVertexCount] = new Vector2(0.5, 0.5);
    positions[torsoVertexCount + 1] = new Vector3(0, halfHeight, 0);
    normals[torsoVertexCount + 1] = new Vector3(0, 1, 0);
    uvs[torsoVertexCount + 1] = new Vector2(0.5, 0.5);
    var offset = torsoVertexCount + 2;
    var diameterTopReciprocal = 1 / (radiusTop * 2);
    var diameterBottomReciprocal = 1 / (radiusBottom * 2);
    var positionStride = radialCount * heightSegments;
    for (var i2 = 0; i2 < radialSegments; ++i2) {
      var curPosBottom = positions[i2];
      var curPosX = curPosBottom.x;
      var curPosZ = curPosBottom.z;
      positions[offset] = new Vector3(curPosX, -halfHeight, curPosZ);
      normals[offset] = new Vector3(0, -1, 0);
      uvs[offset++] = new Vector2(curPosX * diameterBottomReciprocal + 0.5, 0.5 - curPosZ * diameterBottomReciprocal);
      var curPosTop = positions[i2 + positionStride];
      curPosX = curPosTop.x;
      curPosZ = curPosTop.z;
      positions[offset] = new Vector3(curPosX, halfHeight, curPosZ);
      normals[offset] = new Vector3(0, 1, 0);
      uvs[offset++] = new Vector2(curPosX * diameterTopReciprocal + 0.5, curPosZ * diameterTopReciprocal + 0.5);
    }
    var topCapIndex = torsoVertexCount + 1;
    var bottomIndiceIndex = torsoVertexCount + 2;
    var topIndiceIndex = bottomIndiceIndex + 1;
    for (var i3 = 0; i3 < radialSegments; ++i3) {
      var firstStride = i3 * 2;
      var secondStride = i3 === radialSegments - 1 ? 0 : firstStride + 2;
      indices[indicesOffset++] = torsoVertexCount;
      indices[indicesOffset++] = bottomIndiceIndex + secondStride;
      indices[indicesOffset++] = bottomIndiceIndex + firstStride;
      indices[indicesOffset++] = topCapIndex;
      indices[indicesOffset++] = topIndiceIndex + firstStride;
      indices[indicesOffset++] = topIndiceIndex + secondStride;
    }
    var bounds = mesh.bounds;
    var radiusMax = Math.max(radiusTop, radiusBottom);
    bounds.min.set(-radiusMax, -halfHeight, -radiusMax);
    bounds.max.set(radiusMax, halfHeight, radiusMax);
    PrimitiveMesh2._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);
    return mesh;
  };
  PrimitiveMesh2.createTorus = function createTorus(engine, radius, tubeRadius, radialSegments, tubularSegments, arc, noLongerAccessible) {
    if (radius === void 0)
      radius = 0.5;
    if (tubeRadius === void 0)
      tubeRadius = 0.1;
    if (radialSegments === void 0)
      radialSegments = 30;
    if (tubularSegments === void 0)
      tubularSegments = 30;
    if (arc === void 0)
      arc = 360;
    if (noLongerAccessible === void 0)
      noLongerAccessible = true;
    var mesh = new ModelMesh(engine);
    radialSegments = Math.floor(radialSegments);
    tubularSegments = Math.floor(tubularSegments);
    var vertexCount = (radialSegments + 1) * (tubularSegments + 1);
    var rectangleCount = radialSegments * tubularSegments;
    var indices = PrimitiveMesh2._generateIndices(engine, vertexCount, rectangleCount * 6);
    var positions = new Array(vertexCount);
    var normals = new Array(vertexCount);
    var uvs = new Array(vertexCount);
    arc = arc / 180 * Math.PI;
    var offset = 0;
    for (var i = 0; i <= radialSegments; i++) {
      for (var j = 0; j <= tubularSegments; j++) {
        var u = j / tubularSegments * arc;
        var v = i / radialSegments * Math.PI * 2;
        var cosV = Math.cos(v);
        var sinV = Math.sin(v);
        var cosU = Math.cos(u);
        var sinU = Math.sin(u);
        var position = new Vector3((radius + tubeRadius * cosV) * cosU, (radius + tubeRadius * cosV) * sinU, tubeRadius * sinV);
        positions[offset] = position;
        var centerX = radius * cosU;
        var centerY = radius * sinU;
        normals[offset] = new Vector3(position.x - centerX, position.y - centerY, position.z).normalize();
        uvs[offset++] = new Vector2(j / tubularSegments, i / radialSegments);
      }
    }
    offset = 0;
    for (var i1 = 1; i1 <= radialSegments; i1++) {
      for (var j1 = 1; j1 <= tubularSegments; j1++) {
        var a = (tubularSegments + 1) * i1 + j1 - 1;
        var b = (tubularSegments + 1) * (i1 - 1) + j1 - 1;
        var c = (tubularSegments + 1) * (i1 - 1) + j1;
        var d = (tubularSegments + 1) * i1 + j1;
        indices[offset++] = a;
        indices[offset++] = b;
        indices[offset++] = d;
        indices[offset++] = b;
        indices[offset++] = c;
        indices[offset++] = d;
      }
    }
    var bounds = mesh.bounds;
    var outerRadius = radius + tubeRadius;
    bounds.min.set(-outerRadius, -outerRadius, -tubeRadius);
    bounds.max.set(outerRadius, outerRadius, tubeRadius);
    PrimitiveMesh2._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);
    return mesh;
  };
  PrimitiveMesh2.createCone = function createCone(engine, radius, height, radialSegments, heightSegments, noLongerAccessible) {
    if (radius === void 0)
      radius = 0.5;
    if (height === void 0)
      height = 2;
    if (radialSegments === void 0)
      radialSegments = 20;
    if (heightSegments === void 0)
      heightSegments = 1;
    if (noLongerAccessible === void 0)
      noLongerAccessible = true;
    var mesh = new ModelMesh(engine);
    radialSegments = Math.floor(radialSegments);
    heightSegments = Math.floor(heightSegments);
    var radialCount = radialSegments + 1;
    var verticalCount = heightSegments + 1;
    var halfHeight = height * 0.5;
    var unitHeight = height / heightSegments;
    var torsoVertexCount = radialCount * verticalCount;
    var torsoRectangleCount = radialSegments * heightSegments;
    var totalVertexCount = torsoVertexCount + 1 + radialSegments;
    var indices = PrimitiveMesh2._generateIndices(engine, totalVertexCount, torsoRectangleCount * 6 + radialSegments * 3);
    var radialCountReciprocal = 1 / radialCount;
    var radialSegmentsReciprocal = 1 / radialSegments;
    var heightSegmentsReciprocal = 1 / heightSegments;
    var positions = new Array(totalVertexCount);
    var normals = new Array(totalVertexCount);
    var uvs = new Array(totalVertexCount);
    var indicesOffset = 0;
    var thetaStart = Math.PI;
    var thetaRange = Math.PI * 2;
    var slope = radius / height;
    for (var i = 0; i < torsoVertexCount; ++i) {
      var x = i % radialCount;
      var y = i * radialCountReciprocal | 0;
      var u = x * radialSegmentsReciprocal;
      var v = y * heightSegmentsReciprocal;
      var theta = thetaStart + u * thetaRange;
      var sinTheta = Math.sin(theta);
      var cosTheta = Math.cos(theta);
      var curRadius = radius - y * radius;
      var posX = curRadius * sinTheta;
      var posY = y * unitHeight - halfHeight;
      var posZ = curRadius * cosTheta;
      positions[i] = new Vector3(posX, posY, posZ);
      normals[i] = new Vector3(sinTheta, slope, cosTheta);
      uvs[i] = new Vector2(u, 1 - v);
    }
    for (var i1 = 0; i1 < torsoRectangleCount; ++i1) {
      var x1 = i1 % radialSegments;
      var y1 = i1 * radialSegmentsReciprocal | 0;
      var a = y1 * radialCount + x1;
      var b = a + 1;
      var c = a + radialCount;
      var d = c + 1;
      indices[indicesOffset++] = b;
      indices[indicesOffset++] = c;
      indices[indicesOffset++] = a;
      indices[indicesOffset++] = b;
      indices[indicesOffset++] = d;
      indices[indicesOffset++] = c;
    }
    positions[torsoVertexCount] = new Vector3(0, -halfHeight, 0);
    normals[torsoVertexCount] = new Vector3(0, -1, 0);
    uvs[torsoVertexCount] = new Vector2(0.5, 0.5);
    var offset = torsoVertexCount + 1;
    var diameterBottomReciprocal = 1 / (radius * 2);
    for (var i2 = 0; i2 < radialSegments; ++i2) {
      var curPos = positions[i2];
      var curPosX = curPos.x;
      var curPosZ = curPos.z;
      positions[offset] = new Vector3(curPosX, -halfHeight, curPosZ);
      normals[offset] = new Vector3(0, -1, 0);
      uvs[offset++] = new Vector2(curPosX * diameterBottomReciprocal + 0.5, 0.5 - curPosZ * diameterBottomReciprocal);
    }
    var bottomIndiceIndex = torsoVertexCount + 1;
    for (var i3 = 0; i3 < radialSegments; ++i3) {
      var firstStride = i3;
      var secondStride = i3 === radialSegments - 1 ? 0 : firstStride + 1;
      indices[indicesOffset++] = torsoVertexCount;
      indices[indicesOffset++] = bottomIndiceIndex + secondStride;
      indices[indicesOffset++] = bottomIndiceIndex + firstStride;
    }
    var bounds = mesh.bounds;
    bounds.min.set(-radius, -halfHeight, -radius);
    bounds.max.set(radius, halfHeight, radius);
    PrimitiveMesh2._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);
    return mesh;
  };
  PrimitiveMesh2.createCapsule = function createCapsule(engine, radius, height, radialSegments, heightSegments, noLongerAccessible) {
    if (radius === void 0)
      radius = 0.5;
    if (height === void 0)
      height = 2;
    if (radialSegments === void 0)
      radialSegments = 6;
    if (heightSegments === void 0)
      heightSegments = 1;
    if (noLongerAccessible === void 0)
      noLongerAccessible = true;
    var mesh = new ModelMesh(engine);
    radialSegments = Math.max(2, Math.floor(radialSegments));
    heightSegments = Math.floor(heightSegments);
    var radialCount = radialSegments + 1;
    var verticalCount = heightSegments + 1;
    var halfHeight = height * 0.5;
    var unitHeight = height / heightSegments;
    var torsoVertexCount = radialCount * verticalCount;
    var torsoRectangleCount = radialSegments * heightSegments;
    var capVertexCount = radialCount * radialCount;
    var capRectangleCount = radialSegments * radialSegments;
    var totalVertexCount = torsoVertexCount + 2 * capVertexCount;
    var indices = PrimitiveMesh2._generateIndices(engine, totalVertexCount, (torsoRectangleCount + 2 * capRectangleCount) * 6);
    var radialCountReciprocal = 1 / radialCount;
    var radialSegmentsReciprocal = 1 / radialSegments;
    var heightSegmentsReciprocal = 1 / heightSegments;
    var thetaStart = Math.PI;
    var thetaRange = Math.PI * 2;
    var positions = new Array(totalVertexCount);
    var normals = new Array(totalVertexCount);
    var uvs = new Array(totalVertexCount);
    var indicesOffset = 0;
    for (var i = 0; i < torsoVertexCount; ++i) {
      var x = i % radialCount;
      var y = i * radialCountReciprocal | 0;
      var u = x * radialSegmentsReciprocal;
      var v = y * heightSegmentsReciprocal;
      var theta = thetaStart + u * thetaRange;
      var sinTheta = Math.sin(theta);
      var cosTheta = Math.cos(theta);
      positions[i] = new Vector3(radius * sinTheta, y * unitHeight - halfHeight, radius * cosTheta);
      normals[i] = new Vector3(sinTheta, 0, cosTheta);
      uvs[i] = new Vector2(u, 1 - v);
    }
    for (var i1 = 0; i1 < torsoRectangleCount; ++i1) {
      var x1 = i1 % radialSegments;
      var y1 = i1 * radialSegmentsReciprocal | 0;
      var a = y1 * radialCount + x1;
      var b = a + 1;
      var c = a + radialCount;
      var d = c + 1;
      indices[indicesOffset++] = b;
      indices[indicesOffset++] = c;
      indices[indicesOffset++] = a;
      indices[indicesOffset++] = b;
      indices[indicesOffset++] = d;
      indices[indicesOffset++] = c;
    }
    PrimitiveMesh2._createCapsuleCap(radius, height, radialSegments, thetaRange, torsoVertexCount, 1, positions, normals, uvs, indices, indicesOffset);
    PrimitiveMesh2._createCapsuleCap(radius, height, radialSegments, -thetaRange, torsoVertexCount + capVertexCount, -1, positions, normals, uvs, indices, indicesOffset + 6 * capRectangleCount);
    var bounds = mesh.bounds;
    bounds.min.set(-radius, -radius - halfHeight, -radius);
    bounds.max.set(radius, radius + halfHeight, radius);
    PrimitiveMesh2._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);
    return mesh;
  };
  PrimitiveMesh2._initialize = function _initialize(mesh, positions, normals, uvs, indices, noLongerAccessible) {
    mesh.setPositions(positions);
    mesh.setNormals(normals);
    mesh.setUVs(uvs);
    mesh.setIndices(indices);
    mesh.calculateTangents();
    mesh.uploadData(noLongerAccessible);
    mesh.addSubMesh(0, indices.length);
  };
  PrimitiveMesh2._generateIndices = function _generateIndices(engine, vertexCount, indexCount) {
    var indices = null;
    if (vertexCount > 65535) {
      if (engine._hardwareRenderer.canIUse(GLCapabilityType.elementIndexUint)) {
        indices = new Uint32Array(indexCount);
      } else {
        throw Error("The vertex count is over limit.");
      }
    } else {
      indices = new Uint16Array(indexCount);
    }
    return indices;
  };
  PrimitiveMesh2._createCapsuleCap = function _createCapsuleCap(radius, height, radialSegments, capAlphaRange, offset, posIndex, positions, normals, uvs, indices, indicesOffset) {
    var radialCount = radialSegments + 1;
    var halfHeight = height * 0.5 * posIndex;
    var capVertexCount = radialCount * radialCount;
    var capRectangleCount = radialSegments * radialSegments;
    var radialCountReciprocal = 1 / radialCount;
    var radialSegmentsReciprocal = 1 / radialSegments;
    for (var i = 0; i < capVertexCount; ++i) {
      var x = i % radialCount;
      var y = i * radialCountReciprocal | 0;
      var u = x * radialSegmentsReciprocal;
      var v = y * radialSegmentsReciprocal;
      var alphaDelta = u * capAlphaRange;
      var thetaDelta = v * Math.PI / 2;
      var sinTheta = Math.sin(thetaDelta);
      var posX = -radius * Math.cos(alphaDelta) * sinTheta;
      var posY = radius * Math.cos(thetaDelta) * posIndex + halfHeight;
      var posZ = radius * Math.sin(alphaDelta) * sinTheta;
      var index = i + offset;
      positions[index] = new Vector3(posX, posY, posZ);
      normals[index] = new Vector3(posX, posY - halfHeight, posZ);
      uvs[index] = new Vector2(u, v);
    }
    for (var i1 = 0; i1 < capRectangleCount; ++i1) {
      var x1 = i1 % radialSegments;
      var y1 = i1 * radialSegmentsReciprocal | 0;
      var a = y1 * radialCount + x1 + offset;
      var b = a + 1;
      var c = a + radialCount;
      var d = c + 1;
      indices[indicesOffset++] = b;
      indices[indicesOffset++] = a;
      indices[indicesOffset++] = d;
      indices[indicesOffset++] = a;
      indices[indicesOffset++] = c;
      indices[indicesOffset++] = d;
    }
  };
  return PrimitiveMesh2;
}();
var BufferMesh = function(Mesh2) {
  _inherits(BufferMesh2, Mesh2);
  function BufferMesh2() {
    return Mesh2.apply(this, arguments);
  }
  var _proto = BufferMesh2.prototype;
  _proto.setVertexElements = function setVertexElements(elements) {
    this._setVertexElements(elements);
  };
  _proto.setVertexBufferBinding = function setVertexBufferBinding(bufferOrBinding, strideOrFirstIndex, index) {
    if (strideOrFirstIndex === void 0)
      strideOrFirstIndex = 0;
    if (index === void 0)
      index = 0;
    var binding = bufferOrBinding;
    var isBinding = binding.buffer !== void 0;
    isBinding || (binding = new VertexBufferBinding(bufferOrBinding, strideOrFirstIndex));
    var bindings = this._vertexBufferBindings;
    bindings.length <= index && (bindings.length = index + 1);
    this._setVertexBufferBinding(isBinding ? strideOrFirstIndex : index, binding);
  };
  _proto.setVertexBufferBindings = function setVertexBufferBindings(vertexBufferBindings, firstIndex) {
    if (firstIndex === void 0)
      firstIndex = 0;
    var bindings = this._vertexBufferBindings;
    var count = vertexBufferBindings.length;
    var needLength = firstIndex + count;
    bindings.length < needLength && (bindings.length = needLength);
    for (var i = 0; i < count; i++) {
      this._setVertexBufferBinding(firstIndex + i, vertexBufferBindings[i]);
    }
  };
  _proto.setIndexBufferBinding = function setIndexBufferBinding(bufferOrBinding, format) {
    var binding = bufferOrBinding;
    if (binding) {
      var isBinding = binding.buffer !== void 0;
      isBinding || (binding = new IndexBufferBinding(bufferOrBinding, format));
    }
    this._setIndexBufferBinding(binding);
  };
  _create_class2(BufferMesh2, [
    {
      key: "instanceCount",
      get: (
        /**
        * Instanced count, disable instanced drawing when set zero.
        */
        function get() {
          return this._instanceCount;
        }
      ),
      set: function set(value) {
        this._instanceCount = value;
      }
    },
    {
      key: "vertexBufferBindings",
      get: (
        /**
        * Vertex buffer binding collection.
        */
        function get() {
          return this._vertexBufferBindings;
        }
      )
    },
    {
      key: "indexBufferBinding",
      get: (
        /**
        * Index buffer binding.
        */
        function get() {
          return this._indexBufferBinding;
        }
      )
    },
    {
      key: "vertexElements",
      get: (
        /**
        * Vertex element collection.
        */
        function get() {
          return this._vertexElements;
        }
      )
    }
  ]);
  return BufferMesh2;
}(Mesh);
var BlendShapeFrame = function BlendShapeFrame2(weight, deltaPositions, deltaNormals, deltaTangents) {
  if (deltaNormals === void 0)
    deltaNormals = null;
  if (deltaTangents === void 0)
    deltaTangents = null;
  if (deltaNormals && deltaNormals.length !== deltaPositions.length) {
    throw "deltaNormals length must same with deltaPositions length.";
  }
  if (deltaTangents && deltaTangents.length !== deltaPositions.length) {
    throw "deltaTangents length must same with deltaPositions length.";
  }
  this.weight = weight;
  this.deltaPositions = deltaPositions;
  this.deltaNormals = deltaNormals;
  this.deltaTangents = deltaTangents;
};
var BlendShape = function() {
  function BlendShape2(name) {
    this._useBlendShapeNormal = true;
    this._useBlendShapeTangent = true;
    this._layoutChangeManager = new UpdateFlagManager();
    this._dataChangeManager = new UpdateFlagManager();
    this._frames = [];
    this.name = name;
  }
  var _proto = BlendShape2.prototype;
  _proto.addFrame = function addFrame(frameOrWeight, deltaPositions, deltaNormals, deltaTangents) {
    if (typeof frameOrWeight === "number") {
      var frame = new BlendShapeFrame(frameOrWeight, deltaPositions, deltaNormals, deltaTangents);
      this._addFrame(frame);
      return frame;
    } else {
      this._addFrame(frameOrWeight);
    }
  };
  _proto.clearFrames = function clearFrames() {
    this._frames.length = 0;
    this._updateUseNormalAndTangent(true, true);
    this._dataChangeManager.dispatch();
  };
  _proto._addDataDirtyFlag = function _addDataDirtyFlag(flag) {
    this._dataChangeManager.addFlag(flag);
  };
  _proto._createSubDataDirtyFlag = function _createSubDataDirtyFlag() {
    return this._dataChangeManager.createFlag(BoolUpdateFlag);
  };
  _proto._addFrame = function _addFrame(frame) {
    var frames = this._frames;
    var frameCount = frames.length;
    if (frameCount > 0 && frame.deltaPositions.length !== frames[frameCount - 1].deltaPositions.length) {
      throw "Frame's deltaPositions length must same with before frame deltaPositions length.";
    }
    this._frames.push(frame);
    this._updateUseNormalAndTangent(!!frame.deltaNormals, !!frame.deltaTangents);
    this._dataChangeManager.dispatch();
  };
  _proto._updateUseNormalAndTangent = function _updateUseNormalAndTangent(useNormal, useTangent) {
    var useBlendShapeNormal = this._useBlendShapeNormal && useNormal;
    var useBlendShapeTangent = this._useBlendShapeTangent && useTangent;
    if (this._useBlendShapeNormal !== useBlendShapeNormal || this._useBlendShapeTangent !== useBlendShapeTangent) {
      this._useBlendShapeNormal = useBlendShapeNormal;
      this._useBlendShapeTangent = useBlendShapeTangent;
      this._layoutChangeManager.dispatch(0, this);
    }
  };
  _create_class2(BlendShape2, [
    {
      key: "frames",
      get: (
        /**
        * Frames of BlendShape.
        */
        function get() {
          return this._frames;
        }
      )
    }
  ]);
  return BlendShape2;
}();
var Basic2DBatcher = function() {
  function Basic2DBatcher2(engine) {
    this._subMeshPool = new ClassPool(SubMesh);
    this._batchedQueue = [];
    this._meshes = [];
    this._meshCount = 1;
    this._vertexBuffers = [];
    this._indiceBuffers = [];
    this._flushId = 0;
    this._vertexCount = 0;
    this._elementCount = 0;
    this._engine = engine;
    var MAX_VERTEX_COUNT = Basic2DBatcher2.MAX_VERTEX_COUNT;
    this._vertices = new Float32Array(MAX_VERTEX_COUNT * 9);
    this._indices = new Uint16Array(MAX_VERTEX_COUNT * 3);
    var _this = this, _meshes = _this._meshes, _meshCount = _this._meshCount;
    for (var i = 0; i < _meshCount; i++) {
      _meshes[i] = this._createMesh(engine, i);
    }
  }
  var _proto = Basic2DBatcher2.prototype;
  _proto.drawElement = function drawElement(element, camera, replaceMaterial) {
    if (element.multiRenderData) {
      var elements = element.charElements;
      for (var i = 0, n = elements.length; i < n; ++i) {
        this._drawSubElement(elements[i], camera, replaceMaterial);
      }
    } else {
      this._drawSubElement(element, camera, replaceMaterial);
    }
  };
  _proto._drawSubElement = function _drawSubElement(element, camera, replaceMaterial) {
    var len = element.renderData.vertexCount;
    if (this._vertexCount + len > Basic2DBatcher2.MAX_VERTEX_COUNT) {
      this.flush(camera, replaceMaterial);
    }
    this._vertexCount += len;
    this._batchedQueue[this._elementCount++] = element;
  };
  _proto.flush = function flush(camera, replaceMaterial) {
    var batchedQueue = this._batchedQueue;
    if (batchedQueue.length === 0) {
      return;
    }
    this._updateData(this._engine);
    this.drawBatches(camera, replaceMaterial);
    if (!Basic2DBatcher2._canUploadSameBuffer) {
      this._flushId++;
    }
    batchedQueue.length = 0;
    this._subMeshPool.resetPool();
    this._vertexCount = 0;
    this._elementCount = 0;
  };
  _proto.clear = function clear() {
    this._flushId = 0;
    this._vertexCount = 0;
    this._elementCount = 0;
    this._batchedQueue.length = 0;
  };
  _proto.destroy = function destroy() {
    this._batchedQueue = null;
    var _this = this, meshes = _this._meshes, vertexBuffers = _this._vertexBuffers, indiceBuffers = _this._indiceBuffers;
    for (var i = 0, n = meshes.length; i < n; ++i) {
      meshes[i].destroy();
    }
    this._meshes = null;
    for (var i1 = 0, n1 = vertexBuffers.length; i1 < n1; ++i1) {
      vertexBuffers[i1].destroy();
    }
    this._vertexBuffers = null;
    for (var i2 = 0, n2 = indiceBuffers.length; i2 < n2; ++i2) {
      indiceBuffers[i2].destroy();
    }
    this._indiceBuffers = null;
  };
  _proto._createMesh = function _createMesh(engine, index) {
    var MAX_VERTEX_COUNT = Basic2DBatcher2.MAX_VERTEX_COUNT;
    var mesh = new BufferMesh(engine, "BufferMesh" + index);
    var vertexElements = [];
    var vertexStride = this.createVertexElements(vertexElements);
    this._vertexBuffers[index] = new Buffer(engine, BufferBindFlag.VertexBuffer, MAX_VERTEX_COUNT * 4 * vertexStride, BufferUsage.Dynamic);
    this._indiceBuffers[index] = new Buffer(engine, BufferBindFlag.IndexBuffer, MAX_VERTEX_COUNT * 2 * 3, BufferUsage.Dynamic);
    mesh.setVertexBufferBinding(this._vertexBuffers[index], vertexStride);
    mesh.setIndexBufferBinding(this._indiceBuffers[index], IndexFormat.UInt16);
    mesh.setVertexElements(vertexElements);
    return mesh;
  };
  _proto._updateData = function _updateData(engine) {
    var _this = this, _meshes = _this._meshes, _flushId = _this._flushId;
    if (!Basic2DBatcher2._canUploadSameBuffer && this._meshCount <= _flushId) {
      this._meshCount++;
      _meshes[_flushId] = this._createMesh(engine, _flushId);
    }
    var _this1 = this, batchedQueue = _this1._batchedQueue, vertices = _this1._vertices, indices = _this1._indices;
    var mesh = _meshes[_flushId];
    mesh.clearSubMesh();
    var vertexIndex = 0;
    var indiceIndex = 0;
    var vertexStartIndex = 0;
    var vertexCount = 0;
    var curIndiceStartIndex = 0;
    var curMeshIndex = 0;
    var preElement = null;
    for (var i = 0, len = batchedQueue.length; i < len; i++) {
      var curElement = batchedQueue[i];
      vertexIndex = this.updateVertices(curElement, vertices, vertexIndex);
      var triangles = curElement.renderData.triangles;
      var triangleNum = triangles.length;
      for (var j = 0; j < triangleNum; j++) {
        indices[indiceIndex++] = triangles[j] + curIndiceStartIndex;
      }
      curIndiceStartIndex += curElement.renderData.vertexCount;
      if (preElement === null) {
        vertexCount += triangleNum;
      } else {
        if (this.canBatch(preElement, curElement)) {
          vertexCount += triangleNum;
        } else {
          mesh.addSubMesh(this._getSubMeshFromPool(vertexStartIndex, vertexCount));
          vertexStartIndex += vertexCount;
          vertexCount = triangleNum;
          batchedQueue[curMeshIndex++] = preElement;
        }
      }
      preElement = curElement;
    }
    mesh.addSubMesh(this._getSubMeshFromPool(vertexStartIndex, vertexCount));
    batchedQueue[curMeshIndex] = preElement;
    this._vertexBuffers[_flushId].setData(vertices, 0, 0, vertexIndex);
    this._indiceBuffers[_flushId].setData(indices, 0, 0, indiceIndex);
  };
  _proto._getSubMeshFromPool = function _getSubMeshFromPool(start, count) {
    var subMesh = this._subMeshPool.getFromPool();
    subMesh.start = start;
    subMesh.count = count;
    subMesh.topology = MeshTopology.Triangles;
    return subMesh;
  };
  return Basic2DBatcher2;
}();
(function() {
  Basic2DBatcher.MAX_VERTEX_COUNT = 4096;
})();
(function() {
  Basic2DBatcher._canUploadSameBuffer = true;
})();
var SpriteMaskBatcher = function(Basic2DBatcher2) {
  _inherits(SpriteMaskBatcher2, Basic2DBatcher2);
  function SpriteMaskBatcher2() {
    return Basic2DBatcher2.apply(this, arguments);
  }
  var _proto = SpriteMaskBatcher2.prototype;
  _proto.createVertexElements = function createVertexElements(vertexElements) {
    vertexElements[0] = new VertexElement("POSITION", 0, VertexElementFormat.Vector3, 0);
    vertexElements[1] = new VertexElement("TEXCOORD_0", 12, VertexElementFormat.Vector2, 0);
    return 20;
  };
  _proto.canBatch = function canBatch(preElement, curElement) {
    if (preElement.isAdd !== curElement.isAdd) {
      return false;
    }
    var preShaderData = preElement.component.shaderData;
    var curShaderData = curElement.component.shaderData;
    var textureProperty = SpriteMask._textureProperty;
    var alphaCutoffProperty = SpriteMask._alphaCutoffProperty;
    return preShaderData.getTexture(textureProperty) === curShaderData.getTexture(textureProperty) && preShaderData.getTexture(alphaCutoffProperty) === curShaderData.getTexture(alphaCutoffProperty);
  };
  _proto.updateVertices = function updateVertices(element, vertices, vertexIndex) {
    var _element_renderData = element.renderData, positions = _element_renderData.positions, uvs = _element_renderData.uvs, vertexCount = _element_renderData.vertexCount;
    for (var i = 0; i < vertexCount; i++) {
      var curPos = positions[i];
      var curUV = uvs[i];
      vertices[vertexIndex++] = curPos.x;
      vertices[vertexIndex++] = curPos.y;
      vertices[vertexIndex++] = curPos.z;
      vertices[vertexIndex++] = curUV.x;
      vertices[vertexIndex++] = curUV.y;
    }
    return vertexIndex;
  };
  _proto.drawBatches = function drawBatches(camera) {
    var _this = this, engine = _this._engine, batchedQueue = _this._batchedQueue;
    var mesh = this._meshes[this._flushId];
    var subMeshes = mesh.subMeshes;
    var sceneData = camera.scene.shaderData;
    var cameraData = camera.shaderData;
    for (var i = 0, len = subMeshes.length; i < len; i++) {
      var subMesh = subMeshes[i];
      var spriteMaskElement = batchedQueue[i];
      if (!subMesh || !spriteMaskElement) {
        return;
      }
      var renderer = spriteMaskElement.component;
      var material = spriteMaskElement.material;
      var compileMacros = Shader._compileMacros;
      ShaderMacroCollection.unionCollection(renderer._globalShaderMacro, material.shaderData._macroCollection, compileMacros);
      var stencilState = material.renderState.stencilState;
      var op = spriteMaskElement.isAdd ? StencilOperation.IncrementSaturate : StencilOperation.DecrementSaturate;
      stencilState.passOperationFront = op;
      stencilState.passOperationBack = op;
      var program = material.shader.passes[0]._getShaderProgram(engine, compileMacros);
      if (!program.isValid) {
        return;
      }
      program.bind();
      program.groupingOtherUniformBlock();
      program.uploadAll(program.sceneUniformBlock, sceneData);
      program.uploadAll(program.cameraUniformBlock, cameraData);
      program.uploadAll(program.rendererUniformBlock, renderer.shaderData);
      program.uploadAll(program.materialUniformBlock, material.shaderData);
      material.renderState._apply(engine, false);
      engine._hardwareRenderer.drawPrimitive(mesh, subMesh, program);
    }
  };
  return SpriteMaskBatcher2;
}(Basic2DBatcher);
var SpriteMaskManager = function() {
  function SpriteMaskManager2(engine) {
    this._preMaskLayer = 0;
    this._batcher = new SpriteMaskBatcher(engine);
  }
  var _proto = SpriteMaskManager2.prototype;
  _proto.clear = function clear() {
    this._preMaskLayer = 0;
    this._batcher.clear();
  };
  _proto.preRender = function preRender(camera, renderer) {
    if (renderer.maskInteraction === SpriteMaskInteraction.None) {
      return;
    }
    this._batcher.clear();
    this._processMasksDiff(camera, renderer);
    this._batcher.flush(camera, null);
  };
  _proto.postRender = function postRender(renderer) {
    if (renderer.maskInteraction === SpriteMaskInteraction.None) {
      return;
    }
    this._preMaskLayer = renderer.maskLayer;
  };
  _proto.destroy = function destroy() {
    this._batcher.destroy();
    this._batcher = null;
  };
  _proto._processMasksDiff = function _processMasksDiff(camera, renderer) {
    var preMaskLayer = this._preMaskLayer;
    var curMaskLayer = renderer.maskLayer;
    if (preMaskLayer !== curMaskLayer) {
      var allMasks = camera._renderPipeline._allSpriteMasks;
      var commonLayer = preMaskLayer & curMaskLayer;
      var addLayer = curMaskLayer & ~preMaskLayer;
      var reduceLayer = preMaskLayer & ~curMaskLayer;
      var allMaskElements = allMasks._elements;
      for (var i = 0, n = allMasks.length; i < n; i++) {
        var mask = allMaskElements[i];
        var influenceLayers = mask.influenceLayers;
        if (influenceLayers & commonLayer) {
          continue;
        }
        if (influenceLayers & addLayer) {
          var maskRenderElement = mask._maskElement;
          maskRenderElement.isAdd = true;
          this._batcher.drawElement(maskRenderElement, camera, null);
          continue;
        }
        if (influenceLayers & reduceLayer) {
          var maskRenderElement1 = mask._maskElement;
          maskRenderElement1.isAdd = false;
          this._batcher.drawElement(maskRenderElement1, camera, null);
        }
      }
    }
  };
  return SpriteMaskManager2;
}();
var TextRenderElement = function(RenderElement3) {
  _inherits(TextRenderElement2, RenderElement3);
  function TextRenderElement2() {
    var _this;
    _this = RenderElement3.call(this) || this;
    _this.charElements = [];
    _this.multiRenderData = true;
    return _this;
  }
  return TextRenderElement2;
}(RenderElement);
var BackgroundMode;
(function(BackgroundMode2) {
  BackgroundMode2[BackgroundMode2[
    /* Solid color. */
    "SolidColor"
  ] = 0] = "SolidColor";
  BackgroundMode2[BackgroundMode2[
    /* Sky. */
    "Sky"
  ] = 1] = "Sky";
  BackgroundMode2[BackgroundMode2[
    /** Texture */
    "Texture"
  ] = 2] = "Texture";
})(BackgroundMode || (BackgroundMode = {}));
var BackgroundTextureFillMode;
(function(BackgroundTextureFillMode2) {
  BackgroundTextureFillMode2[BackgroundTextureFillMode2[
    /* Maintain the aspect ratio and scale the texture to fit the width of the canvas. */
    "AspectFitWidth"
  ] = 0] = "AspectFitWidth";
  BackgroundTextureFillMode2[BackgroundTextureFillMode2[
    /* Maintain the aspect ratio and scale the texture to fit the height of the canvas. */
    "AspectFitHeight"
  ] = 1] = "AspectFitHeight";
  BackgroundTextureFillMode2[BackgroundTextureFillMode2[
    /* Scale the texture fully fills the canvas. */
    "Fill"
  ] = 2] = "Fill";
})(BackgroundTextureFillMode || (BackgroundTextureFillMode = {}));
var Sky = function() {
  function Sky2() {
  }
  var _proto = Sky2.prototype;
  _proto._render = function _render(context) {
    var _this = this, material = _this.material, mesh = _this.mesh;
    if (!material) {
      Logger.warn("The material of sky is not defined.");
      return;
    }
    if (!mesh) {
      Logger.warn("The mesh of sky is not defined.");
      return;
    }
    var _context_camera = context.camera, engine = _context_camera.engine, aspectRatio = _context_camera.aspectRatio, fieldOfView = _context_camera.fieldOfView, viewMatrix = _context_camera.viewMatrix, cameraShaderData = _context_camera.shaderData;
    var viewProjMatrix = Sky2._viewProjMatrix, projectionMatrix = Sky2._projectionMatrix;
    var rhi = engine._hardwareRenderer;
    var materialShaderData = material.shaderData, shader = material.shader, renderState = material.renderState;
    viewProjMatrix.copyFrom(viewMatrix);
    var e = viewProjMatrix.elements;
    e[12] = e[13] = e[14] = 0;
    var f = 1 / Math.tan(MathUtil.degreeToRadian(fieldOfView) / 2);
    projectionMatrix.elements[0] = f / aspectRatio;
    projectionMatrix.elements[5] = f;
    Matrix.multiply(projectionMatrix, viewProjMatrix, viewProjMatrix);
    var originViewProjMatrix = cameraShaderData.getMatrix(RenderContext._vpMatrixProperty);
    cameraShaderData.setMatrix(RenderContext._vpMatrixProperty, viewProjMatrix);
    var compileMacros = Shader._compileMacros;
    ShaderMacroCollection.unionCollection(context.camera._globalShaderMacro, materialShaderData._macroCollection, compileMacros);
    var program = shader.passes[0]._getShaderProgram(engine, compileMacros);
    program.bind();
    program.groupingOtherUniformBlock();
    program.uploadAll(program.cameraUniformBlock, cameraShaderData);
    program.uploadAll(program.materialUniformBlock, materialShaderData);
    program.uploadUnGroupTextures();
    renderState._apply(engine, false);
    rhi.drawPrimitive(mesh, mesh.subMesh, program);
    cameraShaderData.setMatrix(RenderContext._vpMatrixProperty, originViewProjMatrix);
  };
  return Sky2;
}();
(function() {
  Sky._epsilon = 1e-6;
})();
(function() {
  Sky._viewProjMatrix = new Matrix();
})();
(function() {
  Sky._projectionMatrix = new Matrix(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, Sky._epsilon - 1, -1, 0, 0, 0, 0);
})();
var Background = function() {
  function Background2(_engine) {
    this._engine = _engine;
    this.mode = BackgroundMode.SolidColor;
    this.solidColor = new Color(0.25, 0.25, 0.25, 1);
    this.sky = new Sky();
    this._textureFillMode = BackgroundTextureFillMode.AspectFitHeight;
    this._texture = null;
    this._mesh = this._createPlane(_engine);
  }
  var _proto = Background2.prototype;
  _proto._resizeBackgroundTexture = function _resizeBackgroundTexture() {
    if (!this._texture) {
      return;
    }
    var canvas = this._engine.canvas;
    var width = canvas.width, height = canvas.height;
    var _this = this, _backgroundTextureMesh = _this._mesh;
    var positions = _backgroundTextureMesh.getPositions();
    switch (this._textureFillMode) {
      case BackgroundTextureFillMode.Fill:
        positions[0].set(-1, -1, 1);
        positions[1].set(1, -1, 1);
        positions[2].set(-1, 1, 1);
        positions[3].set(1, 1, 1);
        break;
      case BackgroundTextureFillMode.AspectFitWidth:
        var fitWidthScale = this._texture.height * width / this.texture.width / height;
        positions[0].set(-1, -fitWidthScale, 1);
        positions[1].set(1, -fitWidthScale, 1);
        positions[2].set(-1, fitWidthScale, 1);
        positions[3].set(1, fitWidthScale, 1);
        break;
      case BackgroundTextureFillMode.AspectFitHeight:
        var fitHeightScale = this._texture.width * height / this.texture.height / width;
        positions[0].set(-fitHeightScale, -1, 1);
        positions[1].set(fitHeightScale, -1, 1);
        positions[2].set(-fitHeightScale, 1, 1);
        positions[3].set(fitHeightScale, 1, 1);
        break;
    }
    _backgroundTextureMesh.setPositions(positions);
    _backgroundTextureMesh.uploadData(false);
  };
  _proto._createPlane = function _createPlane(engine) {
    var mesh = new ModelMesh(engine);
    mesh.isGCIgnored = true;
    var indices = new Uint8Array([
      1,
      2,
      0,
      1,
      3,
      2
    ]);
    var positions = new Array(4);
    var uvs = new Array(4);
    for (var i = 0; i < 4; ++i) {
      positions[i] = new Vector3();
      uvs[i] = new Vector2(i % 2, 1 - (i * 0.5 | 0));
    }
    mesh.setPositions(positions);
    mesh.setUVs(uvs);
    mesh.setIndices(indices);
    mesh.uploadData(false);
    mesh.addSubMesh(0, indices.length);
    return mesh;
  };
  _create_class2(Background2, [
    {
      key: "texture",
      get: (
        /**
        * Background texture.
        * @remarks When `mode` is `BackgroundMode.Texture`, the property will take effects.
        */
        function get() {
          return this._texture;
        }
      ),
      set: function set(value) {
        if (this._texture !== value) {
          this._texture = value;
          this._engine._backgroundTextureMaterial.shaderData.setTexture("u_baseTexture", value);
        }
      }
    },
    {
      key: "textureFillMode",
      get: (
        /**
        * @internal
        * Background texture fill mode.
        * @remarks When `mode` is `BackgroundMode.Texture`, the property will take effects.
        * @defaultValue `BackgroundTextureFillMode.FitHeight`
        */
        function get() {
          return this._textureFillMode;
        }
      ),
      set: function set(value) {
        if (value !== this._textureFillMode) {
          this._textureFillMode = value;
          this._resizeBackgroundTexture();
        }
      }
    }
  ]);
  return Background2;
}();
var FogMode;
(function(FogMode2) {
  FogMode2[FogMode2[
    /** Disable fog. */
    "None"
  ] = 0] = "None";
  FogMode2[FogMode2[
    /** Linear fog. */
    "Linear"
  ] = 1] = "Linear";
  FogMode2[FogMode2[
    /** Exponential fog. */
    "Exponential"
  ] = 2] = "Exponential";
  FogMode2[FogMode2[
    /** Exponential squared fog. */
    "ExponentialSquared"
  ] = 3] = "ExponentialSquared";
})(FogMode || (FogMode = {}));
var DiffuseMode;
(function(DiffuseMode2) {
  DiffuseMode2[DiffuseMode2[
    /** Solid color mode. */
    "SolidColor"
  ] = 0] = "SolidColor";
  DiffuseMode2[DiffuseMode2[
    /**
    * SH mode
    * @remarks
    * Use SH3 to represent irradiance environment maps efficiently, allowing for interactive rendering of diffuse objects under distant illumination.
    */
    "SphericalHarmonics"
  ] = 1] = "SphericalHarmonics";
})(DiffuseMode || (DiffuseMode = {}));
var AmbientLight = function() {
  function AmbientLight2() {
    this._diffuseSolidColor = new Color(0.212, 0.227, 0.259);
    this._diffuseIntensity = 1;
    this._specularIntensity = 1;
    this._diffuseMode = DiffuseMode.SolidColor;
    this._shArray = new Float32Array(27);
    this._scenes = [];
    this._specularTextureDecodeRGBM = false;
  }
  var _proto = AmbientLight2.prototype;
  _proto._addToScene = function _addToScene(scene) {
    this._scenes.push(scene);
    var shaderData = scene.shaderData;
    shaderData.setColor(AmbientLight2._diffuseColorProperty, this._diffuseSolidColor);
    shaderData.setFloat(AmbientLight2._diffuseIntensityProperty, this._diffuseIntensity);
    shaderData.setFloat(AmbientLight2._specularIntensityProperty, this._specularIntensity);
    shaderData.setFloatArray(AmbientLight2._diffuseSHProperty, this._shArray);
    this._setDiffuseMode(shaderData);
    this._setSpecularTextureDecodeRGBM(shaderData);
    this._setSpecularTexture(shaderData);
  };
  _proto._removeFromScene = function _removeFromScene(scene) {
    var scenes = this._scenes;
    var index = scenes.indexOf(scene);
    scenes.splice(index, 1);
  };
  _proto._setDiffuseMode = function _setDiffuseMode(sceneShaderData) {
    if (this._diffuseMode === DiffuseMode.SphericalHarmonics) {
      sceneShaderData.enableMacro(AmbientLight2._shMacro);
    } else {
      sceneShaderData.disableMacro(AmbientLight2._shMacro);
    }
  };
  _proto._setSpecularTexture = function _setSpecularTexture(sceneShaderData) {
    if (this._specularTexture) {
      sceneShaderData.setTexture(AmbientLight2._specularTextureProperty, this._specularTexture);
      sceneShaderData.setFloat(AmbientLight2._mipLevelProperty, this._specularTexture.mipmapCount - 1);
      sceneShaderData.enableMacro(AmbientLight2._specularMacro);
    } else {
      sceneShaderData.disableMacro(AmbientLight2._specularMacro);
    }
  };
  _proto._setSpecularTextureDecodeRGBM = function _setSpecularTextureDecodeRGBM(sceneShaderData) {
    if (this._specularTextureDecodeRGBM) {
      sceneShaderData.enableMacro(AmbientLight2._decodeRGBMMacro);
    } else {
      sceneShaderData.disableMacro(AmbientLight2._decodeRGBMMacro);
    }
  };
  _proto._preComputeSH = function _preComputeSH(sh, out) {
    var src = sh.coefficients;
    out[0] = src[0] * 0.886227;
    out[1] = src[1] * 0.886227;
    out[2] = src[2] * 0.886227;
    out[3] = src[3] * -1.023327;
    out[4] = src[4] * -1.023327;
    out[5] = src[5] * -1.023327;
    out[6] = src[6] * 1.023327;
    out[7] = src[7] * 1.023327;
    out[8] = src[8] * 1.023327;
    out[9] = src[9] * -1.023327;
    out[10] = src[10] * -1.023327;
    out[11] = src[11] * -1.023327;
    out[12] = src[12] * 0.858086;
    out[13] = src[13] * 0.858086;
    out[14] = src[14] * 0.858086;
    out[15] = src[15] * -0.858086;
    out[16] = src[16] * -0.858086;
    out[17] = src[17] * -0.858086;
    out[18] = src[18] * 0.247708;
    out[19] = src[19] * 0.247708;
    out[20] = src[20] * 0.247708;
    out[21] = src[21] * -0.858086;
    out[22] = src[22] * -0.858086;
    out[23] = src[23] * -0.858086;
    out[24] = src[24] * 0.429042;
    out[25] = src[25] * 0.429042;
    out[26] = src[26] * 0.429042;
  };
  _create_class2(AmbientLight2, [
    {
      key: "specularTextureDecodeRGBM",
      get: (
        /**
        * Whether to decode from specularTexture with RGBM format.
        */
        function get() {
          return this._specularTextureDecodeRGBM;
        }
      ),
      set: function set(value) {
        this._specularTextureDecodeRGBM = value;
        var scenes = this._scenes;
        for (var i = 0, n = scenes.length; i < n; i++) {
          this._setSpecularTextureDecodeRGBM(scenes[i].shaderData);
        }
      }
    },
    {
      key: "diffuseMode",
      get: (
        /**
        * Diffuse mode of ambient light.
        */
        function get() {
          return this._diffuseMode;
        }
      ),
      set: function set(value) {
        this._diffuseMode = value;
        var scenes = this._scenes;
        for (var i = 0, n = scenes.length; i < n; i++) {
          this._setDiffuseMode(scenes[i].shaderData);
        }
      }
    },
    {
      key: "diffuseSolidColor",
      get: (
        /**
        * Diffuse reflection solid color.
        * @remarks Effective when diffuse reflection mode is `DiffuseMode.SolidColor`.
        */
        function get() {
          return this._diffuseSolidColor;
        }
      ),
      set: function set(value) {
        if (value !== this._diffuseSolidColor) {
          this._diffuseSolidColor.copyFrom(value);
        }
      }
    },
    {
      key: "diffuseSphericalHarmonics",
      get: (
        /**
        * Diffuse reflection spherical harmonics 3.
        * @remarks Effective when diffuse reflection mode is `DiffuseMode.SphericalHarmonics`.
        */
        function get() {
          return this._diffuseSphericalHarmonics;
        }
      ),
      set: function set(value) {
        this._diffuseSphericalHarmonics = value;
        if (value) {
          this._preComputeSH(value, this._shArray);
          var scenes = this._scenes;
          for (var i = 0, n = scenes.length; i < n; i++) {
            scenes[i].shaderData.setFloatArray(AmbientLight2._diffuseSHProperty, this._shArray);
          }
        }
      }
    },
    {
      key: "diffuseIntensity",
      get: (
        /**
        * Diffuse reflection intensity.
        */
        function get() {
          return this._diffuseIntensity;
        }
      ),
      set: function set(value) {
        this._diffuseIntensity = value;
        var scenes = this._scenes;
        for (var i = 0, n = scenes.length; i < n; i++) {
          scenes[i].shaderData.setFloat(AmbientLight2._diffuseIntensityProperty, value);
        }
      }
    },
    {
      key: "specularTexture",
      get: (
        /**
        * Specular reflection texture.
        */
        function get() {
          return this._specularTexture;
        }
      ),
      set: function set(value) {
        this._specularTexture = value;
        var scenes = this._scenes;
        for (var i = 0, n = scenes.length; i < n; i++) {
          this._setSpecularTexture(scenes[i].shaderData);
        }
      }
    },
    {
      key: "specularIntensity",
      get: (
        /**
        * Specular reflection intensity.
        */
        function get() {
          return this._specularIntensity;
        }
      ),
      set: function set(value) {
        this._specularIntensity = value;
        for (var i = 0, n = this._scenes.length; i < n; i++) {
          this._scenes[i].shaderData.setFloat(AmbientLight2._specularIntensityProperty, value);
        }
      }
    }
  ]);
  return AmbientLight2;
}();
(function() {
  AmbientLight._shMacro = Shader.getMacroByName("O3_USE_SH");
})();
(function() {
  AmbientLight._specularMacro = Shader.getMacroByName("O3_USE_SPECULAR_ENV");
})();
(function() {
  AmbientLight._decodeRGBMMacro = Shader.getMacroByName("O3_DECODE_ENV_RGBM");
})();
(function() {
  AmbientLight._diffuseColorProperty = Shader.getPropertyByName("u_envMapLight.diffuse");
})();
(function() {
  AmbientLight._diffuseSHProperty = Shader.getPropertyByName("u_env_sh");
})();
(function() {
  AmbientLight._diffuseIntensityProperty = Shader.getPropertyByName("u_envMapLight.diffuseIntensity");
})();
(function() {
  AmbientLight._specularTextureProperty = Shader.getPropertyByName("u_env_specularSampler");
})();
(function() {
  AmbientLight._specularIntensityProperty = Shader.getPropertyByName("u_envMapLight.specularIntensity");
})();
(function() {
  AmbientLight._mipLevelProperty = Shader.getPropertyByName("u_envMapLight.mipMapLevel");
})();
var Scene = function(EngineObject2) {
  _inherits(Scene2, EngineObject2);
  function Scene2(engine, name) {
    var _this;
    _this = EngineObject2.call(this, engine) || this;
    _this.background = new Background(_this._engine);
    _this.shaderData = new ShaderData(ShaderDataGroup.Scene);
    _this.castShadows = true;
    _this.shadowResolution = ShadowResolution.Medium;
    _this.shadowTwoCascadeSplits = 1 / 3;
    _this.shadowFourCascadeSplits = new Vector3(1 / 15, 3 / 15, 7 / 15);
    _this.shadowDistance = 50;
    _this._activeCameras = [];
    _this._isActiveInEngine = false;
    _this._globalShaderMacro = new ShaderMacroCollection();
    _this._rootEntities = [];
    _this._shadowCascades = ShadowCascadesMode.NoCascades;
    _this._fogMode = FogMode.None;
    _this._fogColor = new Color(0.5, 0.5, 0.5, 1);
    _this._fogStart = 0;
    _this._fogEnd = 300;
    _this._fogDensity = 0.01;
    _this._fogParams = new Vector4();
    _this.name = name || "";
    var shaderData = _this.shaderData;
    shaderData._addRefCount(1);
    _this.ambientLight = new AmbientLight();
    engine.sceneManager._allScenes.push(_assert_this_initialized(_this));
    shaderData.enableMacro("OASIS_FOG_MODE", _this._fogMode.toString());
    shaderData.enableMacro("CASCADED_COUNT", _this.shadowCascades.toString());
    shaderData.setColor(Scene2._fogColorProperty, _this._fogColor);
    shaderData.setVector4(Scene2._fogParamsProperty, _this._fogParams);
    _this._computeLinearFogParams(_this._fogStart, _this._fogEnd);
    _this._computeExponentialFogParams(_this._fogDensity);
    return _this;
  }
  var _proto = Scene2.prototype;
  _proto.createRootEntity = function createRootEntity(name) {
    var entity = new Entity(this._engine, name);
    this.addRootEntity(entity);
    return entity;
  };
  _proto.addRootEntity = function addRootEntity(indexOrChild, entity) {
    var index;
    if (typeof indexOrChild === "number") {
      index = indexOrChild;
    } else {
      index = void 0;
      entity = indexOrChild;
    }
    var isRoot = entity._isRoot;
    if (!isRoot) {
      entity._isRoot = true;
      entity._removeFromParent();
    }
    var oldScene = entity._scene;
    if (oldScene !== this) {
      if (oldScene && isRoot) {
        oldScene._removeFromEntityList(entity);
      }
      this._addToRootEntityList(index, entity);
      Entity._traverseSetOwnerScene(entity, this);
    } else if (!isRoot) {
      this._addToRootEntityList(index, entity);
    }
    if (this._isActiveInEngine) {
      !entity._isActiveInHierarchy && entity._isActive && entity._processActive();
    } else {
      entity._isActiveInHierarchy && entity._processInActive();
    }
  };
  _proto.removeRootEntity = function removeRootEntity(entity) {
    if (entity._isRoot && entity._scene == this) {
      this._removeFromEntityList(entity);
      entity._isRoot = false;
      this._isActiveInEngine && entity._isActiveInHierarchy && entity._processInActive();
      Entity._traverseSetOwnerScene(entity, null);
    }
  };
  _proto.getRootEntity = function getRootEntity(index) {
    if (index === void 0)
      index = 0;
    return this._rootEntities[index];
  };
  _proto.findEntityByName = function findEntityByName(name) {
    var rootEntities = this._rootEntities;
    for (var i = 0, n = rootEntities.length; i < n; i++) {
      var entity = rootEntities[i].findByName(name);
      if (entity) {
        return entity;
      }
    }
    return null;
  };
  _proto.findEntityByPath = function findEntityByPath(path) {
    var splits = path.split("/").filter(Boolean);
    for (var i = 0, n = this.rootEntitiesCount; i < n; i++) {
      var findEntity = this.getRootEntity(i);
      if (findEntity.name != splits[0])
        continue;
      for (var j = 1, m = splits.length; j < m; ++j) {
        findEntity = Entity._findChildByName(findEntity, splits[j]);
        if (!findEntity)
          break;
      }
      return findEntity;
    }
    return null;
  };
  _proto.destroy = function destroy() {
    if (this._destroyed) {
      return;
    }
    this._destroy();
    var allScenes = this.engine.sceneManager._allScenes;
    allScenes.splice(allScenes.indexOf(this), 1);
  };
  _proto._attachRenderCamera = function _attachRenderCamera(camera) {
    var index = this._activeCameras.indexOf(camera);
    if (index === -1) {
      this._activeCameras.push(camera);
    } else {
      Logger.warn("Camera already attached.");
    }
  };
  _proto._detachRenderCamera = function _detachRenderCamera(camera) {
    var index = this._activeCameras.indexOf(camera);
    if (index !== -1) {
      this._activeCameras.splice(index, 1);
    }
  };
  _proto._processActive = function _processActive(active) {
    this._isActiveInEngine = active;
    var rootEntities = this._rootEntities;
    for (var i = rootEntities.length - 1; i >= 0; i--) {
      var entity = rootEntities[i];
      if (entity._isActive) {
        active ? entity._processActive() : entity._processInActive();
      }
    }
  };
  _proto._updateShaderData = function _updateShaderData() {
    var shaderData = this.shaderData;
    var lightManager = this._engine._lightManager;
    lightManager._updateShaderData(this.shaderData);
    var sunLightIndex = lightManager._getSunLightIndex();
    if (sunLightIndex !== -1) {
      this._sunLight = lightManager._directLights.get(sunLightIndex);
    }
    if (this.castShadows && this._sunLight && this._sunLight.shadowType !== ShadowType.None) {
      shaderData.enableMacro("SHADOW_TYPE", this._sunLight.shadowType.toString());
    } else {
      shaderData.disableMacro("SHADOW_TYPE");
    }
    ShaderMacroCollection.unionCollection(this.engine._macroCollection, shaderData._macroCollection, this._globalShaderMacro);
  };
  _proto._removeFromEntityList = function _removeFromEntityList(entity) {
    var rootEntities = this._rootEntities;
    var index = entity._siblingIndex;
    rootEntities.splice(index, 1);
    for (var n = rootEntities.length; index < n; index++) {
      rootEntities[index]._siblingIndex--;
    }
    entity._siblingIndex = -1;
  };
  _proto._destroy = function _destroy() {
    this._isActiveInEngine && (this._engine.sceneManager.activeScene = null);
    while (this.rootEntitiesCount > 0) {
      this._rootEntities[0].destroy();
    }
    this._activeCameras.length = 0;
    this.shaderData._addRefCount(-1);
  };
  _proto._addToRootEntityList = function _addToRootEntityList(index, rootEntity) {
    var rootEntities = this._rootEntities;
    var rootEntityCount = rootEntities.length;
    if (index === void 0) {
      rootEntity._siblingIndex = rootEntityCount;
      rootEntities.push(rootEntity);
    } else {
      if (index < 0 || index > rootEntityCount) {
        throw "The index " + index + " is out of child list bounds " + rootEntityCount;
      }
      rootEntity._siblingIndex = index;
      rootEntities.splice(index, 0, rootEntity);
      for (var i = index + 1, n = rootEntityCount + 1; i < n; i++) {
        rootEntities[i]._siblingIndex++;
      }
    }
  };
  _proto._computeLinearFogParams = function _computeLinearFogParams(fogStart, fogEnd) {
    var fogRange = fogEnd - fogStart;
    var fogParams = this._fogParams;
    fogParams.x = -1 / fogRange;
    fogParams.y = fogEnd / fogRange;
  };
  _proto._computeExponentialFogParams = function _computeExponentialFogParams(density) {
    this._fogParams.z = density / Math.LN2;
    this._fogParams.w = density / Math.sqrt(Math.LN2);
  };
  _create_class2(Scene2, [
    {
      key: "shadowCascades",
      get: (
        /**
        *  Number of cascades to use for directional light shadows.
        */
        function get() {
          return this._shadowCascades;
        }
      ),
      set: function set(value) {
        if (this._shadowCascades !== value) {
          this.shaderData.enableMacro("CASCADED_COUNT", value.toString());
          this._shadowCascades = value;
        }
      }
    },
    {
      key: "ambientLight",
      get: (
        /**
        * Ambient light.
        */
        function get() {
          return this._ambientLight;
        }
      ),
      set: function set(value) {
        if (!value) {
          Logger.warn("The scene must have one ambient light");
          return;
        }
        var lastAmbientLight = this._ambientLight;
        if (lastAmbientLight !== value) {
          lastAmbientLight && lastAmbientLight._removeFromScene(this);
          value._addToScene(this);
          this._ambientLight = value;
        }
      }
    },
    {
      key: "fogMode",
      get: (
        /**
        * Fog mode.
        * @remarks
        * If set to `FogMode.None`, the fog will be disabled.
        * If set to `FogMode.Linear`, the fog will be linear and controlled by `fogStart` and `fogEnd`.
        * If set to `FogMode.Exponential`, the fog will be exponential and controlled by `fogDensity`.
        * If set to `FogMode.ExponentialSquared`, the fog will be exponential squared and controlled by `fogDensity`.
        */
        function get() {
          return this._fogMode;
        }
      ),
      set: function set(value) {
        if (this._fogMode !== value) {
          this.shaderData.enableMacro("OASIS_FOG_MODE", value.toString());
          this._fogMode = value;
        }
      }
    },
    {
      key: "fogColor",
      get: (
        /**
        * Fog color.
        */
        function get() {
          return this._fogColor;
        }
      ),
      set: function set(value) {
        if (this._fogColor !== value) {
          this._fogColor.copyFrom(value);
        }
      }
    },
    {
      key: "fogStart",
      get: (
        /**
        * Fog start.
        */
        function get() {
          return this._fogStart;
        }
      ),
      set: function set(value) {
        if (this._fogStart !== value) {
          this._computeLinearFogParams(value, this._fogEnd);
          this._fogStart = value;
        }
      }
    },
    {
      key: "fogEnd",
      get: (
        /**
        * Fog end.
        */
        function get() {
          return this._fogEnd;
        }
      ),
      set: function set(value) {
        if (this._fogEnd !== value) {
          this._computeLinearFogParams(this._fogStart, value);
          this._fogEnd = value;
        }
      }
    },
    {
      key: "fogDensity",
      get: (
        /**
        * Fog density.
        */
        function get() {
          return this._fogDensity;
        }
      ),
      set: function set(value) {
        if (this._fogDensity !== value) {
          this._computeExponentialFogParams(value);
          this._fogDensity = value;
        }
      }
    },
    {
      key: "rootEntitiesCount",
      get: (
        /**
        * Count of root entities.
        */
        function get() {
          return this._rootEntities.length;
        }
      )
    },
    {
      key: "rootEntities",
      get: (
        /**
        * Root entity collection.
        */
        function get() {
          return this._rootEntities;
        }
      )
    }
  ]);
  return Scene2;
}(EngineObject);
(function() {
  Scene._fogColorProperty = Shader.getPropertyByName("oasis_FogColor");
})();
(function() {
  Scene._fogParamsProperty = Shader.getPropertyByName("oasis_FogParams");
})();
var SceneManager = function() {
  function SceneManager2(engine) {
    this.engine = engine;
    this._allScenes = [];
  }
  var _proto = SceneManager2.prototype;
  _proto.loadScene = function loadScene(url, destroyOldScene) {
    if (destroyOldScene === void 0)
      destroyOldScene = true;
    var _this = this;
    var scenePromise = this.engine.resourceManager.load(url);
    scenePromise.then(function(scene) {
      var oldScene = _this._activeScene;
      _this.activeScene = scene;
      if (oldScene && destroyOldScene) {
        oldScene.destroy();
      }
    });
    return scenePromise;
  };
  _proto.mergeScenes = function mergeScenes(sourceScene, destScene) {
    var oldRootEntities = sourceScene.rootEntities;
    for (var i = 0, n = oldRootEntities.length; i < n; i++) {
      destScene.addRootEntity(oldRootEntities[i]);
    }
  };
  _proto._destroyAllScene = function _destroyAllScene() {
    var allScenes = this._allScenes;
    for (var i = 0, n = allScenes.length; i < n; i++) {
      allScenes[i]._destroy();
    }
    allScenes.length = 0;
  };
  _create_class2(SceneManager2, [
    {
      key: "activeScene",
      get: (
        /**
        * Get the activated scene.
        */
        function get() {
          return this._activeScene;
        }
      ),
      set: function set(scene) {
        var oldScene = this._activeScene;
        if (oldScene !== scene) {
          oldScene && oldScene._processActive(false);
          scene && scene._processActive(true);
          this._activeScene = scene;
        }
      }
    }
  ]);
  return SceneManager2;
}();
var blinnPhongFs = "#define GLSLIFY 1\n#include <common>\n#include <camera_declare>\n#include <uv_share>\n#include <normal_share>\n#include <color_share>\n#include <worldpos_share>\n#include <light_frag_define>\n#include <ShadowFragmentDeclaration>\n#include <mobile_material_frag>\n#include <FogFragmentDeclaration>\n#include <normal_get>\nvoid main(){\n#include <begin_mobile_frag>\n#include <begin_viewdir_frag>\n#include <mobile_blinnphong_frag>\ngl_FragColor=emission+ambient+diffuse+specular;\n#ifdef OASIS_TRANSPARENT\ngl_FragColor.a=diffuse.a;\n#else\ngl_FragColor.a=1.0;\n#endif\n#include <FogFragment>\n#ifndef OASIS_COLORSPACE_GAMMA\ngl_FragColor=linearToGamma(gl_FragColor);\n#endif\n}";
var blinnPhongVs = "#define GLSLIFY 1\n#include <common>\n#include <common_vert>\n#include <blendShape_input>\n#include <uv_share>\n#include <color_share>\n#include <normal_share>\n#include <worldpos_share>\n#include <ShadowVertexDeclaration>\n#include <FogVertexDeclaration>\nvoid main(){\n#include <begin_position_vert>\n#include <begin_normal_vert>\n#include <blendShape_vert>\n#include <skinning_vert>\n#include <uv_vert>\n#include <color_vert>\n#include <normal_vert>\n#include <worldpos_vert>\n#include <position_vert>\n#include <ShadowVertex>\n#include <FogVertex>\n}";
var particleFs = "#define GLSLIFY 1\nvarying vec4 v_color;varying float v_lifeLeft;varying vec2 v_uv;uniform sampler2D u_texture;void main(){if(v_lifeLeft==1.0){discard;}float alphaFactor=1.0;\n#ifdef fadeIn\nfloat fadeInFactor=step(0.5,v_lifeLeft);alphaFactor=2.0*fadeInFactor*(1.0-v_lifeLeft)+(1.0-fadeInFactor);\n#endif\n#ifdef fadeOut\nfloat fadeOutFactor=step(0.5,v_lifeLeft);alphaFactor=alphaFactor*2.0*(1.0-fadeOutFactor)*v_lifeLeft+alphaFactor*fadeOutFactor;\n#endif\n#ifdef particleTexture\nvec4 tex=texture2D(u_texture,v_uv);\n#ifdef useOriginColor\ngl_FragColor=vec4(tex.rgb,alphaFactor*tex.a*v_color.w);\n#else\ngl_FragColor=vec4(v_color.xyz*tex.rgb,alphaFactor*tex.a*v_color.w);\n#endif\n#else\ngl_FragColor=vec4(v_color.xyz,alphaFactor*v_color.w);\n#endif\n}";
var particleVs = "#define GLSLIFY 1\nattribute vec3 a_position;attribute vec3 a_velocity;attribute vec3 a_acceleration;attribute vec4 a_color;attribute vec4 a_lifeAndSize;attribute vec2 a_rotation;attribute vec3 a_uv;attribute vec2 a_normalizedUv;uniform float u_time;uniform bool u_once;uniform mat4 u_MVPMat;varying vec4 v_color;varying float v_lifeLeft;varying vec2 v_uv;\n#ifdef is2d\nuniform mat4 u_viewInvMat;uniform mat4 u_projMat;uniform mat4 u_viewMat;uniform mat4 u_modelMat;\n#endif\nmat2 rotation2d(float angle){float s=sin(angle);float c=cos(angle);return mat2(c,-s,s,c);}void main(){v_color=a_color;v_uv=a_uv.xy;float life=a_lifeAndSize.y;float startTime=a_lifeAndSize.x;float deltaTime=max(mod(u_time-startTime,life),0.0);if((u_once&&u_time>life+startTime)){deltaTime=0.0;}v_lifeLeft=1.0-deltaTime/life;float scale=a_lifeAndSize.z;vec3 position=a_position+(a_velocity+a_acceleration*deltaTime*0.5)*deltaTime;\n#ifdef isScaleByLifetime\nscale*=v_lifeLeft;\n#else\nscale*=pow(a_lifeAndSize.w,deltaTime);\n#endif\n#ifdef rotateToVelocity\nvec3 v=a_velocity+a_acceleration*deltaTime;float angle=atan(v.z,v.x)*2.0;\n#else\nfloat deltaAngle=deltaTime*a_rotation.y;float angle=a_rotation.x+deltaAngle;\n#endif\n#ifdef is2d\nvec2 rotatedPoint=rotation2d(angle)*vec2(a_normalizedUv.x,a_normalizedUv.y*a_uv.z);vec3 basisX=u_viewInvMat[0].xyz;vec3 basisZ=u_viewInvMat[1].xyz;vec3 localPosition=vec3(basisX*rotatedPoint.x+basisZ*rotatedPoint.y)*scale+position;gl_Position=u_projMat*u_viewMat*vec4(localPosition+u_modelMat[3].xyz,1.);\n#else\n#ifdef rotateToVelocity\nfloat s=sin(angle);float c=cos(angle);\n#else\nfloat s=sin(angle);float c=cos(angle);\n#endif\nvec4 rotatedPoint=vec4((a_normalizedUv.x*c+a_normalizedUv.y*a_uv.z*s)*scale,0.,(a_normalizedUv.x*s-a_normalizedUv.y*a_uv.z*c)*scale,1.);vec4 orientation=vec4(0,0,0,1);vec4 q2=orientation+orientation;vec4 qx=orientation.xxxw*q2.xyzx;vec4 qy=orientation.xyyw*q2.xyzy;vec4 qz=orientation.xxzw*q2.xxzz;mat4 localMatrix=mat4((1.0-qy.y)-qz.z,qx.y+qz.w,qx.z-qy.w,0,qx.y-qz.w,(1.0-qx.x)-qz.z,qy.z+qx.w,0,qx.z+qy.w,qy.z-qx.w,(1.0-qx.x)-qy.y,0,position.x,position.y,position.z,1);rotatedPoint=localMatrix*rotatedPoint;gl_Position=u_MVPMat*rotatedPoint;\n#endif\n}";
var pbrFs = "#define GLSLIFY 1\n#define IS_METALLIC_WORKFLOW\n#include <common>\n#include <camera_declare>\n#include <FogFragmentDeclaration>\n#include <uv_share>\n#include <normal_share>\n#include <color_share>\n#include <worldpos_share>\n#include <light_frag_define>\n#include <pbr_frag_define>\n#include <pbr_helper>\nvoid main(){\n#include <pbr_frag>\n#include <FogFragment>\n#ifndef OASIS_COLORSPACE_GAMMA\ngl_FragColor=linearToGamma(gl_FragColor);\n#endif\n}";
var pbrSpecularFs = "#define GLSLIFY 1\n#include <common>\n#include <camera_declare>\n#include <FogFragmentDeclaration>\n#include <uv_share>\n#include <normal_share>\n#include <color_share>\n#include <worldpos_share>\n#include <light_frag_define>\n#include <pbr_frag_define>\n#include <pbr_helper>\nvoid main(){\n#include <pbr_frag>\n#include <FogFragment>\n#ifndef OASIS_COLORSPACE_GAMMA\ngl_FragColor=linearToGamma(gl_FragColor);\n#endif\n}";
var pbrVs = "#define GLSLIFY 1\n#include <common>\n#include <common_vert>\n#include <blendShape_input>\n#include <uv_share>\n#include <color_share>\n#include <normal_share>\n#include <worldpos_share>\n#include <ShadowVertexDeclaration>\n#include <FogVertexDeclaration>\nvoid main(){\n#include <begin_position_vert>\n#include <begin_normal_vert>\n#include <blendShape_vert>\n#include <skinning_vert>\n#include <uv_vert>\n#include <color_vert>\n#include <normal_vert>\n#include <worldpos_vert>\n#include <position_vert>\n#include <ShadowVertex>\n#include <FogVertex>\n}";
var shadowMapFs = "#define GLSLIFY 1\n#ifdef OASIS_NO_DEPTH_TEXTURE\nvec4 pack(float depth){const vec4 bitShift=vec4(1.0,256.0,256.0*256.0,256.0*256.0*256.0);const vec4 bitMask=vec4(1.0/256.0,1.0/256.0,1.0/256.0,0.0);vec4 rgbaDepth=fract(depth*bitShift);rgbaDepth-=rgbaDepth.gbaa*bitMask;return rgbaDepth;}\n#endif\nvoid main(){\n#ifdef OASIS_NO_DEPTH_TEXTURE\ngl_FragColor=pack(gl_FragCoord.z);\n#else\ngl_FragColor=vec4(0.0,0.0,0.0,0.0);\n#endif\n}";
var shadowMapVs = "#define GLSLIFY 1\n#include <common>\n#include <common_vert>\n#include <blendShape_input>\n#include <normal_share>\nuniform mat4 u_VPMat;uniform vec2 u_shadowBias;uniform vec3 u_lightDirection;vec3 applyShadowBias(vec3 positionWS){positionWS-=u_lightDirection*u_shadowBias.x;return positionWS;}vec3 applyShadowNormalBias(vec3 positionWS,vec3 normalWS){float invNdotL=1.0-clamp(dot(-u_lightDirection,normalWS),0.0,1.0);float scale=invNdotL*u_shadowBias.y;positionWS+=normalWS*vec3(scale);return positionWS;}void main(){\n#include <begin_position_vert>\n#include <begin_normal_vert>\n#include <blendShape_vert>\n#include <skinning_vert>\nvec4 positionWS=u_modelMat*position;positionWS.xyz=applyShadowBias(positionWS.xyz);\n#ifndef OMIT_NORMAL\n#ifdef O3_HAS_NORMAL\nvec3 normalWS=normalize(mat3(u_normalMat)*normal);positionWS.xyz=applyShadowNormalBias(positionWS.xyz,normalWS);\n#endif\n#endif\nvec4 positionCS=u_VPMat*positionWS;positionCS.z=max(positionCS.z,-1.0);gl_Position=positionCS;}";
var skyboxFs = "#define GLSLIFY 1\n#include <common>\nuniform samplerCube u_cube;varying vec3 v_cubeUV;uniform vec4 u_cubeDecodeParam;void main(){vec4 textureColor=textureCube(u_cube,v_cubeUV);if(u_cubeDecodeParam.x>0.0){textureColor=RGBMToLinear(textureColor,u_cubeDecodeParam.y);textureColor=linearToGamma(textureColor);}gl_FragColor=textureColor;}";
var skyboxVs = "#define GLSLIFY 1\n#include <common_vert>\nuniform mat4 u_VPMat;varying vec3 v_cubeUV;void main(){v_cubeUV=vec3(-POSITION.x,POSITION.yz);gl_Position=u_VPMat*vec4(POSITION,1.0);}";
var spriteMaskFs = "#define GLSLIFY 1\nuniform sampler2D u_maskTexture;uniform float u_maskAlphaCutoff;varying vec2 v_uv;void main(){vec4 color=texture2D(u_maskTexture,v_uv);if(color.a<u_maskAlphaCutoff){discard;}gl_FragColor=color;}";
var spriteMaskVs = "#define GLSLIFY 1\nuniform mat4 u_VPMat;attribute vec3 POSITION;attribute vec2 TEXCOORD_0;varying vec2 v_uv;void main(){gl_Position=u_VPMat*vec4(POSITION,1.0);v_uv=TEXCOORD_0;}";
var spriteFs = "#define GLSLIFY 1\n#ifdef USE_CUSTOM_TEXTURE\nuniform sampler2D u_cusTomTexture;\n#else\nuniform sampler2D u_spriteTexture;\n#endif\nvarying vec2 v_uv;varying vec4 v_color;void main(){\n#ifdef USE_CUSTOM_TEXTURE\nvec4 baseColor=texture2D(u_cusTomTexture,v_uv);\n#else\nvec4 baseColor=texture2D(u_spriteTexture,v_uv);\n#endif\ngl_FragColor=baseColor*v_color;}";
var spriteVs = "#define GLSLIFY 1\n#ifdef USE_MODEL_MATRIX\nuniform mat4 u_MVPMat;\n#else\nuniform mat4 u_VPMat;\n#endif\nattribute vec3 POSITION;attribute vec2 TEXCOORD_0;attribute vec4 COLOR_0;varying vec2 v_uv;varying vec4 v_color;void main(){\n#ifdef USE_MODEL_MATRIX\ngl_Position=u_MVPMat*vec4(POSITION,1.0);\n#else\ngl_Position=u_VPMat*vec4(POSITION,1.0);\n#endif\nv_uv=TEXCOORD_0;v_color=COLOR_0;}";
var unlitFs = "#define GLSLIFY 1\n#include <common>\n#include <uv_share>\n#include <FogFragmentDeclaration>\nuniform vec4 u_baseColor;uniform float u_alphaCutoff;\n#ifdef BASETEXTURE\nuniform sampler2D u_baseTexture;\n#endif\nvoid main(){vec4 baseColor=u_baseColor;\n#ifdef BASETEXTURE\nvec4 textureColor=texture2D(u_baseTexture,v_uv);\n#ifndef OASIS_COLORSPACE_GAMMA\ntextureColor=gammaToLinear(textureColor);\n#endif\nbaseColor*=textureColor;\n#endif\n#ifdef ALPHA_CUTOFF\nif(baseColor.a<u_alphaCutoff){discard;}\n#endif\ngl_FragColor=baseColor;\n#ifndef OASIS_TRANSPARENT\ngl_FragColor.a=1.0;\n#endif\n#include <FogFragment>\n#ifndef OASIS_COLORSPACE_GAMMA\ngl_FragColor=linearToGamma(gl_FragColor);\n#endif\n}";
var unlitVs = "#define GLSLIFY 1\n#include <common>\n#include <common_vert>\n#include <blendShape_input>\n#include <uv_share>\n#include <FogVertexDeclaration>\nvoid main(){\n#include <begin_position_vert>\n#include <blendShape_vert>\n#include <skinning_vert>\n#include <uv_vert>\n#include <position_vert>\n#include <FogVertex>\n}";
var backgroundTextureVs = "#define GLSLIFY 1\nattribute vec3 POSITION;attribute vec2 TEXCOORD_0;varying vec2 v_uv;void main(){gl_Position=vec4(POSITION,1.0);v_uv=TEXCOORD_0;}";
var backgroundTextureFs = "#define GLSLIFY 1\nuniform sampler2D u_baseTexture;varying vec2 v_uv;void main(){gl_FragColor=texture2D(u_baseTexture,v_uv);}";
var ShaderPool = function() {
  function ShaderPool2() {
  }
  ShaderPool2.init = function init() {
    Shader.create("blinn-phong", blinnPhongVs, blinnPhongFs);
    Shader.create("pbr", pbrVs, pbrFs);
    Shader.create("pbr-specular", pbrVs, pbrSpecularFs);
    Shader.create("unlit", unlitVs, unlitFs);
    Shader.create("shadow-map", shadowMapVs, shadowMapFs);
    Shader.create("skybox", skyboxVs, skyboxFs);
    Shader.create("particle-shader", particleVs, particleFs);
    Shader.create("SpriteMask", spriteMaskVs, spriteMaskFs);
    Shader.create("Sprite", spriteVs, spriteFs);
    Shader.create("background-texture", backgroundTextureVs, backgroundTextureFs);
  };
  return ShaderPool2;
}();
var ShaderProgramPool = function() {
  function ShaderProgramPool2() {
    this._cacheHierarchy = 1;
    this._cacheMap = /* @__PURE__ */ Object.create(null);
  }
  var _proto = ShaderProgramPool2.prototype;
  _proto.get = function get(macros) {
    var cacheMap = this._cacheMap;
    var maskLength = macros._length;
    if (maskLength > this._cacheHierarchy) {
      this._resizeCacheMapHierarchy(cacheMap, 0, maskLength);
    }
    var mask = macros._mask;
    var endIndex = macros._length - 1;
    var maxEndIndex = this._cacheHierarchy - 1;
    for (var i = 0; i < maxEndIndex; i++) {
      var subMask = endIndex < i ? 0 : mask[i];
      var subCacheShaders = cacheMap[subMask];
      subCacheShaders || (cacheMap[subMask] = subCacheShaders = /* @__PURE__ */ Object.create(null));
      cacheMap = subCacheShaders;
    }
    var cacheKey = endIndex < maxEndIndex ? 0 : mask[maxEndIndex];
    var shader = cacheMap[cacheKey];
    if (!shader) {
      this._lastQueryKey = cacheKey;
      this._lastQueryMap = cacheMap;
    }
    return shader;
  };
  _proto.cache = function cache(shaderProgram) {
    this._lastQueryMap[this._lastQueryKey] = shaderProgram;
  };
  _proto._resizeCacheMapHierarchy = function _resizeCacheMapHierarchy(cacheMap, hierarchy, resizeLength) {
    var end = this._cacheHierarchy - 1;
    if (hierarchy == end) {
      for (var k in cacheMap) {
        var shader = cacheMap[k];
        var subCacheMap = cacheMap;
        for (var i = 0, n = resizeLength - end; i < n; i++) {
          if (i == n - 1) {
            subCacheMap[0] = shader;
          } else {
            subCacheMap = subCacheMap[i == 0 ? k : 0] = /* @__PURE__ */ Object.create(null);
          }
        }
      }
      this._cacheHierarchy = resizeLength;
    } else {
      for (var k1 in cacheMap) {
        this._resizeCacheMapHierarchy(cacheMap[k1], ++hierarchy, resizeLength);
      }
    }
  };
  return ShaderProgramPool2;
}();
ShaderPool.init();
var Engine = function(EventDispatcher2) {
  _inherits(Engine2, EventDispatcher2);
  function Engine2(canvas, hardwareRenderer, settings) {
    var _this;
    _this = EventDispatcher2.call(this) || this;
    _this._lightManager = new LightManager();
    _this._componentsManager = new ComponentsManager();
    _this._lastRenderState = new RenderState();
    _this._renderElementPool = new ClassPool(MeshRenderElement);
    _this._spriteElementPool = new ClassPool(SpriteElement);
    _this._spriteMaskElementPool = new ClassPool(SpriteMaskElement);
    _this._textElementPool = new ClassPool(TextRenderElement);
    _this._renderContext = new RenderContext();
    _this._renderCount = 0;
    _this._shaderProgramPools = [];
    _this._canSpriteBatch = true;
    _this._macroCollection = new ShaderMacroCollection();
    _this._settings = {};
    _this._resourceManager = new ResourceManager(_assert_this_initialized(_this));
    _this._sceneManager = new SceneManager(_assert_this_initialized(_this));
    _this._vSyncCount = 1;
    _this._targetFrameRate = 60;
    _this._time = new Time();
    _this._isPaused = true;
    _this._vSyncCounter = 1;
    _this._targetFrameInterval = 1e3 / 60;
    _this._destroyed = false;
    _this._frameInProcess = false;
    _this._waittingDestroy = false;
    _this._animate = function() {
      if (_this._vSyncCount) {
        _this._requestId = requestAnimationFrame(_this._animate);
        if (_this._vSyncCounter++ % _this._vSyncCount === 0) {
          _this.update();
          _this._vSyncCounter = 1;
        }
      } else {
        _this._timeoutId = window.setTimeout(_this._animate, _this._targetFrameInterval);
        _this.update();
      }
    };
    _this._hardwareRenderer = hardwareRenderer;
    _this._hardwareRenderer.init(canvas);
    _this.physicsManager = new PhysicsManager(_assert_this_initialized(_this));
    _this._canvas = canvas;
    _this._sceneManager.activeScene = new Scene(_assert_this_initialized(_this), "DefaultScene");
    _this._spriteMaskManager = new SpriteMaskManager(_assert_this_initialized(_this));
    _this._spriteDefaultMaterial = _this._createSpriteMaterial();
    _this._spriteMaskDefaultMaterial = _this._createSpriteMaskMaterial();
    _this._textDefaultFont = Font.createFromOS(_assert_this_initialized(_this), "Arial");
    _this._textDefaultFont.isGCIgnored = false;
    _this.inputManager = new InputManager(_assert_this_initialized(_this));
    var magentaPixel = new Uint8Array([
      255,
      0,
      255,
      255
    ]);
    var magentaTexture2D = new Texture2D(_assert_this_initialized(_this), 1, 1, TextureFormat.R8G8B8A8, false);
    magentaTexture2D.setPixelBuffer(magentaPixel);
    magentaTexture2D.isGCIgnored = true;
    var magentaTextureCube = new TextureCube(_assert_this_initialized(_this), 1, TextureFormat.R8G8B8A8, false);
    magentaTextureCube.setPixelBuffer(TextureCubeFace.PositiveX, magentaPixel);
    magentaTextureCube.setPixelBuffer(TextureCubeFace.NegativeX, magentaPixel);
    magentaTextureCube.setPixelBuffer(TextureCubeFace.PositiveY, magentaPixel);
    magentaTextureCube.setPixelBuffer(TextureCubeFace.NegativeY, magentaPixel);
    magentaTextureCube.setPixelBuffer(TextureCubeFace.PositiveZ, magentaPixel);
    magentaTextureCube.setPixelBuffer(TextureCubeFace.NegativeZ, magentaPixel);
    magentaTextureCube.isGCIgnored = true;
    if (!hardwareRenderer.canIUse(GLCapabilityType.depthTexture)) {
      _this._macroCollection.enable(Engine2._noDepthTextureMacro);
    } else {
      var depthTexture2D = new Texture2D(_assert_this_initialized(_this), 1, 1, TextureFormat.Depth16, false);
      depthTexture2D.isGCIgnored = true;
      _this._depthTexture2D = depthTexture2D;
    }
    _this._magentaTexture2D = magentaTexture2D;
    _this._magentaTextureCube = magentaTextureCube;
    if (hardwareRenderer.isWebGL2) {
      var magentaTexture2DArray = new Texture2DArray(_assert_this_initialized(_this), 1, 1, 1, TextureFormat.R8G8B8A8, false);
      magentaTexture2DArray.setPixelBuffer(0, magentaPixel);
      magentaTexture2DArray.isGCIgnored = true;
      _this._magentaTexture2DArray = magentaTexture2DArray;
    }
    var magentaMaterial = new Material(_assert_this_initialized(_this), Shader.find("unlit"));
    magentaMaterial.shaderData.setColor("u_baseColor", new Color2(1, 0, 1.01, 1));
    _this._magentaMaterial = magentaMaterial;
    var backgroundTextureMaterial = new Material(_assert_this_initialized(_this), Shader.find("background-texture"));
    backgroundTextureMaterial.isGCIgnored = true;
    backgroundTextureMaterial.renderState.depthState.compareFunction = CompareFunction.LessEqual;
    _this._backgroundTextureMaterial = backgroundTextureMaterial;
    var innerSettings = _this._settings;
    var colorSpace = (settings == null ? void 0 : settings.colorSpace) || ColorSpace.Linear;
    colorSpace === ColorSpace.Gamma && _this._macroCollection.enable(Engine2._gammaMacro);
    innerSettings.colorSpace = colorSpace;
    return _this;
  }
  var _proto = Engine2.prototype;
  _proto.createEntity = function createEntity(name) {
    return new Entity(this, name);
  };
  _proto.pause = function pause() {
    this._isPaused = true;
    cancelAnimationFrame(this._requestId);
    clearTimeout(this._timeoutId);
  };
  _proto.resume = function resume() {
    if (!this._isPaused)
      return;
    this._isPaused = false;
    this.time.reset();
    this._requestId = requestAnimationFrame(this._animate);
  };
  _proto.update = function update() {
    var time = this._time;
    time.tick();
    var deltaTime = time.deltaTime;
    this._frameInProcess = true;
    this._renderElementPool.resetPool();
    this._spriteElementPool.resetPool();
    this._spriteMaskElementPool.resetPool();
    this._textElementPool.resetPool();
    var scene = this._sceneManager._activeScene;
    var componentsManager = this._componentsManager;
    if (scene) {
      scene._activeCameras.sort(function(camera1, camera2) {
        return camera1.priority - camera2.priority;
      });
      componentsManager.callScriptOnStart();
      this.physicsManager._initialized && this.physicsManager._update(deltaTime / 1e3);
      this.inputManager._update();
      componentsManager.callScriptOnUpdate(deltaTime);
      componentsManager.callAnimationUpdate(deltaTime);
      componentsManager.callScriptOnLateUpdate(deltaTime);
      this._render(scene);
    }
    if (!this._waittingDestroy) {
      componentsManager.handlingInvalidScripts();
    }
    if (this._waittingDestroy) {
      this._destroy();
    }
    this._frameInProcess = false;
  };
  _proto.run = function run() {
    this.resume();
    this.trigger(new Event("run", this));
  };
  _proto._destroy = function _destroy() {
    this._sceneManager._destroyAllScene();
    this._componentsManager.handlingInvalidScripts();
    this._resourceManager._destroy();
    this._magentaTexture2D.destroy(true);
    this._magentaTextureCube.destroy(true);
    this._textDefaultFont.destroy(true);
    this.inputManager._destroy();
    this.trigger(new Event("shutdown", this));
    this.pause();
    this._animate = null;
    this._sceneManager = null;
    this._resourceManager = null;
    this._canvas = null;
    this._time = null;
    this._spriteMaskManager.destroy();
    this.removeAllEventListeners();
    this._waittingDestroy = false;
    this._destroyed = true;
  };
  _proto.destroy = function destroy() {
    if (this._destroyed) {
      return;
    }
    if (this._frameInProcess) {
      this._waittingDestroy = true;
    } else {
      this._destroy();
    }
  };
  _proto._getShaderProgramPool = function _getShaderProgramPool(shaderPass) {
    var index = shaderPass._shaderPassId;
    var shaderProgramPools = this._shaderProgramPools;
    var pool = shaderProgramPools[index];
    if (!pool) {
      var length2 = index + 1;
      if (length2 > shaderProgramPools.length) {
        shaderProgramPools.length = length2;
      }
      shaderProgramPools[index] = pool = new ShaderProgramPool();
    }
    return pool;
  };
  _proto._render = function _render(scene) {
    var cameras = scene._activeCameras;
    var componentsManager = this._componentsManager;
    var deltaTime = this.time.deltaTime;
    componentsManager.callRendererOnUpdate(deltaTime);
    scene._updateShaderData();
    if (cameras.length > 0) {
      for (var i = 0, n = cameras.length; i < n; i++) {
        var camera = cameras[i];
        componentsManager.callCameraOnBeginRender(camera);
        camera.render();
        componentsManager.callCameraOnEndRender(camera);
        if (this._hardwareRenderer._options._forceFlush) {
          this._hardwareRenderer.flush();
        }
      }
    } else {
      Logger.debug("NO active camera.");
    }
  };
  _proto._createSpriteMaterial = function _createSpriteMaterial() {
    var material = new Material(this, Shader.find("Sprite"));
    var renderState = material.renderState;
    var target = renderState.blendState.targetBlendState;
    target.enabled = true;
    target.sourceColorBlendFactor = BlendFactor.SourceAlpha;
    target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;
    target.sourceAlphaBlendFactor = BlendFactor.One;
    target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;
    target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;
    renderState.depthState.writeEnabled = false;
    renderState.rasterState.cullMode = CullMode.Off;
    material.renderState.renderQueueType = RenderQueueType.Transparent;
    material.isGCIgnored = true;
    return material;
  };
  _proto._createSpriteMaskMaterial = function _createSpriteMaskMaterial() {
    var material = new Material(this, Shader.find("SpriteMask"));
    var renderState = material.renderState;
    renderState.blendState.targetBlendState.colorWriteMask = ColorWriteMask.None;
    renderState.rasterState.cullMode = CullMode.Off;
    renderState.stencilState.enabled = true;
    renderState.depthState.enabled = false;
    material.isGCIgnored = true;
    return material;
  };
  _create_class2(Engine2, [
    {
      key: "settings",
      get: (
        /**
        * Settings of Engine.
        */
        function get() {
          return this._settings;
        }
      )
    },
    {
      key: "canvas",
      get: (
        /**
        * The canvas to use for rendering.
        */
        function get() {
          return this._canvas;
        }
      )
    },
    {
      key: "resourceManager",
      get: (
        /**
        * Get the resource manager.
        */
        function get() {
          return this._resourceManager;
        }
      )
    },
    {
      key: "sceneManager",
      get: (
        /**
        * Get the scene manager.
        */
        function get() {
          return this._sceneManager;
        }
      )
    },
    {
      key: "time",
      get: (
        /**
        * Get the Time class.
        */
        function get() {
          return this._time;
        }
      )
    },
    {
      key: "isPaused",
      get: (
        /**
        * Whether the engine is paused.
        */
        function get() {
          return this._isPaused;
        }
      )
    },
    {
      key: "vSyncCount",
      get: (
        /**
        * The number of vertical synchronization means the number of vertical blanking for one frame.
        * @remarks 0 means that the vertical synchronization is turned off.
        */
        function get() {
          return this._vSyncCount;
        }
      ),
      set: function set(value) {
        this._vSyncCount = Math.max(0, Math.floor(value));
      }
    },
    {
      key: "targetFrameRate",
      get: (
        /**
        * Set the target frame rate you want to achieve.
        * @remarks
        * It only takes effect when vSyncCount = 0 (ie, vertical synchronization is turned off).
        * The larger the value, the higher the target frame rate, Number.POSITIVE_INFINITY represents the infinite target frame rate.
        */
        function get() {
          return this._targetFrameRate;
        }
      ),
      set: function set(value) {
        value = Math.max(1e-6, value);
        this._targetFrameRate = value;
        this._targetFrameInterval = 1e3 / value;
      }
    },
    {
      key: "destroyed",
      get: (
        /**
        * Indicates whether the engine is destroyed.
        */
        function get() {
          return this._destroyed;
        }
      )
    }
  ]);
  return Engine2;
}(EventDispatcher);
(function() {
  Engine._gammaMacro = Shader.getMacroByName("OASIS_COLORSPACE_GAMMA");
})();
(function() {
  Engine._noDepthTextureMacro = Shader.getMacroByName("OASIS_NO_DEPTH_TEXTURE");
})();
(function() {
  Engine._pixelsPerUnit = 100;
})();
var Script = function(Component2) {
  _inherits(Script2, Component2);
  function Script2() {
    var _this;
    _this = Component2.apply(this, arguments) || this;
    _this._started = false;
    _this._onStartIndex = -1;
    _this._onUpdateIndex = -1;
    _this._onLateUpdateIndex = -1;
    _this._onPhysicsUpdateIndex = -1;
    _this._onPreRenderIndex = -1;
    _this._onPostRenderIndex = -1;
    _this._entityScriptsIndex = -1;
    _this._waitHandlingInValid = false;
    return _this;
  }
  var _proto = Script2.prototype;
  _proto.onAwake = function onAwake() {
  };
  _proto.onEnable = function onEnable() {
  };
  _proto.onStart = function onStart() {
  };
  _proto.onUpdate = function onUpdate(deltaTime) {
  };
  _proto.onLateUpdate = function onLateUpdate(deltaTime) {
  };
  _proto.onBeginRender = function onBeginRender(camera) {
  };
  _proto.onEndRender = function onEndRender(camera) {
  };
  _proto.onPhysicsUpdate = function onPhysicsUpdate() {
  };
  _proto.onTriggerEnter = function onTriggerEnter(other) {
  };
  _proto.onTriggerExit = function onTriggerExit(other) {
  };
  _proto.onTriggerStay = function onTriggerStay(other) {
  };
  _proto.onCollisionEnter = function onCollisionEnter(other) {
  };
  _proto.onCollisionExit = function onCollisionExit(other) {
  };
  _proto.onCollisionStay = function onCollisionStay(other) {
  };
  _proto.onPointerDown = function onPointerDown(pointer) {
  };
  _proto.onPointerUp = function onPointerUp(pointer) {
  };
  _proto.onPointerClick = function onPointerClick(pointer) {
  };
  _proto.onPointerEnter = function onPointerEnter(pointer) {
  };
  _proto.onPointerExit = function onPointerExit(pointer) {
  };
  _proto.onPointerDrag = function onPointerDrag(pointer) {
  };
  _proto.onDisable = function onDisable() {
  };
  _proto.onDestroy = function onDestroy() {
  };
  _proto._onAwake = function _onAwake() {
    this.onAwake();
  };
  _proto._onEnable = function _onEnable() {
    if (this._waitHandlingInValid) {
      this._waitHandlingInValid = false;
    } else {
      var _this_engine = this.engine, componentsManager = _this_engine._componentsManager;
      var prototype = Script2.prototype;
      if (!this._started) {
        componentsManager.addOnStartScript(this);
      }
      if (this.onUpdate !== prototype.onUpdate) {
        componentsManager.addOnUpdateScript(this);
      }
      if (this.onLateUpdate !== prototype.onLateUpdate) {
        componentsManager.addOnLateUpdateScript(this);
      }
      if (this.onPhysicsUpdate !== prototype.onPhysicsUpdate) {
        componentsManager.addOnPhysicsUpdateScript(this);
      }
      this._entity._addScript(this);
    }
    this.onEnable();
  };
  _proto._onDisable = function _onDisable() {
    this._waitHandlingInValid = true;
    this._engine._componentsManager.addDisableScript(this);
    this.onDisable();
  };
  _proto._onDestroy = function _onDestroy() {
    this._engine._componentsManager.addPendingDestroyScript(this);
  };
  _proto._handlingInValid = function _handlingInValid() {
    var componentsManager = this.engine._componentsManager;
    var prototype = Script2.prototype;
    if (this.onUpdate !== prototype.onUpdate) {
      componentsManager.removeOnUpdateScript(this);
    }
    if (this.onLateUpdate !== prototype.onLateUpdate) {
      componentsManager.removeOnLateUpdateScript(this);
    }
    if (this.onPhysicsUpdate !== prototype.onPhysicsUpdate) {
      componentsManager.removeOnPhysicsUpdateScript(this);
    }
    this._entity._removeScript(this);
    this._waitHandlingInValid = false;
  };
  return Script2;
}(Component);
__decorate([
  ignoreClone
], Script.prototype, "_started", void 0);
__decorate([
  ignoreClone
], Script.prototype, "_onStartIndex", void 0);
__decorate([
  ignoreClone
], Script.prototype, "_onUpdateIndex", void 0);
__decorate([
  ignoreClone
], Script.prototype, "_onLateUpdateIndex", void 0);
__decorate([
  ignoreClone
], Script.prototype, "_onPhysicsUpdateIndex", void 0);
__decorate([
  ignoreClone
], Script.prototype, "_onPreRenderIndex", void 0);
__decorate([
  ignoreClone
], Script.prototype, "_onPostRenderIndex", void 0);
__decorate([
  ignoreClone
], Script.prototype, "_entityScriptsIndex", void 0);
__decorate([
  ignoreClone
], Script.prototype, "_waitHandlingInValid", void 0);
var SpriteBatcher = function(Basic2DBatcher2) {
  _inherits(SpriteBatcher2, Basic2DBatcher2);
  function SpriteBatcher2() {
    return Basic2DBatcher2.apply(this, arguments);
  }
  var _proto = SpriteBatcher2.prototype;
  _proto.createVertexElements = function createVertexElements(vertexElements) {
    vertexElements[0] = new VertexElement("POSITION", 0, VertexElementFormat.Vector3, 0);
    vertexElements[1] = new VertexElement("TEXCOORD_0", 12, VertexElementFormat.Vector2, 0);
    vertexElements[2] = new VertexElement("COLOR_0", 20, VertexElementFormat.Vector4, 0);
    return 36;
  };
  _proto.canBatch = function canBatch(preElement, curElement) {
    if (!this._engine._canSpriteBatch) {
      return false;
    }
    var preRenderer = preElement.component;
    var curRenderer = curElement.component;
    if (!this.checkBatchWithMask(preRenderer, curRenderer)) {
      return false;
    }
    if (preElement.texture !== curElement.texture) {
      return false;
    }
    return preElement.material === curElement.material;
  };
  _proto.checkBatchWithMask = function checkBatchWithMask(left, right) {
    var leftMaskInteraction = left.maskInteraction;
    if (leftMaskInteraction !== right.maskInteraction) {
      return false;
    }
    if (leftMaskInteraction === SpriteMaskInteraction.None) {
      return true;
    }
    return left.maskLayer === right.maskLayer;
  };
  _proto.updateVertices = function updateVertices(element, vertices, vertexIndex) {
    var _element_renderData = element.renderData, positions = _element_renderData.positions, uvs = _element_renderData.uvs, color = _element_renderData.color, vertexCount = _element_renderData.vertexCount;
    for (var i = 0; i < vertexCount; i++) {
      var curPos = positions[i];
      var curUV = uvs[i];
      vertices[vertexIndex++] = curPos.x;
      vertices[vertexIndex++] = curPos.y;
      vertices[vertexIndex++] = curPos.z;
      vertices[vertexIndex++] = curUV.x;
      vertices[vertexIndex++] = curUV.y;
      vertices[vertexIndex++] = color.r;
      vertices[vertexIndex++] = color.g;
      vertices[vertexIndex++] = color.b;
      vertices[vertexIndex++] = color.a;
    }
    return vertexIndex;
  };
  _proto.drawBatches = function drawBatches(camera, replaceMaterial) {
    var _this = this, engine = _this._engine, batchedQueue = _this._batchedQueue;
    var mesh = this._meshes[this._flushId];
    var subMeshes = mesh.subMeshes;
    var maskManager = engine._spriteMaskManager;
    var sceneData = camera.scene.shaderData;
    var cameraData = camera.shaderData;
    for (var i = 0, len = subMeshes.length; i < len; i++) {
      var subMesh = subMeshes[i];
      var spriteElement = batchedQueue[i];
      if (!subMesh || !spriteElement) {
        return;
      }
      var renderer = spriteElement.component;
      var material = spriteElement.material;
      maskManager.preRender(camera, renderer);
      var compileMacros = Shader._compileMacros;
      ShaderMacroCollection.unionCollection(renderer._globalShaderMacro, material.shaderData._macroCollection, compileMacros);
      (replaceMaterial || material)._preRender(spriteElement);
      var program = spriteElement.shaderPass._getShaderProgram(engine, compileMacros);
      if (!program.isValid) {
        return;
      }
      renderer.shaderData.setTexture(SpriteBatcher2._textureProperty, spriteElement.texture);
      program.bind();
      program.groupingOtherUniformBlock();
      program.uploadAll(program.sceneUniformBlock, sceneData);
      program.uploadAll(program.cameraUniformBlock, cameraData);
      program.uploadAll(program.rendererUniformBlock, renderer.shaderData);
      program.uploadAll(program.materialUniformBlock, material.shaderData);
      spriteElement.renderState._apply(engine, false);
      engine._hardwareRenderer.drawPrimitive(mesh, subMesh, program);
      maskManager.postRender(renderer);
    }
  };
  _proto.destroy = function destroy() {
    this._batchedQueue = null;
    var _this = this, meshes = _this._meshes, vertexBuffers = _this._vertexBuffers, indiceBuffers = _this._indiceBuffers;
    for (var i = 0, n = meshes.length; i < n; ++i) {
      meshes[i].destroy();
    }
    this._meshes = null;
    for (var i1 = 0, n1 = vertexBuffers.length; i1 < n1; ++i1) {
      vertexBuffers[i1].destroy();
    }
    this._vertexBuffers = null;
    for (var i2 = 0, n2 = indiceBuffers.length; i2 < n2; ++i2) {
      indiceBuffers[i2].destroy();
    }
    this._indiceBuffers = null;
  };
  return SpriteBatcher2;
}(Basic2DBatcher);
(function() {
  SpriteBatcher._textureProperty = Shader.getPropertyByName("u_spriteTexture");
})();
var RenderQueue = function() {
  function RenderQueue2(engine) {
    this.items = [];
    this._spriteBatcher = new SpriteBatcher(engine);
  }
  var _proto = RenderQueue2.prototype;
  _proto.pushPrimitive = function pushPrimitive(element) {
    this.items.push(element);
  };
  _proto.render = function render(camera, replaceMaterial, mask, customShader) {
    var items = this.items;
    if (items.length === 0) {
      return;
    }
    var engine = camera.engine, scene = camera.scene;
    var renderCount = engine._renderCount;
    var rhi = engine._hardwareRenderer;
    var sceneData = scene.shaderData;
    var cameraData = camera.shaderData;
    for (var i = 0, n = items.length; i < n; i++) {
      var item = items[i];
      var renderPassFlag = item.component.entity.layer;
      if (!(renderPassFlag & mask)) {
        continue;
      }
      if (!!item.mesh) {
        this._spriteBatcher.flush(camera, replaceMaterial);
        var compileMacros = Shader._compileMacros;
        var element = item;
        var renderer = element.component;
        var material = element.material.destroyed ? engine._magentaMaterial : element.material;
        var rendererData = renderer.shaderData;
        var materialData = material.shaderData;
        (replaceMaterial || material)._preRender(element);
        ShaderMacroCollection.unionCollection(renderer._globalShaderMacro, materialData._macroCollection, compileMacros);
        var program = ((customShader == null ? void 0 : customShader.passes[0]) || (replaceMaterial == null ? void 0 : replaceMaterial.shader.passes[0]) || element.shaderPass)._getShaderProgram(engine, compileMacros);
        if (!program.isValid) {
          continue;
        }
        var switchProgram = program.bind();
        var switchRenderCount = renderCount !== program._uploadRenderCount;
        if (switchRenderCount) {
          program.groupingOtherUniformBlock();
          program.uploadAll(program.sceneUniformBlock, sceneData);
          program.uploadAll(program.cameraUniformBlock, cameraData);
          program.uploadAll(program.rendererUniformBlock, rendererData);
          program.uploadAll(program.materialUniformBlock, materialData);
          program.uploadUnGroupTextures();
          program._uploadScene = scene;
          program._uploadCamera = camera;
          program._uploadRenderer = renderer;
          program._uploadMaterial = material;
          program._uploadRenderCount = renderCount;
        } else {
          if (program._uploadScene !== scene) {
            program.uploadAll(program.sceneUniformBlock, sceneData);
            program._uploadScene = scene;
          } else if (switchProgram) {
            program.uploadTextures(program.sceneUniformBlock, sceneData);
          }
          if (program._uploadCamera !== camera) {
            program.uploadAll(program.cameraUniformBlock, cameraData);
            program._uploadCamera = camera;
          } else if (switchProgram) {
            program.uploadTextures(program.cameraUniformBlock, cameraData);
          }
          if (program._uploadRenderer !== renderer) {
            program.uploadAll(program.rendererUniformBlock, rendererData);
            program._uploadRenderer = renderer;
          } else if (switchProgram) {
            program.uploadTextures(program.rendererUniformBlock, rendererData);
          }
          if (program._uploadMaterial !== material) {
            program.uploadAll(program.materialUniformBlock, materialData);
            program._uploadMaterial = material;
          } else if (switchProgram) {
            program.uploadTextures(program.materialUniformBlock, materialData);
          }
          if (switchProgram) {
            program.uploadUnGroupTextures();
          }
        }
        element.renderState._apply(engine, renderer.entity.transform._isFrontFaceInvert());
        rhi.drawPrimitive(element.mesh, element.subMesh, program);
      } else {
        var spriteElement = item;
        this._spriteBatcher.drawElement(spriteElement, camera, replaceMaterial);
      }
    }
    this._spriteBatcher.flush(camera, replaceMaterial);
  };
  _proto.clear = function clear() {
    this.items.length = 0;
    this._spriteBatcher.clear();
  };
  _proto.destroy = function destroy() {
    this._spriteBatcher.destroy();
    this._spriteBatcher = null;
  };
  _proto.sort = function sort(compareFunc) {
    this._quickSort(this.items, 0, this.items.length, compareFunc);
  };
  _proto._quickSort = function _quickSort(a, from, to, compareFunc) {
    while (true) {
      if (to - from <= 10) {
        this._insertionSort(a, from, to, compareFunc);
        return;
      }
      var third_index = from + to >> 1;
      var v0 = a[from];
      var v1 = a[to - 1];
      var v2 = a[third_index];
      var c01 = compareFunc(v0, v1);
      if (c01 > 0) {
        var tmp = v0;
        v0 = v1;
        v1 = tmp;
      }
      var c02 = compareFunc(v0, v2);
      if (c02 >= 0) {
        var tmp1 = v0;
        v0 = v2;
        v2 = v1;
        v1 = tmp1;
      } else {
        var c12 = compareFunc(v1, v2);
        if (c12 > 0) {
          var tmp2 = v1;
          v1 = v2;
          v2 = tmp2;
        }
      }
      a[from] = v0;
      a[to - 1] = v2;
      var pivot = v1;
      var low_end = from + 1;
      var high_start = to - 1;
      a[third_index] = a[low_end];
      a[low_end] = pivot;
      partition:
        for (var i = low_end + 1; i < high_start; i++) {
          var element = a[i];
          var order = compareFunc(element, pivot);
          if (order < 0) {
            a[i] = a[low_end];
            a[low_end] = element;
            low_end++;
          } else if (order > 0) {
            do {
              high_start--;
              if (high_start == i)
                break partition;
              var top_elem = a[high_start];
              order = compareFunc(top_elem, pivot);
            } while (order > 0);
            a[i] = a[high_start];
            a[high_start] = element;
            if (order < 0) {
              element = a[i];
              a[i] = a[low_end];
              a[low_end] = element;
              low_end++;
            }
          }
        }
      if (to - high_start < low_end - from) {
        this._quickSort(a, high_start, to, compareFunc);
        to = low_end;
      } else {
        this._quickSort(a, from, low_end, compareFunc);
        from = high_start;
      }
    }
  };
  _proto._insertionSort = function _insertionSort(a, from, to, compareFunc) {
    for (var i = from + 1; i < to; i++) {
      var j = void 0;
      var element = a[i];
      for (j = i - 1; j >= from; j--) {
        var tmp = a[j];
        var order = compareFunc(tmp, element);
        if (order > 0) {
          a[j + 1] = tmp;
        } else {
          break;
        }
      }
      a[j + 1] = element;
    }
  };
  RenderQueue2._compareFromNearToFar = function _compareFromNearToFar(a, b) {
    return a.component.priority - b.component.priority || a.component._distanceForSort - b.component._distanceForSort;
  };
  RenderQueue2._compareFromFarToNear = function _compareFromFarToNear(a, b) {
    return a.component.priority - b.component.priority || b.component._distanceForSort - a.component._distanceForSort;
  };
  return RenderQueue2;
}();
var VirtualCamera = function VirtualCamera2() {
  this.position = new Vector3();
  this.isOrthographic = false;
  this.viewMatrix = new Matrix();
  this.projectionMatrix = new Matrix();
  this.viewProjectionMatrix = new Matrix();
  this.forward = new Vector3();
};
var ShadowSliceData = function ShadowSliceData2() {
  this.virtualCamera = new VirtualCamera();
  this.cullPlanes = [
    new Plane(new Vector3()),
    new Plane(new Vector3()),
    new Plane(new Vector3()),
    new Plane(new Vector3()),
    new Plane(new Vector3()),
    new Plane(new Vector3()),
    new Plane(new Vector3()),
    new Plane(new Vector3()),
    new Plane(new Vector3()),
    new Plane(new Vector3())
  ];
  this.splitBoundSphere = new BoundingSphere(new Vector3(), 0);
};
var FrustumCorner;
(function(FrustumCorner2) {
  FrustumCorner2[FrustumCorner2["FarBottomLeft"] = 0] = "FarBottomLeft";
  FrustumCorner2[FrustumCorner2["FarTopLeft"] = 1] = "FarTopLeft";
  FrustumCorner2[FrustumCorner2["FarTopRight"] = 2] = "FarTopRight";
  FrustumCorner2[FrustumCorner2["FarBottomRight"] = 3] = "FarBottomRight";
  FrustumCorner2[FrustumCorner2["nearBottomLeft"] = 4] = "nearBottomLeft";
  FrustumCorner2[FrustumCorner2["nearTopLeft"] = 5] = "nearTopLeft";
  FrustumCorner2[FrustumCorner2["nearTopRight"] = 6] = "nearTopRight";
  FrustumCorner2[FrustumCorner2["nearBottomRight"] = 7] = "nearBottomRight";
  FrustumCorner2[FrustumCorner2["unknown"] = 8] = "unknown";
})(FrustumCorner || (FrustumCorner = {}));
var ShadowUtils = function() {
  function ShadowUtils2() {
  }
  ShadowUtils2.shadowResolution = function shadowResolution(value) {
    switch (value) {
      case ShadowResolution.Low:
        return 512;
      case ShadowResolution.Medium:
        return 1024;
      case ShadowResolution.High:
        return 2048;
      case ShadowResolution.VeryHigh:
        return 4096;
    }
  };
  ShadowUtils2.shadowDepthFormat = function shadowDepthFormat(value, supportDepthTexture) {
    if (supportDepthTexture) {
      return TextureFormat.Depth16;
    } else {
      return TextureFormat.R8G8B8A8;
    }
  };
  ShadowUtils2.cullingRenderBounds = function cullingRenderBounds(bounds, cullPlaneCount, cullPlanes) {
    var min = bounds.min, max = bounds.max;
    for (var i = 0; i < cullPlaneCount; i++) {
      var plane = cullPlanes[i];
      var normal = plane.normal;
      if (normal.x * (normal.x >= 0 ? max.x : min.x) + normal.y * (normal.y >= 0 ? max.y : min.y) + normal.z * (normal.z >= 0 ? max.z : min.z) < -plane.distance) {
        return false;
      }
    }
    return true;
  };
  ShadowUtils2.shadowCullFrustum = function shadowCullFrustum(context, light, renderer, shadowSliceData) {
    var layer = renderer._entity.layer;
    if (context.camera.cullingMask & layer && light.cullingMask & layer) {
      if (renderer.castShadows && ShadowUtils2.cullingRenderBounds(renderer.bounds, shadowSliceData.cullPlaneCount, shadowSliceData.cullPlanes)) {
        renderer._renderFrameCount = renderer.engine.time._frameCount;
        renderer._prepareRender(context);
      }
    }
  };
  ShadowUtils2.getBoundSphereByFrustum = function getBoundSphereByFrustum(near, far, camera, forward, shadowSliceData) {
    var aspectRatio = camera.aspectRatio, fieldOfView = camera.fieldOfView;
    var centerZ;
    var radius;
    var k = Math.sqrt(1 + aspectRatio * aspectRatio) * Math.tan(MathUtil.degreeToRadian(fieldOfView) / 2);
    var k2 = k * k;
    var farSNear = far - near;
    var farANear = far + near;
    if (k2 > farSNear / farANear) {
      centerZ = far;
      radius = far * k;
    } else {
      centerZ = 0.5 * farANear * (1 + k2);
      radius = 0.5 * Math.sqrt(farSNear * farSNear + 2 * (far * far + near * near) * k2 + farANear * farANear * k2 * k2);
    }
    var center = shadowSliceData.splitBoundSphere.center;
    shadowSliceData.splitBoundSphere.radius = radius;
    Vector3.scale(forward, centerZ, center);
    Vector3.add(camera.entity.transform.worldPosition, center, center);
    shadowSliceData.sphereCenterZ = centerZ;
  };
  ShadowUtils2.getDirectionLightShadowCullPlanes = function getDirectionLightShadowCullPlanes(cameraFrustum, splitDistance, cameraNear, direction, shadowSliceData) {
    var frustumCorners = ShadowUtils2._frustumCorners;
    var backPlaneFaces = ShadowUtils2._backPlaneFaces;
    var planeNeighbors = ShadowUtils2._frustumPlaneNeighbors;
    var twoPlaneCorners = ShadowUtils2._frustumTwoPlaneCorners;
    var edgePlanePoint2 = ShadowUtils2._edgePlanePoint2;
    var out = shadowSliceData.cullPlanes;
    var near = cameraFrustum.getPlane(FrustumFace.Near);
    var far = cameraFrustum.getPlane(FrustumFace.Far);
    var left = cameraFrustum.getPlane(FrustumFace.Left);
    var right = cameraFrustum.getPlane(FrustumFace.Right);
    var bottom = cameraFrustum.getPlane(FrustumFace.Bottom);
    var top = cameraFrustum.getPlane(FrustumFace.Top);
    var splitNearDistance = splitDistance - cameraNear;
    var splitNear = ShadowUtils2._adjustNearPlane;
    var splitFar = ShadowUtils2._adjustFarPlane;
    splitNear.normal.copyFrom(near.normal);
    splitFar.normal.copyFrom(far.normal);
    splitNear.distance = near.distance - splitNearDistance;
    splitFar.distance = Math.min(-near.distance + shadowSliceData.sphereCenterZ + shadowSliceData.splitBoundSphere.radius, far.distance);
    CollisionUtil.intersectionPointThreePlanes(splitNear, bottom, right, frustumCorners[7]);
    CollisionUtil.intersectionPointThreePlanes(splitNear, top, right, frustumCorners[6]);
    CollisionUtil.intersectionPointThreePlanes(splitNear, top, left, frustumCorners[5]);
    CollisionUtil.intersectionPointThreePlanes(splitNear, bottom, left, frustumCorners[4]);
    CollisionUtil.intersectionPointThreePlanes(splitFar, bottom, right, frustumCorners[3]);
    CollisionUtil.intersectionPointThreePlanes(splitFar, top, right, frustumCorners[2]);
    CollisionUtil.intersectionPointThreePlanes(splitFar, top, left, frustumCorners[1]);
    CollisionUtil.intersectionPointThreePlanes(splitFar, bottom, left, frustumCorners[0]);
    var backIndex = 0;
    for (var i = 0; i < 6; i++) {
      var plane = void 0;
      switch (i) {
        case FrustumFace.Near:
          plane = splitNear;
          break;
        case FrustumFace.Far:
          plane = splitFar;
          break;
        default:
          plane = cameraFrustum.getPlane(i);
          break;
      }
      if (Vector3.dot(plane.normal, direction) < 0) {
        out[backIndex].copyFrom(plane);
        backPlaneFaces[backIndex] = i;
        backIndex++;
      }
    }
    var edgeIndex = backIndex;
    for (var i1 = 0; i1 < backIndex; i1++) {
      var backFace = backPlaneFaces[i1];
      var neighborFaces = planeNeighbors[backFace];
      for (var j = 0; j < 4; j++) {
        var neighborFace = neighborFaces[j];
        var notBackFace = true;
        for (var k = 0; k < backIndex; k++)
          if (neighborFace == backPlaneFaces[k]) {
            notBackFace = false;
            break;
          }
        if (notBackFace) {
          var corners = twoPlaneCorners[backFace][neighborFace];
          var point0 = frustumCorners[corners[0]];
          var point1 = frustumCorners[corners[1]];
          Vector3.add(point0, direction, edgePlanePoint2);
          Plane.fromPoints(point0, point1, edgePlanePoint2, out[edgeIndex++]);
        }
      }
    }
    shadowSliceData.cullPlaneCount = edgeIndex;
  };
  ShadowUtils2.getDirectionalLightMatrices = function getDirectionalLightMatrices(lightUp, lightSide, lightForward, cascadeIndex, nearPlane, shadowResolution, shadowSliceData, outShadowMatrices) {
    var boundSphere = shadowSliceData.splitBoundSphere;
    shadowSliceData.resolution = shadowResolution;
    var center = boundSphere.center;
    var radius = boundSphere.radius;
    var halfShadowResolution = shadowResolution / 2;
    var borderRadius = radius * halfShadowResolution / (halfShadowResolution - ShadowUtils2.atlasBorderSize);
    var borderDiam = borderRadius * 2;
    var sizeUnit = shadowResolution / borderDiam;
    var radiusUnit = borderDiam / shadowResolution;
    var upLen = Math.ceil(Vector3.dot(center, lightUp) * sizeUnit) * radiusUnit;
    var sideLen = Math.ceil(Vector3.dot(center, lightSide) * sizeUnit) * radiusUnit;
    var forwardLen = Vector3.dot(center, lightForward);
    center.x = lightUp.x * upLen + lightSide.x * sideLen + lightForward.x * forwardLen;
    center.y = lightUp.y * upLen + lightSide.y * sideLen + lightForward.y * forwardLen;
    center.z = lightUp.z * upLen + lightSide.z * sideLen + lightForward.z * forwardLen;
    var virtualCamera = shadowSliceData.virtualCamera;
    var position = virtualCamera.position;
    var viewMatrix = virtualCamera.viewMatrix;
    var projectMatrix = virtualCamera.projectionMatrix;
    Vector3.scale(lightForward, radius + nearPlane, position);
    Vector3.subtract(center, position, position);
    Matrix.lookAt(position, center, lightUp, viewMatrix);
    Matrix.ortho(-borderRadius, borderRadius, -borderRadius, borderRadius, 0, radius * 2 + nearPlane, projectMatrix);
    var viewProjectionMatrix = virtualCamera.viewProjectionMatrix;
    Matrix.multiply(projectMatrix, viewMatrix, viewProjectionMatrix);
    Utils._floatMatrixMultiply(ShadowUtils2._shadowMapCoordMatrix, viewProjectionMatrix.elements, 0, outShadowMatrices, cascadeIndex * 16);
  };
  ShadowUtils2.getMaxTileResolutionInAtlas = function getMaxTileResolutionInAtlas(atlasWidth, atlasHeight, tileCount) {
    var resolution = Math.min(atlasWidth, atlasHeight);
    var currentTileCount = Math.floor(atlasWidth / resolution) * Math.floor(atlasHeight / resolution);
    while (currentTileCount < tileCount) {
      resolution = Math.floor(resolution >> 1);
      currentTileCount = Math.floor(atlasWidth / resolution) * Math.floor(atlasHeight / resolution);
    }
    return resolution;
  };
  ShadowUtils2.getShadowBias = function getShadowBias(light, projectionMatrix, shadowResolution, out) {
    var frustumSize = 2 / projectionMatrix.elements[0];
    var texelSize = frustumSize / shadowResolution;
    var depthBias = -light.shadowBias * texelSize;
    var normalBias = -light.shadowNormalBias * texelSize;
    if (light.shadowType == ShadowType.SoftHigh) {
      var kernelRadius = 2.5;
      depthBias *= kernelRadius;
      normalBias *= kernelRadius;
    }
    out.set(depthBias, normalBias);
  };
  ShadowUtils2.applySliceTransform = function applySliceTransform(tileSize, atlasWidth, atlasHeight, cascadeIndex, atlasOffset, outShadowMatrices) {
    var sliceMatrix = ShadowUtils2._tempMatrix0;
    var slice = sliceMatrix.elements;
    var oneOverAtlasWidth = 1 / atlasWidth;
    var oneOverAtlasHeight = 1 / atlasHeight;
    var scaleX = tileSize * oneOverAtlasWidth;
    var scaleY = tileSize * oneOverAtlasHeight;
    var offsetX = atlasOffset.x * oneOverAtlasWidth;
    var offsetY = atlasOffset.y * oneOverAtlasHeight;
    slice[0] = scaleX, slice[1] = 0, slice[2] = 0, slice[3] = 0;
    slice[4] = 0, slice[5] = scaleY, slice[6] = 0, slice[7] = 0;
    slice[8] = 0, slice[9] = 0, slice[10] = 1, slice[11] = 0;
    slice[12] = offsetX, slice[13] = offsetY, slice[14] = 0, slice[15] = 1;
    var offset = cascadeIndex * 16;
    Utils._floatMatrixMultiply(sliceMatrix, outShadowMatrices, offset, outShadowMatrices, offset);
  };
  return ShadowUtils2;
}();
(function() {
  ShadowUtils._tempMatrix0 = new Matrix();
})();
(function() {
  ShadowUtils._shadowMapCoordMatrix = new Matrix(0.5, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0.5, 0, 0.5, 0.5, 0.5, 1);
})();
(function() {
  ShadowUtils._frustumCorners = [
    new Vector3(),
    new Vector3(),
    new Vector3(),
    new Vector3(),
    new Vector3(),
    new Vector3(),
    new Vector3(),
    new Vector3()
  ];
})();
(function() {
  ShadowUtils._adjustNearPlane = new Plane(new Vector3());
})();
(function() {
  ShadowUtils._adjustFarPlane = new Plane(new Vector3());
})();
(function() {
  ShadowUtils._backPlaneFaces = new Array(5);
})();
(function() {
  ShadowUtils._edgePlanePoint2 = new Vector3();
})();
(function() {
  ShadowUtils._frustumPlaneNeighbors = [
    [
      FrustumFace.Left,
      FrustumFace.Right,
      FrustumFace.Top,
      FrustumFace.Bottom
    ],
    [
      FrustumFace.Left,
      FrustumFace.Right,
      FrustumFace.Top,
      FrustumFace.Bottom
    ],
    [
      FrustumFace.Near,
      FrustumFace.Far,
      FrustumFace.Top,
      FrustumFace.Bottom
    ],
    [
      FrustumFace.Near,
      FrustumFace.Far,
      FrustumFace.Top,
      FrustumFace.Bottom
    ],
    [
      FrustumFace.Near,
      FrustumFace.Far,
      FrustumFace.Left,
      FrustumFace.Right
    ],
    [
      FrustumFace.Near,
      FrustumFace.Far,
      FrustumFace.Left,
      FrustumFace.Right
    ]
  ];
})();
(function() {
  ShadowUtils._frustumTwoPlaneCorners = [
    [
      // near, far, left, right, bottom, top
      [
        8,
        8
      ],
      [
        8,
        8
      ],
      [
        4,
        5
      ],
      [
        6,
        7
      ],
      [
        7,
        4
      ],
      [
        5,
        6
      ]
    ],
    [
      // near, far, left, right, bottom, top
      [
        8,
        8
      ],
      [
        8,
        8
      ],
      [
        1,
        0
      ],
      [
        3,
        2
      ],
      [
        0,
        3
      ],
      [
        2,
        1
      ]
    ],
    [
      // near, far, left, right, bottom, top
      [
        5,
        4
      ],
      [
        0,
        1
      ],
      [
        8,
        8
      ],
      [
        8,
        8
      ],
      [
        4,
        0
      ],
      [
        1,
        5
      ]
    ],
    [
      // near, far, left, right, bottom, top
      [
        7,
        6
      ],
      [
        2,
        3
      ],
      [
        8,
        8
      ],
      [
        8,
        8
      ],
      [
        3,
        7
      ],
      [
        6,
        2
      ]
    ],
    [
      // near, far, left, right, bottom, top
      [
        4,
        7
      ],
      [
        3,
        0
      ],
      [
        0,
        4
      ],
      [
        7,
        3
      ],
      [
        8,
        8
      ],
      [
        8,
        8
      ]
    ],
    [
      // near, far, left, right, bottom, top
      [
        6,
        5
      ],
      [
        1,
        2
      ],
      [
        5,
        1
      ],
      [
        2,
        6
      ],
      [
        8,
        8
      ],
      [
        8,
        8
      ]
    ]
  ];
})();
(function() {
  ShadowUtils.atlasBorderSize = 4;
})();
var CascadedShadowCasterPass = function() {
  function CascadedShadowCasterPass2(camera) {
    this._shadowMapSize = new Vector4();
    this._shadowBias = new Vector2();
    this._shadowSliceData = new ShadowSliceData();
    this._lightUp = new Vector3();
    this._lightSide = new Vector3();
    this._existShadowMap = false;
    this._splitBoundSpheres = new Float32Array(CascadedShadowCasterPass2._maxCascades * 4);
    this._shadowMatrices = new Float32Array((CascadedShadowCasterPass2._maxCascades + 1) * 16);
    this._shadowInfos = new Vector3();
    this._viewportOffsets = [
      new Vector2(),
      new Vector2(),
      new Vector2(),
      new Vector2()
    ];
    this._camera = camera;
    this._engine = camera.engine;
    this._supportDepthTexture = camera.engine._hardwareRenderer.canIUse(GLCapabilityType.depthTexture);
    this._shadowCasterShader = Shader.find("shadow-map");
    this._shadowSliceData.virtualCamera.isOrthographic = true;
  }
  var _proto = CascadedShadowCasterPass2.prototype;
  _proto._render = function _render(context) {
    this._updateShadowSettings();
    this._existShadowMap = false;
    this._renderDirectShadowMap(context);
    if (this._existShadowMap) {
      this._updateReceiversShaderData();
    }
  };
  _proto._renderDirectShadowMap = function _renderDirectShadowMap(context) {
    var _this = this, engine = _this._engine, camera = _this._camera, shadowCasterShader = _this._shadowCasterShader, viewports = _this._viewportOffsets, shadowSliceData = _this._shadowSliceData, splitBoundSpheres = _this._splitBoundSpheres, shadowMatrices = _this._shadowMatrices;
    var _camera__renderPipeline = camera._renderPipeline, opaqueQueue = _camera__renderPipeline._opaqueQueue, alphaTestQueue = _camera__renderPipeline._alphaTestQueue, transparentQueue = _camera__renderPipeline._transparentQueue;
    var componentsManager = engine._componentsManager;
    var rhi = engine._hardwareRenderer;
    var shadowCascades = camera.scene.shadowCascades;
    var splitDistance = CascadedShadowCasterPass2._cascadesSplitDistance;
    var boundSphere = shadowSliceData.splitBoundSphere;
    var lightWorld = CascadedShadowCasterPass2._tempMatrix0;
    var lightWorldE = lightWorld.elements;
    var lightUp = this._lightUp;
    var lightSide = this._lightSide;
    var lightForward = shadowSliceData.virtualCamera.forward;
    var sunLightIndex = engine._lightManager._getSunLightIndex();
    if (sunLightIndex !== -1) {
      var light = camera.scene._sunLight;
      var shadowFar = Math.min(camera.scene.shadowDistance, camera.farClipPlane);
      this._getCascadesSplitDistance(shadowFar);
      var renderTarget = this._getAvailableRenderTarget();
      rhi.activeRenderTarget(renderTarget, CascadedShadowCasterPass2._viewport, 0);
      if (this._supportDepthTexture) {
        rhi.clearRenderTarget(engine, CameraClearFlags.Depth, null);
      } else {
        rhi.clearRenderTarget(engine, CameraClearFlags.All, CascadedShadowCasterPass2._clearColor);
      }
      this._shadowInfos.x = light.shadowStrength;
      this._shadowInfos.z = sunLightIndex;
      Matrix.rotationQuaternion(light.entity.transform.worldRotationQuaternion, lightWorld);
      lightSide.set(lightWorldE[0], lightWorldE[1], lightWorldE[2]);
      lightUp.set(lightWorldE[4], lightWorldE[5], lightWorldE[6]);
      lightForward.set(-lightWorldE[8], -lightWorldE[9], -lightWorldE[10]);
      camera.entity.transform.getWorldForward(CascadedShadowCasterPass2._tempVector);
      var shadowTileResolution = this._shadowTileResolution;
      for (var j = 0; j < shadowCascades; j++) {
        ShadowUtils.getBoundSphereByFrustum(splitDistance[j], splitDistance[j + 1], camera, CascadedShadowCasterPass2._tempVector.normalize(), shadowSliceData);
        ShadowUtils.getDirectionLightShadowCullPlanes(camera._frustum, splitDistance[j], camera.nearClipPlane, lightForward, shadowSliceData);
        ShadowUtils.getDirectionalLightMatrices(lightUp, lightSide, lightForward, j, light.shadowNearPlane, shadowTileResolution, shadowSliceData, shadowMatrices);
        if (shadowCascades > 1) {
          var shadowMapSize = this._shadowMapSize;
          ShadowUtils.applySliceTransform(shadowTileResolution, shadowMapSize.z, shadowMapSize.w, j, this._viewportOffsets[j], shadowMatrices);
        }
        this._updateSingleShadowCasterShaderData(light, shadowSliceData, context);
        var center = boundSphere.center;
        var radius = boundSphere.radius;
        var offset = j * 4;
        splitBoundSpheres[offset] = center.x;
        splitBoundSpheres[offset + 1] = center.y;
        splitBoundSpheres[offset + 2] = center.z;
        splitBoundSpheres[offset + 3] = radius * radius;
        opaqueQueue.clear();
        alphaTestQueue.clear();
        transparentQueue.clear();
        var renderers = componentsManager._renderers;
        var elements = renderers._elements;
        for (var k = renderers.length - 1; k >= 0; --k) {
          ShadowUtils.shadowCullFrustum(context, light, elements[k], shadowSliceData);
        }
        if (opaqueQueue.items.length || alphaTestQueue.items.length) {
          opaqueQueue.sort(RenderQueue._compareFromNearToFar);
          alphaTestQueue.sort(RenderQueue._compareFromNearToFar);
          var _viewports_j = viewports[j], x = _viewports_j.x, y = _viewports_j.y;
          rhi.setGlobalDepthBias(1, 1);
          rhi.viewport(x, y, shadowTileResolution, shadowTileResolution);
          rhi.scissor(x + 1, y + 1, shadowTileResolution - 2, shadowTileResolution - 2);
          engine._renderCount++;
          opaqueQueue.render(camera, null, Layer.Everything, shadowCasterShader);
          alphaTestQueue.render(camera, null, Layer.Everything, shadowCasterShader);
          rhi.setGlobalDepthBias(0, 0);
        }
      }
      this._existShadowMap = true;
    }
  };
  _proto._updateReceiversShaderData = function _updateReceiversShaderData() {
    var scene = this._camera.scene;
    var splitBoundSpheres = this._splitBoundSpheres;
    var shadowMatrices = this._shadowMatrices;
    var shadowCascades = scene.shadowCascades;
    if (shadowCascades > 1) {
      for (var i = shadowCascades * 4, n = splitBoundSpheres.length; i < n; i++) {
        splitBoundSpheres[i] = 0;
      }
    }
    for (var i1 = shadowCascades * 16, n1 = shadowMatrices.length; i1 < n1; i1++) {
      shadowMatrices[i1] = 0;
    }
    var shaderData = scene.shaderData;
    shaderData.setFloatArray(CascadedShadowCasterPass2._shadowMatricesProperty, this._shadowMatrices);
    shaderData.setVector3(CascadedShadowCasterPass2._shadowInfosProperty, this._shadowInfos);
    shaderData.setTexture(CascadedShadowCasterPass2._shadowMapsProperty, this._depthTexture);
    shaderData.setFloatArray(CascadedShadowCasterPass2._shadowSplitSpheresProperty, this._splitBoundSpheres);
    shaderData.setVector4(CascadedShadowCasterPass2._shadowMapSize, this._shadowMapSize);
  };
  _proto._getCascadesSplitDistance = function _getCascadesSplitDistance(shadowFar) {
    var cascadesSplitDistance = CascadedShadowCasterPass2._cascadesSplitDistance;
    var _this__camera_scene = this._camera.scene, shadowTwoCascadeSplits = _this__camera_scene.shadowTwoCascadeSplits, shadowFourCascadeSplits = _this__camera_scene.shadowFourCascadeSplits, shadowCascades = _this__camera_scene.shadowCascades;
    var _this__camera = this._camera, nearClipPlane = _this__camera.nearClipPlane, aspectRatio = _this__camera.aspectRatio, fieldOfView = _this__camera.fieldOfView;
    cascadesSplitDistance[0] = nearClipPlane;
    var range = shadowFar - nearClipPlane;
    var tFov = Math.tan(MathUtil.degreeToRadian(fieldOfView) * 0.5);
    var denominator = 1 + tFov * tFov * (aspectRatio * aspectRatio + 1);
    switch (shadowCascades) {
      case ShadowCascadesMode.NoCascades:
        cascadesSplitDistance[1] = this._getFarWithRadius(shadowFar, denominator);
        break;
      case ShadowCascadesMode.TwoCascades:
        cascadesSplitDistance[1] = this._getFarWithRadius(nearClipPlane + range * shadowTwoCascadeSplits, denominator);
        cascadesSplitDistance[2] = this._getFarWithRadius(shadowFar, denominator);
        break;
      case ShadowCascadesMode.FourCascades:
        cascadesSplitDistance[1] = this._getFarWithRadius(nearClipPlane + range * shadowFourCascadeSplits.x, denominator);
        cascadesSplitDistance[2] = this._getFarWithRadius(nearClipPlane + range * shadowFourCascadeSplits.y, denominator);
        cascadesSplitDistance[3] = this._getFarWithRadius(nearClipPlane + range * shadowFourCascadeSplits.z, denominator);
        cascadesSplitDistance[4] = this._getFarWithRadius(shadowFar, denominator);
        break;
    }
  };
  _proto._getFarWithRadius = function _getFarWithRadius(radius, denominator) {
    return Math.sqrt(radius * radius / denominator);
  };
  _proto._getAvailableRenderTarget = function _getAvailableRenderTarget() {
    var engine = this._engine;
    var format = this._shadowMapFormat;
    var _this__shadowMapSize = this._shadowMapSize, width = _this__shadowMapSize.z, height = _this__shadowMapSize.w;
    var depthTexture = this._depthTexture;
    var renderTarget = this._renderTargets;
    if (renderTarget == null || (depthTexture == null ? void 0 : depthTexture.width) !== width || (depthTexture == null ? void 0 : depthTexture.height) !== height || (depthTexture == null ? void 0 : depthTexture.format) !== format) {
      depthTexture = this._depthTexture = new Texture2D(engine, width, height, format, false);
      depthTexture.wrapModeV = depthTexture.wrapModeU = TextureWrapMode.Clamp;
      if (engine._hardwareRenderer._isWebGL2) {
        depthTexture.depthCompareFunction = TextureDepthCompareFunction.Less;
      }
      if (this._supportDepthTexture) {
        renderTarget = this._renderTargets = new RenderTarget(engine, width, height, null, depthTexture);
      } else {
        renderTarget = this._renderTargets = new RenderTarget(engine, width, height, depthTexture);
      }
    }
    return renderTarget;
  };
  _proto._updateShadowSettings = function _updateShadowSettings() {
    var scene = this._camera.scene;
    var shadowFormat = ShadowUtils.shadowDepthFormat(scene.shadowResolution, this._supportDepthTexture);
    var shadowResolution = ShadowUtils.shadowResolution(scene.shadowResolution);
    var shadowCascades = scene.shadowCascades;
    if (shadowFormat !== this._shadowMapFormat || shadowResolution !== this._shadowMapResolution || shadowCascades !== this._shadowCascadeMode) {
      this._shadowMapFormat = shadowFormat;
      this._shadowMapResolution = shadowResolution;
      this._shadowCascadeMode = shadowCascades;
      if (shadowCascades == ShadowCascadesMode.NoCascades) {
        this._shadowTileResolution = shadowResolution;
        this._shadowMapSize.set(1 / shadowResolution, 1 / shadowResolution, shadowResolution, shadowResolution);
      } else {
        var shadowTileResolution = ShadowUtils.getMaxTileResolutionInAtlas(shadowResolution, shadowResolution, shadowCascades);
        this._shadowTileResolution = shadowTileResolution;
        var width = shadowTileResolution * 2;
        var height = shadowCascades == ShadowCascadesMode.TwoCascades ? shadowTileResolution : shadowTileResolution * 2;
        this._shadowMapSize.set(1 / width, 1 / height, width, height);
      }
      this._renderTargets = null;
      var viewportOffset = this._viewportOffsets;
      var shadowTileResolution1 = this._shadowTileResolution;
      switch (shadowCascades) {
        case ShadowCascadesMode.NoCascades:
          viewportOffset[0].set(0, 0);
          break;
        case ShadowCascadesMode.TwoCascades:
          viewportOffset[0].set(0, 0);
          viewportOffset[1].set(shadowTileResolution1, 0);
          break;
        case ShadowCascadesMode.FourCascades:
          viewportOffset[0].set(0, 0);
          viewportOffset[1].set(shadowTileResolution1, 0);
          viewportOffset[2].set(0, shadowTileResolution1);
          viewportOffset[3].set(shadowTileResolution1, shadowTileResolution1);
      }
    }
  };
  _proto._updateSingleShadowCasterShaderData = function _updateSingleShadowCasterShaderData(light, shadowSliceData, context) {
    var virtualCamera = shadowSliceData.virtualCamera;
    ShadowUtils.getShadowBias(light, virtualCamera.projectionMatrix, this._shadowTileResolution, this._shadowBias);
    var sceneShaderData = this._camera.scene.shaderData;
    sceneShaderData.setVector2(CascadedShadowCasterPass2._lightShadowBiasProperty, this._shadowBias);
    sceneShaderData.setVector3(CascadedShadowCasterPass2._lightDirectionProperty, light.direction);
    context.applyVirtualCamera(virtualCamera);
  };
  return CascadedShadowCasterPass2;
}();
(function() {
  CascadedShadowCasterPass._lightShadowBiasProperty = Shader.getPropertyByName("u_shadowBias");
})();
(function() {
  CascadedShadowCasterPass._lightDirectionProperty = Shader.getPropertyByName("u_lightDirection");
})();
(function() {
  CascadedShadowCasterPass._shadowMatricesProperty = Shader.getPropertyByName("u_shadowMatrices");
})();
(function() {
  CascadedShadowCasterPass._shadowMapSize = Shader.getPropertyByName("u_shadowMapSize");
})();
(function() {
  CascadedShadowCasterPass._shadowInfosProperty = Shader.getPropertyByName("u_shadowInfo");
})();
(function() {
  CascadedShadowCasterPass._shadowMapsProperty = Shader.getPropertyByName("u_shadowMap");
})();
(function() {
  CascadedShadowCasterPass._shadowSplitSpheresProperty = Shader.getPropertyByName("u_shadowSplitSpheres");
})();
(function() {
  CascadedShadowCasterPass._maxCascades = 4;
})();
(function() {
  CascadedShadowCasterPass._cascadesSplitDistance = new Array(CascadedShadowCasterPass._maxCascades + 1);
})();
(function() {
  CascadedShadowCasterPass._viewport = new Vector4(0, 0, 1, 1);
})();
(function() {
  CascadedShadowCasterPass._clearColor = new Color(1, 1, 1, 1);
})();
(function() {
  CascadedShadowCasterPass._tempVector = new Vector3();
})();
(function() {
  CascadedShadowCasterPass._tempMatrix0 = new Matrix();
})();
var passNum = 0;
var RenderPass = function() {
  function RenderPass2(name, priority, renderTarget, replaceMaterial, mask) {
    if (name === void 0)
      name = "RENDER_PASS" + passNum++;
    if (priority === void 0)
      priority = 0;
    if (renderTarget === void 0)
      renderTarget = null;
    if (replaceMaterial === void 0)
      replaceMaterial = null;
    if (mask === void 0)
      mask = null;
    this.name = name;
    this.enabled = true;
    this.priority = priority;
    this.renderTarget = renderTarget;
    this.replaceMaterial = replaceMaterial;
    this.mask = mask || Layer.Everything;
    this.renderOverride = false;
  }
  var _proto = RenderPass2.prototype;
  _proto.render = function render(camera, opaqueQueue, alphaTestQueue, transparentQueue) {
  };
  _proto.preRender = function preRender(camera, opaqueQueue, alphaTestQueue, transparentQueue) {
  };
  _proto.postRender = function postRender(camera, opaqueQueue, alphaTestQueue, transparentQueue) {
  };
  return RenderPass2;
}();
var BasicRenderPipeline = function() {
  function BasicRenderPipeline2(camera) {
    this._allSpriteMasks = new DisorderedArray();
    this._lastCanvasSize = new Vector2();
    this._camera = camera;
    var engine = camera.engine;
    this._opaqueQueue = new RenderQueue(engine);
    this._alphaTestQueue = new RenderQueue(engine);
    this._transparentQueue = new RenderQueue(engine);
    this._cascadedShadowCaster = new CascadedShadowCasterPass(camera);
    this._renderPassArray = [];
    this._defaultPass = new RenderPass("default", 0, null, null, 0);
    this.addRenderPass(this._defaultPass);
  }
  var _proto = BasicRenderPipeline2.prototype;
  _proto.addRenderPass = function addRenderPass(nameOrPass, priority, renderTarget, replaceMaterial, mask) {
    if (priority === void 0)
      priority = null;
    if (renderTarget === void 0)
      renderTarget = null;
    if (replaceMaterial === void 0)
      replaceMaterial = null;
    if (mask === void 0)
      mask = null;
    if (typeof nameOrPass === "string") {
      var renderPass = new RenderPass(nameOrPass, priority, renderTarget, replaceMaterial, mask);
      this._renderPassArray.push(renderPass);
    } else if (_instanceof(nameOrPass, RenderPass)) {
      this._renderPassArray.push(nameOrPass);
    }
    this._renderPassArray.sort(function(p1, p2) {
      return p1.priority - p2.priority;
    });
  };
  _proto.removeRenderPass = function removeRenderPass(nameOrPass) {
    var pass;
    if (typeof nameOrPass === "string")
      pass = this.getRenderPass(nameOrPass);
    else if (_instanceof(nameOrPass, RenderPass))
      pass = nameOrPass;
    if (pass) {
      var idx = this._renderPassArray.indexOf(pass);
      this._renderPassArray.splice(idx, 1);
    }
  };
  _proto.getRenderPass = function getRenderPass(name) {
    for (var i = 0, len = this._renderPassArray.length; i < len; i++) {
      var pass = this._renderPassArray[i];
      if (pass.name === name)
        return pass;
    }
    return null;
  };
  _proto.destroy = function destroy() {
    this._opaqueQueue.destroy();
    this._alphaTestQueue.destroy();
    this._transparentQueue.destroy();
    this._allSpriteMasks = null;
    this._renderPassArray = null;
    this._defaultPass = null;
    this._camera = null;
  };
  _proto.render = function render(context, cubeFace, mipLevel) {
    var _scene__sunLight;
    var camera = this._camera;
    var scene = camera.scene;
    var opaqueQueue = this._opaqueQueue;
    var alphaTestQueue = this._alphaTestQueue;
    var transparentQueue = this._transparentQueue;
    camera.engine._spriteMaskManager.clear();
    if (scene.castShadows && ((_scene__sunLight = scene._sunLight) == null ? void 0 : _scene__sunLight.shadowType) !== ShadowType.None) {
      this._cascadedShadowCaster._render(context);
    }
    opaqueQueue.clear();
    alphaTestQueue.clear();
    transparentQueue.clear();
    this._allSpriteMasks.length = 0;
    context.applyVirtualCamera(camera._virtualCamera);
    this._callRender(context);
    opaqueQueue.sort(RenderQueue._compareFromNearToFar);
    alphaTestQueue.sort(RenderQueue._compareFromNearToFar);
    transparentQueue.sort(RenderQueue._compareFromFarToNear);
    for (var i = 0, len = this._renderPassArray.length; i < len; i++) {
      this._drawRenderPass(context, this._renderPassArray[i], camera, cubeFace, mipLevel);
    }
  };
  _proto._drawRenderPass = function _drawRenderPass(context, pass, camera, cubeFace, mipLevel) {
    pass.preRender(camera, this._opaqueQueue, this._alphaTestQueue, this._transparentQueue);
    if (pass.enabled) {
      var engine = camera.engine, scene = camera.scene;
      var background = scene.background;
      var rhi = engine._hardwareRenderer;
      var renderTarget = camera.renderTarget || pass.renderTarget;
      rhi.activeRenderTarget(renderTarget, camera.viewport, mipLevel);
      renderTarget == null ? void 0 : renderTarget._setRenderTargetInfo(cubeFace, mipLevel);
      var _pass_clearFlags;
      var clearFlags = (_pass_clearFlags = pass.clearFlags) != null ? _pass_clearFlags : camera.clearFlags;
      var _pass_clearColor;
      var color = (_pass_clearColor = pass.clearColor) != null ? _pass_clearColor : background.solidColor;
      if (clearFlags !== CameraClearFlags.None) {
        rhi.clearRenderTarget(camera.engine, clearFlags, color);
      }
      if (pass.renderOverride) {
        pass.render(camera, this._opaqueQueue, this._alphaTestQueue, this._transparentQueue);
      } else {
        this._opaqueQueue.render(camera, pass.replaceMaterial, pass.mask, null);
        this._alphaTestQueue.render(camera, pass.replaceMaterial, pass.mask, null);
        if (camera.clearFlags & CameraClearFlags.Color) {
          if (background.mode === BackgroundMode.Sky) {
            background.sky._render(context);
          } else if (background.mode === BackgroundMode.Texture && background.texture) {
            this._drawBackgroundTexture(engine, background);
          }
        }
        this._transparentQueue.render(camera, pass.replaceMaterial, pass.mask, null);
      }
      renderTarget == null ? void 0 : renderTarget._blitRenderTarget();
      renderTarget == null ? void 0 : renderTarget.generateMipmaps();
    }
    pass.postRender(camera, this._opaqueQueue, this._alphaTestQueue, this._transparentQueue);
  };
  _proto.pushPrimitive = function pushPrimitive(element) {
    switch (element.renderState.renderQueueType) {
      case RenderQueueType.Transparent:
        this._transparentQueue.pushPrimitive(element);
        break;
      case RenderQueueType.AlphaTest:
        this._alphaTestQueue.pushPrimitive(element);
        break;
      case RenderQueueType.Opaque:
        this._opaqueQueue.pushPrimitive(element);
        break;
    }
  };
  _proto._drawBackgroundTexture = function _drawBackgroundTexture(engine, background) {
    var rhi = engine._hardwareRenderer;
    var _backgroundTextureMaterial = engine._backgroundTextureMaterial, canvas = engine.canvas;
    var mesh = background._mesh;
    if ((this._lastCanvasSize.x !== canvas.width || this._lastCanvasSize.y !== canvas.height) && background._textureFillMode !== BackgroundTextureFillMode.Fill) {
      this._lastCanvasSize.set(canvas.width, canvas.height);
      background._resizeBackgroundTexture();
    }
    var program = _backgroundTextureMaterial.shader.passes[0]._getShaderProgram(engine, Shader._compileMacros);
    program.bind();
    program.uploadAll(program.materialUniformBlock, _backgroundTextureMaterial.shaderData);
    program.uploadUnGroupTextures();
    _backgroundTextureMaterial.renderState._apply(engine, false);
    rhi.drawPrimitive(mesh, mesh.subMesh, program);
  };
  _proto._callRender = function _callRender(context) {
    var engine = context.camera.engine;
    var renderers = engine._componentsManager._renderers;
    var camera = context.camera;
    var elements = renderers._elements;
    for (var i = renderers.length - 1; i >= 0; --i) {
      var renderer = elements[i];
      if (!(camera.cullingMask & renderer._entity.layer)) {
        continue;
      }
      if (camera.enableFrustumCulling) {
        if (!camera._frustum.intersectsBox(renderer.bounds)) {
          continue;
        }
      }
      renderer._renderFrameCount = engine.time._frameCount;
      renderer._prepareRender(context);
    }
  };
  _create_class2(BasicRenderPipeline2, [
    {
      key: "defaultRenderPass",
      get: (
        /**
        * Default render pass.
        */
        function get() {
          return this._defaultPass;
        }
      )
    }
  ]);
  return BasicRenderPipeline2;
}();
(function() {
  BasicRenderPipeline._tempVector0 = new Vector3();
})();
(function() {
  BasicRenderPipeline._tempVector1 = new Vector3();
})();
var _Camera;
var MathTemp = function MathTemp2() {
};
(function() {
  MathTemp.tempVec4 = new Vector4();
})();
(function() {
  MathTemp.tempVec3 = new Vector3();
})();
(function() {
  MathTemp.tempVec2 = new Vector2();
})();
var Camera = (_Camera = function(Component2) {
  _inherits(Camera1, Component2);
  function Camera1(entity) {
    var _this;
    _this = Component2.call(this, entity) || this;
    _this.shaderData = new ShaderData(ShaderDataGroup.Camera);
    _this.priority = 0;
    _this.enableFrustumCulling = true;
    _this.clearFlags = CameraClearFlags.All;
    _this.cullingMask = Layer.Everything;
    _this._globalShaderMacro = new ShaderMacroCollection();
    _this._frustum = new BoundingFrustum();
    _this._virtualCamera = new VirtualCamera();
    _this._isProjMatSetting = false;
    _this._nearClipPlane = 0.1;
    _this._farClipPlane = 100;
    _this._fieldOfView = 45;
    _this._orthographicSize = 10;
    _this._isProjectionDirty = true;
    _this._isInvProjMatDirty = true;
    _this._isFrustumProjectDirty = true;
    _this._customAspectRatio = void 0;
    _this._renderTarget = null;
    _this._viewport = new Vector4(0, 0, 1, 1);
    _this._inverseProjectionMatrix = new Matrix();
    _this._lastAspectSize = new Vector2(0, 0);
    _this._invViewProjMat = new Matrix();
    var transform = _this.entity.transform;
    _this._transform = transform;
    _this._isViewMatrixDirty = transform.registerWorldChangeFlag();
    _this._isInvViewProjDirty = transform.registerWorldChangeFlag();
    _this._frustumViewChangeFlag = transform.registerWorldChangeFlag();
    _this._renderPipeline = new BasicRenderPipeline(_assert_this_initialized(_this));
    _this.shaderData._addRefCount(1);
    return _this;
  }
  var _proto = Camera1.prototype;
  _proto.resetProjectionMatrix = function resetProjectionMatrix() {
    this._isProjMatSetting = false;
    this._projMatChange();
  };
  _proto.resetAspectRatio = function resetAspectRatio() {
    this._customAspectRatio = void 0;
    this._projMatChange();
  };
  _proto.worldToViewportPoint = function worldToViewportPoint(point, out) {
    var cameraPoint = MathTemp.tempVec3;
    var viewportPoint = MathTemp.tempVec4;
    Vector3.transformCoordinate(point, this.viewMatrix, cameraPoint);
    Vector3.transformToVec4(cameraPoint, this.projectionMatrix, viewportPoint);
    var w = viewportPoint.w;
    out.set((viewportPoint.x / w + 1) * 0.5, (1 - viewportPoint.y / w) * 0.5, -cameraPoint.z);
    return out;
  };
  _proto.viewportToWorldPoint = function viewportToWorldPoint(point, out) {
    var _this = this, nearClipPlane = _this.nearClipPlane, farClipPlane = _this.farClipPlane;
    var nf = 1 / (nearClipPlane - farClipPlane);
    var z;
    if (this.isOrthographic) {
      z = -point.z * 2 * nf;
      z += (farClipPlane + nearClipPlane) * nf;
    } else {
      var pointZ = point.z;
      z = -pointZ * (nearClipPlane + farClipPlane) * nf;
      z += 2 * nearClipPlane * farClipPlane * nf;
      z = z / pointZ;
    }
    this._innerViewportToWorldPoint(point.x, point.y, (z + 1) / 2, this._getInvViewProjMat(), out);
    return out;
  };
  _proto.viewportPointToRay = function viewportPointToRay(point, out) {
    var invViewProjMat = this._getInvViewProjMat();
    var origin = this._innerViewportToWorldPoint(point.x, point.y, 0, invViewProjMat, out.origin);
    var direction = this._innerViewportToWorldPoint(point.x, point.y, 1, invViewProjMat, out.direction);
    Vector3.subtract(direction, origin, direction);
    direction.normalize();
    return out;
  };
  _proto.screenToViewportPoint = function screenToViewportPoint(point, out) {
    var canvas = this.engine.canvas;
    var viewport = this.viewport;
    out.x = (point.x / canvas.width - viewport.x) / viewport.z;
    out.y = (point.y / canvas.height - viewport.y) / viewport.w;
    point.z !== void 0 && (out.z = point.z);
    return out;
  };
  _proto.viewportToScreenPoint = function viewportToScreenPoint(point, out) {
    var canvas = this.engine.canvas;
    var viewport = this.viewport;
    out.x = (viewport.x + point.x * viewport.z) * canvas.width;
    out.y = (viewport.y + point.y * viewport.w) * canvas.height;
    point.z !== void 0 && (out.z = point.z);
    return out;
  };
  _proto.worldToScreenPoint = function worldToScreenPoint(point, out) {
    this.worldToViewportPoint(point, out);
    return this.viewportToScreenPoint(out, out);
  };
  _proto.screenToWorldPoint = function screenToWorldPoint(point, out) {
    this.screenToViewportPoint(point, out);
    return this.viewportToWorldPoint(out, out);
  };
  _proto.screenPointToRay = function screenPointToRay(point, out) {
    var viewportPoint = MathTemp.tempVec2;
    this.screenToViewportPoint(point, viewportPoint);
    return this.viewportPointToRay(viewportPoint, out);
  };
  _proto.render = function render(cubeFace, mipLevel) {
    if (mipLevel === void 0)
      mipLevel = 0;
    var context = this.engine._renderContext;
    var virtualCamera = this._virtualCamera;
    var transform = this.entity.transform;
    Matrix.multiply(this.projectionMatrix, this.viewMatrix, virtualCamera.viewProjectionMatrix);
    virtualCamera.position.copyFrom(transform.worldPosition);
    if (virtualCamera.isOrthographic) {
      transform.getWorldForward(virtualCamera.forward);
    }
    context.camera = this;
    context.virtualCamera = virtualCamera;
    if (this.enableFrustumCulling && (this._frustumViewChangeFlag.flag || this._isFrustumProjectDirty)) {
      this._frustum.calculateFromMatrix(virtualCamera.viewProjectionMatrix);
      this._frustumViewChangeFlag.flag = false;
      this._isFrustumProjectDirty = false;
    }
    this._updateShaderData();
    ShaderMacroCollection.unionCollection(this.scene._globalShaderMacro, this.shaderData._macroCollection, this._globalShaderMacro);
    if (mipLevel > 0 && !this.engine._hardwareRenderer.isWebGL2) {
      mipLevel = 0;
      Logger.error("mipLevel only take effect in WebGL2.0");
    }
    this._renderPipeline.render(context, cubeFace, mipLevel);
    this._engine._renderCount++;
  };
  _proto._onEnable = function _onEnable() {
    this.entity.scene._attachRenderCamera(this);
  };
  _proto._onDisable = function _onDisable() {
    this.entity.scene._detachRenderCamera(this);
  };
  _proto._onDestroy = function _onDestroy() {
    var _this__renderPipeline;
    (_this__renderPipeline = this._renderPipeline) == null ? void 0 : _this__renderPipeline.destroy();
    this._isInvViewProjDirty.destroy();
    this._isViewMatrixDirty.destroy();
    this.shaderData._addRefCount(-1);
  };
  _proto._projMatChange = function _projMatChange() {
    this._isFrustumProjectDirty = true;
    this._isProjectionDirty = true;
    this._isInvProjMatDirty = true;
    this._isInvViewProjDirty.flag = true;
  };
  _proto._innerViewportToWorldPoint = function _innerViewportToWorldPoint(x, y, z, invViewProjMat, out) {
    var clipPoint = MathTemp.tempVec3;
    clipPoint.set(x * 2 - 1, 1 - y * 2, z * 2 - 1);
    Vector3.transformCoordinate(clipPoint, invViewProjMat, out);
    return out;
  };
  _proto._updateShaderData = function _updateShaderData() {
    var shaderData = this.shaderData;
    shaderData.setMatrix(Camera._inverseViewMatrixProperty, this._transform.worldMatrix);
    shaderData.setVector3(Camera._cameraPositionProperty, this._transform.worldPosition);
  };
  _proto._getInvViewProjMat = function _getInvViewProjMat() {
    if (this._isInvViewProjDirty.flag) {
      this._isInvViewProjDirty.flag = false;
      Matrix.multiply(this._transform.worldMatrix, this._getInverseProjectionMatrix(), this._invViewProjMat);
    }
    return this._invViewProjMat;
  };
  _proto._getInverseProjectionMatrix = function _getInverseProjectionMatrix() {
    if (this._isInvProjMatDirty) {
      this._isInvProjMatDirty = false;
      Matrix.invert(this.projectionMatrix, this._inverseProjectionMatrix);
    }
    return this._inverseProjectionMatrix;
  };
  _create_class2(Camera1, [
    {
      key: "nearClipPlane",
      get: (
        /**
        * Near clip plane - the closest point to the camera when rendering occurs.
        */
        function get() {
          return this._nearClipPlane;
        }
      ),
      set: function set(value) {
        this._nearClipPlane = value;
        this._projMatChange();
      }
    },
    {
      key: "farClipPlane",
      get: (
        /**
        * Far clip plane - the furthest point to the camera when rendering occurs.
        */
        function get() {
          return this._farClipPlane;
        }
      ),
      set: function set(value) {
        this._farClipPlane = value;
        this._projMatChange();
      }
    },
    {
      key: "fieldOfView",
      get: (
        /**
        * The camera's view angle. activating when camera use perspective projection.
        */
        function get() {
          return this._fieldOfView;
        }
      ),
      set: function set(value) {
        this._fieldOfView = value;
        this._projMatChange();
      }
    },
    {
      key: "aspectRatio",
      get: (
        /**
        * Aspect ratio. The default is automatically calculated by the viewport's aspect ratio. If it is manually set,
        * the manual value will be kept. Call resetAspectRatio() to restore it.
        */
        function get() {
          var canvas = this._entity.engine.canvas;
          var _this__customAspectRatio;
          return (_this__customAspectRatio = this._customAspectRatio) != null ? _this__customAspectRatio : canvas.width * this._viewport.z / (canvas.height * this._viewport.w);
        }
      ),
      set: function set(value) {
        this._customAspectRatio = value;
        this._projMatChange();
      }
    },
    {
      key: "viewport",
      get: (
        /**
        * Viewport, normalized expression, the upper left corner is (0, 0), and the lower right corner is (1, 1).
        * @remarks Re-assignment is required after modification to ensure that the modification takes effect.
        */
        function get() {
          return this._viewport;
        }
      ),
      set: function set(value) {
        if (value !== this._viewport) {
          this._viewport.copyFrom(value);
        }
        this._projMatChange();
      }
    },
    {
      key: "isOrthographic",
      get: (
        /**
        * Whether it is orthogonal, the default is false. True will use orthographic projection, false will use perspective projection.
        */
        function get() {
          return this._virtualCamera.isOrthographic;
        }
      ),
      set: function set(value) {
        this._virtualCamera.isOrthographic = value;
        this._projMatChange();
      }
    },
    {
      key: "orthographicSize",
      get: (
        /**
        * Half the size of the camera in orthographic mode.
        */
        function get() {
          return this._orthographicSize;
        }
      ),
      set: function set(value) {
        this._orthographicSize = value;
        this._projMatChange();
      }
    },
    {
      key: "viewMatrix",
      get: (
        /**
        * View matrix.
        */
        function get() {
          var viewMatrix = this._virtualCamera.viewMatrix;
          if (this._isViewMatrixDirty.flag) {
            this._isViewMatrixDirty.flag = false;
            var transform = this._transform;
            Matrix.rotationTranslation(transform.worldRotationQuaternion, transform.worldPosition, viewMatrix);
            viewMatrix.invert();
          }
          return viewMatrix;
        }
      )
    },
    {
      key: "projectionMatrix",
      get: function get() {
        var virtualCamera = this._virtualCamera;
        var projectionMatrix = virtualCamera.projectionMatrix;
        var canvas = this._entity.engine.canvas;
        if ((!this._isProjectionDirty || this._isProjMatSetting) && this._lastAspectSize.x === canvas.width && this._lastAspectSize.y === canvas.height) {
          return projectionMatrix;
        }
        this._isProjectionDirty = false;
        this._lastAspectSize.x = canvas.width;
        this._lastAspectSize.y = canvas.height;
        var aspectRatio = this.aspectRatio;
        if (!virtualCamera.isOrthographic) {
          Matrix.perspective(MathUtil.degreeToRadian(this._fieldOfView), aspectRatio, this._nearClipPlane, this._farClipPlane, projectionMatrix);
        } else {
          var width = this._orthographicSize * aspectRatio;
          var height = this._orthographicSize;
          Matrix.ortho(-width, width, -height, height, this._nearClipPlane, this._farClipPlane, projectionMatrix);
        }
        return projectionMatrix;
      },
      set: (
        /**
        * The projection matrix is ​​calculated by the relevant parameters of the camera by default.
        * If it is manually set, the manual value will be maintained. Call resetProjectionMatrix() to restore it.
        */
        function set(value) {
          this._virtualCamera.projectionMatrix.copyFrom(value);
          this._isProjMatSetting = true;
          this._projMatChange();
        }
      )
    },
    {
      key: "enableHDR",
      get: (
        /**
        * Whether to enable HDR.
        * @todo When render pipeline modification
        */
        function get() {
          console.log("not implementation");
          return false;
        }
      ),
      set: function set(value) {
        console.log("not implementation");
      }
    },
    {
      key: "renderTarget",
      get: (
        /**
        * RenderTarget. After setting, it will be rendered to the renderTarget. If it is empty, it will be rendered to the main canvas.
        */
        function get() {
          return this._renderTarget;
        }
      ),
      set: function set(value) {
        this._renderTarget = value;
      }
    }
  ]);
  return Camera1;
}(Component), function() {
  _Camera._inverseViewMatrixProperty = Shader.getPropertyByName("u_viewInvMat");
}(), function() {
  _Camera._cameraPositionProperty = Shader.getPropertyByName("u_cameraPos");
}(), _Camera);
__decorate([
  deepClone
], Camera.prototype, "_frustum", void 0);
__decorate([
  ignoreClone
], Camera.prototype, "_renderPipeline", void 0);
__decorate([
  ignoreClone
], Camera.prototype, "_virtualCamera", void 0);
__decorate([
  ignoreClone
], Camera.prototype, "_frustumViewChangeFlag", void 0);
__decorate([
  ignoreClone
], Camera.prototype, "_transform", void 0);
__decorate([
  ignoreClone
], Camera.prototype, "_isViewMatrixDirty", void 0);
__decorate([
  ignoreClone
], Camera.prototype, "_isInvViewProjDirty", void 0);
__decorate([
  deepClone
], Camera.prototype, "_viewport", void 0);
__decorate([
  deepClone
], Camera.prototype, "_inverseProjectionMatrix", void 0);
__decorate([
  deepClone
], Camera.prototype, "_lastAspectSize", void 0);
__decorate([
  deepClone
], Camera.prototype, "_invViewProjMat", void 0);
Camera = __decorate([
  dependentComponents(Transform)
], Camera);
var mimeType = {
  json: "json",
  gltf: "json",
  mtl: "json",
  prefab: "json",
  txt: "text",
  bin: "arraybuffer",
  png: "image",
  webp: "image",
  jpg: "image"
};
var defaultRetryCount = 1;
var defaultTimeout = Infinity;
var defaultInterval = 500;
function request(url, config) {
  if (config === void 0)
    config = {};
  return new AssetPromise(function(resolve, reject, setProgress) {
    var _config_retryCount;
    var retryCount = (_config_retryCount = config.retryCount) != null ? _config_retryCount : defaultRetryCount;
    var _config_retryInterval;
    var retryInterval = (_config_retryInterval = config.retryInterval) != null ? _config_retryInterval : defaultInterval;
    var _config_timeout;
    config.timeout = (_config_timeout = config.timeout) != null ? _config_timeout : defaultTimeout;
    var _config_type;
    config.type = (_config_type = config.type) != null ? _config_type : getMimeTypeFromUrl(url);
    var realRequest = config.type === "image" ? requestImage : requestRes;
    var lastError;
    var executor = new MultiExecutor(function() {
      return realRequest(url, config).onProgress(setProgress).then(function(res) {
        resolve(res);
        executor.stop();
      }).catch(function(err) {
        return lastError = err;
      });
    }, retryCount, retryInterval);
    executor.start(function() {
      reject(lastError);
    });
  });
}
function requestImage(url, config) {
  return new AssetPromise(function(resolve, reject) {
    var timeout = config.timeout;
    var img = new Image();
    var onerror = function() {
      reject(new Error("request " + url + " fail"));
    };
    img.onerror = onerror;
    img.onabort = onerror;
    var timeoutId = -1;
    if (timeout != Infinity) {
      timeoutId = window.setTimeout(function() {
        reject(new Error("request " + url + " timeout"));
      }, timeout);
    }
    img.onload = function(timeoutId2) {
      return function() {
        requestAnimationFrame(function() {
          resolve(img);
          img.onload = null;
          img.onerror = null;
          img.onabort = null;
        });
        clearTimeout(timeoutId2);
      };
    }(timeoutId);
    img.crossOrigin = "anonymous";
    img.src = url;
  });
}
function requestRes(url, config) {
  return new AssetPromise(function(resolve, reject, setProgress) {
    var xhr = new XMLHttpRequest();
    xhr.timeout = config.timeout;
    var _config_method;
    config.method = (_config_method = config.method) != null ? _config_method : "get";
    xhr.onload = function() {
      if (xhr.status < 200 || xhr.status >= 300) {
        reject(new Error("request failed from: " + url));
        return;
      }
      var _xhr_response;
      var result = (_xhr_response = xhr.response) != null ? _xhr_response : xhr.responseText;
      resolve(result);
    };
    xhr.onerror = function() {
      reject(new Error("request failed from: " + url));
    };
    xhr.ontimeout = function() {
      reject(new Error("request timeout from: " + url));
    };
    xhr.onprogress = function(e) {
      setProgress(e.loaded / e.total);
    };
    xhr.open(config.method, url, true);
    xhr.withCredentials = config.credentials === "include";
    xhr.responseType = config.type;
    var headers = config.headers;
    if (headers) {
      Object.keys(headers).forEach(function(name) {
        xhr.setRequestHeader(name, headers[name]);
      });
    }
    xhr.send(config.body);
  });
}
function getMimeTypeFromUrl(url) {
  var extname = url.substring(url.lastIndexOf(".") + 1);
  return mimeType[extname];
}
var MultiExecutor = function() {
  function MultiExecutor2(execFunc, totalCount, interval) {
    this.execFunc = execFunc;
    this.totalCount = totalCount;
    this.interval = interval;
    this._timeoutId = -100;
    this._currentCount = 0;
    this.exec = this.exec.bind(this);
  }
  var _proto = MultiExecutor2.prototype;
  _proto.start = function start(done) {
    this.done = done;
    this.exec();
  };
  _proto.stop = function stop() {
    clearTimeout(this._timeoutId);
  };
  _proto.exec = function exec() {
    var _this = this;
    if (this._currentCount >= this.totalCount) {
      this.done && this.done();
      return;
    }
    this._currentCount++;
    this.execFunc(this._currentCount).then(function() {
      _this._timeoutId = setTimeout(_this.exec, _this.interval);
    });
  };
  return MultiExecutor2;
}();
var Loader = function() {
  function Loader2(useCache) {
    this.useCache = useCache;
    this.request = request;
  }
  Loader2.registerClass = function registerClass(className, classDefine) {
    this._engineObjects[className] = classDefine;
  };
  Loader2.getClass = function getClass(className) {
    return this._engineObjects[className];
  };
  return Loader2;
}();
(function() {
  Loader._engineObjects = {};
})();
var AssetType;
(function(AssetType2) {
  AssetType2[
    /**
    * Plain text.
    * @remarks Will not be cached based on url in ResourceManager.
    */
    "Text"
  ] = "text";
  AssetType2[
    /**
    * JSON.
    * @remarks Will not be cached based on url in ResourceManager.
    */
    "JSON"
  ] = "json";
  AssetType2[
    /**
    * ArrayBuffer.
    * @remarks Will not be cached based on url in ResourceManager.
    */
    "Buffer"
  ] = "buffer";
  AssetType2[
    /** 2D Texture. */
    "Texture2D"
  ] = "texture2d";
  AssetType2[
    /** Cube Texture. */
    "TextureCube"
  ] = "texture-cube";
  AssetType2[
    /** Material. */
    "Material"
  ] = "material";
  AssetType2[
    /** Mesh. */
    "Mesh"
  ] = "mesh";
  AssetType2[
    /** AnimationClip. */
    "AnimationClip"
  ] = "AnimationClip";
  AssetType2[
    /** AnimatorController. */
    "AnimatorController"
  ] = "AnimatorController";
  AssetType2[
    /** Prefab.*/
    "Prefab"
  ] = "prefab";
  AssetType2[
    /** Compress Texture. */
    "KTX"
  ] = "ktx";
  AssetType2[
    /** Cube Compress Texture. */
    "KTXCube"
  ] = "ktx-cube";
  AssetType2[
    /** Sprite. */
    "Sprite"
  ] = "sprite";
  AssetType2[
    /** Sprite Atlas. */
    "SpriteAtlas"
  ] = "sprite-atlas";
  AssetType2[
    /** Ambient light. */
    "Env"
  ] = "environment";
  AssetType2[
    /** Scene. */
    "Scene"
  ] = "scene";
  AssetType2[
    /** HDR to cube. */
    "HDR"
  ] = "HDR";
  AssetType2[
    /** Font. */
    "Font"
  ] = "font";
  AssetType2[
    /** Source Font, include ttf、 otf and woff. */
    "SourceFont"
  ] = "source-font";
})(AssetType || (AssetType = {}));
var BlendMode;
(function(BlendMode2) {
  BlendMode2[BlendMode2[
    /** SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */
    "Normal"
  ] = 0] = "Normal";
  BlendMode2[BlendMode2[
    /** SRC ALPHA * SRC + ONE * DEST */
    "Additive"
  ] = 1] = "Additive";
})(BlendMode || (BlendMode = {}));
var RenderFace;
(function(RenderFace2) {
  RenderFace2[RenderFace2[
    /** Render front face. */
    "Front"
  ] = 0] = "Front";
  RenderFace2[RenderFace2[
    /** Render back face. */
    "Back"
  ] = 1] = "Back";
  RenderFace2[RenderFace2[
    /** Render double face. */
    "Double"
  ] = 2] = "Double";
})(RenderFace || (RenderFace = {}));
var BaseMaterial = function(Material2) {
  _inherits(BaseMaterial2, Material2);
  function BaseMaterial2(engine, shader) {
    var _this;
    _this = Material2.call(this, engine, shader) || this;
    _this._renderFace = RenderFace.Front;
    _this._isTransparent = false;
    _this._blendMode = BlendMode.Normal;
    _this.shaderData.setFloat(BaseMaterial2._alphaCutoffProp, 0);
    return _this;
  }
  var _proto = BaseMaterial2.prototype;
  _proto.setIsTransparent = function setIsTransparent(passIndex, isTransparent) {
    var renderStates = this.renderStates;
    if (renderStates.length < passIndex) {
      throw "Pass should less than pass count.";
    }
    var renderState = renderStates[passIndex];
    if (isTransparent) {
      renderState.blendState.targetBlendState.enabled = true;
      renderState.depthState.writeEnabled = false;
      renderState.renderQueueType = RenderQueueType.Transparent;
      this.shaderData.enableMacro(BaseMaterial2._transparentMacro);
    } else {
      renderState.blendState.targetBlendState.enabled = false;
      renderState.depthState.writeEnabled = true;
      renderState.renderQueueType = this.shaderData.getFloat(BaseMaterial2._alphaCutoffProp) ? RenderQueueType.AlphaTest : RenderQueueType.Opaque;
      this.shaderData.disableMacro(BaseMaterial2._transparentMacro);
    }
  };
  _proto.setBlendMode = function setBlendMode(passIndex, blendMode) {
    var renderStates = this.renderStates;
    if (renderStates.length < passIndex) {
      throw "Pass should less than pass count.";
    }
    var _renderStates_passIndex_blendState = renderStates[passIndex].blendState, target = _renderStates_passIndex_blendState.targetBlendState;
    switch (blendMode) {
      case BlendMode.Normal:
        target.sourceColorBlendFactor = BlendFactor.SourceAlpha;
        target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;
        target.sourceAlphaBlendFactor = BlendFactor.One;
        target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;
        target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;
        break;
      case BlendMode.Additive:
        target.sourceColorBlendFactor = BlendFactor.SourceAlpha;
        target.destinationColorBlendFactor = BlendFactor.One;
        target.sourceAlphaBlendFactor = BlendFactor.One;
        target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;
        target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;
        break;
    }
  };
  _proto.setRenderFace = function setRenderFace(passIndex, renderFace) {
    var renderStates = this.renderStates;
    if (renderStates.length < passIndex) {
      throw "Pass should less than pass count.";
    }
    switch (renderFace) {
      case RenderFace.Front:
        renderStates[passIndex].rasterState.cullMode = CullMode.Back;
        break;
      case RenderFace.Back:
        renderStates[passIndex].rasterState.cullMode = CullMode.Front;
        break;
      case RenderFace.Double:
        renderStates[passIndex].rasterState.cullMode = CullMode.Off;
        break;
    }
  };
  _proto.clone = function clone2() {
    var dest = new BaseMaterial2(this._engine, this.shader);
    this.cloneTo(dest);
    return dest;
  };
  _proto.cloneTo = function cloneTo(target) {
    Material2.prototype.cloneTo.call(this, target);
    target._renderFace = this._renderFace;
    target._isTransparent = this._isTransparent;
    target._blendMode = this._blendMode;
  };
  _create_class2(BaseMaterial2, [
    {
      key: "shader",
      get: (
        /**
        * Shader used by the material.
        */
        function get() {
          return this._shader;
        }
      ),
      set: function set(value) {
        this._shader = value;
        var renderStates = this._renderStates;
        var lastStatesCount = renderStates.length;
        var passCount = value.passes.length;
        if (lastStatesCount < passCount) {
          for (var i = lastStatesCount; i < passCount; i++) {
            renderStates.push(new RenderState());
            this.setBlendMode(i, BlendMode.Normal);
          }
        } else {
          renderStates.length = passCount;
        }
      }
    },
    {
      key: "isTransparent",
      get: (
        /**
        * Whethor transparent of first shader pass render state.
        */
        function get() {
          return this._isTransparent;
        }
      ),
      set: function set(value) {
        if (value !== this._isTransparent) {
          this.setIsTransparent(0, value);
          this._isTransparent = value;
        }
      }
    },
    {
      key: "blendMode",
      get: (
        /**
        * Blend mode of first shader pass render state.
        * @remarks Only take effect when `isTransparent` is `true`.
        */
        function get() {
          return this._blendMode;
        }
      ),
      set: function set(value) {
        if (value !== this._blendMode) {
          this.setBlendMode(0, value);
          this._blendMode = value;
        }
      }
    },
    {
      key: "alphaCutoff",
      get: (
        /**
        * Alpha cutoff value.
        * @remarks
        * Fragments with alpha channel lower than cutoff value will be discarded.
        * `0` means no fragment will be discarded.
        */
        function get() {
          return this.shaderData.getFloat(BaseMaterial2._alphaCutoffProp);
        }
      ),
      set: function set(value) {
        var shaderData = this.shaderData;
        if (shaderData.getFloat(BaseMaterial2._alphaCutoffProp) !== value) {
          if (value) {
            shaderData.enableMacro(BaseMaterial2._alphaCutoffMacro);
          } else {
            shaderData.disableMacro(BaseMaterial2._alphaCutoffMacro);
          }
          var renderStates = this.renderStates;
          for (var i = 0, n = renderStates.length; i < n; i++) {
            var renderState = renderStates[i];
            if (value > 0) {
              renderState.renderQueueType = renderState.blendState.targetBlendState.enabled ? RenderQueueType.Transparent : RenderQueueType.AlphaTest;
            } else {
              renderState.renderQueueType = renderState.blendState.targetBlendState.enabled ? RenderQueueType.Transparent : RenderQueueType.Opaque;
            }
          }
          shaderData.setFloat(BaseMaterial2._alphaCutoffProp, value);
        }
      }
    },
    {
      key: "renderFace",
      get: (
        /**
        * Face for render of first shader pass render state.
        */
        function get() {
          return this._renderFace;
        }
      ),
      set: function set(value) {
        if (value !== this._renderFace) {
          this.setRenderFace(0, value);
          this._renderFace = value;
        }
      }
    }
  ]);
  return BaseMaterial2;
}(Material);
(function() {
  BaseMaterial._baseColorProp = Shader.getPropertyByName("u_baseColor");
})();
(function() {
  BaseMaterial._baseTextureProp = Shader.getPropertyByName("u_baseTexture");
})();
(function() {
  BaseMaterial._baseTextureMacro = Shader.getMacroByName("BASETEXTURE");
})();
(function() {
  BaseMaterial._tilingOffsetProp = Shader.getPropertyByName("u_tilingOffset");
})();
(function() {
  BaseMaterial._normalTextureProp = Shader.getPropertyByName("u_normalTexture");
})();
(function() {
  BaseMaterial._normalIntensityProp = Shader.getPropertyByName("u_normalIntensity");
})();
(function() {
  BaseMaterial._normalTextureMacro = Shader.getMacroByName("NORMALTEXTURE");
})();
(function() {
  BaseMaterial._emissiveColorProp = Shader.getPropertyByName("u_emissiveColor");
})();
(function() {
  BaseMaterial._emissiveTextureProp = Shader.getPropertyByName("u_emissiveTexture");
})();
(function() {
  BaseMaterial._emissiveTextureMacro = Shader.getMacroByName("EMISSIVETEXTURE");
})();
(function() {
  BaseMaterial._transparentMacro = Shader.getMacroByName("OASIS_TRANSPARENT");
})();
(function() {
  BaseMaterial._alphaCutoffProp = Shader.getPropertyByName("u_alphaCutoff");
})();
(function() {
  BaseMaterial._alphaCutoffMacro = Shader.getMacroByName("ALPHA_CUTOFF");
})();
var BlinnPhongMaterial = function(BaseMaterial2) {
  _inherits(BlinnPhongMaterial2, BaseMaterial2);
  function BlinnPhongMaterial2(engine) {
    var _this;
    _this = BaseMaterial2.call(this, engine, Shader.find("blinn-phong")) || this;
    var shaderData = _this.shaderData;
    shaderData.enableMacro("O3_NEED_WORLDPOS");
    shaderData.enableMacro("O3_NEED_TILINGOFFSET");
    shaderData.setColor(BlinnPhongMaterial2._baseColorProp, new Color(1, 1, 1, 1));
    shaderData.setColor(BlinnPhongMaterial2._specularColorProp, new Color(1, 1, 1, 1));
    shaderData.setColor(BlinnPhongMaterial2._emissiveColorProp, new Color(0, 0, 0, 1));
    shaderData.setVector4(BlinnPhongMaterial2._tilingOffsetProp, new Vector4(1, 1, 0, 0));
    shaderData.setFloat(BlinnPhongMaterial2._shininessProp, 16);
    shaderData.setFloat(BlinnPhongMaterial2._normalIntensityProp, 1);
    return _this;
  }
  var _proto = BlinnPhongMaterial2.prototype;
  _proto.clone = function clone2() {
    var dest = new BlinnPhongMaterial2(this._engine);
    this.cloneTo(dest);
    return dest;
  };
  _create_class2(BlinnPhongMaterial2, [
    {
      key: "baseColor",
      get: (
        /**
        * Base color.
        */
        function get() {
          return this.shaderData.getColor(BlinnPhongMaterial2._baseColorProp);
        }
      ),
      set: function set(value) {
        var baseColor = this.shaderData.getColor(BlinnPhongMaterial2._baseColorProp);
        if (value !== baseColor) {
          baseColor.copyFrom(value);
        }
      }
    },
    {
      key: "baseTexture",
      get: (
        /**
        * Base texture.
        */
        function get() {
          return this.shaderData.getTexture(BlinnPhongMaterial2._baseTextureProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setTexture(BlinnPhongMaterial2._baseTextureProp, value);
        if (value) {
          this.shaderData.enableMacro(BlinnPhongMaterial2._baseTextureMacro);
        } else {
          this.shaderData.disableMacro(BlinnPhongMaterial2._baseTextureMacro);
        }
      }
    },
    {
      key: "specularColor",
      get: (
        /**
        * Specular color.
        */
        function get() {
          return this.shaderData.getColor(BlinnPhongMaterial2._specularColorProp);
        }
      ),
      set: function set(value) {
        var specularColor = this.shaderData.getColor(BlinnPhongMaterial2._specularColorProp);
        if (value !== specularColor) {
          specularColor.copyFrom(value);
        }
      }
    },
    {
      key: "specularTexture",
      get: (
        /**
        * Specular texture.
        */
        function get() {
          return this.shaderData.getTexture(BlinnPhongMaterial2._specularTextureProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setTexture(BlinnPhongMaterial2._specularTextureProp, value);
        if (value) {
          this.shaderData.enableMacro("O3_SPECULAR_TEXTURE");
        } else {
          this.shaderData.disableMacro("O3_SPECULAR_TEXTURE");
        }
      }
    },
    {
      key: "emissiveColor",
      get: (
        /**
        * Emissive color.
        */
        function get() {
          return this.shaderData.getColor(BlinnPhongMaterial2._emissiveColorProp);
        }
      ),
      set: function set(value) {
        var emissiveColor = this.shaderData.getColor(BlinnPhongMaterial2._emissiveColorProp);
        if (value !== emissiveColor) {
          emissiveColor.copyFrom(value);
        }
      }
    },
    {
      key: "emissiveTexture",
      get: (
        /**
        * Emissive texture.
        */
        function get() {
          return this.shaderData.getTexture(BlinnPhongMaterial2._emissiveTextureProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setTexture(BlinnPhongMaterial2._emissiveTextureProp, value);
        if (value) {
          this.shaderData.enableMacro(BlinnPhongMaterial2._emissiveTextureMacro);
        } else {
          this.shaderData.disableMacro(BlinnPhongMaterial2._emissiveTextureMacro);
        }
      }
    },
    {
      key: "normalTexture",
      get: (
        /**
        * Normal texture.
        */
        function get() {
          return this.shaderData.getTexture(BlinnPhongMaterial2._normalTextureProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setTexture(BlinnPhongMaterial2._normalTextureProp, value);
        if (value) {
          this.shaderData.enableMacro(BlinnPhongMaterial2._normalTextureMacro);
        } else {
          this.shaderData.disableMacro(BlinnPhongMaterial2._normalTextureMacro);
        }
      }
    },
    {
      key: "normalIntensity",
      get: (
        /**
        * Normal texture intensity.
        */
        function get() {
          return this.shaderData.getFloat(BlinnPhongMaterial2._normalIntensityProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setFloat(BlinnPhongMaterial2._normalIntensityProp, value);
      }
    },
    {
      key: "shininess",
      get: (
        /**
        * Set the specular reflection coefficient, the larger the value, the more convergent the specular reflection effect.
        */
        function get() {
          return this.shaderData.getFloat(BlinnPhongMaterial2._shininessProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setFloat(BlinnPhongMaterial2._shininessProp, Math.max(value, 1e-4));
      }
    },
    {
      key: "tilingOffset",
      get: (
        /**
        * Tiling and offset of main textures.
        */
        function get() {
          return this.shaderData.getVector4(BlinnPhongMaterial2._tilingOffsetProp);
        }
      ),
      set: function set(value) {
        var tilingOffset = this.shaderData.getVector4(BlinnPhongMaterial2._tilingOffsetProp);
        if (value !== tilingOffset) {
          tilingOffset.copyFrom(value);
        }
      }
    }
  ]);
  return BlinnPhongMaterial2;
}(BaseMaterial);
(function() {
  BlinnPhongMaterial._specularColorProp = Shader.getPropertyByName("u_specularColor");
})();
(function() {
  BlinnPhongMaterial._shininessProp = Shader.getPropertyByName("u_shininess");
})();
(function() {
  BlinnPhongMaterial._specularTextureProp = Shader.getPropertyByName("u_specularTexture");
})();
var TextureCoordinate;
(function(TextureCoordinate2) {
  TextureCoordinate2[TextureCoordinate2["UV0"] = 0] = "UV0";
  TextureCoordinate2[TextureCoordinate2["UV1"] = 1] = "UV1";
  TextureCoordinate2[TextureCoordinate2["UV2"] = 2] = "UV2";
  TextureCoordinate2[TextureCoordinate2["UV3"] = 3] = "UV3";
  TextureCoordinate2[TextureCoordinate2["UV4"] = 4] = "UV4";
  TextureCoordinate2[TextureCoordinate2["UV5"] = 5] = "UV5";
  TextureCoordinate2[TextureCoordinate2["UV6"] = 6] = "UV6";
  TextureCoordinate2[TextureCoordinate2["UV7"] = 7] = "UV7";
})(TextureCoordinate || (TextureCoordinate = {}));
var PBRBaseMaterial = function(BaseMaterial2) {
  _inherits(PBRBaseMaterial2, BaseMaterial2);
  function PBRBaseMaterial2(engine, shader) {
    var _this;
    _this = BaseMaterial2.call(this, engine, shader) || this;
    var shaderData = _this.shaderData;
    shaderData.enableMacro("O3_NEED_WORLDPOS");
    shaderData.enableMacro("O3_NEED_TILINGOFFSET");
    shaderData.setColor(PBRBaseMaterial2._baseColorProp, new Color(1, 1, 1, 1));
    shaderData.setColor(PBRBaseMaterial2._emissiveColorProp, new Color(0, 0, 0, 1));
    shaderData.setVector4(PBRBaseMaterial2._tilingOffsetProp, new Vector4(1, 1, 0, 0));
    shaderData.setFloat(PBRBaseMaterial2._normalIntensityProp, 1);
    shaderData.setFloat(PBRBaseMaterial2._occlusionTextureIntensityProp, 1);
    shaderData.setFloat(PBRBaseMaterial2._occlusionTextureCoordProp, TextureCoordinate.UV0);
    shaderData.setFloat(PBRBaseMaterial2._clearCoatProp, 0);
    shaderData.setFloat(PBRBaseMaterial2._clearCoatRoughnessProp, 0);
    return _this;
  }
  _create_class2(PBRBaseMaterial2, [
    {
      key: "baseColor",
      get: (
        /**
        * Base color.
        */
        function get() {
          return this.shaderData.getColor(PBRBaseMaterial2._baseColorProp);
        }
      ),
      set: function set(value) {
        var baseColor = this.shaderData.getColor(PBRBaseMaterial2._baseColorProp);
        if (value !== baseColor) {
          baseColor.copyFrom(value);
        }
      }
    },
    {
      key: "baseTexture",
      get: (
        /**
        * Base texture.
        */
        function get() {
          return this.shaderData.getTexture(PBRBaseMaterial2._baseTextureProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setTexture(PBRBaseMaterial2._baseTextureProp, value);
        if (value) {
          this.shaderData.enableMacro(PBRBaseMaterial2._baseTextureMacro);
        } else {
          this.shaderData.disableMacro(PBRBaseMaterial2._baseTextureMacro);
        }
      }
    },
    {
      key: "normalTexture",
      get: (
        /**
        * Normal texture.
        */
        function get() {
          return this.shaderData.getTexture(PBRBaseMaterial2._normalTextureProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setTexture(PBRBaseMaterial2._normalTextureProp, value);
        if (value) {
          this.shaderData.enableMacro(PBRBaseMaterial2._normalTextureMacro);
        } else {
          this.shaderData.disableMacro(PBRBaseMaterial2._normalTextureMacro);
        }
      }
    },
    {
      key: "normalTextureIntensity",
      get: (
        /**
        * Normal texture intensity.
        */
        function get() {
          return this.shaderData.getFloat(PBRBaseMaterial2._normalIntensityProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setFloat(PBRBaseMaterial2._normalIntensityProp, value);
      }
    },
    {
      key: "emissiveColor",
      get: (
        /**
        * Emissive color.
        */
        function get() {
          return this.shaderData.getColor(PBRBaseMaterial2._emissiveColorProp);
        }
      ),
      set: function set(value) {
        var emissiveColor = this.shaderData.getColor(PBRBaseMaterial2._emissiveColorProp);
        if (value !== emissiveColor) {
          emissiveColor.copyFrom(value);
        }
      }
    },
    {
      key: "emissiveTexture",
      get: (
        /**
        * Emissive texture.
        */
        function get() {
          return this.shaderData.getTexture(PBRBaseMaterial2._emissiveTextureProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setTexture(PBRBaseMaterial2._emissiveTextureProp, value);
        if (value) {
          this.shaderData.enableMacro(PBRBaseMaterial2._emissiveTextureMacro);
        } else {
          this.shaderData.disableMacro(PBRBaseMaterial2._emissiveTextureMacro);
        }
      }
    },
    {
      key: "occlusionTexture",
      get: (
        /**
        * Occlusion texture.
        */
        function get() {
          return this.shaderData.getTexture(PBRBaseMaterial2._occlusionTextureProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setTexture(PBRBaseMaterial2._occlusionTextureProp, value);
        if (value) {
          this.shaderData.enableMacro("OCCLUSIONTEXTURE");
        } else {
          this.shaderData.disableMacro("OCCLUSIONTEXTURE");
        }
      }
    },
    {
      key: "occlusionTextureIntensity",
      get: (
        /**
        * Occlusion texture intensity.
        */
        function get() {
          return this.shaderData.getFloat(PBRBaseMaterial2._occlusionTextureIntensityProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setFloat(PBRBaseMaterial2._occlusionTextureIntensityProp, value);
      }
    },
    {
      key: "occlusionTextureCoord",
      get: (
        /**
        * Occlusion texture uv coordinate.
        * @remarks Must be UV0 or UV1.
        */
        function get() {
          return this.shaderData.getFloat(PBRBaseMaterial2._occlusionTextureCoordProp);
        }
      ),
      set: function set(value) {
        if (value > TextureCoordinate.UV1) {
          Logger.warn("Occlusion texture uv coordinate must be UV0 or UV1.");
        }
        this.shaderData.setFloat(PBRBaseMaterial2._occlusionTextureCoordProp, value);
      }
    },
    {
      key: "tilingOffset",
      get: (
        /**
        * Tiling and offset of main textures.
        */
        function get() {
          return this.shaderData.getVector4(PBRBaseMaterial2._tilingOffsetProp);
        }
      ),
      set: function set(value) {
        var tilingOffset = this.shaderData.getVector4(PBRBaseMaterial2._tilingOffsetProp);
        if (value !== tilingOffset) {
          tilingOffset.copyFrom(value);
        }
      }
    },
    {
      key: "clearCoat",
      get: (
        /**
        * The clearCoat layer intensity, default 0.
        */
        function get() {
          return this.shaderData.getFloat(PBRBaseMaterial2._clearCoatProp);
        }
      ),
      set: function set(value) {
        if (!!this.shaderData.getFloat(PBRBaseMaterial2._clearCoatProp) !== !!value) {
          if (value === 0) {
            this.shaderData.disableMacro("CLEARCOAT");
          } else {
            this.shaderData.enableMacro("CLEARCOAT");
          }
        }
        this.shaderData.setFloat(PBRBaseMaterial2._clearCoatProp, value);
      }
    },
    {
      key: "clearCoatTexture",
      get: (
        /**
        * The clearCoat layer intensity texture.
        */
        function get() {
          return this.shaderData.getTexture(PBRBaseMaterial2._clearCoatTextureProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setTexture(PBRBaseMaterial2._clearCoatTextureProp, value);
        if (value) {
          this.shaderData.enableMacro("HAS_CLEARCOATTEXTURE");
        } else {
          this.shaderData.disableMacro("HAS_CLEARCOATTEXTURE");
        }
      }
    },
    {
      key: "clearCoatRoughness",
      get: (
        /**
        * The clearCoat layer roughness, default 0.
        */
        function get() {
          return this.shaderData.getFloat(PBRBaseMaterial2._clearCoatRoughnessProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setFloat(PBRBaseMaterial2._clearCoatRoughnessProp, value);
      }
    },
    {
      key: "clearCoatRoughnessTexture",
      get: (
        /**
        * The clearCoat layer roughness texture.
        */
        function get() {
          return this.shaderData.getTexture(PBRBaseMaterial2._clearCoatRoughnessTextureProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setTexture(PBRBaseMaterial2._clearCoatRoughnessTextureProp, value);
        if (value) {
          this.shaderData.enableMacro("HAS_CLEARCOATROUGHNESSTEXTURE");
        } else {
          this.shaderData.disableMacro("HAS_CLEARCOATROUGHNESSTEXTURE");
        }
      }
    },
    {
      key: "clearCoatNormalTexture",
      get: (
        /**
        * The clearCoat normal map texture.
        */
        function get() {
          return this.shaderData.getTexture(PBRBaseMaterial2._clearCoatNormalTextureProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setTexture(PBRBaseMaterial2._clearCoatNormalTextureProp, value);
        if (value) {
          this.shaderData.enableMacro("HAS_CLEARCOATNORMALTEXTURE");
        } else {
          this.shaderData.disableMacro("HAS_CLEARCOATNORMALTEXTURE");
        }
      }
    }
  ]);
  return PBRBaseMaterial2;
}(BaseMaterial);
(function() {
  PBRBaseMaterial._occlusionTextureIntensityProp = Shader.getPropertyByName("u_occlusionIntensity");
})();
(function() {
  PBRBaseMaterial._occlusionTextureCoordProp = Shader.getPropertyByName("u_occlusionTextureCoord");
})();
(function() {
  PBRBaseMaterial._occlusionTextureProp = Shader.getPropertyByName("u_occlusionTexture");
})();
(function() {
  PBRBaseMaterial._clearCoatProp = Shader.getPropertyByName("u_clearCoat");
})();
(function() {
  PBRBaseMaterial._clearCoatTextureProp = Shader.getPropertyByName("u_clearCoatTexture");
})();
(function() {
  PBRBaseMaterial._clearCoatRoughnessProp = Shader.getPropertyByName("u_clearCoatRoughness");
})();
(function() {
  PBRBaseMaterial._clearCoatRoughnessTextureProp = Shader.getPropertyByName("u_clearCoatRoughnessTexture");
})();
(function() {
  PBRBaseMaterial._clearCoatNormalTextureProp = Shader.getPropertyByName("u_clearCoatNormalTexture");
})();
var PBRMaterial = function(PBRBaseMaterial2) {
  _inherits(PBRMaterial2, PBRBaseMaterial2);
  function PBRMaterial2(engine) {
    var _this;
    _this = PBRBaseMaterial2.call(this, engine, Shader.find("pbr")) || this;
    _this.shaderData.setFloat(PBRMaterial2._metallicProp, 1);
    _this.shaderData.setFloat(PBRMaterial2._roughnessProp, 1);
    _this.shaderData.setFloat(PBRMaterial2._iorProp, 1.5);
    return _this;
  }
  var _proto = PBRMaterial2.prototype;
  _proto.clone = function clone2() {
    var dest = new PBRMaterial2(this._engine);
    this.cloneTo(dest);
    return dest;
  };
  _create_class2(PBRMaterial2, [
    {
      key: "ior",
      get: (
        /**
        * Index Of Refraction.
        * @defaultValue `1.5`
        */
        function get() {
          return this.shaderData.getFloat(PBRMaterial2._iorProp);
        }
      ),
      set: function set(v) {
        this.shaderData.setFloat(PBRMaterial2._iorProp, Math.max(v, 0));
      }
    },
    {
      key: "metallic",
      get: (
        /**
        * Metallic.
        * @defaultValue `1.0`
        */
        function get() {
          return this.shaderData.getFloat(PBRMaterial2._metallicProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setFloat(PBRMaterial2._metallicProp, value);
      }
    },
    {
      key: "roughness",
      get: (
        /**
        * Roughness. default 1.0.
        * @defaultValue `1.0`
        */
        function get() {
          return this.shaderData.getFloat(PBRMaterial2._roughnessProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setFloat(PBRMaterial2._roughnessProp, value);
      }
    },
    {
      key: "roughnessMetallicTexture",
      get: (
        /**
        * Roughness metallic texture.
        * @remarks G channel is roughness, B channel is metallic
        */
        function get() {
          return this.shaderData.getTexture(PBRMaterial2._roughnessMetallicTextureProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setTexture(PBRMaterial2._roughnessMetallicTextureProp, value);
        if (value) {
          this.shaderData.enableMacro("ROUGHNESSMETALLICTEXTURE");
        } else {
          this.shaderData.disableMacro("ROUGHNESSMETALLICTEXTURE");
        }
      }
    }
  ]);
  return PBRMaterial2;
}(PBRBaseMaterial);
(function() {
  PBRMaterial._metallicProp = Shader.getPropertyByName("u_metal");
})();
(function() {
  PBRMaterial._roughnessProp = Shader.getPropertyByName("u_roughness");
})();
(function() {
  PBRMaterial._roughnessMetallicTextureProp = Shader.getPropertyByName("u_roughnessMetallicTexture");
})();
(function() {
  PBRMaterial._iorProp = Shader.getPropertyByName("material_IOR");
})();
var PBRSpecularMaterial = function(PBRBaseMaterial2) {
  _inherits(PBRSpecularMaterial2, PBRBaseMaterial2);
  function PBRSpecularMaterial2(engine) {
    var _this;
    _this = PBRBaseMaterial2.call(this, engine, Shader.find("pbr-specular")) || this;
    _this.shaderData.setColor(PBRSpecularMaterial2._specularColorProp, new Color(1, 1, 1, 1));
    _this.shaderData.setFloat(PBRSpecularMaterial2._glossinessProp, 1);
    return _this;
  }
  var _proto = PBRSpecularMaterial2.prototype;
  _proto.clone = function clone2() {
    var dest = new PBRSpecularMaterial2(this._engine);
    this.cloneTo(dest);
    return dest;
  };
  _create_class2(PBRSpecularMaterial2, [
    {
      key: "specularColor",
      get: (
        /**
        * Specular color.
        */
        function get() {
          return this.shaderData.getColor(PBRSpecularMaterial2._specularColorProp);
        }
      ),
      set: function set(value) {
        var specularColor = this.shaderData.getColor(PBRSpecularMaterial2._specularColorProp);
        if (value !== specularColor) {
          specularColor.copyFrom(value);
        }
      }
    },
    {
      key: "glossiness",
      get: (
        /**
        * Glossiness.
        */
        function get() {
          return this.shaderData.getFloat(PBRSpecularMaterial2._glossinessProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setFloat(PBRSpecularMaterial2._glossinessProp, value);
      }
    },
    {
      key: "specularGlossinessTexture",
      get: (
        /**
        * Specular glossiness texture.
        * @remarks RGB is specular, A is glossiness
        */
        function get() {
          return this.shaderData.getTexture(PBRSpecularMaterial2._specularGlossinessTextureProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setTexture(PBRSpecularMaterial2._specularGlossinessTextureProp, value);
        if (value) {
          this.shaderData.enableMacro(PBRSpecularMaterial2._specularGlossinessTextureMacro);
        } else {
          this.shaderData.disableMacro(PBRSpecularMaterial2._specularGlossinessTextureMacro);
        }
      }
    }
  ]);
  return PBRSpecularMaterial2;
}(PBRBaseMaterial);
(function() {
  PBRSpecularMaterial._specularColorProp = Shader.getPropertyByName("u_PBRSpecularColor");
})();
(function() {
  PBRSpecularMaterial._glossinessProp = Shader.getPropertyByName("u_glossiness");
})();
(function() {
  PBRSpecularMaterial._specularGlossinessTextureProp = Shader.getPropertyByName("u_specularGlossinessTexture");
})();
(function() {
  PBRSpecularMaterial._specularGlossinessTextureMacro = Shader.getMacroByName("SPECULARGLOSSINESSTEXTURE");
})();
var UnlitMaterial = function(BaseMaterial2) {
  _inherits(UnlitMaterial2, BaseMaterial2);
  function UnlitMaterial2(engine) {
    var _this;
    _this = BaseMaterial2.call(this, engine, Shader.find("unlit")) || this;
    var shaderData = _this.shaderData;
    shaderData.enableMacro("OMIT_NORMAL");
    shaderData.enableMacro("O3_NEED_TILINGOFFSET");
    shaderData.setColor(UnlitMaterial2._baseColorProp, new Color(1, 1, 1, 1));
    shaderData.setVector4(UnlitMaterial2._tilingOffsetProp, new Vector4(1, 1, 0, 0));
    return _this;
  }
  var _proto = UnlitMaterial2.prototype;
  _proto.clone = function clone2() {
    var dest = new UnlitMaterial2(this._engine);
    this.cloneTo(dest);
    return dest;
  };
  _create_class2(UnlitMaterial2, [
    {
      key: "baseColor",
      get: (
        /**
        * Base color.
        */
        function get() {
          return this.shaderData.getColor(UnlitMaterial2._baseColorProp);
        }
      ),
      set: function set(value) {
        var baseColor = this.shaderData.getColor(UnlitMaterial2._baseColorProp);
        if (value !== baseColor) {
          baseColor.copyFrom(value);
        }
      }
    },
    {
      key: "baseTexture",
      get: (
        /**
        * Base texture.
        */
        function get() {
          return this.shaderData.getTexture(UnlitMaterial2._baseTextureProp);
        }
      ),
      set: function set(value) {
        this.shaderData.setTexture(UnlitMaterial2._baseTextureProp, value);
        if (value) {
          this.shaderData.enableMacro(UnlitMaterial2._baseTextureMacro);
        } else {
          this.shaderData.disableMacro(UnlitMaterial2._baseTextureMacro);
        }
      }
    },
    {
      key: "tilingOffset",
      get: (
        /**
        * Tiling and offset of main textures.
        */
        function get() {
          return this.shaderData.getVector4(UnlitMaterial2._tilingOffsetProp);
        }
      ),
      set: function set(value) {
        var tilingOffset = this.shaderData.getVector4(UnlitMaterial2._tilingOffsetProp);
        if (value !== tilingOffset) {
          tilingOffset.copyFrom(value);
        }
      }
    }
  ]);
  return UnlitMaterial2;
}(BaseMaterial);
var TextHorizontalAlignment;
(function(TextHorizontalAlignment2) {
  TextHorizontalAlignment2[TextHorizontalAlignment2[
    /** Align left horizontally */
    "Left"
  ] = 0] = "Left";
  TextHorizontalAlignment2[TextHorizontalAlignment2[
    /** Align center horizontally */
    "Center"
  ] = 1] = "Center";
  TextHorizontalAlignment2[TextHorizontalAlignment2[
    /** Align right horizontally */
    "Right"
  ] = 2] = "Right";
})(TextHorizontalAlignment || (TextHorizontalAlignment = {}));
var TextVerticalAlignment;
(function(TextVerticalAlignment2) {
  TextVerticalAlignment2[TextVerticalAlignment2[
    /** Align top vertically */
    "Top"
  ] = 0] = "Top";
  TextVerticalAlignment2[TextVerticalAlignment2[
    /** Align center vertically */
    "Center"
  ] = 1] = "Center";
  TextVerticalAlignment2[TextVerticalAlignment2[
    /** Align bottom vertically */
    "Bottom"
  ] = 2] = "Bottom";
})(TextVerticalAlignment || (TextVerticalAlignment = {}));
var OverflowMode;
(function(OverflowMode2) {
  OverflowMode2[OverflowMode2[
    /** Overflow when the text is too tall */
    "Overflow"
  ] = 0] = "Overflow";
  OverflowMode2[OverflowMode2[
    /** Truncate with height when the text is too tall */
    "Truncate"
  ] = 1] = "Truncate";
})(OverflowMode || (OverflowMode = {}));
var FontStyle;
(function(FontStyle2) {
  FontStyle2[FontStyle2[
    /** Set font without style */
    "None"
  ] = 0] = "None";
  FontStyle2[FontStyle2[
    /** Set font bold */
    "Bold"
  ] = 1] = "Bold";
  FontStyle2[FontStyle2[
    /** Set font italic */
    "Italic"
  ] = 2] = "Italic";
})(FontStyle || (FontStyle = {}));
var SpriteAtlas = function(RefObject2) {
  _inherits(SpriteAtlas2, RefObject2);
  function SpriteAtlas2(engine) {
    var _this;
    _this = RefObject2.call(this, engine) || this;
    _this._sprites = new Array();
    _this._spriteNamesToIndex = {};
    return _this;
  }
  var _proto = SpriteAtlas2.prototype;
  _proto.getSprite = function getSprite(name) {
    var sprite = this._sprites[this._spriteNamesToIndex[name]];
    if (!sprite) {
      console.warn("There is no sprite named " + name + " in the atlas.");
    }
    return sprite;
  };
  _proto.getSprites = function getSprites(name, outSprites) {
    outSprites.length = 0;
    var i = this._spriteNamesToIndex[name];
    if (i !== void 0) {
      var _sprites = this._sprites;
      for (; i >= 0; i--) {
        var sprite = _sprites[i];
        sprite.name === name && outSprites.push(sprite);
      }
    } else {
      console.warn("The name of the sprite you want to find is not exit in SpriteAtlas.");
    }
    return outSprites;
  };
  _proto._addSprite = function _addSprite(sprite) {
    this._spriteNamesToIndex[sprite.name] = this._sprites.push(sprite) - 1;
  };
  _proto._onDestroy = function _onDestroy() {
    this._sprites = null;
    this._spriteNamesToIndex = null;
  };
  _create_class2(SpriteAtlas2, [
    {
      key: "sprites",
      get: (
        /**
        * All the sprites in the atlas.
        */
        function get() {
          return this._sprites;
        }
      )
    }
  ]);
  return SpriteAtlas2;
}(RefObject);
var SpriteDrawMode;
(function(SpriteDrawMode2) {
  SpriteDrawMode2[SpriteDrawMode2[
    /** Overall scaling when modifying size. */
    "Simple"
  ] = 0] = "Simple";
  SpriteDrawMode2[SpriteDrawMode2[
    /** When modifying the size, it is transformed according to the 9-slice settings (border). */
    "Sliced"
  ] = 1] = "Sliced";
})(SpriteDrawMode || (SpriteDrawMode = {}));
var Sprite = function(RefObject2) {
  _inherits(Sprite2, RefObject2);
  function Sprite2(engine, texture, region, pivot, border, name) {
    if (texture === void 0)
      texture = null;
    if (region === void 0)
      region = null;
    if (pivot === void 0)
      pivot = null;
    if (border === void 0)
      border = null;
    if (name === void 0)
      name = null;
    var _this;
    _this = RefObject2.call(this, engine) || this;
    _this._automaticWidth = 0;
    _this._automaticHeight = 0;
    _this._customWidth = void 0;
    _this._customHeight = void 0;
    _this._positions = [
      new Vector2(),
      new Vector2(),
      new Vector2(),
      new Vector2()
    ];
    _this._uvs = [
      new Vector2(),
      new Vector2(),
      new Vector2(),
      new Vector2()
    ];
    _this._bounds = new BoundingBox();
    _this._texture = null;
    _this._atlasRotated = false;
    _this._atlasRegion = new Rect(0, 0, 1, 1);
    _this._atlasRegionOffset = new Vector4(0, 0, 0, 0);
    _this._region = new Rect(0, 0, 1, 1);
    _this._pivot = new Vector2(0.5, 0.5);
    _this._border = new Vector4(0, 0, 0, 0);
    _this._dirtyUpdateFlag = 7;
    _this._updateFlagManager = new UpdateFlagManager();
    _this._texture = texture;
    region && _this._region.copyFrom(region);
    pivot && _this._pivot.copyFrom(pivot);
    border && _this._border.copyFrom(border);
    _this.name = name;
    return _this;
  }
  var _proto = Sprite2.prototype;
  _proto.clone = function clone2() {
    var cloneSprite = new Sprite2(this._engine, this._texture, this._region, this._pivot, this._border, this.name);
    cloneSprite._atlasRotated = this._atlasRotated;
    cloneSprite._atlasRegion.copyFrom(this._atlasRegion);
    cloneSprite._atlasRegionOffset.copyFrom(this._atlasRegionOffset);
    return cloneSprite;
  };
  _proto._getPositions = function _getPositions() {
    this._dirtyUpdateFlag & 1 && this._updatePositions();
    return this._positions;
  };
  _proto._getUVs = function _getUVs() {
    this._dirtyUpdateFlag & 2 && this._updateUVs();
    return this._uvs;
  };
  _proto._getBounds = function _getBounds() {
    this._dirtyUpdateFlag & 1 && this._updatePositions();
    return this._bounds;
  };
  _proto._onDestroy = function _onDestroy() {
    if (this._texture) {
      this._texture = null;
    }
  };
  _proto._calDefaultSize = function _calDefaultSize() {
    if (this._texture) {
      var _this = this, _texture = _this._texture, _atlasRegion = _this._atlasRegion, _atlasRegionOffset = _this._atlasRegionOffset, _region = _this._region;
      var pixelsPerUnitReciprocal = 1 / Engine._pixelsPerUnit;
      this._automaticWidth = _texture.width * _atlasRegion.width / (1 - _atlasRegionOffset.x - _atlasRegionOffset.z) * _region.width * pixelsPerUnitReciprocal;
      this._automaticHeight = _texture.height * _atlasRegion.height / (1 - _atlasRegionOffset.y - _atlasRegionOffset.w) * _region.height * pixelsPerUnitReciprocal;
    } else {
      this._automaticWidth = this._automaticHeight = 0;
    }
    this._dirtyUpdateFlag &= ~4;
  };
  _proto._updatePositions = function _updatePositions() {
    var blank = this._atlasRegionOffset;
    var _this__region = this._region, regionX = _this__region.x, regionY = _this__region.y, regionW = _this__region.width, regionH = _this__region.height;
    var regionRight = 1 - regionX - regionW;
    var regionBottom = 1 - regionY - regionH;
    var left = Math.max(blank.x - regionX, 0) / regionW;
    var bottom = Math.max(blank.w - regionY, 0) / regionH;
    var right = 1 - Math.max(blank.z - regionRight, 0) / regionW;
    var top = 1 - Math.max(blank.y - regionBottom, 0) / regionH;
    var positions = this._positions;
    positions[0].set(left, bottom);
    positions[1].set(right, bottom);
    positions[2].set(left, top);
    positions[3].set(right, top);
    var _this__bounds = this._bounds, min = _this__bounds.min, max = _this__bounds.max;
    min.set(left, bottom, 0);
    max.set(right, top, 0);
    this._dirtyUpdateFlag &= ~1;
  };
  _proto._updateUVs = function _updateUVs() {
    var _this = this, uv = _this._uvs, atlasRegionOffset = _this._atlasRegionOffset;
    var _this__region = this._region, regionX = _this__region.x, regionY = _this__region.y, regionW = _this__region.width, regionH = _this__region.height;
    var regionRight = 1 - regionX - regionW;
    var regionBottom = 1 - regionY - regionH;
    var _this__atlasRegion = this._atlasRegion, atlasRegionX = _this__atlasRegion.x, atlasRegionY = _this__atlasRegion.y, atlasRegionW = _this__atlasRegion.width, atlasRegionH = _this__atlasRegion.height;
    var offsetLeft = atlasRegionOffset.x, offsetTop = atlasRegionOffset.y, offsetRight = atlasRegionOffset.z, offsetBottom = atlasRegionOffset.w;
    var realWidth = atlasRegionW / (1 - offsetLeft - offsetRight);
    var realHeight = atlasRegionH / (1 - offsetTop - offsetBottom);
    var left = Math.max(regionX - offsetLeft, 0) * realWidth + atlasRegionX;
    var top = Math.max(regionBottom - offsetTop, 0) * realHeight + atlasRegionY;
    var right = atlasRegionW + atlasRegionX - Math.max(regionRight - offsetRight, 0) * realWidth;
    var bottom = atlasRegionH + atlasRegionY - Math.max(regionY - offsetBottom, 0) * realHeight;
    var _this__border = this._border, borderLeft = _this__border.x, borderBottom = _this__border.y, borderRight = _this__border.z, borderTop = _this__border.w;
    uv[0].set(left, bottom);
    uv[1].set((regionX - offsetLeft + borderLeft * regionW) * realWidth + atlasRegionX, atlasRegionH + atlasRegionY - (regionY - offsetBottom + borderBottom * regionH) * realHeight);
    uv[2].set(atlasRegionW + atlasRegionX - (regionRight - offsetRight + borderRight * regionW) * realWidth, (regionBottom - offsetTop + borderTop * regionH) * realHeight + atlasRegionY);
    uv[3].set(right, top);
    this._dirtyUpdateFlag &= ~2;
  };
  _proto._dispatchSpriteChange = function _dispatchSpriteChange(type) {
    switch (type) {
      case SpriteModifyFlags.texture:
        this._dirtyUpdateFlag |= 4;
        break;
      case SpriteModifyFlags.atlasRegionOffset:
      case SpriteModifyFlags.region:
        this._dirtyUpdateFlag |= 7;
        break;
      case SpriteModifyFlags.atlasRegion:
        this._dirtyUpdateFlag |= 4 | 2;
        break;
      case SpriteModifyFlags.border:
        this._dirtyUpdateFlag |= 2;
        break;
    }
    this._updateFlagManager.dispatch(type);
  };
  _create_class2(Sprite2, [
    {
      key: "texture",
      get: (
        /**
        * The reference to the used texture.
        */
        function get() {
          return this._texture;
        }
      ),
      set: function set(value) {
        if (this._texture !== value) {
          this._texture = value;
          this._dispatchSpriteChange(SpriteModifyFlags.texture);
          if (this._customWidth === void 0 || this._customHeight === void 0) {
            this._dispatchSpriteChange(SpriteModifyFlags.size);
          }
        }
      }
    },
    {
      key: "width",
      get: (
        /**
        * The width of the sprite (in world coordinates).
        * 
        * @remarks
        * If width is set, return the set value,
        * otherwise return the width calculated according to `Texture.width`, `Sprite.region`, `Sprite.atlasRegion`, `Sprite.atlasRegionOffset` and `Engine._pixelsPerUnit`.
        */
        function get() {
          if (this._customWidth !== void 0) {
            return this._customWidth;
          } else {
            this._dirtyUpdateFlag & 4 && this._calDefaultSize();
            return this._automaticWidth;
          }
        }
      ),
      set: function set(value) {
        if (this._customWidth !== value) {
          this._customWidth = value;
          this._dispatchSpriteChange(SpriteModifyFlags.size);
        }
      }
    },
    {
      key: "height",
      get: (
        /**
        * The height of the sprite (in world coordinates).
        * 
        * @remarks
        * If height is set, return the set value,
        * otherwise return the height calculated according to `Texture.height`, `Sprite.region`, `Sprite.atlasRegion`, `Sprite.atlasRegionOffset` and `Engine._pixelsPerUnit`.
        */
        function get() {
          if (this._customHeight !== void 0) {
            return this._customHeight;
          } else {
            this._dirtyUpdateFlag & 4 && this._calDefaultSize();
            return this._automaticHeight;
          }
        }
      ),
      set: function set(value) {
        if (this._customHeight !== value) {
          this._customHeight = value;
          this._dispatchSpriteChange(SpriteModifyFlags.size);
        }
      }
    },
    {
      key: "atlasRotated",
      get: (
        /**
        * Is it rotated 90 degrees clockwise when packing.
        */
        function get() {
          return this._atlasRotated;
        }
      ),
      set: function set(value) {
        if (this._atlasRotated != value) {
          this._atlasRotated = value;
        }
      }
    },
    {
      key: "atlasRegion",
      get: (
        /**
        * The rectangle region of the original texture on its atlas texture, specified in normalized.
        */
        function get() {
          return this._atlasRegion;
        }
      ),
      set: function set(value) {
        var x = MathUtil.clamp(value.x, 0, 1);
        var y = MathUtil.clamp(value.y, 0, 1);
        this._atlasRegion.set(x, y, MathUtil.clamp(value.width, 0, 1 - x), MathUtil.clamp(value.height, 0, 1 - y));
        this._dispatchSpriteChange(SpriteModifyFlags.atlasRegion);
        if (this._customWidth === void 0 || this._customHeight === void 0) {
          this._dispatchSpriteChange(SpriteModifyFlags.size);
        }
      }
    },
    {
      key: "atlasRegionOffset",
      get: (
        /**
        * The rectangle region offset of the original texture on its atlas texture, specified in normalized.
        */
        function get() {
          return this._atlasRegionOffset;
        }
      ),
      set: function set(value) {
        var x = MathUtil.clamp(value.x, 0, 1);
        var y = MathUtil.clamp(value.y, 0, 1);
        this._atlasRegionOffset.set(x, y, MathUtil.clamp(value.z, 0, 1 - x), MathUtil.clamp(value.w, 0, 1 - y));
        this._dispatchSpriteChange(SpriteModifyFlags.atlasRegionOffset);
        if (this._customWidth === void 0 || this._customHeight === void 0) {
          this._dispatchSpriteChange(SpriteModifyFlags.size);
        }
      }
    },
    {
      key: "region",
      get: (
        /**
        * The rectangle region of the sprite, specified in normalized.
        */
        function get() {
          return this._region;
        }
      ),
      set: function set(value) {
        var region = this._region;
        var x = MathUtil.clamp(value.x, 0, 1);
        var y = MathUtil.clamp(value.y, 0, 1);
        region.set(x, y, MathUtil.clamp(value.width, 0, 1 - x), MathUtil.clamp(value.height, 0, 1 - y));
        this._dispatchSpriteChange(SpriteModifyFlags.region);
        if (this._customWidth === void 0 || this._customHeight === void 0) {
          this._dispatchSpriteChange(SpriteModifyFlags.size);
        }
      }
    },
    {
      key: "pivot",
      get: (
        /**
        * Location of the sprite's center point in the rectangle region, specified in normalized.
        * The origin is at the bottom left and the default value is (0.5, 0.5).
        */
        function get() {
          return this._pivot;
        }
      ),
      set: function set(value) {
        var pivot = this._pivot;
        if (pivot === value) {
          this._dispatchSpriteChange(SpriteModifyFlags.pivot);
        } else {
          var x = value.x, y = value.y;
          if (pivot.x !== x || pivot.y !== y) {
            pivot.set(x, y);
            this._dispatchSpriteChange(SpriteModifyFlags.pivot);
          }
        }
      }
    },
    {
      key: "border",
      get: (
        /**
        * Get the border of the sprite.
        *  x      y       z     w
        *  |      |       |     |
        * Left, bottom, right, top.
        * @remarks only use in sliced mode.
        */
        function get() {
          return this._border;
        }
      ),
      set: function set(value) {
        var border = this._border;
        var x = MathUtil.clamp(value.x, 0, 1);
        var y = MathUtil.clamp(value.y, 0, 1);
        border.set(x, y, MathUtil.clamp(value.z, 0, 1 - x), MathUtil.clamp(value.w, 0, 1 - y));
        this._dispatchSpriteChange(SpriteModifyFlags.border);
      }
    }
  ]);
  return Sprite2;
}(RefObject);
var SpriteUpdateFlags;
(function(SpriteUpdateFlags2) {
  SpriteUpdateFlags2[SpriteUpdateFlags2["positions"] = 1] = "positions";
  SpriteUpdateFlags2[SpriteUpdateFlags2["uvs"] = 2] = "uvs";
  SpriteUpdateFlags2[SpriteUpdateFlags2["automaticSize"] = 4] = "automaticSize";
  SpriteUpdateFlags2[SpriteUpdateFlags2["all"] = 7] = "all";
})(SpriteUpdateFlags || (SpriteUpdateFlags = {}));
var _SlicedSpriteAssembler;
var SlicedSpriteAssembler = (_SlicedSpriteAssembler = function() {
  function SlicedSpriteAssembler1() {
  }
  SlicedSpriteAssembler1.resetData = function resetData(renderer) {
    var renderData = renderer._renderData;
    var positions = renderData.positions, uvs = renderData.uvs;
    if (positions.length < 16) {
      for (var i = positions.length; i < 16; i++) {
        positions.push(new Vector3());
        uvs.push(new Vector2());
      }
    }
    renderData.triangles = [];
  };
  SlicedSpriteAssembler1.updatePositions = function updatePositions(renderer) {
    var width = renderer.width, height = renderer.height, sprite = renderer.sprite;
    var _renderer__renderData = renderer._renderData, positions = _renderer__renderData.positions, uvs = _renderer__renderData.uvs, triangles = _renderer__renderData.triangles;
    var border = sprite.border;
    var spriteUVs = sprite._getUVs();
    var spritePositions = sprite._getPositions();
    var _spritePositions_ = spritePositions[0], left = _spritePositions_.x, bottom = _spritePositions_.y;
    var _spritePositions_1 = spritePositions[3], right = _spritePositions_1.x, top = _spritePositions_1.y;
    var expectWidth = sprite.width, expectHeight = sprite.height;
    var fixedLeft = expectWidth * border.x;
    var fixedBottom = expectHeight * border.y;
    var fixedRight = expectWidth * border.z;
    var fixedTop = expectHeight * border.w;
    var row, column;
    if (fixedLeft + fixedRight > width) {
      var widthScale = width / (fixedLeft + fixedRight);
      row = [
        expectWidth * left * widthScale,
        fixedLeft * widthScale,
        fixedLeft * widthScale,
        width - expectWidth * (1 - right) * widthScale
      ];
    } else {
      row = [
        expectWidth * left,
        fixedLeft,
        width - fixedRight,
        width - expectWidth * (1 - right)
      ];
    }
    if (fixedTop + fixedBottom > height) {
      var heightScale = height / (fixedTop + fixedBottom);
      column = [
        expectHeight * bottom * heightScale,
        fixedBottom * heightScale,
        fixedBottom * heightScale,
        height - expectHeight * (1 - top) * heightScale
      ];
    } else {
      column = [
        expectHeight * bottom,
        fixedBottom,
        height - fixedTop,
        height - expectHeight * (1 - top)
      ];
    }
    var _renderer_sprite_pivot = renderer.sprite.pivot, pivotX = _renderer_sprite_pivot.x, pivotY = _renderer_sprite_pivot.y;
    var localTransX = renderer.width * pivotX;
    var localTransY = renderer.height * pivotY;
    var worldMatrix = SlicedSpriteAssembler._worldMatrix;
    var wE = worldMatrix.elements;
    var _renderer_entity_transform_worldMatrix = renderer.entity.transform.worldMatrix, pWE = _renderer_entity_transform_worldMatrix.elements;
    var sx = renderer.flipX ? -1 : 1;
    var sy = renderer.flipY ? -1 : 1;
    wE[0] = pWE[0] * sx, wE[1] = pWE[1] * sx, wE[2] = pWE[2] * sx;
    wE[4] = pWE[4] * sy, wE[5] = pWE[5] * sy, wE[6] = pWE[6] * sy;
    wE[8] = pWE[8], wE[9] = pWE[9], wE[10] = pWE[10];
    wE[12] = pWE[12] - localTransX * wE[0] - localTransY * wE[4];
    wE[13] = pWE[13] - localTransX * wE[1] - localTransY * wE[5];
    wE[14] = pWE[14] - localTransX * wE[2] - localTransY * wE[6];
    var vertexCount = 0;
    var realICount = 0;
    for (var i = 0; i < 4; i++) {
      var rowValue = row[i];
      var rowU = spriteUVs[i].x;
      for (var j = 0; j < 4; j++) {
        var columnValue = column[j];
        positions[vertexCount].set(wE[0] * rowValue + wE[4] * columnValue + wE[12], wE[1] * rowValue + wE[5] * columnValue + wE[13], wE[2] * rowValue + wE[6] * columnValue + wE[14]);
        uvs[vertexCount].set(rowU, spriteUVs[j].y);
        ++vertexCount;
      }
      ++realICount;
    }
    var realJCount = vertexCount / realICount;
    var indexOffset = 0;
    for (var i1 = 0; i1 < realICount - 1; ++i1) {
      for (var j1 = 0; j1 < realJCount - 1; ++j1) {
        var start = i1 * realJCount + j1;
        triangles[indexOffset++] = start;
        triangles[indexOffset++] = start + 1;
        triangles[indexOffset++] = start + realJCount;
        triangles[indexOffset++] = start + 1;
        triangles[indexOffset++] = start + realJCount + 1;
        triangles[indexOffset++] = start + realJCount;
      }
    }
    renderer._renderData.vertexCount = realICount * realJCount;
    triangles.length = (realICount - 1) * (realJCount - 1) * 6;
    var _renderer__bounds = renderer._bounds, min = _renderer__bounds.min, max = _renderer__bounds.max;
    min.set(row[0], column[0], 0);
    max.set(row[3], column[3], 0);
    renderer._bounds.transform(worldMatrix);
  };
  SlicedSpriteAssembler1.updateUVs = function updateUVs(renderer) {
  };
  return SlicedSpriteAssembler1;
}(), function() {
  _SlicedSpriteAssembler._worldMatrix = new Matrix();
}(), _SlicedSpriteAssembler);
SlicedSpriteAssembler = __decorate([
  StaticInterfaceImplement()
], SlicedSpriteAssembler);
var SpriteRenderer = function(Renderer2) {
  _inherits(SpriteRenderer2, Renderer2);
  function SpriteRenderer2(entity) {
    var _this;
    _this = Renderer2.call(this, entity) || this;
    _this._color = new Color(1, 1, 1, 1);
    _this._sprite = null;
    _this._automaticWidth = 0;
    _this._automaticHeight = 0;
    _this._customWidth = void 0;
    _this._customHeight = void 0;
    _this._flipX = false;
    _this._flipY = false;
    _this._maskLayer = SpriteMaskLayer.Layer0;
    _this._maskInteraction = SpriteMaskInteraction.None;
    _this._renderData = new RenderData2D(4, [], [], null, _this._color);
    _this.drawMode = SpriteDrawMode.Simple;
    _this.setMaterial(_this._engine._spriteDefaultMaterial);
    _this._onSpriteChange = _this._onSpriteChange.bind(_assert_this_initialized(_this));
    return _this;
  }
  var _proto = SpriteRenderer2.prototype;
  _proto._cloneTo = function _cloneTo(target) {
    target.sprite = this._sprite;
    target.drawMode = this._drawMode;
  };
  _proto._onDestroy = function _onDestroy() {
    var _this__sprite;
    (_this__sprite = this._sprite) == null ? void 0 : _this__sprite._updateFlagManager.removeListener(this._onSpriteChange);
    this._color = null;
    this._sprite = null;
    this._assembler = null;
    this._renderData = null;
    Renderer2.prototype._onDestroy.call(this);
  };
  _proto._updateBounds = function _updateBounds(worldBounds) {
    if (this.sprite) {
      this._assembler.updatePositions(this);
    } else {
      worldBounds.min.set(0, 0, 0);
      worldBounds.max.set(0, 0, 0);
    }
  };
  _proto._render = function _render(context) {
    var _this_sprite;
    if (!((_this_sprite = this.sprite) == null ? void 0 : _this_sprite.texture) || !this.width || !this.height) {
      return;
    }
    if (this._dirtyUpdateFlag & RendererUpdateFlags.WorldVolume) {
      this._assembler.updatePositions(this);
      this._dirtyUpdateFlag &= ~RendererUpdateFlags.WorldVolume;
    }
    if (this._dirtyUpdateFlag & 2) {
      this._assembler.updateUVs(this);
      this._dirtyUpdateFlag &= ~2;
    }
    var material = this.getMaterial();
    var passes = material.shader.passes;
    var renderStates = material.renderStates;
    var texture = this.sprite.texture;
    for (var i = 0, n = passes.length; i < n; i++) {
      var spriteElement = this._engine._spriteElementPool.getFromPool();
      spriteElement.setValue(this, this._renderData, material, texture, renderStates[i], passes[i]);
      context.camera._renderPipeline.pushPrimitive(spriteElement);
    }
  };
  _proto._calDefaultSize = function _calDefaultSize() {
    var sprite = this._sprite;
    if (sprite) {
      this._automaticWidth = sprite.width;
      this._automaticHeight = sprite.height;
    } else {
      this._automaticWidth = this._automaticHeight = 0;
    }
    this._dirtyUpdateFlag &= ~4;
  };
  _proto._updateStencilState = function _updateStencilState() {
    var material = this.getInstanceMaterial();
    var stencilState = material.renderState.stencilState;
    var maskInteraction = this._maskInteraction;
    if (maskInteraction === SpriteMaskInteraction.None) {
      stencilState.enabled = false;
      stencilState.writeMask = 255;
      stencilState.referenceValue = 0;
      stencilState.compareFunctionFront = stencilState.compareFunctionBack = CompareFunction.Always;
    } else {
      stencilState.enabled = true;
      stencilState.writeMask = 0;
      stencilState.referenceValue = 1;
      var compare = maskInteraction === SpriteMaskInteraction.VisibleInsideMask ? CompareFunction.LessEqual : CompareFunction.Greater;
      stencilState.compareFunctionFront = compare;
      stencilState.compareFunctionBack = compare;
    }
  };
  _proto._onSpriteChange = function _onSpriteChange(type) {
    switch (type) {
      case SpriteModifyFlags.texture:
        this.shaderData.setTexture(SpriteRenderer2._textureProperty, this.sprite.texture);
        break;
      case SpriteModifyFlags.size:
        this._dirtyUpdateFlag |= 4;
        if (this._drawMode === SpriteDrawMode.Sliced || this._customWidth === void 0 || this._customHeight === void 0) {
          this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;
        }
        break;
      case SpriteModifyFlags.border:
        this._drawMode === SpriteDrawMode.Sliced && (this._dirtyUpdateFlag |= 3);
        break;
      case SpriteModifyFlags.region:
      case SpriteModifyFlags.atlasRegionOffset:
        this._dirtyUpdateFlag |= 3;
        break;
      case SpriteModifyFlags.atlasRegion:
        this._dirtyUpdateFlag |= 2;
        break;
      case SpriteModifyFlags.pivot:
        this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;
        break;
    }
  };
  _create_class2(SpriteRenderer2, [
    {
      key: "drawMode",
      get: (
        /**
        * The draw mode of the sprite renderer.
        */
        function get() {
          return this._drawMode;
        }
      ),
      set: function set(drawMode) {
        if (this._drawMode !== drawMode) {
          this._drawMode = drawMode;
          switch (drawMode) {
            case SpriteDrawMode.Simple:
              this._assembler = SimpleSpriteAssembler;
              break;
            case SpriteDrawMode.Sliced:
              this._assembler = SlicedSpriteAssembler;
              break;
          }
          this._assembler.resetData(this);
          this._dirtyUpdateFlag |= 3;
        }
      }
    },
    {
      key: "sprite",
      get: (
        /**
        * The Sprite to render.
        */
        function get() {
          return this._sprite;
        }
      ),
      set: function set(value) {
        var lastSprite = this._sprite;
        if (lastSprite !== value) {
          lastSprite && lastSprite._updateFlagManager.removeListener(this._onSpriteChange);
          this._dirtyUpdateFlag |= 7;
          if (value) {
            value._updateFlagManager.addListener(this._onSpriteChange);
            this.shaderData.setTexture(SpriteRenderer2._textureProperty, value.texture);
          } else {
            this.shaderData.setTexture(SpriteRenderer2._textureProperty, null);
          }
          this._sprite = value;
        }
      }
    },
    {
      key: "color",
      get: (
        /**
        * Rendering color for the Sprite graphic.
        */
        function get() {
          return this._color;
        }
      ),
      set: function set(value) {
        if (this._color !== value) {
          this._color.copyFrom(value);
        }
      }
    },
    {
      key: "width",
      get: (
        /**
        * Render width (in world coordinates).
        *
        * @remarks
        * If width is set, return the set value,
        * otherwise return `SpriteRenderer.sprite.width`.
        */
        function get() {
          if (this._customWidth !== void 0) {
            return this._customWidth;
          } else {
            this._dirtyUpdateFlag & 4 && this._calDefaultSize();
            return this._automaticWidth;
          }
        }
      ),
      set: function set(value) {
        if (this._customWidth !== value) {
          this._customWidth = value;
          this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;
        }
      }
    },
    {
      key: "height",
      get: (
        /**
        * Render height (in world coordinates).
        *
        * @remarks
        * If height is set, return the set value,
        * otherwise return `SpriteRenderer.sprite.height`.
        */
        function get() {
          if (this._customHeight !== void 0) {
            return this._customHeight;
          } else {
            this._dirtyUpdateFlag & 4 && this._calDefaultSize();
            return this._automaticHeight;
          }
        }
      ),
      set: function set(value) {
        if (this._customHeight !== value) {
          this._customHeight = value;
          this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;
        }
      }
    },
    {
      key: "flipX",
      get: (
        /**
        * Flips the sprite on the X axis.
        */
        function get() {
          return this._flipX;
        }
      ),
      set: function set(value) {
        if (this._flipX !== value) {
          this._flipX = value;
          this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;
        }
      }
    },
    {
      key: "flipY",
      get: (
        /**
        * Flips the sprite on the Y axis.
        */
        function get() {
          return this._flipY;
        }
      ),
      set: function set(value) {
        if (this._flipY !== value) {
          this._flipY = value;
          this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;
        }
      }
    },
    {
      key: "maskLayer",
      get: (
        /**
        * The mask layer the sprite renderer belongs to.
        */
        function get() {
          return this._maskLayer;
        }
      ),
      set: function set(value) {
        this._maskLayer = value;
      }
    },
    {
      key: "maskInteraction",
      get: (
        /**
        * Interacts with the masks.
        */
        function get() {
          return this._maskInteraction;
        }
      ),
      set: function set(value) {
        if (this._maskInteraction !== value) {
          this._maskInteraction = value;
          this._updateStencilState();
        }
      }
    }
  ]);
  return SpriteRenderer2;
}(Renderer);
(function() {
  SpriteRenderer._textureProperty = Shader.getPropertyByName("u_spriteTexture");
})();
__decorate([
  ignoreClone
], SpriteRenderer.prototype, "_renderData", void 0);
__decorate([
  ignoreClone
], SpriteRenderer.prototype, "_drawMode", void 0);
__decorate([
  ignoreClone
], SpriteRenderer.prototype, "_assembler", void 0);
__decorate([
  deepClone
], SpriteRenderer.prototype, "_color", void 0);
__decorate([
  ignoreClone
], SpriteRenderer.prototype, "_sprite", void 0);
__decorate([
  ignoreClone
], SpriteRenderer.prototype, "_automaticWidth", void 0);
__decorate([
  ignoreClone
], SpriteRenderer.prototype, "_automaticHeight", void 0);
__decorate([
  assignmentClone
], SpriteRenderer.prototype, "_customWidth", void 0);
__decorate([
  assignmentClone
], SpriteRenderer.prototype, "_customHeight", void 0);
__decorate([
  assignmentClone
], SpriteRenderer.prototype, "_flipX", void 0);
__decorate([
  assignmentClone
], SpriteRenderer.prototype, "_flipY", void 0);
__decorate([
  assignmentClone
], SpriteRenderer.prototype, "_maskLayer", void 0);
__decorate([
  assignmentClone
], SpriteRenderer.prototype, "_maskInteraction", void 0);
__decorate([
  ignoreClone
], SpriteRenderer.prototype, "_onSpriteChange", null);
var SpriteRendererUpdateFlags;
(function(SpriteRendererUpdateFlags2) {
  SpriteRendererUpdateFlags2[SpriteRendererUpdateFlags2[
    /** UV. */
    "UV"
  ] = 2] = "UV";
  SpriteRendererUpdateFlags2[SpriteRendererUpdateFlags2[
    /** WorldVolume and UV . */
    "RenderData"
  ] = 3] = "RenderData";
  SpriteRendererUpdateFlags2[SpriteRendererUpdateFlags2[
    /** Automatic Size. */
    "AutomaticSize"
  ] = 4] = "AutomaticSize";
  SpriteRendererUpdateFlags2[SpriteRendererUpdateFlags2[
    /** All. */
    "All"
  ] = 7] = "All";
})(SpriteRendererUpdateFlags || (SpriteRendererUpdateFlags = {}));
var CharRenderData = function CharRenderData2() {
  this.localPositions = new Vector4();
  var positions = [
    new Vector3(),
    new Vector3(),
    new Vector3(),
    new Vector3()
  ];
  this.renderData = new RenderData2D(4, positions, null, CharRenderData2.triangles, null);
};
(function() {
  CharRenderData.triangles = [
    0,
    2,
    1,
    2,
    0,
    3
  ];
})();
var CharRenderDataPool = function() {
  function CharRenderDataPool2(type, length2) {
    this._elements = [];
    this._type = type;
    var elements = this._elements;
    for (var i = 0; i < length2; ++i) {
      elements[i] = new type();
    }
  }
  var _proto = CharRenderDataPool2.prototype;
  _proto.get = function get() {
    if (this._elements.length > 0) {
      return this._elements.pop();
    }
    return new this._type();
  };
  _proto.put = function put(data) {
    this._elements.push(data);
  };
  return CharRenderDataPool2;
}();
var TextUtils = function() {
  function TextUtils2() {
  }
  TextUtils2.textContext = function textContext() {
    var textContext2 = TextUtils2._textContext;
    if (!textContext2) {
      var canvas;
      try {
        canvas = new OffscreenCanvas(0, 0);
      } catch (e) {
        canvas = document.createElement("canvas");
      }
      var context = canvas.getContext("2d");
      textContext2 = {
        canvas,
        context
      };
      TextUtils2._textContext = textContext2;
    }
    return textContext2;
  };
  TextUtils2.measureFont = function measureFont(fontString) {
    var fontSizeInfoCache = TextUtils2._fontSizeInfoCache;
    var info2 = fontSizeInfoCache[fontString];
    if (info2) {
      return info2;
    }
    info2 = TextUtils2._measureFontOrChar(fontString);
    fontSizeInfoCache[fontString] = info2;
    return info2;
  };
  TextUtils2.getNativeFontString = function getNativeFontString(fontName, fontSize, style) {
    var str = style & FontStyle.Bold ? "bold " : "";
    style & FontStyle.Italic && (str += "italic ");
    if (!/([\"\'])[^\'\"]+\1/.test(fontName) && TextUtils2._genericFontFamilies.indexOf(fontName) == -1) {
      fontName = '"' + fontName + '"';
    }
    str += fontSize + "px " + fontName;
    return str;
  };
  TextUtils2.measureChar = function measureChar(char, fontString) {
    return TextUtils2._measureFontOrChar(fontString, char);
  };
  TextUtils2.measureTextWithWrap = function measureTextWithWrap(renderer) {
    var fontSize = renderer.fontSize, fontStyle = renderer.fontStyle, subFont = renderer._subFont;
    var name = renderer.font.name;
    var fontString = TextUtils2.getNativeFontString(name, fontSize, fontStyle);
    var fontSizeInfo = TextUtils2.measureFont(fontString);
    var subTexts = renderer.text.split(/(?:\r\n|\r|\n)/);
    var lines = new Array();
    var lineWidths = new Array();
    var lineMaxSizes = new Array();
    var _pixelsPerUnit = Engine._pixelsPerUnit;
    var lineHeight = fontSizeInfo.size + renderer.lineSpacing * _pixelsPerUnit;
    var wrapWidth = renderer.width * _pixelsPerUnit;
    var width = 0;
    for (var i = 0, n = subTexts.length; i < n; ++i) {
      var subText = subTexts[i];
      var chars = "";
      var charsWidth = 0;
      var maxAscent = -1;
      var maxDescent = -1;
      for (var j = 0, m = subText.length; j < m; ++j) {
        var char = subText[j];
        var charInfo = TextUtils2._getCharInfo(char, fontString, subFont);
        var w = charInfo.w, offsetY = charInfo.offsetY;
        var halfH = charInfo.h * 0.5;
        var ascent = halfH + offsetY;
        var descent = halfH - offsetY;
        if (charsWidth + w > wrapWidth) {
          if (charsWidth === 0) {
            lines.push(char);
            lineWidths.push(w);
            lineMaxSizes.push({
              ascent,
              descent,
              size: ascent + descent
            });
          } else {
            lines.push(chars);
            lineWidths.push(charsWidth);
            lineMaxSizes.push({
              ascent: maxAscent,
              descent: maxDescent,
              size: maxAscent + maxDescent
            });
            chars = char;
            charsWidth = charInfo.xAdvance;
            maxAscent = ascent;
            maxDescent = descent;
          }
        } else {
          chars += char;
          charsWidth += charInfo.xAdvance;
          maxAscent < ascent && (maxAscent = ascent);
          maxDescent < descent && (maxDescent = descent);
        }
      }
      if (charsWidth > 0) {
        lines.push(chars);
        lineWidths.push(charsWidth);
        lineMaxSizes.push({
          ascent: maxAscent,
          descent: maxDescent,
          size: maxAscent + maxDescent
        });
      }
    }
    var height = renderer.height * _pixelsPerUnit;
    if (renderer.overflowMode === OverflowMode.Overflow) {
      height = lineHeight * lines.length;
    }
    return {
      width,
      height,
      lines,
      lineWidths,
      lineHeight,
      lineMaxSizes
    };
  };
  TextUtils2.measureTextWithoutWrap = function measureTextWithoutWrap(renderer) {
    var fontSize = renderer.fontSize, fontStyle = renderer.fontStyle, subFont = renderer._subFont;
    var name = renderer.font.name;
    var fontString = TextUtils2.getNativeFontString(name, fontSize, fontStyle);
    var fontSizeInfo = TextUtils2.measureFont(fontString);
    var lines = renderer.text.split(/(?:\r\n|\r|\n)/);
    var lineCount = lines.length;
    var lineWidths = new Array();
    var lineMaxSizes = new Array();
    var _pixelsPerUnit = Engine._pixelsPerUnit;
    var lineHeight = fontSizeInfo.size + renderer.lineSpacing * _pixelsPerUnit;
    var width = 0;
    var height = renderer.height * _pixelsPerUnit;
    if (renderer.overflowMode === OverflowMode.Overflow) {
      height = lineHeight * lineCount;
    }
    for (var i = 0; i < lineCount; ++i) {
      var line = lines[i];
      var curWidth = 0;
      var maxAscent = -1;
      var maxDescent = -1;
      for (var j = 0, m = line.length; j < m; ++j) {
        var charInfo = TextUtils2._getCharInfo(line[j], fontString, subFont);
        curWidth += charInfo.xAdvance;
        var offsetY = charInfo.offsetY;
        var halfH = charInfo.h * 0.5;
        var ascent = halfH + offsetY;
        var descent = halfH - offsetY;
        maxAscent < ascent && (maxAscent = ascent);
        maxDescent < descent && (maxDescent = descent);
      }
      lineWidths[i] = curWidth;
      lineMaxSizes[i] = {
        ascent: maxAscent,
        descent: maxDescent,
        size: maxAscent + maxDescent
      };
      if (curWidth > width) {
        width = curWidth;
      }
    }
    return {
      width,
      height,
      lines,
      lineWidths,
      lineHeight,
      lineMaxSizes
    };
  };
  TextUtils2.getNativeFontHash = function getNativeFontHash(fontName, fontSize, style) {
    var str = style & FontStyle.Bold ? "bold" : "";
    style & FontStyle.Italic && (str += "italic");
    if (!/([\"\'])[^\'\"]+\1/.test(fontName) && TextUtils2._genericFontFamilies.indexOf(fontName) == -1) {
      fontName = "" + fontName;
    }
    str += fontSize + "px" + fontName;
    return str;
  };
  TextUtils2._measureFontOrChar = function _measureFontOrChar(fontString, char) {
    if (char === void 0)
      char = "";
    var _TextUtils_textContext = TextUtils2.textContext(), canvas = _TextUtils_textContext.canvas, context = _TextUtils_textContext.context;
    context.font = fontString;
    var measureString = char || TextUtils2._measureString;
    var width = Math.max(1, Math.round(context.measureText(measureString).width));
    var baseline = Math.ceil(context.measureText(TextUtils2._measureBaseline).width);
    var height = baseline * TextUtils2._heightMultiplier;
    baseline = TextUtils2._baselineMultiplier * baseline | 0;
    canvas.width = width;
    canvas.height = height;
    context.font = fontString;
    context.fillStyle = "#000";
    context.clearRect(0, 0, width, height);
    context.textBaseline = "middle";
    context.fillStyle = "#fff";
    context.fillText(measureString, 0, baseline);
    var colorData = context.getImageData(0, 0, width, height).data;
    var len = colorData.length;
    var top = -1;
    var bottom = -1;
    var y;
    var ascent = 0;
    var descent = 0;
    var size = 0;
    var integerW = canvas.width;
    var integerWReciprocal = 1 / integerW;
    for (var i = 0; i < len; i += 4) {
      if (colorData[i + 3] !== 0) {
        var idx = i * 0.25;
        y = ~~(idx * integerWReciprocal);
        if (top === -1) {
          top = y;
        }
        if (y > bottom) {
          bottom = y;
        }
      } else {
        colorData[i] = colorData[i + 1] = colorData[i + 2] = 255;
      }
    }
    if (top !== -1 && bottom !== -1) {
      ascent = baseline - top;
      descent = bottom - baseline + 1;
      size = ascent + descent;
    }
    var sizeInfo = {
      ascent,
      descent,
      size
    };
    if (char) {
      var data = null;
      if (size > 0) {
        var lineIntegerW = integerW * 4;
        data = new Uint8Array(colorData.buffer, top * lineIntegerW, size * lineIntegerW);
      }
      return {
        x: 0,
        y: 0,
        w: width,
        h: size,
        offsetX: 0,
        offsetY: (ascent - descent) * 0.5,
        xAdvance: width,
        uvs: [
          new Vector2(),
          new Vector2(),
          new Vector2(),
          new Vector2()
        ],
        ascent,
        descent,
        index: 0,
        data
      };
    } else {
      return sizeInfo;
    }
  };
  TextUtils2._getCharInfo = function _getCharInfo(char, fontString, font) {
    var charInfo = font._getCharInfo(char);
    if (!charInfo) {
      charInfo = TextUtils2.measureChar(char, fontString);
      font._uploadCharTexture(charInfo);
      font._addCharInfo(char, charInfo);
    }
    return charInfo;
  };
  return TextUtils2;
}();
(function() {
  TextUtils._genericFontFamilies = [
    "serif",
    "sans-serif",
    "monospace",
    "cursive",
    "fantasy",
    "system-ui",
    "math",
    "emoji",
    "fangsong"
  ];
})();
(function() {
  TextUtils._measureString = "|ÉqÅ";
})();
(function() {
  TextUtils._measureBaseline = "M";
})();
(function() {
  TextUtils._heightMultiplier = 2;
})();
(function() {
  TextUtils._baselineMultiplier = 1.4;
})();
(function() {
  TextUtils._fontSizeInfoCache = {};
})();
(function() {
  TextUtils._textContext = null;
})();
var TextRenderer = function(Renderer2) {
  _inherits(TextRenderer2, Renderer2);
  function TextRenderer2(entity) {
    var _this;
    _this = Renderer2.call(this, entity) || this;
    _this._subFont = null;
    _this._charRenderDatas = [];
    _this._dirtyFlag = 15;
    _this._color = new Color(1, 1, 1, 1);
    _this._text = "";
    _this._width = 0;
    _this._height = 0;
    _this._localBounds = new BoundingBox();
    _this._font = null;
    _this._fontSize = 24;
    _this._fontStyle = FontStyle.None;
    _this._lineSpacing = 0;
    _this._horizontalAlignment = TextHorizontalAlignment.Center;
    _this._verticalAlignment = TextVerticalAlignment.Center;
    _this._enableWrapping = false;
    _this._overflowMode = OverflowMode.Overflow;
    _this._maskInteraction = SpriteMaskInteraction.None;
    _this._maskLayer = SpriteMaskLayer.Layer0;
    var engine = _assert_this_initialized(_this).engine;
    _this._font = engine._textDefaultFont;
    _this._font._addRefCount(1);
    _this.setMaterial(engine._spriteDefaultMaterial);
    return _this;
  }
  var _proto = TextRenderer2.prototype;
  _proto._onDestroy = function _onDestroy() {
    var charRenderDatas = this._charRenderDatas;
    for (var i = 0, n = charRenderDatas.length; i < n; ++i) {
      TextRenderer2._charRenderDataPool.put(charRenderDatas[i]);
    }
    charRenderDatas.length = 0;
    if (this._font) {
      this._font._addRefCount(-1);
      this._font = null;
    }
    this._subFont && (this._subFont = null);
    Renderer2.prototype._onDestroy.call(this);
  };
  _proto._cloneTo = function _cloneTo(target) {
    target.font = this._font;
    target._subFont = this._subFont;
  };
  _proto._isContainDirtyFlag = function _isContainDirtyFlag(type) {
    return (this._dirtyFlag & type) != 0;
  };
  _proto._setDirtyFlagTrue = function _setDirtyFlagTrue(type) {
    this._dirtyFlag |= type;
  };
  _proto._setDirtyFlagFalse = function _setDirtyFlagFalse(type) {
    this._dirtyFlag &= ~type;
  };
  _proto._updateBounds = function _updateBounds(worldBounds) {
    BoundingBox.transform(this._localBounds, this._entity.transform.worldMatrix, worldBounds);
  };
  _proto._render = function _render(context) {
    if (this._text === "" || this.enableWrapping && this.width <= 0 || this.overflowMode === OverflowMode.Truncate && this.height <= 0) {
      return;
    }
    if (this._isContainDirtyFlag(16)) {
      this._updateStencilState();
      this._setDirtyFlagFalse(16);
    }
    if (this._isContainDirtyFlag(1)) {
      this._resetSubFont();
      this._setDirtyFlagFalse(1);
    }
    if (this._isContainDirtyFlag(2)) {
      this._updateLocalData();
      this._setDirtyFlagFalse(2);
    }
    if (this._isContainDirtyFlag(4)) {
      this._updatePosition();
      this._setDirtyFlagFalse(4);
    }
    var spriteElementPool = this._engine._spriteElementPool;
    var textElement = this._engine._textElementPool.getFromPool();
    var charElements = textElement.charElements;
    var material = this.getMaterial();
    var charRenderDatas = this._charRenderDatas;
    var charCount = charRenderDatas.length;
    var passes = material.shader.passes;
    var renderStates = material.renderStates;
    textElement.component = this;
    textElement.material = material;
    charElements.length = charCount;
    textElement.renderState = renderStates[0];
    for (var i = 0; i < charCount; ++i) {
      var charRenderData = charRenderDatas[i];
      var spriteElement = spriteElementPool.getFromPool();
      spriteElement.setValue(this, charRenderData.renderData, material, charRenderData.texture, renderStates[0], passes[0]);
      charElements[i] = spriteElement;
    }
    context.camera._renderPipeline.pushPrimitive(textElement);
  };
  _proto._updateStencilState = function _updateStencilState() {
    var material = this.getInstanceMaterial();
    var stencilState = material.renderState.stencilState;
    var maskInteraction = this._maskInteraction;
    if (maskInteraction === SpriteMaskInteraction.None) {
      stencilState.enabled = false;
      stencilState.writeMask = 255;
      stencilState.referenceValue = 0;
      stencilState.compareFunctionFront = stencilState.compareFunctionBack = CompareFunction.Always;
    } else {
      stencilState.enabled = true;
      stencilState.writeMask = 0;
      stencilState.referenceValue = 1;
      var compare = maskInteraction === SpriteMaskInteraction.VisibleInsideMask ? CompareFunction.LessEqual : CompareFunction.Greater;
      stencilState.compareFunctionFront = compare;
      stencilState.compareFunctionBack = compare;
    }
  };
  _proto._resetSubFont = function _resetSubFont() {
    this._subFont = this._font._getSubFont(this.fontSize, this.fontStyle);
  };
  _proto._updatePosition = function _updatePosition() {
    var transform = this.entity.transform;
    var e = transform.worldMatrix.elements;
    var charRenderDatas = this._charRenderDatas;
    var e0 = e[0], e1 = e[1], e2 = e[2], e4 = e[4], e5 = e[5], e6 = e[6], e12 = e[12], e13 = e[13], e14 = e[14];
    var up = TextRenderer2._tempVec31.set(e4, e5, e6);
    var right = TextRenderer2._tempVec30.set(e0, e1, e2);
    for (var i = 0, n = charRenderDatas.length; i < n; ++i) {
      var charRenderData = charRenderDatas[i];
      var localPositions = charRenderData.localPositions;
      var positions = charRenderData.renderData.positions;
      var topLeftX = localPositions.x, topLeftY = localPositions.y;
      var worldPosition0 = positions[0];
      worldPosition0.x = topLeftX * e0 + topLeftY * e4 + e12;
      worldPosition0.y = topLeftX * e1 + topLeftY * e5 + e13;
      worldPosition0.z = topLeftX * e2 + topLeftY * e6 + e14;
      var worldPosition1 = positions[1];
      Vector3.scale(right, localPositions.z - topLeftX, worldPosition1);
      Vector3.add(worldPosition0, worldPosition1, worldPosition1);
      var worldPosition2 = positions[2];
      Vector3.scale(up, localPositions.w - topLeftY, worldPosition2);
      Vector3.add(worldPosition0, worldPosition2, positions[3]);
      Vector3.add(worldPosition1, worldPosition2, worldPosition2);
    }
  };
  _proto._updateLocalData = function _updateLocalData() {
    var _this = this, color = _this.color, horizontalAlignment = _this.horizontalAlignment, verticalAlignment = _this.verticalAlignment, charRenderDatas = _this._charRenderDatas;
    var _this__localBounds = this._localBounds, min = _this__localBounds.min, max = _this__localBounds.max;
    min.set(0, 0, 0);
    max.set(0, 0, 0);
    var _pixelsPerUnit = Engine._pixelsPerUnit;
    var pixelsPerUnitReciprocal = 1 / _pixelsPerUnit;
    var charFont = this._subFont;
    var rendererWidth = this.width * _pixelsPerUnit;
    var halfRendererWidth = rendererWidth * 0.5;
    var rendererHeight = this.height * _pixelsPerUnit;
    var textMetrics = this.enableWrapping ? TextUtils.measureTextWithWrap(this) : TextUtils.measureTextWithoutWrap(this);
    var height = textMetrics.height, lines = textMetrics.lines, lineWidths = textMetrics.lineWidths, lineHeight = textMetrics.lineHeight, lineMaxSizes = textMetrics.lineMaxSizes;
    var charRenderDataPool = TextRenderer2._charRenderDataPool;
    var halfLineHeight = lineHeight * 0.5;
    var linesLen = lines.length;
    var startY = 0;
    var topDiff = lineHeight * 0.5 - lineMaxSizes[0].ascent;
    var bottomDiff = lineHeight * 0.5 - lineMaxSizes[linesLen - 1].descent - 1;
    switch (verticalAlignment) {
      case TextVerticalAlignment.Top:
        startY = rendererHeight * 0.5 - halfLineHeight + topDiff;
        break;
      case TextVerticalAlignment.Center:
        startY = height * 0.5 - halfLineHeight - (bottomDiff - topDiff) * 0.5;
        break;
      case TextVerticalAlignment.Bottom:
        startY = height - rendererHeight * 0.5 - halfLineHeight - bottomDiff;
        break;
    }
    var renderDataCount = 0;
    var minX = Number.MAX_SAFE_INTEGER;
    var minY = Number.MAX_SAFE_INTEGER;
    var maxX = Number.MIN_SAFE_INTEGER;
    var maxY = Number.MIN_SAFE_INTEGER;
    var lastLineIndex = linesLen - 1;
    for (var i = 0; i < linesLen; ++i) {
      var line = lines[i];
      var lineWidth = lineWidths[i];
      var startX = 0;
      switch (horizontalAlignment) {
        case TextHorizontalAlignment.Left:
          startX = -halfRendererWidth;
          break;
        case TextHorizontalAlignment.Center:
          startX = -lineWidth * 0.5;
          break;
        case TextHorizontalAlignment.Right:
          startX = halfRendererWidth - lineWidth;
          break;
      }
      for (var j = 0, m = line.length - 1; j <= m; ++j) {
        var char = line[j];
        var charInfo = charFont._getCharInfo(char);
        if (charInfo.h > 0) {
          var charRenderData = charRenderDatas[renderDataCount] || charRenderDataPool.get();
          var renderData = charRenderData.renderData, localPositions = charRenderData.localPositions;
          charRenderData.texture = charFont._getTextureByIndex(charInfo.index);
          renderData.color = color;
          renderData.uvs = charInfo.uvs;
          var w = charInfo.w, ascent = charInfo.ascent, descent = charInfo.descent;
          var left = startX * pixelsPerUnitReciprocal;
          var right = (startX + w) * pixelsPerUnitReciprocal;
          var top = (startY + ascent) * pixelsPerUnitReciprocal;
          var bottom = (startY - descent + 1) * pixelsPerUnitReciprocal;
          localPositions.set(left, top, right, bottom);
          charRenderDatas[renderDataCount] = charRenderData;
          renderDataCount++;
          i === 0 && (maxY = Math.max(maxY, top));
          i === lastLineIndex && (minY = Math.min(minY, bottom));
          j === 0 && (minX = Math.min(minX, left));
          j === m && (maxX = Math.max(maxX, right));
        }
        startX += charInfo.xAdvance;
      }
      startY -= lineHeight;
    }
    min.set(minX, minY, 0);
    max.set(maxX, maxY, 0);
    var lastRenderDataCount = charRenderDatas.length;
    if (lastRenderDataCount > renderDataCount) {
      for (var i1 = renderDataCount; i1 < lastRenderDataCount; ++i1) {
        charRenderDataPool.put(charRenderDatas[i1]);
      }
      charRenderDatas.length = renderDataCount;
    }
    charFont._getLastIndex() > 0 && charRenderDatas.sort(function(a, b) {
      return a.texture.instanceId - b.texture.instanceId;
    });
  };
  _proto._onTransformChanged = function _onTransformChanged(bit) {
    Renderer2.prototype._onTransformChanged.call(this, bit);
    this._setDirtyFlagTrue(4 | 8);
  };
  _create_class2(TextRenderer2, [
    {
      key: "color",
      get: (
        /**
        * Rendering color for the Text.
        */
        function get() {
          return this._color;
        }
      ),
      set: function set(value) {
        if (this._color !== value) {
          this._color.copyFrom(value);
        }
      }
    },
    {
      key: "text",
      get: (
        /**
        * Rendering string for the Text.
        */
        function get() {
          return this._text;
        }
      ),
      set: function set(value) {
        value = value || "";
        if (this._text !== value) {
          this._text = value;
          this._setDirtyFlagTrue(14);
        }
      }
    },
    {
      key: "width",
      get: (
        /**
        * The width of the TextRenderer (in 3D world coordinates).
        */
        function get() {
          return this._width;
        }
      ),
      set: function set(value) {
        if (this._width !== value) {
          this._width = value;
          this._setDirtyFlagTrue(14);
        }
      }
    },
    {
      key: "height",
      get: (
        /**
        * The height of the TextRenderer (in 3D world coordinates).
        */
        function get() {
          return this._height;
        }
      ),
      set: function set(value) {
        if (this._height !== value) {
          this._height = value;
          this._setDirtyFlagTrue(14);
        }
      }
    },
    {
      key: "font",
      get: (
        /**
        * The font of the Text.
        */
        function get() {
          return this._font;
        }
      ),
      set: function set(value) {
        var lastFont = this._font;
        if (lastFont !== value) {
          lastFont && lastFont._addRefCount(-1);
          value && value._addRefCount(1);
          this._font = value;
          this._setDirtyFlagTrue(15);
        }
      }
    },
    {
      key: "fontSize",
      get: (
        /**
        * The font size of the Text.
        */
        function get() {
          return this._fontSize;
        }
      ),
      set: function set(value) {
        if (this._fontSize !== value) {
          this._fontSize = value;
          this._setDirtyFlagTrue(15);
        }
      }
    },
    {
      key: "fontStyle",
      get: (
        /**
        * The style of the font.
        */
        function get() {
          return this._fontStyle;
        }
      ),
      set: function set(value) {
        if (this.fontStyle !== value) {
          this._fontStyle = value;
          this._setDirtyFlagTrue(15);
        }
      }
    },
    {
      key: "lineSpacing",
      get: (
        /**
        * The space between two lines (in pixels).
        */
        function get() {
          return this._lineSpacing;
        }
      ),
      set: function set(value) {
        if (this._lineSpacing !== value) {
          this._lineSpacing = value;
          this._setDirtyFlagTrue(14);
        }
      }
    },
    {
      key: "horizontalAlignment",
      get: (
        /**
        * The horizontal alignment.
        */
        function get() {
          return this._horizontalAlignment;
        }
      ),
      set: function set(value) {
        if (this._horizontalAlignment !== value) {
          this._horizontalAlignment = value;
          this._setDirtyFlagTrue(14);
        }
      }
    },
    {
      key: "verticalAlignment",
      get: (
        /**
        * The vertical alignment.
        */
        function get() {
          return this._verticalAlignment;
        }
      ),
      set: function set(value) {
        if (this._verticalAlignment !== value) {
          this._verticalAlignment = value;
          this._setDirtyFlagTrue(14);
        }
      }
    },
    {
      key: "enableWrapping",
      get: (
        /**
        * Whether wrap text to next line when exceeds the width of the container.
        */
        function get() {
          return this._enableWrapping;
        }
      ),
      set: function set(value) {
        if (this._enableWrapping !== value) {
          this._enableWrapping = value;
          this._setDirtyFlagTrue(14);
        }
      }
    },
    {
      key: "overflowMode",
      get: (
        /**
        * The overflow mode.
        */
        function get() {
          return this._overflowMode;
        }
      ),
      set: function set(value) {
        if (this._overflowMode !== value) {
          this._overflowMode = value;
          this._setDirtyFlagTrue(14);
        }
      }
    },
    {
      key: "maskInteraction",
      get: (
        /**
        * Interacts with the masks.
        */
        function get() {
          return this._maskInteraction;
        }
      ),
      set: function set(value) {
        if (this._maskInteraction !== value) {
          this._maskInteraction = value;
          this._setDirtyFlagTrue(16);
        }
      }
    },
    {
      key: "maskLayer",
      get: (
        /**
        * The mask layer the sprite renderer belongs to.
        */
        function get() {
          return this._maskLayer;
        }
      ),
      set: function set(value) {
        this._maskLayer = value;
      }
    },
    {
      key: "bounds",
      get: (
        /**
        * The bounding volume of the TextRenderer.
        */
        function get() {
          this._isContainDirtyFlag(1) && this._resetSubFont();
          this._isContainDirtyFlag(2) && this._updateLocalData();
          this._isContainDirtyFlag(4) && this._updatePosition();
          this._isContainDirtyFlag(8) && this._updateBounds(this._bounds);
          this._setDirtyFlagFalse(15);
          return this._bounds;
        }
      )
    }
  ]);
  return TextRenderer2;
}(Renderer);
(function() {
  TextRenderer._charRenderDataPool = new CharRenderDataPool(CharRenderData, 50);
})();
(function() {
  TextRenderer._tempVec30 = new Vector3();
})();
(function() {
  TextRenderer._tempVec31 = new Vector3();
})();
__decorate([
  assignmentClone
], TextRenderer.prototype, "_subFont", void 0);
__decorate([
  ignoreClone
], TextRenderer.prototype, "_charRenderDatas", void 0);
__decorate([
  ignoreClone
], TextRenderer.prototype, "_dirtyFlag", void 0);
__decorate([
  deepClone
], TextRenderer.prototype, "_color", void 0);
__decorate([
  assignmentClone
], TextRenderer.prototype, "_text", void 0);
__decorate([
  assignmentClone
], TextRenderer.prototype, "_width", void 0);
__decorate([
  assignmentClone
], TextRenderer.prototype, "_height", void 0);
__decorate([
  ignoreClone
], TextRenderer.prototype, "_localBounds", void 0);
__decorate([
  assignmentClone
], TextRenderer.prototype, "_font", void 0);
__decorate([
  assignmentClone
], TextRenderer.prototype, "_fontSize", void 0);
__decorate([
  assignmentClone
], TextRenderer.prototype, "_fontStyle", void 0);
__decorate([
  assignmentClone
], TextRenderer.prototype, "_lineSpacing", void 0);
__decorate([
  assignmentClone
], TextRenderer.prototype, "_horizontalAlignment", void 0);
__decorate([
  assignmentClone
], TextRenderer.prototype, "_verticalAlignment", void 0);
__decorate([
  assignmentClone
], TextRenderer.prototype, "_enableWrapping", void 0);
__decorate([
  assignmentClone
], TextRenderer.prototype, "_overflowMode", void 0);
__decorate([
  assignmentClone
], TextRenderer.prototype, "_maskInteraction", void 0);
__decorate([
  assignmentClone
], TextRenderer.prototype, "_maskLayer", void 0);
var DirtyFlag;
(function(DirtyFlag2) {
  DirtyFlag2[DirtyFlag2["SubFont"] = 1] = "SubFont";
  DirtyFlag2[DirtyFlag2["LocalPositionBounds"] = 2] = "LocalPositionBounds";
  DirtyFlag2[DirtyFlag2["WorldPosition"] = 4] = "WorldPosition";
  DirtyFlag2[DirtyFlag2["WorldBounds"] = 8] = "WorldBounds";
  DirtyFlag2[DirtyFlag2["MaskInteraction"] = 16] = "MaskInteraction";
  DirtyFlag2[DirtyFlag2["Position"] = 14] = "Position";
  DirtyFlag2[DirtyFlag2["Font"] = 15] = "Font";
})(DirtyFlag || (DirtyFlag = {}));
var UniversalAnimationCurveOwnerAssembler = function() {
  function UniversalAnimationCurveOwnerAssembler2() {
  }
  var _proto = UniversalAnimationCurveOwnerAssembler2.prototype;
  _proto.initialize = function initialize(owner) {
    var mounted = owner.component;
    var properties = owner.property.split(".");
    var endIndex = properties.length - 1;
    for (var i = 0; i < endIndex; i++) {
      mounted = mounted[properties[i]];
    }
    this._mounted = mounted;
    this._propertyName = properties[endIndex];
  };
  _proto.getTargetValue = function getTargetValue() {
    return this._mounted[this._propertyName];
  };
  _proto.setTargetValue = function setTargetValue(value) {
    this._mounted[this._propertyName] = value;
  };
  return UniversalAnimationCurveOwnerAssembler2;
}();
var AnimationCurveOwner = function() {
  function AnimationCurveOwner2(target, type, property, cureType) {
    this.crossCurveMark = 0;
    this.hasSavedDefaultValue = false;
    this.baseEvaluateData = {
      curKeyframeIndex: 0,
      value: null
    };
    this.crossEvaluateData = {
      curKeyframeIndex: 0,
      value: null
    };
    this.target = target;
    this.type = type;
    this.property = property;
    this.component = target.getComponent(type);
    this._cureType = cureType;
    var assemblerType = AnimationCurveOwner2.getAssemblerType(type, property);
    this._assembler = new assemblerType();
    this._assembler.initialize(this);
    if (cureType._isReferenceType) {
      this.referenceTargetValue = this._assembler.getTargetValue();
    }
  }
  var _proto = AnimationCurveOwner2.prototype;
  _proto.evaluateAndApplyValue = function evaluateAndApplyValue(curve, time, layerWeight, additive) {
    if (curve.keys.length) {
      if (additive) {
        var value = curve._evaluateAdditive(time, this.baseEvaluateData);
        var cureType = this._cureType;
        if (cureType._isReferenceType) {
          cureType._additiveValue(value, layerWeight, this.referenceTargetValue);
        } else {
          var assembler = this._assembler;
          var originValue = assembler.getTargetValue();
          var additiveValue = cureType._additiveValue(value, layerWeight, originValue);
          assembler.setTargetValue(additiveValue);
        }
      } else {
        var value1 = curve._evaluate(time, this.baseEvaluateData);
        this._applyValue(value1, layerWeight);
      }
    }
  };
  _proto.crossFadeAndApplyValue = function crossFadeAndApplyValue(srcCurve, destCurve, srcTime, destTime, crossWeight, layerWeight, additive) {
    var srcValue = srcCurve && srcCurve.keys.length ? additive ? srcCurve._evaluateAdditive(srcTime, this.baseEvaluateData) : srcCurve._evaluate(srcTime, this.baseEvaluateData) : additive ? this._cureType._getZeroValue(this.baseEvaluateData.value) : this.defaultValue;
    var destValue = destCurve && destCurve.keys.length ? additive ? destCurve._evaluateAdditive(destTime, this.crossEvaluateData) : destCurve._evaluate(destTime, this.crossEvaluateData) : additive ? this._cureType._getZeroValue(this.crossEvaluateData.value) : this.defaultValue;
    this._applyCrossValue(srcValue, destValue, crossWeight, layerWeight, additive);
  };
  _proto.crossFadeFromPoseAndApplyValue = function crossFadeFromPoseAndApplyValue(destCurve, destTime, crossWeight, layerWeight, additive) {
    var srcValue = additive ? this._cureType._subtractValue(this.fixedPoseValue, this.defaultValue, this.baseEvaluateData.value) : this.fixedPoseValue;
    var destValue = destCurve && destCurve.keys.length ? additive ? destCurve._evaluateAdditive(destTime, this.crossEvaluateData) : destCurve._evaluate(destTime, this.crossEvaluateData) : additive ? this._cureType._getZeroValue(this.crossEvaluateData.value) : this.defaultValue;
    this._applyCrossValue(srcValue, destValue, crossWeight, layerWeight, additive);
  };
  _proto.revertDefaultValue = function revertDefaultValue() {
    this._assembler.setTargetValue(this.defaultValue);
  };
  _proto.saveDefaultValue = function saveDefaultValue() {
    if (this._cureType._isReferenceType) {
      this._cureType._copyValue(this.referenceTargetValue, this.defaultValue);
    } else {
      this.defaultValue = this._assembler.getTargetValue();
    }
    this.hasSavedDefaultValue = true;
  };
  _proto.saveFixedPoseValue = function saveFixedPoseValue() {
    if (this._cureType._isReferenceType) {
      this._cureType._copyValue(this.referenceTargetValue, this.fixedPoseValue);
    } else {
      this.fixedPoseValue = this._assembler.getTargetValue();
    }
  };
  _proto._applyValue = function _applyValue(value, weight) {
    if (weight === 1) {
      if (this._cureType._isReferenceType) {
        this._cureType._copyValue(value, this.referenceTargetValue);
      } else {
        this._assembler.setTargetValue(value);
      }
    } else {
      if (this._cureType._isReferenceType) {
        var targetValue = this.referenceTargetValue;
        this._cureType._lerpValue(targetValue, value, weight, targetValue);
      } else {
        var originValue = this._assembler.getTargetValue();
        var lerpValue = this._cureType._lerpValue(originValue, value, weight);
        this._assembler.setTargetValue(lerpValue);
      }
    }
  };
  _proto._applyCrossValue = function _applyCrossValue(srcValue, destValue, crossWeight, layerWeight, additive) {
    var out;
    if (this._cureType._isReferenceType) {
      out = this.baseEvaluateData.value;
      this._cureType._lerpValue(srcValue, destValue, crossWeight, out);
    } else {
      out = this._cureType._lerpValue(srcValue, destValue, crossWeight);
    }
    if (additive) {
      if (this._cureType._isReferenceType) {
        this._cureType._additiveValue(out, layerWeight, this.referenceTargetValue);
      } else {
        var originValue = this._assembler.getTargetValue();
        var lerpValue = this._cureType._additiveValue(out, layerWeight, originValue);
        this._assembler.setTargetValue(lerpValue);
      }
    } else {
      this._applyValue(out, layerWeight);
    }
  };
  AnimationCurveOwner2.registerAssembler = function registerAssembler(componentType, property, assemblerType) {
    var subMap = AnimationCurveOwner2._assemblerMap.get(componentType);
    if (!subMap) {
      subMap = {};
      AnimationCurveOwner2._assemblerMap.set(componentType, subMap);
    }
    subMap[property] = assemblerType;
  };
  AnimationCurveOwner2.getAssemblerType = function getAssemblerType(componentType, property) {
    var subMap = AnimationCurveOwner2._assemblerMap.get(componentType);
    var assemblerType = subMap ? subMap[property] : void 0;
    return assemblerType != null ? assemblerType : UniversalAnimationCurveOwnerAssembler;
  };
  return AnimationCurveOwner2;
}();
(function() {
  AnimationCurveOwner._assemblerMap = /* @__PURE__ */ new Map();
})();
var PositionAnimationCurveOwnerAssembler = function() {
  function PositionAnimationCurveOwnerAssembler2() {
  }
  var _proto = PositionAnimationCurveOwnerAssembler2.prototype;
  _proto.initialize = function initialize(owner) {
    this._transform = owner.target.transform;
  };
  _proto.getTargetValue = function getTargetValue() {
    return this._transform.position;
  };
  _proto.setTargetValue = function setTargetValue(value) {
    this._transform.position = value;
  };
  return PositionAnimationCurveOwnerAssembler2;
}();
AnimationCurveOwner.registerAssembler(Transform, "position", PositionAnimationCurveOwnerAssembler);
var RotationAnimationCurveOwnerAssembler = function() {
  function RotationAnimationCurveOwnerAssembler2() {
  }
  var _proto = RotationAnimationCurveOwnerAssembler2.prototype;
  _proto.initialize = function initialize(owner) {
    this._transform = owner.target.transform;
  };
  _proto.getTargetValue = function getTargetValue() {
    return this._transform.rotationQuaternion;
  };
  _proto.setTargetValue = function setTargetValue(value) {
    this._transform.rotationQuaternion = value;
  };
  return RotationAnimationCurveOwnerAssembler2;
}();
AnimationCurveOwner.registerAssembler(Transform, "rotationQuaternion", RotationAnimationCurveOwnerAssembler);
var ScaleAnimationCurveOwnerAssembler = function() {
  function ScaleAnimationCurveOwnerAssembler2() {
  }
  var _proto = ScaleAnimationCurveOwnerAssembler2.prototype;
  _proto.initialize = function initialize(owner) {
    this._transform = owner.target.transform;
  };
  _proto.getTargetValue = function getTargetValue() {
    return this._transform.scale;
  };
  _proto.setTargetValue = function setTargetValue(value) {
    this._transform.scale = value;
  };
  return ScaleAnimationCurveOwnerAssembler2;
}();
AnimationCurveOwner.registerAssembler(Transform, "scale", ScaleAnimationCurveOwnerAssembler);
var BlendShapeWeightsAnimationCurveOwnerAssembler = function() {
  function BlendShapeWeightsAnimationCurveOwnerAssembler2() {
  }
  var _proto = BlendShapeWeightsAnimationCurveOwnerAssembler2.prototype;
  _proto.initialize = function initialize(owner) {
    this._skinnedMeshRenderer = owner.target.getComponent(SkinnedMeshRenderer);
  };
  _proto.getTargetValue = function getTargetValue() {
    return this._skinnedMeshRenderer.blendShapeWeights;
  };
  _proto.setTargetValue = function setTargetValue(value) {
    this._skinnedMeshRenderer.blendShapeWeights = value;
  };
  return BlendShapeWeightsAnimationCurveOwnerAssembler2;
}();
AnimationCurveOwner.registerAssembler(SkinnedMeshRenderer, "blendShapeWeights", BlendShapeWeightsAnimationCurveOwnerAssembler);
var AnimationClipCurveBinding = function() {
  function AnimationClipCurveBinding2() {
    this._tempCurveOwner = {};
  }
  var _proto = AnimationClipCurveBinding2.prototype;
  _proto._createCurveOwner = function _createCurveOwner(entity) {
    var curveType = this.curve.constructor;
    var owner = new AnimationCurveOwner(entity, this.type, this.property, curveType);
    curveType._initializeOwner(owner);
    return owner;
  };
  _proto._getTempCurveOwner = function _getTempCurveOwner(entity) {
    var instanceId = entity.instanceId;
    if (!this._tempCurveOwner[instanceId]) {
      this._tempCurveOwner[instanceId] = this._createCurveOwner(entity);
    }
    return this._tempCurveOwner[instanceId];
  };
  return AnimationClipCurveBinding2;
}();
var AnimationEvent = function AnimationEvent2() {
};
var AnimationClip = function() {
  function AnimationClip2(name) {
    this.name = name;
    this._curveBindings = [];
    this._length = 0;
    this._events = [];
  }
  var _proto = AnimationClip2.prototype;
  _proto.addEvent = function addEvent(param, time, parameter) {
    if (typeof param === "string") {
      var event = new AnimationEvent();
      event.functionName = param;
      event.time = time;
      event.parameter = parameter;
      this._events.push(event);
    } else {
      this._events.push(param);
    }
    this._events.sort(function(a, b) {
      return a.time - b.time;
    });
  };
  _proto.clearEvents = function clearEvents() {
    this._events.length = 0;
  };
  _proto.addCurveBinding = function addCurveBinding(relativePath, type, propertyName, curve) {
    var curveBinding = new AnimationClipCurveBinding();
    curveBinding.relativePath = relativePath;
    curveBinding.type = type;
    curveBinding.property = propertyName;
    curveBinding.curve = curve;
    if (curve.length > this._length) {
      this._length = curve.length;
    }
    this._curveBindings.push(curveBinding);
  };
  _proto.clearCurveBindings = function clearCurveBindings() {
    this._curveBindings.length = 0;
    this._length = 0;
  };
  _proto._sampleAnimation = function _sampleAnimation(entity, time) {
    var _this = this, curveBindings = _this._curveBindings;
    for (var i = curveBindings.length - 1; i >= 0; i--) {
      var curveData = curveBindings[i];
      var targetEntity = entity.findByPath(curveData.relativePath);
      if (targetEntity) {
        var curveOwner = curveData._getTempCurveOwner(targetEntity);
        curveOwner.evaluateAndApplyValue(curveData.curve, time, 1, false);
      }
    }
  };
  _create_class2(AnimationClip2, [
    {
      key: "events",
      get: (
        /**
        * Animation events for this animation clip.
        */
        function get() {
          return this._events;
        }
      )
    },
    {
      key: "curveBindings",
      get: (
        /**
        * Animation curve bindings for this animation clip.
        */
        function get() {
          return this._curveBindings;
        }
      )
    },
    {
      key: "length",
      get: (
        /**
        * Animation length in seconds.
        */
        function get() {
          return this._length;
        }
      )
    }
  ]);
  return AnimationClip2;
}();
var InterpolationType;
(function(InterpolationType2) {
  InterpolationType2[InterpolationType2[
    /** Linear interpolation */
    "Linear"
  ] = 0] = "Linear";
  InterpolationType2[InterpolationType2[
    /** Cubic spline interpolation */
    "CubicSpine"
  ] = 1] = "CubicSpine";
  InterpolationType2[InterpolationType2[
    /** Stepped interpolation */
    "Step"
  ] = 2] = "Step";
  InterpolationType2[InterpolationType2[
    /** Hermite interpolation */
    "Hermite"
  ] = 3] = "Hermite";
})(InterpolationType || (InterpolationType = {}));
var AnimationCurve = function() {
  function AnimationCurve2() {
    this.keys = [];
    this._evaluateData = {
      curKeyframeIndex: 0,
      value: null
    };
    this._length = 0;
    var type = this.constructor;
    this._interpolation = type._isInterpolationType ? InterpolationType.Linear : InterpolationType.Step;
    this._type = type;
  }
  var _proto = AnimationCurve2.prototype;
  _proto.addKey = function addKey(key) {
    var time = key.time;
    var keys = this.keys;
    if (time >= this._length) {
      keys.push(key);
      this._length = time;
    } else {
      var index = keys.length;
      while (--index >= 0 && time < keys[index].time)
        ;
      keys.splice(index + 1, 0, key);
    }
  };
  _proto.evaluate = function evaluate(time) {
    return this._evaluate(time, this._evaluateData);
  };
  _proto.removeKey = function removeKey(index) {
    this.keys.splice(index, 1);
    var keys = this.keys;
    var newLength = 0;
    for (var i = keys.length - 1; i >= 0; i--) {
      var key = keys[i];
      if (key.time > length) {
        newLength = key.time;
      }
    }
    this._length = newLength;
  };
  _proto._evaluate = function _evaluate(time, evaluateData) {
    var length1 = this.keys.length;
    if (!length1) {
      console.warn("This curve don't have any keyframes: ", this);
      return;
    }
    var _this = this, keys = _this.keys, interpolation = _this.interpolation;
    var curIndex = evaluateData.curKeyframeIndex;
    if (curIndex !== -1 && (curIndex >= length1 || time < keys[curIndex].time)) {
      curIndex = -1;
    }
    var nextIndex = curIndex + 1;
    while (nextIndex < length1) {
      if (time < keys[nextIndex].time) {
        break;
      }
      curIndex++;
      nextIndex++;
    }
    evaluateData.curKeyframeIndex = curIndex;
    var value;
    if (curIndex === -1) {
      value = this._type._copyValue(keys[0].value, evaluateData.value);
    } else if (nextIndex === length1) {
      value = this._type._copyValue(keys[curIndex].value, evaluateData.value);
    } else {
      var curFrame = keys[curIndex];
      var nextFrame = keys[nextIndex];
      var curFrameTime = curFrame.time;
      var duration = nextFrame.time - curFrameTime;
      var t = (time - curFrameTime) / duration;
      switch (interpolation) {
        case InterpolationType.Linear:
          value = this._type._lerpValue(curFrame.value, nextFrame.value, t, evaluateData.value);
          break;
        case InterpolationType.Step:
          value = this._type._copyValue(curFrame.value, evaluateData.value);
          break;
        case InterpolationType.CubicSpine:
        case InterpolationType.Hermite:
          value = this._type._hermiteInterpolationValue(curFrame, nextFrame, t, duration, evaluateData.value);
          break;
      }
    }
    return value;
  };
  _proto._evaluateAdditive = function _evaluateAdditive(time, evaluateData) {
    var result = this._evaluate(time, evaluateData);
    return this._type._subtractValue(result, this.keys[0].value, evaluateData.value);
  };
  _create_class2(AnimationCurve2, [
    {
      key: "interpolation",
      get: (
        /**
        * The interpolationType of the animation curve.
        */
        function get() {
          return this._interpolation;
        }
      ),
      set: function set(value) {
        if (!this._type._isInterpolationType && value !== InterpolationType.Step) {
          this._interpolation = InterpolationType.Step;
          console.warn("The interpolation type must be `InterpolationType.Step`.");
        } else {
          this._interpolation = value;
        }
      }
    },
    {
      key: "length",
      get: (
        /**
        * Animation curve length in seconds.
        */
        function get() {
          return this._length;
        }
      )
    }
  ]);
  return AnimationCurve2;
}();
var _AnimationArrayCurve;
var AnimationArrayCurve = (_AnimationArrayCurve = function(AnimationCurve2) {
  _inherits(AnimationArrayCurve2, AnimationCurve2);
  function AnimationArrayCurve2() {
    var _this;
    _this = AnimationCurve2.call(this) || this;
    _this._evaluateData.value = [];
    return _this;
  }
  AnimationArrayCurve2._initializeOwner = function _initializeOwner(owner) {
    owner.defaultValue = [];
    owner.fixedPoseValue = [];
    owner.baseEvaluateData.value = [];
    owner.crossEvaluateData.value = [];
  };
  AnimationArrayCurve2._lerpValue = function _lerpValue(srcValue, destValue, weight, out) {
    for (var i = 0, n = out.length; i < n; ++i) {
      var src = srcValue[i];
      out[i] = src + (destValue[i] - src) * weight;
    }
    return out;
  };
  AnimationArrayCurve2._subtractValue = function _subtractValue(src, base, out) {
    for (var i = 0, n = src.length; i < n; i++) {
      out[i] = src[i] - base[i];
    }
    return out;
  };
  AnimationArrayCurve2._getZeroValue = function _getZeroValue(out) {
    for (var i = 0, n = out.length; i < n; i++) {
      out[i] = 0;
    }
    return out;
  };
  AnimationArrayCurve2._additiveValue = function _additiveValue(value, weight, out) {
    for (var i = 0, n = out.length; i < n; ++i) {
      out[i] += value[i] * weight;
    }
    return out;
  };
  AnimationArrayCurve2._copyValue = function _copyValue(source, out) {
    for (var i = 0, n = out.length; i < n; ++i) {
      out[i] = source[i];
    }
    return out;
  };
  AnimationArrayCurve2._hermiteInterpolationValue = function _hermiteInterpolationValue(frame, nextFrame, t, duration, out) {
    var t0 = frame.outTangent;
    var t1 = nextFrame.inTangent;
    var p0 = frame.value;
    var p1 = nextFrame.value;
    var t2 = t * t;
    var t3 = t2 * t;
    var a = 2 * t3 - 3 * t2 + 1;
    var b = t3 - 2 * t2 + t;
    var c = t3 - t2;
    var d = -2 * t3 + 3 * t2;
    for (var i = 0, n = p0.length; i < n; ++i) {
      if (Number.isFinite(t0[i]) && Number.isFinite(t1[i])) {
        out[i] = a * p0[i] + b * t0[i] * duration + c * t1[i] * duration + d * p1[i];
      } else {
        out[i] = frame.value[i];
      }
    }
    return out;
  };
  return AnimationArrayCurve2;
}(AnimationCurve), function() {
  _AnimationArrayCurve._isReferenceType = true;
}(), function() {
  _AnimationArrayCurve._isInterpolationType = true;
}(), _AnimationArrayCurve);
AnimationArrayCurve = __decorate([
  StaticInterfaceImplement()
], AnimationArrayCurve);
var _AnimationBoolCurve;
var AnimationBoolCurve = (_AnimationBoolCurve = function(AnimationCurve2) {
  _inherits(AnimationBoolCurve2, AnimationCurve2);
  function AnimationBoolCurve2() {
    var _this;
    _this = AnimationCurve2.call(this) || this;
    _this._evaluateData.value = false;
    return _this;
  }
  AnimationBoolCurve2._initializeOwner = function _initializeOwner(owner) {
    owner.defaultValue = false;
    owner.fixedPoseValue = false;
    owner.baseEvaluateData.value = false;
    owner.crossEvaluateData.value = false;
  };
  AnimationBoolCurve2._lerpValue = function _lerpValue(srcValue, destValue) {
    return destValue;
  };
  AnimationBoolCurve2._subtractValue = function _subtractValue(src, base, out) {
    return src;
  };
  AnimationBoolCurve2._getZeroValue = function _getZeroValue() {
    return false;
  };
  AnimationBoolCurve2._additiveValue = function _additiveValue(value, weight, source) {
    return value;
  };
  AnimationBoolCurve2._copyValue = function _copyValue(value) {
    return value;
  };
  AnimationBoolCurve2._hermiteInterpolationValue = function _hermiteInterpolationValue(frame) {
    return frame.value;
  };
  return AnimationBoolCurve2;
}(AnimationCurve), function() {
  _AnimationBoolCurve._isReferenceType = false;
}(), function() {
  _AnimationBoolCurve._isInterpolationType = false;
}(), _AnimationBoolCurve);
AnimationBoolCurve = __decorate([
  StaticInterfaceImplement()
], AnimationBoolCurve);
var _AnimationColorCurve;
var AnimationColorCurve = (_AnimationColorCurve = function(AnimationCurve2) {
  _inherits(AnimationColorCurve2, AnimationCurve2);
  function AnimationColorCurve2() {
    var _this;
    _this = AnimationCurve2.call(this) || this;
    _this._evaluateData.value = new Color();
    return _this;
  }
  AnimationColorCurve2._initializeOwner = function _initializeOwner(owner) {
    owner.defaultValue = new Color();
    owner.fixedPoseValue = new Color();
    owner.baseEvaluateData.value = new Color();
    owner.crossEvaluateData.value = new Color();
  };
  AnimationColorCurve2._lerpValue = function _lerpValue(srcValue, destValue, weight, out) {
    Color.lerp(srcValue, destValue, weight, out);
    return out;
  };
  AnimationColorCurve2._subtractValue = function _subtractValue(src, base, out) {
    Color.subtract(src, base, out);
    return out;
  };
  AnimationColorCurve2._getZeroValue = function _getZeroValue(out) {
    out.set(0, 0, 0, 0);
    return out;
  };
  AnimationColorCurve2._additiveValue = function _additiveValue(value, weight, out) {
    Color.scale(value, weight, value);
    Color.add(out, value, out);
    return out;
  };
  AnimationColorCurve2._copyValue = function _copyValue(source, out) {
    out.copyFrom(source);
    return out;
  };
  AnimationColorCurve2._hermiteInterpolationValue = function _hermiteInterpolationValue(frame, nextFrame, t, dur, out) {
    var p0 = frame.value;
    var tan0 = frame.outTangent;
    var p1 = nextFrame.value;
    var tan1 = nextFrame.inTangent;
    var t2 = t * t;
    var t3 = t2 * t;
    var a = 2 * t3 - 3 * t2 + 1;
    var b = t3 - 2 * t2 + t;
    var c = t3 - t2;
    var d = -2 * t3 + 3 * t2;
    var t0 = tan0.x, t1 = tan1.x;
    if (Number.isFinite(t0) && Number.isFinite(t1)) {
      out.r = a * p0.r + b * t0 * dur + c * t1 * dur + d * p1.r;
    } else {
      out.r = p0.r;
    }
    t0 = tan0.y, t1 = tan1.y;
    if (Number.isFinite(t0) && Number.isFinite(t1)) {
      out.g = a * p0.g + b * t0 * dur + c * t1 * dur + d * p1.g;
    } else {
      out.g = p0.g;
    }
    t0 = tan0.z, t1 = tan1.z;
    if (Number.isFinite(t0) && Number.isFinite(t1)) {
      out.b = a * p0.b + b * t0 * dur + c * t1 * dur + d * p1.b;
    } else {
      out.b = p0.b;
    }
    t0 = tan0.w, t1 = tan1.w;
    if (Number.isFinite(t0) && Number.isFinite(t1)) {
      out.a = a * p0.a + b * t0 * dur + c * t1 * dur + d * p1.a;
    } else {
      out.a = p0.a;
    }
    return out;
  };
  return AnimationColorCurve2;
}(AnimationCurve), function() {
  _AnimationColorCurve._isReferenceType = true;
}(), function() {
  _AnimationColorCurve._isInterpolationType = true;
}(), _AnimationColorCurve);
AnimationColorCurve = __decorate([
  StaticInterfaceImplement()
], AnimationColorCurve);
var _AnimationFloatArrayCurve;
var AnimationFloatArrayCurve = (_AnimationFloatArrayCurve = function(AnimationCurve2) {
  _inherits(AnimationFloatArrayCurve2, AnimationCurve2);
  function AnimationFloatArrayCurve2() {
    return AnimationCurve2.apply(this, arguments);
  }
  var _proto = AnimationFloatArrayCurve2.prototype;
  _proto.addKey = function addKey(key) {
    AnimationCurve2.prototype.addKey.call(this, key);
    var evaluateData = this._evaluateData;
    if (!evaluateData.value || evaluateData.value.length !== key.value.length) {
      var size = key.value.length;
      evaluateData.value = new Float32Array(size);
    }
  };
  AnimationFloatArrayCurve2._initializeOwner = function _initializeOwner(owner) {
    var size = owner.referenceTargetValue.length;
    owner.defaultValue = new Float32Array(size);
    owner.fixedPoseValue = new Float32Array(size);
    owner.baseEvaluateData.value = new Float32Array(size);
    owner.crossEvaluateData.value = new Float32Array(size);
  };
  AnimationFloatArrayCurve2._lerpValue = function _lerpValue(srcValue, destValue, weight, out) {
    for (var i = 0, n = out.length; i < n; ++i) {
      var src = srcValue[i];
      out[i] = src + (destValue[i] - src) * weight;
    }
    return out;
  };
  AnimationFloatArrayCurve2._subtractValue = function _subtractValue(src, base, out) {
    for (var i = 0, n = src.length; i < n; i++) {
      out[i] = src[i] - base[i];
    }
    return out;
  };
  AnimationFloatArrayCurve2._getZeroValue = function _getZeroValue(out) {
    for (var i = 0, n = out.length; i < n; i++) {
      out[i] = 0;
    }
    return out;
  };
  AnimationFloatArrayCurve2._additiveValue = function _additiveValue(value, weight, out) {
    for (var i = 0, n = out.length; i < n; ++i) {
      out[i] += value[i] * weight;
    }
    return out;
  };
  AnimationFloatArrayCurve2._copyValue = function _copyValue(source, out) {
    for (var i = 0, n = out.length; i < n; ++i) {
      out[i] = source[i];
    }
    return out;
  };
  AnimationFloatArrayCurve2._hermiteInterpolationValue = function _hermiteInterpolationValue(frame, nextFrame, t, dur, out) {
    var t0 = frame.outTangent;
    var t1 = nextFrame.inTangent;
    var p0 = frame.value;
    var p1 = nextFrame.value;
    var t2 = t * t;
    var t3 = t2 * t;
    var a = 2 * t3 - 3 * t2 + 1;
    var b = t3 - 2 * t2 + t;
    var c = t3 - t2;
    var d = -2 * t3 + 3 * t2;
    for (var i = 0, n = p0.length; i < n; ++i) {
      if (Number.isFinite(t0[i]) && Number.isFinite(t1[i])) {
        out[i] = a * p0[i] + b * t0[i] * dur + c * t1[i] * dur + d * p1[i];
      } else {
        out[i] = frame.value[i];
      }
    }
    return out;
  };
  return AnimationFloatArrayCurve2;
}(AnimationCurve), function() {
  _AnimationFloatArrayCurve._isReferenceType = true;
}(), function() {
  _AnimationFloatArrayCurve._isInterpolationType = true;
}(), _AnimationFloatArrayCurve);
AnimationFloatArrayCurve = __decorate([
  StaticInterfaceImplement()
], AnimationFloatArrayCurve);
var _AnimationFloatCurve;
var AnimationFloatCurve = (_AnimationFloatCurve = function(AnimationCurve2) {
  _inherits(AnimationFloatCurve2, AnimationCurve2);
  function AnimationFloatCurve2() {
    var _this;
    _this = AnimationCurve2.call(this) || this;
    _this._evaluateData.value = 0;
    return _this;
  }
  AnimationFloatCurve2._initializeOwner = function _initializeOwner(owner) {
    owner.defaultValue = 0;
    owner.fixedPoseValue = 0;
    owner.baseEvaluateData.value = 0;
    owner.crossEvaluateData.value = 0;
  };
  AnimationFloatCurve2._lerpValue = function _lerpValue(srcValue, destValue, crossWeight) {
    return srcValue + (destValue - srcValue) * crossWeight;
  };
  AnimationFloatCurve2._additiveValue = function _additiveValue(value, weight, scource) {
    return scource += value * weight;
  };
  AnimationFloatCurve2._subtractValue = function _subtractValue(src, base) {
    return src - base;
  };
  AnimationFloatCurve2._getZeroValue = function _getZeroValue() {
    return 0;
  };
  AnimationFloatCurve2._copyValue = function _copyValue(source) {
    return source;
  };
  AnimationFloatCurve2._hermiteInterpolationValue = function _hermiteInterpolationValue(frame, nextFrame, t, dur) {
    var t0 = frame.outTangent;
    var t1 = nextFrame.inTangent;
    if (Number.isFinite(t0) && Number.isFinite(t1)) {
      var t2 = t * t;
      var t3 = t2 * t;
      var a = 2 * t3 - 3 * t2 + 1;
      var b = t3 - 2 * t2 + t;
      var c = t3 - t2;
      var d = -2 * t3 + 3 * t2;
      return a * frame.value + b * t0 * dur + c * t1 * dur + d * nextFrame.value;
    } else {
      return frame.value;
    }
  };
  return AnimationFloatCurve2;
}(AnimationCurve), function() {
  _AnimationFloatCurve._isReferenceType = false;
}(), function() {
  _AnimationFloatCurve._isInterpolationType = true;
}(), _AnimationFloatCurve);
AnimationFloatCurve = __decorate([
  StaticInterfaceImplement()
], AnimationFloatCurve);
var _AnimationQuaternionCurve;
var AnimationQuaternionCurve = (_AnimationQuaternionCurve = function(AnimationCurve2) {
  _inherits(AnimationQuaternionCurve1, AnimationCurve2);
  function AnimationQuaternionCurve1() {
    var _this;
    _this = AnimationCurve2.call(this) || this;
    _this._evaluateData.value = new Quaternion();
    return _this;
  }
  AnimationQuaternionCurve1._initializeOwner = function _initializeOwner(owner) {
    owner.defaultValue = new Quaternion();
    owner.fixedPoseValue = new Quaternion();
    owner.baseEvaluateData.value = new Quaternion();
    owner.crossEvaluateData.value = new Quaternion();
  };
  AnimationQuaternionCurve1._lerpValue = function _lerpValue(src, dest, weight, out) {
    Quaternion.slerp(src, dest, weight, out);
    return out;
  };
  AnimationQuaternionCurve1._additiveValue = function _additiveValue(value, weight, out) {
    value.x = value.x * weight;
    value.y = value.y * weight;
    value.z = value.z * weight;
    value.normalize();
    out.multiply(value);
    return out;
  };
  AnimationQuaternionCurve1._subtractValue = function _subtractValue(src, base, out) {
    var conjugate = AnimationQuaternionCurve._tempConjugateQuat;
    Quaternion.conjugate(base, conjugate);
    Quaternion.multiply(conjugate, src, out);
    return out;
  };
  AnimationQuaternionCurve1._getZeroValue = function _getZeroValue(out) {
    out.set(0, 0, 0, 1);
    return out;
  };
  AnimationQuaternionCurve1._copyValue = function _copyValue(source, out) {
    out.copyFrom(source);
    return out;
  };
  AnimationQuaternionCurve1._hermiteInterpolationValue = function _hermiteInterpolationValue(frame, nextFrame, t, dur, out) {
    var p0 = frame.value;
    var tan0 = frame.outTangent;
    var p1 = nextFrame.value;
    var tan1 = nextFrame.inTangent;
    var t2 = t * t;
    var t3 = t2 * t;
    var a = 2 * t3 - 3 * t2 + 1;
    var b = t3 - 2 * t2 + t;
    var c = t3 - t2;
    var d = -2 * t3 + 3 * t2;
    var t0 = tan0.x, t1 = tan1.x;
    if (Number.isFinite(t0) && Number.isFinite(t1)) {
      out.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;
    } else {
      out.x = p0.x;
    }
    t0 = tan0.y, t1 = tan1.y;
    if (Number.isFinite(t0) && Number.isFinite(t1)) {
      out.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;
    } else {
      out.y = p0.y;
    }
    t0 = tan0.z, t1 = tan1.z;
    if (Number.isFinite(t0) && Number.isFinite(t1)) {
      out.z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;
    } else {
      out.z = p0.z;
    }
    t0 = tan0.w, t1 = tan1.w;
    if (Number.isFinite(t0) && Number.isFinite(t1)) {
      out.w = a * p0.w + b * t0 * dur + c * t1 * dur + d * p1.w;
    } else {
      out.w = p0.w;
    }
    return out;
  };
  return AnimationQuaternionCurve1;
}(AnimationCurve), function() {
  _AnimationQuaternionCurve._isInterpolationType = true;
}(), function() {
  _AnimationQuaternionCurve._isReferenceType = true;
}(), function() {
  _AnimationQuaternionCurve._tempConjugateQuat = new Quaternion();
}(), _AnimationQuaternionCurve);
AnimationQuaternionCurve = __decorate([
  StaticInterfaceImplement()
], AnimationQuaternionCurve);
var _AnimationVector2Curve;
var AnimationVector2Curve = (_AnimationVector2Curve = function(AnimationCurve2) {
  _inherits(AnimationVector2Curve2, AnimationCurve2);
  function AnimationVector2Curve2() {
    var _this;
    _this = AnimationCurve2.call(this) || this;
    _this._evaluateData.value = new Vector2();
    return _this;
  }
  AnimationVector2Curve2._initializeOwner = function _initializeOwner(owner) {
    owner.defaultValue = new Vector2();
    owner.fixedPoseValue = new Vector2();
    owner.baseEvaluateData.value = new Vector2();
    owner.crossEvaluateData.value = new Vector2();
  };
  AnimationVector2Curve2._lerpValue = function _lerpValue(srcValue, destValue, weight, out) {
    Vector2.lerp(srcValue, destValue, weight, out);
    return out;
  };
  AnimationVector2Curve2._additiveValue = function _additiveValue(value, weight, out) {
    Vector2.scale(value, weight, value);
    Vector2.add(out, value, out);
    return out;
  };
  AnimationVector2Curve2._subtractValue = function _subtractValue(src, base, out) {
    Vector2.subtract(src, base, out);
    return out;
  };
  AnimationVector2Curve2._getZeroValue = function _getZeroValue(out) {
    out.set(0, 0);
    return out;
  };
  AnimationVector2Curve2._copyValue = function _copyValue(source, out) {
    out.copyFrom(source);
    return out;
  };
  AnimationVector2Curve2._hermiteInterpolationValue = function _hermiteInterpolationValue(frame, nextFrame, t, dur, out) {
    var p0 = frame.value;
    var tan0 = frame.outTangent;
    var p1 = nextFrame.value;
    var tan1 = nextFrame.inTangent;
    var t2 = t * t;
    var t3 = t2 * t;
    var a = 2 * t3 - 3 * t2 + 1;
    var b = t3 - 2 * t2 + t;
    var c = t3 - t2;
    var d = -2 * t3 + 3 * t2;
    var t0 = tan0.x, t1 = tan1.x;
    if (Number.isFinite(t0) && Number.isFinite(t1)) {
      out.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;
    } else {
      out.x = p0.x;
    }
    t0 = tan0.y, t1 = tan1.y;
    if (Number.isFinite(t0) && Number.isFinite(t1)) {
      out.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;
    } else {
      out.y = p0.y;
    }
    return out;
  };
  return AnimationVector2Curve2;
}(AnimationCurve), function() {
  _AnimationVector2Curve._isReferenceType = true;
}(), function() {
  _AnimationVector2Curve._isInterpolationType = true;
}(), _AnimationVector2Curve);
AnimationVector2Curve = __decorate([
  StaticInterfaceImplement()
], AnimationVector2Curve);
var _AnimationVector3Curve;
var AnimationVector3Curve = (_AnimationVector3Curve = function(AnimationCurve2) {
  _inherits(AnimationVector3Curve2, AnimationCurve2);
  function AnimationVector3Curve2() {
    var _this;
    _this = AnimationCurve2.call(this) || this;
    _this._evaluateData.value = new Vector3();
    return _this;
  }
  AnimationVector3Curve2._initializeOwner = function _initializeOwner(owner) {
    owner.defaultValue = new Vector3();
    owner.fixedPoseValue = new Vector3();
    owner.baseEvaluateData.value = new Vector3();
    owner.crossEvaluateData.value = new Vector3();
  };
  AnimationVector3Curve2._lerpValue = function _lerpValue(srcValue, destValue, weight, out) {
    Vector3.lerp(srcValue, destValue, weight, out);
    return out;
  };
  AnimationVector3Curve2._relativeBaseValue = function _relativeBaseValue(base, out) {
    Vector3.subtract(out, base, out);
    return out;
  };
  AnimationVector3Curve2._additiveValue = function _additiveValue(value, weight, out) {
    Vector3.scale(value, weight, value);
    Vector3.add(out, value, out);
    return out;
  };
  AnimationVector3Curve2._subtractValue = function _subtractValue(src, base, out) {
    Vector3.subtract(src, base, out);
    return out;
  };
  AnimationVector3Curve2._getZeroValue = function _getZeroValue(out) {
    out.set(0, 0, 0);
    return out;
  };
  AnimationVector3Curve2._copyValue = function _copyValue(source, out) {
    out.copyFrom(source);
    return out;
  };
  AnimationVector3Curve2._hermiteInterpolationValue = function _hermiteInterpolationValue(frame, nextFrame, t, dur, out) {
    var p0 = frame.value;
    var tan0 = frame.outTangent;
    var p1 = nextFrame.value;
    var tan1 = nextFrame.inTangent;
    var t2 = t * t;
    var t3 = t2 * t;
    var a = 2 * t3 - 3 * t2 + 1;
    var b = t3 - 2 * t2 + t;
    var c = t3 - t2;
    var d = -2 * t3 + 3 * t2;
    var t0 = tan0.x, t1 = tan1.x;
    if (Number.isFinite(t0) && Number.isFinite(t1)) {
      out.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;
    } else {
      out.x = p0.x;
    }
    t0 = tan0.y, t1 = tan1.y;
    if (Number.isFinite(t0) && Number.isFinite(t1)) {
      out.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;
    } else {
      out.y = p0.y;
    }
    t0 = tan0.z, t1 = tan1.z;
    if (Number.isFinite(t0) && Number.isFinite(t1)) {
      out.z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;
    } else {
      out.z = p0.z;
    }
    return out;
  };
  return AnimationVector3Curve2;
}(AnimationCurve), function() {
  _AnimationVector3Curve._isReferenceType = true;
}(), function() {
  _AnimationVector3Curve._isInterpolationType = true;
}(), _AnimationVector3Curve);
AnimationVector3Curve = __decorate([
  StaticInterfaceImplement()
], AnimationVector3Curve);
var _AnimationVector4Curve;
var AnimationVector4Curve = (_AnimationVector4Curve = function(AnimationCurve2) {
  _inherits(AnimationVector4Curve2, AnimationCurve2);
  function AnimationVector4Curve2() {
    var _this;
    _this = AnimationCurve2.call(this) || this;
    _this._evaluateData.value = new Vector4();
    return _this;
  }
  AnimationVector4Curve2._initializeOwner = function _initializeOwner(owner) {
    owner.defaultValue = new Vector4();
    owner.fixedPoseValue = new Vector4();
    owner.baseEvaluateData.value = new Vector4();
    owner.crossEvaluateData.value = new Vector4();
  };
  AnimationVector4Curve2._lerpValue = function _lerpValue(srcValue, destValue, weight, out) {
    Vector4.lerp(srcValue, destValue, weight, out);
    return out;
  };
  AnimationVector4Curve2._additiveValue = function _additiveValue(value, weight, out) {
    Vector4.scale(value, weight, value);
    Vector4.add(out, value, out);
    return out;
  };
  AnimationVector4Curve2._subtractValue = function _subtractValue(src, base, out) {
    Vector4.subtract(src, base, out);
    return out;
  };
  AnimationVector4Curve2._getZeroValue = function _getZeroValue(out) {
    out.set(0, 0, 0, 0);
    return out;
  };
  AnimationVector4Curve2._copyValue = function _copyValue(source, out) {
    out.copyFrom(source);
    return out;
  };
  AnimationVector4Curve2._hermiteInterpolationValue = function _hermiteInterpolationValue(frame, nextFrame, t, dur, out) {
    var p0 = frame.value;
    var tan0 = frame.outTangent;
    var p1 = nextFrame.value;
    var tan1 = nextFrame.inTangent;
    var t2 = t * t;
    var t3 = t2 * t;
    var a = 2 * t3 - 3 * t2 + 1;
    var b = t3 - 2 * t2 + t;
    var c = t3 - t2;
    var d = -2 * t3 + 3 * t2;
    var t0 = tan0.x, t1 = tan1.x;
    if (Number.isFinite(t0) && Number.isFinite(t1)) {
      out.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;
    } else {
      out.x = p0.x;
    }
    t0 = tan0.y, t1 = tan1.y;
    if (Number.isFinite(t0) && Number.isFinite(t1)) {
      out.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;
    } else {
      out.y = p0.y;
    }
    t0 = tan0.z, t1 = tan1.z;
    if (Number.isFinite(t0) && Number.isFinite(t1)) {
      out.z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;
    } else {
      out.z = p0.z;
    }
    t0 = tan0.w, t1 = tan1.w;
    if (Number.isFinite(t0) && Number.isFinite(t1)) {
      out.w = a * p0.w + b * t0 * dur + c * t1 * dur + d * p1.w;
    } else {
      out.w = p0.w;
    }
    return out;
  };
  return AnimationVector4Curve2;
}(AnimationCurve), function() {
  _AnimationVector4Curve._isReferenceType = true;
}(), function() {
  _AnimationVector4Curve._isInterpolationType = true;
}(), _AnimationVector4Curve);
AnimationVector4Curve = __decorate([
  StaticInterfaceImplement()
], AnimationVector4Curve);
var AnimatorCullingMode;
(function(AnimatorCullingMode2) {
  AnimatorCullingMode2[AnimatorCullingMode2[
    /** Disable Culling. */
    "None"
  ] = 0] = "None";
  AnimatorCullingMode2[AnimatorCullingMode2[
    /** Completely disabled when renderers are all culled. */
    "Complete"
  ] = 1] = "Complete";
})(AnimatorCullingMode || (AnimatorCullingMode = {}));
var AnimatorLayerBlendingMode;
(function(AnimatorLayerBlendingMode2) {
  AnimatorLayerBlendingMode2[AnimatorLayerBlendingMode2["Override"] = 0] = "Override";
  AnimatorLayerBlendingMode2[AnimatorLayerBlendingMode2["Additive"] = 1] = "Additive";
})(AnimatorLayerBlendingMode || (AnimatorLayerBlendingMode = {}));
var AnimatorStatePlayState;
(function(AnimatorStatePlayState2) {
  AnimatorStatePlayState2[AnimatorStatePlayState2["UnStarted"] = 0] = "UnStarted";
  AnimatorStatePlayState2[AnimatorStatePlayState2["Playing"] = 1] = "Playing";
  AnimatorStatePlayState2[AnimatorStatePlayState2["Finished"] = 2] = "Finished";
})(AnimatorStatePlayState || (AnimatorStatePlayState = {}));
var LayerState;
(function(LayerState2) {
  LayerState2[LayerState2[
    /** Standby state. */
    "Standby"
  ] = 0] = "Standby";
  LayerState2[LayerState2[
    /** Playing state. */
    "Playing"
  ] = 1] = "Playing";
  LayerState2[LayerState2[
    /** CrossFading state. */
    "CrossFading"
  ] = 2] = "CrossFading";
  LayerState2[LayerState2[
    /** FixedCrossFading state. */
    "FixedCrossFading"
  ] = 3] = "FixedCrossFading";
})(LayerState || (LayerState = {}));
var AnimationEventHandler = function AnimationEventHandler2() {
  this.handlers = [];
};
var AnimatorStateTransition = function AnimatorStateTransition2() {
  this.duration = 0;
  this.offset = 0;
  this.exitTime = 1;
};
var WrapMode;
(function(WrapMode2) {
  WrapMode2[WrapMode2[
    /** Play once */
    "Once"
  ] = 0] = "Once";
  WrapMode2[WrapMode2[
    /** Loop play */
    "Loop"
  ] = 1] = "Loop";
})(WrapMode || (WrapMode = {}));
var AnimatorStatePlayData = function() {
  function AnimatorStatePlayData2() {
  }
  var _proto = AnimatorStatePlayData2.prototype;
  _proto.reset = function reset(state, stateData, offsetFrameTime) {
    this.state = state;
    this.frameTime = offsetFrameTime;
    this.stateData = stateData;
    this.playState = AnimatorStatePlayState.UnStarted;
    this.clipTime = state.clipStartTime * state.clip.length;
    this.currentEventIndex = 0;
  };
  _proto.update = function update(isBackwards) {
    var state = this.state;
    var time = this.frameTime;
    var duration = state._getDuration();
    this.playState = AnimatorStatePlayState.Playing;
    if (state.wrapMode === WrapMode.Loop) {
      time = duration ? time % duration : 0;
    } else {
      if (Math.abs(time) > duration) {
        time = time < 0 ? -duration : duration;
        this.playState = AnimatorStatePlayState.Finished;
      }
    }
    if (isBackwards && time === 0) {
      this.clipTime = state.clipEndTime * state.clip.length;
    } else {
      time < 0 && (time += duration);
      this.clipTime = time + state.clipStartTime * state.clip.length;
    }
  };
  return AnimatorStatePlayData2;
}();
var AnimatorLayerData = function() {
  function AnimatorLayerData2() {
    this.animatorStateDataMap = {};
    this.srcPlayData = new AnimatorStatePlayData();
    this.destPlayData = new AnimatorStatePlayData();
    this.layerState = LayerState.Standby;
    this.crossCurveMark = 0;
    this.manuallyTransition = new AnimatorStateTransition();
  }
  var _proto = AnimatorLayerData2.prototype;
  _proto.switchPlayData = function switchPlayData() {
    var srcPlayData = this.destPlayData;
    var switchTemp = this.srcPlayData;
    this.srcPlayData = srcPlayData;
    this.destPlayData = switchTemp;
  };
  return AnimatorLayerData2;
}();
var AnimatorStateData = function AnimatorStateData2() {
  this.curveOwners = [];
  this.eventHandlers = [];
};
var Animator = function(Component2) {
  _inherits(Animator2, Component2);
  function Animator2(entity) {
    var _this;
    _this = Component2.call(this, entity) || this;
    _this.cullingMode = AnimatorCullingMode.None;
    _this.speed = 1;
    _this._animatorLayersData = [];
    _this._crossOwnerCollection = [];
    _this._animationCurveOwners = [];
    _this._animationEventHandlerPool = new ClassPool(AnimationEventHandler);
    _this._tempAnimatorStateInfo = {
      layerIndex: -1,
      state: null
    };
    _this._controlledRenderers = [];
    return _this;
  }
  var _proto = Animator2.prototype;
  _proto.play = function play(stateName, layerIndex, normalizedTimeOffset) {
    if (layerIndex === void 0)
      layerIndex = -1;
    if (normalizedTimeOffset === void 0)
      normalizedTimeOffset = 0;
    var _this__controllerUpdateFlag;
    if ((_this__controllerUpdateFlag = this._controllerUpdateFlag) == null ? void 0 : _this__controllerUpdateFlag.flag) {
      this._reset();
    }
    var stateInfo = this._getAnimatorStateInfo(stateName, layerIndex);
    var state = stateInfo.state;
    if (!state) {
      return;
    }
    if (!state.clip) {
      console.warn("The state named " + stateName + " has no AnimationClip data.");
      return;
    }
    var animatorLayerData = this._getAnimatorLayerData(stateInfo.layerIndex);
    var animatorStateData = this._getAnimatorStateData(stateName, state, animatorLayerData);
    this._preparePlay(animatorLayerData, state, animatorStateData);
    animatorLayerData.layerState = LayerState.Playing;
    animatorLayerData.srcPlayData.reset(state, animatorStateData, state._getDuration() * normalizedTimeOffset);
  };
  _proto.crossFade = function crossFade(stateName, normalizedTransitionDuration, layerIndex, normalizedTimeOffset) {
    if (layerIndex === void 0)
      layerIndex = -1;
    if (normalizedTimeOffset === void 0)
      normalizedTimeOffset = 0;
    var _this__controllerUpdateFlag;
    if ((_this__controllerUpdateFlag = this._controllerUpdateFlag) == null ? void 0 : _this__controllerUpdateFlag.flag) {
      this._reset();
    }
    var state = this._getAnimatorStateInfo(stateName, layerIndex).state;
    var manuallyTransition = this._getAnimatorLayerData(layerIndex).manuallyTransition;
    manuallyTransition.duration = normalizedTransitionDuration;
    manuallyTransition.offset = normalizedTimeOffset;
    manuallyTransition.destinationState = state;
    this._crossFadeByTransition(manuallyTransition, layerIndex);
  };
  _proto.update = function update(deltaTime) {
    var _this__controllerUpdateFlag;
    var animationUpdate;
    if (this.cullingMode === AnimatorCullingMode.Complete) {
      animationUpdate = false;
      var controlledRenderers = this._controlledRenderers;
      for (var i = 0, n = controlledRenderers.length; i < n; i++) {
        if (!controlledRenderers[i].isCulled) {
          animationUpdate = true;
          break;
        }
      }
    } else {
      animationUpdate = true;
    }
    var _this = this, animatorController = _this._animatorController;
    if (!animatorController) {
      return;
    }
    if ((_this__controllerUpdateFlag = this._controllerUpdateFlag) == null ? void 0 : _this__controllerUpdateFlag.flag) {
      this._checkAutoPlay();
      return;
    }
    deltaTime *= this.speed;
    for (var i1 = 0, n1 = animatorController.layers.length; i1 < n1; i1++) {
      var animatorLayerData = this._getAnimatorLayerData(i1);
      if (animatorLayerData.layerState === LayerState.Standby) {
        continue;
      }
      this._updateLayer(i1, i1 === 0, deltaTime / 1e3, animationUpdate);
    }
  };
  _proto.getCurrentAnimatorState = function getCurrentAnimatorState(layerIndex) {
    var _this__animatorLayersData_layerIndex, _this__animatorLayersData_layerIndex_srcPlayData;
    return (_this__animatorLayersData_layerIndex = this._animatorLayersData[layerIndex]) == null ? void 0 : (_this__animatorLayersData_layerIndex_srcPlayData = _this__animatorLayersData_layerIndex.srcPlayData) == null ? void 0 : _this__animatorLayersData_layerIndex_srcPlayData.state;
  };
  _proto.findAnimatorState = function findAnimatorState(stateName, layerIndex) {
    if (layerIndex === void 0)
      layerIndex = -1;
    return this._getAnimatorStateInfo(stateName, layerIndex).state;
  };
  _proto._onEnable = function _onEnable() {
    this.engine._componentsManager.addOnUpdateAnimations(this);
    this.animatorController && this._checkAutoPlay();
    this._entity.getComponentsIncludeChildren(Renderer, this._controlledRenderers);
  };
  _proto._onDisable = function _onDisable() {
    this.engine._componentsManager.removeOnUpdateAnimations(this);
  };
  _proto._reset = function _reset() {
    var _this = this, animationCurveOwners = _this._animationCurveOwners;
    for (var instanceId in animationCurveOwners) {
      var propertyOwners = animationCurveOwners[instanceId];
      for (var property in propertyOwners) {
        var owner = propertyOwners[property];
        owner.hasSavedDefaultValue && owner.revertDefaultValue();
      }
    }
    this._animatorLayersData.length = 0;
    this._crossOwnerCollection.length = 0;
    this._animationCurveOwners.length = 0;
    this._animationEventHandlerPool.resetPool();
    if (this._controllerUpdateFlag) {
      this._controllerUpdateFlag.flag = false;
    }
  };
  _proto._getAnimatorStateInfo = function _getAnimatorStateInfo(stateName, layerIndex) {
    var _this = this, animatorController = _this._animatorController, stateInfo = _this._tempAnimatorStateInfo;
    var state = null;
    if (animatorController) {
      var layers = animatorController.layers;
      if (layerIndex === -1) {
        for (var i = 0, n = layers.length; i < n; i++) {
          state = layers[i].stateMachine.findStateByName(stateName);
          if (state) {
            layerIndex = i;
            break;
          }
        }
      } else {
        state = layers[layerIndex].stateMachine.findStateByName(stateName);
      }
    }
    stateInfo.layerIndex = layerIndex;
    stateInfo.state = state;
    return stateInfo;
  };
  _proto._saveDefaultValues = function _saveDefaultValues(stateData) {
    var curveOwners = stateData.curveOwners;
    for (var i = curveOwners.length - 1; i >= 0; i--) {
      var _curveOwners_i;
      (_curveOwners_i = curveOwners[i]) == null ? void 0 : _curveOwners_i.saveDefaultValue();
    }
  };
  _proto._getAnimatorStateData = function _getAnimatorStateData(stateName, animatorState, animatorLayerData) {
    var animatorStateDataMap = animatorLayerData.animatorStateDataMap;
    var animatorStateData = animatorStateDataMap[stateName];
    if (!animatorStateData) {
      animatorStateData = new AnimatorStateData();
      animatorStateDataMap[stateName] = animatorStateData;
      this._saveAnimatorStateData(animatorState, animatorStateData);
      this._saveAnimatorEventHandlers(animatorState, animatorStateData);
    }
    return animatorStateData;
  };
  _proto._saveAnimatorStateData = function _saveAnimatorStateData(animatorState, animatorStateData) {
    var _this = this, entity = _this.entity, animationCureOwners = _this._animationCurveOwners;
    var curveOwners = animatorStateData.curveOwners;
    var _animatorState_clip = animatorState.clip, curves = _animatorState_clip._curveBindings;
    for (var i = curves.length - 1; i >= 0; i--) {
      var curve = curves[i];
      var targetEntity = curve.relativePath === "" ? entity : entity.findByPath(curve.relativePath);
      if (targetEntity) {
        var property = curve.property;
        var instanceId = targetEntity.instanceId;
        var propertyOwners = animationCureOwners[instanceId] || (animationCureOwners[instanceId] = {});
        curveOwners[i] = propertyOwners[property] || (propertyOwners[property] = curve._createCurveOwner(targetEntity));
      } else {
        curveOwners[i] = null;
        console.warn("The entity don't have the child entity which path is " + curve.relativePath + ".");
      }
    }
  };
  _proto._saveAnimatorEventHandlers = function _saveAnimatorEventHandlers(state, animatorStateData) {
    var eventHandlerPool = this._animationEventHandlerPool;
    var scripts = this._entity._scripts;
    var scriptCount = scripts.length;
    var eventHandlers = animatorStateData.eventHandlers;
    var events = state.clip.events;
    eventHandlers.length = 0;
    for (var i = 0, n = events.length; i < n; i++) {
      var event = events[i];
      var eventHandler = eventHandlerPool.getFromPool();
      var funcName = event.functionName;
      var handlers = eventHandler.handlers;
      eventHandler.event = event;
      handlers.length = 0;
      for (var j = scriptCount - 1; j >= 0; j--) {
        var handler = scripts.get(j)[funcName];
        handler && handlers.push(handler);
      }
      eventHandlers.push(eventHandler);
    }
  };
  _proto._clearCrossData = function _clearCrossData(animatorLayerData) {
    animatorLayerData.crossCurveMark++;
    this._crossOwnerCollection.length = 0;
  };
  _proto._addCrossCurveData = function _addCrossCurveData(crossCurveData, owner, curCurveIndex, nextCurveIndex) {
    owner.crossSrcCurveIndex = curCurveIndex;
    owner.crossDestCurveIndex = nextCurveIndex;
    crossCurveData.push(owner);
  };
  _proto._prepareCrossFading = function _prepareCrossFading(animatorLayerData) {
    var crossCurveData = this._crossOwnerCollection;
    var crossCurveMark = animatorLayerData.crossCurveMark;
    this._prepareSrcCrossData(crossCurveData, animatorLayerData.srcPlayData, crossCurveMark, false);
    this._prepareDestCrossData(crossCurveData, animatorLayerData.destPlayData, crossCurveMark, false);
  };
  _proto._prepareStandbyCrossFading = function _prepareStandbyCrossFading(animatorLayerData) {
    var crossOwnerCollection = this._crossOwnerCollection;
    var srcPlayData = animatorLayerData.srcPlayData, crossCurveMark = animatorLayerData.crossCurveMark;
    srcPlayData.state && this._prepareSrcCrossData(crossOwnerCollection, srcPlayData, crossCurveMark, true);
    this._prepareDestCrossData(crossOwnerCollection, animatorLayerData.destPlayData, crossCurveMark, true);
  };
  _proto._prepareFixedPoseCrossFading = function _prepareFixedPoseCrossFading(animatorLayerData) {
    var crossOwnerCollection = this._crossOwnerCollection;
    for (var i = crossOwnerCollection.length - 1; i >= 0; i--) {
      var item = crossOwnerCollection[i];
      item.saveFixedPoseValue();
      item.crossDestCurveIndex = -1;
    }
    this._prepareDestCrossData(crossOwnerCollection, animatorLayerData.destPlayData, animatorLayerData.crossCurveMark, true);
  };
  _proto._prepareSrcCrossData = function _prepareSrcCrossData(crossCurveData, srcPlayData, crossCurveMark, saveFixed) {
    var curveOwners = srcPlayData.stateData.curveOwners;
    for (var i = curveOwners.length - 1; i >= 0; i--) {
      var owner = curveOwners[i];
      if (!owner)
        continue;
      owner.crossCurveMark = crossCurveMark;
      owner.crossCurveDataIndex = crossCurveData.length;
      saveFixed && owner.saveFixedPoseValue();
      this._addCrossCurveData(crossCurveData, owner, i, -1);
    }
  };
  _proto._prepareDestCrossData = function _prepareDestCrossData(crossCurveData, destPlayData, crossCurveMark, saveFixed) {
    var curveOwners = destPlayData.stateData.curveOwners;
    for (var i = curveOwners.length - 1; i >= 0; i--) {
      var owner = curveOwners[i];
      if (!owner)
        continue;
      if (owner.crossCurveMark === crossCurveMark) {
        crossCurveData[owner.crossCurveDataIndex].crossDestCurveIndex = i;
      } else {
        owner.saveDefaultValue();
        saveFixed && owner.saveFixedPoseValue();
        owner.crossCurveMark = crossCurveMark;
        owner.crossCurveDataIndex = crossCurveData.length;
        this._addCrossCurveData(crossCurveData, owner, -1, i);
      }
    }
  };
  _proto._getAnimatorLayerData = function _getAnimatorLayerData(layerIndex) {
    var animatorLayerData = this._animatorLayersData[layerIndex];
    animatorLayerData || (this._animatorLayersData[layerIndex] = animatorLayerData = new AnimatorLayerData());
    return animatorLayerData;
  };
  _proto._updateLayer = function _updateLayer(layerIndex, firstLayer, deltaTime, aniUpdate) {
    var _this__animatorController_layers_layerIndex = this._animatorController.layers[layerIndex], blendingMode = _this__animatorController_layers_layerIndex.blendingMode, weight = _this__animatorController_layers_layerIndex.weight;
    var layerData = this._animatorLayersData[layerIndex];
    var srcPlayData = layerData.srcPlayData, destPlayData = layerData.destPlayData, crossFadeTransitionInfo = layerData.crossFadeTransition;
    var additive = blendingMode === AnimatorLayerBlendingMode.Additive;
    firstLayer && (weight = 1);
    layerData.layerState !== LayerState.FixedCrossFading && this._checkTransition(srcPlayData, crossFadeTransitionInfo, layerIndex);
    switch (layerData.layerState) {
      case LayerState.Playing:
        this._updatePlayingState(srcPlayData, layerData, layerIndex, weight, deltaTime, additive, aniUpdate);
        break;
      case LayerState.FixedCrossFading:
        this._updateCrossFadeFromPose(destPlayData, layerData, layerIndex, weight, deltaTime, additive, aniUpdate);
        break;
      case LayerState.CrossFading:
        this._updateCrossFade(srcPlayData, destPlayData, layerData, layerIndex, weight, deltaTime, additive, aniUpdate);
        break;
    }
  };
  _proto._updatePlayingState = function _updatePlayingState(playData, layerData, layerIndex, weight, delta, additive, aniUpdate) {
    var _playData_stateData = playData.stateData, curveOwners = _playData_stateData.curveOwners, eventHandlers = _playData_stateData.eventHandlers;
    var state = playData.state, lastPlayState = playData.playState, lastClipTime = playData.clipTime;
    var _state_clip = state.clip, curveBindings = _state_clip._curveBindings;
    playData.update(this.speed < 0);
    if (!aniUpdate) {
      return;
    }
    var clipTime = playData.clipTime, playState = playData.playState;
    eventHandlers.length && this._fireAnimationEvents(playData, eventHandlers, lastClipTime, clipTime);
    for (var i = curveBindings.length - 1; i >= 0; i--) {
      var owner = curveOwners[i];
      owner == null ? void 0 : owner.evaluateAndApplyValue(curveBindings[i].curve, clipTime, weight, additive);
    }
    playData.frameTime += state.speed * delta;
    if (playState === AnimatorStatePlayState.Finished) {
      layerData.layerState = LayerState.Standby;
    }
    if (lastPlayState === AnimatorStatePlayState.UnStarted) {
      this._callAnimatorScriptOnEnter(state, layerIndex);
    }
    if (playState === AnimatorStatePlayState.Finished) {
      this._callAnimatorScriptOnExit(state, layerIndex);
    } else {
      this._callAnimatorScriptOnUpdate(state, layerIndex);
    }
  };
  _proto._updateCrossFade = function _updateCrossFade(srcPlayData, destPlayData, layerData, layerIndex, weight, delta, additive, aniUpdate) {
    var _this = this, crossCurveDataCollection = _this._crossOwnerCollection;
    var _srcPlayData_state_clip = srcPlayData.state.clip, srcCurves = _srcPlayData_state_clip._curveBindings;
    var srcState = srcPlayData.state, srcStateData = srcPlayData.stateData, lastSrcPlayState = srcPlayData.playState;
    var srcEventHandlers = srcStateData.eventHandlers;
    var destState = destPlayData.state, destStateData = destPlayData.stateData, lastDstPlayState = destPlayData.playState;
    var destEventHandlers = destStateData.eventHandlers;
    var _destState_clip = destState.clip, destCurves = _destState_clip._curveBindings;
    var lastSrcClipTime = srcPlayData.clipTime;
    var lastDestClipTime = destPlayData.clipTime;
    var crossWeight = Math.abs(destPlayData.frameTime) / (destState._getDuration() * layerData.crossFadeTransition.duration);
    crossWeight >= 1 && (crossWeight = 1);
    srcPlayData.update(this.speed < 0);
    destPlayData.update(this.speed < 0);
    var srcPlayState = srcPlayData.playState;
    var destPlayState = destPlayData.playState;
    this._updateCrossFadeData(layerData, crossWeight, delta, false);
    if (!aniUpdate) {
      return;
    }
    var srcClipTime = srcPlayData.clipTime;
    var destClipTime = destPlayData.clipTime;
    srcEventHandlers.length && this._fireAnimationEvents(srcPlayData, srcEventHandlers, lastSrcClipTime, srcClipTime);
    destEventHandlers.length && this._fireAnimationEvents(destPlayData, destEventHandlers, lastDestClipTime, destClipTime);
    if (lastSrcPlayState === AnimatorStatePlayState.UnStarted) {
      this._callAnimatorScriptOnEnter(srcState, layerIndex);
    }
    if (crossWeight === 1 || srcPlayState === AnimatorStatePlayState.Finished) {
      this._callAnimatorScriptOnExit(srcState, layerIndex);
    } else {
      this._callAnimatorScriptOnUpdate(srcState, layerIndex);
    }
    if (lastDstPlayState === AnimatorStatePlayState.UnStarted) {
      this._callAnimatorScriptOnEnter(destState, layerIndex);
    }
    if (destPlayState === AnimatorStatePlayState.Finished) {
      this._callAnimatorScriptOnExit(destState, layerIndex);
    } else {
      this._callAnimatorScriptOnUpdate(destState, layerIndex);
    }
    for (var i = crossCurveDataCollection.length - 1; i >= 0; i--) {
      var crossCurveData = crossCurveDataCollection[i];
      var crossSrcCurveIndex = crossCurveData.crossSrcCurveIndex, crossDestCurveIndex = crossCurveData.crossDestCurveIndex;
      crossCurveData.crossFadeAndApplyValue(crossSrcCurveIndex >= 0 ? srcCurves[crossSrcCurveIndex].curve : null, crossDestCurveIndex >= 0 ? destCurves[crossDestCurveIndex].curve : null, srcClipTime, destClipTime, crossWeight, weight, additive);
    }
  };
  _proto._updateCrossFadeFromPose = function _updateCrossFadeFromPose(destPlayData, layerData, layerIndex, layerWeight, delta, additive, aniUpdate) {
    var crossCurveDataCollection = this._crossOwnerCollection;
    var state = destPlayData.state, stateData = destPlayData.stateData, lastPlayState = destPlayData.playState;
    var eventHandlers = stateData.eventHandlers;
    var _state_clip = state.clip, curveBindings = _state_clip._curveBindings;
    var lastDestClipTime = destPlayData.clipTime;
    var crossWeight = Math.abs(destPlayData.frameTime) / (state._getDuration() * layerData.crossFadeTransition.duration);
    crossWeight >= 1 && (crossWeight = 1);
    destPlayData.update(this.speed < 0);
    var playState = destPlayData.playState;
    this._updateCrossFadeData(layerData, crossWeight, delta, true);
    if (!aniUpdate) {
      return;
    }
    var destClipTime = destPlayData.clipTime;
    eventHandlers.length && this._fireAnimationEvents(destPlayData, eventHandlers, lastDestClipTime, destClipTime);
    if (lastPlayState === AnimatorStatePlayState.UnStarted) {
      this._callAnimatorScriptOnEnter(state, layerIndex);
    }
    if (playState === AnimatorStatePlayState.Finished) {
      this._callAnimatorScriptOnExit(state, layerIndex);
    } else {
      this._callAnimatorScriptOnUpdate(state, layerIndex);
    }
    for (var i = crossCurveDataCollection.length - 1; i >= 0; i--) {
      var crossCurveData = crossCurveDataCollection[i];
      var crossDestCurveIndex = crossCurveData.crossDestCurveIndex;
      crossCurveData.crossFadeFromPoseAndApplyValue(crossDestCurveIndex >= 0 ? curveBindings[crossDestCurveIndex].curve : null, destClipTime, crossWeight, layerWeight, additive);
    }
  };
  _proto._updateCrossFadeData = function _updateCrossFadeData(layerData, crossWeight, delta, fixed) {
    var destPlayData = layerData.destPlayData;
    destPlayData.frameTime += destPlayData.state.speed * delta;
    if (crossWeight === 1) {
      if (destPlayData.playState === AnimatorStatePlayState.Finished) {
        layerData.layerState = LayerState.Standby;
      } else {
        layerData.layerState = LayerState.Playing;
      }
      layerData.switchPlayData();
      layerData.crossFadeTransition = null;
    } else {
      fixed || (layerData.srcPlayData.frameTime += layerData.srcPlayData.state.speed * delta);
    }
  };
  _proto._preparePlay = function _preparePlay(layerData, playState, playStateData) {
    if (layerData.layerState === LayerState.Playing) {
      var srcPlayData = layerData.srcPlayData;
      if (srcPlayData.state !== playState) {
        var curveOwners = srcPlayData.stateData.curveOwners;
        for (var i = curveOwners.length - 1; i >= 0; i--) {
          var owner = curveOwners[i];
          (owner == null ? void 0 : owner.hasSavedDefaultValue) && owner.revertDefaultValue();
        }
        this._saveDefaultValues(playStateData);
      }
    } else {
      var crossCurveDataCollection = this._crossOwnerCollection;
      for (var i1 = crossCurveDataCollection.length - 1; i1 >= 0; i1--) {
        var owner1 = crossCurveDataCollection[i1];
        owner1.hasSavedDefaultValue && owner1.revertDefaultValue();
      }
      this._saveDefaultValues(playStateData);
    }
  };
  _proto._checkTransition = function _checkTransition(stateData, crossFadeTransition, layerIndex) {
    var state = stateData.state, clipTime = stateData.clipTime;
    var transitions = state.transitions;
    var duration = state._getDuration();
    for (var i = 0, n = transitions.length; i < n; ++i) {
      var transition = transitions[i];
      if (duration * transition.exitTime <= clipTime) {
        crossFadeTransition !== transition && this._crossFadeByTransition(transition, layerIndex);
      }
    }
  };
  _proto._crossFadeByTransition = function _crossFadeByTransition(transition, layerIndex) {
    var name = transition.destinationState.name;
    var stateInfo = this._getAnimatorStateInfo(name, layerIndex);
    var crossState = stateInfo.state;
    if (!crossState) {
      return;
    }
    if (!crossState.clip) {
      console.warn("The state named " + name + " has no AnimationClip data.");
      return;
    }
    var animatorLayerData = this._getAnimatorLayerData(stateInfo.layerIndex);
    var layerState = animatorLayerData.layerState;
    var destPlayData = animatorLayerData.destPlayData;
    var animatorStateData = this._getAnimatorStateData(name, crossState, animatorLayerData);
    var duration = crossState._getDuration();
    var offset = duration * transition.offset;
    destPlayData.reset(crossState, animatorStateData, offset);
    switch (layerState) {
      case LayerState.Standby:
        animatorLayerData.layerState = LayerState.FixedCrossFading;
        this._clearCrossData(animatorLayerData);
        this._prepareStandbyCrossFading(animatorLayerData);
        break;
      case LayerState.Playing:
        animatorLayerData.layerState = LayerState.CrossFading;
        this._clearCrossData(animatorLayerData);
        this._prepareCrossFading(animatorLayerData);
        break;
      case LayerState.CrossFading:
        animatorLayerData.layerState = LayerState.FixedCrossFading;
        this._prepareFixedPoseCrossFading(animatorLayerData);
        break;
      case LayerState.FixedCrossFading:
        this._prepareFixedPoseCrossFading(animatorLayerData);
        break;
    }
    animatorLayerData.crossFadeTransition = transition;
  };
  _proto._fireAnimationEvents = function _fireAnimationEvents(playState, eventHandlers, lastClipTime, clipTime) {
    var state = playState.state;
    var clipDuration = state.clip.length;
    if (this.speed >= 0) {
      if (clipTime < lastClipTime) {
        this._fireSubAnimationEvents(playState, eventHandlers, lastClipTime, state.clipEndTime * clipDuration);
        playState.currentEventIndex = 0;
        this._fireSubAnimationEvents(playState, eventHandlers, state.clipStartTime * clipDuration, clipTime);
      } else {
        this._fireSubAnimationEvents(playState, eventHandlers, lastClipTime, clipTime);
      }
    } else {
      if (clipTime > lastClipTime) {
        this._fireBackwardSubAnimationEvents(playState, eventHandlers, lastClipTime, state.clipStartTime * clipDuration);
        playState.currentEventIndex = eventHandlers.length - 1;
        this._fireBackwardSubAnimationEvents(playState, eventHandlers, state.clipEndTime * clipDuration, clipTime);
      } else {
        this._fireBackwardSubAnimationEvents(playState, eventHandlers, lastClipTime, clipTime);
      }
    }
  };
  _proto._fireSubAnimationEvents = function _fireSubAnimationEvents(playState, eventHandlers, lastClipTime, curClipTime) {
    var eventIndex = playState.currentEventIndex;
    for (var n = eventHandlers.length; eventIndex < n; eventIndex++) {
      var eventHandler = eventHandlers[eventIndex];
      var _eventHandler_event = eventHandler.event, time = _eventHandler_event.time, parameter = _eventHandler_event.parameter;
      if (time > curClipTime) {
        break;
      }
      var handlers = eventHandler.handlers;
      if (time >= lastClipTime) {
        for (var j = handlers.length - 1; j >= 0; j--) {
          handlers[j](parameter);
        }
        playState.currentEventIndex = Math.min(eventIndex + 1, n - 1);
      }
    }
  };
  _proto._fireBackwardSubAnimationEvents = function _fireBackwardSubAnimationEvents(playState, eventHandlers, lastClipTime, curClipTime) {
    var eventIndex = playState.currentEventIndex;
    for (; eventIndex >= 0; eventIndex--) {
      var eventHandler = eventHandlers[eventIndex];
      var _eventHandler_event = eventHandler.event, time = _eventHandler_event.time, parameter = _eventHandler_event.parameter;
      if (time < curClipTime) {
        break;
      }
      if (time <= lastClipTime) {
        var handlers = eventHandler.handlers;
        for (var j = handlers.length - 1; j >= 0; j--) {
          handlers[j](parameter);
        }
        playState.currentEventIndex = Math.max(eventIndex - 1, 0);
      }
    }
  };
  _proto._callAnimatorScriptOnEnter = function _callAnimatorScriptOnEnter(state, layerIndex) {
    var scripts = state._onStateEnterScripts;
    for (var i = 0, n = scripts.length; i < n; i++) {
      scripts[i].onStateEnter(this, state, layerIndex);
    }
  };
  _proto._callAnimatorScriptOnUpdate = function _callAnimatorScriptOnUpdate(state, layerIndex) {
    var scripts = state._onStateUpdateScripts;
    for (var i = 0, n = scripts.length; i < n; i++) {
      scripts[i].onStateUpdate(this, state, layerIndex);
    }
  };
  _proto._callAnimatorScriptOnExit = function _callAnimatorScriptOnExit(state, layerIndex) {
    var scripts = state._onStateExitScripts;
    for (var i = 0, n = scripts.length; i < n; i++) {
      scripts[i].onStateExit(this, state, layerIndex);
    }
  };
  _proto._checkAutoPlay = function _checkAutoPlay() {
    var layers = this._animatorController.layers;
    for (var i = 0, n = layers.length; i < n; ++i) {
      var stateMachine = layers[i].stateMachine;
      if (stateMachine == null ? void 0 : stateMachine.defaultState) {
        this.play(stateMachine.defaultState.name, i);
      }
    }
  };
  _create_class2(Animator2, [
    {
      key: "animatorController",
      get: (
        /**
        * All layers from the AnimatorController which belongs this Animator.
        */
        function get() {
          return this._animatorController;
        }
      ),
      set: function set(animatorController) {
        if (animatorController !== this._animatorController) {
          this._reset();
          this._controllerUpdateFlag && this._controllerUpdateFlag.destroy();
          this._controllerUpdateFlag = animatorController && animatorController._registerChangeFlag();
          this._animatorController = animatorController;
        }
      }
    }
  ]);
  return Animator2;
}(Component);
__decorate([
  assignmentClone
], Animator.prototype, "speed", void 0);
__decorate([
  ignoreClone
], Animator.prototype, "_controllerUpdateFlag", void 0);
__decorate([
  ignoreClone
], Animator.prototype, "_animatorLayersData", void 0);
__decorate([
  ignoreClone
], Animator.prototype, "_crossOwnerCollection", void 0);
__decorate([
  ignoreClone
], Animator.prototype, "_animationCurveOwners", void 0);
__decorate([
  ignoreClone
], Animator.prototype, "_animationEventHandlerPool", void 0);
__decorate([
  ignoreClone
], Animator.prototype, "_tempAnimatorStateInfo", void 0);
__decorate([
  ignoreClone
], Animator.prototype, "_controlledRenderers", void 0);
var AnimatorController = function() {
  function AnimatorController2() {
    this._updateFlagManager = new UpdateFlagManager();
    this._layers = [];
    this._layersMap = {};
  }
  var _proto = AnimatorController2.prototype;
  _proto.findLayerByName = function findLayerByName(name) {
    return this._layersMap[name];
  };
  _proto.addLayer = function addLayer(layer) {
    this._layers.push(layer);
    this._layersMap[layer.name] = layer;
    this._updateFlagManager.dispatch();
  };
  _proto.removeLayer = function removeLayer(layerIndex) {
    var theLayer = this.layers[layerIndex];
    this._layers.splice(layerIndex, 1);
    delete this._layersMap[theLayer.name];
    this._updateFlagManager.dispatch();
  };
  _proto.clearLayers = function clearLayers() {
    this._layers.length = 0;
    for (var name in this._layersMap) {
      delete this._layersMap[name];
    }
    this._updateFlagManager.dispatch();
  };
  _proto._registerChangeFlag = function _registerChangeFlag() {
    return this._updateFlagManager.createFlag(BoolUpdateFlag);
  };
  _create_class2(AnimatorController2, [
    {
      key: "layers",
      get: (
        /**
        * The layers in the controller.
        */
        function get() {
          return this._layers;
        }
      )
    }
  ]);
  return AnimatorController2;
}();
var AnimatorControllerLayer = function AnimatorControllerLayer2(name) {
  this.name = name;
  this.weight = 1;
  this.blendingMode = AnimatorLayerBlendingMode.Override;
};
var StateMachineScript = function() {
  function StateMachineScript2() {
    this._destroyed = false;
  }
  var _proto = StateMachineScript2.prototype;
  _proto.onStateEnter = function onStateEnter(animator, animatorState, layerIndex) {
  };
  _proto.onStateUpdate = function onStateUpdate(animator, animatorState, layerIndex) {
  };
  _proto.onStateExit = function onStateExit(animator, animatorState, layerIndex) {
  };
  _proto.destroy = function destroy() {
    if (this._destroyed) {
      return;
    }
    this._state._removeStateMachineScript(this);
    this._destroyed = true;
  };
  return StateMachineScript2;
}();
var AnimatorState = function() {
  function AnimatorState2(name) {
    this.name = name;
    this.speed = 1;
    this.wrapMode = WrapMode.Loop;
    this._onStateEnterScripts = [];
    this._onStateUpdateScripts = [];
    this._onStateExitScripts = [];
    this._clipStartTime = 0;
    this._clipEndTime = 1;
    this._transitions = [];
  }
  var _proto = AnimatorState2.prototype;
  _proto.addTransition = function addTransition(transition) {
    this._transitions.push(transition);
  };
  _proto.removeTransition = function removeTransition(transition) {
    var index = this._transitions.indexOf(transition);
    index !== -1 && this._transitions.splice(index, 1);
  };
  _proto.addStateMachineScript = function addStateMachineScript(scriptType) {
    var script = new scriptType();
    script._state = this;
    var prototype = StateMachineScript.prototype;
    if (script.onStateEnter !== prototype.onStateEnter) {
      this._onStateEnterScripts.push(script);
    }
    if (script.onStateUpdate !== prototype.onStateUpdate) {
      this._onStateUpdateScripts.push(script);
    }
    if (script.onStateExit !== prototype.onStateExit) {
      this._onStateExitScripts.push(script);
    }
    return script;
  };
  _proto.clearTransitions = function clearTransitions() {
    this._transitions.length = 0;
  };
  _proto._getDuration = function _getDuration() {
    if (this.clip) {
      return (this._clipEndTime - this._clipStartTime) * this.clip.length;
    }
    return null;
  };
  _proto._removeStateMachineScript = function _removeStateMachineScript(script) {
    var prototype = StateMachineScript.prototype;
    if (script.onStateEnter !== prototype.onStateEnter) {
      var index = this._onStateEnterScripts.indexOf(script);
      index !== -1 && this._onStateEnterScripts.splice(index, 1);
    }
    if (script.onStateUpdate !== prototype.onStateUpdate) {
      var index1 = this._onStateUpdateScripts.indexOf(script);
      index1 !== -1 && this._onStateUpdateScripts.splice(index1, 1);
    }
    if (script.onStateExit !== prototype.onStateExit) {
      var index2 = this._onStateExitScripts.indexOf(script);
      index2 !== -1 && this._onStateExitScripts.splice(index2, 1);
    }
  };
  _create_class2(AnimatorState2, [
    {
      key: "transitions",
      get: (
        /**
        * The transitions that are going out of the state.
        */
        function get() {
          return this._transitions;
        }
      )
    },
    {
      key: "clip",
      get: (
        /**
        * The clip that is being played by this animator state.
        */
        function get() {
          return this._clip;
        }
      ),
      set: function set(clip) {
        this._clip = clip;
        this._clipEndTime = Math.min(this._clipEndTime, 1);
      }
    },
    {
      key: "clipStartTime",
      get: (
        /**
        * The start time of the clip, the range is 0 to 1, default is 0.
        */
        function get() {
          return this._clipStartTime;
        }
      ),
      set: function set(time) {
        this._clipStartTime = Math.max(time, 0);
      }
    },
    {
      key: "clipEndTime",
      get: (
        /**
        * The end time of the clip, the range is 0 to 1, default is 1.
        */
        function get() {
          return this._clipEndTime;
        }
      ),
      set: function set(time) {
        this._clipEndTime = Math.min(time, 1);
      }
    }
  ]);
  return AnimatorState2;
}();
var AnimatorStateMachine = function() {
  function AnimatorStateMachine2() {
    this.states = [];
    this._statesMap = {};
  }
  var _proto = AnimatorStateMachine2.prototype;
  _proto.addState = function addState(name) {
    var state = this.findStateByName(name);
    if (!state) {
      state = new AnimatorState(name);
      this.states.push(state);
      this._statesMap[name] = state;
    } else {
      console.warn("The state named " + name + " has existed.");
    }
    return state;
  };
  _proto.removeState = function removeState(state) {
    var name = state.name;
    var index = this.states.indexOf(state);
    if (index > -1) {
      this.states.splice(index, 1);
    }
    delete this._statesMap[name];
  };
  _proto.findStateByName = function findStateByName(name) {
    return this._statesMap[name];
  };
  _proto.makeUniqueStateName = function makeUniqueStateName(name) {
    var _statesMap = this._statesMap;
    var originName = name;
    var index = 0;
    while (_statesMap[name]) {
      name = originName + " " + index;
      index++;
    }
    return name;
  };
  return AnimatorStateMachine2;
}();
var AnimatorConditionMode;
(function(AnimatorConditionMode2) {
  AnimatorConditionMode2[AnimatorConditionMode2["If"] = 0] = "If";
  AnimatorConditionMode2[AnimatorConditionMode2["IfNot"] = 1] = "IfNot";
  AnimatorConditionMode2[AnimatorConditionMode2["Greater"] = 2] = "Greater";
  AnimatorConditionMode2[AnimatorConditionMode2["Less"] = 3] = "Less";
  AnimatorConditionMode2[AnimatorConditionMode2["Equals"] = 4] = "Equals";
  AnimatorConditionMode2[AnimatorConditionMode2["NotEquals"] = 5] = "NotEquals";
})(AnimatorConditionMode || (AnimatorConditionMode = {}));
var Keyframe = function Keyframe2() {
};
var SkyBoxMaterial = function(Material2) {
  _inherits(SkyBoxMaterial2, Material2);
  function SkyBoxMaterial2(engine) {
    var _this;
    _this = Material2.call(this, engine, Shader.find("skybox")) || this;
    _this._decodeParam = new Vector4(0, 5, 0, 0);
    _this.renderState.rasterState.cullMode = CullMode.Off;
    _this.renderState.depthState.compareFunction = CompareFunction.LessEqual;
    _this.shaderData.setVector4("u_cubeDecodeParam", _this._decodeParam);
    return _this;
  }
  _create_class2(SkyBoxMaterial2, [
    {
      key: "textureDecodeRGBM",
      get: (
        /**
        * Whether to decode from texture with RGBM format.
        */
        function get() {
          return Boolean(this._decodeParam.x);
        }
      ),
      set: function set(value) {
        this._decodeParam.x = Number(value);
      }
    },
    {
      key: "RGBMDecodeFactor",
      get: (
        /**
        * RGBM decode factor, default 5.0.
        */
        function get() {
          return this._decodeParam.y;
        }
      ),
      set: function set(value) {
        this._decodeParam.y = value;
      }
    },
    {
      key: "textureCubeMap",
      get: (
        /**
        * Texture cube map of the sky box material.
        */
        function get() {
          return this.shaderData.getTexture("u_cube");
        }
      ),
      set: function set(v) {
        this.shaderData.setTexture("u_cube", v);
      }
    }
  ]);
  return SkyBoxMaterial2;
}(Material);
var DirtyFlagType;
(function(DirtyFlagType2) {
  DirtyFlagType2[DirtyFlagType2["Position"] = 1] = "Position";
  DirtyFlagType2[DirtyFlagType2["Velocity"] = 2] = "Velocity";
  DirtyFlagType2[DirtyFlagType2["Acceleration"] = 4] = "Acceleration";
  DirtyFlagType2[DirtyFlagType2["Color"] = 8] = "Color";
  DirtyFlagType2[DirtyFlagType2["Alpha"] = 16] = "Alpha";
  DirtyFlagType2[DirtyFlagType2["Size"] = 32] = "Size";
  DirtyFlagType2[DirtyFlagType2["StartAngle"] = 64] = "StartAngle";
  DirtyFlagType2[DirtyFlagType2["StartTime"] = 128] = "StartTime";
  DirtyFlagType2[DirtyFlagType2["LifeTime"] = 256] = "LifeTime";
  DirtyFlagType2[DirtyFlagType2["RotateVelocity"] = 512] = "RotateVelocity";
  DirtyFlagType2[DirtyFlagType2["Scale"] = 1024] = "Scale";
  DirtyFlagType2[DirtyFlagType2["Everything"] = 4294967295] = "Everything";
})(DirtyFlagType || (DirtyFlagType = {}));
var ParticleRendererBlendMode;
(function(ParticleRendererBlendMode2) {
  ParticleRendererBlendMode2[ParticleRendererBlendMode2["Transparent"] = 0] = "Transparent";
  ParticleRendererBlendMode2[ParticleRendererBlendMode2["Additive"] = 1] = "Additive";
})(ParticleRendererBlendMode || (ParticleRendererBlendMode = {}));
var ParticleRenderer = function(MeshRenderer2) {
  _inherits(ParticleRenderer2, MeshRenderer2);
  function ParticleRenderer2(props) {
    var _this;
    _this = MeshRenderer2.call(this, props) || this;
    _this._maxCount = 1e3;
    _this._position = new Vector3();
    _this._positionRandomness = new Vector3();
    _this._velocity = new Vector3();
    _this._velocityRandomness = new Vector3();
    _this._acceleration = new Vector3();
    _this._accelerationRandomness = new Vector3();
    _this._color = new Color(1, 1, 1, 1);
    _this._colorRandomness = 0;
    _this._size = 1;
    _this._sizeRandomness = 0;
    _this._alpha = 1;
    _this._alphaRandomness = 0;
    _this._startAngle = 0;
    _this._startAngleRandomness = 0;
    _this._rotateVelocity = 0;
    _this._rotateVelocityRandomness = 0;
    _this._lifetime = 5;
    _this._startTimeRandomness = 0;
    _this._scale = 1;
    _this._isOnce = false;
    _this._onceTime = 0;
    _this._time = 0;
    _this._isInit = false;
    _this._isStart = false;
    _this._updateDirtyFlag = 4294967295;
    _this._isRotateToVelocity = false;
    _this._isUseOriginColor = false;
    _this._isScaleByLifetime = false;
    _this._is2d = true;
    _this._isFadeIn = false;
    _this._isFadeOut = false;
    _this._playOnEnable = true;
    _this._blendMode = 0;
    _this._onColorChanged = _this._onColorChanged.bind(_assert_this_initialized(_this));
    _this._color._onValueChanged = _this._onColorChanged;
    _this.setMaterial(_this._createMaterial());
    return _this;
  }
  var _proto = ParticleRenderer2.prototype;
  _proto.update = function update(deltaTime) {
    if (!this._isInit || !this._isStart) {
      return;
    }
    if (this._isOnce && this._time > this._onceTime) {
      return this.stop();
    }
    if (this._updateDirtyFlag) {
      this._updateBuffer();
      this._updateDirtyFlag = 0;
    }
    this._time += deltaTime / 1e3;
    this.shaderData.setFloat("u_time", this._time);
  };
  _proto._onEnable = function _onEnable() {
    MeshRenderer2.prototype._onEnable.call(this);
    if (this._playOnEnable) {
      this.start();
    }
  };
  _proto.start = function start() {
    this._isStart = true;
    this._time = 0;
  };
  _proto.stop = function stop() {
    this._isStart = false;
  };
  _proto._createMaterial = function _createMaterial() {
    var material = new Material(this.engine, Shader.find("particle-shader"));
    var renderState = material.renderState;
    var target = renderState.blendState.targetBlendState;
    target.enabled = true;
    target.sourceColorBlendFactor = BlendFactor.SourceAlpha;
    target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;
    target.sourceAlphaBlendFactor = BlendFactor.One;
    target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;
    renderState.depthState.writeEnabled = false;
    material.renderState.renderQueueType = RenderQueueType.Transparent;
    this.isUseOriginColor = true;
    this.is2d = true;
    this.isFadeOut = true;
    return material;
  };
  _proto._createMesh = function _createMesh() {
    var mesh = new BufferMesh(this._entity.engine, "particleMesh");
    var vertexStride = 96;
    var vertexCount = this._maxCount * 4;
    var vertexFloatCount = vertexCount * vertexStride;
    var vertices = new Float32Array(vertexFloatCount);
    var indices = null;
    var useUint32 = false;
    if (vertexCount > ParticleRenderer2._uint16VertexLimit) {
      if (this.engine._hardwareRenderer.canIUse(GLCapabilityType.elementIndexUint)) {
        useUint32 = true;
        indices = new Uint32Array(6 * this._maxCount);
      } else {
        throw Error("The vertex count is over limit.");
      }
    } else {
      indices = new Uint16Array(6 * this._maxCount);
    }
    for (var i = 0, idx = 0; i < this._maxCount; ++i) {
      var startIndex = i * 4;
      indices[idx++] = startIndex;
      indices[idx++] = startIndex + 1;
      indices[idx++] = startIndex + 2;
      indices[idx++] = startIndex;
      indices[idx++] = startIndex + 2;
      indices[idx++] = startIndex + 3;
    }
    var vertexElements = [
      new VertexElement("a_position", 0, VertexElementFormat.Vector3, 0),
      new VertexElement("a_velocity", 12, VertexElementFormat.Vector3, 0),
      new VertexElement("a_acceleration", 24, VertexElementFormat.Vector3, 0),
      new VertexElement("a_color", 36, VertexElementFormat.Vector4, 0),
      new VertexElement("a_lifeAndSize", 52, VertexElementFormat.Vector4, 0),
      new VertexElement("a_rotation", 68, VertexElementFormat.Vector2, 0),
      new VertexElement("a_uv", 76, VertexElementFormat.Vector3, 0),
      new VertexElement("a_normalizedUv", 88, VertexElementFormat.Vector2, 0)
    ];
    var vertexBuffer = new Buffer(this.engine, BufferBindFlag.VertexBuffer, vertexFloatCount * 4, BufferUsage.Dynamic);
    var indexBuffer = new Buffer(this.engine, BufferBindFlag.IndexBuffer, indices, BufferUsage.Dynamic);
    mesh.setVertexBufferBinding(vertexBuffer, vertexStride);
    mesh.setIndexBufferBinding(indexBuffer, useUint32 ? IndexFormat.UInt32 : IndexFormat.UInt16);
    mesh.setVertexElements(vertexElements);
    mesh.addSubMesh(0, indices.length);
    this._vertexBuffer = vertexBuffer;
    this._vertexStride = vertexStride / 4;
    this._vertices = vertices;
    var bounds = mesh.bounds;
    var minValue = Number.MIN_SAFE_INTEGER;
    var maxValue = Number.MAX_SAFE_INTEGER;
    bounds.min.set(minValue, minValue, minValue);
    bounds.max.set(maxValue, maxValue, maxValue);
    return mesh;
  };
  _proto._updateBuffer = function _updateBuffer() {
    for (var x = 0; x < this._maxCount; x++) {
      this._updateSingleBuffer(x);
    }
    this._vertexBuffer.setData(this._vertices);
  };
  _proto._updateSingleBuffer = function _updateSingleBuffer(i) {
    var _this = this, _updateDirtyFlag = _this._updateDirtyFlag, vertices = _this._vertices, vertexStride = _this._vertexStride;
    var getRandom = ParticleRenderer2._getRandom;
    var offset = i * 4;
    var k0 = offset * vertexStride;
    var k1 = (offset + 1) * vertexStride;
    var k2 = (offset + 2) * vertexStride;
    var k3 = (offset + 3) * vertexStride;
    if (_updateDirtyFlag & 1) {
      var _this__position = this._position, x = _this__position.x, y = _this__position.y, z = _this__position.z;
      var _this1 = this, _positionArray = _this1._positionArray, _positionRandomness = _this1._positionRandomness;
      if (_positionArray) {
        if (_positionArray.length !== this._maxCount) {
          throw Error("The length of positionArray must be equal to maxCount.");
        }
        var pos = _positionArray[i];
        x += pos.x;
        y += pos.y;
        z += pos.z;
      } else {
        x += getRandom() * _positionRandomness.x;
        y += getRandom() * _positionRandomness.y;
        z += getRandom() * _positionRandomness.z;
      }
      vertices[k0] = vertices[k1] = vertices[k2] = vertices[k3] = x;
      vertices[k0 + 1] = vertices[k1 + 1] = vertices[k2 + 1] = vertices[k3 + 1] = y;
      vertices[k0 + 2] = vertices[k1 + 2] = vertices[k2 + 2] = vertices[k3 + 2] = z;
    }
    if (_updateDirtyFlag & 2) {
      var _this2 = this, _velocity = _this2._velocity, _velocityRandomness = _this2._velocityRandomness;
      vertices[k0 + 3] = vertices[k1 + 3] = vertices[k2 + 3] = vertices[k3 + 3] = _velocity.x + getRandom() * _velocityRandomness.x;
      vertices[k0 + 4] = vertices[k1 + 4] = vertices[k2 + 4] = vertices[k3 + 4] = _velocity.y + getRandom() * _velocityRandomness.y;
      vertices[k0 + 5] = vertices[k1 + 5] = vertices[k2 + 5] = vertices[k3 + 5] = _velocity.z + getRandom() * _velocityRandomness.z;
    }
    if (_updateDirtyFlag & 4) {
      var _this3 = this, _acceleration = _this3._acceleration, _accelerationRandomness = _this3._accelerationRandomness;
      vertices[k0 + 6] = vertices[k1 + 6] = vertices[k2 + 6] = vertices[k3 + 6] = _acceleration.x + getRandom() * _accelerationRandomness.x;
      vertices[k0 + 7] = vertices[k1 + 7] = vertices[k2 + 7] = vertices[k3 + 7] = _acceleration.y + getRandom() * _accelerationRandomness.y;
      vertices[k0 + 8] = vertices[k1 + 8] = vertices[k2 + 8] = vertices[k3 + 8] = _acceleration.z + getRandom() * _accelerationRandomness.z;
    }
    if (_updateDirtyFlag & 8) {
      var _this4 = this, _color = _this4._color, _colorRandomness = _this4._colorRandomness;
      vertices[k0 + 9] = vertices[k1 + 9] = vertices[k2 + 9] = vertices[k3 + 9] = MathUtil.clamp(_color.r + getRandom() * _colorRandomness, 0, 1);
      vertices[k0 + 10] = vertices[k1 + 10] = vertices[k2 + 10] = vertices[k3 + 10] = MathUtil.clamp(_color.g + getRandom() * _colorRandomness, 0, 1);
      vertices[k0 + 11] = vertices[k1 + 11] = vertices[k2 + 11] = vertices[k3 + 11] = MathUtil.clamp(_color.b + getRandom() * _colorRandomness, 0, 1);
    }
    if (_updateDirtyFlag & 16) {
      vertices[k0 + 12] = vertices[k1 + 12] = vertices[k2 + 12] = vertices[k3 + 12] = MathUtil.clamp(this._alpha + getRandom() * this._alphaRandomness, 0, 1);
    }
    if (_updateDirtyFlag & 128) {
      vertices[k0 + 13] = vertices[k1 + 13] = vertices[k2 + 13] = vertices[k3 + 13] = Math.random() * this._startTimeRandomness;
    }
    if (_updateDirtyFlag & 256) {
      var _lifetime = this._lifetime;
      vertices[k0 + 14] = vertices[k1 + 14] = vertices[k2 + 14] = vertices[k3 + 14] = _lifetime + getRandom() * _lifetime;
    }
    if (_updateDirtyFlag & 128 || _updateDirtyFlag & 256) {
      this._onceTime = Math.max(this._onceTime, vertices[k0 + 13] + vertices[k0 + 14]);
    }
    if (_updateDirtyFlag & 32) {
      var _size = this._size;
      vertices[k0 + 15] = vertices[k1 + 15] = vertices[k2 + 15] = vertices[k3 + 15] = Math.max(_size + getRandom() * this._sizeRandomness * _size * 2, 0);
    }
    if (_updateDirtyFlag & 1024) {
      vertices[k0 + 16] = vertices[k1 + 16] = vertices[k2 + 16] = vertices[k3 + 16] = this._scale;
    }
    if (_updateDirtyFlag & 64) {
      vertices[k0 + 17] = vertices[k1 + 17] = vertices[k2 + 17] = vertices[k3 + 17] = this._startAngle + getRandom() * Math.PI * this._startAngleRandomness * 2;
    }
    if (_updateDirtyFlag & 512) {
      vertices[k0 + 18] = vertices[k1 + 18] = vertices[k2 + 18] = vertices[k3 + 18] = this._rotateVelocity + getRandom() * this._rotateVelocityRandomness;
    }
    this._updateSingleUv(i, k0, k1, k2, k3);
  };
  _proto._updateSingleUv = function _updateSingleUv(i, k0, k1, k2, k3) {
    var spriteSheet = this.spriteSheet;
    var texture = this.getMaterial().shaderData.getTexture("u_texture");
    var vertices = this._vertices;
    if (texture) {
      var width = texture.width;
      var height = texture.height;
      if (spriteSheet) {
        var _spriteSheet_ = spriteSheet[i % spriteSheet.length], x = _spriteSheet_.x, y = _spriteSheet_.y, w = _spriteSheet_.w, h = _spriteSheet_.h;
        var u = x / width;
        var v = y / height;
        var p = u + w / width;
        var q = v + h / height;
        var ratio = h / w;
        vertices[k0 + 19] = u;
        vertices[k0 + 20] = q;
        vertices[k0 + 21] = ratio;
        vertices[k1 + 19] = p;
        vertices[k1 + 20] = q;
        vertices[k1 + 21] = ratio;
        vertices[k2 + 19] = p;
        vertices[k2 + 20] = v;
        vertices[k2 + 21] = ratio;
        vertices[k3 + 19] = u;
        vertices[k3 + 20] = v;
        vertices[k3 + 21] = ratio;
      } else {
        var ratio1 = height / width;
        vertices[k0 + 19] = 0;
        vertices[k0 + 20] = 1;
        vertices[k0 + 21] = ratio1;
        vertices[k1 + 19] = 1;
        vertices[k1 + 20] = 1;
        vertices[k1 + 21] = ratio1;
        vertices[k2 + 19] = 1;
        vertices[k2 + 20] = 0;
        vertices[k2 + 21] = ratio1;
        vertices[k3 + 19] = 0;
        vertices[k3 + 20] = 0;
        vertices[k3 + 21] = ratio1;
      }
    } else {
      vertices[k0 + 19] = 0;
      vertices[k0 + 20] = 0;
      vertices[k0 + 21] = 1;
      vertices[k1 + 19] = 1;
      vertices[k1 + 20] = 0;
      vertices[k1 + 21] = 1;
      vertices[k2 + 19] = 1;
      vertices[k2 + 20] = 1;
      vertices[k2 + 21] = 1;
      vertices[k3 + 19] = 0;
      vertices[k3 + 20] = 1;
      vertices[k3 + 21] = 1;
    }
    vertices[k0 + 22] = -0.5;
    vertices[k0 + 23] = -0.5;
    vertices[k1 + 22] = 0.5;
    vertices[k1 + 23] = -0.5;
    vertices[k2 + 22] = 0.5;
    vertices[k2 + 23] = 0.5;
    vertices[k3 + 22] = -0.5;
    vertices[k3 + 23] = 0.5;
  };
  _proto._onColorChanged = function _onColorChanged() {
    this._updateDirtyFlag |= 8;
  };
  ParticleRenderer2._getRandom = function _getRandom() {
    return Math.random() - 0.5;
  };
  _create_class2(ParticleRenderer2, [
    {
      key: "texture",
      get: (
        /**
        * Texture of particle.
        */
        function get() {
          return this.getMaterial().shaderData.getTexture("u_texture");
        }
      ),
      set: function set(texture) {
        if (texture) {
          this.shaderData.enableMacro("particleTexture");
          this.getMaterial().shaderData.setTexture("u_texture", texture);
        } else {
          this.shaderData.disableMacro("particleTexture");
        }
      }
    },
    {
      key: "position",
      get: (
        /**
        * Position of particles.
        */
        function get() {
          return this._position;
        }
      ),
      set: function set(value) {
        this._updateDirtyFlag |= 1;
        this._position = value;
      }
    },
    {
      key: "positionRandomness",
      get: (
        /**
        * Random range of positions.
        */
        function get() {
          return this._positionRandomness;
        }
      ),
      set: function set(value) {
        this._updateDirtyFlag |= 1;
        this._positionRandomness = value;
      }
    },
    {
      key: "positionArray",
      get: (
        /**
        * Array of fixed positions.
        */
        function get() {
          return this._positionArray;
        }
      ),
      set: function set(value) {
        this._updateDirtyFlag |= 1;
        this._positionArray = value;
      }
    },
    {
      key: "velocity",
      get: (
        /**
        * Velocity of particles.
        */
        function get() {
          return this._velocity;
        }
      ),
      set: function set(value) {
        this._updateDirtyFlag |= 2;
        this._velocity = value;
      }
    },
    {
      key: "velocityRandomness",
      get: (
        /**
        * Random range of velocity.
        */
        function get() {
          return this._velocityRandomness;
        }
      ),
      set: function set(value) {
        this._updateDirtyFlag |= 2;
        this._velocityRandomness = value;
      }
    },
    {
      key: "acceleration",
      get: (
        /**
        * Acceleration of particles.
        */
        function get() {
          return this._acceleration;
        }
      ),
      set: function set(value) {
        this._updateDirtyFlag |= 4;
        this._acceleration = value;
      }
    },
    {
      key: "accelerationRandomness",
      get: (
        /**
        * Random range of acceleration.
        */
        function get() {
          return this._accelerationRandomness;
        }
      ),
      set: function set(value) {
        this._updateDirtyFlag |= 4;
        this._accelerationRandomness = value;
      }
    },
    {
      key: "color",
      get: (
        /**
        * Color of particles.
        */
        function get() {
          return this._color;
        }
      ),
      set: function set(value) {
        this._color.copyFrom(value);
      }
    },
    {
      key: "colorRandomness",
      get: (
        /**
        * Random range of color.
        */
        function get() {
          return this._colorRandomness;
        }
      ),
      set: function set(value) {
        this._updateDirtyFlag |= 8;
        this._colorRandomness = value;
      }
    },
    {
      key: "size",
      get: (
        /**
        * Size of particles.
        */
        function get() {
          return this._size;
        }
      ),
      set: function set(value) {
        this._updateDirtyFlag |= 32;
        this._size = value;
      }
    },
    {
      key: "sizeRandomness",
      get: (
        /**
        * Random range of size.
        */
        function get() {
          return this._sizeRandomness;
        }
      ),
      set: function set(value) {
        this._updateDirtyFlag |= 32;
        this._sizeRandomness = value;
      }
    },
    {
      key: "alpha",
      get: (
        /**
        * Alpha of particles.
        */
        function get() {
          return this._alpha;
        }
      ),
      set: function set(value) {
        this._updateDirtyFlag |= 16;
        this._alpha = value;
      }
    },
    {
      key: "alphaRandomness",
      get: (
        /**
        * Random range of alpha.
        */
        function get() {
          return this._alphaRandomness;
        }
      ),
      set: function set(value) {
        this._updateDirtyFlag |= 16;
        this._alphaRandomness = value;
      }
    },
    {
      key: "angle",
      get: (
        /**
        * Angle of particles.
        */
        function get() {
          return this._startAngle;
        }
      ),
      set: function set(value) {
        this._updateDirtyFlag |= 64;
        this._startAngle = value;
      }
    },
    {
      key: "angleRandomness",
      get: (
        /**
        * Random range of angle.
        */
        function get() {
          return this._startAngleRandomness;
        }
      ),
      set: function set(value) {
        this._updateDirtyFlag |= 64;
        this._startAngleRandomness = value;
      }
    },
    {
      key: "rotateVelocity",
      get: (
        /**
        * Rotate velocity of particles.
        */
        function get() {
          return this._rotateVelocity;
        }
      ),
      set: function set(value) {
        this._updateDirtyFlag |= 512;
        this._rotateVelocity = value;
      }
    },
    {
      key: "rotateVelocityRandomness",
      get: (
        /**
        * Random range of rotate velocity.
        */
        function get() {
          return this._rotateVelocityRandomness;
        }
      ),
      set: function set(value) {
        this._updateDirtyFlag |= 512;
        this._rotateVelocityRandomness = value;
      }
    },
    {
      key: "lifetime",
      get: (
        /**
        * Lifetime of particles.
        */
        function get() {
          return this._lifetime;
        }
      ),
      set: function set(value) {
        this._updateDirtyFlag |= 256;
        this._lifetime = value;
        this._onceTime = 0;
      }
    },
    {
      key: "startTimeRandomness",
      get: (
        /**
        * Random range of start time.
        */
        function get() {
          return this._startTimeRandomness;
        }
      ),
      set: function set(value) {
        this._updateDirtyFlag |= 128;
        this._startTimeRandomness = value;
        this._onceTime = 0;
      }
    },
    {
      key: "scale",
      get: (
        /**
        * Scale factor of particles.
        */
        function get() {
          return this._scale;
        }
      ),
      set: function set(value) {
        this._updateDirtyFlag |= 1024;
        this._scale = value;
      }
    },
    {
      key: "maxCount",
      get: (
        /**
        * Max count of particles.
        */
        function get() {
          return this._maxCount;
        }
      ),
      set: function set(value) {
        this._isStart = false;
        this._isInit = false;
        this._maxCount = value;
        this._updateDirtyFlag = 4294967295;
        this.mesh = this._createMesh();
        this._updateBuffer();
        this._isInit = true;
        this.shaderData.setFloat("u_time", 0);
      }
    },
    {
      key: "isOnce",
      get: (
        /**
        * Whether play once.
        */
        function get() {
          return this._isOnce;
        }
      ),
      set: function set(value) {
        this._time = 0;
        this.shaderData.setInt("u_once", value ? 1 : 0);
        this._isOnce = value;
      }
    },
    {
      key: "isRotateToVelocity",
      get: (
        /**
        * Whether follow the direction of velocity.
        */
        function get() {
          return this._isRotateToVelocity;
        }
      ),
      set: function set(value) {
        if (value) {
          this.shaderData.enableMacro("rotateToVelocity");
        } else {
          this.shaderData.disableMacro("rotateToVelocity");
        }
        this._isRotateToVelocity = value;
      }
    },
    {
      key: "isUseOriginColor",
      get: (
        /**
        * Whether use origin color.
        */
        function get() {
          return this._isUseOriginColor;
        }
      ),
      set: function set(value) {
        if (value) {
          this.shaderData.enableMacro("useOriginColor");
        } else {
          this.shaderData.disableMacro("useOriginColor");
        }
        this._isUseOriginColor = value;
      }
    },
    {
      key: "isScaleByLifetime",
      get: (
        /**
        * Whether scale by lifetime.
        */
        function get() {
          return this._isScaleByLifetime;
        }
      ),
      set: function set(value) {
        if (value) {
          this.shaderData.enableMacro("isScaleByLifetime");
        } else {
          this.shaderData.disableMacro("isScaleByLifetime");
        }
        this._isScaleByLifetime = value;
      }
    },
    {
      key: "is2d",
      get: (
        /**
        * Whether 2D rendering.
        */
        function get() {
          return this._is2d;
        }
      ),
      set: function set(value) {
        if (value) {
          this.shaderData.enableMacro("is2d");
        } else {
          this.shaderData.disableMacro("is2d");
          this.getMaterial().renderState.rasterState.cullMode = CullMode.Off;
        }
        this._is2d = value;
      }
    },
    {
      key: "isFadeIn",
      get: (
        /**
        * Whether fade in.
        */
        function get() {
          return this._isFadeIn;
        }
      ),
      set: function set(value) {
        if (value) {
          this.shaderData.enableMacro("fadeIn");
        } else {
          this.shaderData.disableMacro("fadeIn");
        }
        this._isFadeIn = value;
      }
    },
    {
      key: "isFadeOut",
      get: (
        /**
        * Whether fade out.
        */
        function get() {
          return this._isFadeOut;
        }
      ),
      set: function set(value) {
        if (value) {
          this.shaderData.enableMacro("fadeOut");
        } else {
          this.shaderData.disableMacro("fadeOut");
        }
        this._isFadeOut = value;
      }
    },
    {
      key: "playOnEnable",
      get: (
        /**
        * Whether play on enable.
        */
        function get() {
          return this._playOnEnable;
        }
      ),
      set: function set(value) {
        this._playOnEnable = value;
        if (value) {
          this.start();
        } else {
          this.stop();
        }
      }
    },
    {
      key: "blendMode",
      get: (
        /**
        * Blend mode of the particle renderer's material.
        */
        function get() {
          return this._blendMode;
        }
      ),
      set: function set(value) {
        var blendState = this.getMaterial().renderState.blendState;
        var target = blendState.targetBlendState;
        if (value === 0) {
          target.enabled = true;
          target.sourceColorBlendFactor = BlendFactor.SourceAlpha;
          target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;
          target.sourceAlphaBlendFactor = BlendFactor.One;
          target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;
        } else if (value === 1) {
          target.enabled = true;
          target.sourceColorBlendFactor = BlendFactor.SourceAlpha;
          target.destinationColorBlendFactor = BlendFactor.One;
          target.sourceAlphaBlendFactor = BlendFactor.One;
          target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;
        }
        this._blendMode = value;
      }
    }
  ]);
  return ParticleRenderer2;
}(MeshRenderer);
(function() {
  ParticleRenderer._uint16VertexLimit = 65535;
})();
__decorate([
  ignoreClone
], ParticleRenderer.prototype, "_onColorChanged", null);
var FRAG_SHADER = "#define GLSLIFY 1\nvarying vec2 v_uv;uniform sampler2D u_texture;void main(void){gl_FragColor=texture2D(u_texture,v_uv);}";
var VERT_SHADER = "#define GLSLIFY 1\nattribute vec3 POSITION;attribute vec2 TEXCOORD_0;varying vec2 v_uv;uniform mat4 u_projMat;uniform mat4 u_viewMat;void main(){gl_Position=u_projMat*u_viewMat*vec4(POSITION,1.0);v_uv=TEXCOORD_0;}";
Shader.create("trail", VERT_SHADER, FRAG_SHADER);
var TrailMaterial = function(Material2) {
  _inherits(TrailMaterial2, Material2);
  function TrailMaterial2(engine) {
    var _this;
    _this = Material2.call(this, engine, Shader.find("trail")) || this;
    var target = _this.renderState.blendState.targetBlendState;
    target.enabled = true;
    target.sourceColorBlendFactor = target.sourceAlphaBlendFactor = BlendFactor.SourceAlpha;
    target.destinationColorBlendFactor = target.destinationAlphaBlendFactor = BlendFactor.One;
    _this.renderState.depthState.writeEnabled = false;
    return _this;
  }
  return TrailMaterial2;
}(Material);
var _tempVector3 = new Vector3();
var TrailRenderer = function(MeshRenderer2) {
  _inherits(TrailRenderer2, MeshRenderer2);
  function TrailRenderer2(entity, props) {
    var _this;
    _this = MeshRenderer2.call(this, entity) || this;
    _this._stroke = props.stroke || 0.2;
    _this._minSeg = props.minSeg || 0.02;
    _this._lifetime = props.lifetime || 1e3;
    _this._maxPointNum = _this._lifetime / 1e3 * entity.engine.targetFrameRate;
    _this._points = [];
    _this._pointStates = [];
    _this._strapPoints = [];
    for (var i = 0; i < _this._maxPointNum; i++) {
      _this._points.push(new Vector3());
      _this._pointStates.push(_this._lifetime);
      _this._strapPoints.push(new Vector3());
      _this._strapPoints.push(new Vector3());
    }
    _this._curPointNum = 0;
    var mtl = props.material || new TrailMaterial(_this.engine);
    _this.setMaterial(mtl);
    _this.setTexture(props.texture);
    _this._initGeometry();
    return _this;
  }
  var _proto = TrailRenderer2.prototype;
  _proto.update = function update(deltaTime) {
    var mov = 0, newIdx = 0;
    for (var i = 0; i < this._curPointNum; i++) {
      this._pointStates[i] -= deltaTime;
      if (this._pointStates[i] < 0) {
        mov++;
      } else if (mov > 0) {
        newIdx = i - mov;
        this._pointStates[newIdx] = this._pointStates[i];
        this._points[newIdx].copyFrom(this._points[i]);
      }
    }
    this._curPointNum -= mov;
    var appendNewPoint = true;
    if (this._curPointNum === this._maxPointNum) {
      appendNewPoint = false;
    } else if (this._curPointNum > 0) {
      var lastPoint = this._points[this._points.length - 1];
      if (Vector3.distance(this.entity.transform.worldPosition, lastPoint) < this._minSeg) {
        appendNewPoint = false;
      }
    }
    if (appendNewPoint) {
      this._pointStates[this._curPointNum] = this._lifetime;
      this._points[this._curPointNum].copyFrom(this.entity.transform.worldPosition);
      this._curPointNum++;
    }
  };
  _proto.setTexture = function setTexture(texture) {
    if (texture) {
      this.getMaterial().shaderData.setTexture("u_texture", texture);
    }
  };
  _proto._render = function _render(context) {
    this._updateStrapVertices(context.camera, this._points);
    this._updateStrapCoords();
    this._vertexBuffer.setData(this._vertices);
    MeshRenderer2.prototype._render.call(this, context);
  };
  _proto._initGeometry = function _initGeometry() {
    var mesh = new BufferMesh(this._entity.engine);
    var vertexStride = 20;
    var vertexCount = this._maxPointNum * 2;
    var vertexFloatCount = vertexCount * vertexStride;
    var vertices = new Float32Array(vertexFloatCount);
    var vertexElements = [
      new VertexElement("POSITION", 0, VertexElementFormat.Vector3, 0),
      new VertexElement("TEXCOORD_0", 12, VertexElementFormat.Vector2, 0)
    ];
    var vertexBuffer = new Buffer(this.engine, vertexFloatCount * 4, BufferUsage.Dynamic);
    mesh.setVertexBufferBinding(vertexBuffer, vertexStride);
    mesh.setVertexElements(vertexElements);
    mesh.addSubMesh(0, vertexCount, MeshTopology.TriangleStrip);
    this._vertexBuffer = vertexBuffer;
    this._vertexStride = vertexStride;
    this._vertices = vertices;
    this.mesh = mesh;
  };
  _proto._updateStrapVertices = function _updateStrapVertices(camera, points) {
    var m = camera.viewMatrix;
    var e = m.elements;
    var vx = new Vector3(e[0], e[4], e[8]);
    var vy = new Vector3(e[1], e[5], e[9]);
    var vz = new Vector3(e[2], e[6], e[10]);
    var s = this._stroke;
    vy.scale(s);
    var up = new Vector3();
    var down = new Vector3();
    var rotation = new Quaternion();
    Vector3.transformByQuat(vx, rotation, vx);
    Vector3.transformByQuat(vy, rotation, vy);
    var dy = new Vector3();
    var cross = new Vector3();
    var perpVector = new Vector3();
    vx.normalize();
    var vertices = this._vertices;
    for (var i = 0; i < this._maxPointNum; i++) {
      if (i < this._curPointNum) {
        var p = points[i];
        if (i === this._curPointNum - 1 && i !== 0) {
          Vector3.subtract(p, points[i - 1], perpVector);
        } else {
          Vector3.subtract(points[i + 1], p, perpVector);
        }
        this._projectOnPlane(perpVector, vz, perpVector);
        perpVector.normalize();
        var angle = Math.acos(Vector3.dot(vx, perpVector));
        Vector3.cross(vx, perpVector, cross);
        if (Vector3.dot(cross, vz) <= 0) {
          angle = Math.PI * 2 - angle;
        }
        Quaternion.rotationAxisAngle(vz, angle, rotation);
        Vector3.transformByQuat(vy, rotation, dy);
        Vector3.add(p, dy, up);
        Vector3.subtract(p, dy, down);
      }
      var p0 = i * 2 * this._vertexStride / 4;
      var p1 = (i * 2 + 1) * this._vertexStride / 4;
      vertices[p0] = up.x;
      vertices[p0 + 1] = up.y;
      vertices[p0 + 2] = up.z;
      vertices[p1] = down.x;
      vertices[p1 + 1] = down.y;
      vertices[p1 + 2] = down.z;
    }
  };
  _proto._updateStrapCoords = function _updateStrapCoords() {
    if (this._prePointsNum === this._curPointNum) {
      return;
    }
    this._prePointsNum = this._curPointNum;
    var count = this._curPointNum;
    var texDelta = 1 / count;
    var vertices = this._vertices;
    for (var i = 0; i < count; i++) {
      var d = 1 - i * texDelta;
      var p0 = i * 2 * this._vertexStride / 4;
      var p1 = (i * 2 + 1) * this._vertexStride / 4;
      vertices[p0] = 0;
      vertices[p0 + 1] = d;
      vertices[p1] = 1;
      vertices[p1 + 1] = d;
    }
  };
  _proto._projectOnVector = function _projectOnVector(a, p, out) {
    var n_p = p.clone();
    Vector3.normalize(n_p, n_p);
    var cosine = Vector3.dot(a, n_p);
    out.x = n_p.x * cosine;
    out.y = n_p.y * cosine;
    out.z = n_p.z * cosine;
  };
  _proto._projectOnPlane = function _projectOnPlane(a, n, out) {
    this._projectOnVector(a, n, _tempVector3);
    Vector3.subtract(a, _tempVector3, out);
  };
  return TrailRenderer2;
}(MeshRenderer);
var Probe = function(Script2) {
  _inherits(Probe2, Script2);
  function Probe2() {
    var _this;
    _this = Script2.apply(this, arguments) || this;
    _this.probeLayer = Layer.Everything;
    _this.width = 1024;
    _this.height = 1024;
    _this.antiAliasing = 1;
    _this._isCube = false;
    return _this;
  }
  var _proto = Probe2.prototype;
  _proto.onTextureChange = function onTextureChange(renderColorTexture) {
  };
  _proto.onBeginRender = function onBeginRender(camera) {
    if (!this.enabled)
      return;
    this._camera = camera;
    this._oriCameraCullingMask = camera.cullingMask;
    camera.cullingMask = this.probeLayer;
    if (!this._activeRenderTarget || this._activeRenderTarget.width !== this.width || this._activeRenderTarget.height !== this.height || this._activeRenderTarget.antiAliasing !== this.antiAliasing) {
      this._renderTarget = new RenderTarget(this.engine, this.width, this.height, this._isCube ? new TextureCube(this.engine, this.width) : new Texture2D(this.engine, this.width, this.height), RenderBufferDepthFormat.Depth, this.antiAliasing);
      this._renderTargetSwap = new RenderTarget(this.engine, this.width, this.height, this._isCube ? new TextureCube(this.engine, this.width) : new Texture2D(this.engine, this.width, this.height), RenderBufferDepthFormat.Depth, this.antiAliasing);
      this._activeRenderTarget = this._renderTarget;
    }
    this._oriCameraRenderTarget = camera.renderTarget;
    camera.renderTarget = this._activeRenderTarget;
  };
  _proto.onEndRender = function onEndRender(camera) {
    if (!this.enabled)
      return;
    this.onTextureChange && this.onTextureChange(this._texture);
    this._activeRenderTarget = this._activeRenderTarget === this._renderTarget ? this._renderTargetSwap : this._renderTarget;
  };
  _proto._reset = function _reset() {
    if (!this.enabled)
      return;
    this._camera.renderTarget = this._oriCameraRenderTarget;
    this._camera.cullingMask = this._oriCameraCullingMask;
  };
  _create_class2(Probe2, [
    {
      key: "_texture",
      get: function get() {
        var _this__activeRenderTarget;
        return (_this__activeRenderTarget = this._activeRenderTarget) == null ? void 0 : _this__activeRenderTarget.getColorTexture();
      }
    }
  ]);
  return Probe2;
}(Script);
var cacheTarget = new Vector3();
var cacheUp = new Vector3();
var cacheDir = new Vector3();
var CubeProbe = function(Probe2) {
  _inherits(CubeProbe2, Probe2);
  function CubeProbe2() {
    var _this;
    _this = Probe2.apply(this, arguments) || this;
    _this.position = new Vector3(0, 0, 0);
    _this._isCube = true;
    _this.oriViewMatrix = new Matrix();
    return _this;
  }
  var _proto = CubeProbe2.prototype;
  _proto.onBeginRender = function onBeginRender(camera) {
    if (!this.enabled)
      return;
    Probe2.prototype.onBeginRender.call(this, camera);
    this._storeCamera(camera);
    for (var faceIndex = 0; faceIndex < 6; faceIndex++) {
      this._setCamera(faceIndex, camera);
      camera.render(TextureCubeFace.PositiveX + faceIndex);
    }
    this._restoreCamera(camera);
    Probe2.prototype._reset.call(this);
  };
  _proto._storeCamera = function _storeCamera(camera) {
    this.oriViewMatrix.copyFrom(camera.viewMatrix);
    this._oriFieldOfView = camera.fieldOfView;
  };
  _proto._restoreCamera = function _restoreCamera(camera) {
    camera.viewMatrix.copyFrom(this.oriViewMatrix);
    camera.fieldOfView = this._oriFieldOfView;
  };
  _proto._setCamera = function _setCamera(faceIndex, camera) {
    switch (faceIndex) {
      case 0:
        cacheUp.set(0, -1, 0);
        cacheDir.set(1, 0, 0);
        break;
      case 1:
        cacheUp.set(0, -1, 0);
        cacheDir.set(-1, 0, 0);
        break;
      case 2:
        cacheUp.set(0, 0, 1);
        cacheDir.set(0, 1, 0);
        break;
      case 3:
        cacheUp.set(0, 0, -1);
        cacheDir.set(0, -1, 0);
        break;
      case 4:
        cacheUp.set(0, -1, 0);
        cacheDir.set(0, 0, 1);
        break;
      case 5:
        cacheUp.set(0, -1, 0);
        cacheDir.set(0, 0, -1);
        break;
    }
    Vector3.add(this.position, cacheDir, cacheTarget);
    Matrix.lookAt(this.position, cacheTarget, cacheUp, camera.viewMatrix);
    camera.fieldOfView = 90;
  };
  return CubeProbe2;
}(Probe);

// node_modules/@galacean/engine-draco/dist/module.js
function _defineProperties3(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _create_class3(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties3(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties3(Constructor, staticProps);
  return Constructor;
}
var DRACOWorker = function() {
  function DRACOWorker2(workerSourceURL, decoderWASMBinary) {
    var _this = this;
    this._costs = {};
    this._currentLoad = 0;
    this._callbacks = {};
    this._worker = new Worker(workerSourceURL);
    this._worker.onmessage = function(e) {
      var message = e.data;
      switch (message.type) {
        case "decode":
          _this._callbacks[message.id].resolve(message.geometry);
          break;
        case "error":
          _this._callbacks[message.id].reject(message);
          break;
        default:
          Logger.error('DRACOWorker: Unexpected message, "' + message.type + '"');
      }
    };
    if (decoderWASMBinary) {
      this._worker.postMessage({
        type: "init",
        decoderConfig: {
          wasmBinary: decoderWASMBinary
        }
      });
    } else {
      this._worker.postMessage({
        type: "init",
        decoderConfig: {}
      });
    }
  }
  var _proto = DRACOWorker2.prototype;
  _proto.setCosts = function setCosts(taskId, cost) {
    this._costs[taskId] = cost;
  };
  _proto.addCurrentLoad = function addCurrentLoad(cost) {
    this._currentLoad += cost;
  };
  _proto.setCallback = function setCallback(taskId, resolve, reject) {
    this._callbacks[taskId] = {
      resolve,
      reject
    };
  };
  _proto.decode = function decode2(taskId, taskConfig, buffer) {
    this._worker.postMessage({
      type: "decode",
      id: taskId,
      taskConfig,
      buffer
    }, [
      buffer
    ]);
  };
  _proto.releaseTask = function releaseTask(taskId) {
    this._currentLoad -= this._costs[taskId];
    delete this._callbacks[taskId];
    delete this._costs[taskId];
  };
  _create_class3(DRACOWorker2, [
    {
      key: "currentLoad",
      get: function get() {
        return this._currentLoad;
      }
    }
  ]);
  return DRACOWorker2;
}();
var workerString = 'let decoderPending;\nlet decoderConfig;\n\nonmessage = function(e) {\n  const message = e.data;\n\n  switch (message.type) {\n    case "init":\n      decoderConfig = message.decoderConfig;\n      decoderPending = new Promise(function(resolve /*, reject*/) {\n        decoderConfig.onModuleLoaded = function(draco) {\n          // Module is Promise-like. Wrap before resolving to avoid loop.\n          resolve({ draco: draco });\n        };\n        DracoDecoderModule(decoderConfig);\n      });\n      break;\n\n    case "decode":\n      const buffer = message.buffer;\n      const taskConfig = message.taskConfig;\n      decoderPending.then(module => {\n        const draco = module.draco;\n        const decoder = new draco.Decoder();\n        const decoderBuffer = new draco.DecoderBuffer();\n        decoderBuffer.Init(new Int8Array(buffer), buffer.byteLength);\n        try {\n          const geometry = decodeGeometry(draco, decoder, decoderBuffer, taskConfig);\n          const buffers = geometry.attributes.map(attr => attr.array.buffer);\n          if (geometry.index) buffers.push(geometry.index.array.buffer);\n          self.postMessage({ type: "decode", id: message.id, geometry }, buffers);\n        } catch (error) {\n          console.error(error);\n          self.postMessage({ type: "error", id: message.id, error: error.message });\n        } finally {\n          draco.destroy(decoderBuffer);\n          draco.destroy(decoder);\n        }\n      });\n      break;\n  }\n};\n\nfunction decodeGeometry(draco, decoder, decoderBuffer, taskConfig) {\n  const attributeIDs = taskConfig.attributeIDs;\n  const attributeTypes = taskConfig.attributeTypes;\n\n  let dracoGeometry;\n  let decodingStatus;\n\n  const geometryType = decoder.GetEncodedGeometryType(decoderBuffer);\n  if (geometryType === draco.TRIANGULAR_MESH) {\n    dracoGeometry = new draco.Mesh();\n    decodingStatus = decoder.DecodeBufferToMesh(decoderBuffer, dracoGeometry);\n  } else {\n    throw new Error("DRACODecoder worker: Unexpected geometry type.");\n  }\n\n  if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {\n    throw new Error("DRACODecoder worker: Decoding failed: " + decodingStatus.error_msg());\n  }\n\n  const geometry = { index: null, attributes: [] };\n\n  // Gather all vertex attributes.\n  for (let attributeName in attributeIDs) {\n    const attributeType = self[attributeTypes[attributeName]];\n\n    let attribute;\n    let attributeID;\n\n    // A Draco file may be created with default vertex attributes, whose attribute IDs\n    // are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n    // a Draco file may contain a custom set of attributes, identified by known unique\n    // IDs. glTF files always do the latter, and .drc files typically do the former.\n    if (taskConfig.useUniqueIDs) {\n      attributeID = attributeIDs[attributeName];\n      attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeID);\n    } else {\n      attributeID = decoder.GetAttributeId(dracoGeometry, draco[attributeIDs[attributeName]]);\n      if (attributeID === -1) continue;\n      attribute = decoder.GetAttribute(dracoGeometry, attributeID);\n    }\n    geometry.attributes.push(decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute));\n  }\n  // Add index.\n  if (geometryType === draco.TRIANGULAR_MESH) {\n    // Generate mesh faces.\n    const numFaces = dracoGeometry.num_faces();\n    const numIndices = numFaces * 3;\n    let dataSize;\n    let ptr;\n    let index;\n    const indexType = self[taskConfig.indexType];\n\n    switch (indexType) {\n      case Uint16Array:\n        dataSize = numIndices * 2;\n        ptr = draco._malloc(dataSize);\n        decoder.GetTrianglesUInt16Array(dracoGeometry, dataSize, ptr);\n        index = new Uint16Array(draco.HEAPU16.buffer, ptr, numIndices).slice();\n        draco._free(ptr);\n        break;\n      case Uint32Array:\n        dataSize = numIndices * 4;\n        ptr = draco._malloc(dataSize);\n        decoder.GetTrianglesUInt32Array(dracoGeometry, dataSize, ptr);\n        index = new Uint32Array(draco.HEAPU32.buffer, ptr, numIndices).slice();\n        draco._free(ptr);\n        break;\n      default:\n        throw new Error("DRACODecoder: Unexpected index type.");\n    }\n    geometry.index = { array: index, itemSize: 1 };\n  }\n  draco.destroy(dracoGeometry);\n  return geometry;\n}\n\nfunction decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {\n  const numComponents = attribute.num_components();\n  const numPoints = dracoGeometry.num_points();\n  const numValues = numPoints * numComponents;\n  let ptr;\n  let array;\n  let dataSize;\n  switch (attributeType) {\n    case Float32Array:\n      dataSize = numValues * 4;\n      ptr = draco._malloc(dataSize);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_FLOAT32, dataSize, ptr);\n      array = new Float32Array(draco.HEAPF32.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Int8Array:\n      ptr = draco._malloc(numValues);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_INT8, numValues, ptr);\n      array = new Int8Array(draco.HEAP8.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Int16Array:\n      dataSize = numValues * 2;\n      ptr = draco._malloc(dataSize);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_INT16, dataSize, ptr);\n      array = new Int16Array(draco.HEAP16.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Int32Array:\n      dataSize = numValues * 4;\n      ptr = draco._malloc(dataSize);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_INT32, dataSize, ptr);\n      array = new Int32Array(draco.HEAP32.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Uint8Array:\n      ptr = draco._malloc(numValues);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_UINT8, numValues, ptr);\n      array = new Uint8Array(draco.HEAPU8.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Uint16Array:\n      dataSize = numValues * 2;\n      ptr = draco._malloc(dataSize);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_UINT16, dataSize, ptr);\n      array = new Uint16Array(draco.HEAPU16.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Uint32Array:\n      dataSize = numValues * 4;\n      ptr = draco._malloc(dataSize);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_UINT32, dataSize, ptr);\n      array = new Uint32Array(draco.HEAPU32.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    default:\n      throw new Error("DRACODecoder: Unexpected attribute type.");\n  }\n\n  return {\n    name: attributeName,\n    array: array,\n    itemSize: numComponents\n  };\n}\n';
var LIB_PATH = "https://gw.alipayobjects.com/os/lib/alipay/draco-javascript/1.3.6/lib/";
var JS_FILE = "draco_decoder_gltf.js";
var WASM_FILE = "draco_decoder_gltf.r3bin";
var WASM_WRAPPER_FILE = "draco_wasm_wrapper_gltf.js";
var DRACODecoder = function() {
  function DRACODecoder2(config) {
    if (config === void 0)
      config = {
        type: "wasm",
        workerLimit: 4
      };
    this.pool = [];
    this.workerLimit = Math.min(navigator.hardwareConcurrency || 4, 4);
    this.currentTaskId = 1;
    this.taskCache = /* @__PURE__ */ new WeakMap();
    if (config.workerLimit > this.workerLimit) {
      Logger.warn("DRACOWorkerPool: Can not initialize worker pool with limit:" + config.workerLimit);
    } else {
      var _config_workerLimit;
      this.workerLimit = (_config_workerLimit = config.workerLimit) != null ? _config_workerLimit : 4;
    }
    this.useJS = typeof WebAssembly !== "object" || config.type === "js";
    this.loadLibPromise = this.preloadLib();
  }
  var _proto = DRACODecoder2.prototype;
  _proto.preloadLib = function preloadLib() {
    var _this = this;
    if (this.loadLibPromise) {
      return this.loadLibPromise;
    }
    return new Promise(function(resolve, reject) {
      if (_this.useJS) {
        request("" + LIB_PATH + JS_FILE, {
          type: "text"
        }).then(function(jsSource) {
          var body = [
            jsSource,
            workerString
          ].join("\n");
          var workerSourceURL = URL.createObjectURL(new Blob([
            body
          ]));
          resolve({
            workerSourceURL,
            decoderWASMBinary: null
          });
        }).catch(function(reason) {
          reject(reason);
        });
      } else {
        Promise.all([
          request("" + LIB_PATH + WASM_WRAPPER_FILE, {
            type: "text"
          }),
          request("" + LIB_PATH + WASM_FILE, {
            type: "arraybuffer"
          })
        ]).then(function(resources) {
          var wrapperSource = resources[0], decoderWASMBinary = resources[1];
          var body = [
            wrapperSource,
            workerString
          ].join("\n");
          var workerSourceURL = URL.createObjectURL(new Blob([
            body
          ]));
          resolve({
            workerSourceURL,
            decoderWASMBinary
          });
        }).catch(function(reason) {
          reject(reason);
        });
      }
    });
  };
  _proto.getWorker = function getWorker() {
    var _this = this;
    return this.preloadLib().then(function(worderResources) {
      if (_this.pool.length < _this.workerLimit) {
        var dracoWorker = new DRACOWorker(worderResources.workerSourceURL, worderResources.decoderWASMBinary);
        _this.pool.push(dracoWorker);
      } else {
        _this.pool.sort(function(a, b) {
          return a.currentLoad > b.currentLoad ? -1 : 1;
        });
      }
      return _this.pool[_this.pool.length - 1];
    });
  };
  _proto.decode = function decode2(buffer, taskConfig) {
    var _this = this;
    var taskKey = JSON.stringify(taskConfig);
    if (this.taskCache.has(buffer)) {
      var cachedTask = this.taskCache.get(buffer);
      if (cachedTask.key === taskKey) {
        return cachedTask.promise;
      } else if (buffer.byteLength === 0) {
        throw new Error("DRACODecoder: Unable to re-decode a buffer with different settings. Buffer has already been transferred.");
      }
    }
    var taskId = this.currentTaskId++;
    var cost = buffer.byteLength;
    var taskWorker;
    var task = new Promise(function(resolve, reject) {
      _this.getWorker().then(function(worker) {
        taskWorker = worker;
        worker.setCosts(taskId, cost);
        worker.addCurrentLoad(cost);
        worker.setCallback(taskId, resolve, reject);
        worker.decode(taskId, taskConfig, buffer);
      }).catch(function(e) {
        reject(e);
      });
    });
    task.finally(function() {
      if (taskWorker && taskId) {
        taskWorker.releaseTask(taskId);
      }
    });
    this.taskCache.set(buffer, {
      key: taskKey,
      promise: task
    });
    return task;
  };
  return DRACODecoder2;
}();

// node_modules/@galacean/engine-rhi-webgl/dist/module.js
var GLCompressedTextureInternalFormat;
(function(GLCompressedTextureInternalFormat2) {
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2[
    // astc
    "RGBA_ASTC_4X4_KHR"
  ] = 37808] = "RGBA_ASTC_4X4_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGBA_ASTC_5X4_KHR"] = 37809] = "RGBA_ASTC_5X4_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGBA_ASTC_5X5_KHR"] = 37810] = "RGBA_ASTC_5X5_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGBA_ASTC_6X5_KHR"] = 37811] = "RGBA_ASTC_6X5_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGBA_ASTC_6X6_KHR"] = 37812] = "RGBA_ASTC_6X6_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGBA_ASTC_8X5_KHR"] = 37813] = "RGBA_ASTC_8X5_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGBA_ASTC_8X6_KHR"] = 37814] = "RGBA_ASTC_8X6_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGBA_ASTC_8X8_KHR"] = 37815] = "RGBA_ASTC_8X8_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGBA_ASTC_10X5_KHR"] = 37816] = "RGBA_ASTC_10X5_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGBA_ASTC_10X6_KHR"] = 37817] = "RGBA_ASTC_10X6_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGBA_ASTC_10X8_KHR"] = 37818] = "RGBA_ASTC_10X8_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGBA_ASTC_10X10_KHR"] = 37819] = "RGBA_ASTC_10X10_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGBA_ASTC_12X10_KHR"] = 37820] = "RGBA_ASTC_12X10_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGBA_ASTC_12X12_KHR"] = 37821] = "RGBA_ASTC_12X12_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["SRGB8_ALPHA8_ASTC_4X4_KHR"] = 37840] = "SRGB8_ALPHA8_ASTC_4X4_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["SRGB8_ALPHA8_ASTC_5X4_KHR"] = 37841] = "SRGB8_ALPHA8_ASTC_5X4_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["SRGB8_ALPHA8_ASTC_5X5_KHR"] = 37842] = "SRGB8_ALPHA8_ASTC_5X5_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["SRGB8_ALPHA8_ASTC_6X5_KHR"] = 37843] = "SRGB8_ALPHA8_ASTC_6X5_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["SRGB8_ALPHA8_ASTC_6X6_KHR"] = 37844] = "SRGB8_ALPHA8_ASTC_6X6_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["SRGB8_ALPHA8_ASTC_8X5_KHR"] = 37845] = "SRGB8_ALPHA8_ASTC_8X5_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["SRGB8_ALPHA8_ASTC_8X6_KHR"] = 37846] = "SRGB8_ALPHA8_ASTC_8X6_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["SRGB8_ALPHA8_ASTC_8X8_KHR"] = 37847] = "SRGB8_ALPHA8_ASTC_8X8_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["SRGB8_ALPHA8_ASTC_10X5_KHR"] = 37848] = "SRGB8_ALPHA8_ASTC_10X5_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["SRGB8_ALPHA8_ASTC_10X6_KHR"] = 37849] = "SRGB8_ALPHA8_ASTC_10X6_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["SRGB8_ALPHA8_ASTC_10X8_KHR"] = 37850] = "SRGB8_ALPHA8_ASTC_10X8_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["SRGB8_ALPHA8_ASTC_10X10_KHR"] = 37851] = "SRGB8_ALPHA8_ASTC_10X10_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["SRGB8_ALPHA8_ASTC_12X10_KHR"] = 37852] = "SRGB8_ALPHA8_ASTC_12X10_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["SRGB8_ALPHA8_ASTC_12X12_KHR"] = 37853] = "SRGB8_ALPHA8_ASTC_12X12_KHR";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2[
    // etc1
    "RGB_ETC1_WEBGL"
  ] = 36196] = "RGB_ETC1_WEBGL";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2[
    // etc2
    "R11_EAC"
  ] = 37488] = "R11_EAC";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["SIGNED_R11_EAC"] = 37489] = "SIGNED_R11_EAC";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RG11_EAC"] = 37490] = "RG11_EAC";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["SIGNED_RG11_EAC"] = 37491] = "SIGNED_RG11_EAC";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGB8_ETC2"] = 37492] = "RGB8_ETC2";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["SRGB8_ETC2"] = 37493] = "SRGB8_ETC2";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = 37494] = "RGB8_PUNCHTHROUGH_ALPHA1_ETC2";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = 37495] = "SRGB8_PUNCHTHROUGH_ALPHA1_ETC2";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGBA8_ETC2_EAC"] = 37496] = "RGBA8_ETC2_EAC";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["SRGB8_ALPHA8_ETC2_EAC"] = 37497] = "SRGB8_ALPHA8_ETC2_EAC";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2[
    // pvrtc
    "RGB_PVRTC_4BPPV1_IMG"
  ] = 35840] = "RGB_PVRTC_4BPPV1_IMG";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGB_PVRTC_2BPPV1_IMG"] = 35841] = "RGB_PVRTC_2BPPV1_IMG";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGBA_PVRTC_4BPPV1_IMG"] = 35842] = "RGBA_PVRTC_4BPPV1_IMG";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGBA_PVRTC_2BPPV1_IMG"] = 35843] = "RGBA_PVRTC_2BPPV1_IMG";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2[
    // s3tc
    "RGB_S3TC_DXT1_EXT"
  ] = 33776] = "RGB_S3TC_DXT1_EXT";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGBA_S3TC_DXT1_EXT"] = 33777] = "RGBA_S3TC_DXT1_EXT";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGBA_S3TC_DXT3_EXT"] = 33778] = "RGBA_S3TC_DXT3_EXT";
  GLCompressedTextureInternalFormat2[GLCompressedTextureInternalFormat2["RGBA_S3TC_DXT5_EXT"] = 33779] = "RGBA_S3TC_DXT5_EXT";
})(GLCompressedTextureInternalFormat || (GLCompressedTextureInternalFormat = {}));
function _defineProperties4(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _create_class4(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties4(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties4(Constructor, staticProps);
  return Constructor;
}
function _instanceof2(left, right) {
  if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
    return !!right[Symbol.hasInstance](left);
  } else
    return left instanceof right;
}
var WebCanvas = function() {
  function WebCanvas2(webCanvas) {
    this._scale = new Vector2();
    var width = webCanvas.width;
    var height = webCanvas.height;
    this._webCanvas = webCanvas;
    this._width = width;
    this._height = height;
  }
  var _proto = WebCanvas2.prototype;
  _proto.resizeByClientSize = function resizeByClientSize(pixelRatio) {
    if (pixelRatio === void 0)
      pixelRatio = window.devicePixelRatio;
    var webCanvas = this._webCanvas;
    if (typeof OffscreenCanvas === "undefined" || !_instanceof2(webCanvas, OffscreenCanvas)) {
      this.width = webCanvas.clientWidth * pixelRatio;
      this.height = webCanvas.clientHeight * pixelRatio;
    }
  };
  _proto.setScale = function setScale(x, y) {
    this._scale.set(x, y);
    this.scale = this._scale;
  };
  _create_class4(WebCanvas2, [
    {
      key: "width",
      get: (
        /**
        * @inheritdoc
        */
        function get() {
          return this._width;
        }
      ),
      set: function set(value) {
        if (this._width !== value) {
          this._webCanvas.width = value;
          this._width = value;
        }
      }
    },
    {
      key: "height",
      get: (
        /**
        * @inheritdoc
        */
        function get() {
          return this._height;
        }
      ),
      set: function set(value) {
        if (this._height !== value) {
          this._webCanvas.height = value;
          this._height = value;
        }
      }
    },
    {
      key: "scale",
      get: (
        /**
        * The scale of canvas, the value is visible width/height divide the render width/height.
        * @remarks Need to re-assign after modification to ensure that the modification takes effect.
        */
        function get() {
          var webCanvas = this._webCanvas;
          if (typeof OffscreenCanvas === "undefined" || !_instanceof2(webCanvas, OffscreenCanvas)) {
            this._scale.set(webCanvas.clientWidth * devicePixelRatio / webCanvas.width, webCanvas.clientHeight * devicePixelRatio / webCanvas.height);
          }
          return this._scale;
        }
      ),
      set: function set(value) {
        var webCanvas = this._webCanvas;
        if (typeof OffscreenCanvas === "undefined" || !_instanceof2(webCanvas, OffscreenCanvas)) {
          webCanvas.style.transformOrigin = "left top";
          webCanvas.style.transform = "scale(" + value.x + ", " + value.y + ")";
        }
      }
    }
  ]);
  return WebCanvas2;
}();
function _set_prototype_of2(o, p) {
  _set_prototype_of2 = Object.setPrototypeOf || function setPrototypeOf(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _set_prototype_of2(o, p);
}
function _inherits2(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _set_prototype_of2(subClass, superClass);
}
function _extends2() {
  _extends2 = Object.assign || function assign(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source)
        if (Object.prototype.hasOwnProperty.call(source, key))
          target[key] = source[key];
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
var GLCapability = function() {
  function GLCapability2(rhi) {
    this._rhi = rhi;
    this.capabilityList = /* @__PURE__ */ new Map();
    this._init();
    this._compatibleAllInterface();
  }
  var _proto = GLCapability2.prototype;
  _proto.canIUse = function canIUse(capabilityType) {
    return this.capabilityList.get(capabilityType);
  };
  _proto.canIUseCompressedTextureInternalFormat = function canIUseCompressedTextureInternalFormat(internalType) {
    var RGBA_ASTC_4X4_KHR = GLCompressedTextureInternalFormat.RGBA_ASTC_4X4_KHR, RGBA_ASTC_12X12_KHR = GLCompressedTextureInternalFormat.RGBA_ASTC_12X12_KHR, SRGB8_ALPHA8_ASTC_4X4_KHR = GLCompressedTextureInternalFormat.SRGB8_ALPHA8_ASTC_4X4_KHR, SRGB8_ALPHA8_ASTC_12X12_KHR = GLCompressedTextureInternalFormat.SRGB8_ALPHA8_ASTC_12X12_KHR, RGB_ETC1_WEBGL = GLCompressedTextureInternalFormat.RGB_ETC1_WEBGL, R11_EAC = GLCompressedTextureInternalFormat.R11_EAC, SRGB8_ALPHA8_ETC2_EAC = GLCompressedTextureInternalFormat.SRGB8_ALPHA8_ETC2_EAC, RGB_PVRTC_4BPPV1_IMG = GLCompressedTextureInternalFormat.RGB_PVRTC_4BPPV1_IMG, RGBA_PVRTC_2BPPV1_IMG = GLCompressedTextureInternalFormat.RGBA_PVRTC_2BPPV1_IMG, RGB_S3TC_DXT1_EXT = GLCompressedTextureInternalFormat.RGB_S3TC_DXT1_EXT, RGBA_S3TC_DXT5_EXT = GLCompressedTextureInternalFormat.RGBA_S3TC_DXT5_EXT;
    if (internalType >= RGBA_ASTC_4X4_KHR && RGBA_ASTC_12X12_KHR <= RGBA_ASTC_12X12_KHR || internalType >= SRGB8_ALPHA8_ASTC_4X4_KHR && internalType <= SRGB8_ALPHA8_ASTC_12X12_KHR) {
      return this.canIUse(GLCapabilityType.astc);
    } else if (internalType === RGB_ETC1_WEBGL) {
      return this.canIUse(GLCapabilityType.etc1);
    } else if (internalType >= R11_EAC && internalType <= SRGB8_ALPHA8_ETC2_EAC) {
      return this.canIUse(GLCapabilityType.etc);
    } else if (internalType >= RGB_PVRTC_4BPPV1_IMG && internalType <= RGBA_PVRTC_2BPPV1_IMG) {
      return this.canIUse(GLCapabilityType.pvrtc);
    } else if (internalType >= RGB_S3TC_DXT1_EXT && internalType <= RGBA_S3TC_DXT5_EXT) {
      return this.canIUse(GLCapabilityType.s3tc);
    }
    return false;
  };
  _proto._init = function _init() {
    var cap = this.capabilityList;
    var isWebGL2 = this.rhi.isWebGL2;
    var requireExtension = this.rhi.requireExtension.bind(this.rhi);
    var shaderVertexID = GLCapabilityType.shaderVertexID, standardDerivatives = GLCapabilityType.standardDerivatives, shaderTextureLod = GLCapabilityType.shaderTextureLod, elementIndexUint = GLCapabilityType.elementIndexUint, depthTexture = GLCapabilityType.depthTexture, vertexArrayObject = GLCapabilityType.vertexArrayObject, instancedArrays = GLCapabilityType.instancedArrays, multipleSample = GLCapabilityType.multipleSample, drawBuffers = GLCapabilityType.drawBuffers, astc = GLCapabilityType.astc, astc_webkit = GLCapabilityType.astc_webkit, etc = GLCapabilityType.etc, etc_webkit = GLCapabilityType.etc_webkit, etc1 = GLCapabilityType.etc1, etc1_webkit = GLCapabilityType.etc1_webkit, pvrtc = GLCapabilityType.pvrtc, pvrtc_webkit = GLCapabilityType.pvrtc_webkit, s3tc = GLCapabilityType.s3tc, s3tc_webkit = GLCapabilityType.s3tc_webkit, textureFloat = GLCapabilityType.textureFloat, textureHalfFloat = GLCapabilityType.textureHalfFloat, textureFloatLinear = GLCapabilityType.textureFloatLinear, textureHalfFloatLinear = GLCapabilityType.textureHalfFloatLinear, WEBGL_colorBufferFloat = GLCapabilityType.WEBGL_colorBufferFloat, colorBufferFloat = GLCapabilityType.colorBufferFloat, colorBufferHalfFloat = GLCapabilityType.colorBufferHalfFloat, textureFilterAnisotropic = GLCapabilityType.textureFilterAnisotropic;
    cap.set(shaderVertexID, isWebGL2);
    cap.set(standardDerivatives, isWebGL2 || !!requireExtension(standardDerivatives));
    cap.set(shaderTextureLod, isWebGL2 || !!requireExtension(shaderTextureLod));
    cap.set(elementIndexUint, isWebGL2 || !!requireExtension(elementIndexUint));
    cap.set(depthTexture, isWebGL2 || !!requireExtension(depthTexture));
    cap.set(vertexArrayObject, isWebGL2 || !!requireExtension(vertexArrayObject));
    cap.set(instancedArrays, isWebGL2 || !!requireExtension(instancedArrays));
    cap.set(multipleSample, isWebGL2);
    cap.set(drawBuffers, isWebGL2 || !!requireExtension(drawBuffers));
    cap.set(textureFloat, isWebGL2 || !!requireExtension(textureFloat));
    cap.set(textureHalfFloat, isWebGL2 || !!requireExtension(textureHalfFloat));
    cap.set(textureFloatLinear, !!requireExtension(textureFloatLinear));
    cap.set(textureHalfFloatLinear, isWebGL2 || !!requireExtension(textureHalfFloatLinear));
    cap.set(colorBufferFloat, isWebGL2 && !!requireExtension(colorBufferFloat) || !!requireExtension(WEBGL_colorBufferFloat));
    cap.set(colorBufferHalfFloat, isWebGL2 && !!requireExtension(colorBufferFloat) || !!requireExtension(colorBufferHalfFloat));
    cap.set(textureFilterAnisotropic, !!requireExtension(textureFilterAnisotropic));
    cap.set(astc, !!(requireExtension(astc) || requireExtension(astc_webkit)));
    cap.set(etc, !!(requireExtension(etc) || requireExtension(etc_webkit)));
    cap.set(etc1, !!(requireExtension(etc1) || requireExtension(etc1_webkit)));
    cap.set(pvrtc, !!(requireExtension(pvrtc) || requireExtension(pvrtc_webkit)));
    cap.set(s3tc, !!(requireExtension(s3tc) || requireExtension(s3tc_webkit)));
  };
  _proto._compatibleInterface = function _compatibleInterface(capabilityType, flatItem) {
    var rhi = this.rhi;
    var gl = rhi.gl;
    var ext = null;
    if (ext = rhi.requireExtension(capabilityType)) {
      for (var glKey in flatItem) {
        var extensionKey = flatItem[glKey];
        var extensionVal = ext[extensionKey];
        if (extensionVal == null ? void 0 : extensionVal.bind) {
          gl[glKey] = extensionVal.bind(ext);
        } else {
          gl[glKey] = extensionVal;
        }
      }
    }
  };
  _proto._compatibleAllInterface = function _compatibleAllInterface() {
    var depthTexture = GLCapabilityType.depthTexture, vertexArrayObject = GLCapabilityType.vertexArrayObject, instancedArrays = GLCapabilityType.instancedArrays, drawBuffers = GLCapabilityType.drawBuffers, textureFilterAnisotropic = GLCapabilityType.textureFilterAnisotropic, textureHalfFloat = GLCapabilityType.textureHalfFloat, colorBufferHalfFloat = GLCapabilityType.colorBufferHalfFloat, WEBGL_colorBufferFloat = GLCapabilityType.WEBGL_colorBufferFloat;
    var isWebGL2 = this.rhi.isWebGL2;
    if (!isWebGL2) {
      this._compatibleInterface(depthTexture, {
        UNSIGNED_INT_24_8: "UNSIGNED_INT_24_8_WEBGL"
      });
      this._compatibleInterface(vertexArrayObject, {
        createVertexArray: "createVertexArrayOES",
        deleteVertexArray: "deleteVertexArrayOES",
        isVertexArray: "isVertexArrayOES",
        bindVertexArray: "bindVertexArrayOES"
      });
      this._compatibleInterface(instancedArrays, {
        drawArraysInstanced: "drawArraysInstancedANGLE",
        drawElementsInstanced: "drawElementsInstancedANGLE",
        vertexAttribDivisor: "vertexAttribDivisorANGLE"
      });
      this._compatibleInterface(drawBuffers, {
        MAX_DRAW_BUFFERS: "MAX_DRAW_BUFFERS_WEBGL"
      });
      var items = {};
      if (this.canIUse(GLCapabilityType.drawBuffers)) {
        var maxDrawBuffers = this.maxDrawBuffers;
        for (var i = 0; i < maxDrawBuffers; i++) {
          i != 0 && (items["COLOR_ATTACHMENT" + i] = "COLOR_ATTACHMENT" + i + "_WEBGL");
          items["DRAW_BUFFER" + i] = "DRAW_BUFFER" + i + "_WEBGL";
        }
        this._compatibleInterface(drawBuffers, _extends2({
          drawBuffers: "drawBuffersWEBGL"
        }, items));
      }
      this._compatibleInterface(textureHalfFloat, {
        HALF_FLOAT: "HALF_FLOAT_OES"
      });
      this._compatibleInterface(colorBufferHalfFloat, {
        RGBA16F: "RBGA16F_EXT"
      });
      this._compatibleInterface(WEBGL_colorBufferFloat, {
        RGBA32F: "RBGA32F_EXT"
      });
    }
    this._compatibleInterface(textureFilterAnisotropic, {
      TEXTURE_MAX_ANISOTROPY_EXT: "TEXTURE_MAX_ANISOTROPY_EXT"
    });
  };
  _create_class4(GLCapability2, [
    {
      key: "maxTextureSize",
      get: function get() {
        return this.rhi.renderStates.getParameter(this.rhi.gl.MAX_TEXTURE_SIZE);
      }
    },
    {
      key: "canUseFloatTextureBlendShape",
      get: function get() {
        return this.canIUse(GLCapabilityType.shaderVertexID) && this.canIUse(GLCapabilityType.textureFloat) && this.rhi.renderStates.getParameter(this.rhi.gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS) > 0;
      }
    },
    {
      key: "canIUseMoreJoints",
      get: (
        /**
        * Whether can use more joints.
        */
        function get() {
          return this.canIUse(GLCapabilityType.textureFloat) && this.rhi.renderStates.getParameter(this.rhi.gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS) > 0;
        }
      )
    },
    {
      key: "maxDrawBuffers",
      get: function get() {
        if (!this._maxDrawBuffers) {
          if (this.canIUse(GLCapabilityType.drawBuffers)) {
            this._maxDrawBuffers = this._rhi.gl.getParameter(this._rhi.gl.MAX_DRAW_BUFFERS);
          } else {
            this._maxDrawBuffers = 1;
          }
        }
        return this._maxDrawBuffers;
      }
    },
    {
      key: "maxAnisoLevel",
      get: (
        /**
        * Max anisoLevel.
        */
        function get() {
          if (!this._maxAnisoLevel) {
            var ext = this._rhi.requireExtension(GLCapabilityType.textureFilterAnisotropic);
            this._maxAnisoLevel = ext ? this._rhi.gl.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1;
          }
          return this._maxAnisoLevel;
        }
      )
    },
    {
      key: "maxAntiAliasing",
      get: (
        /**
        * Max MSAA count.
        */
        function get() {
          if (!this._maxAntiAliasing) {
            var gl = this._rhi.gl;
            var canMSAA = this.canIUse(GLCapabilityType.multipleSample);
            this._maxAntiAliasing = canMSAA ? gl.getParameter(gl.MAX_SAMPLES) : 1;
          }
          return this._maxAntiAliasing;
        }
      )
    },
    {
      key: "rhi",
      get: function get() {
        return this._rhi;
      }
    }
  ]);
  return GLCapability2;
}();
var GLExtensions = function() {
  function GLExtensions2(rhi) {
    this.rhi = rhi;
    this._requireResult = {};
  }
  var _proto = GLExtensions2.prototype;
  _proto.requireExtension = function requireExtension(ext) {
    if (this._requireResult[ext] !== void 0) {
      return this._requireResult[ext];
    }
    this._requireResult[ext] = this.rhi.gl.getExtension(ext);
    return this._requireResult[ext];
  };
  return GLExtensions2;
}();
var GLPrimitive = function() {
  function GLPrimitive2(rhi, primitive) {
    this._attribLocArray = [];
    this._vaoMap = /* @__PURE__ */ new Map();
    this._primitive = primitive;
    this._canUseInstancedArrays = rhi.canIUse(GLCapabilityType.instancedArrays);
    this._useVao = rhi.canIUse(GLCapabilityType.vertexArrayObject);
    this._gl = rhi.gl;
  }
  var _proto = GLPrimitive2.prototype;
  _proto.draw = function draw(shaderProgram, subMesh) {
    var gl = this._gl;
    var primitive = this._primitive;
    var useVao = this._useVao && primitive._enableVAO;
    if (useVao) {
      if (primitive._bufferStructChanged) {
        this._clearVAO();
      }
      if (!this._vaoMap.has(shaderProgram.id)) {
        this._registerVAO(shaderProgram);
      }
      var vao = this._vaoMap.get(shaderProgram.id);
      gl.bindVertexArray(vao);
    } else {
      this._bindBufferAndAttrib(shaderProgram);
    }
    var _indexBufferBinding = primitive._indexBufferBinding, _instanceCount = primitive._instanceCount, _glIndexType = primitive._glIndexType, _glIndexByteCount = primitive._glIndexByteCount;
    var topology = subMesh.topology, start = subMesh.start, count = subMesh.count;
    if (!_instanceCount) {
      if (_indexBufferBinding) {
        if (useVao) {
          gl.drawElements(topology, count, _glIndexType, start * _glIndexByteCount);
        } else {
          var _nativeBuffer = _indexBufferBinding.buffer._nativeBuffer;
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _nativeBuffer);
          gl.drawElements(topology, count, _glIndexType, start * _glIndexByteCount);
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
        }
      } else {
        gl.drawArrays(topology, start, count);
      }
    } else {
      if (this._canUseInstancedArrays) {
        if (_indexBufferBinding) {
          if (useVao) {
            gl.drawElementsInstanced(topology, count, _glIndexType, start * _glIndexByteCount, _instanceCount);
          } else {
            var _nativeBuffer1 = _indexBufferBinding.buffer._nativeBuffer;
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _nativeBuffer1);
            gl.drawElementsInstanced(topology, count, _glIndexType, start * _glIndexByteCount, _instanceCount);
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
          }
        } else {
          gl.drawArraysInstanced(topology, start, count, _instanceCount);
        }
      } else {
        Logger.error("ANGLE_instanced_arrays extension is not supported");
      }
    }
    if (useVao) {
      gl.bindVertexArray(null);
    } else {
      this._disableAttrib();
    }
  };
  _proto.destroy = function destroy() {
    this._useVao && this._clearVAO();
  };
  _proto._bindBufferAndAttrib = function _bindBufferAndAttrib(shaderProgram) {
    var gl = this._gl;
    var primitive = this._primitive;
    var vertexBufferBindings = primitive._vertexBufferBindings;
    this._attribLocArray.length = 0;
    var attributeLocation = shaderProgram.attributeLocation;
    var attributes = primitive._vertexElementMap;
    var vbo;
    var lastBoundVbo;
    for (var name in attributeLocation) {
      var loc = attributeLocation[name];
      if (loc === -1)
        continue;
      var element = attributes[name];
      if (element) {
        var _vertexBufferBindings_element_bindingIndex = vertexBufferBindings[element.bindingIndex], buffer = _vertexBufferBindings_element_bindingIndex.buffer, stride = _vertexBufferBindings_element_bindingIndex.stride;
        vbo = buffer._nativeBuffer;
        if (lastBoundVbo !== vbo) {
          lastBoundVbo = vbo;
          gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
        }
        gl.enableVertexAttribArray(loc);
        var elementInfo = element._glElementInfo;
        gl.vertexAttribPointer(loc, elementInfo.size, elementInfo.type, elementInfo.normalized, stride, element.offset);
        if (this._canUseInstancedArrays) {
          gl.vertexAttribDivisor(loc, element.instanceStepRate);
        }
        this._attribLocArray.push(loc);
      } else {
        Logger.warn("vertex attribute not found: " + name);
      }
    }
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
  };
  _proto._disableAttrib = function _disableAttrib() {
    var gl = this._gl;
    for (var i = 0, l = this._attribLocArray.length; i < l; i++) {
      gl.disableVertexAttribArray(this._attribLocArray[i]);
    }
  };
  _proto._registerVAO = function _registerVAO(shaderProgram) {
    var gl = this._gl;
    var vao = gl.createVertexArray();
    gl.bindVertexArray(vao);
    var _indexBufferBinding = this._primitive._indexBufferBinding;
    if (_indexBufferBinding) {
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _indexBufferBinding.buffer._nativeBuffer);
    }
    this._bindBufferAndAttrib(shaderProgram);
    gl.bindVertexArray(null);
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
    this._disableAttrib();
    this._vaoMap.set(shaderProgram.id, vao);
  };
  _proto._clearVAO = function _clearVAO() {
    var gl = this._gl;
    this._vaoMap.forEach(function(vao) {
      gl.deleteVertexArray(vao);
    });
    this._vaoMap.clear();
  };
  return GLPrimitive2;
}();
var GLRenderStates = function() {
  function GLRenderStates2(gl) {
    this._parameters = {};
    this._gl = gl;
    this._parameters = {};
    this._parameters[gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS] = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
    this._parameters[gl.MAX_VERTEX_UNIFORM_VECTORS] = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
    this._parameters[gl.MAX_VERTEX_ATTRIBS] = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
    this._parameters[gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS] = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
    this._parameters[gl.MAX_TEXTURE_SIZE] = gl.getParameter(gl.MAX_TEXTURE_SIZE);
    gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);
    gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
    gl.colorMask(true, true, true, true);
    gl.blendColor(0, 0, 0, 0);
    gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
    gl.enable(gl.DEPTH_TEST);
    gl.depthFunc(gl.LESS);
    gl.depthMask(true);
    gl.disable(gl.STENCIL_TEST);
    gl.stencilFuncSeparate(gl.FRONT, gl.ALWAYS, 0, 255);
    gl.stencilFuncSeparate(gl.BACK, gl.ALWAYS, 0, 255);
    gl.stencilOpSeparate(gl.FRONT, gl.KEEP, gl.KEEP, gl.KEEP);
    gl.stencilOpSeparate(gl.BACK, gl.KEEP, gl.KEEP, gl.KEEP);
    gl.stencilMask(255);
    gl.enable(gl.CULL_FACE);
    gl.cullFace(gl.BACK);
    gl.disable(gl.POLYGON_OFFSET_FILL);
    gl.polygonOffset(0, 0);
  }
  var _proto = GLRenderStates2.prototype;
  _proto.getParameter = function getParameter(pname) {
    return this._parameters[pname];
  };
  return GLRenderStates2;
}();
var GLTexture = function() {
  function GLTexture2(rhi, texture, target) {
    this._texture = texture;
    this._rhi = rhi;
    this._gl = rhi.gl;
    this._isWebGL2 = rhi.isWebGL2;
    this._target = target;
    this._glTexture = this._gl.createTexture();
  }
  var _proto = GLTexture2.prototype;
  _proto.destroy = function destroy() {
    this._gl.deleteTexture(this._glTexture);
    this._texture = null;
    this._glTexture = null;
    this._formatDetail = null;
  };
  _proto.setUseDepthCompareMode = function setUseDepthCompareMode(value) {
    var gl = this._gl;
    gl.texParameteri(this._target, gl.TEXTURE_COMPARE_MODE, value ? gl.COMPARE_REF_TO_TEXTURE : gl.NONE);
  };
  _proto.generateMipmaps = function generateMipmaps() {
    if (this._texture.width !== 1 || this._texture.height !== 1) {
      this._bind();
      this._gl.generateMipmap(this._target);
    }
  };
  _proto._bind = function _bind() {
    this._rhi.bindTexture(this);
  };
  _proto._init = function _init(isCube) {
    var gl = this._gl;
    var isWebGL2 = this._isWebGL2;
    var _this__formatDetail = this._formatDetail, internalFormat = _this__formatDetail.internalFormat, baseFormat = _this__formatDetail.baseFormat, dataType = _this__formatDetail.dataType;
    var _this__texture = this._texture, mipmapCount = _this__texture.mipmapCount, width = _this__texture.width, height = _this__texture.height, _isDepthTexture = _this__texture._isDepthTexture;
    this._bind();
    if (isWebGL2 && !(baseFormat === gl.LUMINANCE_ALPHA || baseFormat === gl.ALPHA)) {
      gl.texStorage2D(this._target, mipmapCount, internalFormat, width, height);
    } else {
      if (!isCube) {
        if (_isDepthTexture) {
          gl.texImage2D(this._target, 0, internalFormat, width, height, 0, baseFormat, dataType, null);
        } else {
          for (var i = 0; i < mipmapCount; i++) {
            var mipWidth = Math.max(1, width >> i);
            var mipHeight = Math.max(1, height >> i);
            gl.texImage2D(this._target, i, internalFormat, mipWidth, mipHeight, 0, baseFormat, dataType, null);
          }
        }
      } else {
        for (var i1 = 0; i1 < mipmapCount; i1++) {
          var size = Math.max(1, width >> i1);
          for (var faceIndex = 0; faceIndex < 6; faceIndex++) {
            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, i1, internalFormat, size, size, 0, baseFormat, dataType, null);
          }
        }
      }
    }
  };
  _proto._getPixelBuffer = function _getPixelBuffer(face, x, y, width, height, mipLevel, out) {
    var gl = this._gl;
    var _this__formatDetail = this._formatDetail, baseFormat = _this__formatDetail.baseFormat, dataType = _this__formatDetail.dataType;
    gl.bindFramebuffer(gl.FRAMEBUFFER, this._getReadFrameBuffer());
    if (mipLevel > 0 && !this._isWebGL2) {
      mipLevel = 0;
      Logger.error("mipLevel only take effect in WebGL2.0");
    }
    if (face != null) {
      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, this._glTexture, mipLevel);
    } else {
      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._glTexture, mipLevel);
    }
    gl.readPixels(x, y, width, height, baseFormat, dataType, out);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  };
  _proto._setWrapMode = function _setWrapMode(value, pname) {
    var gl = this._gl;
    var isWebGL2 = this._isWebGL2;
    var target = this._target;
    var _this__texture = this._texture, width = _this__texture.width, height = _this__texture.height;
    if (!isWebGL2 && value !== TextureWrapMode.Clamp && (!GLTexture2._isPowerOf2(width) || !GLTexture2._isPowerOf2(height))) {
      Logger.warn("non-power-2 texture is not supported for REPEAT or MIRRORED_REPEAT in WebGL1,and has automatically downgraded to CLAMP_TO_EDGE");
      value = TextureWrapMode.Clamp;
    }
    switch (value) {
      case TextureWrapMode.Clamp:
        gl.texParameteri(target, pname, gl.CLAMP_TO_EDGE);
        break;
      case TextureWrapMode.Repeat:
        gl.texParameteri(target, pname, gl.REPEAT);
        break;
      case TextureWrapMode.Mirror:
        gl.texParameteri(target, pname, gl.MIRRORED_REPEAT);
        break;
    }
  };
  _proto._getReadFrameBuffer = function _getReadFrameBuffer() {
    var frameBuffer = this._rhi._readFrameBuffer;
    if (!frameBuffer) {
      this._rhi._readFrameBuffer = frameBuffer = this._gl.createFramebuffer();
    }
    return frameBuffer;
  };
  GLTexture2._isPowerOf2 = function _isPowerOf2(v) {
    return (v & v - 1) === 0;
  };
  GLTexture2._getFormatDetail = function _getFormatDetail(format, gl, isWebGL2) {
    switch (format) {
      case TextureFormat.R8G8B8:
        return {
          internalFormat: isWebGL2 ? gl.RGB8 : gl.RGB,
          baseFormat: gl.RGB,
          dataType: gl.UNSIGNED_BYTE,
          isCompressed: false
        };
      case TextureFormat.R8G8B8A8:
        return {
          internalFormat: isWebGL2 ? gl.RGBA8 : gl.RGBA,
          baseFormat: gl.RGBA,
          dataType: gl.UNSIGNED_BYTE,
          isCompressed: false
        };
      case TextureFormat.R4G4B4A4:
        return {
          internalFormat: isWebGL2 ? gl.RGBA4 : gl.RGBA,
          baseFormat: gl.RGBA,
          dataType: gl.UNSIGNED_SHORT_4_4_4_4,
          isCompressed: false
        };
      case TextureFormat.R5G5B5A1:
        return {
          internalFormat: isWebGL2 ? gl.RGB5_A1 : gl.RGBA,
          baseFormat: gl.RGBA,
          dataType: gl.UNSIGNED_SHORT_5_5_5_1,
          isCompressed: false
        };
      case TextureFormat.R5G6B5:
        return {
          internalFormat: isWebGL2 ? gl.RGB565 : gl.RGB,
          baseFormat: gl.RGB,
          dataType: gl.UNSIGNED_SHORT_5_6_5,
          isCompressed: false
        };
      case TextureFormat.Alpha8:
        return {
          internalFormat: gl.ALPHA,
          baseFormat: gl.ALPHA,
          dataType: gl.UNSIGNED_BYTE,
          isCompressed: false
        };
      case TextureFormat.LuminanceAlpha:
        return {
          internalFormat: gl.LUMINANCE_ALPHA,
          baseFormat: gl.LUMINANCE_ALPHA,
          dataType: gl.UNSIGNED_BYTE,
          isCompressed: false
        };
      case TextureFormat.R16G16B16A16:
        return {
          internalFormat: isWebGL2 ? gl.RGBA16F : gl.RGBA,
          baseFormat: gl.RGBA,
          dataType: gl.HALF_FLOAT,
          isCompressed: false
        };
      case TextureFormat.R32G32B32A32:
        return {
          internalFormat: isWebGL2 ? gl.RGBA32F : gl.RGBA,
          baseFormat: gl.RGBA,
          dataType: gl.FLOAT,
          isCompressed: false
        };
      case TextureFormat.DXT1:
        return {
          internalFormat: GLCompressedTextureInternalFormat.RGB_S3TC_DXT1_EXT,
          isCompressed: true
        };
      case TextureFormat.DXT5:
        return {
          internalFormat: GLCompressedTextureInternalFormat.RGBA_S3TC_DXT5_EXT,
          isCompressed: true
        };
      case TextureFormat.ETC1_RGB:
        return {
          internalFormat: GLCompressedTextureInternalFormat.RGB_ETC1_WEBGL,
          isCompressed: true
        };
      case TextureFormat.ETC2_RGB:
        return {
          internalFormat: GLCompressedTextureInternalFormat.RGB8_ETC2,
          isCompressed: true
        };
      case TextureFormat.ETC2_RGBA5:
        return {
          internalFormat: GLCompressedTextureInternalFormat.RGB8_PUNCHTHROUGH_ALPHA1_ETC2,
          isCompressed: true
        };
      case TextureFormat.ETC2_RGBA8:
        return {
          internalFormat: GLCompressedTextureInternalFormat.RGBA8_ETC2_EAC,
          isCompressed: true
        };
      case TextureFormat.PVRTC_RGB2:
        return {
          internalFormat: GLCompressedTextureInternalFormat.RGB_PVRTC_2BPPV1_IMG,
          isCompressed: true
        };
      case TextureFormat.PVRTC_RGBA2:
        return {
          internalFormat: GLCompressedTextureInternalFormat.RGBA_PVRTC_2BPPV1_IMG,
          isCompressed: true
        };
      case TextureFormat.PVRTC_RGB4:
        return {
          internalFormat: GLCompressedTextureInternalFormat.RGB_PVRTC_4BPPV1_IMG,
          isCompressed: true
        };
      case TextureFormat.PVRTC_RGBA4:
        return {
          internalFormat: GLCompressedTextureInternalFormat.RGBA_PVRTC_4BPPV1_IMG,
          isCompressed: true
        };
      case TextureFormat.ASTC_4x4:
        return {
          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_4X4_KHR,
          isCompressed: true
        };
      case TextureFormat.ASTC_5x5:
        return {
          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_5X5_KHR,
          isCompressed: true
        };
      case TextureFormat.ASTC_6x6:
        return {
          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_6X6_KHR,
          isCompressed: true
        };
      case TextureFormat.ASTC_8x8:
        return {
          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_8X8_KHR,
          isCompressed: true
        };
      case TextureFormat.ASTC_10x10:
        return {
          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_10X10_KHR,
          isCompressed: true
        };
      case TextureFormat.ASTC_12x12:
        return {
          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_12X12_KHR,
          isCompressed: true
        };
      case TextureFormat.Depth:
        return {
          internalFormat: isWebGL2 ? gl.DEPTH_COMPONENT32F : gl.DEPTH_COMPONENT,
          baseFormat: gl.DEPTH_COMPONENT,
          dataType: isWebGL2 ? gl.FLOAT : gl.UNSIGNED_SHORT,
          isCompressed: false,
          attachment: gl.DEPTH_ATTACHMENT
        };
      case TextureFormat.DepthStencil:
        return {
          internalFormat: isWebGL2 ? gl.DEPTH32F_STENCIL8 : gl.DEPTH_STENCIL,
          baseFormat: gl.DEPTH_STENCIL,
          dataType: isWebGL2 ? gl.FLOAT_32_UNSIGNED_INT_24_8_REV : gl.UNSIGNED_INT_24_8,
          isCompressed: false,
          attachment: gl.DEPTH_STENCIL_ATTACHMENT
        };
      case TextureFormat.Depth16:
        return {
          internalFormat: isWebGL2 ? gl.DEPTH_COMPONENT16 : gl.DEPTH_COMPONENT,
          baseFormat: gl.DEPTH_COMPONENT,
          dataType: gl.UNSIGNED_SHORT,
          isCompressed: false,
          attachment: gl.DEPTH_ATTACHMENT
        };
      case TextureFormat.Depth24Stencil8:
        return {
          internalFormat: isWebGL2 ? gl.DEPTH24_STENCIL8 : gl.DEPTH_STENCIL,
          baseFormat: gl.DEPTH_STENCIL,
          dataType: gl.UNSIGNED_INT_24_8,
          isCompressed: false,
          attachment: gl.DEPTH_STENCIL_ATTACHMENT
        };
      case TextureFormat.Depth24:
        return {
          internalFormat: gl.DEPTH_COMPONENT24,
          baseFormat: gl.DEPTH_COMPONENT,
          dataType: gl.UNSIGNED_INT,
          isCompressed: false,
          attachment: gl.DEPTH_ATTACHMENT
        };
      case TextureFormat.Depth32:
        return {
          internalFormat: gl.DEPTH_COMPONENT32F,
          baseFormat: gl.DEPTH_COMPONENT,
          dataType: gl.FLOAT,
          isCompressed: false,
          attachment: gl.DEPTH_ATTACHMENT
        };
      case TextureFormat.Depth32Stencil8:
        return {
          internalFormat: gl.DEPTH32F_STENCIL8,
          baseFormat: gl.DEPTH_STENCIL,
          dataType: gl.FLOAT_32_UNSIGNED_INT_24_8_REV,
          isCompressed: false,
          attachment: gl.DEPTH_STENCIL_ATTACHMENT
        };
      default:
        throw new Error("this TextureFormat is not supported in Galacean Engine: " + format);
    }
  };
  GLTexture2._getRenderBufferDepthFormatDetail = function _getRenderBufferDepthFormatDetail(format, gl, isWebGL2) {
    switch (format) {
      case RenderBufferDepthFormat.Depth:
        return {
          internalFormat: isWebGL2 ? gl.DEPTH_COMPONENT32F : gl.DEPTH_COMPONENT16,
          baseFormat: gl.DEPTH_COMPONENT,
          dataType: isWebGL2 ? gl.FLOAT : gl.UNSIGNED_SHORT,
          isCompressed: false,
          attachment: gl.DEPTH_ATTACHMENT
        };
      case RenderBufferDepthFormat.DepthStencil:
        return {
          internalFormat: isWebGL2 ? gl.DEPTH32F_STENCIL8 : gl.DEPTH_STENCIL,
          baseFormat: gl.DEPTH_STENCIL,
          dataType: isWebGL2 ? gl.FLOAT_32_UNSIGNED_INT_24_8_REV : gl.UNSIGNED_INT_24_8,
          isCompressed: false,
          attachment: gl.DEPTH_STENCIL_ATTACHMENT
        };
      case RenderBufferDepthFormat.Stencil:
        return {
          internalFormat: gl.STENCIL_INDEX8,
          baseFormat: gl.STENCIL_ATTACHMENT,
          dataType: gl.UNSIGNED_BYTE,
          isCompressed: false,
          attachment: gl.STENCIL_ATTACHMENT
        };
      case RenderBufferDepthFormat.Depth16:
        return {
          internalFormat: gl.DEPTH_COMPONENT16,
          baseFormat: gl.DEPTH_COMPONENT,
          dataType: gl.UNSIGNED_SHORT,
          isCompressed: false,
          attachment: gl.DEPTH_ATTACHMENT
        };
      case RenderBufferDepthFormat.Depth24Stencil8:
        return {
          internalFormat: isWebGL2 ? gl.DEPTH24_STENCIL8 : gl.DEPTH_STENCIL,
          baseFormat: gl.DEPTH_STENCIL,
          dataType: gl.UNSIGNED_INT_24_8,
          isCompressed: false,
          attachment: gl.DEPTH_STENCIL_ATTACHMENT
        };
      case RenderBufferDepthFormat.Depth24:
        return {
          internalFormat: gl.DEPTH_COMPONENT24,
          baseFormat: gl.DEPTH_COMPONENT,
          dataType: gl.UNSIGNED_INT,
          isCompressed: false,
          attachment: gl.DEPTH_ATTACHMENT
        };
      case RenderBufferDepthFormat.Depth32:
        return {
          internalFormat: gl.DEPTH_COMPONENT32F,
          baseFormat: gl.DEPTH_COMPONENT,
          dataType: gl.FLOAT,
          isCompressed: false,
          attachment: gl.DEPTH_ATTACHMENT
        };
      case RenderBufferDepthFormat.Depth32Stencil8:
        return {
          internalFormat: gl.DEPTH32F_STENCIL8,
          baseFormat: gl.DEPTH_STENCIL,
          dataType: gl.FLOAT_32_UNSIGNED_INT_24_8_REV,
          isCompressed: false,
          attachment: gl.DEPTH_STENCIL_ATTACHMENT
        };
      default:
        throw new Error("this TextureFormat is not supported in Galacean Engine: " + format);
    }
  };
  GLTexture2._supportTextureFormat = function _supportTextureFormat(format, rhi) {
    switch (format) {
      case TextureFormat.R16G16B16A16:
        if (!rhi.canIUse(GLCapabilityType.textureHalfFloat)) {
          return false;
        }
        break;
      case TextureFormat.R32G32B32A32:
        if (!rhi.canIUse(GLCapabilityType.textureFloat)) {
          return false;
        }
        break;
      case TextureFormat.Depth16:
      case TextureFormat.Depth24Stencil8:
      case TextureFormat.Depth:
      case TextureFormat.DepthStencil:
        if (!rhi.canIUse(GLCapabilityType.depthTexture)) {
          return false;
        }
        break;
      case TextureFormat.Depth24:
      case TextureFormat.Depth32:
      case TextureFormat.Depth32Stencil8:
        return rhi.isWebGL2;
    }
    return true;
  };
  GLTexture2._supportRenderBufferColorFormat = function _supportRenderBufferColorFormat(format, rhi) {
    var isSupported = true;
    switch (format) {
      case TextureFormat.R16G16B16A16:
        {
          if (!rhi.canIUse(GLCapabilityType.colorBufferHalfFloat) || !rhi.canIUse(GLCapabilityType.textureHalfFloat)) {
            isSupported = false;
          }
        }
        break;
      case TextureFormat.R32G32B32A32:
        {
          if (!rhi.canIUse(GLCapabilityType.colorBufferFloat) || !rhi.canIUse(GLCapabilityType.textureFloat)) {
            isSupported = false;
          }
        }
        break;
    }
    return isSupported;
  };
  GLTexture2._supportRenderBufferDepthFormat = function _supportRenderBufferDepthFormat(format, rhi) {
    if (!rhi.isWebGL2) {
      switch (format) {
        case RenderBufferDepthFormat.Depth24:
        case RenderBufferDepthFormat.Depth32:
        case RenderBufferDepthFormat.Depth32Stencil8:
          return false;
      }
    }
    return true;
  };
  _create_class4(GLTexture2, [
    {
      key: "wrapModeU",
      set: (
        /**
        * Wrapping mode for texture coordinate S.
        */
        function set(value) {
          this._bind();
          this._setWrapMode(value, this._gl.TEXTURE_WRAP_S);
        }
      )
    },
    {
      key: "wrapModeV",
      set: (
        /**
        * Wrapping mode for texture coordinate T.
        */
        function set(value) {
          this._bind();
          this._setWrapMode(value, this._gl.TEXTURE_WRAP_T);
        }
      )
    },
    {
      key: "filterMode",
      set: (
        /**
        * Filter mode for texture.
        */
        function set(value) {
          var gl = this._gl;
          var target = this._target;
          var _mipmap = this._texture._mipmap;
          this._bind();
          switch (value) {
            case TextureFilterMode.Point:
              gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
              gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, _mipmap ? gl.NEAREST_MIPMAP_NEAREST : gl.NEAREST);
              break;
            case TextureFilterMode.Bilinear:
              gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
              gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, _mipmap ? gl.LINEAR_MIPMAP_NEAREST : gl.LINEAR);
              break;
            case TextureFilterMode.Trilinear:
              gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
              gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, _mipmap ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR);
              break;
          }
        }
      )
    },
    {
      key: "anisoLevel",
      set: (
        /**
        * Anisotropic level for texture.
        */
        function set(value) {
          var gl = this._gl;
          this._bind();
          gl.texParameterf(this._target, gl.TEXTURE_MAX_ANISOTROPY_EXT, value);
        }
      )
    },
    {
      key: "depthCompareFunction",
      set: function set(value) {
        this._bind();
        var gl = this._gl;
        switch (value) {
          case TextureDepthCompareFunction.Never:
            gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.NEVER);
            break;
          case TextureDepthCompareFunction.Less:
            gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.LESS);
            break;
          case TextureDepthCompareFunction.Equal:
            gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.EQUAL);
            break;
          case TextureDepthCompareFunction.LessEqual:
            gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.LEQUAL);
            break;
          case TextureDepthCompareFunction.Greater:
            gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.GREATER);
            break;
          case TextureDepthCompareFunction.NotEqual:
            gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.NOTEQUAL);
            break;
          case TextureDepthCompareFunction.GreaterEqual:
            gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.GEQUAL);
            break;
          case TextureDepthCompareFunction.Always:
            gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.ALWAYS);
            break;
        }
      }
    }
  ]);
  return GLTexture2;
}();
var GLRenderTarget = function() {
  function GLRenderTarget2(rhi, target) {
    this._MSAAColorRenderBuffers = [];
    this._curMipLevel = 0;
    this._gl = rhi.gl;
    this._isWebGL2 = rhi.isWebGL2;
    this._target = target;
    var _colorTextures = target._colorTextures, _depth = target._depth, width = target.width, height = target.height;
    var isDepthTexture = _instanceof2(_depth, Texture);
    for (var i = 0, n = _colorTextures.length; i < n; i++) {
      var format = _colorTextures[i]._format;
      if (!GLTexture._supportRenderBufferColorFormat(format, rhi)) {
        throw new Error("TextureFormat is not supported:" + TextureFormat[format] + " in RenderTarget");
      }
    }
    if (!isDepthTexture && !GLTexture._supportRenderBufferDepthFormat(_depth, rhi)) {
      throw new Error("TextureFormat is not supported:" + TextureFormat[_depth] + " in RenderTarget");
    }
    if (_colorTextures.length > 1 && !rhi.canIUse(GLCapabilityType.drawBuffers)) {
      throw new Error("MRT is not supported");
    }
    if (_colorTextures.some(function(v) {
      return v.width !== width || v.height !== height;
    })) {
      throw new Error("ColorTexture's size must as same as RenderTarget");
    }
    if (isDepthTexture && (_depth.width !== width || _depth.height !== height)) {
      throw new Error("DepthTexture's size must as same as RenderTarget");
    }
    if (_colorTextures.length > 1 && _colorTextures.some(function(v) {
      return _instanceof2(v, TextureCube);
    })) {
      throw new Error("MRT+Cube+[,MSAA] is not supported");
    }
    var maxAntiAliasing = rhi.capability.maxAntiAliasing;
    if (target.antiAliasing > maxAntiAliasing) {
      Logger.warn("MSAA antiAliasing exceeds the limit and is automatically downgraded to:" + maxAntiAliasing);
      target._antiAliasing = maxAntiAliasing;
    }
    this._frameBuffer = this._gl.createFramebuffer();
    this._bindMainFBO();
    if (target.antiAliasing > 1) {
      this._MSAAFrameBuffer = this._gl.createFramebuffer();
      this._bindMSAAFBO();
    }
  }
  var _proto = GLRenderTarget2.prototype;
  _proto.setRenderTargetInfo = function setRenderTargetInfo(faceIndex, mipLevel) {
    var _this = this, gl = _this._gl, target = _this._target;
    var depthTexture = target.depthTexture;
    var colorTexture = target.getColorTexture(0);
    var mipChanged = mipLevel !== this._curMipLevel;
    gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);
    if (colorTexture) {
      var isCube = _instanceof2(colorTexture, TextureCube);
      if (mipChanged || isCube) {
        gl.framebufferTexture2D(
          gl.FRAMEBUFFER,
          gl.COLOR_ATTACHMENT0,
          isCube ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex : gl.TEXTURE_2D,
          // @ts-ignore
          colorTexture._platformTexture._glTexture,
          mipLevel
        );
      }
    }
    if (depthTexture) {
      var isCube1 = _instanceof2(depthTexture, TextureCube);
      if (mipChanged || isCube1) {
        var platformTexture = depthTexture._platformTexture;
        gl.framebufferTexture2D(gl.FRAMEBUFFER, platformTexture._formatDetail.attachment, isCube1 ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex : gl.TEXTURE_2D, platformTexture._glTexture, mipLevel);
      }
    } else {
      if (mipChanged) {
        var internalFormat = GLTexture._getRenderBufferDepthFormatDetail(target._depth, gl, this._isWebGL2).internalFormat;
        gl.bindRenderbuffer(gl.RENDERBUFFER, this._depthRenderBuffer);
        gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, target.width >> mipLevel, target.height >> mipLevel);
      }
    }
    this._curMipLevel = mipLevel;
    this._activeRenderTarget();
  };
  _proto.blitRenderTarget = function blitRenderTarget() {
    if (!this._MSAAFrameBuffer)
      return;
    var gl = this._gl;
    var mask = gl.COLOR_BUFFER_BIT | (this._target.depthTexture ? gl.DEPTH_BUFFER_BIT : 0);
    var _this__target = this._target, colorTextureCount = _this__target.colorTextureCount, width = _this__target.width, height = _this__target.height;
    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this._MSAAFrameBuffer);
    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this._frameBuffer);
    for (var textureIndex = 0; textureIndex < colorTextureCount; textureIndex++) {
      var attachment = gl.COLOR_ATTACHMENT0 + textureIndex;
      this._blitDrawBuffers[textureIndex] = attachment;
      gl.readBuffer(attachment);
      gl.drawBuffers(this._blitDrawBuffers);
      gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, gl.NEAREST);
      this._blitDrawBuffers[textureIndex] = gl.NONE;
    }
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  };
  _proto.destroy = function destroy() {
    var gl = this._gl;
    this._frameBuffer && gl.deleteFramebuffer(this._frameBuffer);
    this._depthRenderBuffer && gl.deleteRenderbuffer(this._depthRenderBuffer);
    this._MSAAFrameBuffer && gl.deleteFramebuffer(this._MSAAFrameBuffer);
    this._MSAADepthRenderBuffer && gl.deleteRenderbuffer(this._MSAADepthRenderBuffer);
    for (var i = 0; i < this._MSAAColorRenderBuffers.length; i++) {
      gl.deleteRenderbuffer(this._MSAAColorRenderBuffers[i]);
    }
    this._frameBuffer = null;
    this._depthRenderBuffer = null;
    this._MSAAFrameBuffer = null;
    this._MSAAColorRenderBuffers.length = 0;
    this._MSAADepthRenderBuffer = null;
  };
  _proto._activeRenderTarget = function _activeRenderTarget() {
    var gl = this._gl;
    if (this._MSAAFrameBuffer) {
      gl.bindFramebuffer(gl.FRAMEBUFFER, this._MSAAFrameBuffer);
    } else {
      gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);
    }
  };
  _proto._bindMainFBO = function _bindMainFBO() {
    var gl = this._gl;
    var isWebGL2 = this._isWebGL2;
    var _this__target = this._target, _depth = _this__target._depth, colorTextureCount = _this__target.colorTextureCount, width = _this__target.width, height = _this__target.height;
    var drawBuffers = new Array(colorTextureCount);
    gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);
    for (var i = 0; i < colorTextureCount; i++) {
      var colorTexture = this._target.getColorTexture(i);
      var attachment = gl.COLOR_ATTACHMENT0 + i;
      drawBuffers[i] = attachment;
      if (!_instanceof2(colorTexture, TextureCube)) {
        gl.framebufferTexture2D(
          gl.FRAMEBUFFER,
          attachment,
          gl.TEXTURE_2D,
          /** @ts-ignore */
          colorTexture._platformTexture._glTexture,
          0
        );
      }
    }
    if (colorTextureCount > 1) {
      gl.drawBuffers(drawBuffers);
    }
    this._oriDrawBuffers = drawBuffers;
    if (_depth !== null) {
      if (_instanceof2(_depth, Texture) && !_instanceof2(_depth, TextureCube)) {
        var platformTexture = _depth._platformTexture;
        gl.framebufferTexture2D(gl.FRAMEBUFFER, platformTexture._formatDetail.attachment, gl.TEXTURE_2D, platformTexture._glTexture, 0);
      } else if (this._target.antiAliasing <= 1) {
        var _GLTexture__getRenderBufferDepthFormatDetail = GLTexture._getRenderBufferDepthFormatDetail(_depth, gl, isWebGL2), internalFormat = _GLTexture__getRenderBufferDepthFormatDetail.internalFormat, attachment1 = _GLTexture__getRenderBufferDepthFormatDetail.attachment;
        var depthRenderBuffer = gl.createRenderbuffer();
        this._depthRenderBuffer = depthRenderBuffer;
        gl.bindRenderbuffer(gl.RENDERBUFFER, depthRenderBuffer);
        gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, width, height);
        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment1, gl.RENDERBUFFER, depthRenderBuffer);
      }
    }
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    gl.bindRenderbuffer(gl.RENDERBUFFER, null);
  };
  _proto._bindMSAAFBO = function _bindMSAAFBO() {
    var gl = this._gl;
    var isWebGL2 = this._isWebGL2;
    var MSAADepthRenderBuffer = gl.createRenderbuffer();
    var _this__target = this._target, _depth = _this__target._depth, colorTextureCount = _this__target.colorTextureCount, antiAliasing = _this__target.antiAliasing, width = _this__target.width, height = _this__target.height;
    this._blitDrawBuffers = new Array(colorTextureCount);
    this._MSAADepthRenderBuffer = MSAADepthRenderBuffer;
    gl.bindFramebuffer(gl.FRAMEBUFFER, this._MSAAFrameBuffer);
    for (var i = 0; i < colorTextureCount; i++) {
      var MSAAColorRenderBuffer = gl.createRenderbuffer();
      this._MSAAColorRenderBuffers[i] = MSAAColorRenderBuffer;
      this._blitDrawBuffers[i] = gl.NONE;
      gl.bindRenderbuffer(gl.RENDERBUFFER, MSAAColorRenderBuffer);
      gl.renderbufferStorageMultisample(
        gl.RENDERBUFFER,
        antiAliasing,
        /** @ts-ignore */
        this._target.getColorTexture(i)._platformTexture._formatDetail.internalFormat,
        width,
        height
      );
      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.RENDERBUFFER, MSAAColorRenderBuffer);
    }
    gl.drawBuffers(this._oriDrawBuffers);
    if (_depth !== null) {
      var _ref = _instanceof2(_depth, Texture) ? (
        /** @ts-ignore */
        _depth._platformTexture._formatDetail
      ) : GLTexture._getRenderBufferDepthFormatDetail(_depth, gl, isWebGL2), internalFormat = _ref.internalFormat, attachment = _ref.attachment;
      gl.bindRenderbuffer(gl.RENDERBUFFER, MSAADepthRenderBuffer);
      gl.renderbufferStorageMultisample(gl.RENDERBUFFER, antiAliasing, internalFormat, width, height);
      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, MSAADepthRenderBuffer);
    }
    this._checkFrameBuffer();
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    gl.bindRenderbuffer(gl.RENDERBUFFER, null);
  };
  _proto._checkFrameBuffer = function _checkFrameBuffer() {
    var gl = this._gl;
    var isWebGL2 = this._isWebGL2;
    var e = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
    switch (e) {
      case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
        throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete");
      case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
        throw new Error("There is no attachment");
      case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
        throw new Error(" Height and width of the attachment are not the same.");
      case gl.FRAMEBUFFER_UNSUPPORTED:
        throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer");
    }
    if (isWebGL2 && e === gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE) {
      throw new Error("The values of gl.RENDERBUFFER_SAMPLES are different among attached renderbuffers, or are non-zero if the attached images are a mix of renderbuffers and textures.");
    }
  };
  return GLRenderTarget2;
}();
var GLTexture2D = function(GLTexture1) {
  _inherits2(GLTexture2D2, GLTexture1);
  function GLTexture2D2(rhi, texture2D) {
    var _this;
    _this = GLTexture1.call(this, rhi, texture2D, rhi.gl.TEXTURE_2D) || this;
    _this._compressedMipFilled = 0;
    var format = texture2D.format, _mipmap = texture2D._mipmap, width = texture2D.width, height = texture2D.height;
    var isWebGL2 = _this._isWebGL2;
    if (!GLTexture._supportTextureFormat(format, rhi)) {
      throw new Error("Texture format is not supported:" + TextureFormat[format]);
    }
    if (_mipmap && !isWebGL2 && (!GLTexture._isPowerOf2(width) || !GLTexture._isPowerOf2(height))) {
      Logger.warn("non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap");
      texture2D._mipmap = false;
      texture2D._mipmapCount = texture2D._getMipmapCount();
    }
    _this._formatDetail = GLTexture._getFormatDetail(format, _this._gl, isWebGL2);
    _this._formatDetail.isCompressed && !isWebGL2 || _this._init(false);
    return _this;
  }
  var _proto = GLTexture2D2.prototype;
  _proto.setPixelBuffer = function setPixelBuffer(colorBuffer, mipLevel, x, y, width, height) {
    if (mipLevel === void 0)
      mipLevel = 0;
    var gl = this._gl;
    var isWebGL2 = this._isWebGL2;
    var _this__formatDetail = this._formatDetail, internalFormat = _this__formatDetail.internalFormat, baseFormat = _this__formatDetail.baseFormat, dataType = _this__formatDetail.dataType, isCompressed = _this__formatDetail.isCompressed;
    var mipWidth = Math.max(1, this._texture.width >> mipLevel);
    var mipHeight = Math.max(1, this._texture.height >> mipLevel);
    width = width || mipWidth - x;
    height = height || mipHeight - y;
    this._bind();
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);
    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);
    if (isCompressed) {
      var mipBit = 1 << mipLevel;
      if (isWebGL2 || this._compressedMipFilled & mipBit) {
        gl.compressedTexSubImage2D(this._target, mipLevel, x, y, width, height, internalFormat, colorBuffer);
      } else {
        gl.compressedTexImage2D(this._target, mipLevel, internalFormat, width, height, 0, colorBuffer);
        this._compressedMipFilled |= mipBit;
      }
    } else {
      gl.texSubImage2D(this._target, mipLevel, x, y, width, height, baseFormat, dataType, colorBuffer);
    }
  };
  _proto.setImageSource = function setImageSource(imageSource, mipLevel, flipY, premultiplyAlpha, x, y) {
    var gl = this._gl;
    var _this__formatDetail = this._formatDetail, baseFormat = _this__formatDetail.baseFormat, dataType = _this__formatDetail.dataType;
    this._bind();
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, +flipY);
    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, +premultiplyAlpha);
    gl.texSubImage2D(this._target, mipLevel, x || 0, y || 0, baseFormat, dataType, imageSource);
  };
  _proto.getPixelBuffer = function getPixelBuffer(x, y, width, height, mipLevel, out) {
    if (this._formatDetail.isCompressed) {
      throw new Error("Unable to read compressed texture");
    }
    GLTexture1.prototype._getPixelBuffer.call(this, null, x, y, width, height, mipLevel, out);
  };
  return GLTexture2D2;
}(GLTexture);
var GLTexture2DArray = function(GLTexture1) {
  _inherits2(GLTexture2DArray2, GLTexture1);
  function GLTexture2DArray2(rhi, texture2DArray) {
    var _this;
    _this = GLTexture1.call(this, rhi, texture2DArray, rhi.gl.TEXTURE_2D_ARRAY) || this;
    var format = texture2DArray.format, width = texture2DArray.width, height = texture2DArray.height, length2 = texture2DArray.length, mipmapCount = texture2DArray.mipmapCount;
    if (!_this._isWebGL2) {
      throw new Error("Texture2D Array is not supported in WebGL1.0");
    }
    if (!GLTexture._supportTextureFormat(format, rhi)) {
      throw new Error("Texture format is not supported:" + TextureFormat[format]);
    }
    _this._bind();
    _this._formatDetail = GLTexture._getFormatDetail(format, _this._gl, true);
    _this._gl.texStorage3D(_this._target, mipmapCount, _this._formatDetail.internalFormat, width, height, length2);
    return _this;
  }
  var _proto = GLTexture2DArray2.prototype;
  _proto.setPixelBuffer = function setPixelBuffer(offsetIndex, colorBuffer, mipLevel, x, y, width, height, length2) {
    var _this = this, target = _this._target, gl = _this._gl;
    var _this__formatDetail = this._formatDetail, internalFormat = _this__formatDetail.internalFormat, baseFormat = _this__formatDetail.baseFormat, dataType = _this__formatDetail.dataType, isCompressed = _this__formatDetail.isCompressed;
    width = width || Math.max(1, this._texture.width >> mipLevel) - x;
    height = height || Math.max(1, this._texture.height >> mipLevel) - y;
    length2 = length2 || this._texture.length;
    this._bind();
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);
    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);
    if (isCompressed) {
      gl.compressedTexSubImage3D(target, mipLevel, x, y, offsetIndex, width, height, length2, internalFormat, colorBuffer);
    } else {
      gl.texSubImage3D(target, mipLevel, x, y, offsetIndex, width, height, length2, baseFormat, dataType, colorBuffer);
    }
  };
  _proto.setImageSource = function setImageSource(elementIndex, imageSource, mipLevel, flipY, premultiplyAlpha, x, y) {
    var gl = this._gl;
    var _this__formatDetail = this._formatDetail, baseFormat = _this__formatDetail.baseFormat, dataType = _this__formatDetail.dataType;
    this._bind();
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, +flipY);
    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, +premultiplyAlpha);
    gl.texSubImage3D(this._target, mipLevel, x, y, elementIndex, imageSource.width, imageSource.height, 1, baseFormat, dataType, imageSource);
  };
  _proto.getPixelBuffer = function getPixelBuffer(elementIndex, x, y, width, height, mipLevel, out) {
    var _this = this, gl = _this._gl, formatDetail = _this._formatDetail;
    if (formatDetail.isCompressed) {
      throw new Error("Unable to read compressed texture");
    }
    gl.bindFramebuffer(gl.FRAMEBUFFER, this._getReadFrameBuffer());
    gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, this._glTexture, mipLevel, elementIndex);
    gl.readPixels(x, y, width, height, formatDetail.baseFormat, formatDetail.dataType, out);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  };
  return GLTexture2DArray2;
}(GLTexture);
var GLTextureCube = function(GLTexture1) {
  _inherits2(GLTextureCube2, GLTexture1);
  function GLTextureCube2(rhi, textureCube) {
    var _this;
    _this = GLTexture1.call(this, rhi, textureCube, rhi.gl.TEXTURE_CUBE_MAP) || this;
    _this._compressedFaceFilled = [
      0,
      0,
      0,
      0,
      0,
      0
    ];
    var format = textureCube.format, _mipmap = textureCube._mipmap, size = textureCube.width;
    var isWebGL2 = _this._isWebGL2;
    if (!GLTexture._supportTextureFormat(format, rhi)) {
      throw new Error("Texture format is not supported:" + TextureFormat[format]);
    }
    if (_mipmap && !isWebGL2 && !GLTexture._isPowerOf2(size)) {
      Logger.warn("non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap");
      textureCube._mipmap = false;
      textureCube._mipmapCount = textureCube._getMipmapCount();
    }
    _this._formatDetail = GLTexture._getFormatDetail(format, _this._gl, isWebGL2);
    _this._formatDetail.isCompressed && !isWebGL2 || _this._init(true);
    return _this;
  }
  var _proto = GLTextureCube2.prototype;
  _proto.setPixelBuffer = function setPixelBuffer(face, colorBuffer, mipLevel, x, y, width, height) {
    var gl = this._gl;
    var isWebGL2 = this._isWebGL2;
    var _this__formatDetail = this._formatDetail, internalFormat = _this__formatDetail.internalFormat, baseFormat = _this__formatDetail.baseFormat, dataType = _this__formatDetail.dataType, isCompressed = _this__formatDetail.isCompressed;
    var mipSize = Math.max(1, this._texture.width >> mipLevel);
    width = width || mipSize - x;
    height = height || mipSize - y;
    this._bind();
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);
    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);
    if (isCompressed) {
      var mipBit = 1 << mipLevel;
      if (isWebGL2 || this._compressedFaceFilled[face] & mipBit) {
        gl.compressedTexSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, mipLevel, x, y, width, height, internalFormat, colorBuffer);
      } else {
        gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, mipLevel, internalFormat, width, height, 0, colorBuffer);
        this._compressedFaceFilled[face] |= mipBit;
      }
    } else {
      gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, mipLevel, x, y, width, height, baseFormat, dataType, colorBuffer);
    }
  };
  _proto.setImageSource = function setImageSource(face, imageSource, mipLevel, flipY, premultiplyAlpha, x, y) {
    var gl = this._gl;
    var _this__formatDetail = this._formatDetail, baseFormat = _this__formatDetail.baseFormat, dataType = _this__formatDetail.dataType;
    this._bind();
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, +flipY);
    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, +premultiplyAlpha);
    gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, mipLevel, x || 0, y || 0, baseFormat, dataType, imageSource);
  };
  _proto.getPixelBuffer = function getPixelBuffer(face, x, y, width, height, mipLevel, out) {
    if (this._formatDetail.isCompressed) {
      throw new Error("Unable to read compressed texture");
    }
    GLTexture1.prototype._getPixelBuffer.call(this, face, x, y, width, height, mipLevel, out);
  };
  return GLTextureCube2;
}(GLTexture);
var WebGLMode;
(function(WebGLMode2) {
  WebGLMode2[WebGLMode2[
    /** Auto, use WebGL2.0 if support, or will fallback to WebGL1.0. */
    "Auto"
  ] = 0] = "Auto";
  WebGLMode2[WebGLMode2[
    /** WebGL2.0. */
    "WebGL2"
  ] = 1] = "WebGL2";
  WebGLMode2[WebGLMode2[
    /** WebGL1.0, */
    "WebGL1"
  ] = 2] = "WebGL1";
})(WebGLMode || (WebGLMode = {}));
var WebGLRenderer = function() {
  function WebGLRenderer2(initializeOptions) {
    if (initializeOptions === void 0)
      initializeOptions = {};
    this._enableGlobalDepthBias = false;
    this._activeTextures = new Array(32);
    this._lastViewport = new Vector4(null, null, null, null);
    this._lastScissor = new Vector4(null, null, null, null);
    this._lastClearColor = new Color(null, null, null, null);
    this._scissorEnable = false;
    var options = _extends2({
      webGLMode: 0,
      alpha: false,
      stencil: true,
      _forceFlush: false,
      _maxAllowSkinUniformVectorCount: 256
    }, initializeOptions);
    if (SystemInfo.platform === Platform.IPhone || SystemInfo.platform === Platform.IPad) {
      var version2 = SystemInfo.operatingSystem.match(/(\d+).?(\d+)?.?(\d+)?/);
      if (version2) {
        var majorVersion = parseInt(version2[1]);
        var minorVersion = parseInt(version2[2]);
        if (majorVersion === 15 && minorVersion >= 0 && minorVersion <= 4) {
          options._forceFlush = true;
        }
      }
    }
    this._options = options;
  }
  var _proto = WebGLRenderer2.prototype;
  _proto.init = function init(canvas) {
    var options = this._options;
    var webCanvas = this._webCanvas = canvas._webCanvas;
    var webGLMode = options.webGLMode;
    var gl;
    if (webGLMode == 0 || webGLMode == 1) {
      gl = webCanvas.getContext("webgl2", options);
      if (!gl && (typeof OffscreenCanvas === "undefined" || !_instanceof2(webCanvas, OffscreenCanvas))) {
        gl = webCanvas.getContext("experimental-webgl2", options);
      }
      this._isWebGL2 = true;
      if (gl && !gl.deleteQuery) {
        this._isWebGL2 = false;
      }
    }
    if (!gl) {
      if (webGLMode == 0 || webGLMode == 2) {
        gl = webCanvas.getContext("webgl", options);
        if (!gl && (typeof OffscreenCanvas === "undefined" || !_instanceof2(webCanvas, OffscreenCanvas))) {
          gl = webCanvas.getContext("experimental-webgl", options);
        }
        this._isWebGL2 = false;
      }
    }
    if (!gl) {
      throw new Error("Get GL Context FAILED.");
    }
    this._gl = gl;
    this._activeTextureID = gl.TEXTURE0;
    this._renderStates = new GLRenderStates(gl);
    this._extensions = new GLExtensions(this);
    this._capability = new GLCapability(this);
    gl.activeTexture(gl.TEXTURE0);
    var debugRenderInfo = gl.getExtension("WEBGL_debug_renderer_info");
    if (debugRenderInfo != null) {
      this._renderer = gl.getParameter(debugRenderInfo.UNMASKED_RENDERER_WEBGL);
    }
  };
  _proto.createPlatformPrimitive = function createPlatformPrimitive(primitive) {
    return new GLPrimitive(this, primitive);
  };
  _proto.createPlatformTexture2D = function createPlatformTexture2D(texture2D) {
    return new GLTexture2D(this, texture2D);
  };
  _proto.createPlatformTexture2DArray = function createPlatformTexture2DArray(texture2D) {
    return new GLTexture2DArray(this, texture2D);
  };
  _proto.createPlatformTextureCube = function createPlatformTextureCube(textureCube) {
    return new GLTextureCube(this, textureCube);
  };
  _proto.createPlatformRenderTarget = function createPlatformRenderTarget(target) {
    return new GLRenderTarget(this, target);
  };
  _proto.requireExtension = function requireExtension(ext) {
    return this._extensions.requireExtension(ext);
  };
  _proto.canIUse = function canIUse(capabilityType) {
    return this.capability.canIUse(capabilityType);
  };
  _proto.canIUseCompressedTextureInternalFormat = function canIUseCompressedTextureInternalFormat(type) {
    return this.capability.canIUseCompressedTextureInternalFormat(type);
  };
  _proto.viewport = function viewport(x, y, width, height) {
    var _this = this, gl = _this._gl, lastViewport = _this._lastViewport;
    if (x !== lastViewport.x || y !== lastViewport.y || width !== lastViewport.z || height !== lastViewport.w) {
      gl.viewport(x, y, width, height);
      lastViewport.set(x, y, width, height);
    }
  };
  _proto.scissor = function scissor(x, y, width, height) {
    var _this = this, gl = _this._gl, lastScissor = _this._lastScissor;
    if (x !== lastScissor.x || y !== lastScissor.y || width !== lastScissor.z || height !== lastScissor.w) {
      var _this1 = this, webCanvas = _this1._webCanvas;
      if (x === 0 && y === 0 && width === webCanvas.width && height === webCanvas.height) {
        if (this._scissorEnable) {
          gl.disable(gl.SCISSOR_TEST);
          this._scissorEnable = false;
        }
      } else {
        if (!this._scissorEnable) {
          gl.enable(gl.SCISSOR_TEST);
          this._scissorEnable = true;
        }
        gl.scissor(x, y, width, height);
      }
      lastScissor.set(x, y, width, height);
    }
  };
  _proto.colorMask = function colorMask(r, g, b, a) {
    this._gl.colorMask(r, g, b, a);
  };
  _proto.clearRenderTarget = function clearRenderTarget(engine, clearFlags, clearColor) {
    var gl = this._gl;
    var _engine__lastRenderState = engine._lastRenderState, targetBlendState = _engine__lastRenderState.blendState.targetBlendState, depthState = _engine__lastRenderState.depthState, stencilState = _engine__lastRenderState.stencilState;
    var clearFlag = 0;
    if (clearFlags & CameraClearFlags.Color) {
      clearFlag |= gl.COLOR_BUFFER_BIT;
      var lc = this._lastClearColor;
      var r = clearColor.r, g = clearColor.g, b = clearColor.b, a = clearColor.a;
      if (clearColor && (r !== lc.r || g !== lc.g || b !== lc.b || a !== lc.a)) {
        gl.clearColor(r, g, b, a);
        lc.set(r, g, b, a);
      }
      if (targetBlendState.colorWriteMask !== ColorWriteMask.All) {
        gl.colorMask(true, true, true, true);
        targetBlendState.colorWriteMask = ColorWriteMask.All;
      }
    }
    if (clearFlags & CameraClearFlags.Depth) {
      clearFlag |= gl.DEPTH_BUFFER_BIT;
      if (depthState.writeEnabled !== true) {
        gl.depthMask(true);
        depthState.writeEnabled = true;
      }
    }
    if (clearFlags & CameraClearFlags.Stencil) {
      clearFlag |= gl.STENCIL_BUFFER_BIT;
      if (stencilState.writeMask !== 255) {
        gl.stencilMask(255);
        stencilState.writeMask = 255;
      }
    }
    gl.clear(clearFlag);
  };
  _proto.drawPrimitive = function drawPrimitive(primitive, subPrimitive, shaderProgram) {
    if (primitive) {
      primitive._draw(shaderProgram, subPrimitive);
    } else {
      Logger.error("draw primitive failed.");
    }
  };
  _proto.activeRenderTarget = function activeRenderTarget(renderTarget, viewport, mipLevel) {
    var gl = this._gl;
    var bufferWidth, bufferHeight;
    if (renderTarget) {
      var _renderTarget__platformRenderTarget;
      (_renderTarget__platformRenderTarget = renderTarget._platformRenderTarget) == null ? void 0 : _renderTarget__platformRenderTarget._activeRenderTarget();
      bufferWidth = renderTarget.width >> mipLevel;
      bufferHeight = renderTarget.height >> mipLevel;
    } else {
      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      bufferWidth = gl.drawingBufferWidth;
      bufferHeight = gl.drawingBufferHeight;
    }
    var width = bufferWidth * viewport.z;
    var height = bufferHeight * viewport.w;
    var x = viewport.x * bufferWidth;
    var y = bufferHeight - viewport.y * bufferHeight - height;
    this.viewport(x, y, width, height);
    this.scissor(x, y, width, height);
  };
  _proto.activeTexture = function activeTexture(textureID) {
    if (this._activeTextureID !== textureID) {
      this._gl.activeTexture(textureID);
      this._activeTextureID = textureID;
    }
  };
  _proto.bindTexture = function bindTexture(texture) {
    var index = this._activeTextureID - this._gl.TEXTURE0;
    if (this._activeTextures[index] !== texture) {
      this._gl.bindTexture(texture._target, texture._glTexture);
      this._activeTextures[index] = texture;
    }
  };
  _proto.setGlobalDepthBias = function setGlobalDepthBias(bias, slopeBias) {
    var gl = this._gl;
    var enable2 = bias !== 0 || slopeBias !== 0;
    if (enable2) {
      gl.enable(gl.POLYGON_OFFSET_FILL);
      gl.polygonOffset(slopeBias, bias);
    } else {
      gl.disable(gl.POLYGON_OFFSET_FILL);
    }
    this._enableGlobalDepthBias = enable2;
  };
  _proto.flush = function flush() {
    this._gl.flush();
  };
  _proto.destroy = function destroy() {
  };
  _create_class4(WebGLRenderer2, [
    {
      key: "isWebGL2",
      get: function get() {
        return this._isWebGL2;
      }
    },
    {
      key: "renderer",
      get: function get() {
        return this._renderer;
      }
    },
    {
      key: "gl",
      get: (
        /**
        * GL Context
        * @member {WebGLRenderingContext}
        */
        function get() {
          return this._gl;
        }
      )
    },
    {
      key: "renderStates",
      get: function get() {
        return this._renderStates;
      }
    },
    {
      key: "capability",
      get: function get() {
        return this._capability;
      }
    },
    {
      key: "canIUseMoreJoints",
      get: function get() {
        return this.capability.canIUseMoreJoints;
      }
    }
  ]);
  return WebGLRenderer2;
}();
var WebGLEngine = function(Engine2) {
  _inherits2(WebGLEngine2, Engine2);
  function WebGLEngine2(canvas, webGLRendererOptions) {
    var webCanvas = new WebCanvas(typeof canvas === "string" ? document.getElementById(canvas) : canvas);
    var hardwareRenderer = new WebGLRenderer(webGLRendererOptions);
    return Engine2.call(this, webCanvas, hardwareRenderer);
  }
  _create_class4(WebGLEngine2, [
    {
      key: "canvas",
      get: (
        /**
        * Web canvas.
        */
        function get() {
          return this._canvas;
        }
      )
    }
  ]);
  return WebGLEngine2;
}(Engine);

// node_modules/@galacean/engine-loader/dist/module.js
function _extends3() {
  _extends3 = Object.assign || function assign(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source)
        if (Object.prototype.hasOwnProperty.call(source, key))
          target[key] = source[key];
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
function _set_prototype_of3(o, p) {
  _set_prototype_of3 = Object.setPrototypeOf || function setPrototypeOf(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _set_prototype_of3(o, p);
}
function _inherits3(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _set_prototype_of3(subClass, superClass);
}
function __decorate2(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
var AnimatorControllerLoader = function(Loader2) {
  _inherits3(AnimatorControllerLoader2, Loader2);
  function AnimatorControllerLoader2() {
    return Loader2.apply(this, arguments);
  }
  var _proto = AnimatorControllerLoader2.prototype;
  _proto.load = function load(item, resourceManager) {
    var _this = this;
    return new AssetPromise(function(resolve, reject) {
      _this.request(item.url, _extends3({}, item, {
        type: "json"
      })).then(function(data) {
        var animatorController = new AnimatorController();
        var layers = data.layers;
        var promises = [];
        layers.forEach(function(layerData, layerIndex) {
          var name = layerData.name, blendingMode = layerData.blendingMode, weight = layerData.weight, stateMachineData = layerData.stateMachine;
          var layer = new AnimatorControllerLayer(name);
          layer.blendingMode = blendingMode;
          layer.weight = weight;
          if (stateMachineData) {
            var states = stateMachineData.states;
            var stateMachine = layer.stateMachine = new AnimatorStateMachine();
            states.forEach(function(stateData, stateIndex) {
              var name2 = stateData.name, speed = stateData.speed, wrapMode = stateData.wrapMode, clipStartNormalizedTime = stateData.clipStartNormalizedTime, clipEndNormalizedTime = stateData.clipEndNormalizedTime, isDefaultState = stateData.isDefaultState, clipData = stateData.clip;
              var state = stateMachine.addState(name2);
              isDefaultState && (stateMachine.defaultState = state);
              state.speed = speed;
              state.wrapMode = wrapMode;
              state.clipStartTime = clipStartNormalizedTime;
              state.clipEndTime = clipEndNormalizedTime;
              if (clipData) {
                promises.push(new Promise(function(resolve2) {
                  resourceManager.getResourceByRef(clipData).then(function(clip) {
                    resolve2({
                      layerIndex,
                      stateIndex,
                      clip
                    });
                  });
                }));
              }
            });
            states.forEach(function(stateData) {
              var name2 = stateData.name, transitions = stateData.transitions;
              transitions.forEach(function(transitionData) {
                var targetStateName = transitionData.targetStateName, duration = transitionData.duration, offset = transitionData.offset, exitTime = transitionData.exitTime;
                var sourceState = stateMachine.findStateByName(name2);
                var destState = stateMachine.findStateByName(targetStateName);
                var transition = new AnimatorStateTransition();
                transition.destinationState = destState;
                transition.duration = duration;
                transition.exitTime = exitTime;
                transition.offset = offset;
                sourceState.addTransition(transition);
              });
            });
          }
          animatorController.addLayer(layer);
        });
        Promise.all(promises).then(function(clipData) {
          clipData.forEach(function(data2) {
            var layerIndex = data2.layerIndex, stateIndex = data2.stateIndex, clip = data2.clip;
            animatorController.layers[layerIndex].stateMachine.states[stateIndex].clip = clip;
          });
          resolve(animatorController);
        });
      }).catch(reject);
    });
  };
  return AnimatorControllerLoader2;
}(Loader);
AnimatorControllerLoader = __decorate2([
  resourceLoader(AssetType.AnimatorController, [
    "json"
  ], false)
], AnimatorControllerLoader);
function isBase64(url) {
  return /^data:(.+?);base64,/.test(url);
}
var BufferLoader = function(Loader2) {
  _inherits3(BufferLoader2, Loader2);
  function BufferLoader2() {
    return Loader2.apply(this, arguments);
  }
  var _proto = BufferLoader2.prototype;
  _proto.load = function load(item) {
    var url = item.url;
    if (isBase64(url)) {
      return new AssetPromise(function(resolve) {
        var base64Str = url.slice(13 + RegExp.$1.length);
        var result = Uint8Array.from(atob(base64Str), function(c) {
          return c.charCodeAt(0);
        });
        resolve(result.buffer);
      });
    }
    return this.request(url, _extends3({}, item, {
      type: "arraybuffer"
    }));
  };
  return BufferLoader2;
}(Loader);
BufferLoader = __decorate2([
  resourceLoader(AssetType.Buffer, [
    "bin",
    "r3bin"
  ], false)
], BufferLoader);
var EnvLoader = function(Loader2) {
  _inherits3(EnvLoader2, Loader2);
  function EnvLoader2() {
    return Loader2.apply(this, arguments);
  }
  var _proto = EnvLoader2.prototype;
  _proto.load = function load(item, resourceManager) {
    var _this = this;
    return new AssetPromise(function(resolve, reject) {
      _this.request(item.url, {
        type: "arraybuffer"
      }).then(function(arraybuffer) {
        var _ref;
        var shArray = new Float32Array(arraybuffer, 0, 27);
        var shByteLength = 27 * 4;
        var size = (_ref = new Uint16Array(arraybuffer, shByteLength, 1)) == null ? void 0 : _ref[0];
        var texture = new TextureCube(resourceManager.engine, size);
        texture.filterMode = TextureFilterMode.Trilinear;
        var mipmapCount = texture.mipmapCount;
        var offset = shByteLength + 2;
        for (var mipLevel = 0; mipLevel < mipmapCount; mipLevel++) {
          var mipSize = size >> mipLevel;
          for (var face = 0; face < 6; face++) {
            var dataSize = mipSize * mipSize * 4;
            var data = new Uint8Array(arraybuffer, offset, dataSize);
            offset += dataSize;
            texture.setPixelBuffer(TextureCubeFace.PositiveX + face, data, mipLevel);
          }
        }
        var ambientLight = new AmbientLight();
        var sh = new SphericalHarmonics3();
        ambientLight.diffuseMode = DiffuseMode.SphericalHarmonics;
        sh.copyFromArray(shArray);
        ambientLight.diffuseSphericalHarmonics = sh;
        ambientLight.specularTexture = texture;
        ambientLight.specularTextureDecodeRGBM = true;
        resolve(ambientLight);
      }).catch(function(e) {
        reject(e);
      });
    });
  };
  return EnvLoader2;
}(Loader);
EnvLoader = __decorate2([
  resourceLoader(AssetType.Env, [
    "env"
  ])
], EnvLoader);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info2 = gen[key](arg);
    var value = info2.value;
  } catch (error2) {
    reject(error2);
    return;
  }
  if (info2.done)
    resolve(value);
  else
    Promise.resolve(value).then(_next, _throw);
}
function _async_to_generator(fn) {
  return function() {
    var self = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
var FontLoader = function(Loader2) {
  _inherits3(FontLoader2, Loader2);
  function FontLoader2() {
    return Loader2.apply(this, arguments);
  }
  var _proto = FontLoader2.prototype;
  _proto.load = function load(item, resourceManager) {
    var _this = this;
    return new AssetPromise(function(resolve, reject) {
      _this.request(item.url, {
        type: "json"
      }).then(function(data) {
        var fontName = data.fontName, fontUrl = data.fontUrl;
        if (fontUrl) {
          _this._registerFont(fontName, fontUrl).then(function() {
            var font2 = new Font(resourceManager.engine, fontName);
            resolve(font2);
          }).catch(function(e) {
            reject("load font " + fontUrl + " fail");
          });
        } else {
          var font = new Font(resourceManager.engine, fontName);
          resolve(font);
        }
      }).catch(function(e) {
        reject(e);
      });
    });
  };
  _proto._registerFont = function _registerFont(fontName, fontUrl) {
    return _async_to_generator(function() {
      var fontFace;
      return __generator(this, function(_state) {
        switch (_state.label) {
          case 0:
            fontFace = new FontFace(fontName, "url(" + fontUrl + ")");
            return [
              4,
              fontFace.load()
            ];
          case 1:
            _state.sent();
            document.fonts.add(fontFace);
            return [
              2
            ];
        }
      });
    })();
  };
  return FontLoader2;
}(Loader);
FontLoader = __decorate2([
  resourceLoader(AssetType.Font, [
    "font"
  ], false)
], FontLoader);
var ParserContext = function() {
  function ParserContext2(url) {
    this.hasSkinned = false;
    this.chainPromises = [];
    this.accessorBufferCache = {};
    this.texturesPromiseInfo = new PromiseInfo();
    this.materialsPromiseInfo = new PromiseInfo();
    this.meshesPromiseInfo = new PromiseInfo();
    this.animationClipsPromiseInfo = new PromiseInfo();
    this.defaultSceneRootPromiseInfo = new PromiseInfo();
    this.masterPromiseInfo = new PromiseInfo();
    this.promiseMap = {};
    var promiseMap = this.promiseMap;
    promiseMap["" + url + "?q=textures"] = this._initPromiseInfo(this.texturesPromiseInfo);
    promiseMap["" + url + "?q=materials"] = this._initPromiseInfo(this.materialsPromiseInfo);
    promiseMap["" + url + "?q=meshes"] = this._initPromiseInfo(this.meshesPromiseInfo);
    promiseMap["" + url + "?q=animations"] = this._initPromiseInfo(this.animationClipsPromiseInfo);
    promiseMap["" + url + "?q=defaultSceneRoot"] = this._initPromiseInfo(this.defaultSceneRootPromiseInfo);
    promiseMap["" + url] = this._initPromiseInfo(this.masterPromiseInfo);
  }
  var _proto = ParserContext2.prototype;
  _proto._initPromiseInfo = function _initPromiseInfo(promiseInfo) {
    var promise = new AssetPromise(function(resolve, reject, setProgress, onCancel) {
      promiseInfo.resolve = resolve;
      promiseInfo.reject = reject;
      promiseInfo.setProgress = setProgress;
      promiseInfo.onCancel = onCancel;
    });
    promiseInfo.promise = promise;
    return promise;
  };
  return ParserContext2;
}();
var BufferInfo = function BufferInfo2(data, interleaved, stride) {
  this.data = data;
  this.interleaved = interleaved;
  this.stride = stride;
  this.vertexBindingInfos = {};
};
var PromiseInfo = function PromiseInfo2() {
};
var AccessorComponentType;
(function(AccessorComponentType2) {
  AccessorComponentType2[AccessorComponentType2[
    /**
    * Byte
    */
    "BYTE"
  ] = 5120] = "BYTE";
  AccessorComponentType2[AccessorComponentType2[
    /**
    * Unsigned Byte
    */
    "UNSIGNED_BYTE"
  ] = 5121] = "UNSIGNED_BYTE";
  AccessorComponentType2[AccessorComponentType2[
    /**
    * Short
    */
    "SHORT"
  ] = 5122] = "SHORT";
  AccessorComponentType2[AccessorComponentType2[
    /**
    * Unsigned Short
    */
    "UNSIGNED_SHORT"
  ] = 5123] = "UNSIGNED_SHORT";
  AccessorComponentType2[AccessorComponentType2[
    /**
    * Unsigned Int
    */
    "UNSIGNED_INT"
  ] = 5125] = "UNSIGNED_INT";
  AccessorComponentType2[AccessorComponentType2[
    /**
    * Float
    */
    "FLOAT"
  ] = 5126] = "FLOAT";
})(AccessorComponentType || (AccessorComponentType = {}));
var AccessorType;
(function(AccessorType2) {
  AccessorType2[
    /**
    * Scalar
    */
    "SCALAR"
  ] = "SCALAR";
  AccessorType2[
    /**
    * Vector2
    */
    "VEC2"
  ] = "VEC2";
  AccessorType2[
    /**
    * Vector3
    */
    "VEC3"
  ] = "VEC3";
  AccessorType2[
    /**
    * Vector4
    */
    "VEC4"
  ] = "VEC4";
  AccessorType2[
    /**
    * Matrix2x2
    */
    "MAT2"
  ] = "MAT2";
  AccessorType2[
    /**
    * Matrix3x3
    */
    "MAT3"
  ] = "MAT3";
  AccessorType2[
    /**
    * Matrix4x4
    */
    "MAT4"
  ] = "MAT4";
})(AccessorType || (AccessorType = {}));
var AnimationChannelTargetPath;
(function(AnimationChannelTargetPath2) {
  AnimationChannelTargetPath2[
    /**
    * Translation
    */
    "TRANSLATION"
  ] = "translation";
  AnimationChannelTargetPath2[
    /**
    * Rotation
    */
    "ROTATION"
  ] = "rotation";
  AnimationChannelTargetPath2[
    /**
    * Scale
    */
    "SCALE"
  ] = "scale";
  AnimationChannelTargetPath2[
    /**
    * Weights
    */
    "WEIGHTS"
  ] = "weights";
})(AnimationChannelTargetPath || (AnimationChannelTargetPath = {}));
var AnimationSamplerInterpolation;
(function(AnimationSamplerInterpolation2) {
  AnimationSamplerInterpolation2[
    /**
    * The animated values are linearly interpolated between keyframes
    */
    "Linear"
  ] = "LINEAR";
  AnimationSamplerInterpolation2[
    /**
    * The animated values remain constant to the output of the first keyframe, until the next keyframe
    */
    "Step"
  ] = "STEP";
  AnimationSamplerInterpolation2[
    /**
    * The animation's interpolation is computed using a cubic spline with specified tangents
    */
    "CubicSpine"
  ] = "CUBICSPLINE";
})(AnimationSamplerInterpolation || (AnimationSamplerInterpolation = {}));
var CameraType;
(function(CameraType2) {
  CameraType2[
    /**
    * A perspective camera containing properties to create a perspective projection matrix
    */
    "PERSPECTIVE"
  ] = "perspective";
  CameraType2[
    /**
    * An orthographic camera containing properties to create an orthographic projection matrix
    */
    "ORTHOGRAPHIC"
  ] = "orthographic";
})(CameraType || (CameraType = {}));
var ImageMimeType;
(function(ImageMimeType2) {
  ImageMimeType2[
    /**
    * JPEG Mime-type
    */
    "JPEG"
  ] = "image/jpeg";
  ImageMimeType2[
    /**
    * PNG Mime-type
    */
    "PNG"
  ] = "image/png";
})(ImageMimeType || (ImageMimeType = {}));
var MaterialAlphaMode;
(function(MaterialAlphaMode2) {
  MaterialAlphaMode2[
    /**
    * The alpha value is ignored and the rendered output is fully opaque
    */
    "OPAQUE"
  ] = "OPAQUE";
  MaterialAlphaMode2[
    /**
    * The rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value
    */
    "MASK"
  ] = "MASK";
  MaterialAlphaMode2[
    /**
    * The alpha value is used to composite the source and destination areas. The rendered output is combined with the background using the normal painting operation (i.e. the Porter and Duff over operator)
    */
    "BLEND"
  ] = "BLEND";
})(MaterialAlphaMode || (MaterialAlphaMode = {}));
var TextureMagFilter;
(function(TextureMagFilter2) {
  TextureMagFilter2[TextureMagFilter2[
    /**
    * Nearest
    */
    "NEAREST"
  ] = 9728] = "NEAREST";
  TextureMagFilter2[TextureMagFilter2[
    /**
    * Linear
    */
    "LINEAR"
  ] = 9729] = "LINEAR";
})(TextureMagFilter || (TextureMagFilter = {}));
var TextureMinFilter;
(function(TextureMinFilter2) {
  TextureMinFilter2[TextureMinFilter2[
    /**
    * Nearest
    */
    "NEAREST"
  ] = 9728] = "NEAREST";
  TextureMinFilter2[TextureMinFilter2[
    /**
    * Linear
    */
    "LINEAR"
  ] = 9729] = "LINEAR";
  TextureMinFilter2[TextureMinFilter2[
    /**
    * Nearest Mip-Map Nearest
    */
    "NEAREST_MIPMAP_NEAREST"
  ] = 9984] = "NEAREST_MIPMAP_NEAREST";
  TextureMinFilter2[TextureMinFilter2[
    /**
    * Linear Mipmap Nearest
    */
    "LINEAR_MIPMAP_NEAREST"
  ] = 9985] = "LINEAR_MIPMAP_NEAREST";
  TextureMinFilter2[TextureMinFilter2[
    /**
    * Nearest Mipmap Linear
    */
    "NEAREST_MIPMAP_LINEAR"
  ] = 9986] = "NEAREST_MIPMAP_LINEAR";
  TextureMinFilter2[TextureMinFilter2[
    /**
    * Linear Mipmap Linear
    */
    "LINEAR_MIPMAP_LINEAR"
  ] = 9987] = "LINEAR_MIPMAP_LINEAR";
})(TextureMinFilter || (TextureMinFilter = {}));
var TextureWrapMode2;
(function(TextureWrapMode3) {
  TextureWrapMode3[TextureWrapMode3[
    /**
    * Clamp to Edge
    */
    "CLAMP_TO_EDGE"
  ] = 33071] = "CLAMP_TO_EDGE";
  TextureWrapMode3[TextureWrapMode3[
    /**
    * Mirrored Repeat
    */
    "MIRRORED_REPEAT"
  ] = 33648] = "MIRRORED_REPEAT";
  TextureWrapMode3[TextureWrapMode3[
    /**
    * Repeat
    */
    "REPEAT"
  ] = 10497] = "REPEAT";
})(TextureWrapMode2 || (TextureWrapMode2 = {}));
var GLTFUtil = function() {
  function GLTFUtil2() {
  }
  GLTFUtil2.floatBufferToVector2Array = function floatBufferToVector2Array(buffer) {
    var bufferLen = buffer.length;
    var array = new Array(bufferLen / 2);
    for (var i = 0; i < bufferLen; i += 2) {
      array[i / 2] = new Vector2(buffer[i], buffer[i + 1]);
    }
    return array;
  };
  GLTFUtil2.floatBufferToVector3Array = function floatBufferToVector3Array(buffer) {
    var bufferLen = buffer.length;
    var array = new Array(bufferLen / 3);
    for (var i = 0; i < bufferLen; i += 3) {
      array[i / 3] = new Vector3(buffer[i], buffer[i + 1], buffer[i + 2]);
    }
    return array;
  };
  GLTFUtil2.floatBufferToVector4Array = function floatBufferToVector4Array(buffer) {
    var bufferLen = buffer.length;
    var array = new Array(bufferLen / 4);
    for (var i = 0; i < bufferLen; i += 4) {
      array[i / 4] = new Vector4(buffer[i], buffer[i + 1], buffer[i + 2], buffer[i + 3]);
    }
    return array;
  };
  GLTFUtil2.floatBufferToColorArray = function floatBufferToColorArray(buffer, isColor3) {
    var bufferLen = buffer.length;
    var colors = new Array(bufferLen / (isColor3 ? 3 : 4));
    if (isColor3) {
      for (var i = 0; i < bufferLen; i += 3) {
        colors[i / 3] = new Color(buffer[i], buffer[i + 1], buffer[i + 2], 1);
      }
    } else {
      for (var i1 = 0; i1 < bufferLen; i1 += 4) {
        colors[i1 / 4] = new Color(buffer[i1], buffer[i1 + 1], buffer[i1 + 2], buffer[i1 + 3]);
      }
    }
    return colors;
  };
  GLTFUtil2.decodeText = function decodeText(array) {
    if (typeof TextDecoder !== "undefined") {
      return new TextDecoder().decode(array);
    }
    var s = "";
    for (var i = 0, il = array.length; i < il; i++) {
      s += String.fromCharCode(array[i]);
    }
    return decodeURIComponent(encodeURIComponent(s));
  };
  GLTFUtil2.getAccessorTypeSize = function getAccessorTypeSize(accessorType) {
    switch (accessorType) {
      case AccessorType.SCALAR:
        return 1;
      case AccessorType.VEC2:
        return 2;
      case AccessorType.VEC3:
        return 3;
      case AccessorType.VEC4:
        return 4;
      case AccessorType.MAT2:
        return 4;
      case AccessorType.MAT3:
        return 9;
      case AccessorType.MAT4:
        return 16;
    }
  };
  GLTFUtil2.getComponentType = function getComponentType(componentType) {
    switch (componentType) {
      case AccessorComponentType.BYTE:
        return Int8Array;
      case AccessorComponentType.UNSIGNED_BYTE:
        return Uint8Array;
      case AccessorComponentType.SHORT:
        return Int16Array;
      case AccessorComponentType.UNSIGNED_SHORT:
        return Uint16Array;
      case AccessorComponentType.UNSIGNED_INT:
        return Uint32Array;
      case AccessorComponentType.FLOAT:
        return Float32Array;
    }
  };
  GLTFUtil2.getNormalizedComponentScale = function getNormalizedComponentScale(componentType) {
    switch (componentType) {
      case AccessorComponentType.BYTE:
        return 1 / 127;
      case AccessorComponentType.UNSIGNED_BYTE:
        return 1 / 255;
      case AccessorComponentType.SHORT:
        return 1 / 32767;
      case AccessorComponentType.UNSIGNED_SHORT:
        return 1 / 65535;
      default:
        throw new Error("Galacean.GLTFLoader: Unsupported normalized accessor component type.");
    }
  };
  GLTFUtil2.getAccessorBuffer = function getAccessorBuffer(context, gltf, accessor) {
    var buffers = context.buffers;
    var bufferViews = gltf.bufferViews;
    var componentType = accessor.componentType;
    var bufferView = bufferViews[accessor.bufferView];
    var buffer = buffers[bufferView.buffer];
    var bufferByteOffset = bufferView.byteOffset || 0;
    var byteOffset = accessor.byteOffset || 0;
    var TypedArray = GLTFUtil2.getComponentType(componentType);
    var dataElmentSize = GLTFUtil2.getAccessorTypeSize(accessor.type);
    var dataElementBytes = TypedArray.BYTES_PER_ELEMENT;
    var elementStride = dataElmentSize * dataElementBytes;
    var accessorCount = accessor.count;
    var bufferStride = bufferView.byteStride;
    var bufferInfo;
    if (bufferStride !== void 0 && bufferStride !== elementStride) {
      var bufferSlice = Math.floor(byteOffset / bufferStride);
      var bufferCacheKey = accessor.bufferView + ":" + componentType + ":" + bufferSlice + ":" + accessorCount;
      var accessorBufferCache = context.accessorBufferCache;
      bufferInfo = accessorBufferCache[bufferCacheKey];
      if (!bufferInfo) {
        var offset = bufferByteOffset + bufferSlice * bufferStride;
        var count = accessorCount * (bufferStride / dataElementBytes);
        var data = new TypedArray(buffer, offset, count);
        accessorBufferCache[bufferCacheKey] = bufferInfo = new BufferInfo(data, true, bufferStride);
      }
    } else {
      var offset1 = bufferByteOffset + byteOffset;
      var count1 = accessorCount * dataElmentSize;
      var data1 = new TypedArray(buffer, offset1, count1);
      bufferInfo = new BufferInfo(data1, false, elementStride);
    }
    if (accessor.sparse) {
      var data2 = GLTFUtil2.processingSparseData(gltf, accessor, buffers, bufferInfo.data);
      bufferInfo = new BufferInfo(data2, false, bufferInfo.stride);
    }
    return bufferInfo;
  };
  GLTFUtil2.getAccessorData = function getAccessorData(gltf, accessor, buffers) {
    var bufferViews = gltf.bufferViews;
    var bufferView = bufferViews[accessor.bufferView];
    var arrayBuffer = buffers[bufferView.buffer];
    var accessorByteOffset = accessor.hasOwnProperty("byteOffset") ? accessor.byteOffset : 0;
    var bufferViewByteOffset = bufferView.hasOwnProperty("byteOffset") ? bufferView.byteOffset : 0;
    var byteOffset = accessorByteOffset + bufferViewByteOffset;
    var accessorTypeSize = GLTFUtil2.getAccessorTypeSize(accessor.type);
    var length2 = accessorTypeSize * accessor.count;
    var _bufferView_byteStride;
    var byteStride = (_bufferView_byteStride = bufferView.byteStride) != null ? _bufferView_byteStride : 0;
    var arrayType = GLTFUtil2.getComponentType(accessor.componentType);
    var uint8Array;
    if (byteStride) {
      var accessorByteSize = accessorTypeSize * arrayType.BYTES_PER_ELEMENT;
      uint8Array = new Uint8Array(accessor.count * accessorByteSize);
      var originalBufferView = new Uint8Array(arrayBuffer, bufferViewByteOffset, bufferView.byteLength);
      for (var i = 0; i < accessor.count; i++) {
        for (var j = 0; j < accessorByteSize; j++) {
          uint8Array[i * accessorByteSize + j] = originalBufferView[i * byteStride + accessorByteOffset + j];
        }
      }
    } else {
      uint8Array = new Uint8Array(arrayBuffer.slice(byteOffset, byteOffset + length2 * arrayType.BYTES_PER_ELEMENT));
    }
    var typedArray = new arrayType(uint8Array.buffer);
    if (accessor.sparse) {
      var _accessor_sparse = accessor.sparse, count = _accessor_sparse.count, indices = _accessor_sparse.indices, values = _accessor_sparse.values;
      var indicesBufferView = bufferViews[indices.bufferView];
      var valuesBufferView = bufferViews[values.bufferView];
      var indicesArrayBuffer = buffers[indicesBufferView.buffer];
      var valuesArrayBuffer = buffers[valuesBufferView.buffer];
      var _indices_byteOffset, _indicesBufferView_byteOffset;
      var indicesByteOffset = ((_indices_byteOffset = indices.byteOffset) != null ? _indices_byteOffset : 0) + ((_indicesBufferView_byteOffset = indicesBufferView.byteOffset) != null ? _indicesBufferView_byteOffset : 0);
      var indicesByteLength = indicesBufferView.byteLength;
      var _values_byteOffset, _valuesBufferView_byteOffset;
      var valuesByteOffset = ((_values_byteOffset = values.byteOffset) != null ? _values_byteOffset : 0) + ((_valuesBufferView_byteOffset = valuesBufferView.byteOffset) != null ? _valuesBufferView_byteOffset : 0);
      var valuesByteLength = valuesBufferView.byteLength;
      var indicesType = GLTFUtil2.getComponentType(indices.componentType);
      var indicesArray = new indicesType(indicesArrayBuffer, indicesByteOffset, indicesByteLength / indicesType.BYTES_PER_ELEMENT);
      var valuesArray = new arrayType(valuesArrayBuffer, valuesByteOffset, valuesByteLength / arrayType.BYTES_PER_ELEMENT);
      for (var i1 = 0; i1 < count; i1++) {
        var replaceIndex = indicesArray[i1];
        for (var j1 = 0; j1 < accessorTypeSize; j1++) {
          typedArray[replaceIndex * accessorTypeSize + j1] = valuesArray[i1 * accessorTypeSize + j1];
        }
      }
    }
    return typedArray;
  };
  GLTFUtil2.getBufferViewData = function getBufferViewData(bufferView, buffers) {
    var buffer = bufferView.buffer, _bufferView_byteOffset = bufferView.byteOffset, byteOffset = _bufferView_byteOffset === void 0 ? 0 : _bufferView_byteOffset, byteLength = bufferView.byteLength;
    var arrayBuffer = buffers[buffer];
    return arrayBuffer.slice(byteOffset, byteOffset + byteLength);
  };
  GLTFUtil2.processingSparseData = function processingSparseData(gltf, accessor, buffers, originData) {
    var bufferViews = gltf.bufferViews;
    var accessorTypeSize = GLTFUtil2.getAccessorTypeSize(accessor.type);
    var TypedArray = GLTFUtil2.getComponentType(accessor.componentType);
    var data = originData.slice();
    var _accessor_sparse = accessor.sparse, count = _accessor_sparse.count, indices = _accessor_sparse.indices, values = _accessor_sparse.values;
    var indicesBufferView = bufferViews[indices.bufferView];
    var valuesBufferView = bufferViews[values.bufferView];
    var indicesArrayBuffer = buffers[indicesBufferView.buffer];
    var valuesArrayBuffer = buffers[valuesBufferView.buffer];
    var _indices_byteOffset, _indicesBufferView_byteOffset;
    var indicesByteOffset = ((_indices_byteOffset = indices.byteOffset) != null ? _indices_byteOffset : 0) + ((_indicesBufferView_byteOffset = indicesBufferView.byteOffset) != null ? _indicesBufferView_byteOffset : 0);
    var indicesByteLength = indicesBufferView.byteLength;
    var _values_byteOffset, _valuesBufferView_byteOffset;
    var valuesByteOffset = ((_values_byteOffset = values.byteOffset) != null ? _values_byteOffset : 0) + ((_valuesBufferView_byteOffset = valuesBufferView.byteOffset) != null ? _valuesBufferView_byteOffset : 0);
    var valuesByteLength = valuesBufferView.byteLength;
    var IndexTypeArray = GLTFUtil2.getComponentType(indices.componentType);
    var indicesArray = new IndexTypeArray(indicesArrayBuffer, indicesByteOffset, indicesByteLength / IndexTypeArray.BYTES_PER_ELEMENT);
    var valuesArray = new TypedArray(valuesArrayBuffer, valuesByteOffset, valuesByteLength / TypedArray.BYTES_PER_ELEMENT);
    for (var i = 0; i < count; i++) {
      var replaceIndex = indicesArray[i];
      for (var j = 0; j < accessorTypeSize; j++) {
        data[replaceIndex * accessorTypeSize + j] = valuesArray[i * accessorTypeSize + j];
      }
    }
    return data;
  };
  GLTFUtil2.getIndexFormat = function getIndexFormat(type) {
    switch (type) {
      case AccessorComponentType.UNSIGNED_BYTE:
        return IndexFormat.UInt8;
      case AccessorComponentType.UNSIGNED_SHORT:
        return IndexFormat.UInt16;
      case AccessorComponentType.UNSIGNED_INT:
        return IndexFormat.UInt32;
    }
  };
  GLTFUtil2.getElementFormat = function getElementFormat(type, size, normalized) {
    if (normalized === void 0)
      normalized = false;
    if (type == AccessorComponentType.FLOAT) {
      switch (size) {
        case 1:
          return VertexElementFormat.Float;
        case 2:
          return VertexElementFormat.Vector2;
        case 3:
          return VertexElementFormat.Vector3;
        case 4:
          return VertexElementFormat.Vector4;
      }
    }
    if (type == AccessorComponentType.SHORT) {
      switch (size) {
        case 2:
          return normalized ? VertexElementFormat.NormalizedShort2 : VertexElementFormat.Short2;
        case 3:
        case 4:
          return normalized ? VertexElementFormat.NormalizedShort4 : VertexElementFormat.Short4;
      }
    }
    if (type == AccessorComponentType.UNSIGNED_SHORT) {
      switch (size) {
        case 2:
          return normalized ? VertexElementFormat.NormalizedUShort2 : VertexElementFormat.UShort2;
        case 3:
        case 4:
          return normalized ? VertexElementFormat.NormalizedUShort4 : VertexElementFormat.UShort4;
      }
    }
    if (type == AccessorComponentType.BYTE) {
      switch (size) {
        case 2:
        case 3:
        case 4:
          return normalized ? VertexElementFormat.NormalizedByte4 : VertexElementFormat.Byte4;
      }
    }
    if (type == AccessorComponentType.UNSIGNED_BYTE) {
      switch (size) {
        case 2:
        case 3:
        case 4:
          return normalized ? VertexElementFormat.NormalizedUByte4 : VertexElementFormat.UByte4;
      }
    }
  };
  GLTFUtil2.loadImageBuffer = function loadImageBuffer(imageBuffer, type) {
    return new Promise(function(resolve, reject) {
      var blob = new window.Blob([
        imageBuffer
      ], {
        type
      });
      var img = new Image();
      img.onerror = function() {
        reject(new Error("Failed to load image buffer"));
      };
      img.onload = function() {
        requestAnimationFrame(function() {
          resolve(img);
          img.onload = null;
          img.onerror = null;
          img.onabort = null;
        });
      };
      img.crossOrigin = "anonymous";
      img.src = URL.createObjectURL(blob);
    });
  };
  GLTFUtil2.isAbsoluteUrl = function isAbsoluteUrl(url) {
    return /^(?:http|blob|data:|\/)/.test(url);
  };
  GLTFUtil2.parseRelativeUrl = function parseRelativeUrl(baseUrl, relativeUrl) {
    if (GLTFUtil2.isAbsoluteUrl(relativeUrl)) {
      return relativeUrl;
    }
    return baseUrl.substring(0, baseUrl.lastIndexOf("/") + 1) + GLTFUtil2._formatRelativePath(relativeUrl);
  };
  GLTFUtil2.parseGLB = function parseGLB(glb) {
    var UINT32_LENGTH = 4;
    var GLB_HEADER_MAGIC = 1179937895;
    var GLB_HEADER_LENGTH = 12;
    var GLB_CHUNK_TYPES = {
      JSON: 1313821514,
      BIN: 5130562
    };
    var dataView = new DataView(glb);
    var header = {
      magic: dataView.getUint32(0, true),
      version: dataView.getUint32(UINT32_LENGTH, true),
      length: dataView.getUint32(2 * UINT32_LENGTH, true)
    };
    if (header.magic !== GLB_HEADER_MAGIC) {
      console.error("Invalid glb magic number. Expected 0x46546C67, found 0x" + header.magic.toString(16));
      return null;
    }
    var chunkLength = dataView.getUint32(GLB_HEADER_LENGTH, true);
    var chunkType = dataView.getUint32(GLB_HEADER_LENGTH + UINT32_LENGTH, true);
    if (chunkType !== GLB_CHUNK_TYPES.JSON) {
      console.error("Invalid glb chunk type. Expected 0x4E4F534A, found 0x" + chunkType.toString(16));
      return null;
    }
    var glTFData = new Uint8Array(glb, GLB_HEADER_LENGTH + 2 * UINT32_LENGTH, chunkLength);
    var gltf = JSON.parse(GLTFUtil2.decodeText(glTFData));
    var buffers = [];
    var byteOffset = GLB_HEADER_LENGTH + 2 * UINT32_LENGTH + chunkLength;
    while (byteOffset < header.length) {
      chunkLength = dataView.getUint32(byteOffset, true);
      chunkType = dataView.getUint32(byteOffset + UINT32_LENGTH, true);
      if (chunkType !== GLB_CHUNK_TYPES.BIN) {
        console.error("Invalid glb chunk type. Expected 0x004E4942, found 0x" + chunkType.toString(16));
        return null;
      }
      var currentOffset = byteOffset + 2 * UINT32_LENGTH;
      var buffer = glb.slice(currentOffset, currentOffset + chunkLength);
      buffers.push(buffer);
      byteOffset += chunkLength + 2 * UINT32_LENGTH;
    }
    return {
      gltf,
      buffers
    };
  };
  GLTFUtil2._formatRelativePath = function _formatRelativePath(path) {
    return path.split("/").filter(Boolean).reduce(function(acc, cur) {
      if (cur === "..")
        acc.pop();
      else if (cur !== ".")
        acc.push(cur);
      return acc;
    }, []).join("/");
  };
  return GLTFUtil2;
}();
function _array_like_to_array(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _array_without_holes(arr) {
  if (Array.isArray(arr))
    return _array_like_to_array(arr);
}
function _iterable_to_array(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) {
    return Array.from(iter);
  }
}
function _non_iterable_spread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupported_iterable_to_array(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _array_like_to_array(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(n);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _array_like_to_array(o, minLen);
}
function _to_consumable_array(arr) {
  return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
var Parser = function() {
  function Parser2() {
  }
  Parser2.parseEngineResource = function parseEngineResource(extensionName, extensionSchema, parseResource, context) {
    for (var _len = arguments.length, extra = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
      extra[_key - 4] = arguments[_key];
    }
    var parsers = Parser2._extensionParsers[extensionName];
    if (parsers == null ? void 0 : parsers.length) {
      for (var i = 0; i < parsers.length; i++) {
        var _parsers_i;
        (_parsers_i = parsers[i]).parseEngineResource.apply(_parsers_i, [
          extensionSchema,
          parseResource,
          context
        ].concat(_to_consumable_array(extra)));
      }
    }
  };
  Parser2.createEngineResource = function createEngineResource(extensionName, extensionSchema, context) {
    for (var _len = arguments.length, extra = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      extra[_key - 3] = arguments[_key];
    }
    var parsers = Parser2._extensionParsers[extensionName];
    if (parsers == null ? void 0 : parsers.length) {
      var _parsers_;
      return (_parsers_ = parsers[0]).createEngineResource.apply(_parsers_, [
        extensionSchema,
        context
      ].concat(_to_consumable_array(extra)));
    }
  };
  Parser2.hasExtensionParser = function hasExtensionParser(extensionName) {
    var parsers = Parser2._extensionParsers[extensionName];
    return !!(parsers == null ? void 0 : parsers.length);
  };
  Parser2.initialize = function initialize(extensionName) {
    var parsers = Parser2._extensionParsers[extensionName];
    if (parsers == null ? void 0 : parsers.length) {
      for (var i = 0; i < parsers.length; i++) {
        parsers[i].initialize();
      }
    }
  };
  Parser2._addExtensionParser = function _addExtensionParser(extensionName, extensionParser) {
    if (!Parser2._extensionParsers[extensionName]) {
      Parser2._extensionParsers[extensionName] = [];
    }
    Parser2._extensionParsers[extensionName].push(extensionParser);
  };
  return Parser2;
}();
(function() {
  Parser._extensionParsers = {};
})();
function registerExtension(extensionName) {
  return function(parser) {
    var extensionParser = new parser();
    Parser._addExtensionParser(extensionName, extensionParser);
  };
}
var ExtensionParser = function() {
  function ExtensionParser2() {
  }
  var _proto = ExtensionParser2.prototype;
  _proto.initialize = function initialize() {
  };
  _proto.parseEngineResource = function parseEngineResource(schema, parseResource, context) {
    for (var _len = arguments.length, extra = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      extra[_key - 3] = arguments[_key];
    }
  };
  _proto.createEngineResource = function createEngineResource(schema, context) {
    for (var _len = arguments.length, extra = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      extra[_key - 2] = arguments[_key];
    }
    return null;
  };
  return ExtensionParser2;
}();
var KHR_draco_mesh_compression = function(ExtensionParser2) {
  _inherits3(KHR_draco_mesh_compression1, ExtensionParser2);
  function KHR_draco_mesh_compression1() {
    return ExtensionParser2.apply(this, arguments);
  }
  var _proto = KHR_draco_mesh_compression1.prototype;
  _proto.initialize = function initialize() {
    if (!KHR_draco_mesh_compression._decoder) {
      KHR_draco_mesh_compression._decoder = new DRACODecoder();
    }
  };
  _proto.createEngineResource = function createEngineResource(schema, context, gltfPrimitive) {
    var gltf = context.gltf, buffers = context.buffers;
    var bufferViews = gltf.bufferViews, accessors = gltf.accessors;
    var bufferViewIndex = schema.bufferView, gltfAttributeMap = schema.attributes;
    var attributeMap = {};
    var attributeTypeMap = {};
    for (var attributeName in gltfAttributeMap) {
      attributeMap[attributeName] = gltfAttributeMap[attributeName];
    }
    for (var attributeName1 in gltfPrimitive.attributes) {
      if (gltfAttributeMap[attributeName1] !== void 0) {
        var accessorDef = accessors[gltfPrimitive.attributes[attributeName1]];
        attributeTypeMap[attributeName1] = GLTFUtil.getComponentType(accessorDef.componentType).name;
      }
    }
    var indexAccessor = accessors[gltfPrimitive.indices];
    var indexType = GLTFUtil.getComponentType(indexAccessor.componentType).name;
    var taskConfig = {
      attributeIDs: attributeMap,
      attributeTypes: attributeTypeMap,
      useUniqueIDs: true,
      indexType
    };
    var buffer = GLTFUtil.getBufferViewData(bufferViews[bufferViewIndex], buffers);
    return KHR_draco_mesh_compression._decoder.decode(buffer, taskConfig).then(function(parsedGeometry) {
      return parsedGeometry;
    });
  };
  return KHR_draco_mesh_compression1;
}(ExtensionParser);
KHR_draco_mesh_compression = __decorate2([
  registerExtension("KHR_draco_mesh_compression")
], KHR_draco_mesh_compression);
function _instanceof3(left, right) {
  if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
    return !!right[Symbol.hasInstance](left);
  } else
    return left instanceof right;
}
var KHR_lights_punctual = function(ExtensionParser2) {
  _inherits3(KHR_lights_punctual2, ExtensionParser2);
  function KHR_lights_punctual2() {
    return ExtensionParser2.apply(this, arguments);
  }
  var _proto = KHR_lights_punctual2.prototype;
  _proto.parseEngineResource = function parseEngineResource(schema, entity, context) {
    var color = schema.color, _schema_intensity = schema.intensity, intensity = _schema_intensity === void 0 ? 1 : _schema_intensity, type = schema.type, range = schema.range, spot = schema.spot;
    var glTFResource = context.glTFResource;
    var light;
    if (type === "directional") {
      light = entity.addComponent(DirectLight);
    } else if (type === "point") {
      light = entity.addComponent(PointLight);
    } else if (type === "spot") {
      light = entity.addComponent(SpotLight);
    }
    if (color) {
      light.color.set(color[0], color[1], color[2], 1);
    }
    light.intensity = intensity;
    if (range && !_instanceof3(light, DirectLight)) {
      light.distance = range;
    }
    if (spot && _instanceof3(light, SpotLight)) {
      var _spot_innerConeAngle = spot.innerConeAngle, innerConeAngle = _spot_innerConeAngle === void 0 ? 0 : _spot_innerConeAngle, _spot_outerConeAngle = spot.outerConeAngle, outerConeAngle = _spot_outerConeAngle === void 0 ? Math.PI / 4 : _spot_outerConeAngle;
      light.angle = innerConeAngle;
      light.penumbra = outerConeAngle - innerConeAngle;
    }
    if (!glTFResource.lights)
      glTFResource.lights = [];
    glTFResource.lights.push(light);
  };
  return KHR_lights_punctual2;
}(ExtensionParser);
KHR_lights_punctual = __decorate2([
  registerExtension("KHR_lights_punctual")
], KHR_lights_punctual);
var MaterialParser = function(Parser1) {
  _inherits3(MaterialParser2, Parser1);
  function MaterialParser2() {
    return Parser1.apply(this, arguments);
  }
  var _proto = MaterialParser2.prototype;
  _proto.parse = function parse2(context) {
    var gltf = context.gltf, glTFResource = context.glTFResource;
    var engine = glTFResource.engine, textures = glTFResource.textures;
    if (!gltf.materials)
      return;
    var materialsPromiseInfo = context.materialsPromiseInfo;
    var materials = [];
    for (var i = 0; i < gltf.materials.length; i++) {
      var _gltf_materials_i = gltf.materials[i], _gltf_materials_i_extensions = _gltf_materials_i.extensions, extensions = _gltf_materials_i_extensions === void 0 ? {} : _gltf_materials_i_extensions, pbrMetallicRoughness = _gltf_materials_i.pbrMetallicRoughness, normalTexture = _gltf_materials_i.normalTexture, occlusionTexture = _gltf_materials_i.occlusionTexture, emissiveTexture = _gltf_materials_i.emissiveTexture, emissiveFactor = _gltf_materials_i.emissiveFactor, alphaMode = _gltf_materials_i.alphaMode, alphaCutoff = _gltf_materials_i.alphaCutoff, doubleSided = _gltf_materials_i.doubleSided, _gltf_materials_i_name = _gltf_materials_i.name, name = _gltf_materials_i_name === void 0 ? "" : _gltf_materials_i_name;
      var KHR_materials_unlit2 = extensions.KHR_materials_unlit, KHR_materials_pbrSpecularGlossiness2 = extensions.KHR_materials_pbrSpecularGlossiness, KHR_materials_clearcoat2 = extensions.KHR_materials_clearcoat, KHR_materials_ior2 = extensions.KHR_materials_ior, OASIS_materials_remap = extensions.OASIS_materials_remap;
      var material = null;
      if (KHR_materials_unlit2) {
        material = Parser.createEngineResource("KHR_materials_unlit", KHR_materials_unlit2, context);
      } else if (KHR_materials_pbrSpecularGlossiness2) {
        material = Parser.createEngineResource("KHR_materials_pbrSpecularGlossiness", KHR_materials_pbrSpecularGlossiness2, context);
      } else {
        material = new PBRMaterial(engine);
      }
      material.name = name;
      if (KHR_materials_clearcoat2) {
        Parser.parseEngineResource("KHR_materials_clearcoat", KHR_materials_clearcoat2, material, context);
      }
      if (KHR_materials_ior2) {
        Parser.parseEngineResource("KHR_materials_ior", KHR_materials_ior2, material, context);
      }
      if (pbrMetallicRoughness) {
        var baseColorFactor = pbrMetallicRoughness.baseColorFactor, baseColorTexture = pbrMetallicRoughness.baseColorTexture, metallicFactor = pbrMetallicRoughness.metallicFactor, roughnessFactor = pbrMetallicRoughness.roughnessFactor, metallicRoughnessTexture = pbrMetallicRoughness.metallicRoughnessTexture;
        if (baseColorFactor) {
          material.baseColor = new Color(Color.linearToGammaSpace(baseColorFactor[0]), Color.linearToGammaSpace(baseColorFactor[1]), Color.linearToGammaSpace(baseColorFactor[2]), baseColorFactor[3]);
        }
        if (baseColorTexture) {
          material.baseTexture = textures[baseColorTexture.index];
          MaterialParser2._parseTextureTransform(material, baseColorTexture.extensions, context);
        }
        if (!KHR_materials_unlit2 && !KHR_materials_pbrSpecularGlossiness2) {
          var m = material;
          m.metallic = metallicFactor != null ? metallicFactor : 1;
          m.roughness = roughnessFactor != null ? roughnessFactor : 1;
          if (metallicRoughnessTexture) {
            m.roughnessMetallicTexture = textures[metallicRoughnessTexture.index];
            MaterialParser2._parseTextureTransform(material, metallicRoughnessTexture.extensions, context);
          }
        }
      }
      if (!KHR_materials_unlit2) {
        var m1 = material;
        if (emissiveTexture) {
          m1.emissiveTexture = textures[emissiveTexture.index];
          MaterialParser2._parseTextureTransform(material, emissiveTexture.extensions, context);
        }
        if (emissiveFactor) {
          m1.emissiveColor = new Color(Color.linearToGammaSpace(emissiveFactor[0]), Color.linearToGammaSpace(emissiveFactor[1]), Color.linearToGammaSpace(emissiveFactor[2]));
        }
        if (normalTexture) {
          var index = normalTexture.index, scale = normalTexture.scale;
          m1.normalTexture = textures[index];
          MaterialParser2._parseTextureTransform(material, normalTexture.extensions, context);
          if (scale !== void 0) {
            m1.normalTextureIntensity = scale;
          }
        }
        if (occlusionTexture) {
          var index1 = occlusionTexture.index, strength = occlusionTexture.strength, texCoord = occlusionTexture.texCoord;
          m1.occlusionTexture = textures[index1];
          MaterialParser2._parseTextureTransform(material, occlusionTexture.extensions, context);
          if (strength !== void 0) {
            m1.occlusionTextureIntensity = strength;
          }
          if (texCoord === TextureCoordinate.UV1) {
            m1.occlusionTextureCoord = TextureCoordinate.UV1;
          } else if (texCoord > TextureCoordinate.UV1) {
            Logger.warn("Occlusion texture uv coordinate must be UV0 or UV1.");
          }
        }
      }
      if (OASIS_materials_remap) {
        var _gltf_extensions;
        gltf.extensions = (_gltf_extensions = gltf.extensions) != null ? _gltf_extensions : {};
        var _gltf_extensions_OASIS_materials_remap;
        gltf.extensions["OASIS_materials_remap"] = (_gltf_extensions_OASIS_materials_remap = gltf.extensions["OASIS_materials_remap"]) != null ? _gltf_extensions_OASIS_materials_remap : {};
        gltf.extensions["OASIS_materials_remap"][i] = Parser.createEngineResource("OASIS_materials_remap", OASIS_materials_remap, context);
      }
      if (doubleSided) {
        material.renderFace = RenderFace.Double;
      } else {
        material.renderFace = RenderFace.Front;
      }
      switch (alphaMode) {
        case MaterialAlphaMode.OPAQUE:
          material.isTransparent = false;
          break;
        case MaterialAlphaMode.BLEND:
          material.isTransparent = true;
          break;
        case MaterialAlphaMode.MASK:
          material.alphaCutoff = alphaCutoff != null ? alphaCutoff : 0.5;
          break;
      }
      materials[i] = material;
    }
    glTFResource.materials = materials;
    materialsPromiseInfo.resolve(materials);
    return materialsPromiseInfo.promise;
  };
  MaterialParser2._parseTextureTransform = function _parseTextureTransform(material, extensions, context) {
    if (extensions === void 0)
      extensions = {};
    var schema = extensions.KHR_texture_transform;
    if (schema) {
      Parser.parseEngineResource("KHR_texture_transform", schema, material, context);
    }
  };
  return MaterialParser2;
}(Parser);
var KHR_materials_clearcoat = function(ExtensionParser2) {
  _inherits3(KHR_materials_clearcoat2, ExtensionParser2);
  function KHR_materials_clearcoat2() {
    return ExtensionParser2.apply(this, arguments);
  }
  var _proto = KHR_materials_clearcoat2.prototype;
  _proto.parseEngineResource = function parseEngineResource(schema, material, context) {
    var textures = context.glTFResource.textures;
    var _schema_clearcoatFactor = schema.clearcoatFactor, clearcoatFactor = _schema_clearcoatFactor === void 0 ? 0 : _schema_clearcoatFactor, clearcoatTexture = schema.clearcoatTexture, _schema_clearcoatRoughnessFactor = schema.clearcoatRoughnessFactor, clearcoatRoughnessFactor = _schema_clearcoatRoughnessFactor === void 0 ? 0 : _schema_clearcoatRoughnessFactor, clearcoatRoughnessTexture = schema.clearcoatRoughnessTexture, clearcoatNormalTexture = schema.clearcoatNormalTexture;
    material.clearCoat = clearcoatFactor;
    material.clearCoatRoughness = clearcoatRoughnessFactor;
    if (clearcoatTexture) {
      material.clearCoatTexture = textures[clearcoatTexture.index];
      MaterialParser._parseTextureTransform(material, clearcoatTexture.extensions, context);
    }
    if (clearcoatRoughnessTexture) {
      material.clearCoatRoughnessTexture = textures[clearcoatRoughnessTexture.index];
      MaterialParser._parseTextureTransform(material, clearcoatRoughnessTexture.extensions, context);
    }
    if (clearcoatNormalTexture) {
      material.clearCoatNormalTexture = textures[clearcoatNormalTexture.index];
      MaterialParser._parseTextureTransform(material, clearcoatNormalTexture.extensions, context);
    }
  };
  return KHR_materials_clearcoat2;
}(ExtensionParser);
KHR_materials_clearcoat = __decorate2([
  registerExtension("KHR_materials_clearcoat")
], KHR_materials_clearcoat);
var KHR_materials_ior = function(ExtensionParser2) {
  _inherits3(KHR_materials_ior2, ExtensionParser2);
  function KHR_materials_ior2() {
    return ExtensionParser2.apply(this, arguments);
  }
  var _proto = KHR_materials_ior2.prototype;
  _proto.parseEngineResource = function parseEngineResource(schema, material, context) {
    var _schema_ior = schema.ior, ior = _schema_ior === void 0 ? 1.5 : _schema_ior;
    material.ior = ior;
  };
  return KHR_materials_ior2;
}(ExtensionParser);
KHR_materials_ior = __decorate2([
  registerExtension("KHR_materials_ior")
], KHR_materials_ior);
var KHR_materials_pbrSpecularGlossiness = function(ExtensionParser2) {
  _inherits3(KHR_materials_pbrSpecularGlossiness2, ExtensionParser2);
  function KHR_materials_pbrSpecularGlossiness2() {
    return ExtensionParser2.apply(this, arguments);
  }
  var _proto = KHR_materials_pbrSpecularGlossiness2.prototype;
  _proto.createEngineResource = function createEngineResource(schema, context) {
    var _context_glTFResource = context.glTFResource, engine = _context_glTFResource.engine, textures = _context_glTFResource.textures;
    var material = new PBRSpecularMaterial(engine);
    var diffuseFactor = schema.diffuseFactor, diffuseTexture = schema.diffuseTexture, specularFactor = schema.specularFactor, glossinessFactor = schema.glossinessFactor, specularGlossinessTexture = schema.specularGlossinessTexture;
    if (diffuseFactor) {
      material.baseColor = new Color(Color.linearToGammaSpace(diffuseFactor[0]), Color.linearToGammaSpace(diffuseFactor[1]), Color.linearToGammaSpace(diffuseFactor[2]), diffuseFactor[3]);
    }
    if (diffuseTexture) {
      material.baseTexture = textures[diffuseTexture.index];
      MaterialParser._parseTextureTransform(material, diffuseTexture.extensions, context);
    }
    if (specularFactor) {
      material.specularColor = new Color(Color.linearToGammaSpace(specularFactor[0]), Color.linearToGammaSpace(specularFactor[1]), Color.linearToGammaSpace(specularFactor[2]));
    }
    if (glossinessFactor !== void 0) {
      material.glossiness = glossinessFactor;
    }
    if (specularGlossinessTexture) {
      material.specularGlossinessTexture = textures[specularGlossinessTexture.index];
      MaterialParser._parseTextureTransform(material, specularGlossinessTexture.extensions, context);
    }
    return material;
  };
  return KHR_materials_pbrSpecularGlossiness2;
}(ExtensionParser);
KHR_materials_pbrSpecularGlossiness = __decorate2([
  registerExtension("KHR_materials_pbrSpecularGlossiness")
], KHR_materials_pbrSpecularGlossiness);
var KHR_materials_unlit = function(ExtensionParser2) {
  _inherits3(KHR_materials_unlit2, ExtensionParser2);
  function KHR_materials_unlit2() {
    return ExtensionParser2.apply(this, arguments);
  }
  var _proto = KHR_materials_unlit2.prototype;
  _proto.createEngineResource = function createEngineResource(schema, context) {
    var engine = context.glTFResource.engine;
    var material = new UnlitMaterial(engine);
    return material;
  };
  return KHR_materials_unlit2;
}(ExtensionParser);
KHR_materials_unlit = __decorate2([
  registerExtension("KHR_materials_unlit")
], KHR_materials_unlit);
var KHR_materials_variants = function(ExtensionParser2) {
  _inherits3(KHR_materials_variants2, ExtensionParser2);
  function KHR_materials_variants2() {
    return ExtensionParser2.apply(this, arguments);
  }
  var _proto = KHR_materials_variants2.prototype;
  _proto.parseEngineResource = function parseEngineResource(schema, renderer, context) {
    var _context_gltf = context.gltf, _context_gltf_extensions = _context_gltf.extensions, _context_gltf_extensions_KHR_materials_variants = _context_gltf_extensions.KHR_materials_variants, variantNames = _context_gltf_extensions_KHR_materials_variants.variants, glTFResource = context.glTFResource;
    var mappings = schema.mappings;
    for (var i = 0; i < mappings.length; i++) {
      var _mappings_i = mappings[i], material = _mappings_i.material, variants = _mappings_i.variants;
      if (!glTFResource.variants)
        glTFResource.variants = [];
      glTFResource.variants.push({
        renderer,
        material: glTFResource.materials[material],
        variants: variants.map(function(index) {
          return variantNames[index].name;
        })
      });
    }
  };
  return KHR_materials_variants2;
}(ExtensionParser);
KHR_materials_variants = __decorate2([
  registerExtension("KHR_materials_variants")
], KHR_materials_variants);
var KHR_mesh_quantization = function(ExtensionParser2) {
  _inherits3(KHR_mesh_quantization2, ExtensionParser2);
  function KHR_mesh_quantization2() {
    return ExtensionParser2.apply(this, arguments);
  }
  return KHR_mesh_quantization2;
}(ExtensionParser);
KHR_mesh_quantization = __decorate2([
  registerExtension("KHR_mesh_quantization")
], KHR_mesh_quantization);
var KHR_texture_transform = function(ExtensionParser2) {
  _inherits3(KHR_texture_transform2, ExtensionParser2);
  function KHR_texture_transform2() {
    return ExtensionParser2.apply(this, arguments);
  }
  var _proto = KHR_texture_transform2.prototype;
  _proto.parseEngineResource = function parseEngineResource(schema, material, context) {
    var offset = schema.offset, rotation = schema.rotation, scale = schema.scale, texCoord = schema.texCoord;
    if (offset) {
      material.tilingOffset.z = offset[0];
      material.tilingOffset.w = offset[1];
    }
    if (scale) {
      material.tilingOffset.x = scale[0];
      material.tilingOffset.y = scale[1];
    }
    if (rotation) {
      Logger.warn("rotation in KHR_texture_transform is not supported now");
    }
    if (texCoord) {
      Logger.warn("texCoord in KHR_texture_transform is not supported now");
    }
  };
  return KHR_texture_transform2;
}(ExtensionParser);
KHR_texture_transform = __decorate2([
  registerExtension("KHR_texture_transform")
], KHR_texture_transform);
var GalaceanMaterialsRemap = function(ExtensionParser2) {
  _inherits3(GalaceanMaterialsRemap2, ExtensionParser2);
  function GalaceanMaterialsRemap2() {
    return ExtensionParser2.apply(this, arguments);
  }
  var _proto = GalaceanMaterialsRemap2.prototype;
  _proto.createEngineResource = function createEngineResource(schema, context) {
    var engine = context.glTFResource.engine;
    return engine.resourceManager.getResourceByRef(schema);
  };
  return GalaceanMaterialsRemap2;
}(ExtensionParser);
GalaceanMaterialsRemap = __decorate2([
  registerExtension("OASIS_materials_remap")
], GalaceanMaterialsRemap);
function _create_for_of_iterator_helper_loose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupported_iterable_to_array(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var AnimationParser = function(Parser2) {
  _inherits3(AnimationParser2, Parser2);
  function AnimationParser2() {
    return Parser2.apply(this, arguments);
  }
  var _proto = AnimationParser2.prototype;
  _proto.parse = function parse2(context) {
    var gltf = context.gltf;
    context.buffers;
    var glTFResource = context.glTFResource;
    var entities = glTFResource.entities;
    var animations = gltf.animations, accessors = gltf.accessors;
    if (!animations) {
      return;
    }
    var animationClipsPromiseInfo = context.animationClipsPromiseInfo;
    var animationClipCount = animations.length;
    var animationClips = new Array(animationClipCount);
    var animationsIndices = new Array(animationClipCount);
    for (var i = 0; i < animationClipCount; i++) {
      var gltfAnimation = animations[i];
      var channels = gltfAnimation.channels, samplers = gltfAnimation.samplers, _gltfAnimation_name = gltfAnimation.name, name = _gltfAnimation_name === void 0 ? "AnimationClip" + i : _gltfAnimation_name;
      var animationClip = new AnimationClip(name);
      var sampleDataCollection = new Array();
      for (var j = 0, m = samplers.length; j < m; j++) {
        var gltfSampler = samplers[j];
        var inputAccessor = accessors[gltfSampler.input];
        var outputAccessor = accessors[gltfSampler.output];
        var input = GLTFUtil.getAccessorBuffer(context, gltf, inputAccessor).data;
        var output = GLTFUtil.getAccessorBuffer(context, gltf, outputAccessor).data;
        if (outputAccessor.normalized) {
          var scale = GLTFUtil.getNormalizedComponentScale(outputAccessor.componentType);
          var scaled = new Float32Array(output.length);
          for (var k = 0, v = output.length; k < v; k++) {
            scaled[k] = output[k] * scale;
          }
          output = scaled;
        }
        var outputStride = output.length / input.length;
        var _gltfSampler_interpolation;
        var interpolation = (_gltfSampler_interpolation = gltfSampler.interpolation) != null ? _gltfSampler_interpolation : AnimationSamplerInterpolation.Linear;
        var samplerInterpolation = void 0;
        switch (interpolation) {
          case AnimationSamplerInterpolation.CubicSpine:
            samplerInterpolation = InterpolationType.CubicSpine;
            break;
          case AnimationSamplerInterpolation.Step:
            samplerInterpolation = InterpolationType.Step;
            break;
          case AnimationSamplerInterpolation.Linear:
            samplerInterpolation = InterpolationType.Linear;
            break;
        }
        input[input.length - 1];
        sampleDataCollection.push({
          type: outputAccessor.type,
          interpolation: samplerInterpolation,
          input,
          output,
          outputSize: outputStride
        });
      }
      for (var j1 = 0, m1 = channels.length; j1 < m1; j1++) {
        var gltfChannel = channels[j1];
        var target = gltfChannel.target;
        var channelTargetEntity = entities[target.node];
        var relativePath = "";
        var entity = channelTargetEntity;
        while (entity.parent) {
          relativePath = relativePath === "" ? "" + entity.name : entity.name + "/" + relativePath;
          entity = entity.parent;
        }
        var ComponentType = void 0;
        var propertyName = void 0;
        switch (target.path) {
          case AnimationChannelTargetPath.TRANSLATION:
            ComponentType = Transform;
            propertyName = "position";
            break;
          case AnimationChannelTargetPath.ROTATION:
            ComponentType = Transform;
            propertyName = "rotationQuaternion";
            break;
          case AnimationChannelTargetPath.SCALE:
            ComponentType = Transform;
            propertyName = "scale";
            break;
          case AnimationChannelTargetPath.WEIGHTS:
            ComponentType = SkinnedMeshRenderer;
            propertyName = "blendShapeWeights";
            break;
        }
        var curve = this._addCurve(target.path, gltfChannel, sampleDataCollection);
        animationClip.addCurveBinding(relativePath, ComponentType, propertyName, curve);
      }
      animationClips[i] = animationClip;
      animationsIndices[i] = {
        name,
        index: i
      };
    }
    glTFResource.animations = animationClips;
    glTFResource._animationsIndices = animationsIndices;
    animationClipsPromiseInfo.resolve(animationClips);
    return animationClipsPromiseInfo.promise;
  };
  _proto._addCurve = function _addCurve(animationchannelTargetPath, gltfChannel, sampleDataCollection) {
    var sampleData = sampleDataCollection[gltfChannel.sampler];
    var input = sampleData.input, output = sampleData.output, outputSize = sampleData.outputSize;
    switch (animationchannelTargetPath) {
      case AnimationChannelTargetPath.TRANSLATION:
      case AnimationChannelTargetPath.SCALE: {
        var curve = new AnimationVector3Curve();
        var interpolation = curve.interpolation = sampleData.interpolation;
        var offset = 0;
        for (var i = 0, n = input.length; i < n; i++) {
          var keyframe = new Keyframe();
          keyframe.time = input[i];
          if (interpolation === InterpolationType.CubicSpine) {
            keyframe.inTangent = new Vector3(output[offset++], output[offset++], output[offset++]);
            keyframe.value = new Vector3(output[offset++], output[offset++], output[offset++]);
            keyframe.outTangent = new Vector3(output[offset++], output[offset++], output[offset++]);
          } else {
            keyframe.value = new Vector3(output[offset++], output[offset++], output[offset++]);
          }
          curve.addKey(keyframe);
        }
        return curve;
      }
      case AnimationChannelTargetPath.ROTATION: {
        var curve1 = new AnimationQuaternionCurve();
        var interpolation1 = curve1.interpolation = sampleData.interpolation;
        var offset1 = 0;
        for (var i1 = 0, n1 = input.length; i1 < n1; i1++) {
          var keyframe1 = new Keyframe();
          keyframe1.time = input[i1];
          if (interpolation1 === InterpolationType.CubicSpine) {
            keyframe1.inTangent = new Vector4(output[offset1++], output[offset1++], output[offset1++], output[offset1++]);
            keyframe1.value = new Quaternion(output[offset1++], output[offset1++], output[offset1++], output[offset1++]);
            keyframe1.outTangent = new Vector4(output[offset1++], output[offset1++], output[offset1++], output[offset1++]);
          } else {
            keyframe1.value = new Quaternion(output[offset1++], output[offset1++], output[offset1++], output[offset1++]);
          }
          curve1.addKey(keyframe1);
        }
        return curve1;
      }
      case AnimationChannelTargetPath.WEIGHTS: {
        var curve2 = new AnimationFloatArrayCurve();
        curve2.interpolation = sampleData.interpolation;
        var offset2 = 0;
        for (var i2 = 0, n2 = input.length; i2 < n2; i2++) {
          var keyframe2 = new Keyframe();
          keyframe2.time = input[i2];
          if (curve2.interpolation === InterpolationType.CubicSpine) {
            keyframe2.inTangent = Array.from(output.subarray(offset2, offset2 + outputSize));
            offset2 += outputSize;
            keyframe2.value = output.subarray(offset2, offset2 + outputSize);
            offset2 += outputSize;
            keyframe2.outTangent = Array.from(output.subarray(offset2, offset2 + outputSize));
            offset2 += outputSize;
          } else {
            keyframe2.value = output.subarray(offset2, offset2 + outputSize);
            offset2 += outputSize;
          }
          curve2.addKey(keyframe2);
        }
        return curve2;
      }
    }
  };
  return AnimationParser2;
}(Parser);
var BufferParser = function(Parser2) {
  _inherits3(BufferParser2, Parser2);
  function BufferParser2() {
    return Parser2.apply(this, arguments);
  }
  var _proto = BufferParser2.prototype;
  _proto.parse = function parse2(context) {
    var glTFResource = context.glTFResource;
    var url = glTFResource.url;
    if (this._isGLB(url)) {
      return request(url, {
        type: "arraybuffer"
      }).then(GLTFUtil.parseGLB).then(function(param) {
        var gltf = param.gltf, buffers = param.buffers;
        context.gltf = gltf;
        context.buffers = buffers;
      });
    } else {
      return request(url, {
        type: "json"
      }).then(function(gltf) {
        context.gltf = gltf;
        return Promise.all(gltf.buffers.map(function(buffer) {
          return request(GLTFUtil.parseRelativeUrl(url, buffer.uri), {
            type: "arraybuffer"
          });
        })).then(function(buffers) {
          context.buffers = buffers;
        });
      });
    }
  };
  _proto._isGLB = function _isGLB(url) {
    var index = url.lastIndexOf(".");
    return url.substring(index + 1, index + 4) === "glb";
  };
  return BufferParser2;
}(Parser);
var EntityParser = function(Parser2) {
  _inherits3(EntityParser2, Parser2);
  function EntityParser2() {
    return Parser2.apply(this, arguments);
  }
  var _proto = EntityParser2.prototype;
  _proto.parse = function parse2(context) {
    var glTFResource = context.glTFResource, nodes = context.gltf.nodes;
    var engine = glTFResource.engine;
    if (!nodes)
      return;
    var entities = [];
    for (var i = 0; i < nodes.length; i++) {
      var gltfNode = nodes[i];
      var matrix = gltfNode.matrix, translation = gltfNode.translation, rotation = gltfNode.rotation, scale = gltfNode.scale;
      var entity = new Entity(engine, gltfNode.name || "" + EntityParser2._defaultName + i);
      var transform = entity.transform;
      if (matrix) {
        var localMatrix = transform.localMatrix;
        localMatrix.copyFromArray(matrix);
        transform.localMatrix = localMatrix;
      } else {
        if (translation) {
          transform.setPosition(translation[0], translation[1], translation[2]);
        }
        if (rotation) {
          transform.setRotationQuaternion(rotation[0], rotation[1], rotation[2], rotation[3]);
        }
        if (scale) {
          transform.setScale(scale[0], scale[1], scale[2]);
        }
      }
      entities[i] = entity;
    }
    glTFResource.entities = entities;
    this._buildEntityTree(context, glTFResource);
    this._createSceneRoots(context, glTFResource);
  };
  _proto._buildEntityTree = function _buildEntityTree(context, glTFResource) {
    var nodes = context.gltf.nodes;
    var entities = glTFResource.entities;
    for (var i = 0; i < nodes.length; i++) {
      var children = nodes[i].children;
      var entity = entities[i];
      if (children) {
        for (var j = 0; j < children.length; j++) {
          var childEntity = entities[children[j]];
          entity.addChild(childEntity);
        }
      }
    }
  };
  _proto._createSceneRoots = function _createSceneRoots(context, glTFResource) {
    var _context_gltf = context.gltf, tmp = _context_gltf.scene, sceneID = tmp === void 0 ? 0 : tmp, scenes = _context_gltf.scenes;
    var engine = glTFResource.engine, entities = glTFResource.entities;
    if (!scenes)
      return;
    var sceneRoots = [];
    for (var i = 0; i < scenes.length; i++) {
      var nodes = scenes[i].nodes;
      if (!nodes)
        continue;
      if (nodes.length === 1) {
        sceneRoots[i] = entities[nodes[0]];
      } else {
        var rootEntity = new Entity(engine, "GLTF_ROOT");
        for (var j = 0; j < nodes.length; j++) {
          rootEntity.addChild(entities[nodes[j]]);
        }
        sceneRoots[i] = rootEntity;
      }
    }
    glTFResource.sceneRoots = sceneRoots;
    glTFResource.defaultSceneRoot = sceneRoots[sceneID];
  };
  return EntityParser2;
}(Parser);
(function() {
  EntityParser._defaultName = "_GLTF_ENTITY_";
})();
var MeshParser = function(Parser1) {
  _inherits3(MeshParser2, Parser1);
  function MeshParser2() {
    return Parser1.apply(this, arguments);
  }
  var _proto = MeshParser2.prototype;
  _proto.parse = function parse2(context) {
    var _loop = function(i2) {
      var _loop2 = function(j2) {
        var gltfPrimitive = gltfMesh.primitives[j2];
        var _gltfPrimitive_extensions = gltfPrimitive.extensions, extensions = _gltfPrimitive_extensions === void 0 ? {} : _gltfPrimitive_extensions;
        var KHR_draco_mesh_compression2 = extensions.KHR_draco_mesh_compression;
        primitivePromises[j2] = new Promise(function(resolve) {
          var mesh = new ModelMesh(engine, gltfMesh.name || j2 + "");
          if (KHR_draco_mesh_compression2) {
            Parser.createEngineResource("KHR_draco_mesh_compression", KHR_draco_mesh_compression2, context, gltfPrimitive).then(function(decodedGeometry) {
              return _this._parseMeshFromGLTFPrimitiveDraco(mesh, gltfMesh, gltfPrimitive, gltf, function(attributeSemantic) {
                for (var j3 = 0; j3 < decodedGeometry.attributes.length; j3++) {
                  if (decodedGeometry.attributes[j3].name === attributeSemantic) {
                    return decodedGeometry.attributes[j3].array;
                  }
                }
                return null;
              }, function(attributeSemantic, shapeIndex) {
                throw "BlendShape animation is not supported when using draco.";
              }, function() {
                return decodedGeometry.index.array;
              }, context.keepMeshData);
            }).then(resolve);
          } else {
            _this._parseMeshFromGLTFPrimitive(context, mesh, gltfMesh, gltfPrimitive, gltf, function(attributeSemantic) {
              return null;
            }, function(attributeName, shapeIndex) {
              var shapeAccessorIdx = gltfPrimitive.targets[shapeIndex];
              var attributeAccessorIdx = shapeAccessorIdx[attributeName];
              if (attributeAccessorIdx) {
                var accessor = gltf.accessors[attributeAccessorIdx];
                return GLTFUtil.getAccessorData(gltf, accessor, buffers);
              } else {
                return null;
              }
            }, function() {
              var indexAccessor = gltf.accessors[gltfPrimitive.indices];
              return GLTFUtil.getAccessorData(gltf, indexAccessor, buffers);
            }, context.keepMeshData).then(resolve);
          }
        });
      };
      var gltfMesh = gltf.meshes[i2];
      var primitivePromises = [];
      for (var j = 0; j < gltfMesh.primitives.length; j++)
        _loop2(j);
      meshPromises[i2] = Promise.all(primitivePromises);
    };
    var _this = this;
    var gltf = context.gltf, buffers = context.buffers, glTFResource = context.glTFResource;
    var engine = glTFResource.engine;
    if (!gltf.meshes)
      return;
    var meshesPromiseInfo = context.meshesPromiseInfo;
    var meshPromises = [];
    for (var i = 0; i < gltf.meshes.length; i++)
      _loop(i);
    AssetPromise.all(meshPromises).then(function(meshes) {
      glTFResource.meshes = meshes;
      meshesPromiseInfo.resolve(meshes);
    }).catch(meshesPromiseInfo.reject);
    return meshesPromiseInfo.promise;
  };
  _proto._parseMeshFromGLTFPrimitive = function _parseMeshFromGLTFPrimitive(context, mesh, gltfMesh, gltfPrimitive, gltf, getVertexBufferData, getBlendShapeData, getIndexBufferData, keepMeshData) {
    var accessors = gltf.accessors;
    context.buffers;
    var attributes = gltfPrimitive.attributes, targets = gltfPrimitive.targets, indices = gltfPrimitive.indices, mode = gltfPrimitive.mode;
    var engine = mesh.engine;
    var vertexElements = new Array();
    var vertexCount;
    var bufferBindIndex = 0;
    var positions;
    var boneIndices;
    var boneWeights;
    if (keepMeshData) {
      positions = new Array(vertexCount);
      boneIndices = new Array(vertexCount);
      boneWeights = new Array(vertexCount);
    }
    for (var attribute in attributes) {
      var accessor = accessors[attributes[attribute]];
      var accessorBuffer = GLTFUtil.getAccessorBuffer(context, gltf, accessor);
      var dataElementSize = GLTFUtil.getAccessorTypeSize(accessor.type);
      var accessorCount = accessor.count;
      var vertices = accessorBuffer.data;
      var vertexElement = void 0;
      var meshId = mesh.instanceId;
      var vertexBindingInfos = accessorBuffer.vertexBindingInfos;
      var elementNormalized = accessor.normalized;
      var elementFormat = GLTFUtil.getElementFormat(accessor.componentType, dataElementSize, elementNormalized);
      var scaleFactor = void 0;
      elementNormalized && (scaleFactor = GLTFUtil.getNormalizedComponentScale(accessor.componentType));
      var elementOffset = void 0;
      if (accessorBuffer.interleaved) {
        var byteOffset = accessor.byteOffset || 0;
        var stride = accessorBuffer.stride;
        elementOffset = byteOffset % stride;
        if (vertexBindingInfos[meshId] === void 0) {
          vertexElement = new VertexElement(attribute, elementOffset, elementFormat, bufferBindIndex);
          var vertexBuffer = accessorBuffer.vertexBuffer;
          if (!vertexBuffer) {
            vertexBuffer = new Buffer(engine, BufferBindFlag.VertexBuffer, vertices.byteLength, BufferUsage.Static);
            vertexBuffer.setData(vertices);
            accessorBuffer.vertexBuffer = vertexBuffer;
          }
          mesh.setVertexBufferBinding(vertexBuffer, stride, bufferBindIndex);
          vertexBindingInfos[meshId] = bufferBindIndex++;
        } else {
          vertexElement = new VertexElement(attribute, elementOffset, elementFormat, vertexBindingInfos[meshId]);
        }
      } else {
        elementOffset = 0;
        vertexElement = new VertexElement(attribute, elementOffset, elementFormat, bufferBindIndex);
        var vertexBuffer1 = new Buffer(engine, BufferBindFlag.VertexBuffer, vertices.byteLength, BufferUsage.Static);
        vertexBuffer1.setData(vertices);
        mesh.setVertexBufferBinding(vertexBuffer1, accessorBuffer.stride, bufferBindIndex);
        vertexBindingInfos[meshId] = bufferBindIndex++;
      }
      vertexElements.push(vertexElement);
      if (attribute === "POSITION") {
        vertexCount = accessorCount;
        var _mesh_bounds = mesh.bounds, min = _mesh_bounds.min, max = _mesh_bounds.max;
        if (accessor.min && accessor.max) {
          min.copyFromArray(accessor.min);
          max.copyFromArray(accessor.max);
          if (keepMeshData) {
            var baseOffset = elementOffset / vertices.BYTES_PER_ELEMENT;
            var stride1 = vertices.length / accessorCount;
            for (var j = 0; j < accessorCount; j++) {
              var offset = baseOffset + j * stride1;
              var position = new Vector3(vertices[offset], vertices[offset + 1], vertices[offset + 2]);
              elementNormalized && position.scale(scaleFactor);
              positions[j] = position;
            }
          }
        } else {
          var position1 = MeshParser2._tempVector3;
          min.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
          max.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
          var baseOffset1 = elementOffset / vertices.BYTES_PER_ELEMENT;
          var stride2 = vertices.length / accessorCount;
          for (var j1 = 0; j1 < accessorCount; j1++) {
            var offset1 = baseOffset1 + j1 * stride2;
            position1.copyFromArray(vertices, offset1);
            Vector3.min(min, position1, min);
            Vector3.max(max, position1, max);
            if (keepMeshData) {
              var clonePosition = position1.clone();
              elementNormalized && clonePosition.scale(scaleFactor);
              positions[j1] = clonePosition;
            }
          }
        }
        if (elementNormalized) {
          min.scale(scaleFactor);
          max.scale(scaleFactor);
        }
      } else if (attribute === "JOINTS_0" && keepMeshData) {
        var baseOffset2 = elementOffset / vertices.BYTES_PER_ELEMENT;
        var stride3 = vertices.length / accessorCount;
        for (var j2 = 0; j2 < accessorCount; j2++) {
          var offset2 = baseOffset2 + j2 * stride3;
          var boneIndex = new Vector4(vertices[offset2], vertices[offset2 + 1], vertices[offset2 + 2], vertices[offset2 + 3]);
          elementNormalized && boneIndex.scale(scaleFactor);
          boneIndices[j2] = boneIndex;
        }
      } else if (attribute === "WEIGHTS_0" && keepMeshData) {
        var baseOffset3 = elementOffset / vertices.BYTES_PER_ELEMENT;
        var stride4 = vertices.length / accessorCount;
        for (var j3 = 0; j3 < accessorCount; j3++) {
          var offset3 = baseOffset3 + j3 * stride4;
          var boneWeight = new Vector4(vertices[offset3], vertices[offset3 + 1], vertices[offset3 + 2], vertices[offset3 + 3]);
          elementNormalized && boneWeight.scale(scaleFactor);
          boneWeights[j3] = boneWeight;
        }
      }
    }
    mesh.setVertexElements(vertexElements);
    if (indices !== void 0) {
      var indexAccessor = gltf.accessors[indices];
      var indexData = getIndexBufferData();
      mesh.setIndices(indexData);
      mesh.addSubMesh(0, indexAccessor.count, mode);
    } else {
      mesh.addSubMesh(0, vertexCount, mode);
    }
    targets && this._createBlendShape(mesh, gltfMesh, targets, getBlendShapeData);
    mesh.uploadData(!keepMeshData);
    mesh._positions = positions;
    mesh._boneIndices = boneIndices;
    mesh._boneWeights = boneWeights;
    return Promise.resolve(mesh);
  };
  _proto._createBlendShape = function _createBlendShape(mesh, glTFMesh, glTFTargets, getBlendShapeData) {
    var blendShapeNames = glTFMesh.extras ? glTFMesh.extras.targetNames : null;
    for (var i = 0, n = glTFTargets.length; i < n; i++) {
      var name = blendShapeNames ? blendShapeNames[i] : "blendShape" + i;
      var deltaPosBuffer = getBlendShapeData("POSITION", i);
      var deltaNorBuffer = getBlendShapeData("NORMAL", i);
      var deltaTanBuffer = getBlendShapeData("TANGENT", i);
      var deltaPositions = deltaPosBuffer ? GLTFUtil.floatBufferToVector3Array(deltaPosBuffer) : null;
      var deltaNormals = deltaNorBuffer ? GLTFUtil.floatBufferToVector3Array(deltaNorBuffer) : null;
      var deltaTangents = deltaTanBuffer ? GLTFUtil.floatBufferToVector3Array(deltaTanBuffer) : null;
      var blendShape = new BlendShape(name);
      blendShape.addFrame(1, deltaPositions, deltaNormals, deltaTangents);
      mesh.addBlendShape(blendShape);
    }
  };
  _proto._parseMeshFromGLTFPrimitiveDraco = function _parseMeshFromGLTFPrimitiveDraco(mesh, gltfMesh, gltfPrimitive, gltf, getVertexBufferData, getBlendShapeData, getIndexBufferData, keepMeshData) {
    var attributes = gltfPrimitive.attributes, targets = gltfPrimitive.targets, indices = gltfPrimitive.indices, mode = gltfPrimitive.mode;
    var vertexCount;
    var accessors = gltf.accessors;
    var accessor = accessors[attributes["POSITION"]];
    var positionBuffer = getVertexBufferData("POSITION");
    var positions = GLTFUtil.floatBufferToVector3Array(positionBuffer);
    mesh.setPositions(positions);
    var bounds = mesh.bounds;
    vertexCount = accessor.count;
    if (accessor.min && accessor.max) {
      bounds.min.copyFromArray(accessor.min);
      bounds.max.copyFromArray(accessor.max);
    } else {
      var position = MeshParser2._tempVector3;
      var min = bounds.min, max = bounds.max;
      min.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
      max.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
      var stride = positionBuffer.length / vertexCount;
      for (var j = 0; j < vertexCount; j++) {
        var offset = j * stride;
        position.copyFromArray(positionBuffer, offset);
        Vector3.min(min, position, min);
        Vector3.max(max, position, max);
      }
    }
    for (var attributeSemantic in attributes) {
      if (attributeSemantic === "POSITION") {
        continue;
      }
      var bufferData = getVertexBufferData(attributeSemantic);
      switch (attributeSemantic) {
        case "NORMAL":
          var normals = GLTFUtil.floatBufferToVector3Array(bufferData);
          mesh.setNormals(normals);
          break;
        case "TEXCOORD_0":
          var texturecoords = GLTFUtil.floatBufferToVector2Array(bufferData);
          mesh.setUVs(texturecoords, 0);
          break;
        case "TEXCOORD_1":
          var texturecoords1 = GLTFUtil.floatBufferToVector2Array(bufferData);
          mesh.setUVs(texturecoords1, 1);
          break;
        case "TEXCOORD_2":
          var texturecoords2 = GLTFUtil.floatBufferToVector2Array(bufferData);
          mesh.setUVs(texturecoords2, 2);
          break;
        case "TEXCOORD_3":
          var texturecoords3 = GLTFUtil.floatBufferToVector2Array(bufferData);
          mesh.setUVs(texturecoords3, 3);
          break;
        case "TEXCOORD_4":
          var texturecoords4 = GLTFUtil.floatBufferToVector2Array(bufferData);
          mesh.setUVs(texturecoords4, 4);
          break;
        case "TEXCOORD_5":
          var texturecoords5 = GLTFUtil.floatBufferToVector2Array(bufferData);
          mesh.setUVs(texturecoords5, 5);
          break;
        case "TEXCOORD_6":
          var texturecoords6 = GLTFUtil.floatBufferToVector2Array(bufferData);
          mesh.setUVs(texturecoords6, 6);
          break;
        case "TEXCOORD_7":
          var texturecoords7 = GLTFUtil.floatBufferToVector2Array(bufferData);
          mesh.setUVs(texturecoords7, 7);
          break;
        case "COLOR_0":
          var colors = GLTFUtil.floatBufferToColorArray(bufferData, accessors[attributes["COLOR_0"]].type === AccessorType.VEC3);
          mesh.setColors(colors);
          break;
        case "TANGENT":
          var tangents = GLTFUtil.floatBufferToVector4Array(bufferData);
          mesh.setTangents(tangents);
          break;
        case "JOINTS_0":
          var joints = GLTFUtil.floatBufferToVector4Array(bufferData);
          mesh.setBoneIndices(joints);
          break;
        case "WEIGHTS_0":
          var weights = GLTFUtil.floatBufferToVector4Array(bufferData);
          mesh.setBoneWeights(weights);
          break;
      }
    }
    if (indices !== void 0) {
      var indexAccessor = gltf.accessors[indices];
      var indexData = getIndexBufferData();
      mesh.setIndices(indexData);
      mesh.addSubMesh(0, indexAccessor.count, mode);
    } else {
      mesh.addSubMesh(0, vertexCount, mode);
    }
    targets && this._createBlendShape(mesh, gltfMesh, targets, getBlendShapeData);
    mesh.uploadData(!keepMeshData);
    return Promise.resolve(mesh);
  };
  return MeshParser2;
}(Parser);
(function() {
  MeshParser._tempVector3 = new Vector3();
})();
var SceneParser$1 = function(Parser1) {
  _inherits3(SceneParser2, Parser1);
  function SceneParser2() {
    return Parser1.apply(this, arguments);
  }
  var _proto = SceneParser2.prototype;
  _proto.parse = function parse2(context) {
    var glTFResource = context.glTFResource, gltf = context.gltf;
    var entities = glTFResource.entities;
    var nodes = gltf.nodes, gltfCameras = gltf.cameras;
    if (!nodes)
      return;
    var defaultSceneRootPromiseInfo = context.defaultSceneRootPromiseInfo;
    var promises = [];
    for (var i = 0; i < nodes.length; i++) {
      var gltfNode = nodes[i];
      var cameraID = gltfNode.camera, meshID = gltfNode.mesh, _gltfNode_extensions = gltfNode.extensions, extensions = _gltfNode_extensions === void 0 ? {} : _gltfNode_extensions;
      var KHR_lights_punctual2 = extensions.KHR_lights_punctual;
      var entity = entities[i];
      if (cameraID !== void 0) {
        this._createCamera(glTFResource, gltfCameras[cameraID], entity);
      }
      if (meshID !== void 0) {
        promises.push(this._createRenderer(context, gltfNode, entity));
      }
      if (KHR_lights_punctual2) {
        var lightIndex = KHR_lights_punctual2.light;
        var lights = gltf.extensions.KHR_lights_punctual.lights;
        Parser.parseEngineResource("KHR_lights_punctual", lights[lightIndex], entity, context);
      }
    }
    if (glTFResource.defaultSceneRoot) {
      this._createAnimator(context);
    }
    gltf.extensions && delete gltf.extensions["OASIS_materials_remap"];
    AssetPromise.all(promises).then(function() {
      return defaultSceneRootPromiseInfo.resolve(glTFResource.defaultSceneRoot);
    }).catch(defaultSceneRootPromiseInfo.reject);
    return defaultSceneRootPromiseInfo.promise;
  };
  _proto._createCamera = function _createCamera(context, cameraSchema, entity) {
    var orthographic = cameraSchema.orthographic, perspective = cameraSchema.perspective, type = cameraSchema.type;
    var camera = entity.addComponent(Camera);
    if (type === CameraType.ORTHOGRAPHIC) {
      var xmag = orthographic.xmag, ymag = orthographic.ymag, zfar = orthographic.zfar, znear = orthographic.znear;
      camera.isOrthographic = true;
      if (znear !== void 0) {
        camera.nearClipPlane = znear;
      }
      if (zfar !== void 0) {
        camera.farClipPlane = zfar;
      }
      camera.orthographicSize = Math.max(ymag != null ? ymag : 0, xmag != null ? xmag : 0) / 2;
    } else if (type === CameraType.PERSPECTIVE) {
      var aspectRatio = perspective.aspectRatio, yfov = perspective.yfov, zfar1 = perspective.zfar, znear1 = perspective.znear;
      if (aspectRatio !== void 0) {
        camera.aspectRatio = aspectRatio;
      }
      if (yfov !== void 0) {
        camera.fieldOfView = yfov * 180 / Math.PI;
      }
      if (zfar1 !== void 0) {
        camera.farClipPlane = zfar1;
      }
      if (znear1 !== void 0) {
        camera.nearClipPlane = znear1;
      }
    }
    if (!context.cameras)
      context.cameras = [];
    context.cameras.push(camera);
    camera.enabled = false;
  };
  _proto._createRenderer = function _createRenderer(context, gltfNode, entity) {
    var _loop = function(i2) {
      var mesh = meshes[meshID][i2];
      var renderer = void 0;
      if (skinID !== void 0 || blendShapeWeights) {
        context.hasSkinned = true;
        var skinRenderer = entity.addComponent(SkinnedMeshRenderer);
        skinRenderer.mesh = mesh;
        if (skinID !== void 0) {
          skinRenderer.skin = skins[skinID];
        }
        if (blendShapeWeights) {
          skinRenderer.blendShapeWeights = new Float32Array(blendShapeWeights);
        }
        renderer = skinRenderer;
      } else {
        renderer = entity.addComponent(MeshRenderer);
        renderer.mesh = mesh;
      }
      var materialIndex = gltfMeshPrimitives[i2].material;
      var remapMaterials = gltf.extensions && gltf.extensions["OASIS_materials_remap"];
      if (remapMaterials && remapMaterials[materialIndex]) {
        promises.push(remapMaterials[materialIndex].then(function(mtl) {
          renderer.setMaterial(mtl);
        }));
      } else {
        var material = (materials == null ? void 0 : materials[materialIndex]) || SceneParser2._getDefaultMaterial(engine);
        renderer.setMaterial(material);
        mesh.vertexElements.forEach(function(element) {
          if (element.semantic === "COLOR_0") {
            renderer.enableVertexColor = true;
          }
        });
      }
      var _gltfMeshPrimitives_i = gltfMeshPrimitives[i2], _gltfMeshPrimitives_i_extensions = _gltfMeshPrimitives_i.extensions, extensions = _gltfMeshPrimitives_i_extensions === void 0 ? {} : _gltfMeshPrimitives_i_extensions;
      var KHR_materials_variants2 = extensions.KHR_materials_variants;
      if (KHR_materials_variants2) {
        Parser.parseEngineResource("KHR_materials_variants", KHR_materials_variants2, renderer, context);
      }
    };
    var glTFResource = context.glTFResource, gltf = context.gltf;
    var gltfMeshes = gltf.meshes;
    var engine = glTFResource.engine, meshes = glTFResource.meshes, materials = glTFResource.materials, skins = glTFResource.skins;
    var meshID = gltfNode.mesh, skinID = gltfNode.skin;
    var glTFMesh = gltfMeshes[meshID];
    var gltfMeshPrimitives = glTFMesh.primitives;
    var blendShapeWeights = gltfNode.weights || glTFMesh.weights;
    var promises = [];
    for (var i = 0; i < gltfMeshPrimitives.length; i++)
      _loop(i);
    return Promise.all(promises);
  };
  _proto._createAnimator = function _createAnimator(context) {
    if (!context.hasSkinned && !context.glTFResource.animations) {
      return;
    }
    var _context_glTFResource = context.glTFResource, defaultSceneRoot = _context_glTFResource.defaultSceneRoot, animations = _context_glTFResource.animations;
    var animator = defaultSceneRoot.addComponent(Animator);
    var animatorController = new AnimatorController();
    var layer = new AnimatorControllerLayer("layer");
    var animatorStateMachine = new AnimatorStateMachine();
    animatorController.addLayer(layer);
    animator.animatorController = animatorController;
    layer.stateMachine = animatorStateMachine;
    if (animations) {
      for (var i = 0; i < animations.length; i++) {
        var animationClip = animations[i];
        var name = animationClip.name;
        var uniqueName = animatorStateMachine.makeUniqueStateName(name);
        if (uniqueName !== name) {
          console.warn("AnimatorState name is existed, name: " + name + " reset to " + uniqueName);
        }
        var animatorState = animatorStateMachine.addState(uniqueName);
        animatorState.clip = animationClip;
      }
    }
  };
  SceneParser2._getDefaultMaterial = function _getDefaultMaterial(engine) {
    if (!SceneParser2._defaultMaterial) {
      SceneParser2._defaultMaterial = new BlinnPhongMaterial(engine);
    }
    return SceneParser2._defaultMaterial;
  };
  return SceneParser2;
}(Parser);
var SkinParser = function(Parser2) {
  _inherits3(SkinParser2, Parser2);
  function SkinParser2() {
    return Parser2.apply(this, arguments);
  }
  var _proto = SkinParser2.prototype;
  _proto.parse = function parse2(context) {
    var glTFResource = context.glTFResource, gltf = context.gltf;
    context.buffers;
    var entities = glTFResource.entities;
    var gltfSkins = gltf.skins;
    if (!gltfSkins)
      return;
    var count = gltfSkins.length;
    var skins = new Array(count);
    for (var i = 0; i < count; i++) {
      var _gltfSkins_i = gltfSkins[i], inverseBindMatrices = _gltfSkins_i.inverseBindMatrices, skeleton = _gltfSkins_i.skeleton, joints = _gltfSkins_i.joints, _gltfSkins_i_name = _gltfSkins_i.name, name = _gltfSkins_i_name === void 0 ? "SKIN_" + i : _gltfSkins_i_name;
      var jointCount = joints.length;
      var skin = new Skin(name);
      skin.inverseBindMatrices.length = jointCount;
      var accessor = gltf.accessors[inverseBindMatrices];
      var buffer = GLTFUtil.getAccessorBuffer(context, gltf, accessor).data;
      for (var i1 = 0; i1 < jointCount; i1++) {
        var inverseBindMatrix = new Matrix();
        inverseBindMatrix.copyFromArray(buffer, i1 * 16);
        skin.inverseBindMatrices[i1] = inverseBindMatrix;
      }
      for (var i2 = 0; i2 < jointCount; i2++) {
        var jointIndex = joints[i2];
        var jointName = entities[jointIndex].name;
        skin.joints[i2] = jointName;
        for (var j = entities.length - 1; j >= 0; j--) {
          if (jointIndex !== j && entities[j].name === jointName) {
            entities[j].name = jointName + "_" + j;
          }
        }
      }
      if (skeleton !== void 0) {
        skin.skeleton = entities[skeleton].name;
      } else {
        var rootBone = this._findSkeletonRootBone(joints, entities);
        if (rootBone) {
          skin.skeleton = rootBone.name;
        } else {
          throw "Failed to find skeleton root bone.";
        }
      }
      skins[i] = skin;
    }
    glTFResource.skins = skins;
  };
  _proto._findSkeletonRootBone = function _findSkeletonRootBone(joints, entities) {
    var paths = {};
    for (var _iterator = _create_for_of_iterator_helper_loose(joints), _step; !(_step = _iterator()).done; ) {
      var index = _step.value;
      var path = new Array();
      var entity = entities[index];
      while (entity) {
        path.unshift(entity);
        entity = entity.parent;
      }
      paths[index] = path;
    }
    var rootNode = null;
    for (var i = 0; ; i++) {
      var path1 = paths[joints[0]];
      if (i >= path1.length) {
        return rootNode;
      }
      var entity1 = path1[i];
      for (var j = 1, m = joints.length; j < m; j++) {
        path1 = paths[joints[j]];
        if (i >= path1.length || entity1 !== path1[i]) {
          return rootNode;
        }
      }
      rootNode = entity1;
    }
  };
  return SkinParser2;
}(Parser);
var TextureParser = function(Parser2) {
  _inherits3(TextureParser2, Parser2);
  function TextureParser2() {
    return Parser2.apply(this, arguments);
  }
  var _proto = TextureParser2.prototype;
  _proto.parse = function parse2(context) {
    var _this = this;
    var glTFResource = context.glTFResource, gltf = context.gltf, buffers = context.buffers;
    var engine = glTFResource.engine, url = glTFResource.url;
    if (gltf.textures) {
      var texturesPromiseInfo = context.texturesPromiseInfo;
      AssetPromise.all(gltf.textures.map(function(param, index) {
        var sampler = param.sampler, _param_source = param.source, source = _param_source === void 0 ? 0 : _param_source, textureName = param.name;
        var _gltf_images_source = gltf.images[source], uri = _gltf_images_source.uri, bufferViewIndex = _gltf_images_source.bufferView, mimeType2 = _gltf_images_source.mimeType, imageName = _gltf_images_source.name;
        if (uri) {
          var index1 = uri.lastIndexOf(".");
          var ext = uri.substring(index1 + 1);
          var type = ext.startsWith("ktx") ? AssetType.KTX : AssetType.Texture2D;
          return engine.resourceManager.load({
            url: GLTFUtil.parseRelativeUrl(url, uri),
            type
          }).then(function(texture) {
            if (!texture.name) {
              texture.name = textureName || imageName || "texture_" + index1;
            }
            if (sampler !== void 0) {
              _this._parseSampler(texture, gltf.samplers[sampler]);
            }
            return texture;
          });
        } else {
          var bufferView = gltf.bufferViews[bufferViewIndex];
          var bufferViewData = GLTFUtil.getBufferViewData(bufferView, buffers);
          return GLTFUtil.loadImageBuffer(bufferViewData, mimeType2).then(function(image) {
            var texture = new Texture2D(engine, image.width, image.height);
            texture.setImageSource(image);
            texture.generateMipmaps();
            texture.name = textureName || imageName || "texture_" + index;
            if (sampler !== void 0) {
              _this._parseSampler(texture, gltf.samplers[sampler]);
            }
            return texture;
          });
        }
      })).then(function(textures) {
        glTFResource.textures = textures;
        texturesPromiseInfo.resolve(textures);
      }).catch(texturesPromiseInfo.reject);
      return texturesPromiseInfo.promise;
    }
  };
  _proto._parseSampler = function _parseSampler(texture, sampler) {
    var magFilter = sampler.magFilter, minFilter = sampler.minFilter, wrapS = sampler.wrapS, wrapT = sampler.wrapT;
    if (magFilter || minFilter) {
      if (magFilter === TextureMagFilter.NEAREST) {
        texture.filterMode = TextureFilterMode.Point;
      } else if (minFilter <= TextureMinFilter.LINEAR_MIPMAP_NEAREST) {
        texture.filterMode = TextureFilterMode.Bilinear;
      } else {
        texture.filterMode = TextureFilterMode.Trilinear;
      }
    }
    if (wrapS) {
      texture.wrapModeU = TextureParser2._wrapMap[wrapS];
    }
    if (wrapT) {
      texture.wrapModeV = TextureParser2._wrapMap[wrapT];
    }
  };
  return TextureParser2;
}(Parser);
(function() {
  var _obj;
  TextureParser._wrapMap = (_obj = {}, _obj[TextureWrapMode2.CLAMP_TO_EDGE] = TextureWrapMode.Clamp, _obj[TextureWrapMode2.MIRRORED_REPEAT] = TextureWrapMode.Mirror, _obj[TextureWrapMode2.REPEAT] = TextureWrapMode.Repeat, _obj);
})();
var Validator = function(Parser1) {
  _inherits3(Validator2, Parser1);
  function Validator2() {
    return Parser1.apply(this, arguments);
  }
  var _proto = Validator2.prototype;
  _proto.parse = function parse2(context) {
    var _context_gltf = context.gltf, version2 = _context_gltf.asset.version, extensionsUsed = _context_gltf.extensionsUsed, extensionsRequired = _context_gltf.extensionsRequired;
    var gltfVersion = Number(version2);
    if (!(gltfVersion >= 2 && gltfVersion < 3)) {
      throw "Only support gltf 2.x.";
    }
    if (extensionsUsed) {
      Logger.info("extensionsUsed: ", extensionsUsed);
      for (var i = 0; i < extensionsUsed.length; i++) {
        if (!Parser.hasExtensionParser(extensionsUsed[i])) {
          Logger.warn("Extension " + extensionsUsed[i] + " is not implemented, you can customize this extension in gltf.");
        }
      }
    }
    if (extensionsRequired) {
      Logger.info("extensionsRequired: " + extensionsRequired);
      for (var i1 = 0; i1 < extensionsRequired.length; i1++) {
        var extensionRequired = extensionsRequired[i1];
        if (!Parser.hasExtensionParser(extensionRequired)) {
          Logger.error("GLTF parser has not supported required extension " + extensionRequired + ".");
        } else {
          Parser.initialize(extensionRequired);
        }
      }
    }
  };
  return Validator2;
}(Parser);
var GLTFParser = function() {
  function GLTFParser2(pipes) {
    var _this = this;
    this._pipes = [];
    pipes.forEach(function(pipe, index) {
      _this._pipes[index] = new pipe();
    });
  }
  var _proto = GLTFParser2.prototype;
  _proto.parse = function parse2(context) {
    var _this = this;
    var glTFResource = context.glTFResource;
    var lastPipe;
    return new AssetPromise(function(resolve, reject) {
      _this._pipes.forEach(function(parser) {
        if (lastPipe) {
          lastPipe = lastPipe.then(function() {
            return parser.parse(context);
          });
          if (lastPipe.cancel) {
            context.chainPromises.push(lastPipe);
          }
        } else {
          lastPipe = parser.parse(context);
        }
      });
      if (lastPipe) {
        lastPipe.then(function() {
          resolve(glTFResource);
        }).catch(reject);
      }
    });
  };
  return GLTFParser2;
}();
(function() {
  GLTFParser.defaultPipeline = new GLTFParser([
    BufferParser,
    Validator,
    TextureParser,
    MaterialParser,
    MeshParser,
    EntityParser,
    SkinParser,
    AnimationParser,
    SceneParser$1
  ]);
})();
var GLTFResource = function(EngineObject2) {
  _inherits3(GLTFResource2, EngineObject2);
  function GLTFResource2(engine, url) {
    var _this;
    _this = EngineObject2.call(this, engine) || this;
    _this.url = url;
    return _this;
  }
  var _proto = GLTFResource2.prototype;
  _proto.destroy = function destroy() {
    if (this._destroyed) {
      return;
    }
    EngineObject2.prototype.destroy.call(this);
    this.defaultSceneRoot.destroy();
    this.textures = null;
    this.materials = null;
    this.meshes = null;
    this.skins = null;
    this.animations = null;
    this.entities = null;
    this.cameras = null;
    this.lights = null;
    this.sceneRoots = null;
    this.variants = null;
  };
  return GLTFResource2;
}(EngineObject);
var GLTFLoader = function(Loader2) {
  _inherits3(GLTFLoader2, Loader2);
  function GLTFLoader2() {
    return Loader2.apply(this, arguments);
  }
  var _proto = GLTFLoader2.prototype;
  _proto.load = function load(item, resourceManager) {
    var _item_params;
    var url = item.url;
    var context = new ParserContext(url);
    var glTFResource = new GLTFResource(resourceManager.engine, url);
    var masterPromiseInfo = context.masterPromiseInfo;
    context.glTFResource = glTFResource;
    var _item_params_keepMeshData;
    context.keepMeshData = (_item_params_keepMeshData = (_item_params = item.params) == null ? void 0 : _item_params.keepMeshData) != null ? _item_params_keepMeshData : false;
    masterPromiseInfo.onCancel(function() {
      var chainPromises = context.chainPromises;
      for (var _iterator = _create_for_of_iterator_helper_loose(chainPromises), _step; !(_step = _iterator()).done; ) {
        var promise = _step.value;
        promise.cancel();
      }
    });
    GLTFParser.defaultPipeline.parse(context).then(masterPromiseInfo.resolve).catch(function(e) {
      console.error(e);
      masterPromiseInfo.reject("Error loading glTF model from " + url + " .");
    });
    return context.promiseMap;
  };
  return GLTFLoader2;
}(Loader);
GLTFLoader = __decorate2([
  resourceLoader(AssetType.Prefab, [
    "gltf",
    "glb"
  ])
], GLTFLoader);
var _HDRLoader;
var PI = Math.PI;
var HDRLoader = (_HDRLoader = function(Loader2) {
  _inherits3(HDRLoader1, Loader2);
  function HDRLoader1() {
    return Loader2.apply(this, arguments);
  }
  var _proto = HDRLoader1.prototype;
  _proto.load = function load(item, resourceManager) {
    var _this = this;
    return new AssetPromise(function(resolve, reject) {
      var engine = resourceManager.engine;
      _this.request(item.url, {
        type: "arraybuffer"
      }).then(function(buffer) {
        var uint8Array = new Uint8Array(buffer);
        var _HDRLoader__parseHeader = HDRLoader._parseHeader(uint8Array), width = _HDRLoader__parseHeader.width, height = _HDRLoader__parseHeader.height, dataPosition = _HDRLoader__parseHeader.dataPosition;
        var pixels = HDRLoader._readPixels(uint8Array.subarray(dataPosition), width, height);
        var cubeSize = height >> 1;
        var cubeMapData = HDRLoader._convertToCubemap(pixels, width, height, cubeSize);
        var texture = new TextureCube(engine, cubeSize);
        for (var faceIndex = 0; faceIndex < 6; faceIndex++) {
          texture.setPixelBuffer(TextureCubeFace.PositiveX + faceIndex, cubeMapData[faceIndex], 0);
        }
        texture.generateMipmaps();
        resolve(texture);
      }).catch(reject);
    });
  };
  HDRLoader1._convertToCubemap = function _convertToCubemap(pixels, inputWidth, inputHeight, size) {
    if (!pixels) {
      throw "ConvertPanoramaToCubemap: input cannot be null";
    }
    if (pixels.length != inputWidth * inputHeight * 4) {
      throw "ConvertPanoramaToCubemap: input size is wrong";
    }
    var textureRight = this._createCubemapData(size, this._faceRight, pixels, inputWidth, inputHeight);
    var textureLeft = this._createCubemapData(size, this._faceLeft, pixels, inputWidth, inputHeight);
    var textureUp = this._createCubemapData(size, this._faceUp, pixels, inputWidth, inputHeight);
    var textureDown = this._createCubemapData(size, this._faceBottom, pixels, inputWidth, inputHeight);
    var textureFront = this._createCubemapData(size, this._faceFront, pixels, inputWidth, inputHeight);
    var textureBack = this._createCubemapData(size, this._faceBack, pixels, inputWidth, inputHeight);
    return [
      textureRight,
      textureLeft,
      textureUp,
      textureDown,
      textureFront,
      textureBack
    ];
  };
  HDRLoader1._createCubemapData = function _createCubemapData(texSize, faceData, pixels, inputWidth, inputHeight) {
    var textureArray = new Uint8ClampedArray(texSize * texSize * 4);
    var rotDX1 = this._tempVector3.set(0, 0, 0).add(faceData[1]).subtract(faceData[0]).scale(1 / texSize);
    var rotDX2 = this._temp2Vector3.set(0, 0, 0).add(faceData[3]).subtract(faceData[2]).scale(1 / texSize);
    var dy = 1 / texSize;
    var fy = 0;
    for (var y = 0; y < texSize; y++) {
      var xv1 = this._temp3Vector3.set(0, 0, 0).add(faceData[0]);
      var xv2 = this._temp4Vector3.set(0, 0, 0).add(faceData[2]);
      for (var x = 0; x < texSize; x++) {
        var v = this._temp5Vector3.set(0, 0, 0).add(xv2).subtract(xv1).scale(fy).add(xv1);
        v.normalize();
        var color = this._calcProjectionSpherical(v, pixels, inputWidth, inputHeight);
        this._RGBEToLinear(color);
        this._linearToRGBM(color, 5);
        var index = y * texSize * 4 + x * 4;
        textureArray[index] = color.r;
        textureArray[index + 1] = color.g;
        textureArray[index + 2] = color.b;
        textureArray[index + 3] = color.a;
        xv1.add(rotDX1);
        xv2.add(rotDX2);
      }
      fy += dy;
    }
    return textureArray;
  };
  HDRLoader1._calcProjectionSpherical = function _calcProjectionSpherical(vDir, pixels, inputWidth, inputHeight) {
    var theta = Math.atan2(vDir.z, -vDir.x);
    var phi = Math.acos(vDir.y);
    while (theta < -PI) {
      theta += 2 * PI;
    }
    while (theta > PI) {
      theta -= 2 * PI;
    }
    var dx = theta / PI;
    var dy = phi / PI;
    dx = dx * 0.5 + 0.5;
    var px = Math.round(dx * inputWidth);
    if (px < 0) {
      px = 0;
    } else if (px >= inputWidth) {
      px = inputWidth - 1;
    }
    var py = Math.round(dy * inputHeight);
    if (py < 0) {
      py = 0;
    } else if (py >= inputHeight) {
      py = inputHeight - 1;
    }
    var inputY = inputHeight - py - 1;
    var index = inputY * inputWidth * 4 + px * 4;
    var r = pixels[index];
    var g = pixels[index + 1];
    var b = pixels[index + 2];
    var a = pixels[index + 3];
    return new Color(r, g, b, a);
  };
  HDRLoader1._readStringLine = function _readStringLine(uint8array, startIndex) {
    var line = "";
    var character = "";
    for (var i = startIndex; i < uint8array.length - startIndex; i++) {
      character = String.fromCharCode(uint8array[i]);
      if (character == "\n") {
        break;
      }
      line += character;
    }
    return line;
  };
  HDRLoader1._parseHeader = function _parseHeader(uint8array) {
    var height = 0;
    var width = 0;
    var line = this._readStringLine(uint8array, 0);
    if (line[0] != "#" || line[1] != "?") {
      throw "Bad HDR Format.";
    }
    var endOfHeader = false;
    var findFormat = false;
    var lineIndex = 0;
    do {
      lineIndex += line.length + 1;
      line = this._readStringLine(uint8array, lineIndex);
      if (line == "FORMAT=32-bit_rle_rgbe") {
        findFormat = true;
      } else if (line.length == 0) {
        endOfHeader = true;
      }
    } while (!endOfHeader);
    if (!findFormat) {
      throw "HDR Bad header format, unsupported FORMAT";
    }
    lineIndex += line.length + 1;
    line = this._readStringLine(uint8array, lineIndex);
    var sizeRegexp = /^\-Y (.*) \+X (.*)$/g;
    var match = sizeRegexp.exec(line);
    if (!match || match.length < 3) {
      throw "HDR Bad header format, no size";
    }
    width = parseInt(match[2]);
    height = parseInt(match[1]);
    if (width < 8 || width > 32767) {
      throw "HDR Bad header format, unsupported size";
    }
    lineIndex += line.length + 1;
    return {
      height,
      width,
      dataPosition: lineIndex
    };
  };
  HDRLoader1._readPixels = function _readPixels(buffer, width, height) {
    var scanLineWidth = width;
    var byteLength = buffer.byteLength;
    var dataRGBA = new Uint8Array(4 * width * height);
    var offset = 0, pos = 0;
    var ptrEnd = 4 * scanLineWidth;
    var rgbeStart = new Uint8Array(4);
    var scanLineBuffer = new Uint8Array(ptrEnd);
    var numScanLines = height;
    while (numScanLines > 0 && pos < byteLength) {
      rgbeStart[0] = buffer[pos++];
      rgbeStart[1] = buffer[pos++];
      rgbeStart[2] = buffer[pos++];
      rgbeStart[3] = buffer[pos++];
      if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanLineWidth) {
        throw "HDR Bad header format, wrong scan line width";
      }
      var ptr = 0, count = void 0;
      while (ptr < ptrEnd && pos < byteLength) {
        count = buffer[pos++];
        var isEncodedRun = count > 128;
        if (isEncodedRun)
          count -= 128;
        if (0 === count || ptr + count > ptrEnd) {
          throw "HDR Bad Format, bad scanline data (run)";
        }
        if (isEncodedRun) {
          var byteValue = buffer[pos++];
          for (var i = 0; i < count; i++) {
            scanLineBuffer[ptr++] = byteValue;
          }
        } else {
          scanLineBuffer.set(buffer.subarray(pos, pos + count), ptr);
          ptr += count;
          pos += count;
        }
      }
      var l = scanLineWidth;
      for (var i1 = 0; i1 < l; i1++) {
        var off = 0;
        dataRGBA[offset] = scanLineBuffer[i1 + off];
        off += scanLineWidth;
        dataRGBA[offset + 1] = scanLineBuffer[i1 + off];
        off += scanLineWidth;
        dataRGBA[offset + 2] = scanLineBuffer[i1 + off];
        off += scanLineWidth;
        dataRGBA[offset + 3] = scanLineBuffer[i1 + off];
        offset += 4;
      }
      numScanLines--;
    }
    return dataRGBA;
  };
  HDRLoader1._RGBEToLinear = function _RGBEToLinear(color) {
    var scaleFactor = Math.pow(2, color.a - 128) / 255;
    color.r *= scaleFactor;
    color.g *= scaleFactor;
    color.b *= scaleFactor;
    color.a = 1;
  };
  HDRLoader1._linearToRGBM = function _linearToRGBM(color, maxRange) {
    var maxRGB = Math.max(color.r, Math.max(color.g, color.b));
    var M = Math.min(maxRGB / maxRange, 1);
    M = Math.ceil(M * 255);
    var scaleFactor = 65025 / (M * maxRange);
    color.r *= scaleFactor;
    color.g *= scaleFactor;
    color.b *= scaleFactor;
    color.a *= M;
  };
  return HDRLoader1;
}(Loader), function() {
  _HDRLoader._rightBottomBack = new Vector3(1, -1, -1);
}(), function() {
  _HDRLoader._rightBottomFront = new Vector3(1, -1, 1);
}(), function() {
  _HDRLoader._rightUpBack = new Vector3(1, 1, -1);
}(), function() {
  _HDRLoader._rightUpFront = new Vector3(1, 1, 1);
}(), function() {
  _HDRLoader._leftBottomBack = new Vector3(-1, -1, -1);
}(), function() {
  _HDRLoader._leftBottomFront = new Vector3(-1, -1, 1);
}(), function() {
  _HDRLoader._leftUpBack = new Vector3(-1, 1, -1);
}(), function() {
  _HDRLoader._leftUpFront = new Vector3(-1, 1, 1);
}(), function() {
  _HDRLoader._faceRight = [
    _HDRLoader._rightBottomBack,
    _HDRLoader._rightBottomFront,
    _HDRLoader._rightUpBack,
    _HDRLoader._rightUpFront
  ];
}(), function() {
  _HDRLoader._faceLeft = [
    _HDRLoader._leftBottomFront,
    _HDRLoader._leftBottomBack,
    _HDRLoader._leftUpFront,
    _HDRLoader._leftUpBack
  ];
}(), function() {
  _HDRLoader._faceUp = [
    _HDRLoader._leftBottomFront,
    _HDRLoader._rightBottomFront,
    _HDRLoader._leftBottomBack,
    _HDRLoader._rightBottomBack
  ];
}(), function() {
  _HDRLoader._faceBottom = [
    _HDRLoader._leftUpBack,
    _HDRLoader._rightUpBack,
    _HDRLoader._leftUpFront,
    _HDRLoader._rightUpFront
  ];
}(), function() {
  _HDRLoader._faceFront = [
    _HDRLoader._leftBottomBack,
    _HDRLoader._rightBottomBack,
    _HDRLoader._leftUpBack,
    _HDRLoader._rightUpBack
  ];
}(), function() {
  _HDRLoader._faceBack = [
    _HDRLoader._rightBottomFront,
    _HDRLoader._leftBottomFront,
    _HDRLoader._rightUpFront,
    _HDRLoader._leftUpFront
  ];
}(), function() {
  _HDRLoader._tempVector3 = new Vector3();
}(), function() {
  _HDRLoader._temp2Vector3 = new Vector3();
}(), function() {
  _HDRLoader._temp3Vector3 = new Vector3();
}(), function() {
  _HDRLoader._temp4Vector3 = new Vector3();
}(), function() {
  _HDRLoader._temp5Vector3 = new Vector3();
}(), _HDRLoader);
HDRLoader = __decorate2([
  resourceLoader(AssetType.HDR, [
    "hdr"
  ])
], HDRLoader);
var JSONLoader = function(Loader2) {
  _inherits3(JSONLoader2, Loader2);
  function JSONLoader2() {
    return Loader2.apply(this, arguments);
  }
  var _proto = JSONLoader2.prototype;
  _proto.load = function load(item) {
    return this.request(item.url, _extends3({}, item, {
      type: "json"
    }));
  };
  return JSONLoader2;
}(Loader);
JSONLoader = __decorate2([
  resourceLoader(AssetType.JSON, [
    "json"
  ], false)
], JSONLoader);
var HEADER_LEN = 12 + 13 * 4;
var COMPRESSED_2D = 0;
function getMipmaps(ktxContainer, loadMipmaps) {
  var mipmaps = [];
  var dataOffset = HEADER_LEN + ktxContainer.bytesOfKeyValueData;
  var width = ktxContainer.pixelWidth;
  var height = ktxContainer.pixelHeight;
  var mipmapCount = loadMipmaps ? ktxContainer.numberOfMipmapLevels : 1;
  for (var level = 0; level < mipmapCount; level++) {
    var imageSize = new Int32Array(ktxContainer.buffer, dataOffset, 1)[0];
    dataOffset += 4;
    for (var face = 0; face < ktxContainer.numberOfFaces; face++) {
      var byteArray = new Uint8Array(ktxContainer.buffer, dataOffset, imageSize);
      mipmaps.push({
        data: byteArray,
        width,
        height
      });
      dataOffset += imageSize;
      dataOffset += 3 - (imageSize + 3) % 4;
    }
    width = Math.max(1, width * 0.5);
    height = Math.max(1, height * 0.5);
  }
  return mipmaps;
}
function isValid(data) {
  if (data.byteLength >= 12) {
    var identifier = new Uint8Array(data, 0, 12);
    if (identifier[0] === 171 && identifier[1] === 75 && identifier[2] === 84 && identifier[3] === 88 && identifier[4] === 32 && identifier[5] === 49 && identifier[6] === 49 && identifier[7] === 187 && identifier[8] === 13 && identifier[9] === 10 && identifier[10] === 26 && identifier[11] === 10) {
      return true;
    }
  }
  return false;
}
function getEngineFormat(internalFormat) {
  switch (internalFormat) {
    case GLCompressedTextureInternalFormat.RGB_S3TC_DXT1_EXT:
      return TextureFormat.DXT1;
    case GLCompressedTextureInternalFormat.RGBA_S3TC_DXT5_EXT:
      return TextureFormat.DXT5;
    case GLCompressedTextureInternalFormat.RGB_ETC1_WEBGL:
      return TextureFormat.ETC1_RGB;
    case GLCompressedTextureInternalFormat.RGB8_ETC2:
      return TextureFormat.ETC2_RGB;
    case GLCompressedTextureInternalFormat.RGB8_PUNCHTHROUGH_ALPHA1_ETC2:
      return TextureFormat.ETC2_RGBA5;
    case GLCompressedTextureInternalFormat.RGBA8_ETC2_EAC:
      return TextureFormat.ETC2_RGBA8;
    case GLCompressedTextureInternalFormat.RGB_PVRTC_2BPPV1_IMG:
      return TextureFormat.PVRTC_RGB2;
    case GLCompressedTextureInternalFormat.RGBA_PVRTC_2BPPV1_IMG:
      return TextureFormat.PVRTC_RGBA2;
    case GLCompressedTextureInternalFormat.RGB_PVRTC_4BPPV1_IMG:
      return TextureFormat.PVRTC_RGB4;
    case GLCompressedTextureInternalFormat.RGBA_PVRTC_4BPPV1_IMG:
      return TextureFormat.PVRTC_RGBA4;
    case GLCompressedTextureInternalFormat.RGBA_ASTC_4X4_KHR:
      return TextureFormat.ASTC_4x4;
    case GLCompressedTextureInternalFormat.RGBA_ASTC_5X5_KHR:
      return TextureFormat.ASTC_5x5;
    case GLCompressedTextureInternalFormat.RGBA_ASTC_6X6_KHR:
      return TextureFormat.ASTC_6x6;
    case GLCompressedTextureInternalFormat.RGBA_ASTC_8X8_KHR:
      return TextureFormat.ASTC_8x8;
    case GLCompressedTextureInternalFormat.RGBA_ASTC_10X10_KHR:
      return TextureFormat.ASTC_10x10;
    case GLCompressedTextureInternalFormat.RGBA_ASTC_12X12_KHR:
      return TextureFormat.ASTC_12x12;
    default:
      var formatName = GLCompressedTextureInternalFormat[internalFormat];
      throw new Error("this format is not supported in Galacean Engine: " + formatName);
  }
}
var khronosTextureContainerParser = {
  /**
  *
  * @param buffer contents of the KTX container file
  * @param facesExpected should be either 1 or 6, based whether a cube texture or or
  * @param threeDExpected provision for indicating that data should be a 3D texture, not implemented
  * @param textureArrayExpected provision for indicating that data should be a texture array, not implemented
  * @param mapEngineFormat get Galacean Engine native TextureFormat?
  */
  parse: function parse(buffer, facesExpected, withMipmaps, mapEngineFormat) {
    if (mapEngineFormat === void 0)
      mapEngineFormat = false;
    if (!isValid(buffer)) {
      throw new Error("khronosTextureContainerParser: invalid KTX file, texture missing KTX identifier");
    }
    var dataSize = Uint32Array.BYTES_PER_ELEMENT;
    var headerDataView = new DataView(buffer, 12, 13 * dataSize);
    var endianness = headerDataView.getUint32(0, true);
    var littleEndian = endianness === 67305985;
    var parsedResult = {
      buffer,
      glType: headerDataView.getUint32(1 * dataSize, littleEndian),
      glTypeSize: headerDataView.getUint32(2 * dataSize, littleEndian),
      glFormat: headerDataView.getUint32(3 * dataSize, littleEndian),
      glInternalFormat: headerDataView.getUint32(4 * dataSize, littleEndian),
      glBaseInternalFormat: headerDataView.getUint32(5 * dataSize, littleEndian),
      pixelWidth: headerDataView.getUint32(6 * dataSize, littleEndian),
      pixelHeight: headerDataView.getUint32(7 * dataSize, littleEndian),
      pixelDepth: headerDataView.getUint32(8 * dataSize, littleEndian),
      numberOfArrayElements: headerDataView.getUint32(9 * dataSize, littleEndian),
      numberOfFaces: headerDataView.getUint32(10 * dataSize, littleEndian),
      numberOfMipmapLevels: headerDataView.getUint32(11 * dataSize, littleEndian),
      bytesOfKeyValueData: headerDataView.getUint32(12 * dataSize, littleEndian),
      // would need to make this more elaborate & adjust checks above to support more than one load type
      loadType: COMPRESSED_2D
    };
    if (parsedResult.glType !== 0) {
      throw new Error("only compressed formats currently supported");
    } else {
      parsedResult.numberOfMipmapLevels = Math.max(1, parsedResult.numberOfMipmapLevels);
    }
    if (parsedResult.pixelHeight === 0 || parsedResult.pixelDepth !== 0) {
      throw new Error("only 2D textures currently supported");
    }
    if (parsedResult.numberOfArrayElements !== 0) {
      throw new Error("texture arrays not currently supported");
    }
    if (parsedResult.numberOfFaces !== facesExpected) {
      throw new Error("number of faces expected" + facesExpected + ", but found " + parsedResult.numberOfFaces);
    }
    if (withMipmaps) {
      parsedResult.mipmaps = getMipmaps(parsedResult, true);
    }
    if (mapEngineFormat) {
      parsedResult.engineFormat = getEngineFormat(parsedResult.glInternalFormat);
    }
    return parsedResult;
  }
};
function parseSingleKTX(data) {
  var ktx = khronosTextureContainerParser.parse(data, 1, true, true);
  return {
    mipmaps: ktx.mipmaps,
    engineFormat: ktx.engineFormat,
    internalFormat: ktx.glInternalFormat,
    width: ktx.pixelWidth,
    height: ktx.pixelHeight
  };
}
function parseCubeKTX(dataArray) {
  var mipmapsFaces = [];
  var internalFormat;
  var engineFormat;
  var width;
  var height;
  for (var i = 0; i < dataArray.length; i++) {
    var ktx = khronosTextureContainerParser.parse(dataArray[i], 1, true, true);
    mipmapsFaces.push(ktx.mipmaps);
    if (i === 0) {
      width = ktx.pixelWidth;
      height = ktx.pixelHeight;
      internalFormat = ktx.glInternalFormat;
      engineFormat = ktx.engineFormat;
    }
  }
  return {
    mipmapsFaces,
    engineFormat,
    internalFormat,
    width,
    height
  };
}
var KTXCubeLoader = function(Loader2) {
  _inherits3(KTXCubeLoader2, Loader2);
  function KTXCubeLoader2() {
    return Loader2.apply(this, arguments);
  }
  var _proto = KTXCubeLoader2.prototype;
  _proto.load = function load(item, resourceManager) {
    var _this = this;
    return new AssetPromise(function(resolve, reject) {
      Promise.all(item.urls.map(function(url) {
        return _this.request(url, _extends3({}, item, {
          type: "arraybuffer"
        }));
      })).then(function(data) {
        var parsedData = parseCubeKTX(data);
        var width = parsedData.width, mipmapsFaces = parsedData.mipmapsFaces, engineFormat = parsedData.engineFormat;
        var mipmap = mipmapsFaces[0].length > 1;
        var texture = new TextureCube(resourceManager.engine, width, engineFormat, mipmap);
        for (var face = 0; face < 6; face++) {
          var length2 = mipmapsFaces[face].length;
          for (var miplevel = 0; miplevel < length2; miplevel++) {
            var _mipmapsFaces_face_miplevel = mipmapsFaces[face][miplevel], _$data = _mipmapsFaces_face_miplevel.data, width1 = _mipmapsFaces_face_miplevel.width, height = _mipmapsFaces_face_miplevel.height;
            texture.setPixelBuffer(TextureCubeFace.PositiveX + face, _$data, miplevel, 0, 0, width1, height);
          }
        }
        resolve(texture);
      }).catch(function(e) {
        reject(e);
      });
    });
  };
  return KTXCubeLoader2;
}(Loader);
KTXCubeLoader = __decorate2([
  resourceLoader(AssetType.KTXCube, [])
], KTXCubeLoader);
var KTXLoader = function(Loader2) {
  _inherits3(KTXLoader2, Loader2);
  function KTXLoader2() {
    return Loader2.apply(this, arguments);
  }
  var _proto = KTXLoader2.prototype;
  _proto.load = function load(item, resourceManager) {
    var _this = this;
    return new AssetPromise(function(resolve, reject) {
      _this.request(item.url, _extends3({}, item, {
        type: "arraybuffer"
      })).then(function(bin) {
        var parsedData = parseSingleKTX(bin);
        var width = parsedData.width, height = parsedData.height, mipmaps = parsedData.mipmaps, engineFormat = parsedData.engineFormat;
        var mipmap = mipmaps.length > 1;
        var texture = new Texture2D(resourceManager.engine, width, height, engineFormat, mipmap);
        for (var miplevel = 0; miplevel < mipmaps.length; miplevel++) {
          var _mipmaps_miplevel = mipmaps[miplevel], width1 = _mipmaps_miplevel.width, height1 = _mipmaps_miplevel.height, data = _mipmaps_miplevel.data;
          texture.setPixelBuffer(data, miplevel, 0, 0, width1, height1);
        }
        resolve(texture);
      }).catch(function(e) {
        reject(e);
      });
    });
  };
  return KTXLoader2;
}(Loader);
KTXLoader = __decorate2([
  resourceLoader(AssetType.KTX, [
    "ktx"
  ])
], KTXLoader);
var MaterialLoader = function(Loader2) {
  _inherits3(MaterialLoader2, Loader2);
  function MaterialLoader2() {
    return Loader2.apply(this, arguments);
  }
  var _proto = MaterialLoader2.prototype;
  _proto.load = function load(item, resourceManager) {
    var _this = this;
    return new AssetPromise(function(resolve, reject) {
      _this.request(item.url, _extends3({}, item, {
        type: "json"
      })).then(function(json) {
        var _loop = function(key2) {
          var _shaderData_key = shaderData[key2], type = _shaderData_key.type, value2 = _shaderData_key.value;
          switch (type) {
            case "Vector2":
              materialShaderData.setVector2(key2, new Vector2(value2.x, value2.y));
              break;
            case "Vector3":
              materialShaderData.setVector3(key2, new Vector3(value2.x, value2.y, value2.z));
              break;
            case "Vector4":
              materialShaderData.setVector4(key2, new Vector4(value2.x, value2.y, value2.z, value2.w));
              break;
            case "Color":
              materialShaderData.setColor(key2, new Color(value2.r, value2.g, value2.b, value2.a));
              break;
            case "Float":
              materialShaderData.setFloat(key2, value2);
              break;
            case "Texture":
              texturePromises.push(
                // @ts-ignore
                resourceManager.getResourceByRef(value2).then(function(texture) {
                  materialShaderData.setTexture(key2, texture);
                })
              );
              break;
          }
        };
        var engine = resourceManager.engine;
        var name = json.name, shader = json.shader, shaderData = json.shaderData, macros = json.macros, renderState = json.renderState;
        var material;
        switch (shader) {
          case "pbr":
            material = new PBRMaterial(engine);
            break;
          case "pbr-specular":
            material = new PBRSpecularMaterial(engine);
            break;
          case "unlit":
            material = new UnlitMaterial(engine);
            break;
          case "blinn-phong":
            material = new BlinnPhongMaterial(engine);
            break;
          case "bake-pbr":
            material = new PBRBaseMaterial(engine, Shader.find("bake-pbr"));
            break;
        }
        material.name = name;
        var texturePromises = new Array();
        var materialShaderData = material.shaderData;
        for (var key in shaderData)
          _loop(key);
        for (var i = 0, length2 = macros.length; i < length2; i++) {
          var _macros_i = macros[i], name1 = _macros_i.name, value = _macros_i.value;
          if (value == void 0) {
            materialShaderData.enableMacro(name1);
          } else {
            materialShaderData.enableMacro(name1, value);
          }
        }
        for (var key1 in renderState) {
          material[key1] = renderState[key1];
        }
        return Promise.all(texturePromises).then(function() {
          resolve(material);
        });
      }).catch(reject);
    });
  };
  return MaterialLoader2;
}(Loader);
MaterialLoader = __decorate2([
  resourceLoader(AssetType.Material, [
    "json"
  ])
], MaterialLoader);
function _defineProperties5(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _create_class5(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties5(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties5(Constructor, staticProps);
  return Constructor;
}
var BufferReader = function() {
  function BufferReader2(buffer, byteOffset, byteLength, littleEndian) {
    if (byteOffset === void 0)
      byteOffset = 0;
    if (littleEndian === void 0)
      littleEndian = true;
    this.buffer = buffer;
    this._dataView = new DataView(buffer);
    this._littleEndian = littleEndian;
    this._offset = byteOffset;
  }
  var _proto = BufferReader2.prototype;
  _proto.nextUint8 = function nextUint8() {
    var value = this._dataView.getUint8(this._offset);
    this._offset += 1;
    return value;
  };
  _proto.nextUint16 = function nextUint16() {
    var value = this._dataView.getUint16(this._offset, this._littleEndian);
    this._offset += 2;
    return value;
  };
  _proto.nextUint32 = function nextUint32() {
    var value = this._dataView.getUint32(this._offset, this._littleEndian);
    this._offset += 4;
    return value;
  };
  _proto.nextInt32 = function nextInt32() {
    var value = this._dataView.getInt32(this._offset, this._littleEndian);
    this._offset += 4;
    return value;
  };
  _proto.nextInt32Array = function nextInt32Array(len) {
    var value = new Int32Array(this.buffer, this._offset, len);
    this._offset += 4 * len;
    return value;
  };
  _proto.nextFloat32 = function nextFloat32() {
    var value = this._dataView.getFloat32(this._offset, this._littleEndian);
    this._offset += 4;
    return value;
  };
  _proto.nextFloat32Array = function nextFloat32Array(len) {
    var value = new Float32Array(this.buffer, this._offset, len);
    this._offset += 4 * len;
    return value;
  };
  _proto.nextUint32Array = function nextUint32Array(len) {
    var value = new Uint32Array(this.buffer, this._offset, len);
    this._offset += 4 * len;
    return value;
  };
  _proto.nextUint8Array = function nextUint8Array(len) {
    var value = new Uint8Array(this.buffer, this._offset, len);
    this._offset += len;
    return value;
  };
  _proto.nextUint64 = function nextUint64() {
    var left = this._dataView.getUint32(this._offset, this._littleEndian);
    var right = this._dataView.getUint32(this._offset + 4, this._littleEndian);
    var value = left + Math.pow(2, 32) * right;
    this._offset += 8;
    return value;
  };
  _proto.nextStr = function nextStr() {
    var strByteLength = this.nextUint16();
    var uint8Array = new Uint8Array(this.buffer, this._offset, strByteLength);
    this._offset += strByteLength;
    return GLTFUtil.decodeText(uint8Array);
  };
  _proto.nextImageData = function nextImageData(count) {
    return this.buffer.slice(this._offset);
  };
  _proto.nextImagesData = function nextImagesData(count) {
    var imagesLen = new Array(count);
    for (var i = 0; i < count; i++) {
      var len = this._dataView.getUint32(this._offset, this._littleEndian);
      imagesLen[i] = len;
      this._offset += 4;
    }
    var imagesData = [];
    for (var i1 = 0; i1 < count; i1++) {
      var len1 = imagesLen[i1];
      var buffer = this.buffer.slice(this._offset, this._offset + len1);
      this._offset += len1;
      imagesData.push(buffer);
    }
    return imagesData;
  };
  _proto.skip = function skip(bytes) {
    this._offset += bytes;
    return this;
  };
  _proto.scan = function scan(maxByteLength, term) {
    if (term === void 0)
      term = 0;
    var byteOffset = this._offset;
    var byteLength = 0;
    while (this._dataView.getUint8(this._offset) !== term && byteLength < maxByteLength) {
      byteLength++;
      this._offset++;
    }
    if (byteLength < maxByteLength)
      this._offset++;
    return new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + byteOffset, byteLength);
  };
  _create_class5(BufferReader2, [
    {
      key: "offset",
      get: function get() {
        return this._offset;
      }
    }
  ]);
  return BufferReader2;
}();
(function() {
  BufferReader.imageMapping = {
    0: "image/png",
    1: "image/jpg",
    2: "image/webp",
    3: "ktx"
  };
})();
var decoderMap = {};
function decoder(type) {
  return function(target) {
    decoderMap[type] = target;
  };
}
var FileHeader = function() {
  function FileHeader2() {
    this.totalLength = 0;
    this.version = 0;
    this.type = "";
    this.name = "";
    this.headerLength = 0;
  }
  FileHeader2.decode = function decode2(arrayBuffer) {
    var dataView = new DataView(arrayBuffer);
    var totalLen = dataView.getUint32(0, true);
    var fileVersion = dataView.getUint8(4);
    var typeLen = dataView.getUint16(5, true);
    var typeUint8Array = new Uint8Array(arrayBuffer, 7, typeLen);
    var nameLen = dataView.getUint16(7 + typeLen, true);
    var nameUint8Array = new Uint8Array(arrayBuffer, 9 + typeLen, nameLen);
    var name = GLTFUtil.decodeText(nameUint8Array);
    var type = GLTFUtil.decodeText(typeUint8Array);
    var header = new FileHeader2();
    header.totalLength = totalLen;
    header.name = name;
    header.type = type;
    header.version = fileVersion;
    header.headerLength = nameUint8Array.byteLength + typeUint8Array.byteLength + 9;
    return header;
  };
  _create_class5(FileHeader2, [
    {
      key: "dataLength",
      get: function get() {
        return this.totalLength - this.headerLength;
      }
    }
  ]);
  return FileHeader2;
}();
var MeshDecoder = function() {
  function MeshDecoder2() {
  }
  MeshDecoder2.decode = function decode2(engine, bufferReader) {
    return new Promise(function(resolve) {
      var modelMesh = new ModelMesh(engine);
      var jsonDataString = bufferReader.nextStr();
      var encodedMeshData = JSON.parse(jsonDataString);
      encodedMeshData.bounds && modelMesh.bounds.copyFrom(encodedMeshData.bounds);
      var offset = Math.ceil(bufferReader.offset / 4) * 4;
      var float32Array = new Float32Array(bufferReader.buffer, encodedMeshData.positions.start + offset, (encodedMeshData.positions.end - encodedMeshData.positions.start) / 4);
      var vertexCount = float32Array.length / 3;
      var positions = float32ArrayToVector3(float32Array, vertexCount);
      modelMesh.setPositions(positions);
      if (encodedMeshData.normals) {
        var float32Array1 = new Float32Array(bufferReader.buffer, encodedMeshData.normals.start + offset, (encodedMeshData.normals.end - encodedMeshData.normals.start) / 4);
        var normals = float32ArrayToVector3(float32Array1, vertexCount);
        modelMesh.setNormals(normals);
      }
      if (encodedMeshData.uvs) {
        var float32Array2 = new Float32Array(bufferReader.buffer, encodedMeshData.uvs.start + offset, (encodedMeshData.uvs.end - encodedMeshData.uvs.start) / 4);
        modelMesh.setUVs(float32ArrayToVector2(float32Array2, vertexCount));
      }
      if (encodedMeshData.uv1) {
        var float32Array3 = new Float32Array(bufferReader.buffer, encodedMeshData.uv1.start + offset, (encodedMeshData.uv1.end - encodedMeshData.uv1.start) / 4);
        modelMesh.setUVs(float32ArrayToVector2(float32Array3, vertexCount), 1);
      }
      if (encodedMeshData.uv2) {
        var float32Array4 = new Float32Array(bufferReader.buffer, encodedMeshData.uv2.start + offset, (encodedMeshData.uv2.end - encodedMeshData.uv2.start) / 4);
        modelMesh.setUVs(float32ArrayToVector2(float32Array4, vertexCount), 2);
      }
      if (encodedMeshData.uv3) {
        var float32Array5 = new Float32Array(bufferReader.buffer, encodedMeshData.uv3.start + offset, (encodedMeshData.uv3.end - encodedMeshData.uv3.start) / 4);
        modelMesh.setUVs(float32ArrayToVector2(float32Array5, vertexCount), 3);
      }
      if (encodedMeshData.uv4) {
        var float32Array6 = new Float32Array(bufferReader.buffer, encodedMeshData.uv4.start + offset, (encodedMeshData.uv4.end - encodedMeshData.uv4.start) / 4);
        modelMesh.setUVs(float32ArrayToVector2(float32Array6, vertexCount), 4);
      }
      if (encodedMeshData.uv5) {
        var float32Array7 = new Float32Array(bufferReader.buffer, encodedMeshData.uv5.start + offset, (encodedMeshData.uv5.end - encodedMeshData.uv5.start) / 4);
        modelMesh.setUVs(float32ArrayToVector2(float32Array7, vertexCount), 5);
      }
      if (encodedMeshData.uv6) {
        var float32Array8 = new Float32Array(bufferReader.buffer, encodedMeshData.uv6.start + offset, (encodedMeshData.uv6.end - encodedMeshData.uv6.start) / 4);
        modelMesh.setUVs(float32ArrayToVector2(float32Array8, vertexCount), 6);
      }
      if (encodedMeshData.uv7) {
        var float32Array9 = new Float32Array(bufferReader.buffer, encodedMeshData.uv7.start + offset, (encodedMeshData.uv7.end - encodedMeshData.uv7.start) / 4);
        modelMesh.setUVs(float32ArrayToVector2(float32Array9, vertexCount), 7);
      }
      if (encodedMeshData.colors) {
        var float32Array10 = new Float32Array(bufferReader.buffer, encodedMeshData.colors.start + offset, (encodedMeshData.colors.end - encodedMeshData.colors.start) / 4);
        modelMesh.setColors(float32ArrayToVColor(float32Array10, vertexCount));
      }
      if (encodedMeshData.boneWeights) {
        var float32Array11 = new Float32Array(bufferReader.buffer, encodedMeshData.boneWeights.start + offset, (encodedMeshData.boneWeights.end - encodedMeshData.boneWeights.start) / 4);
        modelMesh.setBoneWeights(float32ArrayToVector4(float32Array11, vertexCount));
      }
      if (encodedMeshData.boneIndices) {
        var float32Array12 = new Float32Array(bufferReader.buffer, encodedMeshData.boneIndices.start + offset, (encodedMeshData.boneIndices.end - encodedMeshData.boneIndices.start) / 4);
        modelMesh.setBoneIndices(float32ArrayToVector4(float32Array12, vertexCount));
      }
      if (encodedMeshData.blendShapes) {
        encodedMeshData.blendShapes.forEach(function(blendShapeData) {
          var blendShape = new BlendShape(blendShapeData.name);
          blendShapeData.frames.forEach(function(frameData) {
            var positionArray = new Float32Array(bufferReader.buffer, frameData.deltaPosition.start + offset, (frameData.deltaPosition.end - frameData.deltaPosition.start) / 4);
            var count = positionArray.length / 3;
            var deltaPosition = float32ArrayToVector3(positionArray, count);
            if (frameData.deltaNormals) {
              var normalsArray = new Float32Array(bufferReader.buffer, frameData.deltaNormals.start + offset, (frameData.deltaNormals.end - frameData.deltaNormals.start) / 4);
              float32ArrayToVector3(normalsArray, count);
            }
            if (frameData.deltaTangents) {
              var tangentsArray = new Float32Array(bufferReader.buffer, frameData.deltaTangents.start + offset, (frameData.deltaTangents.end - frameData.deltaTangents.start) / 4);
              float32ArrayToVector4(tangentsArray, count);
            }
            blendShape.addFrame(frameData.weight, deltaPosition);
          });
          modelMesh.addBlendShape(blendShape);
        });
      }
      if (encodedMeshData.indices) {
        var indices = null;
        if (encodedMeshData.indices.type === 0) {
          indices = new Uint16Array(bufferReader.buffer, encodedMeshData.indices.start + offset, (encodedMeshData.indices.end - encodedMeshData.indices.start) / 2);
        } else {
          indices = new Uint32Array(bufferReader.buffer, encodedMeshData.indices.start + offset, (encodedMeshData.indices.end - encodedMeshData.indices.start) / 4);
        }
        modelMesh.setIndices(indices);
      }
      encodedMeshData.subMeshes.forEach(function(subMesh) {
        return modelMesh.addSubMesh(subMesh);
      });
      modelMesh.uploadData(false);
      resolve(modelMesh);
    });
  };
  return MeshDecoder2;
}();
MeshDecoder = __decorate2([
  decoder("Mesh")
], MeshDecoder);
function float32ArrayToVColor(float32Array, vertexCount) {
  var array = new Array(vertexCount);
  for (var i = 0; i < vertexCount; i++) {
    array[i] = new Color(float32Array[i * 4], float32Array[i * 4 + 1], float32Array[i * 4 + 2], float32Array[i * 4 + 3]);
  }
  return array;
}
function float32ArrayToVector4(float32Array, vertexCount) {
  var array = new Array(vertexCount);
  for (var i = 0; i < vertexCount; i++) {
    array[i] = new Vector4(float32Array[i * 4], float32Array[i * 4 + 1], float32Array[i * 4 + 2], float32Array[i * 4 + 3]);
  }
  return array;
}
function float32ArrayToVector3(float32Array, vertexCount) {
  var array = new Array(vertexCount);
  for (var i = 0; i < vertexCount; i++) {
    array[i] = new Vector3(float32Array[i * 3], float32Array[i * 3 + 1], float32Array[i * 3 + 2]);
  }
  return array;
}
function float32ArrayToVector2(float32Array, vertexCount) {
  var array = new Array(vertexCount);
  for (var i = 0; i < vertexCount; i++) {
    array[i] = new Vector2(float32Array[i * 2], float32Array[i * 2 + 1]);
  }
  return array;
}
var Texture2DDecoder = function() {
  function Texture2DDecoder2() {
  }
  Texture2DDecoder2.decode = function decode2(engine, bufferReader) {
    return new Promise(function(resolve, reject) {
      var objectId = bufferReader.nextStr();
      var mipmap = !!bufferReader.nextUint8();
      var filterMode = bufferReader.nextUint8();
      var anisoLevel = bufferReader.nextUint8();
      var wrapModeU = bufferReader.nextUint8();
      var wrapModeV = bufferReader.nextUint8();
      var format = bufferReader.nextUint8();
      var width = bufferReader.nextUint16();
      var height = bufferReader.nextUint16();
      var isPixelBuffer = bufferReader.nextUint8();
      var mipCount = bufferReader.nextUint8();
      var imagesData = bufferReader.nextImagesData(mipCount);
      var texture2D = new Texture2D(engine, width, height, format, mipmap);
      texture2D.filterMode = filterMode;
      texture2D.anisoLevel = anisoLevel;
      texture2D.wrapModeU = wrapModeU;
      texture2D.wrapModeV = wrapModeV;
      if (isPixelBuffer) {
        var pixelBuffer = new Uint8Array(imagesData[0]);
        texture2D.setPixelBuffer(pixelBuffer);
        if (mipmap) {
          texture2D.generateMipmaps();
          for (var i = 1; i < mipCount; i++) {
            var pixelBuffer1 = new Uint8Array(imagesData[i]);
            texture2D.setPixelBuffer(pixelBuffer1, i);
          }
        }
        engine.resourceManager._objectPool[objectId] = texture2D;
        resolve(texture2D);
      } else {
        var blob = new window.Blob([
          imagesData[0]
        ]);
        var img = new Image();
        img.onload = function() {
          texture2D.setImageSource(img);
          var completedCount = 0;
          var onComplete = function() {
            completedCount++;
            if (completedCount >= mipCount) {
              resolve(texture2D);
            }
          };
          onComplete();
          if (mipmap) {
            var _loop = function(i3) {
              var blob2 = new window.Blob([
                imagesData[i3]
              ]);
              var img2 = new Image();
              img2.onload = function() {
                texture2D.setImageSource(img2, i3);
                onComplete();
              };
              img2.src = URL.createObjectURL(blob2);
            };
            texture2D.generateMipmaps();
            for (var i2 = 1; i2 < mipCount; i2++)
              _loop(i2);
          }
        };
        img.src = URL.createObjectURL(blob);
      }
    });
  };
  return Texture2DDecoder2;
}();
Texture2DDecoder = __decorate2([
  decoder("Texture2D")
], Texture2DDecoder);
function _is_native_reflect_construct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _construct(Parent, args, Class) {
  if (_is_native_reflect_construct())
    _construct = Reflect.construct;
  else {
    _construct = function construct(Parent2, args2, Class2) {
      var a = [null];
      a.push.apply(a, args2);
      var Constructor = Function.bind.apply(Parent2, a);
      var instance = new Constructor();
      if (Class2)
        _set_prototype_of3(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
var ReflectionParser = function() {
  function ReflectionParser2() {
  }
  ReflectionParser2.registerCustomParseComponent = function registerCustomParseComponent(componentType, handle) {
    this.customParseComponentHandles[componentType] = handle;
  };
  ReflectionParser2.parseEntity = function parseEntity(entityConfig, engine) {
    return ReflectionParser2.getEntityByConfig(entityConfig, engine).then(function(entity) {
      var _entityConfig_isActive;
      entity.isActive = (_entityConfig_isActive = entityConfig.isActive) != null ? _entityConfig_isActive : true;
      var position = entityConfig.position, rotation = entityConfig.rotation, scale = entityConfig.scale;
      if (position)
        entity.transform.position.copyFrom(position);
      if (rotation)
        entity.transform.rotation.copyFrom(rotation);
      if (scale)
        entity.transform.scale.copyFrom(scale);
      return entity;
    });
  };
  ReflectionParser2.getEntityByConfig = function getEntityByConfig(entityConfig, engine) {
    var assetRefId = entityConfig.assetRefId;
    if (assetRefId) {
      return engine.resourceManager.getResourceByRef({
        refId: assetRefId,
        key: entityConfig.key,
        isClone: entityConfig.isClone
      }).then(function(entity2) {
        entity2.name = entityConfig.name;
        return entity2;
      });
    } else {
      var entity = new Entity(engine, entityConfig.name);
      return Promise.resolve(entity);
    }
  };
  ReflectionParser2.parseClassObject = function parseClassObject(item, engine, resourceManager) {
    if (resourceManager === void 0)
      resourceManager = engine.resourceManager;
    var Class = Loader.getClass(item.class);
    var _item_constructParams;
    var params = (_item_constructParams = item.constructParams) != null ? _item_constructParams : [];
    var instance = _construct(Class, [].concat(params));
    return this.parsePropsAndMethods(instance, item, engine, resourceManager);
  };
  ReflectionParser2.parseBasicType = function parseBasicType(value, engine, resourceManager) {
    if (resourceManager === void 0)
      resourceManager = engine.resourceManager;
    var _this = this;
    if (Array.isArray(value)) {
      return Promise.all(value.map(function(item) {
        return _this.parseBasicType(item, engine, resourceManager);
      }));
    } else if (typeof value === "object" && value != null) {
      if (this._isClass(value)) {
        return this.parseClassObject(value, engine, resourceManager);
      } else if (this._isRef(value)) {
        return resourceManager.getResourceByRef(value);
      } else {
        return Promise.resolve(value);
      }
    } else {
      return Promise.resolve(value);
    }
  };
  ReflectionParser2.parsePropsAndMethods = function parsePropsAndMethods(instance, item, engine, resourceManager) {
    if (resourceManager === void 0)
      resourceManager = engine.resourceManager;
    var _this = this;
    var promises = [];
    if (item.methods) {
      for (var methodName in item.methods) {
        var methodParams = item.methods[methodName];
        for (var i = 0, count = methodParams.length; i < count; i++) {
          var params = methodParams[i];
          var promise = this.parseMethod(instance, methodName, params, engine, resourceManager);
          promises.push(promise);
        }
      }
    }
    if (item.props) {
      var _this1 = this, _loop = function(key2) {
        var value = item.props[key2];
        var promise2 = _this1.parseBasicType(value, engine).then(function(v) {
          return instance[key2] = v;
        });
        promises.push(promise2);
      };
      for (var key in item.props)
        _loop(key);
    }
    return Promise.all(promises).then(function() {
      var handle = _this.customParseComponentHandles[instance.constructor.name];
      if (handle)
        return handle(instance, item, engine);
      else
        return instance;
    });
  };
  ReflectionParser2.parseMethod = function parseMethod(instance, methodName, methodParams, engine, resourceManager) {
    if (resourceManager === void 0)
      resourceManager = engine.resourceManager;
    var _this = this;
    return Promise.all(methodParams.map(function(param) {
      return _this.parseBasicType(param, engine, resourceManager);
    })).then(function(result) {
      var _instance;
      return (_instance = instance)[methodName].apply(_instance, result);
    });
  };
  ReflectionParser2._isClass = function _isClass(value) {
    return value["class"] != void 0;
  };
  ReflectionParser2._isRef = function _isRef(value) {
    return value["refId"] != void 0;
  };
  return ReflectionParser2;
}();
(function() {
  ReflectionParser.customParseComponentHandles = /* @__PURE__ */ new Map();
})();
var PrefabParser = function() {
  function PrefabParser2() {
  }
  PrefabParser2.parseChildren = function parseChildren(entitiesConfig, entities, parentId) {
    var children = entitiesConfig.get(parentId).children;
    if (children && children.length > 0) {
      var parent = entities.get(parentId);
      for (var i = 0; i < children.length; i++) {
        var childId = children[i];
        var entity = entities.get(childId);
        parent.addChild(entity);
        this.parseChildren(entitiesConfig, entities, childId);
      }
    }
  };
  return PrefabParser2;
}();
var ComponentMap = {
  Transform,
  Animator,
  DirectLight,
  Camera,
  MeshRenderer,
  ParticleRenderer,
  PointLight,
  SpotLight,
  Script,
  SpriteMask,
  SpriteRenderer,
  TextRenderer
};
var InterpolableValueType;
(function(InterpolableValueType2) {
  InterpolableValueType2[InterpolableValueType2["Float"] = 0] = "Float";
  InterpolableValueType2[InterpolableValueType2["FloatArray"] = 1] = "FloatArray";
  InterpolableValueType2[InterpolableValueType2["Vector2"] = 2] = "Vector2";
  InterpolableValueType2[InterpolableValueType2["Vector3"] = 3] = "Vector3";
  InterpolableValueType2[InterpolableValueType2["Vector4"] = 4] = "Vector4";
  InterpolableValueType2[InterpolableValueType2["Quaternion"] = 5] = "Quaternion";
  InterpolableValueType2[InterpolableValueType2["Color"] = 6] = "Color";
  InterpolableValueType2[InterpolableValueType2["Array"] = 7] = "Array";
  InterpolableValueType2[InterpolableValueType2["Boolean"] = 8] = "Boolean";
})(InterpolableValueType || (InterpolableValueType = {}));
var AnimationClipDecoder = function() {
  function AnimationClipDecoder2() {
  }
  AnimationClipDecoder2.decode = function decode2(engine, bufferReader) {
    return new Promise(function(resolve) {
      var name = bufferReader.nextStr();
      var clip = new AnimationClip(name);
      var eventsLen = bufferReader.nextUint16();
      for (var i = 0; i < eventsLen; ++i) {
        var event = new AnimationEvent();
        event.time = bufferReader.nextFloat32();
        event.functionName = bufferReader.nextStr();
        event.parameter = JSON.parse(bufferReader.nextStr()).val;
        clip.addEvent(event);
      }
      var curveBindingsLen = bufferReader.nextUint16();
      for (var i1 = 0; i1 < curveBindingsLen; ++i1) {
        var relativePath = bufferReader.nextStr();
        var componentStr = bufferReader.nextStr();
        var componentType = ComponentMap[componentStr];
        var property = bufferReader.nextStr();
        var curve = void 0;
        var interpolation = bufferReader.nextUint8();
        var keysLen = bufferReader.nextUint16();
        var curveType = bufferReader.nextStr();
        switch (curveType) {
          case "AnimationFloatCurve": {
            curve = curve || new AnimationFloatCurve();
            curve.interpolation = interpolation;
            for (var j = 0; j < keysLen; ++j) {
              var keyframe = new Keyframe();
              keyframe.time = bufferReader.nextFloat32();
              keyframe.value = bufferReader.nextFloat32();
              keyframe.inTangent = bufferReader.nextFloat32();
              keyframe.outTangent = bufferReader.nextFloat32();
              curve.addKey(keyframe);
            }
            break;
          }
          case "AnimationArrayCurve": {
            curve = curve || new AnimationArrayCurve();
            curve.interpolation = interpolation;
            for (var j1 = 0; j1 < keysLen; ++j1) {
              var keyframe1 = new Keyframe();
              keyframe1.time = bufferReader.nextFloat32();
              var len = bufferReader.nextUint16();
              keyframe1.value = Array.from(bufferReader.nextFloat32Array(len));
              keyframe1.inTangent = Array.from(bufferReader.nextFloat32Array(len));
              keyframe1.outTangent = Array.from(bufferReader.nextFloat32Array(len));
              curve.addKey(keyframe1);
            }
            break;
          }
          case "AnimationFloatArrayCurve": {
            curve = curve || new AnimationFloatArrayCurve();
            curve.interpolation = interpolation;
            for (var j2 = 0; j2 < keysLen; ++j2) {
              var keyframe2 = new Keyframe();
              keyframe2.time = bufferReader.nextFloat32();
              var len1 = bufferReader.nextUint16();
              keyframe2.value = bufferReader.nextFloat32Array(len1);
              keyframe2.inTangent = Array.from(bufferReader.nextFloat32Array(len1));
              keyframe2.outTangent = Array.from(bufferReader.nextFloat32Array(len1));
              curve.addKey(keyframe2);
            }
            break;
          }
          case "AnimationVector2Curve": {
            curve = curve || new AnimationVector2Curve();
            curve.interpolation = interpolation;
            for (var j3 = 0; j3 < keysLen; ++j3) {
              var keyframe3 = new Keyframe();
              keyframe3.time = bufferReader.nextFloat32();
              keyframe3.value = new Vector2(bufferReader.nextFloat32(), bufferReader.nextFloat32());
              keyframe3.inTangent = new Vector2(bufferReader.nextFloat32(), bufferReader.nextFloat32());
              keyframe3.outTangent = new Vector2(bufferReader.nextFloat32(), bufferReader.nextFloat32());
              curve.addKey(keyframe3);
            }
            break;
          }
          case "AnimationVector3Curve": {
            curve = curve || new AnimationVector3Curve();
            curve.interpolation = interpolation;
            for (var j4 = 0; j4 < keysLen; ++j4) {
              var keyframe4 = new Keyframe();
              keyframe4.time = bufferReader.nextFloat32();
              keyframe4.value = new Vector3(bufferReader.nextFloat32(), bufferReader.nextFloat32(), bufferReader.nextFloat32());
              keyframe4.inTangent = new Vector3(bufferReader.nextFloat32(), bufferReader.nextFloat32(), bufferReader.nextFloat32());
              keyframe4.outTangent = new Vector3(bufferReader.nextFloat32(), bufferReader.nextFloat32(), bufferReader.nextFloat32());
              curve.addKey(keyframe4);
            }
            break;
          }
          case "AnimationVector4Curve": {
            curve = curve || new AnimationVector4Curve();
            curve.interpolation = interpolation;
            var keyframe5 = new Keyframe();
            keyframe5.time = bufferReader.nextFloat32();
            keyframe5.value = new Vector4(bufferReader.nextFloat32(), bufferReader.nextFloat32(), bufferReader.nextFloat32(), bufferReader.nextFloat32());
            keyframe5.inTangent = new Vector4(bufferReader.nextFloat32(), bufferReader.nextFloat32(), bufferReader.nextFloat32(), bufferReader.nextFloat32());
            keyframe5.outTangent = new Vector4(bufferReader.nextFloat32(), bufferReader.nextFloat32(), bufferReader.nextFloat32(), bufferReader.nextFloat32());
            curve.addKey(keyframe5);
            break;
          }
          case "AnimationColorCurve": {
            curve = curve || new AnimationColorCurve();
            curve.interpolation = interpolation;
            for (var j5 = 0; j5 < keysLen; ++j5) {
              var keyframe6 = new Keyframe();
              keyframe6.time = bufferReader.nextFloat32();
              keyframe6.value = new Color(bufferReader.nextFloat32(), bufferReader.nextFloat32(), bufferReader.nextFloat32(), bufferReader.nextFloat32());
              keyframe6.inTangent = new Vector4(bufferReader.nextFloat32(), bufferReader.nextFloat32(), bufferReader.nextFloat32(), bufferReader.nextFloat32());
              keyframe6.outTangent = new Vector4(bufferReader.nextFloat32(), bufferReader.nextFloat32(), bufferReader.nextFloat32(), bufferReader.nextFloat32());
              curve.addKey(keyframe6);
            }
            break;
          }
          case "AnimationQuaternionCurve": {
            curve = curve || new AnimationQuaternionCurve();
            curve.interpolation = interpolation;
            for (var j6 = 0; j6 < keysLen; ++j6) {
              var keyframe7 = new Keyframe();
              keyframe7.time = bufferReader.nextFloat32();
              keyframe7.value = new Quaternion(bufferReader.nextFloat32(), bufferReader.nextFloat32(), bufferReader.nextFloat32(), bufferReader.nextFloat32());
              keyframe7.inTangent = new Vector4(bufferReader.nextFloat32(), bufferReader.nextFloat32(), bufferReader.nextFloat32(), bufferReader.nextFloat32());
              keyframe7.outTangent = new Vector4(bufferReader.nextFloat32(), bufferReader.nextFloat32(), bufferReader.nextFloat32(), bufferReader.nextFloat32());
              curve.addKey(keyframe7);
            }
            break;
          }
        }
        clip.addCurveBinding(relativePath, componentType, property, curve);
      }
      resolve(clip);
    });
  };
  return AnimationClipDecoder2;
}();
AnimationClipDecoder = __decorate2([
  decoder("AnimationClip")
], AnimationClipDecoder);
var SceneParserContext = function() {
  function SceneParserContext2(originalData, scene) {
    this.originalData = originalData;
    this.scene = scene;
    this.entityMap = /* @__PURE__ */ new Map();
    this.components = /* @__PURE__ */ new Map();
    this.assets = /* @__PURE__ */ new Map();
    this.entityConfigMap = /* @__PURE__ */ new Map();
    this.rootIds = [];
  }
  var _proto = SceneParserContext2.prototype;
  _proto.destroy = function destroy() {
    this.entityMap.clear();
    this.components.clear();
    this.assets.clear();
    this.entityConfigMap.clear();
    this.rootIds.length = 0;
  };
  return SceneParserContext2;
}();
var SceneParser = function() {
  function SceneParser2(context) {
    var _this = this;
    this.context = context;
    this._engine = this.context.scene.engine;
    this._organizeEntities = this._organizeEntities.bind(this);
    this._parseComponents = this._parseComponents.bind(this);
    this._clearAndResolveScene = this._clearAndResolveScene.bind(this);
    this.promise = new Promise(function(resolve, reject) {
      _this._reject = reject;
      _this._resolve = resolve;
    });
  }
  var _proto = SceneParser2.prototype;
  _proto.start = function start() {
    this._parseEntities().then(this._organizeEntities).then(this._parseComponents).then(this._clearAndResolveScene).then(this._resolve).catch(this._reject);
  };
  _proto._parseEntities = function _parseEntities() {
    var entitiesConfig = this.context.originalData.entities;
    var entityConfigMap = this.context.entityConfigMap;
    var entitiesMap = this.context.entityMap;
    var rootIds = this.context.rootIds;
    var engine = this._engine;
    var promises = entitiesConfig.map(function(entityConfig) {
      entityConfigMap.set(entityConfig.id, entityConfig);
      if (!entityConfig.parent)
        rootIds.push(entityConfig.id);
      return ReflectionParser.parseEntity(entityConfig, engine);
    });
    return Promise.all(promises).then(function(entities) {
      for (var i = 0, l = entities.length; i < l; i++) {
        entitiesMap.set(entitiesConfig[i].id, entities[i]);
      }
      return entities;
    });
  };
  _proto._organizeEntities = function _organizeEntities() {
    var _this_context = this.context, entityConfigMap = _this_context.entityConfigMap, entityMap = _this_context.entityMap, scene = _this_context.scene, rootIds = _this_context.rootIds;
    for (var _iterator = _create_for_of_iterator_helper_loose(rootIds), _step; !(_step = _iterator()).done; ) {
      var rootId = _step.value;
      PrefabParser.parseChildren(entityConfigMap, entityMap, rootId);
    }
    var rootEntities = rootIds.map(function(id) {
      return entityMap.get(id);
    });
    for (var i = 0; i < rootEntities.length; i++) {
      scene.addRootEntity(rootEntities[i]);
    }
  };
  _proto._parseComponents = function _parseComponents() {
    var entitiesConfig = this.context.originalData.entities;
    var entityMap = this.context.entityMap;
    var promises = [];
    for (var i = 0, l = entitiesConfig.length; i < l; i++) {
      var entityConfig = entitiesConfig[i];
      var entity = entityMap.get(entityConfig.id);
      for (var i1 = 0; i1 < entityConfig.components.length; i1++) {
        var componentConfig = entityConfig.components[i1];
        var key = !componentConfig.refId ? componentConfig.class : componentConfig.refId;
        var component = void 0;
        if (key === "Animator") {
          component = entity.getComponent(Loader.getClass(key));
        }
        component = component || entity.addComponent(Loader.getClass(key));
        var promise = ReflectionParser.parsePropsAndMethods(component, componentConfig, entity.engine);
        promises.push(promise);
      }
    }
    return Promise.all(promises);
  };
  _proto._clearAndResolveScene = function _clearAndResolveScene() {
    var scene = this.context.scene;
    this.context.destroy();
    return scene;
  };
  SceneParser2.parse = function parse2(engine, sceneData) {
    var scene = new Scene(engine);
    var context = new SceneParserContext(sceneData, scene);
    var parser = new SceneParser2(context);
    parser.start();
    return parser.promise;
  };
  return SceneParser2;
}();
var MeshLoader$1 = function(Loader2) {
  _inherits3(MeshLoader2, Loader2);
  function MeshLoader2() {
    return Loader2.apply(this, arguments);
  }
  var _proto = MeshLoader2.prototype;
  _proto.load = function load(item, resourceManager) {
    var _this = this;
    return new AssetPromise(function(resolve, reject) {
      _this.request(item.url, {
        type: "arraybuffer"
      }).then(function(data) {
        decode(data, resourceManager.engine).then(function(mesh) {
          resolve(mesh);
        });
      });
    });
  };
  return MeshLoader2;
}(Loader);
MeshLoader$1 = __decorate2([
  resourceLoader("Mesh", [
    "prefab"
  ], true)
], MeshLoader$1);
var EditorTextureLoader = function(Loader2) {
  _inherits3(EditorTextureLoader2, Loader2);
  function EditorTextureLoader2() {
    return Loader2.apply(this, arguments);
  }
  var _proto = EditorTextureLoader2.prototype;
  _proto.load = function load(item, resourceManager) {
    var _this = this;
    return new AssetPromise(function(resolve) {
      _this.request(item.url, {
        type: "arraybuffer"
      }).then(function(data) {
        decode(data, resourceManager.engine).then(function(texture) {
          resolve(texture);
        });
      });
    });
  };
  return EditorTextureLoader2;
}(Loader);
EditorTextureLoader = __decorate2([
  resourceLoader("EditorTexture2D", [
    "prefab"
  ], true)
], EditorTextureLoader);
function decode(arrayBuffer, engine) {
  var header = FileHeader.decode(arrayBuffer);
  var bufferReader = new BufferReader(arrayBuffer, header.headerLength, header.dataLength);
  return decoderMap[header.type].decode(engine, bufferReader).then(function(object) {
    object.name = header.name;
    return object;
  });
}
var MeshLoader = function(Loader2) {
  _inherits3(MeshLoader2, Loader2);
  function MeshLoader2() {
    return Loader2.apply(this, arguments);
  }
  var _proto = MeshLoader2.prototype;
  _proto.load = function load(item, resourceManager) {
    var _this = this;
    return new AssetPromise(function(resolve, reject) {
      _this.request(item.url, _extends3({}, item, {
        type: "arraybuffer"
      })).then(function(data) {
        return decode(data, resourceManager.engine);
      }).then(function(mesh) {
        resolve(mesh);
      }).catch(reject);
    });
  };
  return MeshLoader2;
}(Loader);
MeshLoader = __decorate2([
  resourceLoader(AssetType.Mesh, [
    "mesh"
  ])
], MeshLoader);
var SourceFontLoader = function(Loader2) {
  _inherits3(SourceFontLoader2, Loader2);
  function SourceFontLoader2() {
    return Loader2.apply(this, arguments);
  }
  var _proto = SourceFontLoader2.prototype;
  _proto.load = function load(item, resourceManager) {
    var _this = this;
    return new AssetPromise(function(resolve, reject) {
      var url = item.url;
      _this._registerFont(url, url).then(function() {
        var font = new Font(resourceManager.engine, url);
        resolve(font);
      }).catch(function(e) {
        reject("load font " + url + " fail");
      });
    });
  };
  _proto._registerFont = function _registerFont(fontName, fontUrl) {
    return _async_to_generator(function() {
      var fontFace;
      return __generator(this, function(_state) {
        switch (_state.label) {
          case 0:
            fontFace = new FontFace(fontName, "url(" + fontUrl + ")");
            return [
              4,
              fontFace.load()
            ];
          case 1:
            _state.sent();
            document.fonts.add(fontFace);
            return [
              2
            ];
        }
      });
    })();
  };
  return SourceFontLoader2;
}(Loader);
SourceFontLoader = __decorate2([
  resourceLoader(AssetType.SourceFont, [
    "ttf",
    "otf",
    "woff"
  ], false)
], SourceFontLoader);
var SpriteAtlasLoader = function(Loader2) {
  _inherits3(SpriteAtlasLoader2, Loader2);
  function SpriteAtlasLoader2() {
    var _this;
    _this = Loader2.apply(this, arguments) || this;
    _this._tempRect = new Rect();
    _this._tempVec2 = new Vector2();
    _this._tempVec4 = new Vector4();
    return _this;
  }
  var _proto = SpriteAtlasLoader2.prototype;
  _proto.load = function load(item, resourceManager) {
    var _this = this;
    return new AssetPromise(function(resolve, reject, _, onCancel) {
      var chainPromises = [];
      onCancel(function() {
        for (var i = 0; i < chainPromises.length; i++) {
          chainPromises[i].cancel();
        }
      });
      var configPromise = _this.request(item.url, _extends3({}, item, {
        type: "json"
      }));
      chainPromises.push(configPromise);
      configPromise.then(function(atlasData) {
        var _loop = function(i2) {
          var atlasItem = atlasItems[i2];
          if (atlasItem.img) {
            chainPromises.push(resourceManager.load({
              url: GLTFUtil.parseRelativeUrl(item.url, atlasItem.img),
              type: AssetType.Texture2D,
              params: {
                format,
                mipmap
              }
            }).then(function(texture) {
              anisoLevel && (texture.anisoLevel = anisoLevel);
              filterMode !== void 0 && (texture.filterMode = filterMode);
              wrapModeU !== void 0 && (texture.wrapModeU = wrapModeU);
              wrapModeV !== void 0 && (texture.wrapModeV = wrapModeV);
              for (var i3 = 0; i3 < atlasItem.sprites.length; i3++) {
                spriteAtlas._addSprite(_this._makeSprite(engine, atlasItem.sprites[i3], texture));
              }
            }).catch(reject));
          } else {
            for (var i1 = 0; i1 < atlasItem.sprites.length; i1++) {
              spriteAtlas._addSprite(_this._makeSprite(engine, atlasItem.sprites[i1]));
            }
          }
        };
        var atlasItems = atlasData.atlasItems, mipmap = atlasData.mipmap, anisoLevel = atlasData.anisoLevel, filterMode = atlasData.filterMode, wrapModeU = atlasData.wrapModeU, wrapModeV = atlasData.wrapModeV, format = atlasData.format;
        var atlasItemsLen = atlasItems ? atlasItems.length : 0;
        var engine = resourceManager.engine;
        var spriteAtlas = new SpriteAtlas(engine);
        if (atlasItemsLen < 0) {
          resolve(spriteAtlas);
          return;
        }
        chainPromises.length = 0;
        for (var i = 0; i < atlasItems.length; i++)
          _loop(i);
        AssetPromise.all(chainPromises).then(function() {
          resolve(spriteAtlas);
        }).catch(reject);
      }).catch(reject);
    });
  };
  _proto._makeSprite = function _makeSprite(engine, config, texture) {
    var region = config.region, atlasRegionOffset = config.atlasRegionOffset, atlasRegion = config.atlasRegion, pivot = config.pivot, border = config.border;
    var sprite = new Sprite(engine, texture, region ? this._tempRect.set(region.x, region.y, region.w, region.h) : void 0, pivot ? this._tempVec2.set(pivot.x, pivot.y) : void 0, border ? this._tempVec4.set(border.x, border.y, border.z, border.w) : void 0, config.name);
    if (texture) {
      var invW = 1 / texture.width;
      var invH = 1 / texture.height;
      sprite.atlasRegion.set(atlasRegion.x * invW, atlasRegion.y * invH, atlasRegion.w * invW, atlasRegion.h * invH);
      if (atlasRegionOffset) {
        var offsetLeft = atlasRegionOffset.x, offsetTop = atlasRegionOffset.y, offsetRight = atlasRegionOffset.z, offsetBottom = atlasRegionOffset.w;
        sprite.atlasRegionOffset.set(offsetLeft * invW, offsetTop * invH, offsetRight * invW, offsetBottom * invH);
      }
      config.atlasRotated && (sprite.atlasRotated = true);
    }
    return sprite;
  };
  return SpriteAtlasLoader2;
}(Loader);
SpriteAtlasLoader = __decorate2([
  resourceLoader(AssetType.SpriteAtlas, [
    "atlas"
  ], false)
], SpriteAtlasLoader);
var SpriteLoader = function(Loader2) {
  _inherits3(SpriteLoader2, Loader2);
  function SpriteLoader2() {
    return Loader2.apply(this, arguments);
  }
  var _proto = SpriteLoader2.prototype;
  _proto.load = function load(item, resourceManager) {
    var _this = this;
    return new AssetPromise(function(resolve, reject) {
      _this.request(item.url, _extends3({}, item, {
        type: "json"
      })).then(function(data) {
        if (data.belongToAtlas) {
          resourceManager.getResourceByRef(data.belongToAtlas).then(function(atlas) {
            resolve(atlas.getSprite(data.fullPath));
          }).catch(reject);
        } else if (data.texture) {
          resourceManager.getResourceByRef(data.texture).then(function(texture) {
            resolve(new Sprite(resourceManager.engine, texture, data.region, data.pivot, data.border));
          }).catch(reject);
        } else {
          resolve(new Sprite(resourceManager.engine, null, data.region, data.pivot, data.border));
        }
      }).catch(reject);
    });
  };
  return SpriteLoader2;
}(Loader);
SpriteLoader = __decorate2([
  resourceLoader(AssetType.Sprite, [
    "sprite"
  ], false)
], SpriteLoader);
var Texture2DLoader = function(Loader2) {
  _inherits3(Texture2DLoader2, Loader2);
  function Texture2DLoader2() {
    return Loader2.apply(this, arguments);
  }
  var _proto = Texture2DLoader2.prototype;
  _proto.load = function load(item, resourceManager) {
    var _this = this;
    return new AssetPromise(function(resolve, reject) {
      _this.request(item.url, _extends3({}, item, {
        type: "image"
      })).then(function(image) {
        var _item_params;
        var params = (_item_params = item.params) != null ? _item_params : {};
        var texture = new Texture2D(resourceManager.engine, image.width, image.height, params.format, params.mipmap);
        if (!texture._platformTexture)
          return;
        texture.setImageSource(image);
        texture.generateMipmaps();
        if (item.url.indexOf("data:") !== 0) {
          var splitPath = item.url.split("/");
          texture.name = splitPath[splitPath.length - 1];
        }
        resolve(texture);
      }).catch(function(e) {
        reject(e);
      });
    });
  };
  return Texture2DLoader2;
}(Loader);
Texture2DLoader = __decorate2([
  resourceLoader(AssetType.Texture2D, [
    "png",
    "jpg",
    "webp",
    "jpeg"
  ])
], Texture2DLoader);
var TextureCubeLoader = function(Loader2) {
  _inherits3(TextureCubeLoader2, Loader2);
  function TextureCubeLoader2() {
    return Loader2.apply(this, arguments);
  }
  var _proto = TextureCubeLoader2.prototype;
  _proto.load = function load(item, resourceManager) {
    var _this = this;
    return new AssetPromise(function(resolve, reject) {
      Promise.all(item.urls.map(function(url) {
        return _this.request(url, _extends3({}, item, {
          type: "image"
        }));
      })).then(function(images) {
        var _images_ = images[0], width = _images_.width, height = _images_.height;
        if (width !== height) {
          console.error("The cube texture must have the same width and height");
          return;
        }
        var tex = new TextureCube(resourceManager.engine, width);
        if (!tex._platformTexture)
          return;
        for (var faceIndex = 0; faceIndex < 6; faceIndex++) {
          tex.setImageSource(TextureCubeFace.PositiveX + faceIndex, images[faceIndex], 0);
        }
        tex.generateMipmaps();
        resolve(tex);
      }).catch(function(e) {
        reject(e);
      });
    });
  };
  return TextureCubeLoader2;
}(Loader);
TextureCubeLoader = __decorate2([
  resourceLoader(AssetType.TextureCube, [
    ""
  ])
], TextureCubeLoader);
var AnimationClipLoader = function(Loader2) {
  _inherits3(AnimationClipLoader2, Loader2);
  function AnimationClipLoader2() {
    return Loader2.apply(this, arguments);
  }
  var _proto = AnimationClipLoader2.prototype;
  _proto.load = function load(item, resourceManager) {
    var _this = this;
    return new AssetPromise(function(resolve, reject) {
      _this.request(item.url, _extends3({}, item, {
        type: "arraybuffer"
      })).then(function(data) {
        return decode(data, resourceManager.engine).then(resolve);
      }).catch(reject);
    });
  };
  return AnimationClipLoader2;
}(Loader);
AnimationClipLoader = __decorate2([
  resourceLoader(AssetType.AnimationClip, [
    "ani"
  ])
], AnimationClipLoader);
var SceneLoader = function(Loader2) {
  _inherits3(SceneLoader2, Loader2);
  function SceneLoader2() {
    return Loader2.apply(this, arguments);
  }
  var _proto = SceneLoader2.prototype;
  _proto.load = function load(item, resourceManager) {
    var _this = this;
    var engine = resourceManager.engine;
    return new AssetPromise(function(resolve, reject) {
      _this.request(item.url, {
        type: "json"
      }).then(function(data) {
        engine.resourceManager.initVirtualResources(data.files);
        return SceneParser.parse(engine, data).then(function(scene) {
          var ambient = data.scene.ambient;
          var ambientLightPromise = Promise.resolve();
          if (ambient.ambientLight) {
            ambientLightPromise = resourceManager.getResourceByRef(data.scene.ambient.ambientLight).then(function(light) {
              scene.ambientLight = light;
              scene.ambientLight.diffuseIntensity = ambient.diffuseIntensity;
              scene.ambientLight.specularIntensity = ambient.specularIntensity;
            });
          } else {
            scene.ambientLight.diffuseIntensity = ambient.diffuseIntensity;
            scene.ambientLight.specularIntensity = ambient.specularIntensity;
            scene.ambientLight.diffuseSolidColor.copyFrom(ambient.diffuseSolidColor);
          }
          var background = data.scene.background;
          scene.background.mode = background.mode;
          var backgroundPromise = Promise.resolve();
          switch (scene.background.mode) {
            case BackgroundMode.SolidColor:
              scene.background.solidColor.copyFrom(background.color);
              break;
            case BackgroundMode.Sky:
              if (background.sky) {
                backgroundPromise = resourceManager.getResourceByRef(background.sky).then(function(light) {
                  var sky = scene.background.sky;
                  var skyMaterial = new SkyBoxMaterial(engine);
                  skyMaterial.textureCubeMap = light.specularTexture;
                  skyMaterial.textureDecodeRGBM = true;
                  sky.material = skyMaterial;
                  sky.mesh = PrimitiveMesh.createCuboid(engine, 1, 1, 1);
                });
              }
              break;
            case BackgroundMode.Texture:
              if (background.texture) {
                backgroundPromise = resourceManager.getResourceByRef(background.texture).then(function(texture) {
                  scene.background.texture = texture;
                });
              }
              break;
          }
          var shadow = data.scene.shadow;
          if (shadow) {
            if (shadow.castShadows != void 0)
              scene.castShadows = shadow.castShadows;
            if (shadow.shadowResolution != void 0)
              scene.shadowResolution = shadow.shadowResolution;
            if (shadow.shadowDistance != void 0)
              scene.shadowDistance = shadow.shadowDistance;
            if (shadow.shadowCascades != void 0)
              scene.shadowCascades = shadow.shadowCascades;
          }
          var fog = data.scene.fog;
          if (fog) {
            if (fog.fogMode != void 0)
              scene.fogMode = fog.fogMode;
            if (fog.fogStart != void 0)
              scene.fogStart = fog.fogStart;
            if (fog.fogEnd != void 0)
              scene.fogEnd = fog.fogEnd;
            if (fog.fogDensity != void 0)
              scene.fogDensity = fog.fogDensity;
            if (fog.fogColor != void 0)
              scene.fogColor.copyFrom(fog.fogColor);
          }
          return Promise.all([
            ambientLightPromise,
            backgroundPromise
          ]).then(function() {
            resolve(scene);
          });
        });
      }).catch(reject);
    });
  };
  return SceneLoader2;
}(Loader);
SceneLoader = __decorate2([
  resourceLoader(AssetType.Scene, [
    "prefab"
  ], true)
], SceneLoader);
ReflectionParser.registerCustomParseComponent("TextRenderer", _async_to_generator(function(instance, item, engine) {
  var props;
  return __generator(this, function(_state) {
    props = item.props;
    if (!props.font) {
      instance.font = Font.createFromOS(engine, props.fontFamily || "Arial");
    }
    return [
      2,
      instance
    ];
  });
}));

// node_modules/@galacean/engine/dist/module.js
var version = "0.9.10";
console.log("Galacean engine version: " + version);
for (key in module_exports) {
  Loader.registerClass(key, module_exports[key]);
}
var key;
export {
  AmbientLight,
  AnimationArrayCurve,
  AnimationBoolCurve,
  AnimationClip,
  AnimationClipCurveBinding,
  AnimationClipDecoder,
  AnimationColorCurve,
  AnimationCurve,
  AnimationEvent,
  AnimationFloatArrayCurve,
  AnimationFloatCurve,
  AnimationQuaternionCurve,
  AnimationVector2Curve,
  AnimationVector3Curve,
  AnimationVector4Curve,
  Animator,
  AnimatorConditionMode,
  AnimatorController,
  AnimatorControllerLayer,
  AnimatorCullingMode,
  AnimatorLayerBlendingMode,
  AnimatorState,
  AnimatorStateMachine,
  AnimatorStateTransition,
  AssetPromise,
  AssetType,
  Background,
  BackgroundMode,
  BackgroundTextureFillMode,
  BaseMaterial,
  BasicRenderPipeline,
  BlendFactor,
  BlendMode,
  BlendOperation,
  BlendShape,
  BlendShapeFrame,
  BlinnPhongMaterial,
  BoolUpdateFlag,
  BoundingBox,
  BoundingFrustum,
  BoundingSphere,
  BoxColliderShape,
  Buffer,
  BufferBindFlag,
  BufferMesh,
  BufferUsage,
  BufferUtil,
  Camera,
  CameraClearFlags,
  CapsuleColliderShape,
  CharacterController,
  CloneManager,
  Collider,
  ColliderShape,
  ColliderShapeUpAxis,
  CollisionDetectionMode,
  CollisionUtil,
  Color,
  ColorSpace,
  ColorWriteMask,
  CompareFunction,
  Component,
  ComponentMap,
  ContainmentType,
  ControllerCollisionFlag,
  ControllerNonWalkableMode,
  CubeProbe,
  CullMode,
  DataType,
  DiffuseMode,
  DirectLight,
  DynamicCollider,
  DynamicColliderConstraints,
  EditorTextureLoader,
  Engine,
  EngineObject,
  Entity,
  Event,
  EventDispatcher,
  FixedJoint,
  FogMode,
  Font,
  FontStyle,
  FrustumFace,
  GLCapabilityType,
  GLCompressedTextureInternalFormat,
  GLTFResource,
  HingeJoint,
  HitResult,
  IndexBufferBinding,
  IndexFormat,
  InputManager,
  InterpolableValueType,
  InterpolationType,
  Joint,
  JointLimits,
  JointMotor,
  Keyframe,
  Keys,
  Layer,
  Light,
  Loader,
  Logger,
  Material,
  MathUtil,
  Matrix,
  Matrix3x3,
  Mesh,
  MeshDecoder,
  MeshLoader$1 as MeshLoader,
  MeshRenderElement,
  MeshRenderer,
  MeshTopology,
  ModelMesh,
  ObjectValues,
  OverflowMode,
  PBRBaseMaterial,
  PBRMaterial,
  PBRSpecularMaterial,
  ParticleRenderer,
  ParticleRendererBlendMode,
  PhysicsManager,
  PhysicsMaterial,
  PhysicsMaterialCombineMode,
  Plane,
  PlaneColliderShape,
  PlaneIntersectionType,
  Platform,
  PointLight,
  Pointer,
  PointerButton,
  PointerPhase,
  PrefabParser,
  PrimitiveMesh,
  Probe,
  Quaternion,
  Ray,
  Rect,
  RefObject,
  ReflectionParser,
  RenderBufferDepthFormat,
  RenderFace,
  RenderPass,
  RenderQueue,
  RenderQueueType,
  RenderTarget,
  Renderer,
  ResourceManager,
  Scene,
  SceneManager,
  SceneParser,
  Script,
  SetDataOptions,
  Shader,
  ShaderData,
  ShaderFactory,
  ShaderPass,
  ShaderProperty,
  ShaderPropertyType,
  ShadowCascadesMode,
  ShadowResolution,
  ShadowType,
  Skin,
  SkinnedMeshRenderer,
  Sky,
  SkyBoxMaterial,
  SphereColliderShape,
  SphericalHarmonics3,
  SpotLight,
  SpringJoint,
  Sprite,
  SpriteAtlas,
  SpriteDrawMode,
  SpriteElement,
  SpriteMask,
  SpriteMaskInteraction,
  SpriteMaskLayer,
  SpriteRenderer,
  StateMachineScript,
  StaticCollider,
  StencilOperation,
  SubMesh,
  SystemInfo,
  TextHorizontalAlignment,
  TextRenderer,
  TextVerticalAlignment,
  Texture,
  Texture2D,
  Texture2DArray,
  Texture2DDecoder,
  TextureCoordinate,
  TextureCube,
  TextureCubeFace,
  TextureDepthCompareFunction,
  TextureFilterMode,
  TextureFormat,
  TextureWrapMode,
  Time,
  TrailMaterial,
  TrailRenderer,
  Transform,
  UnlitMaterial,
  Util,
  Vector2,
  Vector3,
  Vector4,
  VertexBufferBinding,
  VertexElement,
  VertexElementFormat,
  WebCanvas,
  WebGLEngine,
  WebGLMode,
  WebGLRenderer,
  WrapMode,
  assignmentClone,
  decode,
  deepClone,
  dependentComponents,
  ignoreClone,
  parseSingleKTX,
  request,
  resourceLoader,
  shallowClone,
  version
};
//# sourceMappingURL=@galacean_engine.js.map
