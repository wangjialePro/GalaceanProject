{
  "version": 3,
  "sources": ["../../@galacean/engine-math/src/enums/ContainmentType.ts", "../../@galacean/engine-math/src/enums/PlaneIntersectionType.ts", "../../@galacean/engine-math/src/enums/FrustumFace.ts", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_create_class.js", "../../@galacean/engine-math/src/MathUtil.ts", "../../@galacean/engine-math/src/Vector3.ts", "../../@galacean/engine-math/src/BoundingSphere.ts", "../../@galacean/engine-math/src/BoundingBox.ts", "../../@galacean/engine-math/src/CollisionUtil.ts", "../../@galacean/engine-math/src/Plane.ts", "../../@galacean/engine-math/src/BoundingFrustum.ts", "../../@galacean/engine-math/src/Matrix3x3.ts", "../../@galacean/engine-math/src/Quaternion.ts", "../../@galacean/engine-math/src/Matrix.ts", "../../@galacean/engine-math/src/Ray.ts", "../../@galacean/engine-math/src/Vector2.ts", "../../@galacean/engine-math/src/Vector4.ts", "../../@galacean/engine-math/src/Color.ts", "../../@galacean/engine-math/src/Rect.ts", "../../@galacean/engine-math/src/SphericalHarmonics3.ts", "../../@galacean/engine-core/src/Platform.ts", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_assert_this_initialized.js", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_create_class.js", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_set_prototype_of.js", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_inherits.js", "../../@galacean/math/src/MathUtil.ts", "../../@galacean/math/src/Color.ts", "../../node_modules/.pnpm/tslib@2.5.0/node_modules/tslib/tslib.es6.js", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_instanceof.js", "../../@galacean/engine-core/src/clone/enums/CloneMode.ts", "../../@galacean/engine-core/src/clone/CloneManager.ts", "../../@galacean/engine-core/src/base/EngineObject.ts", "../../@galacean/engine-core/src/asset/RefObject.ts", "../../@galacean/engine-core/src/texture/enums/RenderBufferDepthFormat.ts", "../../@galacean/engine-core/src/texture/enums/TextureCubeFace.ts", "../../@galacean/engine-core/src/texture/enums/TextureDepthCompareFunction.ts", "../../@galacean/engine-core/src/texture/enums/TextureFilterMode.ts", "../../@galacean/engine-core/src/texture/enums/TextureFormat.ts", "../../@galacean/engine-core/src/texture/enums/TextureWrapMode.ts", "../../@galacean/engine-core/src/base/Event.ts", "../../@galacean/engine-core/src/base/EventDispatcher.ts", "../../@galacean/engine-core/src/base/Logger.ts", "../../@galacean/engine-core/src/base/Time.ts", "../../@galacean/engine-core/src/base/Util.ts", "../../@galacean/engine-core/src/base/Constant.ts", "../../@galacean/engine-core/src/texture/Texture.ts", "../../@galacean/engine-core/src/texture/RenderTarget.ts", "../../@galacean/engine-core/src/texture/Texture2D.ts", "../../@galacean/engine-core/src/texture/Texture2DArray.ts", "../../@galacean/engine-core/src/texture/TextureCube.ts", "../../@galacean/engine-core/src/2d/atlas/FontAtlas.ts", "../../@galacean/engine-core/src/2d/text/SubFont.ts", "../../@galacean/engine-core/src/2d/text/Font.ts", "../../@galacean/engine-core/src/asset/AssetPromise.ts", "../../@galacean/engine-core/src/asset/ResourceManager.ts", "../../@galacean/engine-core/src/DisorderedArray.ts", "../../@galacean/engine-core/src/ComponentsManager.ts", "../../@galacean/engine-core/src/clone/ComponentCloner.ts", "../../@galacean/engine-core/src/ComponentsDependencies.ts", "../../@galacean/engine-core/src/Layer.ts", "../../@galacean/engine-core/src/UpdateFlag.ts", "../../@galacean/engine-core/src/BoolUpdateFlag.ts", "../../@galacean/engine-core/src/Component.ts", "../../@galacean/engine-core/src/UpdateFlagManager.ts", "../../@galacean/engine-core/src/Transform.ts", "../../@galacean/engine-core/src/Entity.ts", "../../@galacean/engine-core/src/enums/ColorSpace.ts", "../../@galacean/engine-core/src/input/enums/PointerPhase.ts", "../../@galacean/engine-core/src/input/pointer/Pointer.ts", "../../@galacean/engine-core/src/SystemInfo.ts", "../../@galacean/engine-core/src/input/enums/Keys.ts", "../../@galacean/engine-core/src/input/keyboard/KeyboardManager.ts", "../../@galacean/engine-core/src/enums/CameraClearFlags.ts", "../../@galacean/engine-core/src/physics/HitResult.ts", "../../@galacean/engine-core/src/physics/PhysicsManager.ts", "../../@galacean/engine-core/src/physics/enums/PhysicsMaterialCombineMode.ts", "../../@galacean/engine-core/src/physics/PhysicsMaterial.ts", "../../@galacean/engine-core/src/physics/Collider.ts", "../../@galacean/engine-core/src/physics/enums/ControllerNonWalkableMode.ts", "../../@galacean/engine-core/src/physics/CharacterController.ts", "../../@galacean/engine-core/src/physics/shape/ColliderShape.ts", "../../@galacean/engine-core/src/physics/shape/BoxColliderShape.ts", "../../@galacean/engine-core/src/physics/shape/SphereColliderShape.ts", "../../@galacean/engine-core/src/physics/shape/PlaneColliderShape.ts", "../../@galacean/engine-core/src/physics/enums/ColliderShapeUpAxis.ts", "../../@galacean/engine-core/src/physics/shape/CapsuleColliderShape.ts", "../../@galacean/engine-core/src/physics/joint/Joint.ts", "../../@galacean/engine-core/src/physics/joint/FixedJoint.ts", "../../@galacean/engine-core/src/physics/enums/HingeJointFlag.ts", "../../@galacean/engine-core/src/physics/joint/HingeJoint.ts", "../../@galacean/engine-core/src/physics/joint/SpringJoint.ts", "../../@galacean/engine-core/src/physics/joint/JointLimits.ts", "../../@galacean/engine-core/src/physics/joint/JointMotor.ts", "../../@galacean/engine-core/src/physics/enums/ControllerCollisionFlag.ts", "../../@galacean/engine-core/src/physics/StaticCollider.ts", "../../@galacean/engine-core/src/physics/DynamicCollider.ts", "../../@galacean/engine-core/src/input/enums/PointerButton.ts", "../../@galacean/engine-core/src/input/pointer/PointerManager.ts", "../../@galacean/engine-core/src/input/wheel/WheelManager.ts", "../../@galacean/engine-core/src/input/InputManager.ts", "../../@galacean/engine-core/src/shadow/enum/ShadowCascadesMode.ts", "../../@galacean/engine-core/src/shadow/enum/ShadowResolution.ts", "../../@galacean/engine-core/src/shadow/enum/ShadowType.ts", "../../@galacean/engine-core/src/shader/enums/RenderQueueType.ts", "../../@galacean/engine-core/src/shader/enums/BlendFactor.ts", "../../@galacean/engine-core/src/shader/enums/BlendOperation.ts", "../../@galacean/engine-core/src/shader/enums/ColorWriteMask.ts", "../../@galacean/engine-core/src/shader/enums/CompareFunction.ts", "../../@galacean/engine-core/src/shader/enums/CullMode.ts", "../../@galacean/engine-core/src/shader/enums/ShaderPropertyType.ts", "../../@galacean/engine-core/src/shader/enums/StencilOperation.ts", "../../@galacean/engine-core/src/shader/ShaderMacro.ts", "../../@galacean/engine-core/src/shader/ShaderMacroCollection.ts", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_extends.js", "../../@galacean/engine-core/src/shaderlib/pbr/index.ts", "../../@galacean/engine-core/src/shaderlib/shadow/index.ts", "../../@galacean/engine-core/src/shaderlib/ShaderLib.ts", "../../@galacean/engine-core/src/shaderlib/ShaderFactory.ts", "../../@galacean/engine-core/src/shader/enums/ShaderDataGroup.ts", "../../@galacean/engine-core/src/shader/ShaderUniform.ts", "../../@galacean/engine-core/src/shader/ShaderUniformBlock.ts", "../../@galacean/engine-core/src/shader/ShaderProgram.ts", "../../@galacean/engine-core/src/shader/ShaderPass.ts", "../../@galacean/engine-core/src/shader/ShaderProperty.ts", "../../@galacean/engine-core/src/shader/Shader.ts", "../../@galacean/engine-core/src/shader/ShaderData.ts", "../../@galacean/engine-core/src/lighting/Light.ts", "../../@galacean/engine-core/src/lighting/DirectLight.ts", "../../@galacean/engine-core/src/lighting/PointLight.ts", "../../@galacean/engine-core/src/lighting/SpotLight.ts", "../../@galacean/engine-core/src/lighting/LightManager.ts", "../../@galacean/engine-core/src/shader/state/RenderTargetBlendState.ts", "../../@galacean/engine-core/src/shader/state/BlendState.ts", "../../@galacean/engine-core/src/shader/state/DepthState.ts", "../../@galacean/engine-core/src/shader/state/RasterState.ts", "../../@galacean/engine-core/src/shader/state/StencilState.ts", "../../@galacean/engine-core/src/shader/state/RenderState.ts", "../../@galacean/engine-core/src/material/Material.ts", "../../@galacean/engine-core/src/RenderPipeline/ClassPool.ts", "../../@galacean/engine-core/src/RenderPipeline/RenderElement.ts", "../../@galacean/engine-core/src/RenderPipeline/MeshRenderElement.ts", "../../@galacean/engine-core/src/RenderPipeline/RenderContext.ts", "../../@galacean/engine-core/src/RenderPipeline/SpriteElement.ts", "../../@galacean/engine-core/src/RenderPipeline/SpriteMaskElement.ts", "../../@galacean/engine-core/src/2d/enums/SpriteMaskInteraction.ts", "../../@galacean/engine-core/src/Renderer.ts", "../../@galacean/engine-core/src/base/StaticInterfaceImplement.ts", "../../@galacean/engine-core/src/2d/assembler/SimpleSpriteAssembler.ts", "../../@galacean/engine-core/src/2d/data/RenderData2D.ts", "../../@galacean/engine-core/src/2d/enums/SpriteMaskLayer.ts", "../../@galacean/engine-core/src/2d/enums/SpriteModifyFlags.ts", "../../@galacean/engine-core/src/2d/sprite/SpriteMask.ts", "../../@galacean/engine-core/src/graphic/enums/VertexElementFormat.ts", "../../@galacean/engine-core/src/graphic/enums/BufferUsage.ts", "../../@galacean/engine-core/src/graphic/enums/IndexFormat.ts", "../../@galacean/engine-core/src/graphic/BufferUtil.ts", "../../@galacean/engine-core/src/graphic/VertexElement.ts", "../../@galacean/engine-core/src/graphic/enums/BufferBindFlag.ts", "../../@galacean/engine-core/src/graphic/enums/SetDataOptions.ts", "../../@galacean/engine-core/src/graphic/Buffer.ts", "../../@galacean/engine-core/src/graphic/enums/MeshTopology.ts", "../../@galacean/engine-core/src/graphic/IndexBufferBinding.ts", "../../@galacean/engine-core/src/graphic/SubMesh.ts", "../../@galacean/engine-core/src/graphic/Mesh.ts", "../../@galacean/engine-core/src/graphic/VertexBufferBinding.ts", "../../@galacean/engine-core/src/mesh/BlendShapeManager.ts", "../../@galacean/engine-core/src/mesh/enums/VertexAttribute.ts", "../../@galacean/engine-core/src/mesh/ModelMesh.ts", "../../@galacean/engine-core/src/mesh/Skin.ts", "../../@galacean/engine-core/src/mesh/MeshRenderer.ts", "../../@galacean/engine-core/src/Utils.ts", "../../@galacean/engine-core/src/mesh/SkinnedMeshRenderer.ts", "../../@galacean/engine-core/src/mesh/PrimitiveMesh.ts", "../../@galacean/engine-core/src/mesh/BufferMesh.ts", "../../@galacean/engine-core/src/mesh/BlendShapeFrame.ts", "../../@galacean/engine-core/src/mesh/BlendShape.ts", "../../@galacean/engine-core/src/RenderPipeline/Basic2DBatcher.ts", "../../@galacean/engine-core/src/RenderPipeline/SpriteMaskBatcher.ts", "../../@galacean/engine-core/src/RenderPipeline/SpriteMaskManager.ts", "../../@galacean/engine-core/src/RenderPipeline/TextRenderElement.ts", "../../@galacean/engine-core/src/enums/BackgroundMode.ts", "../../@galacean/engine-core/src/enums/BackgroundTextureFillMode.ts", "../../@galacean/engine-core/src/sky/Sky.ts", "../../@galacean/engine-core/src/Background.ts", "../../@galacean/engine-core/src/enums/FogMode.ts", "../../@galacean/engine-core/src/lighting/enums/DiffuseMode.ts", "../../@galacean/engine-core/src/lighting/AmbientLight.ts", "../../@galacean/engine-core/src/Scene.ts", "../../@galacean/engine-core/src/SceneManager.ts", "../../@galacean/engine-core/src/shader/ShaderPool.ts", "../../@galacean/engine-core/src/shader/ShaderProgramPool.ts", "../../@galacean/engine-core/src/Engine.ts", "../../@galacean/engine-core/src/Script.ts", "../../@galacean/engine-core/src/RenderPipeline/SpriteBatcher.ts", "../../@galacean/engine-core/src/RenderPipeline/RenderQueue.ts", "../../@galacean/engine-core/src/VirtualCamera.ts", "../../@galacean/engine-core/src/shadow/ShadowSliceData.ts", "../../@galacean/engine-core/src/shadow/ShadowUtils.ts", "../../@galacean/engine-core/src/shadow/CascadedShadowCasterPass.ts", "../../@galacean/engine-core/src/RenderPipeline/RenderPass.ts", "../../@galacean/engine-core/src/RenderPipeline/BasicRenderPipeline.ts", "../../@galacean/engine-core/src/Camera.ts", "../../@galacean/engine-core/src/asset/request.ts", "../../@galacean/engine-core/src/asset/Loader.ts", "../../@galacean/engine-core/src/asset/AssetType.ts", "../../@galacean/engine-core/src/material/enums/BlendMode.ts", "../../@galacean/engine-core/src/material/enums/RenderFace.ts", "../../@galacean/engine-core/src/material/BaseMaterial.ts", "../../@galacean/engine-core/src/material/BlinnPhongMaterial.ts", "../../@galacean/engine-core/src/material/enums/TextureCoordinate.ts", "../../@galacean/engine-core/src/material/PBRBaseMaterial.ts", "../../@galacean/engine-core/src/material/PBRMaterial.ts", "../../@galacean/engine-core/src/material/PBRSpecularMaterial.ts", "../../@galacean/engine-core/src/material/UnlitMaterial.ts", "../../@galacean/engine-core/src/2d/enums/TextAlignment.ts", "../../@galacean/engine-core/src/2d/enums/TextOverflow.ts", "../../@galacean/engine-core/src/2d/enums/FontStyle.ts", "../../@galacean/engine-core/src/2d/atlas/SpriteAtlas.ts", "../../@galacean/engine-core/src/2d/enums/SpriteDrawMode.ts", "../../@galacean/engine-core/src/2d/sprite/Sprite.ts", "../../@galacean/engine-core/src/2d/assembler/SlicedSpriteAssembler.ts", "../../@galacean/engine-core/src/2d/sprite/SpriteRenderer.ts", "../../@galacean/engine-core/src/2d/text/CharRenderData.ts", "../../@galacean/engine-core/src/2d/text/CharRenderDataPool.ts", "../../@galacean/engine-core/src/2d/text/TextUtils.ts", "../../@galacean/engine-core/src/2d/text/TextRenderer.ts", "../../@galacean/engine-core/src/animation/internal/animationCurveOwner/assembler/UniversalAnimationCurveOwnerAssembler.ts", "../../@galacean/engine-core/src/animation/internal/animationCurveOwner/AnimationCurveOwner.ts", "../../@galacean/engine-core/src/animation/internal/animationCurveOwner/assembler/PositionAnimationCurveOwnerAssembler.ts", "../../@galacean/engine-core/src/animation/internal/animationCurveOwner/assembler/RotationAnimationCurveOwnerAssembler.ts", "../../@galacean/engine-core/src/animation/internal/animationCurveOwner/assembler/ScaleAnimationCurveOwnerAssembler.ts", "../../@galacean/engine-core/src/animation/internal/animationCurveOwner/assembler/BlendShapeWeightsAnimationCurveOwnerAssembler.ts", "../../@galacean/engine-core/src/animation/AnimationClipCurveBinding.ts", "../../@galacean/engine-core/src/animation/AnimationEvent.ts", "../../@galacean/engine-core/src/animation/AnimationClip.ts", "../../@galacean/engine-core/src/animation/enums/InterpolationType.ts", "../../@galacean/engine-core/src/animation/animationCurve/AnimationCurve.ts", "../../@galacean/engine-core/src/animation/animationCurve/AnimationArrayCurve.ts", "../../@galacean/engine-core/src/animation/animationCurve/AnimationBoolCurve.ts", "../../@galacean/engine-core/src/animation/animationCurve/AnimationColorCurve.ts", "../../@galacean/engine-core/src/animation/animationCurve/AnimationFloatArrayCurve.ts", "../../@galacean/engine-core/src/animation/animationCurve/AnimationFloatCurve.ts", "../../@galacean/engine-core/src/animation/animationCurve/AnimationQuaternionCurve.ts", "../../@galacean/engine-core/src/animation/animationCurve/AnimationVector2Curve.ts", "../../@galacean/engine-core/src/animation/animationCurve/AnimationVector3Curve.ts", "../../@galacean/engine-core/src/animation/animationCurve/AnimationVector4Curve.ts", "../../@galacean/engine-core/src/animation/enums/AnimatorCullingMode.ts", "../../@galacean/engine-core/src/animation/enums/AnimatorLayerBlendingMode.ts", "../../@galacean/engine-core/src/animation/enums/AnimatorStatePlayState.ts", "../../@galacean/engine-core/src/animation/enums/LayerState.ts", "../../@galacean/engine-core/src/animation/internal/AnimationEventHandler.ts", "../../@galacean/engine-core/src/animation/AnimatorTransition.ts", "../../@galacean/engine-core/src/animation/enums/WrapMode.ts", "../../@galacean/engine-core/src/animation/internal/AnimatorStatePlayData.ts", "../../@galacean/engine-core/src/animation/internal/AnimatorLayerData.ts", "../../@galacean/engine-core/src/animation/internal/AnimatorStateData.ts", "../../@galacean/engine-core/src/animation/Animator.ts", "../../@galacean/engine-core/src/animation/AnimatorController.ts", "../../@galacean/engine-core/src/animation/AnimatorControllerLayer.ts", "../../@galacean/engine-core/src/animation/StateMachineScript.ts", "../../@galacean/engine-core/src/animation/AnimatorState.ts", "../../@galacean/engine-core/src/animation/AnimatorStateMachine.ts", "../../@galacean/engine-core/src/animation/enums/AnimatorConditionMode.ts", "../../@galacean/engine-core/src/animation/Keyframe.ts", "../../@galacean/engine-core/src/sky/SkyBoxMaterial.ts", "../../@galacean/engine-core/src/particle/ParticleRenderer.ts", "../../@galacean/engine-core/src/trail/TrailMaterial.ts", "../../@galacean/engine-core/src/trail/TrailRenderer.ts", "../../@galacean/engine-core/src/env-probe/Probe.ts", "../../@galacean/engine-core/src/env-probe/CubeProbe.ts", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_create_class.js", "../../@galacean/engine-draco/src/DRACOWorker.ts", "../../@galacean/engine-draco/src/worker/worker.js", "../../@galacean/engine-draco/src/decoder.ts", "../../@galacean/engine-rhi-webgl/src/type.ts", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_create_class.js", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_instanceof.js", "../../@galacean/engine-rhi-webgl/src/WebCanvas.ts", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_set_prototype_of.js", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_inherits.js", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_extends.js", "../../@galacean/engine-rhi-webgl/src/GLCapability.ts", "../../@galacean/engine-rhi-webgl/src/GLExtensions.ts", "../../@galacean/engine-rhi-webgl/src/GLPrimitive.ts", "../../@galacean/engine-rhi-webgl/src/GLRenderStates.ts", "../../@galacean/engine-rhi-webgl/src/GLTexture.ts", "../../@galacean/engine-rhi-webgl/src/GLRenderTarget.ts", "../../@galacean/engine-rhi-webgl/src/GLTexture2D.ts", "../../@galacean/engine-rhi-webgl/src/GLTexture2DArray.ts", "../../@galacean/engine-rhi-webgl/src/GLTextureCube.ts", "../../@galacean/engine-rhi-webgl/src/WebGLRenderer.ts", "../../@galacean/engine-rhi-webgl/src/WebGLEngine.ts", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_extends.js", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_set_prototype_of.js", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_inherits.js", "../../node_modules/.pnpm/tslib@2.5.0/node_modules/tslib/tslib.es6.js", "../../@galacean/engine-loader/src/AnimatorControllerLoader.ts", "../../@galacean/engine-loader/src/BufferLoader.ts", "../../@galacean/engine-loader/src/EnvLoader.ts", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_async_to_generator.js", "../../@galacean/engine-loader/src/FontLoader.ts", "../../@galacean/engine-loader/src/gltf/parser/ParserContext.ts", "../../@galacean/engine-loader/src/gltf/Schema.ts", "../../@galacean/engine-loader/src/gltf/GLTFUtil.ts", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_array_like_to_array.js", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_array_without_holes.js", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_iterable_to_array.js", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_non_iterable_spread.js", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_to_consumable_array.js", "../../@galacean/engine-loader/src/gltf/parser/Parser.ts", "../../@galacean/engine-loader/src/gltf/extensions/ExtensionParser.ts", "../../@galacean/engine-loader/src/gltf/extensions/KHR_draco_mesh_compression.ts", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_instanceof.js", "../../@galacean/engine-loader/src/gltf/extensions/KHR_lights_punctual.ts", "../../@galacean/engine-loader/src/gltf/parser/MaterialParser.ts", "../../@galacean/engine-loader/src/gltf/extensions/KHR_materials_clearcoat.ts", "../../@galacean/engine-loader/src/gltf/extensions/KHR_materials_ior.ts", "../../@galacean/engine-loader/src/gltf/extensions/KHR_materials_pbrSpecularGlossiness.ts", "../../@galacean/engine-loader/src/gltf/extensions/KHR_materials_unlit.ts", "../../@galacean/engine-loader/src/gltf/extensions/KHR_materials_variants.ts", "../../@galacean/engine-loader/src/gltf/extensions/KHR_mesh_quantization.ts", "../../@galacean/engine-loader/src/gltf/extensions/KHR_texture_transform.ts", "../../@galacean/engine-loader/src/gltf/extensions/GALACEAN_materials_remap.ts", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_create_for_of_iterator_helper_loose.js", "../../@galacean/engine-loader/src/gltf/parser/AnimationParser.ts", "../../@galacean/engine-loader/src/gltf/parser/BufferParser.ts", "../../@galacean/engine-loader/src/gltf/parser/EntityParser.ts", "../../@galacean/engine-loader/src/gltf/parser/MeshParser.ts", "../../@galacean/engine-loader/src/gltf/parser/SceneParser.ts", "../../@galacean/engine-loader/src/gltf/parser/SkinParser.ts", "../../@galacean/engine-loader/src/gltf/parser/TextureParser.ts", "../../@galacean/engine-loader/src/gltf/parser/Validator.ts", "../../@galacean/engine-loader/src/gltf/GLTFParser.ts", "../../@galacean/engine-loader/src/gltf/GLTFResource.ts", "../../@galacean/engine-loader/src/GLTFLoader.ts", "../../@galacean/engine-loader/src/HDRLoader.ts", "../../@galacean/engine-loader/src/JSONLoader.ts", "../../@galacean/engine-loader/src/compressed-texture/KhronosTextureContainer.ts", "../../@galacean/engine-loader/src/compressed-texture/index.ts", "../../@galacean/engine-loader/src/KTXCubeLoader.ts", "../../@galacean/engine-loader/src/KTXLoader.ts", "../../@galacean/engine-loader/src/MaterialLoader.ts", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_create_class.js", "../../@galacean/engine-loader/src/resource-deserialize/utils/BufferReader.ts", "../../@galacean/engine-loader/src/resource-deserialize/utils/Decorator.ts", "../../@galacean/engine-loader/src/resource-deserialize/utils/FileHeader.ts", "../../@galacean/engine-loader/src/resource-deserialize/resources/mesh/MeshDecoder.ts", "../../@galacean/engine-loader/src/resource-deserialize/resources/texture2D/TextureDecoder.ts", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_is_native_reflect_construct.js", "../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_construct.js", "../../@galacean/engine-loader/src/resource-deserialize/resources/prefab/ReflectionParser.ts", "../../@galacean/engine-loader/src/resource-deserialize/resources/prefab/PrefabParser.ts", "../../@galacean/engine-loader/src/resource-deserialize/resources/animationClip/ComponentMap.ts", "../../@galacean/engine-loader/src/resource-deserialize/resources/animationClip/AnimationClipDecoder.ts", "../../@galacean/engine-loader/src/resource-deserialize/resources/scene/SceneParserContext.ts", "../../@galacean/engine-loader/src/resource-deserialize/resources/scene/SceneParser.ts", "../../@galacean/engine-loader/src/resource-deserialize/resources/scene/MeshLoader.ts", "../../@galacean/engine-loader/src/resource-deserialize/resources/scene/EditorTextureLoader.ts", "../../@galacean/engine-loader/src/resource-deserialize/index.ts", "../../@galacean/engine-loader/src/MeshLoader.ts", "../../@galacean/engine-loader/src/SourceFontLoader.ts", "../../@galacean/engine-loader/src/SpriteAtlasLoader.ts", "../../@galacean/engine-loader/src/SpriteLoader.ts", "../../@galacean/engine-loader/src/Texture2DLoader.ts", "../../@galacean/engine-loader/src/TextureCubeLoader.ts", "../../@galacean/engine-loader/src/AnimationClipLoader.ts", "../../@galacean/engine-loader/src/SceneLoader.ts", "../../@galacean/engine/src/index.ts"],
  "sourcesContent": ["/**\n * Defines how the bounding volumes intersects or contain one another.\n */\nexport enum ContainmentType {\n  /** Indicates that there is no overlap between two bounding volumes. */\n  Disjoint,\n  /** Indicates that one bounding volume completely contains another volume. */\n  Contains,\n  /** Indicates that bounding volumes partially overlap one another. */\n  Intersects\n}\n", "/**\n * Defines the intersection between a plane and a bounding volume.\n */\nexport enum PlaneIntersectionType {\n  /** There is no intersection, the bounding volume is in the back of the plane. */\n  Back,\n  /** There is no intersection, the bounding volume is in the front of the plane. */\n  Front,\n  /** The plane is intersected. */\n  Intersecting\n}\n", "/**\n * Frustum face\n */\nexport enum FrustumFace {\n  /** Near face */\n  Near,\n  /** Far face */\n  Far,\n  /** Left face */\n  Left,\n  /** Right face */\n  Right,\n  /** Bottom face */\n  Bottom,\n  /** Top face */\n  Top\n}\n", "function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n", "/**\n * Common utility methods for math operations.\n */\nexport class MathUtil {\n  /** The value for which all absolute numbers smaller than are considered equal to zero. */\n  static readonly zeroTolerance: number = 1e-6;\n  /** The conversion factor that radian to degree. */\n  static readonly radToDegreeFactor: number = 180 / Math.PI;\n  /** The conversion factor that degree to radian. */\n  static readonly degreeToRadFactor: number = Math.PI / 180;\n\n  /**\n   * Clamps the specified value.\n   * @param v - The specified value\n   * @param min - The min value\n   * @param max - The max value\n   * @returns The result of clamping a value between min and max\n   */\n  static clamp(v: number, min: number, max: number): number {\n    return Math.max(min, Math.min(max, v));\n  }\n\n  /**\n   * Checks if a and b are almost equals.\n   * The absolute value of the difference between a and b is close to zero.\n   * @param a - The left value to compare\n   * @param b - The right value to compare\n   * @returns True if a almost equal to b, false otherwise\n   */\n  static equals(a: number, b: number): boolean {\n    return Math.abs(a - b) <= MathUtil.zeroTolerance;\n  }\n\n  /**\n   * Determines whether the specified v is pow2.\n   * @param v - The specified v\n   * @returns True if the specified v is pow2, false otherwise\n   */\n  static isPowerOf2(v: number): boolean {\n    return (v & (v - 1)) === 0;\n  }\n\n  /**\n   * Modify the specified r from radian to degree.\n   * @param r - The specified r\n   * @returns The degree value\n   */\n  static radianToDegree(r: number): number {\n    return r * MathUtil.radToDegreeFactor;\n  }\n\n  /**\n   * Modify the specified d from degree to radian.\n   * @param d - The specified d\n   * @returns The radian value\n   */\n  static degreeToRadian(d: number): number {\n    return d * MathUtil.degreeToRadFactor;\n  }\n}\n", "import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector4 } from \"./Vector4\";\n\n/**\n * Describes a 3D-vector.\n */\nexport class Vector3 implements IClone<Vector3>, ICopy<Vector3Like, Vector3> {\n  /** @internal */\n  static readonly _zero = new Vector3(0.0, 0.0, 0.0);\n  /** @internal */\n  static readonly _one = new Vector3(1.0, 1.0, 1.0);\n\n  /**\n   * Determines the sum of two vectors.\n   * @param left - The first vector to add\n   * @param right - The second vector to add\n   * @param out - The sum of two vectors\n   */\n  static add(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = left._x + right._x;\n    out._y = left._y + right._y;\n    out._z = left._z + right._z;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the difference between two vectors.\n   * @param left - The first vector to subtract\n   * @param right - The second vector to subtract\n   * @param out - The difference between two vectors\n   */\n  static subtract(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = left._x - right._x;\n    out._y = left._y - right._y;\n    out._z = left._z - right._z;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the product of two vectors.\n   * @param left - The first vector to multiply\n   * @param right - The second vector to multiply\n   * @param out - The product of two vectors\n   */\n  static multiply(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = left._x * right._x;\n    out._y = left._y * right._y;\n    out._z = left._z * right._z;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the divisor of two vectors.\n   * @param left - The first vector to divide\n   * @param right - The second vector to divide\n   * @param out - The divisor of two vectors\n   */\n  static divide(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = left._x / right._x;\n    out._y = left._y / right._y;\n    out._z = left._z / right._z;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the dot product of two vectors.\n   * @param left - The first vector to dot\n   * @param right - The second vector to dot\n   * @returns The dot product of two vectors\n   */\n  static dot(left: Vector3, right: Vector3): number {\n    return left._x * right._x + left._y * right._y + left._z * right._z;\n  }\n\n  /**\n   * Determines the cross product of two vectors.\n   * @param left - The first vector to cross\n   * @param right - The second vector to cross\n   * @param out - The cross product of two vectors\n   */\n  static cross(left: Vector3, right: Vector3, out: Vector3): void {\n    const ax = left._x;\n    const ay = left._y;\n    const az = left._z;\n    const bx = right._x;\n    const by = right._y;\n    const bz = right._z;\n\n    out.set(ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx);\n  }\n\n  /**\n   * Determines the distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The distance of two vectors\n   */\n  static distance(a: Vector3, b: Vector3): number {\n    const x = b._x - a._x;\n    const y = b._y - a._y;\n    const z = b._z - a._z;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n\n  /**\n   * Determines the squared distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The squared distance of two vectors\n   */\n  static distanceSquared(a: Vector3, b: Vector3): number {\n    const x = b._x - a._x;\n    const y = b._y - a._y;\n    const z = b._z - a._z;\n    return x * x + y * y + z * z;\n  }\n\n  /**\n   * Determines whether the specified vectors are equals.\n   * @param left - The first vector to compare\n   * @param right - The second vector to compare\n   * @returns True if the specified vectors are equals, false otherwise\n   */\n  static equals(left: Vector3, right: Vector3): boolean {\n    return (\n      MathUtil.equals(left._x, right._x) && MathUtil.equals(left._y, right._y) && MathUtil.equals(left._z, right._z)\n    );\n  }\n\n  /**\n   * Performs a linear interpolation between two vectors.\n   * @param start - The first vector\n   * @param end - The second vector\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two vectors\n   */\n  static lerp(start: Vector3, end: Vector3, t: number, out: Vector3): void {\n    const { _x, _y, _z } = start;\n    out._x = _x + (end._x - _x) * t;\n    out._y = _y + (end._y - _y) * t;\n    out._z = _z + (end._z - _z) * t;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the largest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the largest components of the specified vectors\n   */\n  static max(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = Math.max(left._x, right._x);\n    out._y = Math.max(left._y, right._y);\n    out._z = Math.max(left._z, right._z);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the smallest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the smallest components of the specified vectors\n   */\n  static min(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = Math.min(left._x, right._x);\n    out._y = Math.min(left._y, right._y);\n    out._z = Math.min(left._z, right._z);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Reverses the direction of a given vector.\n   * @param a - The vector to negate\n   * @param out - The vector facing in the opposite direction\n   */\n  static negate(a: Vector3, out: Vector3): void {\n    out._x = -a._x;\n    out._y = -a._y;\n    out._z = -a._z;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Converts the vector into a unit vector.\n   * @param a - The vector to normalize\n   * @param out - The normalized vector\n   */\n  static normalize(a: Vector3, out: Vector3): void {\n    const { _x, _y, _z } = a;\n    let len = Math.sqrt(_x * _x + _y * _y + _z * _z);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out.set(_x * len, _y * len, _z * len);\n    }\n  }\n\n  /**\n   * Scale a vector by the given value.\n   * @param a - The vector to scale\n   * @param s - The amount by which to scale the vector\n   * @param out - The scaled vector\n   */\n  static scale(a: Vector3, s: number, out: Vector3): void {\n    out._x = a._x * s;\n    out._y = a._y * s;\n    out._z = a._z * s;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a normal transformation using the given 4x4 matrix.\n   * @remarks\n   * A normal transform performs the transformation with the assumption that the w component\n   * is zero. This causes the fourth row and fourth column of the matrix to be unused. The\n   * end result is a vector that is not translated, but all other transformation properties\n   * apply. This is often preferred for normal vectors as normals purely represent direction\n   * rather than location because normal vectors should not be translated.\n   * @param v - The normal vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed normal\n   */\n  static transformNormal(v: Vector3, m: Matrix, out: Vector3): void {\n    const { _x, _y, _z } = v;\n    const e = m.elements;\n    out._x = _x * e[0] + _y * e[4] + _z * e[8];\n    out._y = _x * e[1] + _y * e[5] + _z * e[9];\n    out._z = _x * e[2] + _y * e[6] + _z * e[10];\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a transformation using the given 4x4 matrix.\n   * @param v - The vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed vector3\n   */\n  static transformToVec3(v: Vector3, m: Matrix, out: Vector3): void {\n    const { _x, _y, _z } = v;\n    const e = m.elements;\n\n    out._x = _x * e[0] + _y * e[4] + _z * e[8] + e[12];\n    out._y = _x * e[1] + _y * e[5] + _z * e[9] + e[13];\n    out._z = _x * e[2] + _y * e[6] + _z * e[10] + e[14];\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a transformation from vector3 to vector4 using the given 4x4 matrix.\n   * @param v - The vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed vector4\n   */\n  static transformToVec4(v: Vector3, m: Matrix, out: Vector4): void {\n    const { _x, _y, _z } = v;\n    const e = m.elements;\n    out._x = _x * e[0] + _y * e[4] + _z * e[8] + e[12];\n    out._y = _x * e[1] + _y * e[5] + _z * e[9] + e[13];\n    out._z = _x * e[2] + _y * e[6] + _z * e[10] + e[14];\n    out._w = _x * e[3] + _y * e[7] + _z * e[11] + e[15];\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a coordinate transformation using the given 4x4 matrix.\n   *\n   * @remarks\n   * A coordinate transform performs the transformation with the assumption that the w component\n   * is one. The four dimensional vector obtained from the transformation operation has each\n   * component in the vector divided by the w component. This forces the w-component to be one and\n   * therefore makes the vector homogeneous. The homogeneous vector is often preferred when working\n   * with coordinates as the w component can safely be ignored.\n   * @param v - The coordinate vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed coordinates\n   */\n  static transformCoordinate(v: Vector3, m: Matrix, out: Vector3): void {\n    const { _x, _y, _z } = v;\n    const e = m.elements;\n    let w = _x * e[3] + _y * e[7] + _z * e[11] + e[15];\n    w = 1.0 / w;\n\n    out._x = (_x * e[0] + _y * e[4] + _z * e[8] + e[12]) * w;\n    out._y = (_x * e[1] + _y * e[5] + _z * e[9] + e[13]) * w;\n    out._z = (_x * e[2] + _y * e[6] + _z * e[10] + e[14]) * w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a transformation using the given quaternion.\n   * @param v - The vector to transform\n   * @param quaternion - The transform quaternion\n   * @param out - The transformed vector\n   */\n  static transformByQuat(v: Vector3, quaternion: Quaternion, out: Vector3): void {\n    const { _x, _y, _z } = v;\n    const { _x: qx, _y: qy, _z: qz, _w: qw } = quaternion;\n\n    // calculate quat * vec\n    const ix = qw * _x + qy * _z - qz * _y;\n    const iy = qw * _y + qz * _x - qx * _z;\n    const iz = qw * _z + qx * _y - qy * _x;\n    const iw = -qx * _x - qy * _y - qz * _z;\n\n    // calculate result * inverse quat\n    out._x = ix * qw - iw * qx - iy * qz + iz * qy;\n    out._y = iy * qw - iw * qy - iz * qx + ix * qz;\n    out._z = iz * qw - iw * qz - ix * qy + iy * qx;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /** @internal */\n  _x: number;\n  /** @internal */\n  _y: number;\n  /** @internal */\n  _z: number;\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  /**\n   * The x component of the vector.\n   */\n  public get x(): number {\n    return this._x;\n  }\n\n  public set x(value: number) {\n    this._x = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The y component of the vector.\n   */\n  public get y(): number {\n    return this._y;\n  }\n\n  public set y(value: number) {\n    this._y = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The z component of the vector.\n   */\n  public get z(): number {\n    return this._z;\n  }\n\n  public set z(value: number) {\n    this._z = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of Vector3.\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   * @param z - The z component of the vector, default 0\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n  }\n\n  /**\n   * Set the value of this vector.\n   * @param x - The x component of the vector\n   * @param y - The y component of the vector\n   * @param z - The z component of the vector\n   * @returns This vector\n   */\n  set(x: number, y: number, z: number): Vector3 {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the sum of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  add(right: Vector3): Vector3 {\n    this._x += right._x;\n    this._y += right._y;\n    this._z += right._z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the difference of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  subtract(right: Vector3): Vector3 {\n    this._x -= right._x;\n    this._y -= right._y;\n    this._z -= right._z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the product of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  multiply(right: Vector3): Vector3 {\n    this._x *= right._x;\n    this._y *= right._y;\n    this._z *= right._z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the divisor of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  divide(right: Vector3): Vector3 {\n    this._x /= right._x;\n    this._y /= right._y;\n    this._z /= right._z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Calculate the length of this vector.\n   * @returns The length of this vector\n   */\n  length(): number {\n    const { _x, _y, _z } = this;\n    return Math.sqrt(_x * _x + _y * _y + _z * _z);\n  }\n\n  /**\n   * Calculate the squared length of this vector.\n   * @returns The squared length of this vector\n   */\n  lengthSquared(): number {\n    const { _x, _y, _z } = this;\n    return _x * _x + _y * _y + _z * _z;\n  }\n\n  /**\n   * Reverses the direction of this vector.\n   * @returns This vector\n   */\n  negate(): Vector3 {\n    this._x = -this._x;\n    this._y = -this._y;\n    this._z = -this._z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Converts this vector into a unit vector.\n   * @returns This vector\n   */\n  normalize(): Vector3 {\n    Vector3.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Scale this vector by the given value.\n   * @param s - The amount by which to scale the vector\n   * @returns This vector\n   */\n  scale(s: number): Vector3 {\n    this._x *= s;\n    this._y *= s;\n    this._z *= s;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * This vector performs a normal transformation using the given 4x4 matrix.\n   * @remarks\n   * A normal transform performs the transformation with the assumption that the w component\n   * is zero. This causes the fourth row and fourth column of the matrix to be unused. The\n   * end result is a vector that is not translated, but all other transformation properties\n   * apply. This is often preferred for normal vectors as normals purely represent direction\n   * rather than location because normal vectors should not be translated.\n   * @param m - The transform matrix\n   * @returns This vector\n   */\n  transformNormal(m: Matrix): Vector3 {\n    Vector3.transformNormal(this, m, this);\n    return this;\n  }\n\n  /**\n   * This vector performs a transformation using the given 4x4 matrix.\n   * @param m - The transform matrix\n   * @returns This vector\n   */\n  transformToVec3(m: Matrix): Vector3 {\n    Vector3.transformToVec3(this, m, this);\n    return this;\n  }\n\n  /**\n   * This vector performs a coordinate transformation using the given 4x4 matrix.\n   * @remarks\n   * A coordinate transform performs the transformation with the assumption that the w component\n   * is one. The four dimensional vector obtained from the transformation operation has each\n   * component in the vector divided by the w component. This forces the w-component to be one and\n   * therefore makes the vector homogeneous. The homogeneous vector is often preferred when working\n   * with coordinates as the w component can safely be ignored.\n   * @param m - The transform matrix\n   * @returns This vector\n   */\n  transformCoordinate(m: Matrix): Vector3 {\n    Vector3.transformCoordinate(this, m, this);\n    return this;\n  }\n\n  /**\n   * This vector performs a transformation using the given quaternion.\n   * @param quaternion - The transform quaternion\n   * @returns This vector\n   */\n  transformByQuat(quaternion: Quaternion): Vector3 {\n    Vector3.transformByQuat(this, quaternion, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this vector.\n   * @returns A clone of this vector\n   */\n  clone(): Vector3 {\n    return new Vector3(this._x, this._y, this._z);\n  }\n\n  /**\n   * Copy from vector3 like object.\n   * @param source - Vector3 like object.\n   * @returns This vector\n   */\n  copyFrom(source: Vector3Like): Vector3 {\n    this._x = source.x;\n    this._y = source.y;\n    this._z = source.z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this vector from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This vector\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Vector3 {\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this vector to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this._x;\n    out[outOffset + 1] = this._y;\n    out[outOffset + 2] = this._z;\n  }\n\n  /**\n   * Serialize this vector to a JSON representation.\n   * @returns A JSON representation of this vector\n   */\n  toJSON(): Vector3Like {\n    return {\n      x: this._x,\n      y: this._y,\n      z: this._z\n    };\n  }\n}\n\ninterface Vector3Like {\n  /** {@inheritDoc Vector3.x} */\n  x: number;\n  /** {@inheritDoc Vector3.y} */\n  y: number;\n  /** {@inheritDoc Vector3.z} */\n  z: number;\n}\n", "import { BoundingBox } from \"./BoundingBox\";\nimport { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * A bounding sphere.\n * */\nexport class BoundingSphere implements IClone<BoundingSphere>, ICopy<BoundingSphere, BoundingSphere> {\n  private static _tempVec30: Vector3 = new Vector3();\n\n  /**\n   * Calculate a bounding sphere that fully contains the given points.\n   * @param points - The given points\n   * @param out - The calculated bounding sphere\n   */\n  static fromPoints(points: Vector3[], out: BoundingSphere): void {\n    if (!points || points.length === 0) {\n      throw new Error(\"points must be array and length must > 0\");\n    }\n\n    const len = points.length;\n    const center = BoundingSphere._tempVec30;\n    center.x = center.y = center.z = 0;\n\n    // Calculate the center of the sphere.\n    for (let i = 0; i < len; ++i) {\n      Vector3.add(points[i], center, center);\n    }\n\n    // The center of the sphere.\n    Vector3.scale(center, 1 / len, out.center);\n\n    // Calculate the radius of the sphere.\n    let radius = 0.0;\n    for (let i = 0; i < len; ++i) {\n      const distance = Vector3.distanceSquared(center, points[i]);\n      distance > radius && (radius = distance);\n    }\n    // The radius of the sphere.\n    out.radius = Math.sqrt(radius);\n  }\n\n  /**\n   * Calculate a bounding sphere from a given box.\n   * @param box - The given box\n   * @param out - The calculated bounding sphere\n   */\n  static fromBox(box: BoundingBox, out: BoundingSphere): void {\n    const { center } = out;\n    const { min, max } = box;\n\n    center.x = (min.x + max.x) * 0.5;\n    center.y = (min.y + max.y) * 0.5;\n    center.z = (min.z + max.z) * 0.5;\n    out.radius = Vector3.distance(center, max);\n  }\n\n  /** The center point of the sphere. */\n  public readonly center: Vector3 = new Vector3();\n  /** The radius of the sphere. */\n  public radius: number = 0;\n\n  /**\n   * Constructor of BoundingSphere.\n   * @param center - The center point of the sphere\n   * @param radius - The radius of the sphere\n   */\n  constructor(center: Vector3 = null, radius: number = 0) {\n    center && this.center.copyFrom(center);\n    this.radius = radius;\n  }\n\n  /**\n   * Creates a clone of this sphere.\n   * @returns A clone of this sphere\n   */\n  clone(): BoundingSphere {\n    return new BoundingSphere(this.center, this.radius);\n  }\n\n  /**\n   * Copy this sphere from the specified sphere.\n   * @param source - The specified sphere\n   * @returns This sphere\n   */\n  copyFrom(source: BoundingSphere): BoundingSphere {\n    this.center.copyFrom(source.center);\n    this.radius = source.radius;\n    return this;\n  }\n}\n", "import { BoundingSphere } from \"./BoundingSphere\";\nimport { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { Matrix } from \"./Matrix\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Axis Aligned Bound Box (AABB).\n */\nexport class BoundingBox implements IClone<BoundingBox>, ICopy<BoundingBox, BoundingBox> {\n  private static _tempVec30: Vector3 = new Vector3();\n  private static _tempVec31: Vector3 = new Vector3();\n\n  /**\n   * Calculate a bounding box from the center point and the extent of the bounding box.\n   * @param center - The center point\n   * @param extent - The extent of the bounding box\n   * @param out - The calculated bounding box\n   */\n  static fromCenterAndExtent(center: Vector3, extent: Vector3, out: BoundingBox): void {\n    Vector3.subtract(center, extent, out.min);\n    Vector3.add(center, extent, out.max);\n  }\n\n  /**\n   * Calculate a bounding box that fully contains the given points.\n   * @param points - The given points\n   * @param out - The calculated bounding box\n   */\n  static fromPoints(points: Vector3[], out: BoundingBox): void {\n    if (!points || points.length === 0) {\n      throw new Error(\"points must be array and length must > 0\");\n    }\n\n    const { min, max } = out;\n    min.x = min.y = min.z = Number.MAX_VALUE;\n    max.x = max.y = max.z = -Number.MAX_VALUE;\n\n    for (let i = 0, l = points.length; i < l; ++i) {\n      const point = points[i];\n      Vector3.min(min, point, min);\n      Vector3.max(max, point, max);\n    }\n  }\n\n  /**\n   * Calculate a bounding box from a given sphere.\n   * @param sphere - The given sphere\n   * @param out - The calculated bounding box\n   */\n  static fromSphere(sphere: BoundingSphere, out: BoundingBox): void {\n    const { center, radius } = sphere;\n    const { min, max } = out;\n\n    min.x = center.x - radius;\n    min.y = center.y - radius;\n    min.z = center.z - radius;\n    max.x = center.x + radius;\n    max.y = center.y + radius;\n    max.z = center.z + radius;\n  }\n\n  /**\n   * Transform a bounding box.\n   * @param source - The original bounding box\n   * @param matrix - The transform to apply to the bounding box\n   * @param out - The transformed bounding box\n   */\n  static transform(source: BoundingBox, matrix: Matrix, out: BoundingBox): void {\n    // https://zeux.io/2010/10/17/aabb-from-obb-with-component-wise-abs/\n    const center = BoundingBox._tempVec30;\n    const extent = BoundingBox._tempVec31;\n    source.getCenter(center);\n    source.getExtent(extent);\n    Vector3.transformCoordinate(center, matrix, center);\n\n    const { x, y, z } = extent;\n    const e = matrix.elements;\n    extent.x = Math.abs(x * e[0]) + Math.abs(y * e[4]) + Math.abs(z * e[8]);\n    extent.y = Math.abs(x * e[1]) + Math.abs(y * e[5]) + Math.abs(z * e[9]);\n    extent.z = Math.abs(x * e[2]) + Math.abs(y * e[6]) + Math.abs(z * e[10]);\n\n    // set min、max\n    Vector3.subtract(center, extent, out.min);\n    Vector3.add(center, extent, out.max);\n  }\n\n  /**\n   * Calculate a bounding box that is as large as the total combined area of the two specified boxes.\n   * @param box1 - The first box to merge\n   * @param box2 - The second box to merge\n   * @param out - The merged bounding box\n   * @returns The merged bounding box\n   */\n  static merge(box1: BoundingBox, box2: BoundingBox, out: BoundingBox): BoundingBox {\n    Vector3.min(box1.min, box2.min, out.min);\n    Vector3.max(box1.max, box2.max, out.max);\n    return out;\n  }\n\n  /** The minimum point of the box. */\n  public readonly min: Vector3 = new Vector3();\n  /** The maximum point of the box. */\n  public readonly max: Vector3 = new Vector3();\n\n  /**\n   * Constructor of BoundingBox.\n   * @param min - The minimum point of the box\n   * @param max - The maximum point of the box\n   */\n  constructor(min: Vector3 = null, max: Vector3 = null) {\n    min && this.min.copyFrom(min);\n    max && this.max.copyFrom(max);\n  }\n\n  /**\n   * Get the center point of this bounding box.\n   * @param out - The center point of this bounding box\n   * @returns The center point of this bounding box\n   */\n  getCenter(out: Vector3): Vector3 {\n    Vector3.add(this.min, this.max, out);\n    Vector3.scale(out, 0.5, out);\n    return out;\n  }\n\n  /**\n   * Get the extent of this bounding box.\n   * @param out - The extent of this bounding box\n   * @returns The extent of this bounding box\n   */\n  getExtent(out: Vector3): Vector3 {\n    Vector3.subtract(this.max, this.min, out);\n    Vector3.scale(out, 0.5, out);\n    return out;\n  }\n\n  /**\n   * Get the eight corners of this bounding box.\n   * @param out - An array of points representing the eight corners of this bounding box\n   * @returns An array of points representing the eight corners of this bounding box\n   */\n  getCorners(out: Vector3[] = []): Vector3[] {\n    const { min, max } = this;\n    const minX = min.x;\n    const minY = min.y;\n    const minZ = min.z;\n    const maxX = max.x;\n    const maxY = max.y;\n    const maxZ = max.z;\n    const len = out.length;\n\n    // The array length is less than 8 to make up\n    if (len < 8) {\n      for (let i = 0, l = 8 - len; i < l; ++i) {\n        out[len + i] = new Vector3();\n      }\n    }\n\n    out[0].set(minX, maxY, maxZ);\n    out[1].set(maxX, maxY, maxZ);\n    out[2].set(maxX, minY, maxZ);\n    out[3].set(minX, minY, maxZ);\n    out[4].set(minX, maxY, minZ);\n    out[5].set(maxX, maxY, minZ);\n    out[6].set(maxX, minY, minZ);\n    out[7].set(minX, minY, minZ);\n\n    return out;\n  }\n\n  /**\n   * Transform a bounding box.\n   * @param matrix - The transform to apply to the bounding box\n   * @returns The transformed bounding box\n   */\n  public transform(matrix: Matrix): BoundingBox {\n    BoundingBox.transform(this, matrix, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this box.\n   * @returns A clone of this box\n   */\n  clone(): BoundingBox {\n    return new BoundingBox(this.min, this.max);\n  }\n\n  /**\n   * Copy this bounding box from the specified box.\n   * @param source - The specified box\n   * @returns This bounding box\n   */\n  copyFrom(source: BoundingBox): BoundingBox {\n    this.min.copyFrom(source.min);\n    this.max.copyFrom(source.max);\n    return this;\n  }\n}\n", "import { BoundingBox } from \"./BoundingBox\";\nimport { BoundingFrustum } from \"./BoundingFrustum\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { ContainmentType } from \"./enums/ContainmentType\";\nimport { PlaneIntersectionType } from \"./enums/PlaneIntersectionType\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Plane } from \"./Plane\";\nimport { Ray } from \"./Ray\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Contains static methods to help in determining intersections, containment, etc.\n */\nexport class CollisionUtil {\n  private static _tempVec30: Vector3 = new Vector3();\n  private static _tempVec31: Vector3 = new Vector3();\n  private static _tempVec32: Vector3 = new Vector3();\n\n  /**\n   * Calculate the intersection point of three plane.\n   * @param  p1 - Plane 1\n   * @param  p2 - Plane 2\n   * @param  p3 - Plane 3\n   * @param out - intersection point\n   */\n  static intersectionPointThreePlanes(p1: Plane, p2: Plane, p3: Plane, out: Vector3): void {\n    const p1Nor = p1.normal;\n    const p2Nor = p2.normal;\n    const p3Nor = p3.normal;\n\n    Vector3.cross(p2Nor, p3Nor, CollisionUtil._tempVec30);\n    Vector3.cross(p3Nor, p1Nor, CollisionUtil._tempVec31);\n    Vector3.cross(p1Nor, p2Nor, CollisionUtil._tempVec32);\n\n    const a = -Vector3.dot(p1Nor, CollisionUtil._tempVec30);\n    const b = -Vector3.dot(p2Nor, CollisionUtil._tempVec31);\n    const c = -Vector3.dot(p3Nor, CollisionUtil._tempVec32);\n\n    Vector3.scale(CollisionUtil._tempVec30, p1.distance / a, CollisionUtil._tempVec30);\n    Vector3.scale(CollisionUtil._tempVec31, p2.distance / b, CollisionUtil._tempVec31);\n    Vector3.scale(CollisionUtil._tempVec32, p3.distance / c, CollisionUtil._tempVec32);\n\n    Vector3.add(CollisionUtil._tempVec30, CollisionUtil._tempVec31, out);\n    Vector3.add(out, CollisionUtil._tempVec32, out);\n  }\n\n  /**\n   * Calculate the distance from a point to a plane.\n   * @param plane - The plane\n   * @param point - The point\n   * @returns The distance from a point to a plane\n   */\n  static distancePlaneAndPoint(plane: Plane, point: Vector3): number {\n    return Vector3.dot(plane.normal, point) + plane.distance;\n  }\n\n  /**\n   * Get the intersection type between a plane and a point.\n   * @param plane - The plane\n   * @param point - The point\n   * @returns The intersection type\n   */\n  static intersectsPlaneAndPoint(plane: Plane, point: Vector3): PlaneIntersectionType {\n    const distance = CollisionUtil.distancePlaneAndPoint(plane, point);\n    if (distance > 0) {\n      return PlaneIntersectionType.Front;\n    }\n    if (distance < 0) {\n      return PlaneIntersectionType.Back;\n    }\n    return PlaneIntersectionType.Intersecting;\n  }\n\n  /**\n   * Get the intersection type between a plane and a box (AABB).\n   * @param plane - The plane\n   * @param box - The box\n   * @returns The intersection type\n   */\n  static intersectsPlaneAndBox(plane: Plane, box: BoundingBox): PlaneIntersectionType {\n    const { min, max } = box;\n    const { normal } = plane;\n    const front = CollisionUtil._tempVec30;\n    const back = CollisionUtil._tempVec31;\n\n    if (normal.x >= 0) {\n      front.x = max.x;\n      back.x = min.x;\n    } else {\n      front.x = min.x;\n      back.x = max.x;\n    }\n    if (normal.y >= 0) {\n      front.y = max.y;\n      back.y = min.y;\n    } else {\n      front.y = min.y;\n      back.y = max.y;\n    }\n    if (normal.z >= 0) {\n      front.z = max.z;\n      back.z = min.z;\n    } else {\n      front.z = min.z;\n      back.z = max.z;\n    }\n\n    if (CollisionUtil.distancePlaneAndPoint(plane, front) < 0) {\n      return PlaneIntersectionType.Back;\n    }\n\n    if (CollisionUtil.distancePlaneAndPoint(plane, back) > 0) {\n      return PlaneIntersectionType.Front;\n    }\n\n    return PlaneIntersectionType.Intersecting;\n  }\n\n  /**\n   * Get the intersection type between a plane and a sphere.\n   * @param plane - The plane\n   * @param sphere - The sphere\n   * @returns The intersection type\n   */\n  static intersectsPlaneAndSphere(plane: Plane, sphere: BoundingSphere): PlaneIntersectionType {\n    const { center, radius } = sphere;\n    const distance = CollisionUtil.distancePlaneAndPoint(plane, center);\n    if (distance > radius) {\n      return PlaneIntersectionType.Front;\n    }\n    if (distance < -radius) {\n      return PlaneIntersectionType.Back;\n    }\n    return PlaneIntersectionType.Intersecting;\n  }\n\n  /**\n   * Get the intersection type between a ray and a plane.\n   * @param ray - The ray\n   * @param plane - The plane\n   * @returns The distance from ray to plane if intersecting, -1 otherwise\n   */\n  static intersectsRayAndPlane(ray: Ray, plane: Plane): number {\n    const { normal } = plane;\n    const { zeroTolerance } = MathUtil;\n\n    const dir = Vector3.dot(normal, ray.direction);\n    // Parallel\n    if (Math.abs(dir) < zeroTolerance) {\n      return -1;\n    }\n\n    const position = Vector3.dot(normal, ray.origin);\n    let distance = (-plane.distance - position) / dir;\n\n    if (distance < 0) {\n      if (distance < -zeroTolerance) {\n        return -1;\n      }\n\n      distance = 0;\n    }\n\n    return distance;\n  }\n\n  /**\n   * Get the intersection type between a ray and a box (AABB).\n   * @param ray - The ray\n   * @param box - The box\n   * @returns The distance from ray to box if intersecting, -1 otherwise\n   */\n  static intersectsRayAndBox(ray: Ray, box: BoundingBox): number {\n    const { zeroTolerance } = MathUtil;\n    const { origin, direction } = ray;\n    const { min, max } = box;\n    const dirX = direction.x;\n    const dirY = direction.y;\n    const dirZ = direction.z;\n    const oriX = origin.x;\n    const oriY = origin.y;\n    const oriZ = origin.z;\n    let distance = 0;\n    let tmax = Number.MAX_VALUE;\n\n    if (Math.abs(dirX) < zeroTolerance) {\n      if (oriX < min.x || oriX > max.x) {\n        return -1;\n      }\n    } else {\n      const inverse = 1.0 / dirX;\n      let t1 = (min.x - oriX) * inverse;\n      let t2 = (max.x - oriX) * inverse;\n\n      if (t1 > t2) {\n        const temp = t1;\n        t1 = t2;\n        t2 = temp;\n      }\n\n      distance = Math.max(t1, distance);\n      tmax = Math.min(t2, tmax);\n\n      if (distance > tmax) {\n        return -1;\n      }\n    }\n\n    if (Math.abs(dirY) < zeroTolerance) {\n      if (oriY < min.y || oriY > max.y) {\n        return -1;\n      }\n    } else {\n      const inverse = 1.0 / dirY;\n      let t1 = (min.y - oriY) * inverse;\n      let t2 = (max.y - oriY) * inverse;\n\n      if (t1 > t2) {\n        const temp = t1;\n        t1 = t2;\n        t2 = temp;\n      }\n\n      distance = Math.max(t1, distance);\n      tmax = Math.min(t2, tmax);\n\n      if (distance > tmax) {\n        return -1;\n      }\n    }\n\n    if (Math.abs(dirZ) < zeroTolerance) {\n      if (oriZ < min.z || oriZ > max.z) {\n        return -1;\n      }\n    } else {\n      const inverse = 1.0 / dirZ;\n      let t1 = (min.z - oriZ) * inverse;\n      let t2 = (max.z - oriZ) * inverse;\n\n      if (t1 > t2) {\n        const temp = t1;\n        t1 = t2;\n        t2 = temp;\n      }\n\n      distance = Math.max(t1, distance);\n      tmax = Math.min(t2, tmax);\n\n      if (distance > tmax) {\n        return -1;\n      }\n    }\n\n    return distance;\n  }\n\n  /**\n   * Get the intersection type between a ray and a sphere.\n   * @param ray - The ray\n   * @param sphere - The sphere\n   * @returns The distance from ray to sphere if intersecting, -1 otherwise\n   */\n  static intersectsRayAndSphere(ray: Ray, sphere: BoundingSphere): number {\n    const { origin, direction } = ray;\n    const { center, radius } = sphere;\n\n    const m = CollisionUtil._tempVec30;\n    Vector3.subtract(origin, center, m);\n    const b = Vector3.dot(m, direction);\n    const c = Vector3.dot(m, m) - radius * radius;\n\n    if (b > 0 && c > 0) {\n      return -1;\n    }\n\n    let discriminant = b * b - c;\n    if (discriminant < 0) {\n      return -1;\n    }\n\n    let distance = -b - Math.sqrt(discriminant);\n    if (distance < 0) {\n      distance = 0;\n    }\n\n    return distance;\n  }\n\n  /**\n   * Check whether the boxes intersect.\n   * @param boxA - The first box to check\n   * @param boxB - The second box to check\n   * @returns True if the boxes intersect, false otherwise\n   */\n  static intersectsBoxAndBox(boxA: BoundingBox, boxB: BoundingBox): boolean {\n    if (boxA.min.x > boxB.max.x || boxB.min.x > boxA.max.x) {\n      return false;\n    }\n\n    if (boxA.min.y > boxB.max.y || boxB.min.y > boxA.max.y) {\n      return false;\n    }\n\n    return !(boxA.min.z > boxB.max.z || boxB.min.z > boxA.max.z);\n  }\n\n  /**\n   * Check whether the spheres intersect.\n   * @param sphereA - The first sphere to check\n   * @param sphereB - The second sphere to check\n   * @returns True if the spheres intersect, false otherwise\n   */\n  static intersectsSphereAndSphere(sphereA: BoundingSphere, sphereB: BoundingSphere): boolean {\n    const radiisum = sphereA.radius + sphereB.radius;\n    return Vector3.distanceSquared(sphereA.center, sphereB.center) < radiisum * radiisum;\n  }\n\n  /**\n   * Check whether the sphere and the box intersect.\n   * @param sphere - The sphere to check\n   * @param box - The box to check\n   * @returns True if the sphere and the box intersect, false otherwise\n   */\n  static intersectsSphereAndBox(sphere: BoundingSphere, box: BoundingBox): boolean {\n    const center = sphere.center;\n    const max = box.max;\n    const min = box.min;\n\n    const closestPoint = CollisionUtil._tempVec30;\n    closestPoint.set(\n      Math.max(min.x, Math.min(center.x, max.x)),\n      Math.max(min.y, Math.min(center.y, max.y)),\n      Math.max(min.z, Math.min(center.z, max.z))\n    );\n\n    const distance = Vector3.distanceSquared(center, closestPoint);\n    return distance <= sphere.radius * sphere.radius;\n  }\n\n  /**\n   * Get whether or not a specified bounding box intersects with this frustum (Contains or Intersects).\n   * @param frustum - The frustum\n   * @param box - The box\n   * @returns True if bounding box intersects with this frustum, false otherwise\n   */\n  static intersectsFrustumAndBox(frustum: BoundingFrustum, box: BoundingBox): boolean {\n    const { min, max } = box;\n    const p = CollisionUtil._tempVec30;\n\n    for (let i = 0; i < 6; ++i) {\n      const plane = frustum.getPlane(i);\n      const normal = plane.normal;\n\n      p.set(normal.x >= 0 ? max.x : min.x, normal.y >= 0 ? max.y : min.y, normal.z >= 0 ? max.z : min.z);\n      if (Vector3.dot(normal, p) < -plane.distance) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Get the containment type between a frustum and a box (AABB).\n   * @param frustum - The frustum\n   * @param box - The box\n   * @returns The containment type\n   */\n  static frustumContainsBox(frustum: BoundingFrustum, box: BoundingBox): ContainmentType {\n    const { min, max } = box;\n    const p = CollisionUtil._tempVec30;\n    const n = CollisionUtil._tempVec31;\n    let result = ContainmentType.Contains;\n\n    for (let i = 0; i < 6; ++i) {\n      const plane = frustum.getPlane(i);\n      const normal = plane.normal;\n\n      if (normal.x >= 0) {\n        p.x = max.x;\n        n.x = min.x;\n      } else {\n        p.x = min.x;\n        n.x = max.x;\n      }\n      if (normal.y >= 0) {\n        p.y = max.y;\n        n.y = min.y;\n      } else {\n        p.y = min.y;\n        n.y = max.y;\n      }\n      if (normal.z >= 0) {\n        p.z = max.z;\n        n.z = min.z;\n      } else {\n        p.z = min.z;\n        n.z = max.z;\n      }\n\n      if (CollisionUtil.intersectsPlaneAndPoint(plane, p) === PlaneIntersectionType.Back) {\n        return ContainmentType.Disjoint;\n      }\n\n      if (CollisionUtil.intersectsPlaneAndPoint(plane, n) === PlaneIntersectionType.Back) {\n        result = ContainmentType.Intersects;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get the containment type between a frustum and a sphere.\n   * @param frustum - The frustum\n   * @param sphere - The sphere\n   * @returns The containment type\n   */\n  static frustumContainsSphere(frustum: BoundingFrustum, sphere: BoundingSphere): ContainmentType {\n    let result = ContainmentType.Contains;\n\n    for (let i = 0; i < 6; ++i) {\n      const plane = frustum.getPlane(i);\n      const intersectionType = CollisionUtil.intersectsPlaneAndSphere(plane, sphere);\n      if (intersectionType === PlaneIntersectionType.Back) {\n        return ContainmentType.Disjoint;\n      } else if (intersectionType === PlaneIntersectionType.Intersecting) {\n        result = ContainmentType.Intersects;\n        break;\n      }\n    }\n\n    return result;\n  }\n}\n", "import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a plane in three-dimensional space.\n */\nexport class Plane implements IClone<Plane>, ICopy<Plane, Plane> {\n  /**\n   * Normalize the normal vector of the specified plane.\n   * @param p - The specified plane\n   * @param out - A normalized version of the specified plane\n   */\n  static normalize(p: Plane, out: Plane): void {\n    const { normal } = p;\n\n    const factor = 1.0 / normal.length();\n    Vector3.scale(normal, factor, out.normal);\n    out.distance = p.distance * factor;\n  }\n\n  /**\n   * Calculate the plane that contains the three specified points.\n   * @param point0 - The first point\n   * @param point1 - The second point\n   * @param point2 - The third point\n   * @param out - The calculated plane\n   */\n  static fromPoints(point0: Vector3, point1: Vector3, point2: Vector3, out: Plane): void {\n    const x0 = point0.x;\n    const y0 = point0.y;\n    const z0 = point0.z;\n    const x1 = point1.x - x0;\n    const y1 = point1.y - y0;\n    const z1 = point1.z - z0;\n    const x2 = point2.x - x0;\n    const y2 = point2.y - y0;\n    const z2 = point2.z - z0;\n    const yz = y1 * z2 - z1 * y2;\n    const xz = z1 * x2 - x1 * z2;\n    const xy = x1 * y2 - y1 * x2;\n    const invPyth = 1.0 / Math.sqrt(yz * yz + xz * xz + xy * xy);\n\n    const x = yz * invPyth;\n    const y = xz * invPyth;\n    const z = xy * invPyth;\n\n    const { normal } = out;\n    normal.x = x;\n    normal.y = y;\n    normal.z = z;\n\n    out.distance = -(x * x0 + y * y0 + z * z0);\n  }\n\n  /** The normal of the plane. */\n  public readonly normal: Vector3 = new Vector3();\n  /** The distance of the plane along its normal to the origin. */\n  public distance: number = 0;\n\n  /**\n   * Constructor of Plane.\n   * @param normal - The normal vector\n   * @param distance - The distance of the plane along its normal to the origin\n   */\n  constructor(normal: Vector3 = null, distance: number = 0) {\n    normal && this.normal.copyFrom(normal);\n    this.distance = distance;\n  }\n\n  /**\n   * Normalize the normal vector of this plane.\n   * @returns The plane after normalize\n   */\n  normalize(): Plane {\n    Plane.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this plane.\n   * @returns A clone of this plane\n   */\n  clone(): Plane {\n    const out = new Plane();\n    out.copyFrom(this);\n    return out;\n  }\n\n  /**\n   * Copy this plane from the specified plane.\n   * @param source - The specified plane\n   * @returns This plane\n   */\n  copyFrom(source: Plane): Plane {\n    this.normal.copyFrom(source.normal);\n    this.distance = source.distance;\n    return this;\n  }\n}\n", "import { BoundingBox } from \"./BoundingBox\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { CollisionUtil } from \"./CollisionUtil\";\nimport { ContainmentType } from \"./enums/ContainmentType\";\nimport { FrustumFace } from \"./enums/FrustumFace\";\nimport { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { Matrix } from \"./Matrix\";\nimport { Plane } from \"./Plane\";\n\n/**\n * A bounding frustum.\n */\nexport class BoundingFrustum implements IClone<BoundingFrustum>, ICopy<BoundingFrustum, BoundingFrustum> {\n  /** The near plane of this frustum. */\n  public near: Plane;\n  /** The far plane of this frustum. */\n  public far: Plane;\n  /** The left plane of this frustum. */\n  public left: Plane;\n  /** The right plane of this frustum. */\n  public right: Plane;\n  /** The bottom plane of this frustum. */\n  public bottom: Plane;\n  /** The top plane of this frustum. */\n  public top: Plane;\n\n  /**\n   * Constructor of BoundingFrustum.\n   * @param matrix - The view-projection matrix\n   */\n  constructor(matrix: Matrix = null) {\n    this.near = new Plane();\n    this.far = new Plane();\n    this.left = new Plane();\n    this.right = new Plane();\n    this.top = new Plane();\n    this.bottom = new Plane();\n\n    matrix && this.calculateFromMatrix(matrix);\n  }\n\n  /**\n   * Get the plane by the given frustum face.\n   * @param face - The frustum face\n   * @returns The plane get\n   */\n  getPlane(face: FrustumFace): Plane {\n    switch (face) {\n      case FrustumFace.Near:\n        return this.near;\n      case FrustumFace.Far:\n        return this.far;\n      case FrustumFace.Left:\n        return this.left;\n      case FrustumFace.Right:\n        return this.right;\n      case FrustumFace.Bottom:\n        return this.bottom;\n      case FrustumFace.Top:\n        return this.top;\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Update all planes from the given matrix.\n   * @param matrix - The given view-projection matrix\n   */\n  public calculateFromMatrix(matrix: Matrix): void {\n    const me = matrix.elements;\n    const m11 = me[0];\n    const m12 = me[1];\n    const m13 = me[2];\n    const m14 = me[3];\n    const m21 = me[4];\n    const m22 = me[5];\n    const m23 = me[6];\n    const m24 = me[7];\n    const m31 = me[8];\n    const m32 = me[9];\n    const m33 = me[10];\n    const m34 = me[11];\n    const m41 = me[12];\n    const m42 = me[13];\n    const m43 = me[14];\n    const m44 = me[15];\n\n    // near\n    const nearNormal = this.near.normal;\n    nearNormal.set(m14 + m13, m24 + m23, m34 + m33);\n    this.near.distance = m44 + m43;\n    this.near.normalize();\n\n    // far\n    const farNormal = this.far.normal;\n    farNormal.set(m14 - m13, m24 - m23, m34 - m33);\n    this.far.distance = m44 - m43;\n\n    this.far.normalize();\n\n    // left\n    const leftNormal = this.left.normal;\n    leftNormal.set(m14 + m11, m24 + m21, m34 + m31);\n    this.left.distance = m44 + m41;\n    this.left.normalize();\n\n    // right\n    const rightNormal = this.right.normal;\n    rightNormal.set(m14 - m11, m24 - m21, m34 - m31);\n    this.right.distance = m44 - m41;\n    this.right.normalize();\n\n    // bottom\n    const bottomNormal = this.bottom.normal;\n    bottomNormal.set(m14 + m12, m24 + m22, m34 + m32);\n    this.bottom.distance = m44 + m42;\n    this.bottom.normalize();\n\n    // top\n    const topNormal = this.top.normal;\n    topNormal.set(m14 - m12, m24 - m22, m34 - m32);\n    this.top.distance = m44 - m42;\n    this.top.normalize();\n  }\n\n  /**\n   * Get whether or not a specified bounding box intersects with this frustum (Contains or Intersects).\n   * @param box - The box for testing\n   * @returns True if bounding box intersects with this frustum, false otherwise\n   */\n  public intersectsBox(box: BoundingBox): boolean {\n    return CollisionUtil.intersectsFrustumAndBox(this, box);\n  }\n\n  /**\n   * Get whether or not a specified bounding sphere intersects with this frustum (Contains or Intersects).\n   * @param sphere - The sphere for testing\n   * @returns True if bounding sphere intersects with this frustum, false otherwise\n   */\n  public intersectsSphere(sphere: BoundingSphere): boolean {\n    return CollisionUtil.frustumContainsSphere(this, sphere) !== ContainmentType.Disjoint;\n  }\n\n  /**\n   * Creates a clone of this frustum.\n   * @returns A clone of this frustum\n   */\n  clone(): BoundingFrustum {\n    const out = new BoundingFrustum();\n    out.copyFrom(this);\n    return out;\n  }\n\n  /**\n   * Copy this frustum from the specified frustum.\n   * @param source - The specified frustum\n   * @returns This frustum\n   */\n  copyFrom(source: BoundingFrustum): BoundingFrustum {\n    this.near.copyFrom(source.near);\n    this.far.copyFrom(source.far);\n    this.left.copyFrom(source.left);\n    this.right.copyFrom(source.right);\n    this.bottom.copyFrom(source.bottom);\n    this.top.copyFrom(source.top);\n    return this;\n  }\n}\n", "import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector2 } from \"./Vector2\";\n\n/**\n * Represents a 3x3 mathematical matrix.\n */\nexport class Matrix3x3 implements IClone<Matrix3x3>, ICopy<Matrix3x3, Matrix3x3> {\n  /**\n   * Determines the sum of two matrices.\n   * @param left - The first matrix to add\n   * @param right - The second matrix to add\n   * @param out - The sum of two matrices\n   */\n  static add(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    oe[0] = le[0] + re[0];\n    oe[1] = le[1] + re[1];\n    oe[2] = le[2] + re[2];\n\n    oe[3] = le[3] + re[3];\n    oe[4] = le[4] + re[4];\n    oe[5] = le[5] + re[5];\n\n    oe[6] = le[6] + re[6];\n    oe[7] = le[7] + re[7];\n    oe[8] = le[8] + re[8];\n  }\n\n  /**\n   * Determines the difference between two matrices.\n   * @param left - The first matrix to subtract\n   * @param right - The second matrix to subtract\n   * @param out - The difference between two matrices\n   */\n  static subtract(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    oe[0] = le[0] - re[0];\n    oe[1] = le[1] - re[1];\n    oe[2] = le[2] - re[2];\n\n    oe[3] = le[3] - re[3];\n    oe[4] = le[4] - re[4];\n    oe[5] = le[5] - re[5];\n\n    oe[6] = le[6] - re[6];\n    oe[7] = le[7] - re[7];\n    oe[8] = le[8] - re[8];\n  }\n\n  /**\n   * Determines the product of two matrices.\n   * @param left - The first matrix to multiply\n   * @param right - The second matrix to multiply\n   * @param out - The product of two matrices\n   */\n  static multiply(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    const l11 = le[0],\n      l12 = le[1],\n      l13 = le[2];\n    const l21 = le[3],\n      l22 = le[4],\n      l23 = le[5];\n    const l31 = le[6],\n      l32 = le[7],\n      l33 = le[8];\n\n    const r11 = re[0],\n      r12 = re[1],\n      r13 = re[2];\n    const r21 = re[3],\n      r22 = re[4],\n      r23 = re[5];\n    const r31 = re[6],\n      r32 = re[7],\n      r33 = re[8];\n\n    oe[0] = l11 * r11 + l21 * r12 + l31 * r13;\n    oe[1] = l12 * r11 + l22 * r12 + l32 * r13;\n    oe[2] = l13 * r11 + l23 * r12 + l33 * r13;\n\n    oe[3] = l11 * r21 + l21 * r22 + l31 * r23;\n    oe[4] = l12 * r21 + l22 * r22 + l32 * r23;\n    oe[5] = l13 * r21 + l23 * r22 + l33 * r23;\n\n    oe[6] = l11 * r31 + l21 * r32 + l31 * r33;\n    oe[7] = l12 * r31 + l22 * r32 + l32 * r33;\n    oe[8] = l13 * r31 + l23 * r32 + l33 * r33;\n  }\n\n  /**\n   * Determines whether the specified matrices are equals.\n   * @param left - The first matrix to compare\n   * @param right - The second matrix to compare\n   * @returns True if the specified matrices are equals, false otherwise\n   */\n  static equals(left: Matrix3x3, right: Matrix3x3): boolean {\n    const le = left.elements;\n    const re = right.elements;\n\n    return (\n      MathUtil.equals(le[0], re[0]) &&\n      MathUtil.equals(le[1], re[1]) &&\n      MathUtil.equals(le[2], re[2]) &&\n      MathUtil.equals(le[3], re[3]) &&\n      MathUtil.equals(le[4], re[4]) &&\n      MathUtil.equals(le[5], re[5]) &&\n      MathUtil.equals(le[6], re[6]) &&\n      MathUtil.equals(le[7], re[7]) &&\n      MathUtil.equals(le[8], re[8])\n    );\n  }\n\n  /**\n   * Performs a linear interpolation between two matrices.\n   * @param start - The first matrix\n   * @param end - The second matrix\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two matrices\n   */\n  static lerp(start: Matrix3x3, end: Matrix3x3, t: number, out: Matrix3x3): void {\n    const se = start.elements;\n    const ee = end.elements;\n    const oe = out.elements;\n    const inv = 1.0 - t;\n\n    oe[0] = se[0] * inv + ee[0] * t;\n    oe[1] = se[1] * inv + ee[1] * t;\n    oe[2] = se[2] * inv + ee[2] * t;\n\n    oe[3] = se[3] * inv + ee[3] * t;\n    oe[4] = se[4] * inv + ee[4] * t;\n    oe[5] = se[5] * inv + ee[5] * t;\n\n    oe[6] = se[6] * inv + ee[6] * t;\n    oe[7] = se[7] * inv + ee[7] * t;\n    oe[8] = se[8] * inv + ee[8] * t;\n  }\n\n  /**\n   * Calculate a rotation matrix from a quaternion.\n   * @param quaternion - The quaternion used to calculate the matrix\n   * @param out - The calculated rotation matrix\n   */\n  static rotationQuaternion(quaternion: Quaternion, out: Matrix3x3): void {\n    const oe = out.elements;\n    const { _x: x, _y: y, _z: z, _w: w } = quaternion;\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n    const xx = x * x2;\n    const yx = y * x2;\n    const yy = y * y2;\n    const zx = z * x2;\n    const zy = z * y2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n\n    oe[0] = 1 - yy - zz;\n    oe[3] = yx - wz;\n    oe[6] = zx + wy;\n\n    oe[1] = yx + wz;\n    oe[4] = 1 - xx - zz;\n    oe[7] = zy - wx;\n\n    oe[2] = zx - wy;\n    oe[5] = zy + wx;\n    oe[8] = 1 - xx - yy;\n  }\n\n  /**\n   * Calculate a matrix from scale vector.\n   * @param s - The scale vector\n   * @param out - The calculated matrix\n   */\n  static scaling(s: Vector2, out: Matrix3x3): void {\n    const oe = out.elements;\n\n    oe[0] = s._x;\n    oe[1] = 0;\n    oe[2] = 0;\n\n    oe[3] = 0;\n    oe[4] = s._y;\n    oe[5] = 0;\n\n    oe[6] = 0;\n    oe[7] = 0;\n    oe[8] = 1;\n  }\n\n  /**\n   * Calculate a matrix from translation vector.\n   * @param translation - The translation vector\n   * @param out - The calculated matrix\n   */\n  static translation(translation: Vector2, out: Matrix3x3): void {\n    const oe = out.elements;\n\n    oe[0] = 1;\n    oe[1] = 0;\n    oe[2] = 0;\n\n    oe[3] = 0;\n    oe[4] = 1;\n    oe[5] = 0;\n\n    oe[6] = translation._x;\n    oe[7] = translation._y;\n    oe[8] = 1;\n  }\n\n  /**\n   * Calculate the inverse of the specified matrix.\n   * @param a - The matrix whose inverse is to be calculated\n   * @param out - The inverse of the specified matrix\n   */\n  static invert(a: Matrix3x3, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    const b12 = a33 * a22 - a23 * a32;\n    const b22 = -a33 * a21 + a23 * a31;\n    const b32 = a32 * a21 - a22 * a31;\n\n    let det = a11 * b12 + a12 * b22 + a13 * b32;\n    if (!det) {\n      return;\n    }\n    det = 1.0 / det;\n\n    oe[0] = b12 * det;\n    oe[1] = (-a33 * a12 + a13 * a32) * det;\n    oe[2] = (a23 * a12 - a13 * a22) * det;\n\n    oe[3] = b22 * det;\n    oe[4] = (a33 * a11 - a13 * a31) * det;\n    oe[5] = (-a23 * a11 + a13 * a21) * det;\n\n    oe[6] = b32 * det;\n    oe[7] = (-a32 * a11 + a12 * a31) * det;\n    oe[8] = (a22 * a11 - a12 * a21) * det;\n  }\n\n  /**\n   * Calculate a 3x3 normal matrix from a 4x4 matrix.\n   * @remarks The calculation process is the transpose matrix of the inverse matrix.\n   * @param mat4 - The 4x4 matrix\n   * @param out - THe 3x3 normal matrix\n   */\n  static normalMatrix(mat4: Matrix, out: Matrix3x3): void {\n    const ae = mat4.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2],\n      a14 = ae[3];\n    const a21 = ae[4],\n      a22 = ae[5],\n      a23 = ae[6],\n      a24 = ae[7];\n    const a31 = ae[8],\n      a32 = ae[9],\n      a33 = ae[10],\n      a34 = ae[11];\n    const a41 = ae[12],\n      a42 = ae[13],\n      a43 = ae[14],\n      a44 = ae[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;\n    oe[1] = (a23 * b08 - a21 * b11 - a24 * b07) * det;\n    oe[2] = (a21 * b10 - a22 * b08 + a24 * b06) * det;\n\n    oe[3] = (a13 * b10 - a12 * b11 - a14 * b09) * det;\n    oe[4] = (a11 * b11 - a13 * b08 + a14 * b07) * det;\n    oe[5] = (a12 * b08 - a11 * b10 - a14 * b06) * det;\n\n    oe[6] = (a42 * b05 - a43 * b04 + a44 * b03) * det;\n    oe[7] = (a43 * b02 - a41 * b05 - a44 * b01) * det;\n    oe[8] = (a41 * b04 - a42 * b02 + a44 * b00) * det;\n  }\n\n  /**\n   * The specified matrix rotates around an angle.\n   * @param a - The specified matrix\n   * @param r - The rotation angle in radians\n   * @param out - The rotated matrix\n   */\n  static rotate(a: Matrix3x3, r: number, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n    const s = Math.sin(r);\n    const c = Math.cos(r);\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    oe[0] = c * a11 + s * a21;\n    oe[1] = c * a12 + s * a22;\n    oe[2] = c * a13 + s * a23;\n\n    oe[3] = c * a21 - s * a11;\n    oe[4] = c * a22 - s * a12;\n    oe[5] = c * a23 - s * a13;\n\n    oe[6] = a31;\n    oe[7] = a32;\n    oe[8] = a33;\n  }\n\n  /**\n   * Scale a matrix by a given vector.\n   * @param m - The matrix\n   * @param s - The given vector\n   * @param out - The scaled matrix\n   */\n  static scale(m: Matrix3x3, s: Vector2, out: Matrix3x3): void {\n    const { _x: x, _y: y } = s;\n    const ae = m.elements;\n    const oe = out.elements;\n\n    oe[0] = x * ae[0];\n    oe[1] = x * ae[1];\n    oe[2] = x * ae[2];\n\n    oe[3] = y * ae[3];\n    oe[4] = y * ae[4];\n    oe[5] = y * ae[5];\n\n    oe[6] = ae[6];\n    oe[7] = ae[7];\n    oe[8] = ae[8];\n  }\n\n  /**\n   * Translate a matrix by a given vector.\n   * @param m - The matrix\n   * @param translation - The given vector\n   * @param out - The translated matrix\n   */\n  static translate(m: Matrix3x3, translation: Vector2, out: Matrix3x3): void {\n    const { _x: x, _y: y } = translation;\n    const ae = m.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    oe[0] = a11;\n    oe[1] = a12;\n    oe[2] = a13;\n\n    oe[3] = a21;\n    oe[4] = a22;\n    oe[5] = a23;\n\n    oe[6] = x * a11 + y * a21 + a31;\n    oe[7] = x * a12 + y * a22 + a32;\n    oe[8] = x * a13 + y * a23 + a33;\n  }\n\n  /**\n   * Calculate the transpose of the specified matrix.\n   * @param a - The specified matrix\n   * @param out - The transpose of the specified matrix\n   */\n  static transpose(a: Matrix3x3, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    if (out === a) {\n      const a12 = ae[1];\n      const a13 = ae[2];\n      const a23 = ae[5];\n      oe[1] = ae[3];\n      oe[2] = ae[6];\n      oe[3] = a12;\n      oe[5] = ae[7];\n      oe[6] = a13;\n      oe[7] = a23;\n    } else {\n      oe[0] = ae[0];\n      oe[1] = ae[3];\n      oe[2] = ae[6];\n\n      oe[3] = ae[1];\n      oe[4] = ae[4];\n      oe[5] = ae[7];\n\n      oe[6] = ae[2];\n      oe[7] = ae[5];\n      oe[8] = ae[8];\n    }\n  }\n\n  /**\n   * An array containing the elements of the matrix (column matrix).\n   * @remarks\n   * elements[0] first column and first row value m11\n   * elements[1] first column and second row value m12\n   * elements[2] first column and third row value m13\n   * elements[3] second column and first row value m21\n   * and so on\n   */\n  elements: Float32Array = new Float32Array(9);\n\n  /**\n   * Constructor of 3*3 matrix.\n   * @param m11 - Default 1 column 1, row 1\n   * @param m12 - Default 0 column 1, row 2\n   * @param m13 - Default 0 column 1, row 3\n   * @param m21 - Default 0 column 2, row 1\n   * @param m22 - Default 1 column 2, row 2\n   * @param m23 - Default 0 column 2, row 3\n   * @param m31 - Default 0 column 3, row 1\n   * @param m32 - Default 0 column 3, row 2\n   * @param m33 - Default 1 column 3, row 3\n   */\n  constructor(\n    m11: number = 1,\n    m12: number = 0,\n    m13: number = 0,\n    m21: number = 0,\n    m22: number = 1,\n    m23: number = 0,\n    m31: number = 0,\n    m32: number = 0,\n    m33: number = 1\n  ) {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n\n    e[3] = m21;\n    e[4] = m22;\n    e[5] = m23;\n\n    e[6] = m31;\n    e[7] = m32;\n    e[8] = m33;\n  }\n\n  /**\n   * Set the value of this matrix, and return this matrix.\n   * @param m11\n   * @param m12\n   * @param m13\n   * @param m21\n   * @param m22\n   * @param m23\n   * @param m31\n   * @param m32\n   * @param m33\n   * @returns This matrix\n   */\n  set(\n    m11: number,\n    m12: number,\n    m13: number,\n    m21: number,\n    m22: number,\n    m23: number,\n    m31: number,\n    m32: number,\n    m33: number\n  ): Matrix3x3 {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n\n    e[3] = m21;\n    e[4] = m22;\n    e[5] = m23;\n\n    e[6] = m31;\n    e[7] = m32;\n    e[8] = m33;\n\n    return this;\n  }\n\n  /**\n   * Determines the sum of this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the sum of the two matrices\n   */\n  add(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.add(this, right, this);\n    return this;\n  }\n\n  /**\n   * Determines the difference between this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the difference between the two matrices\n   */\n  subtract(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.subtract(this, right, this);\n    return this;\n  }\n\n  /**\n   * Determines the product of this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the product of the two matrices\n   */\n  multiply(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.multiply(this, right, this);\n    return this;\n  }\n\n  /**\n   * Calculate a determinant of this matrix.\n   * @returns The determinant of this matrix\n   */\n  determinant(): number {\n    const e = this.elements;\n\n    const a11 = e[0],\n      a12 = e[1],\n      a13 = e[2];\n    const a21 = e[3],\n      a22 = e[4],\n      a23 = e[5];\n    const a31 = e[6],\n      a32 = e[7],\n      a33 = e[8];\n\n    const b12 = a33 * a22 - a23 * a32;\n    const b22 = -a33 * a21 + a23 * a31;\n    const b32 = a32 * a21 - a22 * a31;\n\n    return a11 * b12 + a12 * b22 + a13 * b32;\n  }\n\n  /**\n   * Identity this matrix.\n   * @returns This matrix after identity\n   */\n  identity(): Matrix3x3 {\n    const e = this.elements;\n\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n\n    return this;\n  }\n\n  /**\n   * Invert the matrix.\n   * @returns The matrix after invert\n   */\n  invert(): Matrix3x3 {\n    Matrix3x3.invert(this, this);\n    return this;\n  }\n\n  /**\n   * This matrix rotates around an angle.\n   * @param r - The rotation angle in radians\n   * @returns This matrix after rotate\n   */\n  rotate(r: number): Matrix3x3 {\n    Matrix3x3.rotate(this, r, this);\n    return this;\n  }\n\n  /**\n   * Scale this matrix by a given vector.\n   * @param s - The given vector\n   * @returns This matrix after scale\n   */\n  scale(s: Vector2): Matrix3x3 {\n    Matrix3x3.scale(this, s, this);\n    return this;\n  }\n\n  /**\n   * Translate this matrix by a given vector.\n   * @param translation - The given vector\n   * @returns This matrix after translate\n   */\n  translate(translation: Vector2): Matrix3x3 {\n    Matrix3x3.translate(this, translation, this);\n    return this;\n  }\n\n  /**\n   * Calculate the transpose of this matrix.\n   * @returns This matrix after transpose\n   */\n  transpose(): Matrix3x3 {\n    Matrix3x3.transpose(this, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this matrix.\n   * @returns A clone of this matrix\n   */\n  clone(): Matrix3x3 {\n    const e = this.elements;\n    let ret = new Matrix3x3(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8]);\n    return ret;\n  }\n\n  /**\n   * Copy this matrix from the specified matrix.\n   * @param source - The specified matrix\n   * @returns This matrix\n   */\n  copyFrom(source: Matrix3x3): Matrix3x3 {\n    const e = this.elements;\n    const se = source.elements;\n\n    e[0] = se[0];\n    e[1] = se[1];\n    e[2] = se[2];\n\n    e[3] = se[3];\n    e[4] = se[4];\n    e[5] = se[5];\n\n    e[6] = se[6];\n    e[7] = se[7];\n    e[8] = se[8];\n\n    return this;\n  }\n\n  /**\n   * Copy the value of this matrix from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This matrix\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Matrix3x3 {\n    const srce = this.elements;\n    for (let i = 0; i < 12; i++) {\n      srce[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * Copy the value of this matrix to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0): void {\n    const e = this.elements;\n\n    out[outOffset] = e[0];\n    out[outOffset + 1] = e[1];\n    out[outOffset + 2] = e[2];\n    out[outOffset + 3] = e[3];\n    out[outOffset + 4] = e[4];\n    out[outOffset + 5] = e[5];\n    out[outOffset + 6] = e[6];\n    out[outOffset + 7] = e[7];\n    out[outOffset + 8] = e[8];\n  }\n\n  /**\n   * Copy the value of this 3x3 matrix from the specified 4x4 matrix.\n   * upper-left principle\n   * @param source - The specified 4x4 matrix\n   * @returns This 3x3 matrix\n   */\n  copyFromMatrix(source: Matrix): Matrix3x3 {\n    const ae = source.elements;\n    const e = this.elements;\n\n    e[0] = ae[0];\n    e[1] = ae[1];\n    e[2] = ae[2];\n\n    e[3] = ae[4];\n    e[4] = ae[5];\n    e[5] = ae[6];\n\n    e[6] = ae[8];\n    e[7] = ae[9];\n    e[8] = ae[10];\n\n    return this;\n  }\n}\n", "import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix3x3 } from \"./Matrix3x3\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a four dimensional mathematical quaternion.\n */\nexport class Quaternion implements IClone<Quaternion>, ICopy<QuaternionLike, Quaternion> {\n  /** @internal */\n  static readonly _tempVector3 = new Vector3();\n  /** @internal */\n  static readonly _tempQuat1 = new Quaternion();\n\n  /**\n   * Determines the sum of two quaternions.\n   * @param left - The first quaternion to add\n   * @param right - The second quaternion to add\n   * @param out - The sum of two quaternions\n   */\n  static add(left: Quaternion, right: Quaternion, out: Quaternion): void {\n    out._x = left._x + right._x;\n    out._y = left._y + right._y;\n    out._z = left._z + right._z;\n    out._w = left._w + right._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the product of two quaternions.\n   * @param left - The first quaternion to multiply\n   * @param right - The second quaternion to multiply\n   * @param out - The product of two quaternions\n   */\n  static multiply(left: Quaternion, right: Quaternion, out: Quaternion): void {\n    const ax = left._x,\n      ay = left._y,\n      az = left._z,\n      aw = left._w;\n    const bx = right._x,\n      by = right._y,\n      bz = right._z,\n      bw = right._w;\n\n    out._x = ax * bw + aw * bx + ay * bz - az * by;\n    out._y = ay * bw + aw * by + az * bx - ax * bz;\n    out._z = az * bw + aw * bz + ax * by - ay * bx;\n    out._w = aw * bw - ax * bx - ay * by - az * bz;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate quaternion that contains conjugated version of the specified quaternion.\n   * @param a - The specified quaternion\n   * @param out - The conjugate version of the specified quaternion\n   */\n  static conjugate(a: Quaternion, out: Quaternion): void {\n    out._x = -a._x;\n    out._y = -a._y;\n    out._z = -a._z;\n    out._w = a._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the dot product of two quaternions.\n   * @param left - The first quaternion to dot\n   * @param right - The second quaternion to dot\n   * @returns The dot product of two quaternions\n   */\n  static dot(left: Quaternion, right: Quaternion): number {\n    return left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;\n  }\n\n  /**\n   * Determines whether the specified quaternions are equals.\n   * @param left - The first quaternion to compare\n   * @param right - The second quaternion to compare\n   * @returns True if the specified quaternions are equals, false otherwise\n   */\n  static equals(left: Quaternion, right: Quaternion): boolean {\n    return (\n      MathUtil.equals(left._x, right._x) &&\n      MathUtil.equals(left._y, right._y) &&\n      MathUtil.equals(left._z, right._z) &&\n      MathUtil.equals(left._w, right._w)\n    );\n  }\n\n  /**\n   * Calculate a quaternion rotates around an arbitrary axis.\n   * @param axis - The axis\n   * @param rad - The rotation angle in radians\n   * @param out - The quaternion after rotate\n   */\n  static rotationAxisAngle(axis: Vector3, rad: number, out: Quaternion): void {\n    const normalAxis = Quaternion._tempVector3;\n    Vector3.normalize(axis, normalAxis);\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    out._x = normalAxis._x * s;\n    out._y = normalAxis._y * s;\n    out._z = normalAxis._z * s;\n    out._w = Math.cos(rad);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion rotates around x, y, z axis (pitch/yaw/roll).\n   * @param x - The radian of rotation around X (pitch)\n   * @param y - The radian of rotation around Y (yaw)\n   * @param z - The radian of rotation around Z (roll)\n   * @param out - The calculated quaternion\n   */\n  static rotationEuler(x: number, y: number, z: number, out: Quaternion): void {\n    Quaternion.rotationYawPitchRoll(y, x, z, out);\n  }\n\n  /**\n   * Calculate a quaternion from the specified yaw, pitch and roll angles.\n   * @param yaw - Yaw around the y axis in radians\n   * @param pitch - Pitch around the x axis in radians\n   * @param roll - Roll around the z axis in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationYawPitchRoll(yaw: number, pitch: number, roll: number, out: Quaternion): void {\n    const halfRoll = roll * 0.5;\n    const halfPitch = pitch * 0.5;\n    const halfYaw = yaw * 0.5;\n\n    const sinRoll = Math.sin(halfRoll);\n    const cosRoll = Math.cos(halfRoll);\n    const sinPitch = Math.sin(halfPitch);\n    const cosPitch = Math.cos(halfPitch);\n    const sinYaw = Math.sin(halfYaw);\n    const cosYaw = Math.cos(halfYaw);\n\n    const cosYawPitch = cosYaw * cosPitch;\n    const sinYawPitch = sinYaw * sinPitch;\n\n    out._x = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;\n    out._y = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;\n    out._z = cosYawPitch * sinRoll - sinYawPitch * cosRoll;\n    out._w = cosYawPitch * cosRoll + sinYawPitch * sinRoll;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion from the specified 3x3 matrix.\n   * @param m - The specified 3x3 matrix\n   * @param out - The calculated quaternion\n   */\n  static rotationMatrix3x3(m: Matrix3x3, out: Quaternion): void {\n    const me = m.elements;\n    const m11 = me[0],\n      m12 = me[1],\n      m13 = me[2];\n    const m21 = me[3],\n      m22 = me[4],\n      m23 = me[5];\n    const m31 = me[6],\n      m32 = me[7],\n      m33 = me[8];\n    const scale = m11 + m22 + m33;\n    let sqrt, half;\n\n    if (scale > 0) {\n      sqrt = Math.sqrt(scale + 1.0);\n      out._w = sqrt * 0.5;\n      sqrt = 0.5 / sqrt;\n\n      out._x = (m23 - m32) * sqrt;\n      out._y = (m31 - m13) * sqrt;\n      out._z = (m12 - m21) * sqrt;\n    } else if (m11 >= m22 && m11 >= m33) {\n      sqrt = Math.sqrt(1.0 + m11 - m22 - m33);\n      half = 0.5 / sqrt;\n\n      out._x = 0.5 * sqrt;\n      out._y = (m12 + m21) * half;\n      out._z = (m13 + m31) * half;\n      out._w = (m23 - m32) * half;\n    } else if (m22 > m33) {\n      sqrt = Math.sqrt(1.0 + m22 - m11 - m33);\n      half = 0.5 / sqrt;\n\n      out._x = (m21 + m12) * half;\n      out._y = 0.5 * sqrt;\n      out._z = (m32 + m23) * half;\n      out._w = (m31 - m13) * half;\n    } else {\n      sqrt = Math.sqrt(1.0 + m33 - m11 - m22);\n      half = 0.5 / sqrt;\n\n      out._x = (m13 + m31) * half;\n      out._y = (m23 + m32) * half;\n      out._z = 0.5 * sqrt;\n      out._w = (m12 - m21) * half;\n    }\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate the inverse of the specified quaternion.\n   * @param a - The quaternion whose inverse is to be calculated\n   * @param out - The inverse of the specified quaternion\n   */\n  static invert(a: Quaternion, out: Quaternion): void {\n    const { _x: x, _y: y, _z: z, _w: w } = a;\n    const dot = x * x + y * y + z * z + w * w;\n    if (dot > MathUtil.zeroTolerance) {\n      const invDot = 1.0 / dot;\n      out._x = -x * invDot;\n      out._y = -y * invDot;\n      out._z = -z * invDot;\n      out._w = w * invDot;\n      out._onValueChanged && out._onValueChanged();\n    }\n  }\n\n  /**\n   * Performs a linear blend between two quaternions.\n   * @param start - The first quaternion\n   * @param end - The second quaternion\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two quaternions\n   */\n  static lerp(start: Quaternion, end: Quaternion, t: number, out: Quaternion): void {\n    const inv = 1.0 - t;\n    if (Quaternion.dot(start, end) >= 0) {\n      out._x = start._x * inv + end._x * t;\n      out._y = start._y * inv + end._y * t;\n      out._z = start._z * inv + end._z * t;\n      out._w = start._w * inv + end._w * t;\n    } else {\n      out._x = start._x * inv - end._x * t;\n      out._y = start._y * inv - end._y * t;\n      out._z = start._z * inv - end._z * t;\n      out._w = start._w * inv - end._w * t;\n    }\n\n    out.normalize();\n  }\n\n  /**\n   * Performs a spherical linear blend between two quaternions.\n   * @param start - The first quaternion\n   * @param end - The second quaternion\n   * @param amount - The blend amount where 0 returns start and 1 end\n   * @param out - The result of spherical linear blending between two quaternions\n   */\n  static slerp(start: Quaternion, end: Quaternion, amount: number, out: Quaternion): void {\n    let opposite: number;\n    let inverse: number;\n    const dot = Quaternion.dot(start, end);\n\n    if (Math.abs(dot) > 1.0 - MathUtil.zeroTolerance) {\n      inverse = 1.0 - amount;\n      opposite = amount * Math.sign(dot);\n    } else {\n      const acos = Math.acos(Math.abs(dot));\n      const invSin = 1.0 / Math.sin(acos);\n\n      inverse = Math.sin((1.0 - amount) * acos) * invSin;\n      opposite = Math.sin(amount * acos) * invSin * Math.sign(dot);\n    }\n\n    out.x = inverse * start.x + opposite * end.x;\n    out.y = inverse * start.y + opposite * end.y;\n    out.z = inverse * start.z + opposite * end.z;\n    out.w = inverse * start.w + opposite * end.w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Scales the specified quaternion magnitude to unit length.\n   * @param a - The specified quaternion\n   * @param out - The normalized quaternion\n   */\n  static normalize(a: Quaternion, out: Quaternion): void {\n    const { _x, _y, _z, _w } = a;\n    let len = Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out._x = _x * len;\n      out._y = _y * len;\n      out._z = _z * len;\n      out._w = _w * len;\n      out._onValueChanged && out._onValueChanged();\n    }\n  }\n\n  /**\n   * Calculate a quaternion rotate around X axis.\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationX(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out._x = s;\n    out._y = 0;\n    out._z = 0;\n    out._w = c;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion rotate around Y axis.\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationY(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out._x = 0;\n    out._y = s;\n    out._z = 0;\n    out._w = c;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion rotate around Z axis.\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationZ(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out._x = 0;\n    out._y = 0;\n    out._z = s;\n    out._w = c;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion that the specified quaternion rotate around X axis.\n   * @param quaternion - The specified quaternion\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotateX(quaternion: Quaternion, rad: number, out: Quaternion): void {\n    const { _x, _y, _z, _w } = quaternion;\n    rad *= 0.5;\n    const bx = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out._x = _x * bw + _w * bx;\n    out._y = _y * bw + _z * bx;\n    out._z = _z * bw - _y * bx;\n    out._w = _w * bw - _x * bx;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion that the specified quaternion rotate around Y axis.\n   * @param quaternion - The specified quaternion\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotateY(quaternion: Quaternion, rad: number, out: Quaternion): void {\n    const { _x, _y, _z, _w } = quaternion;\n    rad *= 0.5;\n    const by = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out._x = _x * bw - _z * by;\n    out._y = _y * bw + _w * by;\n    out._z = _z * bw + _x * by;\n    out._w = _w * bw - _y * by;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion that the specified quaternion rotate around Z axis.\n   * @param quaternion - The specified quaternion\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotateZ(quaternion: Quaternion, rad: number, out: Quaternion): void {\n    const { _x, _y, _z, _w } = quaternion;\n    rad *= 0.5;\n    const bz = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out._x = _x * bw + _y * bz;\n    out._y = _y * bw - _x * bz;\n    out._z = _z * bw + _w * bz;\n    out._w = _w * bw - _z * bz;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Scale a quaternion by a given number.\n   * @param a - The quaternion\n   * @param s - The given number\n   * @param out - The scaled quaternion\n   */\n  static scale(a: Quaternion, s: number, out: Quaternion): void {\n    out._x = a._x * s;\n    out._y = a._y * s;\n    out._z = a._z * s;\n    out._w = a._w * s;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /** @internal */\n  _x: number;\n  /** @internal */\n  _y: number;\n  /** @internal */\n  _z: number;\n  /** @internal */\n  _w: number;\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  /**\n   * The x component of the quaternion.\n   */\n  public get x(): number {\n    return this._x;\n  }\n\n  public set x(value: number) {\n    this._x = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The y component of the quaternion.\n   */\n  public get y(): number {\n    return this._y;\n  }\n\n  public set y(value: number) {\n    this._y = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The z component of the quaternion.\n   */\n  public get z(): number {\n    return this._z;\n  }\n\n  public set z(value: number) {\n    this._z = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Indicting whether this instance is normalized.\n   */\n  public get normalized(): boolean {\n    return (\n      Math.abs(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w - 1) <\n      MathUtil.zeroTolerance\n    );\n  }\n\n  /**\n   * The w component of the quaternion.\n   */\n  public get w() {\n    return this._w;\n  }\n\n  public set w(value: number) {\n    this._w = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of Quaternion.\n   * @param x - The x component of the quaternion, default 0\n   * @param y - The y component of the quaternion, default 0\n   * @param z - The z component of the quaternion, default 0\n   * @param w - The w component of the quaternion, default 1\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 1) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n  }\n\n  /**\n   * Set the value of this quaternion, and return this quaternion.\n   * @param x - The x component of the quaternion\n   * @param y - The y component of the quaternion\n   * @param z - The z component of the quaternion\n   * @param w - The w component of the quaternion\n   * @returns This quaternion\n   */\n  set(x: number, y: number, z: number, w: number): Quaternion {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Transforms this quaternion into its conjugated version.\n   * @returns This quaternion\n   */\n  conjugate(): Quaternion {\n    this._x *= -1;\n    this._y *= -1;\n    this._z *= -1;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Get the rotation axis and rotation angle of the quaternion (unit: radians).\n   * @param out - The axis as an output parameter\n   * @returns The rotation angle (unit: radians)\n   */\n  getAxisAngle(out: Vector3): number {\n    const { _x, _y, _z } = this;\n    const length = _x * _x + _y * _y + _z * _z;\n\n    if (length < MathUtil.zeroTolerance) {\n      out._x = 1;\n      out._y = 0;\n      out._z = 0;\n\n      return 0;\n    } else {\n      const inv = 1.0 / length;\n      out._x = this._x * inv;\n      out._y = this._y * inv;\n      out._z = this._z * inv;\n\n      return Math.acos(this._w) * 2.0;\n    }\n  }\n\n  /**\n   * Identity this quaternion.\n   * @returns This quaternion after identity\n   */\n  identity(): Quaternion {\n    this._x = 0;\n    this._y = 0;\n    this._z = 0;\n    this._w = 1;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Calculate the length of this quaternion.\n   * @returns The length of this quaternion\n   */\n  length(): number {\n    const { _x, _y, _z, _w } = this;\n    return Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);\n  }\n\n  /**\n   * Calculates the squared length of this quaternion.\n   * @returns The squared length of this quaternion\n   */\n  lengthSquared(): number {\n    const { _x, _y, _z, _w } = this;\n    return _x * _x + _y * _y + _z * _z + _w * _w;\n  }\n\n  /**\n   * Converts this quaternion into a unit quaternion.\n   * @returns This quaternion\n   */\n  normalize(): Quaternion {\n    Quaternion.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Get the euler of this quaternion.\n   * @param out - The euler (in radians) as an output parameter\n   * @returns Euler x->pitch y->yaw z->roll\n   */\n  toEuler(out: Vector3): Vector3 {\n    this._toYawPitchRoll(out);\n\n    const t = out._x;\n    out._x = out._y;\n    out._y = t;\n    out._onValueChanged && out._onValueChanged();\n    return out;\n  }\n\n  /**\n   * Get the euler of this quaternion.\n   * @param out - The euler (in radians) as an output parameter\n   * @returns Euler x->yaw y->pitch z->roll\n   */\n  toYawPitchRoll(out: Vector3): Vector3 {\n    this._toYawPitchRoll(out);\n    out._onValueChanged && out._onValueChanged();\n    return out;\n  }\n\n  /**\n   * Calculate this quaternion rotate around X axis.\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateX(rad: number): Quaternion {\n    Quaternion.rotateX(this, rad, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotate around Y axis.\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateY(rad: number): Quaternion {\n    Quaternion.rotateY(this, rad, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotate around Z axis.\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateZ(rad: number): Quaternion {\n    Quaternion.rotateZ(this, rad, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotates around an arbitrary axis.\n   * @param axis - The axis\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotationAxisAngle(axis: Vector3, rad: number): Quaternion {\n    Quaternion.rotationAxisAngle(axis, rad, this);\n    return this;\n  }\n\n  /**\n   * Determines the product of this quaternion and the specified quaternion.\n   * @param quat - The specified quaternion\n   * @returns The product of the two quaternions\n   */\n  multiply(quat: Quaternion): Quaternion {\n    Quaternion.multiply(this, quat, this);\n    return this;\n  }\n\n  /**\n   * Invert this quaternion.\n   * @returns This quaternion after invert\n   */\n  invert(): Quaternion {\n    Quaternion.invert(this, this);\n    return this;\n  }\n\n  /**\n   * Determines the dot product of this quaternion and the specified quaternion.\n   * @param quat - The specified quaternion\n   * @returns The dot product of two quaternions\n   */\n  dot(quat: Quaternion): number {\n    return Quaternion.dot(this, quat);\n  }\n\n  /**\n   * Performs a linear blend between this quaternion and the specified quaternion.\n   * @param quat - The specified quaternion\n   * @param t - The blend amount where 0 returns this and 1 quat\n   * @returns - The result of linear blending between two quaternions\n   */\n  lerp(quat: Quaternion, t: number): Quaternion {\n    Quaternion.lerp(this, quat, t, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotation around an arbitrary axis.\n   * @param axis - The axis\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateAxisAngle(axis: Vector3, rad: number): Quaternion {\n    Quaternion._tempQuat1.rotationAxisAngle(axis, rad);\n    this.multiply(Quaternion._tempQuat1);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this quaternion.\n   * @returns A clone of this quaternion\n   */\n  clone(): Quaternion {\n    return new Quaternion(this._x, this._y, this._z, this._w);\n  }\n\n  /**\n   * Copy this quaternion from the specified quaternion.\n   * @param source - The specified quaternion\n   * @returns This quaternion\n   */\n  copyFrom(source: QuaternionLike): Quaternion {\n    this._x = source.x;\n    this._y = source.y;\n    this._z = source.z;\n    this._w = source.w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this quaternion from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This quaternion\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Quaternion {\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._w = array[offset + 3];\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this quaternion to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this._x;\n    out[outOffset + 1] = this._y;\n    out[outOffset + 2] = this._z;\n    out[outOffset + 3] = this._w;\n  }\n\n  /**\n   * Serialize this quaternion to a JSON representation.\n   * @returns A JSON Object representation of this quaternion\n   */\n  toJSON(): QuaternionLike {\n    return {\n      x: this._x,\n      y: this._y,\n      z: this._z,\n      w: this._w\n    };\n  }\n\n  private _toYawPitchRoll(out: Vector3): void {\n    // https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles\n    const { _x: x, _y: y, _z: z, _w: w } = this;\n    const xx = x * x;\n    const sinP = 2.0 * (x * w - y * z);\n\n    // use 90 degrees if out of range\n    out._y = Math.abs(sinP) >= 1 ? Math.sign(sinP) * (Math.PI / 2) : Math.asin(sinP);\n    out._x = Math.atan2(2.0 * (z * x + y * w), 1.0 - 2.0 * (y * y + xx));\n    out._z = Math.atan2(2.0 * (x * y + z * w), 1.0 - 2.0 * (z * z + xx));\n  }\n\n  // @todo: this is yaw roll pitch, we need to waw pitch roll order, this version has better performance\n  // private _toYawRollPitch(out: Vector3): Vector3 {\n  //   // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/\n  //   const { _x: x, _y: y, _z: z, _w: w } = this;\n  //   const sqw = w * w;\n  //   const sqx = x * x;\n  //   const sqy = y * y;\n  //   const sqz = z * z;\n  //   const unit = sqx + sqy + sqz + sqw; // if normalised is one, otherwise is correction factor\n  //   const test = x * y + z * w;\n  //   if (test > (0.5 - MathUtil.zeroTolerance) * unit) {\n  //     // singularity at north pole\n  //     out._x = 2 * Math.atan2(x, w);\n  //     out._y = Math.PI / 2;\n  //     out._z = 0;\n  //     return;\n  //   }\n  //   if (test < -(0.5 - MathUtil.zeroTolerance) * unit) {\n  //     // singularity at south pole\n  //     out._x = -2 * Math.atan2(x, w);\n  //     out._y = -Math.PI / 2;\n  //     out._z = 0;\n  //     return;\n  //   }\n  //   out._x = Math.atan2(2 * y * w - 2 * x * z, sqx - sqy - sqz + sqw);\n  //   out._y = Math.asin((2 * test) / unit);\n  //   out._z = Math.atan2(2 * x * w - 2 * y * z, -sqx + sqy - sqz + sqw);\n  // }\n}\n\ninterface QuaternionLike {\n  /** {@inheritDoc Quaternion.x} */\n  x: number;\n  /** {@inheritDoc Quaternion.y} */\n  y: number;\n  /** {@inheritDoc Quaternion.z} */\n  z: number;\n  /** {@inheritDoc Quaternion.w} */\n  w: number;\n}\n", "import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix3x3 } from \"./Matrix3x3\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a 4x4 mathematical matrix.\n */\nexport class Matrix implements IClone<Matrix>, ICopy<Matrix, Matrix> {\n  private static readonly _tempVec30: Vector3 = new Vector3();\n  private static readonly _tempVec31: Vector3 = new Vector3();\n  private static readonly _tempVec32: Vector3 = new Vector3();\n  private static readonly _tempMat30: Matrix3x3 = new Matrix3x3();\n\n  /** @internal Identity matrix. */\n  static readonly _identity: Matrix = new Matrix(\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0\n  );\n\n  /**\n   * Determines the product of two matrices.\n   * @param left - The first matrix to multiply\n   * @param right - The second matrix to multiply\n   * @param out - The product of the two matrices\n   */\n  static multiply(left: Matrix, right: Matrix, out: Matrix): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    // prettier-ignore\n    const l11 = le[0], l12 = le[1], l13 = le[2], l14 = le[3],\n    l21 = le[4], l22 = le[5], l23 = le[6], l24 = le[7],\n    l31 = le[8], l32 = le[9], l33 = le[10], l34 = le[11],\n    l41 = le[12], l42 = le[13], l43 = le[14], l44 = le[15];\n\n    // prettier-ignore\n    const r11 = re[0], r12 = re[1], r13 = re[2], r14 = re[3],\n    r21 = re[4], r22 = re[5], r23 = re[6], r24 = re[7],\n    r31 = re[8], r32 = re[9], r33 = re[10], r34 = re[11],\n    r41 = re[12], r42 = re[13], r43 = re[14], r44 = re[15];\n\n    oe[0] = l11 * r11 + l21 * r12 + l31 * r13 + l41 * r14;\n    oe[1] = l12 * r11 + l22 * r12 + l32 * r13 + l42 * r14;\n    oe[2] = l13 * r11 + l23 * r12 + l33 * r13 + l43 * r14;\n    oe[3] = l14 * r11 + l24 * r12 + l34 * r13 + l44 * r14;\n\n    oe[4] = l11 * r21 + l21 * r22 + l31 * r23 + l41 * r24;\n    oe[5] = l12 * r21 + l22 * r22 + l32 * r23 + l42 * r24;\n    oe[6] = l13 * r21 + l23 * r22 + l33 * r23 + l43 * r24;\n    oe[7] = l14 * r21 + l24 * r22 + l34 * r23 + l44 * r24;\n\n    oe[8] = l11 * r31 + l21 * r32 + l31 * r33 + l41 * r34;\n    oe[9] = l12 * r31 + l22 * r32 + l32 * r33 + l42 * r34;\n    oe[10] = l13 * r31 + l23 * r32 + l33 * r33 + l43 * r34;\n    oe[11] = l14 * r31 + l24 * r32 + l34 * r33 + l44 * r34;\n\n    oe[12] = l11 * r41 + l21 * r42 + l31 * r43 + l41 * r44;\n    oe[13] = l12 * r41 + l22 * r42 + l32 * r43 + l42 * r44;\n    oe[14] = l13 * r41 + l23 * r42 + l33 * r43 + l43 * r44;\n    oe[15] = l14 * r41 + l24 * r42 + l34 * r43 + l44 * r44;\n  }\n\n  /**\n   * Determines whether the specified matrices are equals.\n   * @param left - The first matrix to compare\n   * @param right - The second matrix to compare\n   * @returns True if the specified matrices are equals, false otherwise\n   */\n  static equals(left: Matrix, right: Matrix): boolean {\n    const le = left.elements;\n    const re = right.elements;\n\n    return (\n      MathUtil.equals(le[0], re[0]) &&\n      MathUtil.equals(le[1], re[1]) &&\n      MathUtil.equals(le[2], re[2]) &&\n      MathUtil.equals(le[3], re[3]) &&\n      MathUtil.equals(le[4], re[4]) &&\n      MathUtil.equals(le[5], re[5]) &&\n      MathUtil.equals(le[6], re[6]) &&\n      MathUtil.equals(le[7], re[7]) &&\n      MathUtil.equals(le[8], re[8]) &&\n      MathUtil.equals(le[9], re[9]) &&\n      MathUtil.equals(le[10], re[10]) &&\n      MathUtil.equals(le[11], re[11]) &&\n      MathUtil.equals(le[12], re[12]) &&\n      MathUtil.equals(le[13], re[13]) &&\n      MathUtil.equals(le[14], re[14]) &&\n      MathUtil.equals(le[15], re[15])\n    );\n  }\n\n  /**\n   * Performs a linear interpolation between two matrices.\n   * @param start - The first matrix\n   * @param end - The second matrix\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two matrices\n   */\n  static lerp(start: Matrix, end: Matrix, t: number, out: Matrix): void {\n    const se = start.elements;\n    const ee = end.elements;\n    const oe = out.elements;\n    const inv = 1.0 - t;\n\n    oe[0] = se[0] * inv + ee[0] * t;\n    oe[1] = se[1] * inv + ee[1] * t;\n    oe[2] = se[2] * inv + ee[2] * t;\n    oe[3] = se[3] * inv + ee[3] * t;\n\n    oe[4] = se[4] * inv + ee[4] * t;\n    oe[5] = se[5] * inv + ee[5] * t;\n    oe[6] = se[6] * inv + ee[6] * t;\n    oe[7] = se[7] * inv + ee[7] * t;\n\n    oe[8] = se[8] * inv + ee[8] * t;\n    oe[9] = se[9] * inv + ee[9] * t;\n    oe[10] = se[10] * inv + ee[10] * t;\n    oe[11] = se[11] * inv + ee[11] * t;\n\n    oe[12] = se[12] * inv + ee[12] * t;\n    oe[13] = se[13] * inv + ee[13] * t;\n    oe[14] = se[14] * inv + ee[14] * t;\n    oe[15] = se[15] * inv + ee[15] * t;\n  }\n\n  /**\n   * Determines the sum of two matrices.\n   * @param left - The first matrix to add\n   * @param right - The second matrix to add\n   * @param out - The sum of two matrices\n   */\n  static add(left: Matrix, right: Matrix, out: Matrix): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n    oe[0] = le[0] + re[0];\n    oe[1] = le[1] + re[1];\n    oe[2] = le[2] + re[2];\n    oe[3] = le[3] + re[3];\n    oe[4] = le[4] + re[4];\n    oe[5] = le[5] + re[5];\n    oe[6] = le[6] + re[6];\n    oe[7] = le[7] + re[7];\n    oe[8] = le[8] + re[8];\n    oe[9] = le[9] + re[9];\n    oe[10] = le[10] + re[10];\n    oe[11] = le[11] + re[11];\n    oe[12] = le[12] + re[12];\n    oe[13] = le[13] + re[13];\n    oe[14] = le[14] + re[14];\n    oe[15] = le[15] + re[15];\n  }\n\n  /**\n   * Multiplies a matrix by a scalar.\n   * @param source - The matrix to multiply\n   * @param scalar - The scalar to multiply\n   * @param out - The result of multiplying a matrix by a scalar\n   */\n  static multiplyScalar(source: Matrix, scalar: number, out: Matrix): void {\n    const se = source.elements;\n    const oe = out.elements;\n\n    oe[0] = se[0] * scalar;\n    oe[1] = se[1] * scalar;\n    oe[2] = se[2] * scalar;\n    oe[3] = se[3] * scalar;\n    oe[4] = se[4] * scalar;\n    oe[5] = se[5] * scalar;\n    oe[6] = se[6] * scalar;\n    oe[7] = se[7] * scalar;\n    oe[8] = se[8] * scalar;\n    oe[9] = se[9] * scalar;\n    oe[10] = se[10] * scalar;\n    oe[11] = se[11] * scalar;\n    oe[12] = se[12] * scalar;\n    oe[13] = se[13] * scalar;\n    oe[14] = se[14] * scalar;\n    oe[15] = se[15] * scalar;\n  }\n\n  /**\n   * Calculate a rotation matrix from a quaternion.\n   * @param quaternion - The quaternion used to calculate the matrix\n   * @param out - The calculated rotation matrix\n   */\n  static rotationQuaternion(quaternion: Quaternion, out: Matrix): void {\n    const oe = out.elements;\n    const { _x: x, _y: y, _z: z, _w: w } = quaternion;\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    oe[0] = 1 - yy - zz;\n    oe[1] = yx + wz;\n    oe[2] = zx - wy;\n    oe[3] = 0;\n\n    oe[4] = yx - wz;\n    oe[5] = 1 - xx - zz;\n    oe[6] = zy + wx;\n    oe[7] = 0;\n\n    oe[8] = zx + wy;\n    oe[9] = zy - wx;\n    oe[10] = 1 - xx - yy;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix rotates around an arbitrary axis.\n   * @param axis - The axis\n   * @param r - The rotation angle in radians\n   * @param out - The matrix after rotate\n   */\n  static rotationAxisAngle(axis: Vector3, r: number, out: Matrix): void {\n    const oe = out.elements;\n    let { _x: x, _y: y, _z: z } = axis;\n    let len = Math.sqrt(x * x + y * y + z * z);\n    let s, c, t;\n\n    if (Math.abs(len) < MathUtil.zeroTolerance) {\n      return;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(r);\n    c = Math.cos(r);\n    t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    oe[0] = x * x * t + c;\n    oe[1] = y * x * t + z * s;\n    oe[2] = z * x * t - y * s;\n    oe[3] = 0;\n\n    oe[4] = x * y * t - z * s;\n    oe[5] = y * y * t + c;\n    oe[6] = z * y * t + x * s;\n    oe[7] = 0;\n\n    oe[8] = x * z * t + y * s;\n    oe[9] = y * z * t - x * s;\n    oe[10] = z * z * t + c;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix from a quaternion and a translation.\n   * @param quaternion - The quaternion used to calculate the matrix\n   * @param translation - The translation used to calculate the matrix\n   * @param out - The calculated matrix\n   */\n  static rotationTranslation(quaternion: Quaternion, translation: Vector3, out: Matrix): void {\n    Matrix.rotationQuaternion(quaternion, out);\n\n    const oe = out.elements;\n    oe[12] = translation._x;\n    oe[13] = translation._y;\n    oe[14] = translation._z;\n  }\n\n  /**\n   * Calculate an affine matrix.\n   * @param scale - The scale used to calculate matrix\n   * @param rotation - The rotation used to calculate matrix\n   * @param translation - The translation used to calculate matrix\n   * @param out - The calculated matrix\n   */\n  static affineTransformation(scale: Vector3, rotation: Quaternion, translation: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    const { _x: x, _y: y, _z: z, _w: w } = rotation;\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = scale._x;\n    let sy = scale._y;\n    let sz = scale._z;\n\n    oe[0] = (1 - (yy + zz)) * sx;\n    oe[1] = (xy + wz) * sx;\n    oe[2] = (xz - wy) * sx;\n    oe[3] = 0;\n\n    oe[4] = (xy - wz) * sy;\n    oe[5] = (1 - (xx + zz)) * sy;\n    oe[6] = (yz + wx) * sy;\n    oe[7] = 0;\n\n    oe[8] = (xz + wy) * sz;\n    oe[9] = (yz - wx) * sz;\n    oe[10] = (1 - (xx + yy)) * sz;\n    oe[11] = 0;\n\n    oe[12] = translation._x;\n    oe[13] = translation._y;\n    oe[14] = translation._z;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix from scale vector.\n   * @param s - The scale vector\n   * @param out - The calculated matrix\n   */\n  static scaling(s: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    oe[0] = s._x;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = s._y;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = s._z;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix from translation vector.\n   * @param translation - The translation vector\n   * @param out - The calculated matrix\n   */\n  static translation(translation: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    oe[0] = 1;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = 1;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = 1;\n    oe[11] = 0;\n\n    oe[12] = translation._x;\n    oe[13] = translation._y;\n    oe[14] = translation._z;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate the inverse of the specified matrix.\n   * @param a - The matrix whose inverse is to be calculated\n   * @param out - The inverse of the specified matrix\n   */\n  static invert(a: Matrix, out: Matrix): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2],\n      a14 = ae[3];\n    const a21 = ae[4],\n      a22 = ae[5],\n      a23 = ae[6],\n      a24 = ae[7];\n    const a31 = ae[8],\n      a32 = ae[9],\n      a33 = ae[10],\n      a34 = ae[11];\n    const a41 = ae[12],\n      a42 = ae[13],\n      a43 = ae[14],\n      a44 = ae[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;\n    oe[1] = (a13 * b10 - a12 * b11 - a14 * b09) * det;\n    oe[2] = (a42 * b05 - a43 * b04 + a44 * b03) * det;\n    oe[3] = (a33 * b04 - a32 * b05 - a34 * b03) * det;\n\n    oe[4] = (a23 * b08 - a21 * b11 - a24 * b07) * det;\n    oe[5] = (a11 * b11 - a13 * b08 + a14 * b07) * det;\n    oe[6] = (a43 * b02 - a41 * b05 - a44 * b01) * det;\n    oe[7] = (a31 * b05 - a33 * b02 + a34 * b01) * det;\n\n    oe[8] = (a21 * b10 - a22 * b08 + a24 * b06) * det;\n    oe[9] = (a12 * b08 - a11 * b10 - a14 * b06) * det;\n    oe[10] = (a41 * b04 - a42 * b02 + a44 * b00) * det;\n    oe[11] = (a32 * b02 - a31 * b04 - a34 * b00) * det;\n\n    oe[12] = (a22 * b07 - a21 * b09 - a23 * b06) * det;\n    oe[13] = (a11 * b09 - a12 * b07 + a13 * b06) * det;\n    oe[14] = (a42 * b01 - a41 * b03 - a43 * b00) * det;\n    oe[15] = (a31 * b03 - a32 * b01 + a33 * b00) * det;\n  }\n\n  /**\n   * Calculate a right-handed look-at matrix.\n   * @param eye - The position of the viewer's eye\n   * @param target - The camera look-at target\n   * @param up - The camera's up vector\n   * @param out - The calculated look-at matrix\n   */\n  static lookAt(eye: Vector3, target: Vector3, up: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    const xAxis: Vector3 = Matrix._tempVec30;\n    const yAxis: Vector3 = Matrix._tempVec31;\n    const zAxis: Vector3 = Matrix._tempVec32;\n\n    Vector3.subtract(eye, target, zAxis);\n    zAxis.normalize();\n    Vector3.cross(up, zAxis, xAxis);\n    xAxis.normalize();\n    Vector3.cross(zAxis, xAxis, yAxis);\n\n    oe[0] = xAxis._x;\n    oe[1] = yAxis._x;\n    oe[2] = zAxis._x;\n    oe[3] = 0;\n\n    oe[4] = xAxis._y;\n    oe[5] = yAxis._y;\n    oe[6] = zAxis._y;\n    oe[7] = 0;\n\n    oe[8] = xAxis._z;\n    oe[9] = yAxis._z;\n    oe[10] = zAxis._z;\n    oe[11] = 0;\n\n    oe[12] = -Vector3.dot(xAxis, eye);\n    oe[13] = -Vector3.dot(yAxis, eye);\n    oe[14] = -Vector3.dot(zAxis, eye);\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate an orthographic projection matrix.\n   * @param left - The left edge of the viewing\n   * @param right - The right edge of the viewing\n   * @param bottom - The bottom edge of the viewing\n   * @param top - The top edge of the viewing\n   * @param near - The depth of the near plane\n   * @param far - The depth of the far plane\n   * @param out - The calculated orthographic projection matrix\n   */\n  static ortho(left: number, right: number, bottom: number, top: number, near: number, far: number, out: Matrix): void {\n    const oe = out.elements;\n    const lr = 1 / (left - right);\n    const bt = 1 / (bottom - top);\n    const nf = 1 / (near - far);\n\n    oe[0] = -2 * lr;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = -2 * bt;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = 2 * nf;\n    oe[11] = 0;\n\n    oe[12] = (left + right) * lr;\n    oe[13] = (top + bottom) * bt;\n    oe[14] = (far + near) * nf;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a perspective projection matrix.\n   * @param fovY - Field of view in the y direction, in radians\n   * @param aspect - Aspect ratio, defined as view space width divided by height\n   * @param near - The depth of the near plane\n   * @param far - The depth of the far plane\n   * @param out - The calculated perspective projection matrix\n   */\n  static perspective(fovY: number, aspect: number, near: number, far: number, out: Matrix): void {\n    const oe = out.elements;\n    const f = 1.0 / Math.tan(fovY / 2);\n    const nf = 1 / (near - far);\n\n    oe[0] = f / aspect;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = f;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = (far + near) * nf;\n    oe[11] = -1;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 2 * far * near * nf;\n    oe[15] = 0;\n  }\n\n  /**\n   * The specified matrix rotates around an arbitrary axis.\n   * @param m - The specified matrix\n   * @param axis - The axis\n   * @param r - The rotation angle in radians\n   * @param out - The rotated matrix\n   */\n  static rotateAxisAngle(m: Matrix, axis: Vector3, r: number, out: Matrix): void {\n    let { _x: x, _y: y, _z: z } = axis;\n    let len = Math.sqrt(x * x + y * y + z * z);\n\n    if (Math.abs(len) < MathUtil.zeroTolerance) {\n      return;\n    }\n\n    const me = m.elements;\n    const oe = out.elements;\n    let s, c, t;\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(r);\n    c = Math.cos(r);\n    t = 1 - c;\n\n    let a11 = me[0],\n      a12 = me[1],\n      a13 = me[2],\n      a14 = me[3];\n    let a21 = me[4],\n      a22 = me[5],\n      a23 = me[6],\n      a24 = me[7];\n    let a31 = me[8],\n      a32 = me[9],\n      a33 = me[10],\n      a34 = me[11];\n\n    // Construct the elements of the rotation matrix\n    let b11 = x * x * t + c;\n    let b12 = y * x * t + z * s;\n    let b13 = z * x * t - y * s;\n    let b21 = x * y * t - z * s;\n    let b22 = y * y * t + c;\n    let b23 = z * y * t + x * s;\n    let b31 = x * z * t + y * s;\n    let b32 = y * z * t - x * s;\n    let b33 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    oe[0] = a11 * b11 + a21 * b12 + a31 * b13;\n    oe[1] = a12 * b11 + a22 * b12 + a32 * b13;\n    oe[2] = a13 * b11 + a23 * b12 + a33 * b13;\n    oe[3] = a14 * b11 + a24 * b12 + a34 * b13;\n\n    oe[4] = a11 * b21 + a21 * b22 + a31 * b23;\n    oe[5] = a12 * b21 + a22 * b22 + a32 * b23;\n    oe[6] = a13 * b21 + a23 * b22 + a33 * b23;\n    oe[7] = a14 * b21 + a24 * b22 + a34 * b23;\n\n    oe[8] = a11 * b31 + a21 * b32 + a31 * b33;\n    oe[9] = a12 * b31 + a22 * b32 + a32 * b33;\n    oe[10] = a13 * b31 + a23 * b32 + a33 * b33;\n    oe[11] = a14 * b31 + a24 * b32 + a34 * b33;\n\n    if (m !== out) {\n      // If the source and destination differ, copy the unchanged last row\n      oe[12] = me[12];\n      oe[13] = me[13];\n      oe[14] = me[14];\n      oe[15] = me[15];\n    }\n  }\n\n  /**\n   * Scale a matrix by a given vector.\n   * @param m - The matrix\n   * @param s - The given vector\n   * @param out - The scaled matrix\n   */\n  static scale(m: Matrix, s: Vector3, out: Matrix): void {\n    const me = m.elements;\n    const oe = out.elements;\n    const { _x: x, _y: y, _z: z } = s;\n\n    oe[0] = me[0] * x;\n    oe[1] = me[1] * x;\n    oe[2] = me[2] * x;\n    oe[3] = me[3] * x;\n\n    oe[4] = me[4] * y;\n    oe[5] = me[5] * y;\n    oe[6] = me[6] * y;\n    oe[7] = me[7] * y;\n\n    oe[8] = me[8] * z;\n    oe[9] = me[9] * z;\n    oe[10] = me[10] * z;\n    oe[11] = me[11] * z;\n\n    oe[12] = me[12];\n    oe[13] = me[13];\n    oe[14] = me[14];\n    oe[15] = me[15];\n  }\n\n  /**\n   * Translate a matrix by a given vector.\n   * @param m - The matrix\n   * @param v - The given vector\n   * @param out - The translated matrix\n   */\n  static translate(m: Matrix, v: Vector3, out: Matrix): void {\n    const me = m.elements;\n    const oe = out.elements;\n    const { _x: x, _y: y, _z: z } = v;\n\n    if (m === out) {\n      oe[12] = me[0] * x + me[4] * y + me[8] * z + me[12];\n      oe[13] = me[1] * x + me[5] * y + me[9] * z + me[13];\n      oe[14] = me[2] * x + me[6] * y + me[10] * z + me[14];\n      oe[15] = me[3] * x + me[7] * y + me[11] * z + me[15];\n    } else {\n      const a11 = me[0],\n        a12 = me[1],\n        a13 = me[2],\n        a14 = me[3];\n      const a21 = me[4],\n        a22 = me[5],\n        a23 = me[6],\n        a24 = me[7];\n      const a31 = me[8],\n        a32 = me[9],\n        a33 = me[10],\n        a34 = me[11];\n\n      (oe[0] = a11), (oe[1] = a12), (oe[2] = a13), (oe[3] = a14);\n      (oe[4] = a21), (oe[5] = a22), (oe[6] = a23), (oe[7] = a24);\n      (oe[8] = a31), (oe[9] = a32), (oe[10] = a33), (oe[11] = a34);\n\n      oe[12] = a11 * x + a21 * y + a31 * z + me[12];\n      oe[13] = a12 * x + a22 * y + a32 * z + me[13];\n      oe[14] = a13 * x + a23 * y + a33 * z + me[14];\n      oe[15] = a14 * x + a24 * y + a34 * z + me[15];\n    }\n  }\n\n  /**\n   * Calculate the transpose of the specified matrix.\n   * @param a - The specified matrix\n   * @param out - The transpose of the specified matrix\n   */\n  static transpose(a: Matrix, out: Matrix): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    if (out === a) {\n      const a12 = ae[1];\n      const a13 = ae[2];\n      const a14 = ae[3];\n      const a23 = ae[6];\n      const a24 = ae[7];\n      const a34 = ae[11];\n\n      oe[1] = ae[4];\n      oe[2] = ae[8];\n      oe[3] = ae[12];\n\n      oe[4] = a12;\n      oe[6] = ae[9];\n      oe[7] = ae[13];\n\n      oe[8] = a13;\n      oe[9] = a23;\n      oe[11] = ae[14];\n\n      oe[12] = a14;\n      oe[13] = a24;\n      oe[14] = a34;\n    } else {\n      oe[0] = ae[0];\n      oe[1] = ae[4];\n      oe[2] = ae[8];\n      oe[3] = ae[12];\n\n      oe[4] = ae[1];\n      oe[5] = ae[5];\n      oe[6] = ae[9];\n      oe[7] = ae[13];\n\n      oe[8] = ae[2];\n      oe[9] = ae[6];\n      oe[10] = ae[10];\n      oe[11] = ae[14];\n\n      oe[12] = ae[3];\n      oe[13] = ae[7];\n      oe[14] = ae[11];\n      oe[15] = ae[15];\n    }\n  }\n\n  /**\n   * An array containing the elements of the matrix (column matrix).\n   * @remarks\n   * elements[0] first column and first row value m11\n   * elements[1] first column and second row value m12\n   * elements[2] first column and third row value m13\n   * elements[3] first column and fourth row value m14\n   * elements[4] second column and first row value m21\n   * and so on\n   */\n  elements: Float32Array = new Float32Array(16);\n\n  /**\n   * Constructor of 4x4 Matrix.\n   * @param m11 - default 1, column 1, row 1\n   * @param m12 - default 0, column 1, row 2\n   * @param m13 - default 0, column 1, row 3\n   * @param m14 - default 0, column 1, row 4\n   * @param m21 - default 0, column 2, row 1\n   * @param m22 - default 1, column 2, row 2\n   * @param m23 - default 0, column 2, row 3\n   * @param m24 - default 0, column 2, row 4\n   * @param m31 - default 0, column 3, row 1\n   * @param m32 - default 0, column 3, row 2\n   * @param m33 - default 1, column 3, row 3\n   * @param m34 - default 0, column 3, row 4\n   * @param m41 - default 0, column 4, row 1\n   * @param m42 - default 0, column 4, row 2\n   * @param m43 - default 0, column 4, row 3\n   * @param m44 - default 1, column 4, row 4\n   */\n  constructor(\n    m11: number = 1,\n    m12: number = 0,\n    m13: number = 0,\n    m14: number = 0,\n    m21: number = 0,\n    m22: number = 1,\n    m23: number = 0,\n    m24: number = 0,\n    m31: number = 0,\n    m32: number = 0,\n    m33: number = 1,\n    m34: number = 0,\n    m41: number = 0,\n    m42: number = 0,\n    m43: number = 0,\n    m44: number = 1\n  ) {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n    e[3] = m14;\n\n    e[4] = m21;\n    e[5] = m22;\n    e[6] = m23;\n    e[7] = m24;\n\n    e[8] = m31;\n    e[9] = m32;\n    e[10] = m33;\n    e[11] = m34;\n\n    e[12] = m41;\n    e[13] = m42;\n    e[14] = m43;\n    e[15] = m44;\n  }\n\n  /**\n   * Set the value of this matrix, and return this matrix.\n   * @param m11 - column 1, row 1\n   * @param m12 - column 1, row 2\n   * @param m13 - column 1, row 3\n   * @param m14 - column 1, row 4\n   * @param m21 - column 2, row 1\n   * @param m22 - column 2, row 2\n   * @param m23 - column 2, row 3\n   * @param m24 - column 2, row 4\n   * @param m31 - column 3, row 1\n   * @param m32 - column 3, row 2\n   * @param m33 - column 3, row 3\n   * @param m34 - column 3, row 4\n   * @param m41 - column 4, row 1\n   * @param m42 - column 4, row 2\n   * @param m43 - column 4, row 3\n   * @param m44 - column 4, row 4\n   * @returns This matrix\n   */\n  set(\n    m11: number,\n    m12: number,\n    m13: number,\n    m14: number,\n    m21: number,\n    m22: number,\n    m23: number,\n    m24: number,\n    m31: number,\n    m32: number,\n    m33: number,\n    m34: number,\n    m41: number,\n    m42: number,\n    m43: number,\n    m44: number\n  ): Matrix {\n    const e = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n    e[3] = m14;\n\n    e[4] = m21;\n    e[5] = m22;\n    e[6] = m23;\n    e[7] = m24;\n\n    e[8] = m31;\n    e[9] = m32;\n    e[10] = m33;\n    e[11] = m34;\n\n    e[12] = m41;\n    e[13] = m42;\n    e[14] = m43;\n    e[15] = m44;\n\n    return this;\n  }\n\n  /**\n   * Determines the product of this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the product of the two matrices\n   */\n  multiply(right: Matrix): Matrix {\n    Matrix.multiply(this, right, this);\n    return this;\n  }\n\n  /**\n   * Calculate a determinant of this matrix.\n   * @returns The determinant of this matrix\n   */\n  determinant(): number {\n    const e = this.elements;\n\n    const a11 = e[0],\n      a12 = e[1],\n      a13 = e[2],\n      a14 = e[3];\n    const a21 = e[4],\n      a22 = e[5],\n      a23 = e[6],\n      a24 = e[7];\n    const a31 = e[8],\n      a32 = e[9],\n      a33 = e[10],\n      a34 = e[11];\n    const a41 = e[12],\n      a42 = e[13],\n      a43 = e[14],\n      a44 = e[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n  }\n\n  /**\n   * Decompose this matrix to translation, rotation and scale elements.\n   * @param translation - Translation vector as an output parameter\n   * @param rotation - Rotation quaternion as an output parameter\n   * @param scale - Scale vector as an output parameter\n   * @returns True if this matrix can be decomposed, false otherwise\n   */\n  decompose(translation: Vector3, rotation: Quaternion, scale: Vector3): boolean {\n    const rm: Matrix3x3 = Matrix._tempMat30;\n\n    const e = this.elements;\n    const rme = rm.elements;\n\n    const m11 = e[0];\n    const m12 = e[1];\n    const m13 = e[2];\n    const m14 = e[3];\n    const m21 = e[4];\n    const m22 = e[5];\n    const m23 = e[6];\n    const m24 = e[7];\n    const m31 = e[8];\n    const m32 = e[9];\n    const m33 = e[10];\n    const m34 = e[11];\n    translation.set(e[12], e[13], e[14]);\n\n    const xs = Math.sign(m11 * m12 * m13 * m14) < 0 ? -1 : 1;\n    const ys = Math.sign(m21 * m22 * m23 * m24) < 0 ? -1 : 1;\n    const zs = Math.sign(m31 * m32 * m33 * m34) < 0 ? -1 : 1;\n\n    const sx = xs * Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n    const sy = ys * Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n    const sz = zs * Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n    scale.set(sx, sy, sz);\n\n    if (\n      Math.abs(sx) < MathUtil.zeroTolerance ||\n      Math.abs(sy) < MathUtil.zeroTolerance ||\n      Math.abs(sz) < MathUtil.zeroTolerance\n    ) {\n      rotation.identity();\n      return false;\n    } else {\n      const invSX = 1 / sx;\n      const invSY = 1 / sy;\n      const invSZ = 1 / sz;\n\n      rme[0] = m11 * invSX;\n      rme[1] = m12 * invSX;\n      rme[2] = m13 * invSX;\n      rme[3] = m21 * invSY;\n      rme[4] = m22 * invSY;\n      rme[5] = m23 * invSY;\n      rme[6] = m31 * invSZ;\n      rme[7] = m32 * invSZ;\n      rme[8] = m33 * invSZ;\n      Quaternion.rotationMatrix3x3(rm, rotation);\n      return true;\n    }\n  }\n\n  /**\n   * Get rotation from this matrix.\n   * @param out - Rotation quaternion as an output parameter\n   * @returns The out\n   */\n  getRotation(out: Quaternion): Quaternion {\n    const e = this.elements;\n    let trace = e[0] + e[5] + e[10];\n\n    if (trace > MathUtil.zeroTolerance) {\n      let s = Math.sqrt(trace + 1.0) * 2;\n      out._w = 0.25 * s;\n      out._x = (e[6] - e[9]) / s;\n      out._y = (e[8] - e[2]) / s;\n      out._z = (e[1] - e[4]) / s;\n    } else if (e[0] > e[5] && e[0] > e[10]) {\n      let s = Math.sqrt(1.0 + e[0] - e[5] - e[10]) * 2;\n      out._w = (e[6] - e[9]) / s;\n      out._x = 0.25 * s;\n      out._y = (e[1] + e[4]) / s;\n      out._z = (e[8] + e[2]) / s;\n    } else if (e[5] > e[10]) {\n      let s = Math.sqrt(1.0 + e[5] - e[0] - e[10]) * 2;\n      out._w = (e[8] - e[2]) / s;\n      out._x = (e[1] + e[4]) / s;\n      out._y = 0.25 * s;\n      out._z = (e[6] + e[9]) / s;\n    } else {\n      let s = Math.sqrt(1.0 + e[10] - e[0] - e[5]) * 2;\n      out._w = (e[1] - e[4]) / s;\n      out._x = (e[8] + e[2]) / s;\n      out._y = (e[6] + e[9]) / s;\n      out._z = 0.25 * s;\n    }\n\n    out._onValueChanged && out._onValueChanged();\n    return out;\n  }\n\n  /**\n   * Get scale from this matrix.\n   * @param out - Scale vector as an output parameter\n   * @returns The out\n   */\n  getScaling(out: Vector3): Vector3 {\n    //getScale()\n    const e = this.elements;\n    const m11 = e[0],\n      m12 = e[1],\n      m13 = e[2];\n    const m21 = e[4],\n      m22 = e[5],\n      m23 = e[6];\n    const m31 = e[8],\n      m32 = e[9],\n      m33 = e[10];\n\n    out.set(\n      Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13),\n      Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23),\n      Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33)\n    );\n\n    return out;\n  }\n\n  /**\n   * Get translation from this matrix.\n   * @param out - Translation vector as an output parameter\n   * @returns The out\n   */\n  getTranslation(out: Vector3): Vector3 {\n    const e = this.elements;\n    out.set(e[12], e[13], e[14]);\n    return out;\n  }\n\n  /**\n   * Identity this matrix.\n   * @returns This matrix after identity\n   */\n  identity(): Matrix {\n    const e = this.elements;\n\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n\n    e[4] = 0;\n    e[5] = 1;\n    e[6] = 0;\n    e[7] = 0;\n\n    e[8] = 0;\n    e[9] = 0;\n    e[10] = 1;\n    e[11] = 0;\n\n    e[12] = 0;\n    e[13] = 0;\n    e[14] = 0;\n    e[15] = 1;\n\n    return this;\n  }\n\n  /**\n   * Invert the matrix.\n   * @returns The matrix after invert\n   */\n  invert(): Matrix {\n    Matrix.invert(this, this);\n    return this;\n  }\n\n  /**\n   * This matrix rotates around an arbitrary axis.\n   * @param axis - The axis\n   * @param r - The rotation angle in radians\n   * @returns This matrix after rotate\n   */\n  rotateAxisAngle(axis: Vector3, r: number): Matrix {\n    Matrix.rotateAxisAngle(this, axis, r, this);\n    return this;\n  }\n\n  /**\n   * Scale this matrix by a given vector.\n   * @param s - The given vector\n   * @returns This matrix after scale\n   */\n  scale(s: Vector3): Matrix {\n    Matrix.scale(this, s, this);\n    return this;\n  }\n\n  /**\n   * Translate this matrix by a given vector.\n   * @param v - The given vector\n   * @returns This matrix after translate\n   */\n  translate(v: Vector3): Matrix {\n    Matrix.translate(this, v, this);\n    return this;\n  }\n\n  /**\n   * Calculate the transpose of this matrix.\n   * @returns This matrix after transpose\n   */\n  transpose(): Matrix {\n    Matrix.transpose(this, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this matrix.\n   * @returns A clone of this matrix\n   */\n  clone(): Matrix {\n    const e = this.elements;\n    let ret = new Matrix(\n      e[0],\n      e[1],\n      e[2],\n      e[3],\n      e[4],\n      e[5],\n      e[6],\n      e[7],\n      e[8],\n      e[9],\n      e[10],\n      e[11],\n      e[12],\n      e[13],\n      e[14],\n      e[15]\n    );\n    return ret;\n  }\n\n  /**\n   * Copy this matrix from the specified matrix.\n   * @param source - The specified matrix\n   * @returns This matrix\n   */\n  copyFrom(source: Matrix): Matrix {\n    const e = this.elements;\n    const se = source.elements;\n\n    e[0] = se[0];\n    e[1] = se[1];\n    e[2] = se[2];\n    e[3] = se[3];\n\n    e[4] = se[4];\n    e[5] = se[5];\n    e[6] = se[6];\n    e[7] = se[7];\n\n    e[8] = se[8];\n    e[9] = se[9];\n    e[10] = se[10];\n    e[11] = se[11];\n\n    e[12] = se[12];\n    e[13] = se[13];\n    e[14] = se[14];\n    e[15] = se[15];\n\n    return this;\n  }\n\n  /**\n   * Copy the value of this matrix from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This matrix\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Matrix {\n    const srce = this.elements;\n    for (let i = 0; i < 16; i++) {\n      srce[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * Copy the value of this matrix to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0): void {\n    const e = this.elements;\n\n    out[outOffset] = e[0];\n    out[outOffset + 1] = e[1];\n    out[outOffset + 2] = e[2];\n    out[outOffset + 3] = e[3];\n    out[outOffset + 4] = e[4];\n    out[outOffset + 5] = e[5];\n    out[outOffset + 6] = e[6];\n    out[outOffset + 7] = e[7];\n    out[outOffset + 8] = e[8];\n    out[outOffset + 9] = e[9];\n    out[outOffset + 10] = e[10];\n    out[outOffset + 11] = e[11];\n    out[outOffset + 12] = e[12];\n    out[outOffset + 13] = e[13];\n    out[outOffset + 14] = e[14];\n    out[outOffset + 15] = e[15];\n  }\n}\n", "import { BoundingBox } from \"./BoundingBox\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { CollisionUtil } from \"./CollisionUtil\";\nimport { Plane } from \"./Plane\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a ray with an origin and a direction in 3D space.\n */\nexport class Ray {\n  /** The origin of the ray. */\n  readonly origin: Vector3 = new Vector3();\n  /** The normalized direction of the ray. */\n  readonly direction: Vector3 = new Vector3();\n\n  /**\n   * Constructor of Ray.\n   * @param origin - The origin vector\n   * @param direction - The direction vector\n   */\n  constructor(origin: Vector3 = null, direction: Vector3 = null) {\n    origin && this.origin.copyFrom(origin);\n    direction && this.direction.copyFrom(direction);\n  }\n\n  /**\n   * Check if this ray intersects the specified plane.\n   * @param plane - The specified plane\n   * @returns The distance from this ray to the specified plane if intersecting, -1 otherwise\n   */\n  intersectPlane(plane: Plane): number {\n    return CollisionUtil.intersectsRayAndPlane(this, plane);\n  }\n\n  /**\n   * Check if this ray intersects the specified sphere.\n   * @param sphere - The specified sphere\n   * @returns The distance from this ray to the specified sphere if intersecting, -1 otherwise\n   */\n  intersectSphere(sphere: BoundingSphere): number {\n    return CollisionUtil.intersectsRayAndSphere(this, sphere);\n  }\n\n  /**\n   * Check if this ray intersects the specified box (AABB).\n   * @param box - The specified box\n   * @returns The distance from this ray to the specified box if intersecting, -1 otherwise\n   */\n  intersectBox(box: BoundingBox): number {\n    return CollisionUtil.intersectsRayAndBox(this, box);\n  }\n\n  /**\n   * The coordinates of the specified distance from the origin in the ray direction.\n   * @param distance - The specified distance\n   * @param out - The coordinates as an output parameter\n   * @returns The out\n   */\n  getPoint(distance: number, out: Vector3): Vector3 {\n    Vector3.scale(this.direction, distance, out);\n    return out.add(this.origin);\n  }\n}\n", "import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\n\n/**\n * Describes a 2D-vector.\n */\nexport class Vector2 implements IClone<Vector2>, ICopy<Vector2Like, Vector2> {\n  /** @internal */\n  static readonly _zero = new Vector2(0.0, 0.0);\n  /** @internal */\n  static readonly _one = new Vector2(1.0, 1.0);\n\n  /**\n   * Determines the sum of two vectors.\n   * @param left - The first vector to add\n   * @param right - The second vector to add\n   * @param out - The sum of two vectors\n   */\n  static add(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = left._x + right._x;\n    out._y = left._y + right._y;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the difference between two vectors.\n   * @param left - The first vector to subtract\n   * @param right - The second vector to subtract\n   * @param out - The difference between two vectors\n   */\n  static subtract(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = left._x - right._x;\n    out._y = left._y - right._y;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the product of two vectors.\n   * @param left - The first vector to multiply\n   * @param right - The second vector to multiply\n   * @param out - The product of two vectors\n   */\n  static multiply(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = left._x * right._x;\n    out._y = left._y * right._y;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the divisor of two vectors.\n   * @param left - The first vector to divide\n   * @param right - The second vector to divide\n   * @param out - The divisor of two vectors\n   */\n  static divide(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = left._x / right._x;\n    out._y = left._y / right._y;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the dot product of two vectors.\n   * @param left - The first vector to dot\n   * @param right - The second vector to dot\n   * @returns The dot product of two vectors\n   */\n  static dot(left: Vector2, right: Vector2): number {\n    return left._x * right._x + left._y * right._y;\n  }\n\n  /**\n   * Determines the distance of two vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @returns The distance of two vectors\n   */\n  static distance(left: Vector2, right: Vector2): number {\n    const x = right._x - left._x;\n    const y = right._y - left._y;\n    return Math.sqrt(x * x + y * y);\n  }\n\n  /**\n   * Determines the squared distance of two vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @returns The squared distance of two vectors\n   */\n  static distanceSquared(left: Vector2, right: Vector2): number {\n    const x = right._x - left._x;\n    const y = right._y - left._y;\n    return x * x + y * y;\n  }\n\n  /**\n   * Determines whether the specified vectors are equals.\n   * @param left - The first vector to compare\n   * @param right - The second vector to compare\n   * @returns True if the specified vectors are equals, false otherwise\n   */\n  static equals(left: Vector2, right: Vector2): boolean {\n    return MathUtil.equals(left._x, right._x) && MathUtil.equals(left._y, right._y);\n  }\n\n  /**\n   * Performs a linear interpolation between two vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param t - The blend amount where 0 returns left and 1 right\n   * @param out - The result of linear blending between two vectors\n   */\n  static lerp(left: Vector2, right: Vector2, t: number, out: Vector2): void {\n    const { _x, _y } = left;\n    out._x = _x + (right._x - _x) * t;\n    out._y = _y + (right._y - _y) * t;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the largest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the largest components of the specified vectors\n   */\n  static max(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = Math.max(left._x, right._x);\n    out._y = Math.max(left._y, right._y);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the smallest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the smallest components of the specified vectors\n   */\n  static min(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = Math.min(left._x, right._x);\n    out._y = Math.min(left._y, right._y);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Reverses the direction of a given vector.\n   * @param left - The vector to negate\n   * @param out - The vector facing in the opposite direction\n   */\n  static negate(left: Vector2, out: Vector2): void {\n    out._x = -left._x;\n    out._y = -left._y;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Converts the vector into a unit vector.\n   * @param left - The vector to normalize\n   * @param out - The normalized vector\n   */\n  static normalize(left: Vector2, out: Vector2): void {\n    const { _x, _y } = left;\n    let len = Math.sqrt(_x * _x + _y * _y);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out._x = _x * len;\n      out._y = _y * len;\n      out._onValueChanged && out._onValueChanged();\n    }\n  }\n\n  /**\n   * Scale a vector by the given value.\n   * @param left - The vector to scale\n   * @param s - The amount by which to scale the vector\n   * @param out - The scaled vector\n   */\n  static scale(left: Vector2, s: number, out: Vector2): void {\n    out._x = left._x * s;\n    out._y = left._y * s;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /** @internal */\n  _x: number;\n  /** @internal */\n  _y: number;\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  /**\n   * The x component of the vector.\n   */\n  public get x(): number {\n    return this._x;\n  }\n\n  public set x(value: number) {\n    this._x = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The y component of the vector.\n   */\n  public get y(): number {\n    return this._y;\n  }\n\n  public set y(value: number) {\n    this._y = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of Vector2.\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   */\n  constructor(x: number = 0, y: number = 0) {\n    this._x = x;\n    this._y = y;\n  }\n\n  /**\n   * Set the value of this vector.\n   * @param x - The x component of the vector\n   * @param y - The y component of the vector\n   * @returns This vector\n   */\n  set(x: number, y: number): Vector2 {\n    this._x = x;\n    this._y = y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the sum of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  add(right: Vector2): Vector2 {\n    this._x += right._x;\n    this._y += right._y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the difference of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  subtract(right: Vector2): Vector2 {\n    this._x -= right._x;\n    this._y -= right._y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the product of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  multiply(right: Vector2): Vector2 {\n    this._x *= right._x;\n    this._y *= right._y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the divisor of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  divide(right: Vector2): Vector2 {\n    this._x /= right._x;\n    this._y /= right._y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Calculate the length of this vector.\n   * @returns The length of this vector\n   */\n  length(): number {\n    const { _x, _y } = this;\n    return Math.sqrt(_x * _x + _y * _y);\n  }\n\n  /**\n   * Calculate the squared length of this vector.\n   * @returns The squared length of this vector\n   */\n  lengthSquared(): number {\n    const { _x, _y } = this;\n    return _x * _x + _y * _y;\n  }\n\n  /**\n   * Reverses the direction of this vector.\n   * @returns This vector\n   */\n  negate(): Vector2 {\n    this._x = -this._x;\n    this._y = -this._y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Converts this vector into a unit vector.\n   * @returns This vector\n   */\n  normalize(): Vector2 {\n    Vector2.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Scale this vector by the given value.\n   * @param s - The amount by which to scale the vector\n   * @returns This vector\n   */\n  scale(s: number): Vector2 {\n    this._x *= s;\n    this._y *= s;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Creates a clone of this vector.\n   * @returns A clone of this vector\n   */\n  clone(): Vector2 {\n    return new Vector2(this._x, this._y);\n  }\n\n  /**\n   * Copy from vector2 like object.\n   * @param source - Vector2 like object\n   * @returns This vector\n   */\n  copyFrom(source: Vector2Like): Vector2 {\n    this._x = source.x;\n    this._y = source.y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this vector from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This vector\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Vector2 {\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this vector to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this._x;\n    out[outOffset + 1] = this._y;\n  }\n\n  /**\n   * Serialize this vector to a JSON representation.\n   * @returns A JSON representation of this vector\n   */\n  toJSON(): Vector2Like {\n    return {\n      x: this._x,\n      y: this._y\n    };\n  }\n}\n\ninterface Vector2Like {\n  /** {@inheritDoc Vector2.x} */\n  x: number;\n  /** {@inheritDoc Vector2.y} */\n  y: number;\n}\n", "import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\n\n/**\n * Describes a 4D-vector.\n */\nexport class Vector4 implements IClone<Vector4>, ICopy<Vector4Like, Vector4> {\n  /** @internal */\n  static readonly _zero = new Vector4(0.0, 0.0, 0.0, 0.0);\n  /** @internal */\n  static readonly _one = new Vector4(1.0, 1.0, 1.0, 1.0);\n\n  /**\n   * Determines the sum of two vectors.\n   * @param left - The first vector to add\n   * @param right - The second vector to add\n   * @param out - The sum of two vectors\n   */\n  static add(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = left._x + right._x;\n    out._y = left._y + right._y;\n    out._z = left._z + right._z;\n    out._w = left._w + right._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the difference between two vectors.\n   * @param left - The first vector to subtract\n   * @param right - The second vector to subtract\n   * @param out - The difference between two vectors\n   */\n  static subtract(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = left._x - right._x;\n    out._y = left._y - right._y;\n    out._z = left._z - right._z;\n    out._w = left._w - right._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the product of two vectors.\n   * @param left - The first vector to multiply\n   * @param right - The second vector to multiply\n   * @param out - The product of two vectors\n   */\n  static multiply(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = left._x * right._x;\n    out._y = left._y * right._y;\n    out._z = left._z * right._z;\n    out._w = left._w * right._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the divisor of two vectors.\n   * @param left - The first vector to divide\n   * @param right - The second vector to divide\n   * @param out - The divisor of two vectors\n   */\n  static divide(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = left._x / right._x;\n    out._y = left._y / right._y;\n    out._z = left._z / right._z;\n    out._w = left._w / right._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the dot product of two vectors.\n   * @param left - The first vector to dot\n   * @param right - The second vector to dot\n   * @returns The dot product of two vectors\n   */\n  static dot(left: Vector4, right: Vector4): number {\n    return left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;\n  }\n\n  /**\n   * Determines the distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The distance of two vectors\n   */\n  static distance(a: Vector4, b: Vector4): number {\n    const x = b._x - a._x;\n    const y = b._y - a._y;\n    const z = b._z - a._z;\n    const w = b._w - a._w;\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * Determines the squared distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The squared distance of two vectors\n   */\n  static distanceSquared(a: Vector4, b: Vector4): number {\n    const x = b._x - a._x;\n    const y = b._y - a._y;\n    const z = b._z - a._z;\n    const w = b._w - a._w;\n    return x * x + y * y + z * z + w * w;\n  }\n\n  /**\n   * Determines whether the specified vectors are equals.\n   * @param left - The first vector to compare\n   * @param right - The second vector to compare\n   * @returns True if the specified vectors are equals, false otherwise\n   */\n  static equals(left: Vector4, right: Vector4): boolean {\n    return (\n      MathUtil.equals(left._x, right._x) &&\n      MathUtil.equals(left._y, right._y) &&\n      MathUtil.equals(left._z, right._z) &&\n      MathUtil.equals(left._w, right._w)\n    );\n  }\n\n  /**\n   * Performs a linear interpolation between two vectors.\n   * @param start - The first vector\n   * @param end - The second vector\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two vectors\n   */\n  static lerp(start: Vector4, end: Vector4, t: number, out: Vector4): void {\n    const { _x, _y, _z, _w } = start;\n    out._x = _x + (end._x - _x) * t;\n    out._y = _y + (end._y - _y) * t;\n    out._z = _z + (end._z - _z) * t;\n    out._w = _w + (end._w - _w) * t;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the largest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the largest components of the specified vectors\n   */\n  static max(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = Math.max(left._x, right._x);\n    out._y = Math.max(left._y, right._y);\n    out._z = Math.max(left._z, right._z);\n    out._w = Math.max(left._w, right._w);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the smallest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the smallest components of the specified vectors\n   */\n  static min(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = Math.min(left._x, right._x);\n    out._y = Math.min(left._y, right._y);\n    out._z = Math.min(left._z, right._z);\n    out._w = Math.min(left._w, right._w);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Reverses the direction of a given vector.\n   * @param a - The vector to negate\n   * @param out - The vector facing in the opposite direction\n   */\n  static negate(a: Vector4, out: Vector4): void {\n    out._x = -a._x;\n    out._y = -a._y;\n    out._z = -a._z;\n    out._w = -a._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Converts the vector into a unit vector.\n   * @param a - The vector to normalize\n   * @param out - The normalized vector\n   */\n  static normalize(a: Vector4, out: Vector4): void {\n    const { _x, _y, _z, _w } = a;\n    let len = Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out._x = _x * len;\n      out._y = _y * len;\n      out._z = _z * len;\n      out._w = _w * len;\n      out._onValueChanged && out._onValueChanged();\n    }\n  }\n\n  /**\n   * Scale a vector by the given value.\n   * @param a - The vector to scale\n   * @param s - The amount by which to scale the vector\n   * @param out - The scaled vector\n   */\n  static scale(a: Vector4, s: number, out: Vector4): void {\n    out._x = a._x * s;\n    out._y = a._y * s;\n    out._z = a._z * s;\n    out._w = a._w * s;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a transformation using the given 4x4 matrix.\n   * @param v - The vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed vector3\n   */\n  static transform(v: Vector4, m: Matrix, out: Vector4): void {\n    const { _x, _y, _z, _w } = v;\n    const e = m.elements;\n    out._x = _x * e[0] + _y * e[4] + _z * e[8] + _w * e[12];\n    out._y = _x * e[1] + _y * e[5] + _z * e[9] + _w * e[13];\n    out._z = _x * e[2] + _y * e[6] + _z * e[10] + _w * e[14];\n    out._w = _x * e[3] + _y * e[7] + _z * e[11] + _w * e[15];\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a transformation using the given quaternion.\n   * @param v - The vector to transform\n   * @param q - The transform quaternion\n   * @param out - The transformed vector\n   */\n  static transformByQuat(v: Vector4, q: Quaternion, out: Vector4): void {\n    const { _x: x, _y: y, _z: z, _w: w } = v;\n    const qx = q._x;\n    const qy = q._y;\n    const qz = q._z;\n    const qw = q._w;\n\n    // calculate quat * vec\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out._x = ix * qw - iw * qx - iy * qz + iz * qy;\n    out._y = iy * qw - iw * qy - iz * qx + ix * qz;\n    out._z = iz * qw - iw * qz - ix * qy + iy * qx;\n    out._w = w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /** @internal */\n  _x: number;\n  /** @internal */\n  _y: number;\n  /** @internal */\n  _z: number;\n  /** @internal */\n  _w: number;\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  /**\n   * The x component of the vector.\n   */\n  public get x(): number {\n    return this._x;\n  }\n\n  public set x(value: number) {\n    this._x = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The y component of the vector.\n   */\n  public get y(): number {\n    return this._y;\n  }\n\n  public set y(value: number) {\n    this._y = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The z component of the vector.\n   */\n  public get z(): number {\n    return this._z;\n  }\n\n  public set z(value: number) {\n    this._z = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The w component of the vector.\n   */\n  public get w(): number {\n    return this._w;\n  }\n\n  public set w(value: number) {\n    this._w = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of Vector4.\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   * @param z - The z component of the vector, default 0\n   * @param w - The w component of the vector, default 0\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n  }\n\n  /**\n   * Set the value of this vector.\n   * @param x - The x component of the vector\n   * @param y - The y component of the vector\n   * @param z - The z component of the vector\n   * @param w - The w component of the vector\n   * @returns This vector\n   */\n  set(x: number, y: number, z: number, w: number): Vector4 {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the sum of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  add(right: Vector4): Vector4 {\n    this._x += right._x;\n    this._y += right._y;\n    this._z += right._z;\n    this._w += right._w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the difference of this vector and the specified vector.\n   * @param right - the specified vector\n   * @returns This vector\n   */\n  subtract(right: Vector4): Vector4 {\n    this._x -= right._x;\n    this._y -= right._y;\n    this._z -= right._z;\n    this._w -= right._w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the product of this vector and the specified vector.\n   * @param right - the specified vector\n   * @returns This vector\n   */\n  multiply(right: Vector4): Vector4 {\n    this._x *= right._x;\n    this._y *= right._y;\n    this._z *= right._z;\n    this._w *= right._w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the divisor of this vector and the specified vector.\n   * @param right - the specified vector\n   * @returns This vector\n   */\n  divide(right: Vector4): Vector4 {\n    this._x /= right._x;\n    this._y /= right._y;\n    this._z /= right._z;\n    this._w /= right._w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Calculate the length of this vector.\n   * @returns The length of this vector\n   */\n  length(): number {\n    const { _x, _y, _z, _w } = this;\n    return Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);\n  }\n\n  /**\n   * Calculate the squared length of this vector.\n   * @returns The squared length of this vector\n   */\n  lengthSquared(): number {\n    const { _x, _y, _z, _w } = this;\n    return _x * _x + _y * _y + _z * _z + _w * _w;\n  }\n\n  /**\n   * Reverses the direction of this vector.\n   * @returns This vector\n   */\n  negate(): Vector4 {\n    this._x = -this._x;\n    this._y = -this._y;\n    this._z = -this._z;\n    this._w = -this._w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Converts this vector into a unit vector.\n   * @returns This vector\n   */\n  normalize(): Vector4 {\n    Vector4.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Scale this vector by the given value.\n   * @param s - The amount by which to scale the vector\n   * @returns This vector\n   */\n  scale(s: number): Vector4 {\n    this._x *= s;\n    this._y *= s;\n    this._z *= s;\n    this._w *= s;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Creates a clone of this vector.\n   * @returns A clone of this vector\n   */\n  clone(): Vector4 {\n    let ret = new Vector4(this._x, this._y, this._z, this._w);\n    return ret;\n  }\n\n  /**\n   * Copy from vector3 like object.\n   * @param source - Vector3 like object.\n   * @returns This vector\n   */\n  copyFrom(source: Vector4Like): Vector4 {\n    this._x = source.x;\n    this._y = source.y;\n    this._z = source.z;\n    this._w = source.w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this vector by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This vector\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Vector4 {\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._w = array[offset + 3];\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this vector to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this._x;\n    out[outOffset + 1] = this._y;\n    out[outOffset + 2] = this._z;\n    out[outOffset + 3] = this._w;\n  }\n\n  /**\n   * Serialize this vector to a JSON representation.\n   * @returns A JSON representation of this vector\n   */\n  toJSON(): Vector4Like {\n    return {\n      x: this._x,\n      y: this._y,\n      z: this._z,\n      w: this._w\n    };\n  }\n}\n\ninterface Vector4Like {\n  /** {@inheritDoc Vector4.x} */\n  x: number;\n  /** {@inheritDoc Vector4.y} */\n  y: number;\n  /** {@inheritDoc Vector4.z} */\n  z: number;\n  /** {@inheritDoc Vector4.w} */\n  w: number;\n}\n", "import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\n\n/**\n * Describes a color in the from of RGBA (in order: R, G, B, A).\n */\nexport class Color implements IClone<Color>, ICopy<ColorLike, Color> {\n  /**\n   * Modify a value from the gamma space to the linear space.\n   * @param value - The value in gamma space\n   * @returns The value in linear space\n   */\n  static gammaToLinearSpace(value: number): number {\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_sRGB.txt\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_decode.txt\n\n    if (value <= 0.0) return 0.0;\n    else if (value <= 0.04045) return value / 12.92;\n    else if (value < 1.0) return Math.pow((value + 0.055) / 1.055, 2.4);\n    else return Math.pow(value, 2.4);\n  }\n\n  /**\n   * Modify a value from the linear space to the gamma space.\n   * @param value - The value in linear space\n   * @returns The value in gamma space\n   */\n  static linearToGammaSpace(value: number): number {\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_sRGB.txt\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_decode.txt\n\n    if (value <= 0.0) return 0.0;\n    else if (value < 0.0031308) return 12.92 * value;\n    else if (value < 1.0) return 1.055 * Math.pow(value, 0.41666) - 0.055;\n    else return Math.pow(value, 0.41666);\n  }\n\n  /**\n   * Determines whether the specified colors are equals.\n   * @param left - The first color to compare\n   * @param right - The second color to compare\n   * @returns True if the specified colors are equals, false otherwise\n   */\n  static equals(left: Color, right: Color): boolean {\n    return (\n      MathUtil.equals(left._r, right._r) &&\n      MathUtil.equals(left._g, right._g) &&\n      MathUtil.equals(left._b, right._b) &&\n      MathUtil.equals(left._a, right._a)\n    );\n  }\n\n  /**\n   * Determines the sum of two colors.\n   * @param left - The first color to add\n   * @param right - The second color to add\n   * @param out - The sum of two colors\n   * @returns The added color\n   */\n  static add(left: Color, right: Color, out: Color): Color {\n    out._r = left._r + right._r;\n    out._g = left._g + right._g;\n    out._b = left._b + right._b;\n    out._a = left._a + right._a;\n    out._onValueChanged && out._onValueChanged();\n\n    return out;\n  }\n\n  /**\n   * Determines the difference between two colors.\n   * @param left - The first color to subtract\n   * @param right - The second color to subtract\n   * @param out - The difference between two colors\n   */\n  static subtract(left: Color, right: Color, out: Color): void {\n    out._r = left._r - right._r;\n    out._g = left._g - right._g;\n    out._b = left._b - right._b;\n    out._a = left._a - right._a;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Scale a color by the given value.\n   * @param left - The color to scale\n   * @param s - The amount by which to scale the color\n   * @param out - The scaled color\n   * @returns The scaled color\n   */\n  static scale(left: Color, s: number, out: Color): Color {\n    out._r = left._r * s;\n    out._g = left._g * s;\n    out._b = left._b * s;\n    out._a = left._a * s;\n    out._onValueChanged && out._onValueChanged();\n\n    return out;\n  }\n\n  /**\n   * Performs a linear interpolation between two color.\n   * @param start - The first color\n   * @param end - The second color\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two color\n   */\n  static lerp(start: Color, end: Color, t: number, out: Color): Color {\n    const { _r, _g, _b, _a } = start;\n    out._r = _r + (end._r - _r) * t;\n    out._g = _g + (end._g - _g) * t;\n    out._b = _b + (end._b - _b) * t;\n    out._a = _a + (end._a - _a) * t;\n    out._onValueChanged && out._onValueChanged();\n\n    return out;\n  }\n\n  /** @internal */\n  _r: number;\n  /** @internal */\n  _g: number;\n  /** @internal */\n  _b: number;\n  /** @internal */\n  _a: number;\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  /**\n   * The red component of the color, 0~1.\n   */\n  public get r(): number {\n    return this._r;\n  }\n\n  public set r(value: number) {\n    this._r = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The green component of the color, 0~1.\n   */\n  public get g(): number {\n    return this._g;\n  }\n\n  public set g(value: number) {\n    this._g = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The blue component of the color, 0~1.\n   */\n  public get b(): number {\n    return this._b;\n  }\n\n  public set b(value: number) {\n    this._b = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The alpha component of the color, 0~1.\n   */\n  public get a(): number {\n    return this._a;\n  }\n\n  public set a(value: number) {\n    this._a = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of Color.\n   * @param r - The red component of the color\n   * @param g - The green component of the color\n   * @param b - The blue component of the color\n   * @param a - The alpha component of the color\n   */\n  constructor(r: number = 1, g: number = 1, b: number = 1, a: number = 1) {\n    this._r = r;\n    this._g = g;\n    this._b = b;\n    this._a = a;\n  }\n\n  /**\n   * Set the value of this color.\n   * @param r - The red component of the color\n   * @param g - The green component of the color\n   * @param b - The blue component of the color\n   * @param a - The alpha component of the color\n   * @returns This color.\n   */\n  set(r: number, g: number, b: number, a: number): Color {\n    this._r = r;\n    this._g = g;\n    this._b = b;\n    this._a = a;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the sum of this color and the specified color.\n   * @param color - The specified color\n   * @returns The added color\n   */\n  add(color: Color): Color {\n    this._r += color._r;\n    this._g += color._g;\n    this._b += color._b;\n    this._a += color._a;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Scale this color by the given value.\n   * @param s - The amount by which to scale the color\n   * @returns The scaled color\n   */\n  scale(s: number): Color {\n    this._r *= s;\n    this._g *= s;\n    this._b *= s;\n    this._a *= s;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Creates a clone of this color.\n   * @returns A clone of this color\n   */\n  clone(): Color {\n    const ret = new Color(this._r, this._g, this._b, this._a);\n    return ret;\n  }\n\n  /**\n   * Copy from color like object.\n   * @param source - Color like object.\n   * @returns This vector\n   */\n  copyFrom(source: ColorLike): Color {\n    this._r = source.r;\n    this._g = source.g;\n    this._b = source.b;\n    this._a = source.a;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Modify components (r, g, b) of this color from gamma space to linear space.\n   * @param out - The color in linear space\n   * @returns The color in linear space\n   */\n  toLinear(out: Color): Color {\n    out._r = Color.gammaToLinearSpace(this._r);\n    out._g = Color.gammaToLinearSpace(this._g);\n    out._b = Color.gammaToLinearSpace(this._b);\n    this._onValueChanged && this._onValueChanged();\n    return out;\n  }\n\n  /**\n   * Modify components (r, g, b) of this color from linear space to gamma space.\n   * @param out - The color in gamma space\n   * @returns The color in gamma space\n   */\n  toGamma(out: Color): Color {\n    out._r = Color.linearToGammaSpace(this._r);\n    out._g = Color.linearToGammaSpace(this._g);\n    out._b = Color.linearToGammaSpace(this._b);\n    this._onValueChanged && this._onValueChanged();\n    return out;\n  }\n\n  /**\n   * Gets the brightness.\n   * @returns The Hue-Saturation-Brightness (HSB) saturation for this\n   */\n  getBrightness(): number {\n    const r = this.r;\n    const g = this.g;\n    const b = this.b;\n\n    let max = r;\n    let min = r;\n    if (g > max) max = g;\n    if (b > max) max = b;\n\n    if (g < min) min = g;\n    if (b < min) min = b;\n\n    return (max + min) / 2;\n  }\n\n  /**\n   * Serialize this color to a JSON representation.\n   * @return A JSON representation of this color\n   */\n  toJSON(): ColorLike {\n    return {\n      r: this._r,\n      g: this._g,\n      b: this._b,\n      a: this._a\n    };\n  }\n}\n\ninterface ColorLike {\n  /** {@inheritDoc Color._r} */\n  r: number;\n  /** {@inheritDoc Color._g} */\n  g: number;\n  /** {@inheritDoc Color._b} */\n  b: number;\n  /** {@inheritDoc Color._a} */\n  a: number;\n}\n", "import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\n\n// A 2d rectangle defined by x and y position, width and height.\nexport class Rect implements IClone<Rect>, ICopy<Rect, Rect> {\n  /** The x coordinate of the rectangle. */\n  public x: number;\n  /** The y coordinate of the rectangle. */\n  public y: number;\n  /** The width of the rectangle, measured from the x position. */\n  public width: number;\n  /** The height of the rectangle, measured from the y position. */\n  public height: number;\n\n  /**\n   * Constructor of Rect.\n   * @param x - The x coordinate of the rectangle, default 0\n   * @param y - The y coordinate of the rectangle, default 0\n   * @param width - The width of the rectangle, measured from the x position, default 0\n   * @param height - The height of the rectangle, measured from the y position, default 0\n   */\n  constructor(x: number = 0, y: number = 0, width: number = 0, height: number = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Set the value of this rectangle.\n   * @param x - The x coordinate of the rectangle\n   * @param y - The y coordinate of the rectangle\n   * @param width - The width of the rectangle, measured from the x position\n   * @param height - The height of the rectangle, measured from the y position\n   * @returns This rectangle\n   */\n  set(x: number, y: number, width: number, height: number): Rect {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  /**\n   * Creates a clone of this rect.\n   * @returns A clone of this rect\n   */\n  clone(): Rect {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n\n  /**\n   * Copy this rect from the specified rect.\n   * @param source - The specified rect\n   * @returns This rect\n   */\n  copyFrom(source: Rect): Rect {\n    this.x = source.x;\n    this.y = source.y;\n    this.width = source.width;\n    this.height = source.height;\n    return this;\n  }\n}\n", "import { Color } from \"./Color\";\nimport { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Use SH3 to represent irradiance environment maps efficiently, allowing for interactive rendering of diffuse objects under distant illumination.\n * @remarks\n * https://graphics.stanford.edu/papers/envmap/envmap.pdf\n * http://www.ppsloan.org/publications/StupidSH36.pdf\n * https://google.github.io/filament/Filament.md.html#annex/sphericalharmonics\n */\nexport class SphericalHarmonics3\n  implements IClone<SphericalHarmonics3>, ICopy<SphericalHarmonics3, SphericalHarmonics3>\n{\n  /** The coefficients of SphericalHarmonics3. */\n  coefficients: Float32Array = new Float32Array(27);\n\n  /**\n   * Add light to SphericalHarmonics3.\n   * @param direction - Light direction\n   * @param color - Light color\n   * @param deltaSolidAngle - The delta solid angle of the light\n   */\n  addLight(direction: Vector3, color: Color, deltaSolidAngle: number): void {\n    /**\n     * Implements `EvalSHBasis` from [Projection from Cube maps] in http://www.ppsloan.org/publications/StupidSH36.pdf.\n     *\n     * Basis constants\n     * 0: Math.sqrt(1/(4 * Math.PI))\n     *\n     * 1: -Math.sqrt(3 / (4 * Math.PI))\n     * 2: Math.sqrt(3 / (4 * Math.PI))\n     * 3: -Math.sqrt(3 / (4 * Math.PI))\n     *\n     * 4: Math.sqrt(15 / (4 * Math.PI))\n     * 5: -Math.sqrt(15 / (4 * Math.PI))\n     * 6: Math.sqrt(5 / (16 * Math.PI))\n     * 7: -Math.sqrt(15 / (4 * Math.PI)）\n     * 8: Math.sqrt(15 / (16 * Math.PI))\n     */\n\n    color.scale(deltaSolidAngle);\n\n    const coe = this.coefficients;\n\n    const { _x: x, _y: y, _z: z } = direction;\n    const { r, g, b } = color;\n\n    const bv0 = 0.282095; // basis0 = 0.886227\n    const bv1 = -0.488603 * y; // basis1 = -0.488603\n    const bv2 = 0.488603 * z; // basis2 = 0.488603\n    const bv3 = -0.488603 * x; // basis3 = -0.488603\n    const bv4 = 1.092548 * (x * y); // basis4 = 1.092548\n    const bv5 = -1.092548 * (y * z); // basis5 = -1.092548\n    const bv6 = 0.315392 * (3 * z * z - 1); // basis6 = 0.315392\n    const bv7 = -1.092548 * (x * z); // basis7 = -1.092548\n    const bv8 = 0.546274 * (x * x - y * y); // basis8 = 0.546274\n\n    (coe[0] += r * bv0), (coe[1] += g * bv0), (coe[2] += b * bv0);\n\n    (coe[3] += r * bv1), (coe[4] += g * bv1), (coe[5] += b * bv1);\n    (coe[6] += r * bv2), (coe[7] += g * bv2), (coe[8] += b * bv2);\n    (coe[9] += r * bv3), (coe[10] += g * bv3), (coe[11] += b * bv3);\n\n    (coe[12] += r * bv4), (coe[13] += g * bv4), (coe[14] += b * bv4);\n    (coe[15] += r * bv5), (coe[16] += g * bv5), (coe[17] += b * bv5);\n    (coe[18] += r * bv6), (coe[19] += g * bv6), (coe[20] += b * bv6);\n    (coe[21] += r * bv7), (coe[22] += g * bv7), (coe[23] += b * bv7);\n    (coe[24] += r * bv8), (coe[25] += g * bv8), (coe[26] += b * bv8);\n  }\n\n  /**\n   * Evaluates the color for the specified direction.\n   * @param direction - Specified direction\n   * @param out - Out color\n   */\n  evaluate(direction: Vector3, out: Color): Color {\n    /**\n     * Equations based on data from: http://ppsloan.org/publications/StupidSH36.pdf\n     *\n     *\n     * Basis constants\n     * 0: Math.sqrt(1/(4 * Math.PI))\n     *\n     * 1: -Math.sqrt(3 / (4 * Math.PI))\n     * 2: Math.sqrt(3 / (4 * Math.PI))\n     * 3: -Math.sqrt(3 / (4 * Math.PI))\n     *\n     * 4: Math.sqrt(15 / (4 * Math.PI)）\n     * 5: -Math.sqrt(15 / (4 * Math.PI))\n     * 6: Math.sqrt(5 / (16 * Math.PI)）\n     * 7: -Math.sqrt(15 / (4 * Math.PI)）\n     * 8: Math.sqrt(15 / (16 * Math.PI)）\n     *\n     *\n     * Convolution kernel\n     * 0: Math.PI\n     * 1: (2 * Math.PI) / 3\n     * 2: Math.PI / 4\n     */\n\n    const coe = this.coefficients;\n    const { _x: x, _y: y, _z: z } = direction;\n\n    const bv0 = 0.886227; // kernel0 * basis0 = 0.886227\n    const bv1 = -1.023327 * y; // kernel1 * basis1 = -1.023327\n    const bv2 = 1.023327 * z; // kernel1 * basis2 = 1.023327\n    const bv3 = -1.023327 * x; // kernel1 * basis3 = -1.023327\n    const bv4 = 0.858086 * y * x; // kernel2 * basis4 = 0.858086\n    const bv5 = -0.858086 * y * z; // kernel2 * basis5 = -0.858086\n    const bv6 = 0.247708 * (3 * z * z - 1); // kernel2 * basis6 = 0.247708\n    const bv7 = -0.858086 * z * x; // kernel2 * basis7 = -0.858086\n    const bv8 = 0.429042 * (x * x - y * y); // kernel2 * basis8 = 0.429042\n\n    // l0\n    let r = coe[0] * bv0;\n    let g = coe[1] * bv0;\n    let b = coe[2] * bv0;\n\n    // l1\n    r += coe[3] * bv1 + coe[6] * bv2 + coe[9] * bv3;\n    g += coe[4] * bv1 + coe[7] * bv2 + coe[10] * bv3;\n    b += coe[5] * bv1 + coe[8] * bv2 + coe[11] * bv3;\n\n    // l2\n    r += coe[12] * bv4 + coe[15] * bv5 + coe[18] * bv6 + coe[21] * bv7 + coe[24] * bv8;\n    g += coe[13] * bv4 + coe[16] * bv5 + coe[19] * bv6 + coe[22] * bv7 + coe[25] * bv8;\n    b += coe[14] * bv4 + coe[17] * bv5 + coe[20] * bv6 + coe[23] * bv7 + coe[26] * bv8;\n\n    out.set(r, g, b, 1.0);\n    return out;\n  }\n\n  /**\n   * Scale the coefficients.\n   * @param s - The amount by which to scale the SphericalHarmonics3\n   */\n  scale(s: number): void {\n    const src = this.coefficients;\n\n    (src[0] *= s), (src[1] *= s), (src[2] *= s);\n    (src[3] *= s), (src[4] *= s), (src[5] *= s);\n    (src[6] *= s), (src[7] *= s), (src[8] *= s);\n    (src[9] *= s), (src[10] *= s), (src[11] *= s);\n    (src[12] *= s), (src[13] *= s), (src[14] *= s);\n    (src[15] *= s), (src[16] *= s), (src[17] *= s);\n    (src[18] *= s), (src[19] *= s), (src[20] *= s);\n    (src[21] *= s), (src[22] *= s), (src[23] *= s);\n    (src[24] *= s), (src[25] *= s), (src[26] *= s);\n  }\n\n  /**\n   * Creates a clone of this SphericalHarmonics3.\n   * @returns A clone of this SphericalHarmonics3\n   */\n  clone(): SphericalHarmonics3 {\n    const sh = new SphericalHarmonics3();\n    sh.copyFrom(this);\n    return sh;\n  }\n\n  /**\n   * Copy this SphericalHarmonics3 from the specified SphericalHarmonics3.\n   * @param source - The specified SphericalHarmonics3\n   * @returns This SphericalHarmonics3\n   */\n  copyFrom(source: SphericalHarmonics3): SphericalHarmonics3 {\n    source.copyToArray(this.coefficients);\n    return this;\n  }\n\n  /**\n   * Copy the value of this spherical harmonics from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): void {\n    const s = this.coefficients;\n\n    (s[0] = array[offset]), (s[1] = array[1 + offset]), (s[2] = array[2 + offset]);\n    (s[3] = array[3 + offset]), (s[4] = array[4 + offset]), (s[5] = array[5 + offset]);\n    (s[6] = array[6 + offset]), (s[7] = array[7 + offset]), (s[8] = array[8 + offset]);\n    (s[9] = array[9 + offset]), (s[10] = array[10 + offset]), (s[11] = array[11 + offset]);\n    (s[12] = array[12 + offset]), (s[13] = array[13 + offset]), (s[14] = array[14 + offset]);\n    (s[15] = array[15 + offset]), (s[16] = array[16 + offset]), (s[17] = array[17 + offset]);\n    (s[18] = array[18 + offset]), (s[19] = array[19 + offset]), (s[20] = array[20 + offset]);\n    (s[21] = array[21 + offset]), (s[22] = array[22 + offset]), (s[23] = array[23 + offset]);\n    (s[24] = array[24 + offset]), (s[25] = array[25 + offset]), (s[26] = array[26 + offset]);\n  }\n\n  /**\n   * Copy the value of this spherical harmonics to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0): void {\n    const s = this.coefficients;\n\n    (out[0 + outOffset] = s[0]), (out[1 + outOffset] = s[1]), (out[2 + outOffset] = s[2]);\n\n    (out[3 + outOffset] = s[3]), (out[4 + outOffset] = s[4]), (out[5 + outOffset] = s[5]);\n    (out[6 + outOffset] = s[6]), (out[7 + outOffset] = s[7]), (out[8 + outOffset] = s[8]);\n    (out[9 + outOffset] = s[9]), (out[10 + outOffset] = s[10]), (out[11 + outOffset] = s[11]);\n\n    (out[12 + outOffset] = s[12]), (out[13 + outOffset] = s[13]), (out[14 + outOffset] = s[14]);\n    (out[15 + outOffset] = s[15]), (out[16 + outOffset] = s[16]), (out[17 + outOffset] = s[17]);\n    (out[18 + outOffset] = s[18]), (out[19 + outOffset] = s[19]), (out[20 + outOffset] = s[20]);\n    (out[21 + outOffset] = s[21]), (out[22 + outOffset] = s[22]), (out[23 + outOffset] = s[23]);\n    (out[24 + outOffset] = s[24]), (out[25 + outOffset] = s[25]), (out[26 + outOffset] = s[26]);\n  }\n}\n", "/**\n * The platform (including operating system and hardware) is running on.\n */\nexport enum Platform {\n  /** Android platform. */\n  Android,\n  /** IPhone platform. */\n  IPhone,\n  /** IPad platform. */\n  IPad,\n  /** Mac platform. */\n  Mac,\n  /** Unknown platform. */\n  Unknown\n}\n", "export function _assert_this_initialized(self) {\n    if (self === void 0) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\n    return self;\n}\nexport { _assert_this_initialized as _ };\n", "function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n", "export function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n", "import { _set_prototype_of } from \"./_set_prototype_of.js\";\n\nexport function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n", "/**\n * Common utility methods for math operations.\n */\nexport class MathUtil {\n  /** The value for which all absolute numbers smaller than are considered equal to zero. */\n  static readonly zeroTolerance: number = 1e-6;\n  /** The conversion factor that radian to degree. */\n  static readonly radToDegreeFactor: number = 180 / Math.PI;\n  /** The conversion factor that degree to radian. */\n  static readonly degreeToRadFactor: number = Math.PI / 180;\n\n  /**\n   * Clamps the specified value.\n   * @param v - The specified value\n   * @param min - The min value\n   * @param max - The max value\n   * @returns The result of clamping a value between min and max\n   */\n  static clamp(v: number, min: number, max: number): number {\n    return Math.max(min, Math.min(max, v));\n  }\n\n  /**\n   * Checks if a and b are almost equals.\n   * The absolute value of the difference between a and b is close to zero.\n   * @param a - The left value to compare\n   * @param b - The right value to compare\n   * @returns True if a almost equal to b, false otherwise\n   */\n  static equals(a: number, b: number): boolean {\n    return Math.abs(a - b) <= MathUtil.zeroTolerance;\n  }\n\n  /**\n   * Determines whether the specified v is pow2.\n   * @param v - The specified v\n   * @returns True if the specified v is pow2, false otherwise\n   */\n  static isPowerOf2(v: number): boolean {\n    return (v & (v - 1)) === 0;\n  }\n\n  /**\n   * Modify the specified r from radian to degree.\n   * @param r - The specified r\n   * @returns The degree value\n   */\n  static radianToDegree(r: number): number {\n    return r * MathUtil.radToDegreeFactor;\n  }\n\n  /**\n   * Modify the specified d from degree to radian.\n   * @param d - The specified d\n   * @returns The radian value\n   */\n  static degreeToRadian(d: number): number {\n    return d * MathUtil.degreeToRadFactor;\n  }\n}\n", "import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\n\n/**\n * Describes a color in the from of RGBA (in order: R, G, B, A).\n */\nexport class Color implements IClone<Color>, ICopy<ColorLike, Color> {\n  /**\n   * Modify a value from the gamma space to the linear space.\n   * @param value - The value in gamma space\n   * @returns The value in linear space\n   */\n  static gammaToLinearSpace(value: number): number {\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_sRGB.txt\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_decode.txt\n\n    if (value <= 0.0) return 0.0;\n    else if (value <= 0.04045) return value / 12.92;\n    else if (value < 1.0) return Math.pow((value + 0.055) / 1.055, 2.4);\n    else return Math.pow(value, 2.4);\n  }\n\n  /**\n   * Modify a value from the linear space to the gamma space.\n   * @param value - The value in linear space\n   * @returns The value in gamma space\n   */\n  static linearToGammaSpace(value: number): number {\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_sRGB.txt\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_decode.txt\n\n    if (value <= 0.0) return 0.0;\n    else if (value < 0.0031308) return 12.92 * value;\n    else if (value < 1.0) return 1.055 * Math.pow(value, 0.41666) - 0.055;\n    else return Math.pow(value, 0.41666);\n  }\n\n  /**\n   * Determines whether the specified colors are equals.\n   * @param left - The first color to compare\n   * @param right - The second color to compare\n   * @returns True if the specified colors are equals, false otherwise\n   */\n  static equals(left: Color, right: Color): boolean {\n    return (\n      MathUtil.equals(left._r, right._r) &&\n      MathUtil.equals(left._g, right._g) &&\n      MathUtil.equals(left._b, right._b) &&\n      MathUtil.equals(left._a, right._a)\n    );\n  }\n\n  /**\n   * Determines the sum of two colors.\n   * @param left - The first color to add\n   * @param right - The second color to add\n   * @param out - The sum of two colors\n   * @returns The added color\n   */\n  static add(left: Color, right: Color, out: Color): Color {\n    out._r = left._r + right._r;\n    out._g = left._g + right._g;\n    out._b = left._b + right._b;\n    out._a = left._a + right._a;\n    out._onValueChanged && out._onValueChanged();\n\n    return out;\n  }\n\n  /**\n   * Determines the difference between two colors.\n   * @param left - The first color to subtract\n   * @param right - The second color to subtract\n   * @param out - The difference between two colors\n   */\n  static subtract(left: Color, right: Color, out: Color): void {\n    out._r = left._r - right._r;\n    out._g = left._g - right._g;\n    out._b = left._b - right._b;\n    out._a = left._a - right._a;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Scale a color by the given value.\n   * @param left - The color to scale\n   * @param s - The amount by which to scale the color\n   * @param out - The scaled color\n   * @returns The scaled color\n   */\n  static scale(left: Color, s: number, out: Color): Color {\n    out._r = left._r * s;\n    out._g = left._g * s;\n    out._b = left._b * s;\n    out._a = left._a * s;\n    out._onValueChanged && out._onValueChanged();\n\n    return out;\n  }\n\n  /**\n   * Performs a linear interpolation between two color.\n   * @param start - The first color\n   * @param end - The second color\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two color\n   */\n  static lerp(start: Color, end: Color, t: number, out: Color): Color {\n    const { _r, _g, _b, _a } = start;\n    out._r = _r + (end._r - _r) * t;\n    out._g = _g + (end._g - _g) * t;\n    out._b = _b + (end._b - _b) * t;\n    out._a = _a + (end._a - _a) * t;\n    out._onValueChanged && out._onValueChanged();\n\n    return out;\n  }\n\n  /** @internal */\n  _r: number;\n  /** @internal */\n  _g: number;\n  /** @internal */\n  _b: number;\n  /** @internal */\n  _a: number;\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  /**\n   * The red component of the color, 0~1.\n   */\n  public get r(): number {\n    return this._r;\n  }\n\n  public set r(value: number) {\n    this._r = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The green component of the color, 0~1.\n   */\n  public get g(): number {\n    return this._g;\n  }\n\n  public set g(value: number) {\n    this._g = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The blue component of the color, 0~1.\n   */\n  public get b(): number {\n    return this._b;\n  }\n\n  public set b(value: number) {\n    this._b = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The alpha component of the color, 0~1.\n   */\n  public get a(): number {\n    return this._a;\n  }\n\n  public set a(value: number) {\n    this._a = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of Color.\n   * @param r - The red component of the color\n   * @param g - The green component of the color\n   * @param b - The blue component of the color\n   * @param a - The alpha component of the color\n   */\n  constructor(r: number = 1, g: number = 1, b: number = 1, a: number = 1) {\n    this._r = r;\n    this._g = g;\n    this._b = b;\n    this._a = a;\n  }\n\n  /**\n   * Set the value of this color.\n   * @param r - The red component of the color\n   * @param g - The green component of the color\n   * @param b - The blue component of the color\n   * @param a - The alpha component of the color\n   * @returns This color.\n   */\n  set(r: number, g: number, b: number, a: number): Color {\n    this._r = r;\n    this._g = g;\n    this._b = b;\n    this._a = a;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the sum of this color and the specified color.\n   * @param color - The specified color\n   * @returns The added color\n   */\n  add(color: Color): Color {\n    this._r += color._r;\n    this._g += color._g;\n    this._b += color._b;\n    this._a += color._a;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Scale this color by the given value.\n   * @param s - The amount by which to scale the color\n   * @returns The scaled color\n   */\n  scale(s: number): Color {\n    this._r *= s;\n    this._g *= s;\n    this._b *= s;\n    this._a *= s;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Creates a clone of this color.\n   * @returns A clone of this color\n   */\n  clone(): Color {\n    const ret = new Color(this._r, this._g, this._b, this._a);\n    return ret;\n  }\n\n  /**\n   * Copy from color like object.\n   * @param source - Color like object.\n   * @returns This vector\n   */\n  copyFrom(source: ColorLike): Color {\n    this._r = source.r;\n    this._g = source.g;\n    this._b = source.b;\n    this._a = source.a;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Modify components (r, g, b) of this color from gamma space to linear space.\n   * @param out - The color in linear space\n   * @returns The color in linear space\n   */\n  toLinear(out: Color): Color {\n    out._r = Color.gammaToLinearSpace(this._r);\n    out._g = Color.gammaToLinearSpace(this._g);\n    out._b = Color.gammaToLinearSpace(this._b);\n    this._onValueChanged && this._onValueChanged();\n    return out;\n  }\n\n  /**\n   * Modify components (r, g, b) of this color from linear space to gamma space.\n   * @param out - The color in gamma space\n   * @returns The color in gamma space\n   */\n  toGamma(out: Color): Color {\n    out._r = Color.linearToGammaSpace(this._r);\n    out._g = Color.linearToGammaSpace(this._g);\n    out._b = Color.linearToGammaSpace(this._b);\n    this._onValueChanged && this._onValueChanged();\n    return out;\n  }\n\n  /**\n   * Gets the brightness.\n   * @returns The Hue-Saturation-Brightness (HSB) saturation for this\n   */\n  getBrightness(): number {\n    const r = this.r;\n    const g = this.g;\n    const b = this.b;\n\n    let max = r;\n    let min = r;\n    if (g > max) max = g;\n    if (b > max) max = b;\n\n    if (g < min) min = g;\n    if (b < min) min = b;\n\n    return (max + min) / 2;\n  }\n\n  /**\n   * Serialize this color to a JSON representation.\n   * @return A JSON representation of this color\n   */\n  toJSON(): ColorLike {\n    return {\n      r: this._r,\n      g: this._g,\n      b: this._b,\n      a: this._a\n    };\n  }\n}\n\ninterface ColorLike {\n  /** {@inheritDoc Color._r} */\n  r: number;\n  /** {@inheritDoc Color._g} */\n  g: number;\n  /** {@inheritDoc Color._b} */\n  b: number;\n  /** {@inheritDoc Color._a} */\n  a: number;\n}\n", "/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.push(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.push(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n", "export function _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else return left instanceof right;\n}\nexport { _instanceof as _ };\n", "/**\n * Clone mode.\n */\nexport enum CloneMode {\n  /** Ignore clone. */\n  Ignore,\n  /** Assignment clone. */\n  Assignment,\n  /** Shallow clone. */\n  Shallow,\n  /** Deep clone. */\n  Deep\n}\n", "import { IClone } from \"@galacean/engine-design\";\nimport { CloneMode } from \"./enums/CloneMode\";\n\ntype TypeArray =\n  | Uint8Array\n  | Uint16Array\n  | Uint32Array\n  | Int8Array\n  | Int16Array\n  | Int32Array\n  | Float32Array\n  | Float64Array;\n\n/**\n * Property decorator, ignore the property when cloning.\n */\nexport function ignoreClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Ignore);\n}\n\n/**\n * Property decorator, assign value to the property when cloning.\n *\n * @remarks\n * If it's a primitive type, the value will be copied.\n * If it's a class type, the reference will be copied.\n */\nexport function assignmentClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Assignment);\n}\n\n/**\n * Property decorator, shallow clone the property when cloning.\n * After cloning, it will keep its own reference independent, and use the method of assignment to clone all its internal properties.\n * if the internal property is a primitive type, the value will be copied, if the internal property is a reference type, its reference address will be copied.。\n *\n * @remarks\n * Applicable to Object, Array, TypedArray and Class types.\n */\nexport function shallowClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Shallow);\n}\n\n/**\n * Property decorator, deep clone the property when cloning.\n * After cloning, it will maintain its own reference independence, and all its internal deep properties will remain completely independent.\n *\n * @remarks\n * Applicable to Object, Array, TypedArray and Class types.\n * If Class is encountered during the deep cloning process, the custom cloning function of the object will be called first.\n * Custom cloning requires the object to implement the IClone interface.\n */\nexport function deepClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Deep);\n}\n\n/**\n * @internal\n * Clone manager.\n */\nexport class CloneManager {\n  /** @internal */\n  static _subCloneModeMap = new Map<Object, Object>();\n  /** @internal */\n  static _cloneModeMap = new Map<Object, Object>();\n\n  private static _objectType = Object.getPrototypeOf(Object);\n\n  /**\n   * Register clone mode.\n   * @param target - Clone target\n   * @param propertyKey - Clone property name\n   * @param mode - Clone mode\n   */\n  static registerCloneMode(target: Object, propertyKey: string, mode: CloneMode): void {\n    let targetMap = CloneManager._subCloneModeMap.get(target.constructor);\n    if (!targetMap) {\n      targetMap = Object.create(null);\n      CloneManager._subCloneModeMap.set(target.constructor, targetMap);\n    }\n    targetMap[propertyKey] = mode;\n  }\n\n  /**\n   * Get the clone mode according to the prototype chain.\n   */\n  static getCloneMode(type: Function): Object {\n    let cloneModes = CloneManager._cloneModeMap.get(type);\n    if (!cloneModes) {\n      cloneModes = Object.create(null);\n      CloneManager._cloneModeMap.set(type, cloneModes);\n      const objectType = CloneManager._objectType;\n      const cloneModeMap = CloneManager._subCloneModeMap;\n      while (type !== objectType) {\n        const subCloneModes = cloneModeMap.get(type);\n        if (subCloneModes) {\n          Object.assign(cloneModes, subCloneModes);\n        }\n        type = Object.getPrototypeOf(type);\n      }\n    }\n    return cloneModes;\n  }\n\n  /**\n   * Deep clone the object.\n   * @param source - Clone source\n   * @param target - Clone target\n   */\n  static deepCloneObject(source: Object, target: Object): void {\n    const type = source.constructor;\n    switch (type) {\n      case Uint8Array:\n      case Uint16Array:\n      case Uint32Array:\n      case Int8Array:\n      case Int16Array:\n      case Int32Array:\n      case Float32Array:\n      case Float64Array:\n        // Type array clone.\n        (<TypeArray>target).set(<TypeArray>source);\n        break;\n      case Array:\n        // Array clone.\n        for (let i = 0, n = (<[]>source).length; i < n; i++) {\n          CloneManager._deepCloneObjectItem(source, target, i);\n        }\n        break;\n      default:\n        const customSource = <IClone>source;\n        if (customSource.clone && customSource.cloneTo) {\n          // Custom clone.\n          customSource.cloneTo(target);\n        } else {\n          // Object or other class not implements custom clone.\n          const keys = Object.keys(source);\n          for (let i = 0, n = keys.length; i < n; i++) {\n            CloneManager._deepCloneObjectItem(source, target, keys[i]);\n          }\n        }\n    }\n  }\n\n  private static _deepCloneObjectItem(source: object, target: object, k: number | string): void {\n    const sourceItem = source[k];\n    if (sourceItem instanceof Object) {\n      const itemType = (<Object>sourceItem).constructor;\n      switch (itemType) {\n        case Uint8Array:\n        case Uint16Array:\n        case Uint32Array:\n        case Int8Array:\n        case Int16Array:\n        case Int32Array:\n        case Float32Array:\n        case Float64Array:\n          // Type array clone.\n          const sourceTypeArrayItem = <TypeArray>sourceItem;\n          let targetTypeArrayItem = <TypeArray>target[k];\n          if (targetTypeArrayItem == null) {\n            target[k] = sourceTypeArrayItem.slice();\n          } else {\n            targetTypeArrayItem.set(sourceTypeArrayItem);\n          }\n          break;\n        case Array:\n          // Array clone.\n          const sourceArrayItem = <[]>sourceItem;\n          let targetArrayItem = <[]>target[k];\n          if (targetArrayItem == null) {\n            target[k] = new Array(sourceArrayItem.length);\n          } else {\n            targetArrayItem.length = sourceArrayItem.length;\n          }\n          CloneManager.deepCloneObject(sourceArrayItem, targetArrayItem);\n          break;\n        default:\n          if (sourceItem.clone && sourceItem.cloneTo) {\n            // Custom clone.\n            let sourceCustomItem = <IClone>sourceItem;\n            let targetCustomItem = <IClone>target[k];\n            if (targetCustomItem) {\n              sourceCustomItem.cloneTo(targetCustomItem);\n            } else {\n              target[k] = sourceCustomItem.clone();\n            }\n          } else {\n            // Object or other class not implements custom clone.\n            let targetItem = <Object>target[k];\n            targetItem == null && (target[k] = targetItem = new sourceItem.constructor());\n            CloneManager.deepCloneObject(sourceItem, targetItem);\n            break;\n          }\n      }\n    } else {\n      // Null or undefined and primitive type.\n      target[k] = sourceItem;\n    }\n  }\n}\n", "import { ignoreClone } from \"../clone/CloneManager\";\nimport { Engine } from \"../Engine\";\n\n/**\n * EngineObject.\n */\nexport abstract class EngineObject {\n  private static _instanceIdCounter: number = 0;\n\n  /** Engine unique id. */\n  @ignoreClone\n  readonly instanceId: number = ++EngineObject._instanceIdCounter;\n\n  @ignoreClone\n  protected _engine: Engine;\n  protected _destroyed: boolean = false;\n\n  /**\n   * Get the engine which the object belongs.\n   */\n  get engine(): Engine {\n    return this._engine;\n  }\n\n  /**\n   * Whether it has been destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  constructor(engine: Engine) {\n    this._engine = engine;\n  }\n\n  /**\n   * Destroy self.\n   */\n  destroy(): void {\n    if (this._destroyed) return;\n\n    this._engine.resourceManager?._deleteAsset(this);\n    this._destroyed = true;\n  }\n}\n", "import { EngineObject } from \"../base/EngineObject\";\nimport { Engine } from \"../Engine\";\nimport { IRefObject } from \"./IRefObject\";\n\n/**\n * The base class of assets, with reference counting capability.\n */\nexport abstract class RefObject extends EngineObject implements IRefObject {\n  /** Whether to ignore the garbage collection check, if it is true, it will not be affected by ResourceManager.gc(). */\n  isGCIgnored: boolean = false;\n\n  private _refCount: number = 0;\n\n  /**\n   * Counted by valid references.\n   */\n  get refCount(): number {\n    return this._refCount;\n  }\n\n  protected constructor(engine: Engine) {\n    super(engine);\n    engine.resourceManager._addRefObject(this.instanceId, this);\n  }\n\n  /**\n   * Destroy self.\n   * @param force - Whether to force the destruction, if it is false, refCount = 0 can be released successfully.\n   * @returns Whether the release was successful.\n   */\n  destroy(force: boolean = false): boolean {\n    if (this._destroyed) return true;\n    if (!force && this._refCount !== 0) return false;\n    const resourceManager = this._engine.resourceManager;\n    // resourceManager maybe null,because engine has destroyed.\n    // TODO:the right way to fix this is to ensure destroy all when call engine.destroy,thus don't need to add this project.\n    if (resourceManager) {\n      super.destroy();\n      resourceManager._deleteRefObject(this.instanceId);\n    }\n\n    const refCount = this._getRefCount();\n    if (refCount > 0) {\n      this._addRefCount(-refCount);\n    }\n    this._engine = null;\n    this._onDestroy();\n    \n    return true;\n  }\n\n  /**\n   * @internal\n   */\n  _getRefCount(): number {\n    return this._refCount;\n  }\n\n  /**\n   * @internal\n   */\n  _addRefCount(value: number): void {\n    this._refCount += value;\n  }\n\n  /**\n   * @internal\n   */\n  _addToResourceManager(path: string): void {\n    this._engine.resourceManager._addAsset(path, this);\n  }\n\n  /**\n   * Called when the resource is destroyed.\n   * Subclasses can override this function.\n   */\n  protected abstract _onDestroy(): void;\n}\n", "/**\n * Render buffer depth format enumeration.\n */\nexport enum RenderBufferDepthFormat {\n  /** Render to depth buffer,engine will automatically select the supported precision. */\n  Depth,\n  /** Render to depth stencil buffer, engine will automatically select the supported precision. */\n  DepthStencil,\n  /** Render to stencil buffer. */\n  Stencil,\n\n  /** Force 16-bit depth buffer. */\n  Depth16,\n  /** Force 24-bit depth buffer. */\n  Depth24,\n  /** Force 32-bit depth buffer. */\n  Depth32,\n  /** Force 16-bit depth + 8-bit stencil buffer. */\n  Depth24Stencil8,\n  /** Force 32-bit depth + 8-bit stencil buffer. */\n  Depth32Stencil8\n}\n", "/**\n * Define the face of the cube texture.\n */\nexport enum TextureCubeFace {\n  /** Positive X face for a cube-mapped texture. */\n  PositiveX = 0,\n  /** Negative X face for a cube-mapped texture. */\n  NegativeX = 1,\n  /** Positive Y face for a cube-mapped texture. */\n  PositiveY = 2,\n  /** Negative Y face for a cube-mapped texture. */\n  NegativeY = 3,\n  /** Positive Z face for a cube-mapped texture. */\n  PositiveZ = 4,\n  /** Negative Z face for a cube-mapped texture. */\n  NegativeZ = 5\n}\n", "/**\n * Define the compare mode of depth texture.\n */\nexport enum TextureDepthCompareFunction {\n  /** never pass. */\n  Never,\n  /** pass if the compare value is less than the sample value. */\n  Less,\n  /** pass if the compare value equals the sample value. */\n  Equal,\n  /** pass if the compare value is less than or equal to the sample value. */\n  LessEqual,\n  /** pass if the compare value is greater than the sample value. */\n  Greater,\n  /** pass if the compare value is not equal to the sample value. */\n  NotEqual,\n  /** pass if the compare value is greater than or equal to the sample value. */\n  GreaterEqual,\n  /** always pass. */\n  Always\n}\n", "/**\n * The filter mode of the texture.\n */\nexport enum TextureFilterMode {\n  /** Point filtering. */\n  Point = 0,\n  /** Bilinear filtering. */\n  Bilinear = 1,\n  /** Trilinear filtering. */\n  Trilinear = 2\n}\n", "/**\n * Texture format enumeration.\n */\nexport enum TextureFormat {\n  /** RGB format,8 bits per channel. */\n  R8G8B8,\n  /** RGBA format,8 bits per channel. */\n  R8G8B8A8,\n  /** RGBA format,4 bits per channel. */\n  R4G4B4A4,\n  /** RGBA format,5 bits in R channel,5 bits in G channel,5 bits in B channel, 1 bit in A channel. */\n  R5G5B5A1,\n  /** RGB format,5 bits in R channel,6 bits in G channel,5 bits in B channel. */\n  R5G6B5,\n  /** Transparent format,8 bits. */\n  Alpha8,\n  /** Luminance/alpha in RGB channel, alpha in A channel. */\n  LuminanceAlpha,\n  /** RGBA format,16 bits per channel. */\n  R16G16B16A16,\n  /** RGBA format,32 bits per channel. */\n  R32G32B32A32,\n\n  /** RGB compressed format。*/\n  DXT1,\n  /** RGBA compressed format。*/\n  DXT5,\n  /** RGB compressed format,4 bits per pixel。*/\n  ETC1_RGB,\n  /** RGB compressed format,4 bits per pixel。*/\n  ETC2_RGB,\n  /** RGBA compressed format,5 bits per pixel,4 bit in RGB, 1 bit in A. */\n  ETC2_RGBA5,\n  /** RGB compressed format,8 bits per pixel. */\n  ETC2_RGBA8,\n  /** RGB compressed format,2 bits per pixel. */\n  PVRTC_RGB2,\n  /** RGBA compressed format,2 bits per pixel. */\n  PVRTC_RGBA2,\n  /** RGB compressed format,4 bits per pixel. */\n  PVRTC_RGB4,\n  /** RGBA compressed format,4 bits per pixel. */\n  PVRTC_RGBA4,\n  /** RGB(A) compressed format,128 bits per 4x4 pixel block. */\n  ASTC_4x4,\n  /** RGB(A) compressed format,128 bits per 5x5 pixel block. */\n  ASTC_5x5,\n  /** RGB(A) compressed format,128 bits per 6x6 pixel block. */\n  ASTC_6x6,\n  /** RGB(A) compressed format,128 bits per 8x8 pixel block. */\n  ASTC_8x8,\n  /** RGB(A) compressed format,128 bits per 10x10 pixel block. */\n  ASTC_10x10,\n  /** RGB(A) compressed format,128 bits per 12x12 pixel block. */\n  ASTC_12x12,\n\n  /** Automatic depth format,engine will automatically select the supported precision. */\n  Depth,\n  /** Automatic depth setncil format, engine will automatically select the supported precision. */\n  DepthStencil,\n  /** 16-bit depth format. */\n  Depth16,\n  /** 24-bit depth format. */\n  Depth24,\n  /** 32-bit depth format. */\n  Depth32,\n  /** 16-bit depth + 8-bit stencil format. */\n  Depth24Stencil8,\n  /** 32-bit depth + 8-bit stencil format. */\n  Depth32Stencil8\n}\n", "/**\n * Wrapping mode of the texture.\n */\nexport enum TextureWrapMode {\n  /** Clamping mode. use the color of edge pixels beyond the texture boundary. */\n  Clamp = 0,\n  /** Repeating mode. tiling will be repeated if it exceeds the texture boundary. */\n  Repeat = 1,\n  /** Mirror repeat mode. tiling will be mirrored and repeated if it exceeds the texture boundary. */\n  Mirror = 2\n}\n", "import { EventDispatcher } from \"./EventDispatcher\";\n\nexport type Listener = ((e: Event) => any) & { once?: boolean };\n\n/** Event Object. * @class */\nexport class Event {\n  get propagationStopped(): boolean {\n    return this._propagationStopped;\n  }\n\n  get target(): EventDispatcher {\n    return this._target;\n  }\n\n  set target(t) {\n    this._target = t;\n  }\n\n  get timeStamp(): number {\n    return this._timeStamp;\n  }\n\n  get currentTarget(): EventDispatcher {\n    return this._currentTarget;\n  }\n\n  set currentTarget(t) {\n    this._currentTarget = t;\n  }\n\n  get bubbles(): boolean {\n    return this._bubbles;\n  }\n\n  get type(): string | number {\n    return this._type;\n  }\n\n  public data: any;\n\n  private _timeStamp: number;\n\n  private _target: EventDispatcher;\n\n  private _currentTarget: any;\n\n  private _bubbles: boolean;\n\n  private _propagationStopped: boolean;\n\n  private _type: string | number;\n\n  constructor(type: string | number, target: EventDispatcher = null, data: any = {}, bubbles: boolean = true) {\n    this._timeStamp = new Date().getTime();\n    this._target = target;\n    this.data = data;\n    this._currentTarget = null;\n    this._bubbles = bubbles;\n    this._propagationStopped = false;\n    this._type = type;\n  }\n\n  public stopPropagation(): void {\n    this._propagationStopped = true;\n  }\n}\n", "import { Event } from \"./Event\";\n\n/**\n * EventDispatcher, which can be inherited as a base class.\n */\nexport class EventDispatcher {\n  private _events: Record<string, EventData | EventData[]> = Object.create(null);\n  private _eventCount: number = 0;\n  private _dispatchingListeners: EventData[] = [];\n\n  /**\n   * Determine whether there is event listening.\n   * @param event - Event name\n   * @returns Returns whether there is a corresponding event\n   */\n  hasEvent(event: string): boolean {\n    return this._events[event] != null;\n  }\n\n  /**\n   * Returns the names of all registered events.\n   * @returns All event names\n   */\n  eventNames(): string[] {\n    if (this._eventCount === 0) return [];\n    return Object.keys(this._events);\n  }\n\n  /**\n   * Returns the number of listeners with the specified event name.\n   * @param event - Event name\n   * @returns The count of listeners\n   */\n  listenerCount(event: string): number {\n    const listeners = this._events[event];\n\n    if (!listeners) return 0;\n    if (Array.isArray(listeners)) return listeners.length;\n    return 1;\n  }\n\n  /**\n   * Dispatch the event with the specified event name.\n   * @param event - Event name\n   * @param data - Data\n   * @returns - Whether the dispatching is successful\n   */\n  dispatch(event: string, data?: any): boolean {\n    if (!this._events[event]) {\n      return false;\n    }\n\n    const listeners = this._events[event];\n\n    if (Array.isArray(listeners)) {\n      const count = listeners.length;\n\n      // cloning list to avoid structure breaking\n      const dispatchingListeners = this._dispatchingListeners;\n      dispatchingListeners.length = count;\n      for (let i = 0; i < count; i++) {\n        dispatchingListeners[i] = listeners[i];\n      }\n\n      for (let i = 0; i < count; i++) {\n        const listener = dispatchingListeners[i];\n        if (!listener.destroyed) {\n          if (listener.once) this.off(event, listener.fn);\n          listener.fn(data);\n        }\n      }\n\n      // remove hooked function to avoid gc problem\n      dispatchingListeners.length = 0;\n    } else {\n      if (listeners.once) this.off(event, listeners.fn);\n      listeners.fn(data);\n    }\n    return true;\n  }\n\n  /**\n   * Add a listener/\n   * @param event - Event name\n   * @param fn - Function\n   * @returns This\n   */\n  on(event: string, fn: Function): EventDispatcher {\n    return this.addEventListener(event, fn);\n  }\n\n  /**\n   * Add a one-time listener.\n   * @param event - Event name\n   * @param fn - Function\n   * @returns This\n   */\n  once(event: string, fn: Function): EventDispatcher {\n    return this.addEventListener(event, fn, true);\n  }\n\n  /**\n   * @deprecated Use `on/once` instead.\n   * Add a listener function with the specified event name.\n   * @param event - Event name\n   * @param fn - Function\n   * @param once - Is it a one-time listener\n   * @returns this\n   */\n  addEventListener(event: string, fn: Function, once?: boolean): EventDispatcher {\n    const listener = { fn, once };\n    const events = this._events;\n    const element = events[event];\n\n    if (!element) {\n      events[event] = listener;\n      this._eventCount++;\n    } else if (Array.isArray(element)) {\n      element.push(listener);\n    } else {\n      events[event] = [element, listener];\n    }\n    return this;\n  }\n\n  /**\n   * Remove the event listener(s) of the specified event name.\n   * @param event - Event name\n   * @param fn - Function, If is undefined, delete all corresponding event listeners.\n   */\n  off(event: string, fn?: Function): EventDispatcher {\n    if (!this._events[event]) return this;\n    if (!fn) {\n      this._clearEvent(event);\n      return this;\n    }\n\n    const listeners = this._events[event];\n    const isArray = Array.isArray(listeners);\n    if (!isArray && listeners.fn === fn) {\n      this._clearEvent(event);\n    } else if (isArray) {\n      for (let i = listeners.length - 1; i >= 0; i--) {\n        if (listeners[i].fn === fn) {\n          // mark as destroyed\n          listeners[i].destroyed = true;\n          listeners.splice(i, 1);\n        }\n      }\n      if (listeners.length === 0) {\n        this._clearEvent(event);\n      } else if (listeners.length === 1) {\n        this._events[event] = listeners[0];\n      }\n    }\n    return this;\n  }\n\n  /**\n   * @deprecated Use `off` instead.\n   * Remove the event listener(s) of the specified event name.\n   * @param event - Event name\n   * @param fn - Function, If is undefined, delete all corresponding event listeners.\n   */\n  removeEventListener(event: string, fn?: Function): EventDispatcher {\n    return this.off(event, fn);\n  }\n\n  /**\n   * Remove all event listeners.\n   * @param event - Event name, delete all events if not passed\n   */\n  removeAllEventListeners(event?: string): void {\n    if (event) {\n      if (this._events[event]) this._clearEvent(event);\n    } else {\n      this._events = Object.create(null);\n      this._eventCount = 0;\n    }\n  }\n\n  /**\n   * @deprecated Use `dispatch` instead.\n   */\n  trigger(e: Event) {\n    this.dispatch(e.type as string, e.data);\n  }\n\n  private _clearEvent(event: string) {\n    if (--this._eventCount === 0) {\n      this._events = Object.create(null);\n    } else {\n      delete this._events[event];\n    }\n  }\n}\n\ninterface EventData {\n  fn: Function;\n  once?: boolean;\n  destroyed?: boolean;\n}\n", "/**\n * @class\n * @private\n */\n/* tslint:disable */\nconst noop = (message?: any, ...optionalParams: any[]) => {};\nconst debug = console.log.bind(console);\nconst info = console.info.bind(console);\nconst warn = console.warn.bind(console);\nconst error = console.error.bind(console);\n\nexport const Logger = {\n  debug: noop,\n  info: noop,\n  warn: noop,\n  error: noop,\n  isEnabled: false,\n\n  /** Turn on log */\n  enable() {\n    this.debug = debug;\n    this.info = info;\n    this.warn = warn;\n    this.error = error;\n    this.isEnabled = true;\n  },\n\n  /** Turn off log */\n  disable() {\n    this.debug = noop;\n    this.info = noop;\n    this.warn = noop;\n    this.error = noop;\n    this.isEnabled = false;\n  }\n};\n", "/**\n * Tools for calculating the time per frame.\n */\nexport class Time {\n  /** @internal */\n  _frameCount: number = 0;\n\n  private _clock: { now: () => number };\n  private _timeScale: number;\n  private _deltaTime: number;\n  private _startTime: number;\n  private _lastTickTime: number;\n\n  /*\n   * The total number of frames since the start of the engine.\n   */\n  get frameCount(): number {\n    return this._frameCount;\n  }\n\n  /**\n   * Constructor of the Time.\n   */\n  constructor() {\n    this._clock = performance ? performance : Date;\n\n    this._timeScale = 1.0;\n    this._deltaTime = 0.0001;\n\n    const now = this._clock.now();\n    this._startTime = now;\n    this._lastTickTime = now;\n  }\n\n  reset() {\n    this._lastTickTime = this._clock.now();\n  }\n\n  /**\n   * Current Time\n   */\n  get nowTime(): number {\n    return this._clock.now();\n  }\n\n  /**\n   * Time between two ticks\n   */\n  get deltaTime(): number {\n    return this._deltaTime;\n  }\n\n  /**\n   * Scaled delta time.\n   */\n  get timeScale(): number {\n    return this._timeScale;\n  }\n  set timeScale(s) {\n    this._timeScale = s;\n  }\n\n  /**\n   * Unscaled delta time.\n   */\n  get unscaledDeltaTime(): number {\n    return this._deltaTime / this._timeScale;\n  }\n\n  /**\n   * The elapsed time, after the clock is initialized.\n   */\n  get timeSinceStartup(): number {\n    return this.nowTime - this._startTime;\n  }\n\n  /**\n   * Call every frame, update delta time and other data.\n   */\n  public tick(): void {\n    const now = this.nowTime;\n    this._deltaTime = (now - this._lastTickTime) * this._timeScale;\n    this._lastTickTime = now;\n    this._frameCount++;\n  }\n}\n", "export const Util = {\n  isArray:\n    \"isArray\" in Array\n      ? Array.isArray\n      : (value: any): boolean => {\n          return toString.call(value) === \"[object Array]\";\n        },\n  isArrayLike(x: any): boolean {\n    return !!x && typeof x.length === \"number\" && typeof x !== \"function\";\n  },\n  clone<T>(obj: T): T {\n    if (typeof obj !== \"object\" || obj === null) {\n      return obj;\n    }\n    let rst;\n    if (Util.isArrayLike(obj)) {\n      rst = (obj as any).slice();\n      for (let i = 0, l = (obj as any).length; i < l; i++) {\n        rst[i] = Util.clone(obj[i]);\n      }\n    } else {\n      rst = {};\n      for (const k in obj) {\n        if (obj.hasOwnProperty(k)) {\n          rst[k] = Util.clone(obj[k]);\n        }\n      }\n    }\n\n    return rst;\n  },\n\n  downloadBlob(blob: Blob, fileName: string = \"\") {\n    let url = window.URL.createObjectURL(blob);\n    let a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style.display = \"none\";\n    a.href = url;\n    a.download = fileName;\n    a.addEventListener(\"click\", () => {\n      if (a.parentElement) {\n        a.parentElement.removeChild(a);\n      }\n    });\n    a.click();\n    window.URL.revokeObjectURL(url);\n  }\n};\n\nexport const isArrayLike = <T>(x: any): x is ArrayLike<T> =>\n  x && typeof x.length === \"number\" && typeof x !== \"function\";\n\n/**\n * Fastly remove an element from array.\n * @param array - Array\n * @param item - Element\n */\nexport function removeFromArray(array: any[], item: any): boolean {\n  const index = array.indexOf(item);\n  if (index < 0) {\n    return false;\n  }\n  const last = array.length - 1;\n  if (index !== last) {\n    const end = array[last];\n    array[index] = end;\n  }\n  array.length--;\n  return true;\n}\n\nexport function ObjectValues(obj: any) {\n  return Object.keys(obj).map((key: any) => obj[key]);\n}\n", "/**\n * Data type enumeration\n */\nexport enum DataType {\n  /** Float */\n  FLOAT = 5126, // gl.FLOAT\n  /** Floating-point two-dimensional vector */\n  FLOAT_VEC2 = 35664, // gl.FLOAT_VEC2\n  /** Floating-point three-dimensional vector */\n  FLOAT_VEC3 = 35665, // gl.FLOAT_VEC3\n  /** Floating-point four-dimensional vector */\n  FLOAT_VEC4 = 35666, // gl.FLOAT_VEC4\n\n  /** Integer */\n  INT = 5124, // gl.INT\n  /** Integer two-dimensional vector */\n  INT_VEC2 = 35667, // gl.INT_VEC2\n  /** Integer three-dimensional vector */\n  INT_VEC3 = 35668, // gl.INT_VEC3\n  /** Integer four-dimensional vector */\n  INT_VEC4 = 35669, // gl.INT_VEC4\n\n  /** Boolean */\n  BOOL = 35670, // gl.BOOL\n  /** Boolean two-dimensional vector */\n  BOOL_VEC2 = 35671, // gl.BOOL_VEC2\n  /** Boolean three-dimensional vector */\n  BOOL_VEC3 = 35672, // gl.BOOL_VEC3\n  /** Boolean four-dimensional vector */\n  BOOL_VEC4 = 35673, // gl.BOOL_VEC4\n\n  /** Second-order matrix */\n  FLOAT_MAT2 = 35674, // gl.FLOAT_MAT2\n  /** Third-order matrix */\n  FLOAT_MAT3 = 35675, // gl.FLOAT_MAT3\n  /** Fourth-order matrix */\n  FLOAT_MAT4 = 35676, // gl.FLOAT_MAT4\n\n  /** Float array */\n  FLOAT_ARRAY = 35677, // gl.FLOAT_ARRAY\n  /** Floating-point two-dimensional vector array */\n  FLOAT_VEC2_ARRAY = 100000,\n  /** Floating-point three-dimensional vector array */\n  FLOAT_VEC3_ARRAY,\n  /** Floating-point four-dimensional vector array */\n  FLOAT_VEC4_ARRAY,\n\n  /** Integer array */\n  INT_ARRAY,\n  /** Integer two-dimensional vector array */\n  INT_VEC2_ARRAY,\n  /** Integer three-dimensional vector array */\n  INT_VEC3_ARRAY,\n  /** Integer four-dimensional vector array */\n  INT_VEC4_ARRAY,\n\n  /** Second-order matrix array */\n  FLOAT_MAT2_ARRAY,\n  /** Third-order matrix array */\n  FLOAT_MAT3_ARRAY,\n  /** Fourth-order matrix array */\n  FLOAT_MAT4_ARRAY,\n\n  /** 2D texture sampler array */\n  SAMPLER_2D_ARRAY,\n  /** Cube map texture sampler array */\n  SAMPLER_CUBE_ARRAY,\n\n  /** 2D sampler */\n  SAMPLER_2D = 35678, // gl.SAMPLER_2D\n  /** Cube map Texture sampler */\n  SAMPLER_CUBE = 35680, // gl.SAMPLER_CUBE\n\n  /** Byte */\n  BYTE = 5120, // gl.BYTE\n  /** Unsigned byte */\n  UNSIGNED_BYTE = 5121, // gl.UNSIGNED_BYTE\n  /** Short */\n  SHORT = 5122, // gl.SHORT\n  /** Unsigned short */\n  UNSIGNED_SHORT = 5123, // gl.UNSIGNED_SHORT\n  /** Unsigned int */\n  UNSIGNED_INT = 5125 // gl.UNSIGNED_INT\n}\n\n/**\n * GL Capabilities\n * Some capabilities can be smoothed out by extension, and some capabilities must use WebGL 2.0.\n * */\nexport enum GLCapabilityType {\n  shaderVertexID = \"shaderVertexID\",\n  standardDerivatives = \"OES_standard_derivatives\",\n  shaderTextureLod = \"EXT_shader_texture_lod\",\n  elementIndexUint = \"OES_element_index_uint\",\n  depthTexture = \"WEBGL_depth_texture\",\n  drawBuffers = \"WEBGL_draw_buffers\",\n  vertexArrayObject = \"OES_vertex_array_object\",\n  instancedArrays = \"ANGLE_instanced_arrays\",\n  multipleSample = \"multipleSampleOnlySupportedInWebGL2\",\n  textureFloat = \"OES_texture_float\",\n  textureFloatLinear = \"OES_texture_float_linear\",\n  textureHalfFloat = \"OES_texture_half_float\",\n  textureHalfFloatLinear = \"OES_texture_half_float_linear\",\n  WEBGL_colorBufferFloat = \"WEBGL_color_buffer_float\",\n  colorBufferFloat = \"EXT_color_buffer_float\",\n  colorBufferHalfFloat = \"EXT_color_buffer_half_float\",\n  textureFilterAnisotropic = \"EXT_texture_filter_anisotropic\",\n  blendMinMax = \"EXT_blend_minmax\",\n\n  astc = \"WEBGL_compressed_texture_astc\",\n  astc_webkit = \"WEBKIT_WEBGL_compressed_texture_astc\",\n  etc = \"WEBGL_compressed_texture_etc\",\n  etc_webkit = \"WEBKIT_WEBGL_compressed_texture_etc\",\n  etc1 = \"WEBGL_compressed_texture_etc1\",\n  etc1_webkit = \"WEBKIT_WEBGL_compressed_texture_etc1\",\n  pvrtc = \"WEBGL_compressed_texture_pvrtc\",\n  pvrtc_webkit = \"WEBKIT_WEBGL_compressed_texture_pvrtc\",\n  s3tc = \"WEBGL_compressed_texture_s3tc\",\n  s3tc_webkit = \"WEBKIT_WEBGL_compressed_texture_s3tc\"\n  // atc = \"WEBGL_compressed_texture_atc\",\n  // s3tc_srgb = \"WEBGL_compressed_texture_s3tc_srgb\"\n}\n\nexport type TypedArray =\n  | Int8Array\n  | Uint8Array\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Uint8ClampedArray\n  | Float32Array\n  | Float64Array;\n", "import { RefObject } from \"../asset/RefObject\";\nimport { Logger } from \"../base/Logger\";\nimport { IPlatformTexture } from \"../renderingHardwareInterface\";\nimport { TextureDepthCompareFunction } from \"./enums/TextureDepthCompareFunction\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\n\n/**\n * The base class of texture, contains some common functions of texture-related classes.\n */\nexport abstract class Texture extends RefObject {\n  name: string;\n\n  /** @internal */\n  _platformTexture: IPlatformTexture;\n  /** @internal */\n  _mipmap: boolean;\n  /** @internal */\n  _isDepthTexture: boolean = false;\n\n  protected _format: TextureFormat;\n  protected _width: number;\n  protected _height: number;\n  protected _mipmapCount: number;\n\n  private _wrapModeU: TextureWrapMode;\n  private _wrapModeV: TextureWrapMode;\n  private _filterMode: TextureFilterMode;\n  private _anisoLevel: number = 1;\n  private _depthCompareFunction: TextureDepthCompareFunction;\n  private _useDepthCompareMode: boolean = false;\n\n  /**\n   * Texture format.\n   */\n  get format(): TextureFormat {\n    return this._format;\n  }\n\n  /**\n   * The width of the texture.\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * The height of the texture.\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * Wrapping mode for texture coordinate S.\n   */\n  get wrapModeU(): TextureWrapMode {\n    return this._wrapModeU;\n  }\n\n  set wrapModeU(value: TextureWrapMode) {\n    if (value === this._wrapModeU) return;\n    this._wrapModeU = value;\n\n    this._platformTexture.wrapModeU = value;\n  }\n\n  /**\n   * Wrapping mode for texture coordinate T.\n   */\n  get wrapModeV(): TextureWrapMode {\n    return this._wrapModeV;\n  }\n\n  set wrapModeV(value: TextureWrapMode) {\n    if (value === this._wrapModeV) return;\n    this._wrapModeV = value;\n\n    this._platformTexture.wrapModeV = value;\n  }\n\n  /**\n   * Texture mipmapping count.\n   */\n  get mipmapCount(): number {\n    return this._mipmapCount;\n  }\n\n  /**\n   * Filter mode for texture.\n   */\n  get filterMode(): TextureFilterMode {\n    return this._filterMode;\n  }\n\n  set filterMode(value: TextureFilterMode) {\n    if (value === this._filterMode) return;\n    this._filterMode = value;\n\n    this._platformTexture.filterMode = value;\n  }\n\n  /**\n   * Anisotropic level for texture.\n   */\n  get anisoLevel(): number {\n    return this._anisoLevel;\n  }\n\n  set anisoLevel(value: number) {\n    const max = this._engine._hardwareRenderer.capability.maxAnisoLevel;\n\n    if (value > max) {\n      Logger.warn(`anisoLevel:${value}, exceeds the limit and is automatically downgraded to:${max}`);\n      value = max;\n    }\n\n    if (value < 1) {\n      Logger.warn(`anisoLevel:${value}, must be greater than 0, and is automatically downgraded to 1`);\n      value = 1;\n    }\n\n    if (value === this._anisoLevel) return;\n\n    this._anisoLevel = value;\n\n    this._platformTexture.anisoLevel = value;\n  }\n\n  /**\n   * Filter mode when texture as depth Texture.\n   * @remarks Only depth-related formats take effect.\n   */\n  get depthCompareFunction(): TextureDepthCompareFunction {\n    return this._depthCompareFunction;\n  }\n\n  set depthCompareFunction(value: TextureDepthCompareFunction) {\n    if (!this._engine._hardwareRenderer._isWebGL2) {\n      console.warn(\"depthCompareFunction only support WebGL2\");\n      return;\n    }\n\n    if (value !== this._depthCompareFunction) {\n      this._depthCompareFunction = value;\n      this._platformTexture.depthCompareFunction = value;\n    }\n  }\n\n  /**\n   * Generate multi-level textures based on the 0th level data.\n   */\n  generateMipmaps(): void {\n    if (!this._mipmap) return;\n\n    this._platformTexture.generateMipmaps();\n  }\n\n  /**\n   * @internal\n   */\n  _setUseDepthCompareMode(value: boolean): void {\n    if (this._useDepthCompareMode !== value) {\n      this._platformTexture.setUseDepthCompareMode(value);\n      this._useDepthCompareMode = value;\n    }\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy() {\n    this._platformTexture.destroy();\n    this._platformTexture = null;\n  }\n\n  /**\n   * Get the maximum mip level of the corresponding size:rounding down.\n   * @remarks http://download.nvidia.com/developer/Papers/2005/NP2_Mipmapping/NP2_Mipmap_Creation.pdf\n   */\n  protected _getMaxMiplevel(size: number): number {\n    return Math.floor(Math.log2(size));\n  }\n\n  protected _getMipmapCount(): number {\n    return this._mipmap ? Math.floor(Math.log2(Math.max(this._width, this._height))) + 1 : 1;\n  }\n}\n", "import { EngineObject } from \"../base\";\nimport { Engine } from \"../Engine\";\nimport { IPlatformRenderTarget } from \"../renderingHardwareInterface\";\nimport { RenderBufferDepthFormat } from \"./enums/RenderBufferDepthFormat\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { Texture } from \"./Texture\";\n\n/**\n * The render target used for off-screen rendering.\n */\nexport class RenderTarget extends EngineObject {\n  /** @internal */\n  _platformRenderTarget: IPlatformRenderTarget;\n\n  /** @internal */\n  _depth: Texture | RenderBufferDepthFormat | null;\n  /** @internal */\n  _antiAliasing: number;\n\n  private _autoGenerateMipmaps: boolean = true;\n  private _width: number;\n  private _height: number;\n  private _colorTextures: Texture[];\n  private _depthTexture: Texture | null;\n\n  /**\n   * Whether to automatically generate multi-level textures.\n   */\n  get autoGenerateMipmaps(): boolean {\n    return this._autoGenerateMipmaps;\n  }\n\n  set autoGenerateMipmaps(value: boolean) {\n    this._autoGenerateMipmaps = value;\n  }\n\n  /**\n   * Render target width.\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * Render target height.\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * Render color texture count.\n   */\n  get colorTextureCount(): number {\n    return this._colorTextures.length;\n  }\n\n  /**\n   * Depth texture.\n   */\n  get depthTexture(): Texture | null {\n    return this._depthTexture;\n  }\n\n  /**\n   * Anti-aliasing level.\n   * @remarks If the anti-aliasing level set is greater than the maximum level supported by the hardware, the maximum level of the hardware will be used.\n   */\n  get antiAliasing(): number {\n    return this._antiAliasing;\n  }\n\n  /**\n   * Create a render target through color texture and depth format.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTexture - Render color texture\n   * @param depthFormat - Depth format. default RenderBufferDepthFormat.Depth, engine will automatically select the supported precision\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTexture: Texture,\n    depthFormat?: RenderBufferDepthFormat | null,\n    antiAliasing?: number\n  );\n\n  /**\n   * Create a render target through color texture and depth format.\n   * @remarks If the color texture is not transmitted, only the depth texture is generated.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTexture - Render color texture\n   * @param depthTexture - Render depth texture\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTexture: Texture | null,\n    depthTexture: Texture,\n    antiAliasing?: number\n  );\n\n  /**\n   * Create a render target with color texture array and depth format.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTextures - Render color texture array\n   * @param depthFormat - Depth format. default RenderBufferDepthFormat.Depth,engine will automatically select the supported precision\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTextures: Texture[],\n    depthFormat?: RenderBufferDepthFormat | null,\n    antiAliasing?: number\n  );\n\n  /**\n   * Create a render target with color texture array and depth texture.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTextures - Render color texture array\n   * @param depthTexture - Depth texture\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTextures: Texture[],\n    depthTexture: Texture,\n    antiAliasing?: number\n  );\n\n  /**\n   * @internal\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    renderTexture: Texture | Texture[] | null,\n    depth: Texture | RenderBufferDepthFormat | null = RenderBufferDepthFormat.Depth,\n    antiAliasing: number = 1\n  ) {\n    super(engine);\n\n    this._width = width;\n    this._height = height;\n    this._antiAliasing = antiAliasing;\n    this._depth = depth;\n\n    if (renderTexture) {\n      const colorTextures = renderTexture instanceof Array ? renderTexture.slice() : [renderTexture];\n      for (let i = 0, n = colorTextures.length; i < n; i++) {\n        if (colorTextures[i]._isDepthTexture) {\n          throw \"Render texture can't use depth format.\";\n        }\n      }\n      this._colorTextures = colorTextures;\n    } else {\n      this._colorTextures = [];\n    }\n\n    if (depth instanceof Texture) {\n      if (!depth._isDepthTexture) {\n        throw \"Depth texture must use depth format.\";\n      }\n      this._depthTexture = depth;\n    }\n\n    this._platformRenderTarget = engine._hardwareRenderer.createPlatformRenderTarget(this);\n  }\n\n  /**\n   *\n   * Get the render color texture by index.\n   * @param index\n   */\n  getColorTexture(index: number = 0): Texture | null {\n    return this._colorTextures[index];\n  }\n\n  /**\n   * Generate the mipmap of each attachment texture of the renderTarget according to the configuration.\n   */\n  generateMipmaps(): void {\n    if (this._autoGenerateMipmaps) {\n      const colorTextures = this._colorTextures;\n      for (let i = 0, n = colorTextures.length; i < n; i++) {\n        const colorTexture = colorTextures[i];\n        colorTexture.generateMipmaps();\n      }\n      this._depthTexture && this._depthTexture.generateMipmaps();\n    }\n  }\n\n  /**\n   * Destroy render target.\n   */\n  destroy() {\n    this._platformRenderTarget.destroy();\n    this._colorTextures.length = 0;\n    this._depthTexture = null;\n    this._depth = null;\n  }\n\n  /**\n   * @internal\n   */\n  _setRenderTargetInfo(faceIndex: TextureCubeFace, mipLevel: number): void {\n    this._platformRenderTarget.setRenderTargetInfo(faceIndex, mipLevel);\n  }\n\n  /**\n   * @internal\n   */\n  _blitRenderTarget(): void {\n    this._platformRenderTarget.blitRenderTarget();\n  }\n}\n", "import { Engine } from \"../Engine\";\nimport { IPlatformTexture2D } from \"../renderingHardwareInterface\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * Two-dimensional texture.\n */\nexport class Texture2D extends Texture {\n  /**\n   * Create Texture2D.\n   * @param engine - Define the engine to use to render this texture\n   * @param width - Texture width\n   * @param height - Texture height\n   * @param format - Texture format. default  `TextureFormat.R8G8B8A8`\n   * @param mipmap - Whether to use multi-level texture\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    format: TextureFormat = TextureFormat.R8G8B8A8,\n    mipmap: boolean = true\n  ) {\n    super(engine);\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._isDepthTexture =\n      format == TextureFormat.Depth ||\n      format == TextureFormat.DepthStencil ||\n      format == TextureFormat.Depth16 ||\n      format == TextureFormat.Depth24 ||\n      format == TextureFormat.Depth32 ||\n      format == TextureFormat.Depth24Stencil8 ||\n      format == TextureFormat.Depth32Stencil8;\n\n    this._platformTexture = engine._hardwareRenderer.createPlatformTexture2D(this);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Repeat;\n  }\n\n  /**\n   * Setting pixels data through color buffer data, designated area and texture mipmapping level,it's also applicable to compressed formats.\n   * @remarks If it is the WebGL1.0 platform and the texture format is compressed, the first upload must be filled with textures.\n   * @param colorBuffer - Color buffer data\n   * @param mipLevel - Texture mipmapping level\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Data width. if it's empty, width is the width corresponding to mipLevel minus x , width corresponding to mipLevel is Math.max(1, this.width >> mipLevel)\n   * @param height - Data height. if it's empty, height is the height corresponding to mipLevel minus y , height corresponding to mipLevel is Math.max(1, this.height >> mipLevel)\n   */\n  setPixelBuffer(\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x: number = 0,\n    y: number = 0,\n    width?: number,\n    height?: number\n  ): void {\n    (this._platformTexture as IPlatformTexture2D).setPixelBuffer(colorBuffer, mipLevel, x, y, width, height);\n  }\n\n  /**\n   * Setting pixels data through TexImageSource, designated area and texture mipmapping level.\n   * @param imageSource - The source of texture\n   * @param mipLevel - Texture mipmapping level\n   * @param flipY - Whether to flip the Y axis\n   * @param premultiplyAlpha - Whether to premultiply the transparent channel\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   */\n  setImageSource(\n    imageSource: TexImageSource | OffscreenCanvas,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x: number = 0,\n    y: number = 0\n  ): void {\n    (this._platformTexture as IPlatformTexture2D).setImageSource(imageSource, mipLevel, flipY, premultiplyAlpha, x, y);\n  }\n\n  /**\n   * Get pixel color buffer.\n   * @param out - Color buffer\n   */\n  getPixelBuffer(out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified mip level.\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(mipLevel: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   */\n  getPixelBuffer(x: number, y: number, width: number, height: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area and mip level.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(x: number, y: number, width: number, height: number, mipLevel: number, out: ArrayBufferView): void;\n\n  getPixelBuffer(\n    xOrMipLevelOrOut: number | ArrayBufferView,\n    yOrMipLevel?: number | ArrayBufferView,\n    width?: number,\n    height?: number,\n    mipLevelOrOut?: number | ArrayBufferView,\n    out?: ArrayBufferView\n  ): void {\n    const argsLength = arguments.length;\n    if (argsLength === 1) {\n      (this._platformTexture as IPlatformTexture2D).getPixelBuffer(\n        0,\n        0,\n        this._width,\n        this._height,\n        0,\n        <ArrayBufferView>xOrMipLevelOrOut\n      );\n    } else if (argsLength === 2) {\n      (this._platformTexture as IPlatformTexture2D).getPixelBuffer(\n        0,\n        0,\n        this._width >> (<number>xOrMipLevelOrOut),\n        this._height >> (<number>xOrMipLevelOrOut),\n        <number>xOrMipLevelOrOut,\n        <ArrayBufferView>yOrMipLevel\n      );\n    } else if (argsLength === 5) {\n      (this._platformTexture as IPlatformTexture2D).getPixelBuffer(\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        0,\n        <ArrayBufferView>mipLevelOrOut\n      );\n    } else if (argsLength === 6) {\n      (this._platformTexture as IPlatformTexture2D).getPixelBuffer(\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        <number>mipLevelOrOut,\n        out\n      );\n    }\n  }\n}\n", "import { Engine } from \"../Engine\";\nimport { IPlatformTexture2DArray } from \"../renderingHardwareInterface\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * Two-dimensional texture array.\n */\nexport class Texture2DArray extends Texture {\n  private readonly _length: number;\n\n  /**\n   * The length of the texture.\n   */\n  get length(): number {\n    return this._length;\n  }\n\n  /**\n   * Create Texture2D Array.\n   * @param engine - Define the engine to use to render this texture\n   * @param width - Texture width\n   * @param height - Texture height\n   * @param length - Texture length\n   * @param format - Texture format. default `TextureFormat.R8G8B8A8`\n   * @param mipmap - Whether to use multi-level texture\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    length: number,\n    format: TextureFormat = TextureFormat.R8G8B8A8,\n    mipmap: boolean = true\n  ) {\n    super(engine);\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._length = length;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._platformTexture = engine._hardwareRenderer.createPlatformTexture2DArray(this);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Repeat;\n  }\n\n  /**\n   * Setting pixels data through color buffer data, designated area and texture mipmapping level,it's also applicable to compressed formats.\n   * @remarks If it is the WebGL1.0 platform and the texture format is compressed, the first upload must be filled with textures.\n   * @param offsetIndex - The texture array element offset index\n   * @param colorBuffer - Color buffer data\n   * @param mipLevel - Texture mipmapping level\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Data width. if it's empty, width is the width corresponding to mipLevel minus x , width corresponding to mipLevel is Math.max(1, this.width >> mipLevel)\n   * @param height - Data height. if it's empty, height is the height corresponding to mipLevel minus y , height corresponding to mipLevel is Math.max(1, this.height >> mipLevel)\n   * @param length - Data length. if it's empty, length is the length of Texture2DArray.length\n   */\n  setPixelBuffer(\n    offsetIndex: number,\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x: number = 0,\n    y: number = 0,\n    width?: number,\n    height?: number,\n    length?: number\n  ): void {\n    (this._platformTexture as IPlatformTexture2DArray).setPixelBuffer(\n      offsetIndex,\n      colorBuffer,\n      mipLevel,\n      x,\n      y,\n      width,\n      height,\n      length\n    );\n  }\n\n  /**\n   * Setting pixels data through TexImageSource, designated area and texture mipmapping level.\n   * @param elementIndex - The texture array element index\n   * @param imageSource - The source of texture\n   * @param mipLevel - Texture mipmapping level\n   * @param flipY - Whether to flip the Y axis\n   * @param premultiplyAlpha - Whether to premultiply the transparent channel\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   */\n  setImageSource(\n    elementIndex: number,\n    imageSource: TexImageSource | OffscreenCanvas,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x: number = 0,\n    y: number = 0\n  ): void {\n    (this._platformTexture as IPlatformTexture2DArray).setImageSource(\n      elementIndex,\n      imageSource,\n      mipLevel,\n      flipY,\n      premultiplyAlpha,\n      x,\n      y\n    );\n  }\n\n  /**\n   * Get pixel color buffer.\n   * @param elementIndex - The texture array element index\n   * @param out - Color buffer\n   */\n  getPixelBuffer(elementIndex: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified mip level.\n   * @param elementIndex - The texture array element index\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(elementIndex: number, mipLevel: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area.\n   * @param elementIndex - The texture array element index\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   */\n  getPixelBuffer(elementIndex: number, x: number, y: number, width: number, height: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area and mip level.\n   * @param elementIndex - The texture array element index\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(\n    elementIndex: number,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    mipLevel: number,\n    out: ArrayBufferView\n  ): void;\n\n  getPixelBuffer(\n    elementIndex: number,\n    xOrMipLevelOrOut: number | ArrayBufferView,\n    yOrMipLevel?: number | ArrayBufferView,\n    width?: number,\n    height?: number,\n    mipLevelOrOut?: number | ArrayBufferView,\n    out?: ArrayBufferView\n  ): void {\n    const argsLength = arguments.length;\n    if (argsLength === 1) {\n      (this._platformTexture as IPlatformTexture2DArray).getPixelBuffer(\n        elementIndex,\n        0,\n        0,\n        this._width,\n        this._height,\n        0,\n        <ArrayBufferView>xOrMipLevelOrOut\n      );\n    } else if (argsLength === 2) {\n      (this._platformTexture as IPlatformTexture2DArray).getPixelBuffer(\n        elementIndex,\n        0,\n        0,\n        this._width >> (<number>xOrMipLevelOrOut),\n        this._height >> (<number>xOrMipLevelOrOut),\n        <number>xOrMipLevelOrOut,\n        <ArrayBufferView>yOrMipLevel\n      );\n    } else if (argsLength === 5) {\n      (this._platformTexture as IPlatformTexture2DArray).getPixelBuffer(\n        elementIndex,\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        0,\n        <ArrayBufferView>mipLevelOrOut\n      );\n    } else if (argsLength === 6) {\n      (this._platformTexture as IPlatformTexture2DArray).getPixelBuffer(\n        elementIndex,\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        <number>mipLevelOrOut,\n        out\n      );\n    }\n  }\n}\n", "import { Engine } from \"../Engine\";\nimport { IPlatformTextureCube } from \"../renderingHardwareInterface\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * Cube texture.\n */\nexport class TextureCube extends Texture {\n  /**\n   * Create TextureCube.\n   * @param engine - Define the engine to use to render this texture\n   * @param size - Texture size. texture width must be equal to height in cube texture\n   * @param format - Texture format,default TextureFormat.R8G8B8A8\n   * @param mipmap - Whether to use multi-level texture\n   */\n  constructor(engine: Engine, size: number, format: TextureFormat = TextureFormat.R8G8B8A8, mipmap: boolean = true) {\n    super(engine);\n\n    this._mipmap = mipmap;\n    this._width = size;\n    this._height = size;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._platformTexture = engine._hardwareRenderer.createPlatformTextureCube(this);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;\n  }\n\n  /**\n   * Setting pixels data through cube face,color buffer data, designated area and texture mipmapping level,it's also applicable to compressed formats.\n   * @remarks When compressed texture is in WebGL1, the texture must be filled first before writing the sub-region\n   * @param face - Cube face\n   * @param colorBuffer - Color buffer data\n   * @param mipLevel - Texture mipmapping level\n   * @param x - X coordinate of area start\n   * @param y -  Y coordinate of area start\n   * @param width - Data width.if it's empty, width is the width corresponding to mipLevel minus x , width corresponding to mipLevel is Math.max(1, this.width >> mipLevel)\n   * @param height - Data height.if it's empty, height is the height corresponding to mipLevel minus y , height corresponding to mipLevel is Math.max(1, this.height >> mipLevel)\n   */\n  setPixelBuffer(\n    face: TextureCubeFace,\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x: number = 0,\n    y: number = 0,\n    width?: number,\n    height?: number\n  ): void {\n    (this._platformTexture as IPlatformTextureCube).setPixelBuffer(face, colorBuffer, mipLevel, x, y, width, height);\n  }\n\n  /**\n   * Setting pixels data through cube face, TexImageSource, designated area and texture mipmapping level.\n   * @param face - Cube face\n   * @param imageSource - The source of texture\n   * @param mipLevel - Texture mipmapping level\n   * @param flipY - Whether to flip the Y axis\n   * @param premultiplyAlpha - Whether to premultiply the transparent channel\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   */\n  setImageSource(\n    face: TextureCubeFace,\n    imageSource: TexImageSource | OffscreenCanvas,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x: number = 0,\n    y: number = 0\n  ): void {\n    (this._platformTexture as IPlatformTextureCube).setImageSource(\n      face,\n      imageSource,\n      mipLevel,\n      flipY,\n      premultiplyAlpha,\n      x,\n      y\n    );\n  }\n\n  /**\n   * Get pixel color buffer.\n   * @param out - Color buffer\n   */\n  getPixelBuffer(face: TextureCubeFace, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified mip level.\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(face: TextureCubeFace, mipLevel: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   */\n  getPixelBuffer(\n    face: TextureCubeFace,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    out: ArrayBufferView\n  ): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area and mip level.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(\n    face: TextureCubeFace,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    mipLevel: number,\n    out: ArrayBufferView\n  ): void;\n\n  getPixelBuffer(\n    face: TextureCubeFace,\n    xOrMipLevelOrOut: number | ArrayBufferView,\n    yOrMipLevel?: number | ArrayBufferView,\n    width?: number,\n    height?: number,\n    mipLevelOrOut?: number | ArrayBufferView,\n    out?: ArrayBufferView\n  ): void {\n    const argsLength = arguments.length;\n    if (argsLength === 2) {\n      (this._platformTexture as IPlatformTextureCube).getPixelBuffer(\n        face,\n        0,\n        0,\n        this._width,\n        this._height,\n        0,\n        <ArrayBufferView>xOrMipLevelOrOut\n      );\n    } else if (argsLength === 3) {\n      (this._platformTexture as IPlatformTextureCube).getPixelBuffer(\n        face,\n        0,\n        0,\n        this._width >> (<number>xOrMipLevelOrOut),\n        this._height >> (<number>xOrMipLevelOrOut),\n        <number>xOrMipLevelOrOut,\n        <ArrayBufferView>yOrMipLevel\n      );\n    } else if (argsLength === 6) {\n      (this._platformTexture as IPlatformTextureCube).getPixelBuffer(\n        face,\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        0,\n        <ArrayBufferView>mipLevelOrOut\n      );\n    } else if (argsLength === 7) {\n      (this._platformTexture as IPlatformTextureCube).getPixelBuffer(\n        face,\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        <number>mipLevelOrOut,\n        out\n      );\n    }\n  }\n}\n", "import { RefObject } from \"../../asset/RefObject\";\nimport { Engine } from \"../../Engine\";\nimport { Texture2D } from \"../../texture/Texture2D\";\nimport { CharInfo } from \"../text/CharInfo\";\n\n/**\n * @internal\n * Font Atlas.\n */\nexport class FontAtlas extends RefObject {\n  private _charInfoMap: Record<number, CharInfo> = {};\n  private _texture: Texture2D;\n  private _space: number = 1;\n  private _curX: number = 1;\n  private _curY: number = 1;\n  private _nextY: number = 1;\n\n  get texture(): Texture2D {\n    return this._texture;\n  }\n\n  set texture(value: Texture2D) {\n    this._texture = value;\n  }\n\n  /**\n   * Constructor a FontAtlas.\n   * @param engine - Engine to which the FontAtlas belongs\n   */\n  constructor(engine: Engine) {\n    super(engine);\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy(): void {\n    this._texture.destroy();\n    this._texture = null;\n    this._charInfoMap = {};\n  }\n\n  uploadCharTexture(charInfo: CharInfo): boolean {\n    const { w: width, h: height, data } = charInfo;\n    const { _space: space, texture } = this;\n    const textureSize = texture.width;\n    const offsetWidth = width + space;\n    const offsetHeight = height + space;\n    if (1 + offsetWidth >= textureSize || 1 + offsetHeight >= textureSize) {\n      throw Error(\"The char fontSize is too large.\");\n    }\n\n    const endX = this._curX + offsetWidth;\n    if (endX >= textureSize) {\n      this._curX = space;\n      this._curY = this._nextY + space;\n    }\n    const endY = this._curY + offsetHeight;\n    if (endY > this._nextY) {\n      this._nextY = endY;\n    }\n    if (endY >= textureSize) {\n      return false;\n    }\n\n    if (width > 0 && height > 0 && data) {\n      texture.setPixelBuffer(data, 0, this._curX, this._curY, width, height);\n      texture.generateMipmaps();\n    }\n\n    const textureSizeReciprocal = 1.0 / textureSize;\n    const x = this._curX;\n    const y = this._curY;\n    const w = width;\n    const h = height;\n    const u0 = x * textureSizeReciprocal;\n    const u1 = (x + w) * textureSizeReciprocal;\n    const v0 = y * textureSizeReciprocal;\n    const v1 = (y + h) * textureSizeReciprocal;\n\n    charInfo.x = x;\n    charInfo.y = y;\n    const uvs = charInfo.uvs;\n    uvs[0].set(u0, v0);\n    uvs[1].set(u1, v0);\n    uvs[2].set(u1, v1);\n    uvs[3].set(u0, v1);\n\n    this._curX += offsetWidth + space;\n    return true;\n  }\n\n  addCharInfo(char: string, charInfo: CharInfo) {\n    this._charInfoMap[char.charCodeAt(0)] = charInfo;\n  }\n\n  getCharInfo(char: string): CharInfo {\n    return this._charInfoMap[char.charCodeAt(0)];\n  }\n}\n", "import { Engine } from \"../../Engine\";\nimport { Texture2D } from \"../../texture\";\nimport { FontAtlas } from \"../atlas/FontAtlas\";\nimport { CharInfo } from \"./CharInfo\";\n\n/**\n * @internal\n */\nexport class SubFont {\n  private _engine: Engine;\n  private _fontAtlases: FontAtlas[] = [];\n  private _lastIndex: number = -1;\n\n  constructor(engine: Engine) {\n    this._engine = engine;\n  }\n\n  destroy(): void {\n    const fontAtlases = this._fontAtlases;\n    for (let i = 0, n = fontAtlases.length; i < n; ++i) {\n      fontAtlases[i].destroy(true);\n    }\n    fontAtlases.length = 0;\n  }\n\n  /**\n   * @internal\n   */\n  _uploadCharTexture(charInfo: CharInfo): void {\n    const fontAtlases = this._fontAtlases;\n    let lastIndex = this._lastIndex;\n    if (lastIndex === -1) {\n      this._createFontAtlas();\n      lastIndex++;\n    }\n    let fontAtlas = fontAtlases[lastIndex];\n    if (!fontAtlas.uploadCharTexture(charInfo)) {\n      fontAtlas = this._createFontAtlas();\n      fontAtlas.uploadCharTexture(charInfo);\n      lastIndex++;\n    }\n    this._lastIndex = lastIndex;\n    charInfo.data = null;\n  }\n\n  /**\n   * @internal\n   */\n  _addCharInfo(char: string, charInfo: CharInfo): void {\n    const lastIndex = this._lastIndex;\n    charInfo.index = lastIndex;\n    this._fontAtlases[lastIndex].addCharInfo(char, charInfo);\n  }\n\n  /**\n   * @internal\n   */\n  _getCharInfo(char: string): CharInfo {\n    const fontAtlases = this._fontAtlases;\n    for (let i = 0, n = fontAtlases.length; i < n; ++i) {\n      const fontAtlas = fontAtlases[i];\n      const charInfo = fontAtlas.getCharInfo(char);\n      if (charInfo) {\n        return charInfo;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  _getTextureByIndex(index: number): Texture2D {\n    const fontAtlas = this._fontAtlases[index];\n    if (fontAtlas) {\n      return fontAtlas.texture;\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  _getLastIndex(): number {\n    return this._lastIndex;\n  }\n\n  private _createFontAtlas(): FontAtlas {\n    const { _engine: engine } = this;\n    const fontAtlas = new FontAtlas(engine);\n    const texture = new Texture2D(engine, 256, 256);\n    fontAtlas.texture = texture;\n    this._fontAtlases.push(fontAtlas);\n    return fontAtlas;\n  }\n}\n", "import { RefObject } from \"../../asset/RefObject\";\nimport { Engine } from \"../../Engine\";\nimport { FontStyle } from \"../enums/FontStyle\";\nimport { SubFont } from \"./SubFont\";\n\n/**\n * Font.\n */\nexport class Font extends RefObject {\n  private static _fontMap: Record<string, Font> = {};\n\n  /**\n   * Create a system font.\n   * @param engine - Engine to which the font belongs\n   * @param name - The name of font want to create\n   * @returns The font object has been create\n   */\n  static createFromOS(engine: Engine, name: string): Font {\n    if (name) {\n      const fontMap = Font._fontMap;\n      let font = fontMap[name];\n      if (font) {\n        return font;\n      }\n      font = new Font(engine, name);\n      fontMap[name] = font;\n      return font;\n    }\n    return null;\n  }\n\n  private _name: string = \"\";\n  private _subFontMap: Record<string, SubFont> = {};\n\n  /**\n   * The name of the font object.\n   */\n  get name(): string {\n    return this._name;\n  }\n\n  constructor(engine: Engine, name: string = \"\") {\n    super(engine);\n    this._name = name;\n  }\n\n  /**\n   * @internal\n   */\n  _getSubFont(fontSize: number, fontStyle: FontStyle): SubFont {\n    const key = `${fontSize}-${fontStyle}`;\n    const subFontMap = this._subFontMap;\n    let subFont = subFontMap[key];\n    if (subFont) {\n      return subFont;\n    }\n    subFont = new SubFont(this.engine);\n    subFontMap[key] = subFont;\n    return subFont;\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy(): void {\n    const subFontMap = this._subFontMap;\n    for (let k in subFontMap) {\n      subFontMap[k].destroy();\n    }\n    this._subFontMap = null;\n    delete Font._fontMap[this._name];\n  }\n}\n", "/**\n * Asset Loading Promise.\n */\nexport class AssetPromise<T> implements PromiseLike<T> {\n  /**\n   * Return a new resource Promise through the provided asset promise collection.\n   * The resolved of the new AssetPromise will be triggered when all the Promises in the provided set are completed.\n   * @param - Promise Collection\n   * @returns AssetPromise\n   */\n  static all<T = any>(promises: (PromiseLike<T> | T)[]) {\n    return new AssetPromise<T[]>((resolve, reject, setProgress) => {\n      const count = promises.length;\n      const results: T[] = new Array(count);\n      let completed = 0;\n\n      if (count === 0) {\n        return resolve(results);\n      }\n\n      function onComplete(index: number, resultValue: T) {\n        completed++;\n        results[index] = resultValue;\n        setProgress(completed / count);\n        if (completed === count) {\n          resolve(results);\n        }\n      }\n\n      function onProgress(promise: PromiseLike<T> | T, index: number) {\n        if (promise instanceof Promise || promise instanceof AssetPromise) {\n          promise.then(function (value) {\n            onComplete(index, value);\n          }, reject);\n        } else {\n          Promise.resolve().then(() => {\n            onComplete(index, promise as T);\n          });\n        }\n      }\n\n      for (let i = 0; i < count; i++) {\n        onProgress(promises[i], i);\n      }\n    });\n  }\n\n  /** compatible with Promise */\n  get [Symbol.toStringTag]() {\n    return \"AssetPromise\";\n  }\n\n  private _promise: Promise<T>;\n  private _state = PromiseState.Pending;\n  private _onProgressCallback: Array<(progress: number) => void> = [];\n  private _onCancelHandler: () => void;\n  private _reject: (reason: any) => void;\n\n  /**\n   * Create an asset loading Promise.\n   * @param executor - A callback used to initialize the promise. This callback is passed two arguments:\n   * a resolve callback used to resolve the promise with a value or the result of another promise,\n   * and a reject callback used to reject the promise with a provided reason or error.\n   * and a setProgress callback used to set promise progress with a percent.\n   */\n  constructor(executor: AssetPromiseExecutor<T>) {\n    this._promise = new Promise((resolve, reject) => {\n      this._reject = reject;\n      const onResolve = (value: T) => {\n        if (this._state === PromiseState.Pending) {\n          resolve(value);\n          this._state = PromiseState.Fulfilled;\n          this._onProgressCallback = undefined;\n        }\n      };\n      const onReject = (reason) => {\n        if (this._state === PromiseState.Pending) {\n          reject(reason);\n          this._state = PromiseState.Rejected;\n          this._onProgressCallback = undefined;\n        }\n      };\n      const onCancel = (callback) => {\n        if (this._state === PromiseState.Pending) {\n          this._onCancelHandler = callback;\n        }\n      };\n      const setProgress = (progress: number) => {\n        if (this._state === PromiseState.Pending) {\n          this._onProgressCallback.forEach((callback) => callback(progress));\n        }\n      };\n\n      executor(onResolve, onReject, setProgress, onCancel);\n    });\n  }\n\n  /**\n   * Progress callback.\n   * @param callback\n   * @returns AssetPromise\n   */\n  onProgress(callback: (progress: number) => void): AssetPromise<T> {\n    this._onProgressCallback.push(callback);\n    return this;\n  }\n\n  then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>,\n    onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>\n  ): AssetPromise<TResult1 | TResult2> {\n    return new AssetPromise<TResult1 | TResult2>((resolve, reject) => {\n      this._promise.then(onfulfilled, onrejected).then(resolve).catch(reject);\n    });\n  }\n\n  /**\n   * Attaches a callback for only the rejection of the Promise.\n   * @param onRejected - The callback to execute when the Promise is rejected.\n   * @returns A Promise for the completion of the callback.\n   */\n  catch(onRejected: (reason: any) => any): AssetPromise<T> {\n    return new AssetPromise<T>((resolve, reject) => {\n      this._promise.catch(onRejected).then(resolve).catch(reject);\n    });\n  }\n\n  /**\n   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n   * resolved value cannot be modified from the callback.\n   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n   * @returns A Promise for the completion of the callback.\n   */\n  finally(onFinally?: () => void): Promise<T> {\n    return this._promise.finally(onFinally);\n  }\n\n  /**\n   * Cancel promise request.\n   * @returns Asset promise\n   */\n  cancel(): AssetPromise<T> {\n    if (this._state !== PromiseState.Pending) {\n      return;\n    }\n    this._state = PromiseState.Canceled;\n    this._reject(\"canceled\");\n    this._onCancelHandler && this._onCancelHandler();\n    return this;\n  }\n}\n\ninterface AssetPromiseExecutor<T> {\n  (\n    resolve: (value?: T | PromiseLike<T>) => void,\n    reject?: (reason?: any) => void,\n    setProgress?: (progress: number) => void,\n    onCancel?: (callback: () => void) => void\n  ): void;\n}\n\n/** @internal */\nenum PromiseState {\n  Pending = \"pending\",\n  Fulfilled = \"fulfilled\",\n  Rejected = \"rejected\",\n  Canceled = \"canceled\"\n}\n", "import { Engine, EngineObject, Logger } from \"..\";\nimport { ObjectValues } from \"../base/Util\";\nimport { AssetPromise } from \"./AssetPromise\";\nimport { Loader } from \"./Loader\";\nimport { LoadItem } from \"./LoadItem\";\nimport { RefObject } from \"./RefObject\";\n\n/**\n * ResourceManager\n */\nexport class ResourceManager {\n  /** Loader collection. */\n  private static _loaders: { [key: string]: Loader<any> } = {};\n  private static _extTypeMapping: { [key: string]: string } = {};\n\n  /**\n   * @internal\n   */\n  static _addLoader(type: string, loader: Loader<any>, extNames: string[]) {\n    this._loaders[type] = loader;\n    for (let i = 0, len = extNames.length; i < len; i++) {\n      this._extTypeMapping[extNames[i]] = type;\n    }\n  }\n\n  private static _getTypeByUrl(url: string): string {\n    const path = url.split(\"?\")[0];\n    return this._extTypeMapping[path.substring(path.lastIndexOf(\".\") + 1)];\n  }\n\n  /** The number of retries after failing to load assets. */\n  retryCount: number = 1;\n  /** Retry delay time after failed to load assets, in milliseconds. */\n  retryInterval: number = 0;\n  /** The default timeout period for loading assets, in milliseconds. */\n  timeout: number = Infinity;\n\n  /** Asset path pool, key is asset ID, value is asset path */\n  private _assetPool: { [key: number]: string } = Object.create(null);\n  /** Asset pool, the key is the asset path and the value is the asset. */\n  private _assetUrlPool: { [key: string]: Object } = Object.create(null);\n  /** Reference counted object pool, key is the object ID, and reference counted objects are put into this pool. */\n  private _refObjectPool: { [key: number]: RefObject } = Object.create(null);\n  /** Loading promises. */\n  private _loadingPromises: { [url: string]: AssetPromise<any> } = {};\n\n  /**\n   * Create a ResourceManager.\n   * @param engine - Engine to which the current ResourceManager belongs\n   */\n  constructor(public readonly engine: Engine) {}\n\n  /**\n   * Load asset asynchronously through the path.\n   * @param path - Path\n   * @returns Asset promise\n   */\n  load<T>(path: string): AssetPromise<T>;\n\n  /**\n   * Load asset collection asynchronously through urls.\n   * @param paths - Path collections\n   * @returns Asset Promise\n   */\n  load(paths: string[]): AssetPromise<Object[]>;\n\n  /**\n   * Load the asset asynchronously by asset item information.\n   * @param assetItem - AssetItem\n   * @returns AssetPromise\n   */\n  load<T>(assetItem: LoadItem): AssetPromise<T>;\n\n  /**\n   * Load the asset collection asynchronously by loading the information collection.\n   * @param assetItems - Asset collection\n   * @returns AssetPromise\n   */\n  load(assetItems: LoadItem[]): AssetPromise<Object[]>;\n\n  load<T>(assetInfo: string | LoadItem | (LoadItem | string)[]): AssetPromise<T | Object[]> {\n    // single item\n    if (!Array.isArray(assetInfo)) {\n      return this._loadSingleItem(assetInfo);\n    }\n    // multi items\n    const promises = assetInfo.map((item) => this._loadSingleItem<T>(item));\n    return AssetPromise.all(promises);\n  }\n\n  /**\n   * Get the resource from cache by asset url, return the resource object if it loaded, otherwise return null.\n   * @param url - Resource url\n   * @returns Resource object\n   */\n  getFromCache<T>(url: string): T {\n    return (this._assetUrlPool[url] as T) ?? null;\n  }\n\n  /**\n   * Get asset url from instanceId.\n   * @param instanceId - Engine instance id\n   * @returns Asset url\n   */\n  getAssetPath(instanceId: number): string {\n    return this._assetPool[instanceId];\n  }\n\n  /**\n   * Cancel all assets that have not finished loading.\n   */\n  cancelNotLoaded(): void;\n\n  /**\n   * Cancel assets whose url has not finished loading.\n   * @param url - Resource url\n   */\n  cancelNotLoaded(url: string): void;\n\n  /**\n   * Cancel the incompletely loaded assets in urls.\n   * @param urls - Resource urls\n   */\n  cancelNotLoaded(urls: string[]): void;\n\n  cancelNotLoaded(url?: string | string[]): void {\n    if (!url) {\n      ObjectValues(this._loadingPromises).forEach((promise) => {\n        promise.cancel();\n      });\n    } else if (typeof url === \"string\") {\n      this._loadingPromises[url]?.cancel();\n    } else {\n      url.forEach((p) => {\n        this._loadingPromises[p]?.cancel();\n      });\n    }\n  }\n\n  /**\n   * Garbage collection will release resource objects managed by reference counting.\n   * @remarks The release principle is that it is not referenced by the components, including direct and indirect reference.\n   */\n  gc(): void {\n    this._gc(false);\n  }\n\n  /**\n   * @internal\n   */\n  _addAsset(path: string, asset: EngineObject): void {\n    this._assetPool[asset.instanceId] = path;\n    this._assetUrlPool[path] = asset;\n  }\n\n  /**\n   * @internal\n   */\n  _deleteAsset(asset: EngineObject): void {\n    const id = asset.instanceId;\n    const path = this._assetPool[id];\n    if (path) {\n      delete this._assetPool[id];\n      delete this._assetUrlPool[path];\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _addRefObject(id: number, asset: RefObject): void {\n    this._refObjectPool[id] = asset;\n  }\n\n  /**\n   * @internal\n   */\n  _deleteRefObject(id: number): void {\n    delete this._refObjectPool[id];\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    this.cancelNotLoaded();\n    this._gc(true);\n    this._assetPool = null;\n    this._assetUrlPool = null;\n    this._refObjectPool = null;\n  }\n\n  private _assignDefaultOptions(assetInfo: LoadItem): LoadItem | never {\n    assetInfo.type = assetInfo.type ?? ResourceManager._getTypeByUrl(assetInfo.url);\n    if (assetInfo.type === undefined) {\n      throw `asset type should be specified: ${assetInfo.url}`;\n    }\n    assetInfo.retryCount = assetInfo.retryCount ?? this.retryCount;\n    assetInfo.timeout = assetInfo.timeout ?? this.timeout;\n    assetInfo.retryInterval = assetInfo.retryInterval ?? this.retryInterval;\n    assetInfo.url = assetInfo.url ?? assetInfo.urls.join(\",\");\n    return assetInfo;\n  }\n\n  private _loadSingleItem<T>(itemOrURL: LoadItem | string): AssetPromise<T> {\n    const item = this._assignDefaultOptions(typeof itemOrURL === \"string\" ? { url: itemOrURL } : itemOrURL);\n\n    // Check url mapping\n    const itemURL = item.url;\n    const url = this._virtualPathMap[itemURL] ? this._virtualPathMap[itemURL] : itemURL;\n\n    // Parse url\n    const { assetBaseURL, queryPath } = this._parseURL(url);\n    const paths = queryPath ? this._parseQueryPath(queryPath) : [];\n\n    // Check cache\n    const cacheObject = this._assetUrlPool[assetBaseURL];\n    if (cacheObject) {\n      return new AssetPromise((resolve) => {\n        resolve(this._getResolveResource(cacheObject, paths) as T);\n      });\n    }\n\n    // Get asset url\n    let assetURL = assetBaseURL;\n    if (queryPath) {\n      assetURL += \"?q=\" + paths.shift();\n    }\n\n    // Check is loading\n    const loadingPromises = this._loadingPromises;\n    const loadingPromise = loadingPromises[assetURL];\n    if (loadingPromise) {\n      return new AssetPromise((resolve, reject) => {\n        loadingPromise\n          .then((resource: EngineObject) => {\n            resolve(this._getResolveResource(resource, paths) as T);\n          })\n          .catch((error: Error) => {\n            reject(error);\n          });\n      });\n    }\n\n    // Check loader\n    const loader = ResourceManager._loaders[item.type];\n    if (!loader) {\n      throw `loader not found: ${item.type}`;\n    }\n\n    // Load asset\n    item.url = assetBaseURL;\n    const promise = loader.load(item, this);\n    if (promise instanceof AssetPromise) {\n      loadingPromises[assetBaseURL] = promise;\n      promise.then(\n        (resource: EngineObject) => {\n          if (loader.useCache) {\n            this._addAsset(assetBaseURL, resource);\n          }\n          delete loadingPromises[assetBaseURL];\n        },\n        () => delete loadingPromises[assetBaseURL]\n      );\n      return promise;\n    } else {\n      for (let subURL in promise) {\n        const subPromise = promise[subURL];\n        const isMaster = assetBaseURL === subURL;\n        loadingPromises[subURL] = subPromise;\n\n        subPromise.then(\n          (resource: EngineObject) => {\n            if (isMaster) {\n              if (loader.useCache) {\n                this._addAsset(subURL, resource);\n                for (let k in promise) delete loadingPromises[k];\n              }\n            }\n          },\n          () => {\n            for (let k in promise) delete loadingPromises[k];\n          }\n        );\n      }\n\n      return promise[assetURL].then((resource: EngineObject) => this._getResolveResource(resource, paths) as T);\n    }\n  }\n\n  private _gc(forceDestroy: boolean): void {\n    const objects = ObjectValues(this._refObjectPool);\n    for (let i = 0, len = objects.length; i < len; i++) {\n      if (!objects[i].isGCIgnored || forceDestroy) {\n        objects[i].destroy();\n      }\n    }\n  }\n\n  private _getResolveResource(resource: any, paths: string[]): any {\n    let subResource = resource;\n    if (paths) {\n      for (let i = 0, n = paths.length; i < n; i++) {\n        const path = paths[i];\n        subResource = subResource[path];\n      }\n    }\n    return subResource;\n  }\n\n  private _parseURL(path: string): { assetBaseURL: string; queryPath: string } {\n    let assetBaseURL = path;\n    const index = assetBaseURL.indexOf(\"?\");\n    if (index !== -1) {\n      assetBaseURL = assetBaseURL.slice(0, index);\n    }\n    return { assetBaseURL, queryPath: this._getParameterByName(\"q\", path) };\n  }\n\n  private _getParameterByName(name, url = window.location.href) {\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n    var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n      results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return \"\";\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n  }\n\n  private _parseQueryPath(string): string[] {\n    const result = [];\n    if (string.charCodeAt(0) === charCodeOfDot) {\n      result.push(\"\");\n    }\n    string.replace(rePropName, (match, expression, quote, subString) => {\n      let key = match;\n      if (quote) {\n        key = subString.replace(reEscapeChar, \"$1\");\n      } else if (expression) {\n        key = expression.trim();\n      }\n      result.push(key);\n    });\n    return result;\n  }\n\n  //-----------------Editor temp solution-----------------\n\n  /** @internal */\n  _objectPool: { [key: string]: any } = Object.create(null);\n  /** @internal */\n  _editorResourceConfig: EditorResourceConfig = Object.create(null);\n  /** @internal */\n  _virtualPathMap: Record<string, string> = Object.create(null);\n\n  /**\n   * @internal\n   * @beta Just for internal editor, not recommended for developers.\n   */\n  getResourceByRef<T>(ref: { refId: string; key?: string; isClone?: boolean }): Promise<T> {\n    const { refId, key, isClone } = ref;\n    const obj = this._objectPool[refId];\n    let promise;\n    if (obj) {\n      promise = Promise.resolve(obj);\n    } else {\n      let url = this._editorResourceConfig[refId]?.path;\n      if (!url) {\n        Logger.warn(`refId:${refId} is not find in this._editorResourceConfig.`);\n        return Promise.resolve(null);\n      }\n      url = key ? `${url}${url.indexOf(\"?\") > -1 ? \"&\" : \"?\"}q=${key}` : url;\n      promise = this.load<any>({\n        url,\n        type: this._editorResourceConfig[refId].type\n      });\n    }\n    return promise.then((item) => (isClone ? item.clone() : item));\n  }\n\n  /**\n   * @internal\n   * @beta Just for internal editor, not recommended for developers.\n   */\n  initVirtualResources(config: EditorResourceItem[]): void {\n    config.forEach((element) => {\n      this._virtualPathMap[element.virtualPath] = element.path;\n      this._editorResourceConfig[element.id] = element;\n    });\n  }\n  //-----------------Editor temp solution-----------------\n}\n\n/**\n * Declare ResourceLoader's decorator.\n * @param assetType - Type of asset\n * @param extnames - Name of file extension\n */\nexport function resourceLoader(assetType: string, extnames: string[], useCache: boolean = true) {\n  return <T extends Loader<any>>(Target: { new (useCache: boolean): T }) => {\n    const loader = new Target(useCache);\n    ResourceManager._addLoader(assetType, loader, extnames);\n  };\n}\n\nconst charCodeOfDot = \".\".charCodeAt(0);\nconst reEscapeChar = /\\\\(\\\\)?/g;\nconst rePropName = RegExp(\n  // Match anything that isn't a dot or bracket.\n  \"[^.[\\\\]]+\" +\n    \"|\" +\n    // Or match property names within brackets.\n    \"\\\\[(?:\" +\n    // Match a non-string expression.\n    \"([^\\\"'][^[]*)\" +\n    \"|\" +\n    // Or match strings (supports escaping characters).\n    \"([\\\"'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2\" +\n    \")\\\\]\" +\n    \"|\" +\n    // Or match \"\" as the space between consecutive dots or empty brackets.\n    \"(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))\",\n  \"g\"\n);\n\ntype EditorResourceItem = { virtualPath: string; path: string; type: string; id: string };\ntype EditorResourceConfig = Record<string, EditorResourceItem>;\n", "/**\n * High-performance unordered array, delete uses exchange method to improve performance, internal capacity only increases.\n */\nexport class DisorderedArray<T> {\n  _elements: T[];\n\n  length: number = 0;\n\n  constructor(count: number = 0) {\n    this._elements = new Array<T>(count);\n  }\n\n  add(element: T): void {\n    if (this.length === this._elements.length) this._elements.push(element);\n    else this._elements[this.length] = element;\n    this.length++;\n  }\n\n  delete(element: T): void {\n    //TODO: It can be optimized for custom binary search and other algorithms, currently this._elements>=this.length wastes performance.\n    const index = this._elements.indexOf(element);\n    this.deleteByIndex(index);\n  }\n\n  get(index: number): T {\n    if (index >= this.length) {\n      throw \"Index is out of range.\";\n    }\n    return this._elements[index];\n  }\n\n  /**\n   *\n   * @param index\n   * @returns The replaced item is used to reset its index.\n   */\n  deleteByIndex(index: number): T {\n    var elements: T[] = this._elements;\n    let end: T = null;\n    const lastIndex = this.length - 1;\n    if (index !== lastIndex) {\n      end = elements[lastIndex];\n      elements[index] = end;\n    }\n    this.length--;\n    return end;\n  }\n\n  garbageCollection(): void {\n    this._elements.length = this.length;\n  }\n}\n", "import { Camera } from \"./Camera\";\nimport { Component } from \"./Component\";\nimport { DisorderedArray } from \"./DisorderedArray\";\nimport { Renderer } from \"./Renderer\";\nimport { Script } from \"./Script\";\n\n/**\n * The manager of the components.\n */\nexport class ComponentsManager {\n  /** @internal */\n  _renderers: DisorderedArray<Renderer> = new DisorderedArray();\n\n  // Script\n  private _onStartScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _onUpdateScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _onLateUpdateScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _onPhysicsUpdateScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _disableScripts: Script[] = [];\n\n  private _pendingDestroyScripts: Script[] = [];\n  private _disposeDestroyScripts: Script[] = [];\n\n  // Animation\n  private _onUpdateAnimations: DisorderedArray<Component> = new DisorderedArray();\n\n  // Render\n  private _onUpdateRenderers: DisorderedArray<Renderer> = new DisorderedArray();\n\n  // Delay dispose active/inActive Pool\n  private _componentsContainerPool: Component[][] = [];\n\n  addRenderer(renderer: Renderer) {\n    renderer._rendererIndex = this._renderers.length;\n    this._renderers.add(renderer);\n  }\n\n  removeRenderer(renderer: Renderer) {\n    const replaced = this._renderers.deleteByIndex(renderer._rendererIndex);\n    replaced && (replaced._rendererIndex = renderer._rendererIndex);\n    renderer._rendererIndex = -1;\n  }\n\n  addOnStartScript(script: Script) {\n    script._onStartIndex = this._onStartScripts.length;\n    this._onStartScripts.add(script);\n  }\n\n  removeOnStartScript(script: Script): void {\n    const replaced = this._onStartScripts.deleteByIndex(script._onStartIndex);\n    replaced && (replaced._onStartIndex = script._onStartIndex);\n    script._onStartIndex = -1;\n  }\n\n  addOnUpdateScript(script: Script) {\n    script._onUpdateIndex = this._onUpdateScripts.length;\n    this._onUpdateScripts.add(script);\n  }\n\n  removeOnUpdateScript(script: Script): void {\n    const replaced = this._onUpdateScripts.deleteByIndex(script._onUpdateIndex);\n    replaced && (replaced._onUpdateIndex = script._onUpdateIndex);\n    script._onUpdateIndex = -1;\n  }\n\n  addOnLateUpdateScript(script: Script): void {\n    script._onLateUpdateIndex = this._onLateUpdateScripts.length;\n    this._onLateUpdateScripts.add(script);\n  }\n\n  removeOnLateUpdateScript(script: Script): void {\n    const replaced = this._onLateUpdateScripts.deleteByIndex(script._onLateUpdateIndex);\n    replaced && (replaced._onLateUpdateIndex = script._onLateUpdateIndex);\n    script._onLateUpdateIndex = -1;\n  }\n\n  addOnPhysicsUpdateScript(script: Script): void {\n    script._onPhysicsUpdateIndex = this._onPhysicsUpdateScripts.length;\n    this._onPhysicsUpdateScripts.add(script);\n  }\n\n  removeOnPhysicsUpdateScript(script: Script): void {\n    const replaced = this._onPhysicsUpdateScripts.deleteByIndex(script._onPhysicsUpdateIndex);\n    replaced && (replaced._onPhysicsUpdateIndex = script._onPhysicsUpdateIndex);\n    script._onPhysicsUpdateIndex = -1;\n  }\n\n  addOnUpdateAnimations(animation: Component): void {\n    //@ts-ignore\n    animation._onUpdateIndex = this._onUpdateAnimations.length;\n    this._onUpdateAnimations.add(animation);\n  }\n\n  removeOnUpdateAnimations(animation: Component): void {\n    //@ts-ignore\n    const replaced = this._onUpdateAnimations.deleteByIndex(animation._onUpdateIndex);\n    //@ts-ignore\n    replaced && (replaced._onUpdateIndex = animation._onUpdateIndex);\n    //@ts-ignore\n    animation._onUpdateIndex = -1;\n  }\n\n  addOnUpdateRenderers(renderer: Renderer): void {\n    renderer._onUpdateIndex = this._onUpdateRenderers.length;\n    this._onUpdateRenderers.add(renderer);\n  }\n\n  removeOnUpdateRenderers(renderer: Renderer): void {\n    const replaced = this._onUpdateRenderers.deleteByIndex(renderer._onUpdateIndex);\n    replaced && (replaced._onUpdateIndex = renderer._onUpdateIndex);\n    renderer._onUpdateIndex = -1;\n  }\n\n  addDisableScript(component: Script): void {\n    this._disableScripts.push(component);\n  }\n\n  addPendingDestroyScript(component: Script): void {\n    this._pendingDestroyScripts.push(component);\n  }\n\n  callScriptOnStart(): void {\n    const onStartScripts = this._onStartScripts;\n    if (onStartScripts.length > 0) {\n      const elements = onStartScripts._elements;\n      // The 'onStartScripts.length' maybe add if you add some Script with addComponent() in some Script's onStart()\n      for (let i = 0; i < onStartScripts.length; i++) {\n        const script = elements[i];\n        if (!script._waitHandlingInValid) {\n          script._started = true;\n          script._onStartIndex = -1;\n          script.onStart();\n        }\n      }\n      onStartScripts.length = 0;\n    }\n  }\n\n  callScriptOnUpdate(deltaTime: number): void {\n    const elements = this._onUpdateScripts._elements;\n    for (let i = this._onUpdateScripts.length - 1; i >= 0; --i) {\n      const element = elements[i];\n      if (!element._waitHandlingInValid && element._started) {\n        element.onUpdate(deltaTime);\n      }\n    }\n  }\n\n  callScriptOnLateUpdate(deltaTime: number): void {\n    const elements = this._onLateUpdateScripts._elements;\n    for (let i = this._onLateUpdateScripts.length - 1; i >= 0; --i) {\n      const element = elements[i];\n      if (!element._waitHandlingInValid && element._started) {\n        element.onLateUpdate(deltaTime);\n      }\n    }\n  }\n\n  callScriptOnPhysicsUpdate(): void {\n    const elements = this._onPhysicsUpdateScripts._elements;\n    for (let i = this._onPhysicsUpdateScripts.length - 1; i >= 0; --i) {\n      const element = elements[i];\n      if (!element._waitHandlingInValid && element._started) {\n        element.onPhysicsUpdate();\n      }\n    }\n  }\n\n  callAnimationUpdate(deltaTime: number): void {\n    const elements = this._onUpdateAnimations._elements;\n    for (let i = this._onUpdateAnimations.length - 1; i >= 0; --i) {\n      //@ts-ignore\n      elements[i].update(deltaTime);\n    }\n  }\n\n  callRendererOnUpdate(deltaTime: number): void {\n    const elements = this._onUpdateRenderers._elements;\n    for (let i = this._onUpdateRenderers.length - 1; i >= 0; --i) {\n      elements[i].update(deltaTime);\n    }\n  }\n\n  handlingInvalidScripts(): void {\n    const { _disableScripts: disableScripts } = this;\n    let length = disableScripts.length;\n    if (length > 0) {\n      for (let i = length - 1; i >= 0; i--) {\n        const disableScript = disableScripts[i];\n        disableScript._waitHandlingInValid && disableScript._handlingInValid();\n      }\n      disableScripts.length = 0;\n    }\n\n    const { _disposeDestroyScripts: pendingDestroyScripts, _pendingDestroyScripts: disposeDestroyScripts } = this;\n    this._disposeDestroyScripts = disposeDestroyScripts;\n    this._pendingDestroyScripts = pendingDestroyScripts;\n    length = disposeDestroyScripts.length;\n    if (length > 0) {\n      for (let i = length - 1; i >= 0; i--) {\n        disposeDestroyScripts[i].onDestroy();\n      }\n      disposeDestroyScripts.length = 0;\n    }\n  }\n\n  callCameraOnBeginRender(camera: Camera): void {\n    const scripts = camera.entity._scripts;\n    for (let i = scripts.length - 1; i >= 0; --i) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onBeginRender(camera);\n    }\n  }\n\n  callCameraOnEndRender(camera: Camera): void {\n    const scripts = camera.entity._scripts;\n    for (let i = scripts.length - 1; i >= 0; --i) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onEndRender(camera);\n    }\n  }\n\n  getActiveChangedTempList(): Component[] {\n    return this._componentsContainerPool.length ? this._componentsContainerPool.pop() : [];\n  }\n\n  putActiveChangedTempList(componentContainer: Component[]): void {\n    componentContainer.length = 0;\n    this._componentsContainerPool.push(componentContainer);\n  }\n}\n", "import { Component } from \"../Component\";\nimport { CloneManager } from \"./CloneManager\";\nimport { CloneMode } from \"./enums/CloneMode\";\n\n/**\n * Custom clone interface.\n */\nexport interface ICustomClone {\n  /**\n   * @internal\n   */\n  _cloneTo(target: ICustomClone): void;\n}\n\nexport class ComponentCloner {\n  /**\n   * Clone component.\n   * @param source - Clone source\n   * @param target - Clone target\n   */\n  static cloneComponent(source: Component, target: Component): void {\n    const cloneModes = CloneManager.getCloneMode(source.constructor);\n    const keys = Object.keys(source);\n    for (let i = 0, n = keys.length; i < n; i++) {\n      const k = keys[i];\n      const cloneMode = cloneModes[k];\n      switch (cloneMode) {\n        case undefined:\n        case CloneMode.Assignment:\n          target[k] = source[k];\n          break;\n        case CloneMode.Shallow:\n          const sourcePropS: Object = source[k];\n          if (sourcePropS instanceof Object) {\n            let tarProp = <Object>target[k];\n            tarProp == null && (tarProp = target[k] = sourcePropS.constructor());\n            Object.assign(tarProp, sourcePropS);\n          } else {\n            // Null or undefined and primitive type.\n            target[k] = sourcePropS;\n          }\n          break;\n        case CloneMode.Deep:\n          const sourcePropD: Object = source[k];\n          if (sourcePropD instanceof Object) {\n            let tarProp = <Object>target[k];\n            tarProp == null && (tarProp = target[k] = sourcePropD.constructor());\n            CloneManager.deepCloneObject(sourcePropD, tarProp);\n          } else {\n            // Null or undefined and primitive type.\n            target[k] = sourcePropD;\n          }\n          break;\n      }\n    }\n    if ((<any>source)._cloneTo) {\n      (<any>source)._cloneTo(target);\n    }\n  }\n}\n", "import { Component } from \"./Component\";\nimport { Entity } from \"./Entity\";\n\ntype ComponentConstructor = new (entity: Entity) => Component;\n\n/**\n * Used for component dependency registration.\n */\nexport class ComponentsDependencies {\n  /**\n   * @internal\n   */\n  private static _dependenciesMap = new Map<ComponentConstructor, ComponentConstructor[]>();\n  private static _invDependenciesMap = new Map<ComponentConstructor, ComponentConstructor[]>();\n\n  /**\n   * @internal\n   */\n  static _register(currentComponent: ComponentConstructor, dependentComponent: ComponentConstructor): void {\n    this._addDependency(currentComponent, dependentComponent, this._dependenciesMap);\n    this._addDependency(dependentComponent, currentComponent, this._invDependenciesMap);\n  }\n\n  /**\n   * @internal\n   */\n  static _addCheck(entity: Entity, type: ComponentConstructor): void {\n    // Check if there are dependent components.\n    const dependentComponents = ComponentsDependencies._dependenciesMap.get(type);\n    if (dependentComponents) {\n      for (let i = 0, n = dependentComponents.length; i < n; i++) {\n        const dependentComponent = dependentComponents[i];\n        if (!entity.getComponent(dependentComponent)) {\n          entity.addComponent(dependentComponent);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _removeCheck(entity: Entity, type: ComponentConstructor): void {\n    const invDependencies = ComponentsDependencies._invDependenciesMap.get(type);\n    if (invDependencies) {\n      for (let i = 0, len = invDependencies.length; i < len; i++) {\n        if (entity.getComponent(invDependencies[i])) {\n          throw `you should remove ${invDependencies[i]} before adding ${type}`;\n        }\n      }\n    }\n  }\n\n  private static _addDependency(\n    currentComponent: ComponentConstructor,\n    dependentComponent: ComponentConstructor,\n    map: Map<ComponentConstructor, ComponentConstructor[]>\n  ): void {\n    let components = map.get(currentComponent);\n    if (!components) {\n      components = [];\n      map.set(currentComponent, components);\n    }\n    if (components.indexOf(dependentComponent) === -1) {\n      components.push(dependentComponent);\n    }\n  }\n\n  private constructor() {}\n}\n\n/**\n * Dependent components, automatically added if they do not exist.\n * @param components -  Dependent components\n */\nexport function dependentComponents(...components: ComponentConstructor[]) {\n  return function <T extends ComponentConstructor>(target: T): void {\n    components.forEach((component) => ComponentsDependencies._register(target, component));\n  };\n}\n", "/**\n * Layer, used for bit operations.\n */\nexport enum Layer {\n  /** Layer 0. */\n  Layer0 = 0x1,\n  /** Layer 1. */\n  Layer1 = 0x2,\n  /** Layer 2. */\n  Layer2 = 0x4,\n  /** Layer 3. */\n  Layer3 = 0x8,\n  /** Layer 4. */\n  Layer4 = 0x10,\n  /** Layer 5. */\n  Layer5 = 0x20,\n  /** Layer 6. */\n  Layer6 = 0x40,\n  /** Layer 7. */\n  Layer7 = 0x80,\n  /** Layer 8. */\n  Layer8 = 0x100,\n  /** Layer 9. */\n  Layer9 = 0x200,\n  /** Layer 10. */\n  Layer10 = 0x400,\n  /** Layer 11. */\n  Layer11 = 0x800,\n  /** Layer 12. */\n  Layer12 = 0x1000,\n  /** Layer 13. */\n  Layer13 = 0x2000,\n  /** Layer 14. */\n  Layer14 = 0x4000,\n  /** Layer 15. */\n  Layer15 = 0x8000,\n  /** Layer 16. */\n  Layer16 = 0x10000,\n  /** Layer 17. */\n  Layer17 = 0x20000,\n  /** Layer 18. */\n  Layer18 = 0x40000,\n  /** Layer 19. */\n  Layer19 = 0x80000,\n  /** Layer 20. */\n  Layer20 = 0x100000,\n  /** Layer 21. */\n  Layer21 = 0x200000,\n  /** Layer 22. */\n  Layer22 = 0x400000,\n  /** Layer 23. */\n  Layer23 = 0x800000,\n  /** Layer 24. */\n  Layer24 = 0x1000000,\n  /** Layer 25. */\n  Layer25 = 0x2000000,\n  /** Layer 26. */\n  Layer26 = 0x4000000,\n  /** Layer 27. */\n  Layer27 = 0x8000000,\n  /** Layer 28. */\n  Layer28 = 0x10000000,\n  /** Layer 29. */\n  Layer29 = 0x20000000,\n  /** Layer 30. */\n  Layer30 = 0x40000000,\n  /** Layer 31. */\n  Layer31 = 0x80000000,\n  /** All layers. */\n  Everything = 0xffffffff,\n  /** None layer. */\n  Nothing = 0x0\n}\n", "import { removeFromArray } from \"./base/Util\";\nimport { UpdateFlagManager } from \"./UpdateFlagManager\";\n\n/**\n * Used to update tags.\n */\nexport abstract class UpdateFlag {\n  /** @internal */\n  _flagManagers: UpdateFlagManager[] = [];\n\n  /**\n   * Dispatch.\n   * @param bit - Bit\n   * @param param - Parameter\n   */\n  abstract dispatch(bit?: number, param?: Object): void;\n\n  /**\n   * Clear.\n   */\n  clearFromManagers(): void {\n    this._removeFromManagers();\n    this._flagManagers.length = 0;\n  }\n\n  /**\n   * Destroy.\n   */\n  destroy(): void {\n    this._removeFromManagers();\n    this._flagManagers = null;\n  }\n\n  private _removeFromManagers(): void {\n    const flagManagers = this._flagManagers;\n    for (let i = 0, n = flagManagers.length; i < n; i++) {\n      removeFromArray(flagManagers[i]._updateFlags, this);\n    }\n  }\n}\n", "import { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * Bool update flag.\n */\nexport class BoolUpdateFlag extends UpdateFlag {\n  /** Bool flag. */\n  flag: boolean = true;\n\n  /**\n   * @inheritdoc\n   */\n  dispatch(): void {\n    this.flag = true;\n  }\n}\n", "import { EngineObject } from \"./base\";\nimport { assignmentClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Entity } from \"./Entity\";\nimport { Scene } from \"./Scene\";\n\n/**\n * The base class of the components.\n */\nexport class Component extends EngineObject {\n  /** @internal */\n  @ignoreClone\n  _entity: Entity;\n  /** @internal */\n  @ignoreClone\n  _awoken: boolean = false;\n  /** @internal */\n  @ignoreClone\n  _destroyed: boolean = false;\n\n  @ignoreClone\n  private _phasedActive: boolean = false;\n  @assignmentClone\n  private _enabled: boolean = true;\n\n  /**\n   * Indicates whether the component is enabled.\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  set enabled(value: boolean) {\n    if (value !== this._enabled) {\n      this._enabled = value;\n      if (this._entity.isActiveInHierarchy) {\n        if (value) {\n          this._phasedActive = true;\n          this._onEnable();\n        } else {\n          this._phasedActive = false;\n          this._onDisable();\n        }\n      }\n    }\n  }\n\n  /**\n   * Indicates whether the component is destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  /**\n   * The entity which the component belongs to.\n   */\n  get entity(): Entity {\n    return this._entity;\n  }\n\n  /**\n   * The scene which the component's entity belongs to.\n   */\n  get scene(): Scene {\n    return this._entity.scene;\n  }\n\n  constructor(entity: Entity) {\n    super(entity.engine);\n    this._entity = entity;\n  }\n\n  /**\n   * Destroy this instance.\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n    this._entity._removeComponent(this);\n    if (this._entity.isActiveInHierarchy) {\n      this._enabled && this._onDisable();\n    }\n    this._destroyed = true;\n    this._onDestroy();\n  }\n\n  /**\n   * @internal\n   */\n  _onAwake(): void {}\n\n  /**\n   * @internal\n   */\n  _onEnable(): void {}\n\n  /**\n   * @internal\n   */\n  _onDisable(): void {}\n\n  /**\n   * @internal\n   */\n  _onDestroy(): void {}\n\n  /**\n   * @internal\n   */\n  _setActive(value: boolean): void {\n    const entity = this._entity;\n    if (value) {\n      // Awake condition is un awake && current entity is active in hierarchy\n      if (!this._awoken && entity._isActiveInHierarchy) {\n        this._awoken = true;\n        this._onAwake();\n      }\n      // Developer maybe do `isActive = false` in `onAwake` method\n      // Enable condition is phased active state is false && current compoment is active in hierarchy\n      if (!this._phasedActive && entity._isActiveInHierarchy && this._enabled) {\n        this._phasedActive = true;\n        this._onEnable();\n      }\n    } else {\n      // Disable condition is phased active state is true && current compoment is inActive in hierarchy\n      if (this._phasedActive && !(entity._isActiveInHierarchy && this._enabled)) {\n        this._phasedActive = false;\n        this._onDisable();\n      }\n    }\n  }\n}\n", "import { removeFromArray } from \"./base/Util\";\nimport { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * @internal\n */\nexport class UpdateFlagManager {\n  /** @internal */\n  _updateFlags: UpdateFlag[] = [];\n\n  private _listensers: ((type?: number, param?: Object) => void)[] = [];\n\n  /**\n   * Create a UpdateFlag.\n   * @returns - The UpdateFlag.\n   */\n  createFlag<T extends UpdateFlag>(type: new () => T): T {\n    const flag = new type();\n    this.addFlag(flag);\n    return flag;\n  }\n\n  /**\n   * Add a UpdateFlag.\n   * @param flag - The UpdateFlag.\n   */\n  addFlag(flag: UpdateFlag): void {\n    this._updateFlags.push(flag);\n    flag._flagManagers.push(this);\n  }\n\n  /**\n   * Remove a UpdateFlag.\n   * @param flag - The UpdateFlag.\n   */\n  removeFlag(flag: UpdateFlag): void {\n    const success = removeFromArray(this._updateFlags, flag);\n    if (success) {\n      removeFromArray(flag._flagManagers, this);\n    }\n  }\n\n  /**\n   * Add a listener.\n   * @param listener - The listener\n   */\n  addListener(listener: (type?: number, param?: Object) => void): void {\n    this._listensers.push(listener);\n  }\n\n  /**\n   * Remove a listener.\n   * @param listener - The listener\n   */\n  removeListener(listener: (type?: number, param?: Object) => void): void {\n    removeFromArray(this._listensers, listener);\n  }\n\n  /**\n   * Dispatch a event.\n   * @param type - Event type, usually in the form of enumeration\n   * @param param - Event param\n   */\n  dispatch(type?: number, param?: Object): void {\n    const updateFlags = this._updateFlags;\n    for (let i = updateFlags.length - 1; i >= 0; i--) {\n      updateFlags[i].dispatch(type, param);\n    }\n\n    const listeners = this._listensers;\n    for (let i = listeners.length - 1; i >= 0; i--) {\n      listeners[i](type, param);\n    }\n  }\n}\n", "import { MathUtil, Matrix, Matrix3x3, Quaternion, Vector3 } from \"@galacean/engine-math\";\nimport { BoolUpdateFlag } from \"./BoolUpdateFlag\";\nimport { assignmentClone, deepClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { Entity } from \"./Entity\";\nimport { UpdateFlagManager } from \"./UpdateFlagManager\";\n\n/**\n * Used to implement transformation related functions.\n */\nexport class Transform extends Component {\n  private static _tempQuat0: Quaternion = new Quaternion();\n  private static _tempVec30: Vector3 = new Vector3();\n  private static _tempVec31: Vector3 = new Vector3();\n  private static _tempVec32: Vector3 = new Vector3();\n  private static _tempMat30: Matrix3x3 = new Matrix3x3();\n  private static _tempMat31: Matrix3x3 = new Matrix3x3();\n  private static _tempMat32: Matrix3x3 = new Matrix3x3();\n  private static _tempMat41: Matrix = new Matrix();\n  private static _tempMat42: Matrix = new Matrix();\n\n  @deepClone\n  private _position: Vector3 = new Vector3();\n  @deepClone\n  private _rotation: Vector3 = new Vector3();\n  @deepClone\n  private _rotationQuaternion: Quaternion = new Quaternion();\n  @deepClone\n  private _scale: Vector3 = new Vector3(1, 1, 1);\n  @deepClone\n  private _worldPosition: Vector3 = new Vector3();\n  @deepClone\n  private _worldRotation: Vector3 = new Vector3();\n  @deepClone\n  private _worldRotationQuaternion: Quaternion = new Quaternion();\n  @deepClone\n  private _lossyWorldScale: Vector3 = new Vector3(1, 1, 1);\n  @deepClone\n  private _localMatrix: Matrix = new Matrix();\n  @deepClone\n  private _worldMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _isParentDirty: boolean = true;\n  @ignoreClone\n  private _parentTransformCache: Transform = null;\n  private _dirtyFlag: number = TransformModifyFlags.WmWpWeWqWs;\n\n  /** @internal */\n  @ignoreClone\n  _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n\n  /**\n   * Local position.\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    if (this._position !== value) {\n      this._position.copyFrom(value);\n    }\n  }\n\n  /**\n   * World position.\n   */\n  get worldPosition(): Vector3 {\n    const worldPosition = this._worldPosition;\n    if (this._isContainDirtyFlag(TransformModifyFlags.WorldPosition)) {\n      //@ts-ignore\n      worldPosition._onValueChanged = null;\n      if (this._getParentTransform()) {\n        this.worldMatrix.getTranslation(worldPosition);\n      } else {\n        worldPosition.copyFrom(this._position);\n      }\n      //@ts-ignore\n      worldPosition._onValueChanged = this._onWorldPositionChanged;\n      this._setDirtyFlagFalse(TransformModifyFlags.WorldPosition);\n    }\n\n    return worldPosition;\n  }\n\n  set worldPosition(value: Vector3) {\n    if (this._worldPosition !== value) {\n      this._worldPosition.copyFrom(value);\n    }\n  }\n\n  /**\n   * Local rotation, defining the rotation value in degrees.\n   * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.\n   */\n  get rotation(): Vector3 {\n    const rotation = this._rotation;\n    if (this._isContainDirtyFlag(TransformModifyFlags.LocalEuler)) {\n      //@ts-ignore\n      rotation._onValueChanged = null;\n      this._rotationQuaternion.toEuler(rotation);\n      rotation.scale(MathUtil.radToDegreeFactor); // radians to degrees\n      //@ts-ignore\n      rotation._onValueChanged = this._onRotationChanged;\n      this._setDirtyFlagFalse(TransformModifyFlags.LocalEuler);\n    }\n\n    return rotation;\n  }\n\n  set rotation(value: Vector3) {\n    if (this._rotation !== value) {\n      this._rotation.copyFrom(value);\n    }\n  }\n\n  /**\n   * World rotation, defining the rotation value in degrees.\n   * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.\n   */\n  get worldRotation(): Vector3 {\n    const worldRotation = this._worldRotation;\n    if (this._isContainDirtyFlag(TransformModifyFlags.WorldEuler)) {\n      //@ts-ignore\n      worldRotation._onValueChanged = null;\n      this.worldRotationQuaternion.toEuler(worldRotation);\n      worldRotation.scale(MathUtil.radToDegreeFactor); // Radian to angle\n      //@ts-ignore\n      worldRotation._onValueChanged = this._onWorldRotationChanged;\n      this._setDirtyFlagFalse(TransformModifyFlags.WorldEuler);\n    }\n    return worldRotation;\n  }\n\n  set worldRotation(value: Vector3) {\n    if (this._worldRotation !== value) {\n      this._worldRotation.copyFrom(value);\n    }\n  }\n\n  /**\n   * Local rotation, defining the rotation by using a unit quaternion.\n   */\n  get rotationQuaternion(): Quaternion {\n    const rotationQuaternion = this._rotationQuaternion;\n    if (this._isContainDirtyFlag(TransformModifyFlags.LocalQuat)) {\n      //@ts-ignore\n      rotationQuaternion._onValueChanged = null;\n      Quaternion.rotationEuler(\n        MathUtil.degreeToRadian(this._rotation.x),\n        MathUtil.degreeToRadian(this._rotation.y),\n        MathUtil.degreeToRadian(this._rotation.z),\n        rotationQuaternion\n      );\n      //@ts-ignore\n      rotationQuaternion._onValueChanged = this._onRotationQuaternionChanged;\n      this._setDirtyFlagFalse(TransformModifyFlags.LocalQuat);\n    }\n    return rotationQuaternion;\n  }\n\n  set rotationQuaternion(value: Quaternion) {\n    if (this._rotationQuaternion !== value) {\n      if (value.normalized) {\n        this._rotationQuaternion.copyFrom(value);\n      } else {\n        Quaternion.normalize(value, this._rotationQuaternion);\n      }\n    } else {\n      value.normalized || value.normalize();\n    }\n  }\n\n  /**\n   * World rotation, defining the rotation by using a unit quaternion.\n   */\n  get worldRotationQuaternion(): Quaternion {\n    const worldRotationQuaternion = this._worldRotationQuaternion;\n    if (this._isContainDirtyFlag(TransformModifyFlags.WorldQuat)) {\n      //@ts-ignore\n      worldRotationQuaternion._onValueChanged = null;\n      const parent = this._getParentTransform();\n      if (parent != null) {\n        Quaternion.multiply(parent.worldRotationQuaternion, this.rotationQuaternion, worldRotationQuaternion);\n      } else {\n        worldRotationQuaternion.copyFrom(this.rotationQuaternion);\n      }\n      //@ts-ignore\n      worldRotationQuaternion._onValueChanged = this._onWorldRotationQuaternionChanged;\n      this._setDirtyFlagFalse(TransformModifyFlags.WorldQuat);\n    }\n    return worldRotationQuaternion;\n  }\n\n  set worldRotationQuaternion(value: Quaternion) {\n    if (this._worldRotationQuaternion !== value) {\n      if (value.normalized) {\n        this._worldRotationQuaternion.copyFrom(value);\n      } else {\n        Quaternion.normalize(value, this._worldRotationQuaternion);\n      }\n    }\n    value.normalized || value.normalize();\n  }\n\n  /**\n   * Local scaling.\n   */\n  get scale(): Vector3 {\n    return this._scale;\n  }\n\n  set scale(value: Vector3) {\n    if (this._scale !== value) {\n      this._scale.copyFrom(value);\n    }\n  }\n\n  /**\n   * Local lossy scaling.\n   * @remarks The value obtained may not be correct under certain conditions(for example, the parent node has scaling,\n   * and the child node has a rotation), the scaling will be tilted. Vector3 cannot be used to correctly represent the scaling. Must use Matrix3x3.\n   */\n  get lossyWorldScale(): Vector3 {\n    if (this._isContainDirtyFlag(TransformModifyFlags.WorldScale)) {\n      if (this._getParentTransform()) {\n        const scaleMat = this._getScaleMatrix();\n        const e = scaleMat.elements;\n        this._lossyWorldScale.set(e[0], e[4], e[8]);\n      } else {\n        this._lossyWorldScale.copyFrom(this._scale);\n      }\n      this._setDirtyFlagFalse(TransformModifyFlags.WorldScale);\n    }\n    return this._lossyWorldScale;\n  }\n\n  /**\n   * Local matrix.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get localMatrix(): Matrix {\n    if (this._isContainDirtyFlag(TransformModifyFlags.LocalMatrix)) {\n      Matrix.affineTransformation(this._scale, this.rotationQuaternion, this._position, this._localMatrix);\n      this._setDirtyFlagFalse(TransformModifyFlags.LocalMatrix);\n    }\n    return this._localMatrix;\n  }\n\n  set localMatrix(value: Matrix) {\n    if (this._localMatrix !== value) {\n      this._localMatrix.copyFrom(value);\n    }\n\n    // @ts-ignore\n    this._position._onValueChanged = this._rotationQuaternion._onValueChanged = this._scale._onValueChanged = null;\n    this._localMatrix.decompose(this._position, this._rotationQuaternion, this._scale);\n    // @ts-ignore\n    this._position._onValueChanged = this._onPositionChanged;\n    // @ts-ignore\n    this._rotationQuaternion._onValueChanged = this._onRotationQuaternionChanged;\n    // @ts-ignore\n    this._scale._onValueChanged = this._onScaleChanged;\n\n    this._setDirtyFlagTrue(TransformModifyFlags.LocalEuler);\n    this._setDirtyFlagFalse(TransformModifyFlags.LocalMatrix | TransformModifyFlags.LocalQuat);\n    this._updateAllWorldFlag();\n  }\n\n  /**\n   * World matrix.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldMatrix(): Matrix {\n    if (this._isContainDirtyFlag(TransformModifyFlags.WorldMatrix)) {\n      const parent = this._getParentTransform();\n      if (parent) {\n        Matrix.multiply(parent.worldMatrix, this.localMatrix, this._worldMatrix);\n      } else {\n        this._worldMatrix.copyFrom(this.localMatrix);\n      }\n      this._setDirtyFlagFalse(TransformModifyFlags.WorldMatrix);\n    }\n    return this._worldMatrix;\n  }\n\n  set worldMatrix(value: Matrix) {\n    if (this._worldMatrix !== value) {\n      this._worldMatrix.copyFrom(value);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Matrix.invert(parent.worldMatrix, Transform._tempMat42);\n      Matrix.multiply(Transform._tempMat42, value, this._localMatrix);\n    } else {\n      this._localMatrix.copyFrom(value);\n    }\n    this.localMatrix = this._localMatrix;\n    this._setDirtyFlagFalse(TransformModifyFlags.WorldMatrix);\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n\n    this._onPositionChanged = this._onPositionChanged.bind(this);\n    this._onWorldPositionChanged = this._onWorldPositionChanged.bind(this);\n    this._onRotationChanged = this._onRotationChanged.bind(this);\n    this._onWorldRotationChanged = this._onWorldRotationChanged.bind(this);\n    this._onRotationQuaternionChanged = this._onRotationQuaternionChanged.bind(this);\n    this._onWorldRotationQuaternionChanged = this._onWorldRotationQuaternionChanged.bind(this);\n    this._onScaleChanged = this._onScaleChanged.bind(this);\n\n    //@ts-ignore\n    this._position._onValueChanged = this._onPositionChanged;\n    //@ts-ignore\n    this._worldPosition._onValueChanged = this._onWorldPositionChanged;\n    //@ts-ignore\n    this._rotation._onValueChanged = this._onRotationChanged;\n    //@ts-ignore\n    this._worldRotation._onValueChanged = this._onWorldRotationChanged;\n    //@ts-ignore\n    this._rotationQuaternion._onValueChanged = this._onRotationQuaternionChanged;\n    //@ts-ignore\n    this._worldRotationQuaternion._onValueChanged = this._onWorldRotationQuaternionChanged;\n    //@ts-ignore\n    this._scale._onValueChanged = this._onScaleChanged;\n  }\n\n  /**\n   * Set local position by X, Y, Z value.\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @param z - Z coordinate\n   */\n  setPosition(x: number, y: number, z: number): void {\n    this._position.set(x, y, z);\n  }\n\n  /**\n   * Set local rotation by the X, Y, Z components of the euler angle, unit in degrees.\n   * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.\n   * @param x - The angle of rotation around the X axis\n   * @param y - The angle of rotation around the Y axis\n   * @param z - The angle of rotation around the Z axis\n   */\n  setRotation(x: number, y: number, z: number): void {\n    this._rotation.set(x, y, z);\n  }\n\n  /**\n   * Set local rotation by the X, Y, Z, and W components of the quaternion.\n   * @param x - X component of quaternion\n   * @param y - Y component of quaternion\n   * @param z - Z component of quaternion\n   * @param w - W component of quaternion\n   */\n  setRotationQuaternion(x: number, y: number, z: number, w: number): void {\n    this._rotationQuaternion.set(x, y, z, w);\n  }\n\n  /**\n   * Set local scaling by scaling values along X, Y, Z axis.\n   * @param x - Scaling along X axis\n   * @param y - Scaling along Y axis\n   * @param z - Scaling along Z axis\n   */\n  setScale(x: number, y: number, z: number): void {\n    this._scale.set(x, y, z);\n  }\n\n  /**\n   * Set world position by X, Y, Z value.\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @param z - Z coordinate\n   */\n  setWorldPosition(x: number, y: number, z: number): void {\n    this._worldPosition.set(x, y, z);\n  }\n\n  /**\n   * Set world rotation by the X, Y, Z components of the euler angle, unit in degrees, Yaw/Pitch/Roll sequence.\n   * @param x - The angle of rotation around the X axis\n   * @param y - The angle of rotation around the Y axis\n   * @param z - The angle of rotation around the Z axis\n   */\n  setWorldRotation(x: number, y: number, z: number): void {\n    this._worldRotation.set(x, y, z);\n  }\n\n  /**\n   * Set local rotation by the X, Y, Z, and W components of the quaternion.\n   * @param x - X component of quaternion\n   * @param y - Y component of quaternion\n   * @param z - Z component of quaternion\n   * @param w - W component of quaternion\n   */\n  setWorldRotationQuaternion(x: number, y: number, z: number, w: number): void {\n    this._worldRotationQuaternion.set(x, y, z, w);\n  }\n\n  /**\n   * Get the forward direction in world space.\n   * @param forward - Forward vector\n   * @returns Forward vector\n   */\n  getWorldForward(forward: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    forward.set(-e[8], -e[9], -e[10]);\n    return forward.normalize();\n  }\n\n  /**\n   * Get the right direction in world space.\n   * @param right - Right vector\n   * @returns Right vector\n   */\n  getWorldRight(right: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    right.set(e[0], e[1], e[2]);\n    return right.normalize();\n  }\n\n  /**\n   * Get the up direction in world space.\n   * @param up - Up vector\n   * @returns Up vector\n   */\n  getWorldUp(up: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    up.set(e[4], e[5], e[6]);\n    return up.normalize();\n  }\n\n  /**\n   * Translate in the direction and distance of the translation.\n   * @param translation - Direction and distance of translation\n   * @param relativeToLocal = `true` - Is relative to the local coordinate system\n   */\n  translate(translation: Vector3, relativeToLocal?: boolean): void;\n\n  /**\n   * Translate some distance by x along the x axis, y along the y axis, and z along the z axis.\n   * @param x - Distance along the x axis\n   * @param y - Distance along the y axis\n   * @param z - Distance along the z axis\n   * @param relativeToLocal = `true` - Is relative to the local coordinate system\n   */\n  translate(x: number, y: number, z: number, relativeToLocal?: boolean): void;\n\n  translate(\n    translationOrX: Vector3 | number,\n    relativeToLocalOrY?: boolean | number,\n    z?: number,\n    relativeToLocal?: boolean\n  ): void {\n    if (typeof translationOrX === \"number\") {\n      const translate = Transform._tempVec30;\n      translate.set(translationOrX, <number>relativeToLocalOrY, z);\n      this._translate(translate, relativeToLocal);\n    } else {\n      this._translate(translationOrX, <boolean>relativeToLocalOrY);\n    }\n  }\n\n  /**\n   * Rotate around the passed Vector3.\n   * @param rotation - Euler angle in degrees\n   * @param relativeToLocal = `true` - Is relative to the local coordinate system\n   */\n  rotate(rotation: Vector3, relativeToLocal?: boolean): void;\n\n  /**\n   * Rotate around the passed Vector3.\n   * @param x - Rotation along x axis, in degrees\n   * @param y - Rotation along y axis, in degrees\n   * @param z - Rotation along z axis, in degrees\n   * @param relativeToLocal = `true` - Is relative to the local coordinate system\n   */\n  rotate(x: number, y: number, z: number, relativeToLocal?: boolean): void;\n\n  rotate(\n    rotationOrX: Vector3 | number,\n    relativeToLocalOrY?: boolean | number,\n    z?: number,\n    relativeToLocal?: boolean\n  ): void {\n    if (typeof rotationOrX === \"number\") {\n      this._rotateXYZ(rotationOrX, <number>relativeToLocalOrY, z, relativeToLocal);\n    } else {\n      this._rotateXYZ(rotationOrX.x, rotationOrX.y, rotationOrX.z, <boolean>relativeToLocalOrY);\n    }\n  }\n\n  /**\n   * Rotate around the specified axis according to the specified angle.\n   * @param axis - Rotate axis\n   * @param angle - Rotate angle in degrees\n   * @param relativeToLocal = `true` - Relative to local space\n   */\n  rotateByAxis(axis: Vector3, angle: number, relativeToLocal: boolean = true): void {\n    const rad = angle * MathUtil.degreeToRadFactor;\n    Quaternion.rotationAxisAngle(axis, rad, Transform._tempQuat0);\n    this._rotateByQuat(Transform._tempQuat0, relativeToLocal);\n  }\n\n  /**\n   * Rotate and ensure that the world front vector points to the target world position.\n   * @param targetPosition - Target world position\n   * @param worldUp - Up direction in world space, default is Vector3(0, 1, 0)\n   */\n  lookAt(targetPosition: Vector3, worldUp?: Vector3): void {\n    const zAxis = Transform._tempVec30;\n    Vector3.subtract(this.worldPosition, targetPosition, zAxis);\n    let axisLen = zAxis.length();\n    if (axisLen <= MathUtil.zeroTolerance) {\n      // The current position and the target position are almost the same.\n      return;\n    }\n    zAxis.scale(1 / axisLen);\n    const xAxis = Transform._tempVec31;\n    if (worldUp) {\n      Vector3.cross(worldUp, zAxis, xAxis);\n    } else {\n      xAxis.set(zAxis.z, 0, -zAxis.x);\n    }\n    axisLen = xAxis.length();\n    if (axisLen <= MathUtil.zeroTolerance) {\n      // @todo:\n      // 1.worldUp is（0,0,0）\n      // 2.worldUp is parallel to zAxis\n      return;\n    }\n    xAxis.scale(1 / axisLen);\n    const yAxis = Transform._tempVec32;\n    Vector3.cross(zAxis, xAxis, yAxis);\n\n    const rotMat = Transform._tempMat41;\n    const { elements: e } = rotMat;\n    (e[0] = xAxis.x), (e[1] = xAxis.y), (e[2] = xAxis.z);\n    (e[4] = yAxis.x), (e[5] = yAxis.y), (e[6] = yAxis.z);\n    (e[8] = zAxis.x), (e[9] = zAxis.y), (e[10] = zAxis.z);\n    rotMat.getRotation(this._worldRotationQuaternion);\n  }\n\n  /**\n   * Register world transform change flag.\n   * @returns Change flag\n   */\n  registerWorldChangeFlag(): BoolUpdateFlag {\n    return this._updateFlagManager.createFlag(BoolUpdateFlag);\n  }\n\n  /**\n   * @internal\n   */\n  _parentChange(): void {\n    this._isParentDirty = true;\n    this._updateAllWorldFlag();\n  }\n\n  /**\n   * @internal\n   */\n  _isFrontFaceInvert(): boolean {\n    const scale = this.lossyWorldScale;\n    let isInvert = scale.x < 0;\n    scale.y < 0 && (isInvert = !isInvert);\n    scale.z < 0 && (isInvert = !isInvert);\n    return isInvert;\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldPositionFlag(): void {\n    if (!this._isContainDirtyFlags(TransformModifyFlags.WmWp)) {\n      this._worldAssociatedChange(TransformModifyFlags.WmWp);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionFlag();\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldRotationQuaternion: Will trigger the world rotation (in quaternion) update of itself and all parent entities.\n   * Get worldRotation: Will trigger the world rotation(in euler and quaternion) update of itself and world rotation(in quaternion) update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldRotationFlag() {\n    if (!this._isContainDirtyFlags(TransformModifyFlags.WmWeWq)) {\n      this._worldAssociatedChange(TransformModifyFlags.WmWeWq);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndRotationFlag(); // Rotation update of parent entity will trigger world position and rotation update of all child entity.\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldRotationQuaternion: Will trigger the world rotation (in quaternion) update of itself and all parent entities.\n   * Get worldRotation: Will trigger the world rotation(in euler and quaternion) update of itself and world rotation(in quaternion) update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldPositionAndRotationFlag() {\n    if (!this._isContainDirtyFlags(TransformModifyFlags.WmWpWeWq)) {\n      this._worldAssociatedChange(TransformModifyFlags.WmWpWeWq);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndRotationFlag();\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldScale: Will trigger the scaling update of itself and all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix) to be false.\n   */\n  private _updateWorldScaleFlag() {\n    if (!this._isContainDirtyFlags(TransformModifyFlags.WmWs)) {\n      this._worldAssociatedChange(TransformModifyFlags.WmWs);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldScale: Will trigger the scaling update of itself and all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix) to be false.\n   */\n  private _updateWorldPositionAndScaleFlag(): void {\n    if (!this._isContainDirtyFlags(TransformModifyFlags.WmWpWs)) {\n      this._worldAssociatedChange(TransformModifyFlags.WmWpWs);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();\n      }\n    }\n  }\n\n  /**\n   * Update all world transform property dirty flag, the principle is the same as above.\n   */\n  private _updateAllWorldFlag(): void {\n    if (!this._isContainDirtyFlags(TransformModifyFlags.WmWpWeWqWs)) {\n      this._worldAssociatedChange(TransformModifyFlags.WmWpWeWqWs);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateAllWorldFlag();\n      }\n    }\n  }\n\n  private _getParentTransform(): Transform | null {\n    if (!this._isParentDirty) {\n      return this._parentTransformCache;\n    }\n    let parentCache: Transform = null;\n    let parent = this._entity.parent;\n    while (parent) {\n      const transform = parent.transform;\n      if (transform) {\n        parentCache = transform;\n        break;\n      } else {\n        parent = parent.parent;\n      }\n    }\n    this._parentTransformCache = parentCache;\n    this._isParentDirty = false;\n    return parentCache;\n  }\n\n  private _getScaleMatrix(): Matrix3x3 {\n    const invRotation = Transform._tempQuat0;\n    const invRotationMat = Transform._tempMat30;\n    const worldRotScaMat = Transform._tempMat31;\n    const scaMat = Transform._tempMat32;\n    worldRotScaMat.copyFromMatrix(this.worldMatrix);\n    Quaternion.invert(this.worldRotationQuaternion, invRotation);\n    Matrix3x3.rotationQuaternion(invRotation, invRotationMat);\n    Matrix3x3.multiply(invRotationMat, worldRotScaMat, scaMat);\n    return scaMat;\n  }\n\n  private _isContainDirtyFlags(targetDirtyFlags: number): boolean {\n    return (this._dirtyFlag & targetDirtyFlags) === targetDirtyFlags;\n  }\n\n  private _isContainDirtyFlag(type: number): boolean {\n    return (this._dirtyFlag & type) != 0;\n  }\n\n  private _setDirtyFlagTrue(type: number) {\n    this._dirtyFlag |= type;\n  }\n\n  private _setDirtyFlagFalse(type: number) {\n    this._dirtyFlag &= ~type;\n  }\n\n  private _worldAssociatedChange(type: number): void {\n    this._dirtyFlag |= type;\n    this._updateFlagManager.dispatch(TransformModifyFlags.WorldMatrix);\n  }\n\n  private _rotateByQuat(rotateQuat: Quaternion, relativeToLocal: boolean): void {\n    if (relativeToLocal) {\n      Quaternion.multiply(this.rotationQuaternion, rotateQuat, this._rotationQuaternion);\n    } else {\n      Quaternion.multiply(rotateQuat, this.worldRotationQuaternion, this._worldRotationQuaternion);\n    }\n  }\n\n  private _translate(translation: Vector3, relativeToLocal: boolean = true): void {\n    if (relativeToLocal) {\n      const { _tempVec30 } = Transform;\n      Vector3.transformByQuat(translation, this.worldRotationQuaternion, _tempVec30);\n      this._worldPosition.add(_tempVec30);\n    } else {\n      this._worldPosition.add(translation);\n    }\n  }\n\n  private _rotateXYZ(x: number, y: number, z: number, relativeToLocal: boolean = true): void {\n    const radFactor = MathUtil.degreeToRadFactor;\n    const rotQuat = Transform._tempQuat0;\n    Quaternion.rotationEuler(x * radFactor, y * radFactor, z * radFactor, rotQuat);\n    this._rotateByQuat(rotQuat, relativeToLocal);\n  }\n\n  @ignoreClone\n  private _onPositionChanged(): void {\n    this._setDirtyFlagTrue(TransformModifyFlags.LocalMatrix);\n    this._updateWorldPositionFlag();\n  }\n\n  @ignoreClone\n  private _onWorldPositionChanged(): void {\n    const worldPosition = this._worldPosition;\n    const parent = this._getParentTransform();\n    if (parent) {\n      Matrix.invert(parent.worldMatrix, Transform._tempMat41);\n      Vector3.transformCoordinate(worldPosition, Transform._tempMat41, this._position);\n    } else {\n      this._position.copyFrom(worldPosition);\n    }\n    this._setDirtyFlagFalse(TransformModifyFlags.WorldPosition);\n  }\n\n  @ignoreClone\n  private _onRotationChanged(): void {\n    this._setDirtyFlagTrue(TransformModifyFlags.LocalMatrix | TransformModifyFlags.LocalQuat);\n    this._setDirtyFlagFalse(TransformModifyFlags.LocalEuler);\n    this._updateWorldRotationFlag();\n  }\n\n  @ignoreClone\n  private _onWorldRotationChanged(): void {\n    const worldRotation = this._worldRotation;\n    Quaternion.rotationEuler(\n      MathUtil.degreeToRadian(worldRotation.x),\n      MathUtil.degreeToRadian(worldRotation.y),\n      MathUtil.degreeToRadian(worldRotation.z),\n      this._worldRotationQuaternion\n    );\n    this._setDirtyFlagFalse(TransformModifyFlags.WorldEuler);\n  }\n\n  @ignoreClone\n  private _onRotationQuaternionChanged(): void {\n    this._setDirtyFlagTrue(TransformModifyFlags.LocalMatrix | TransformModifyFlags.LocalEuler);\n    this._setDirtyFlagFalse(TransformModifyFlags.LocalQuat);\n    this._updateWorldRotationFlag();\n  }\n\n  @ignoreClone\n  private _onWorldRotationQuaternionChanged(): void {\n    const worldRotationQuaternion = this._worldRotationQuaternion;\n    const parent = this._getParentTransform();\n    if (parent) {\n      const invParentQuaternion = Transform._tempQuat0;\n      Quaternion.invert(parent.worldRotationQuaternion, invParentQuaternion);\n      Quaternion.multiply(invParentQuaternion, worldRotationQuaternion, this._rotationQuaternion);\n    } else {\n      this._rotationQuaternion.copyFrom(worldRotationQuaternion);\n    }\n    this._setDirtyFlagFalse(TransformModifyFlags.WorldQuat);\n  }\n\n  @ignoreClone\n  private _onScaleChanged(): void {\n    this._setDirtyFlagTrue(TransformModifyFlags.LocalMatrix);\n    this._updateWorldScaleFlag();\n  }\n}\n\n/**\n * @internal\n */\nexport enum TransformModifyFlags {\n  LocalEuler = 0x1,\n  LocalQuat = 0x2,\n  WorldPosition = 0x4,\n  WorldEuler = 0x8,\n  WorldQuat = 0x10,\n  WorldScale = 0x20,\n  LocalMatrix = 0x40,\n  WorldMatrix = 0x80,\n\n  /** WorldMatrix | WorldPosition */\n  WmWp = 0x84,\n  /** WorldMatrix | WorldEuler | WorldQuat */\n  WmWeWq = 0x98,\n  /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat */\n  WmWpWeWq = 0x9c,\n  /** WorldMatrix | WorldScale */\n  WmWs = 0xa0,\n  /** WorldMatrix | WorldPosition | WorldScale */\n  WmWpWs = 0xa4,\n  /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat | WorldScale */\n  WmWpWeWqWs = 0xbc\n}\n", "import { Matrix } from \"@galacean/engine-math\";\nimport { EngineObject } from \"./base\";\nimport { BoolUpdateFlag } from \"./BoolUpdateFlag\";\nimport { ComponentCloner } from \"./clone/ComponentCloner\";\nimport { Component } from \"./Component\";\nimport { ComponentsDependencies } from \"./ComponentsDependencies\";\nimport { DisorderedArray } from \"./DisorderedArray\";\nimport { Engine } from \"./Engine\";\nimport { Layer } from \"./Layer\";\nimport { Scene } from \"./Scene\";\nimport { Script } from \"./Script\";\nimport { Transform } from \"./Transform\";\n\n/**\n * Entity, be used as components container.\n */\nexport class Entity extends EngineObject {\n  /**\n   * @internal\n   */\n  static _findChildByName(root: Entity, name: string): Entity {\n    const children = root._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      if (child.name === name) {\n        return child;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  static _traverseSetOwnerScene(entity: Entity, scene: Scene): void {\n    entity._scene = scene;\n    const children = entity._children;\n    for (let i = entity.childCount - 1; i >= 0; i--) {\n      this._traverseSetOwnerScene(children[i], scene);\n    }\n  }\n\n  /** The name of entity. */\n  name: string;\n  /** The layer the entity belongs to. */\n  layer: Layer = Layer.Layer0;\n  /** Transform component. */\n  readonly transform: Transform;\n\n  /** @internal */\n  _isActiveInHierarchy: boolean = false;\n  /** @internal */\n  _components: Component[] = [];\n  /** @internal */\n  _scripts: DisorderedArray<Script> = new DisorderedArray<Script>();\n  /** @internal */\n  _children: Entity[] = [];\n  /** @internal */\n  _scene: Scene;\n  /** @internal */\n  _isRoot: boolean = false;\n  /** @internal */\n  _isActive: boolean = true;\n  /** @internal */\n  _siblingIndex: number = -1;\n\n  private _parent: Entity = null;\n  private _activeChangedComponents: Component[];\n\n  /**\n   * Whether to activate locally.\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  set isActive(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      if (value) {\n        const parent = this._parent;\n        if (parent?._isActiveInHierarchy || (this._isRoot && this._scene._isActiveInEngine)) {\n          this._processActive();\n        }\n      } else {\n        if (this._isActiveInHierarchy) {\n          this._processInActive();\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether it is active in the hierarchy.\n   */\n  get isActiveInHierarchy(): boolean {\n    return this._isActiveInHierarchy;\n  }\n\n  /**\n   * The parent entity.\n   */\n  get parent(): Entity {\n    return this._parent;\n  }\n\n  set parent(value: Entity) {\n    this._setParent(value);\n  }\n\n  /**\n   * The children entities\n   */\n  get children(): Readonly<Entity[]> {\n    return this._children;\n  }\n\n  /**\n   * @deprecated Please use `children.length` property instead.\n   * Number of the children entities\n   */\n  get childCount(): number {\n    return this._children.length;\n  }\n\n  /**\n   * The scene the entity belongs to.\n   */\n  get scene(): Scene {\n    return this._scene;\n  }\n\n  /**\n   * The sibling index.\n   */\n  get siblingIndex(): number {\n    return this._siblingIndex;\n  }\n\n  set siblingIndex(value: number) {\n    if (this._siblingIndex === -1) {\n      throw `The entity ${this.name} is not in the hierarchy`;\n    }\n\n    this._setSiblingIndex(this._isRoot ? this._scene._rootEntities : this._parent._children, value);\n  }\n\n  /**\n   * Create a entity.\n   * @param engine - The engine the entity belongs to\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n    this.transform = this.addComponent(Transform);\n    this._inverseWorldMatFlag = this.transform.registerWorldChangeFlag();\n  }\n\n  /**\n   * Add component based on the component type.\n   * @param type - The type of the component\n   * @returns\tThe component which has been added\n   */\n  addComponent<T extends Component>(type: new (entity: Entity) => T): T {\n    ComponentsDependencies._addCheck(this, type);\n    const component = new type(this);\n    this._components.push(component);\n    component._setActive(true);\n    return component;\n  }\n\n  /**\n   * Get component which match the type.\n   * @param type - The type of the component\n   * @returns\tThe first component which match type\n   */\n  getComponent<T extends Component>(type: new (entity: Entity) => T): T {\n    const components = this._components;\n    // @todo: should inverse traversal\n    for (let i = components.length - 1; i >= 0; i--) {\n      const component = components[i];\n      if (component instanceof type) {\n        return component;\n      }\n    }\n  }\n\n  /**\n   * Get components which match the type.\n   * @param type - The type of the component\n   * @param results - The components which match type\n   * @returns\tThe components which match type\n   */\n  getComponents<T extends Component>(type: new (entity: Entity) => T, results: T[]): T[] {\n    results.length = 0;\n    const components = this._components;\n    for (let i = 0, n = components.length; i < n; i++) {\n      const component = components[i];\n      if (component instanceof type) {\n        results.push(component);\n      }\n    }\n    return results;\n  }\n\n  /**\n   * Get the components which match the type of the entity and it's children.\n   * @param type - The component type\n   * @param results - The components collection\n   * @returns\tThe components collection which match the type\n   */\n  getComponentsIncludeChildren<T extends Component>(type: new (entity: Entity) => T, results: T[]): T[] {\n    results.length = 0;\n    this._getComponentsInChildren<T>(type, results);\n    return results;\n  }\n\n  /**\n   * Add child entity.\n   * @param child - The child entity which want to be added\n   */\n  addChild(child: Entity): void;\n\n  /**\n   * Add child entity at specified index.\n   * @param index - specified index\n   * @param child - The child entity which want to be added\n   */\n  addChild(index: number, child: Entity): void;\n\n  addChild(indexOrChild: number | Entity, child?: Entity): void {\n    let index: number;\n    if (typeof indexOrChild === \"number\") {\n      index = indexOrChild;\n    } else {\n      index = undefined;\n      child = indexOrChild;\n    }\n\n    if (child._isRoot) {\n      child._scene._removeFromEntityList(child);\n      child._isRoot = false;\n\n      this._addToChildrenList(index, child);\n      child._parent = this;\n\n      const newScene = this._scene;\n      if (child._scene !== newScene) {\n        Entity._traverseSetOwnerScene(child, newScene);\n      }\n\n      if (this._isActiveInHierarchy) {\n        !child._isActiveInHierarchy && child._isActive && child._processActive();\n      } else {\n        child._isActiveInHierarchy && child._processInActive();\n      }\n\n      child._setTransformDirty();\n    } else {\n      child._setParent(this, index);\n    }\n  }\n\n  /**\n   * Remove child entity.\n   * @param child - The child entity which want to be removed\n   */\n  removeChild(child: Entity): void {\n    child._setParent(null);\n  }\n\n  /**\n   * @deprecated Please use `children` property instead.\n   * Find child entity by index.\n   * @param index - The index of the child entity\n   * @returns\tThe component which be found\n   */\n  getChild(index: number): Entity {\n    return this._children[index];\n  }\n\n  /**\n   * Find entity by name.\n   * @param name - The name of the entity which want to be found\n   * @returns The component which be found\n   */\n  findByName(name: string): Entity {\n    if (name === this.name) {\n      return this;\n    }\n    const children = this._children;\n    for (let i = 0, n = children.length; i < n; i++) {\n      const target = children[i].findByName(name);\n      if (target) {\n        return target;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Find the entity by path.\n   * @param path - The path fo the entity eg: /entity\n   * @returns The component which be found\n   */\n  findByPath(path: string): Entity {\n    const splits = path.split(\"/\");\n    let entity: Entity = this;\n    for (let i = 0, length = splits.length; i < length; ++i) {\n      const split = splits[i];\n      if (split) {\n        entity = Entity._findChildByName(entity, split);\n        if (!entity) {\n          return null;\n        }\n      }\n    }\n    return entity;\n  }\n\n  /**\n   * Create child entity.\n   * @param name - The child entity's name\n   * @returns The child entity\n   */\n  createChild(name?: string): Entity {\n    const child = new Entity(this.engine, name);\n    child.layer = this.layer;\n    child.parent = this;\n    return child;\n  }\n\n  /**\n   * Clear children entities.\n   */\n  clearChildren(): void {\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      child._parent = null;\n      child._isActiveInHierarchy && child._processInActive();\n      Entity._traverseSetOwnerScene(child, null); // Must after child._processInActive().\n    }\n    children.length = 0;\n  }\n\n  /**\n   * Clone.\n   * @returns Cloned entity\n   */\n  clone(): Entity {\n    const cloneEntity = new Entity(this._engine, this.name);\n\n    cloneEntity._isActive = this._isActive;\n    cloneEntity.transform.localMatrix = this.transform.localMatrix;\n\n    const children = this._children;\n    for (let i = 0, len = this._children.length; i < len; i++) {\n      const child = children[i];\n      cloneEntity.addChild(child.clone());\n    }\n\n    const components = this._components;\n    for (let i = 0, n = components.length; i < n; i++) {\n      const sourceComp = components[i];\n      if (!(sourceComp instanceof Transform)) {\n        const targetComp = cloneEntity.addComponent(<new (entity: Entity) => Component>sourceComp.constructor);\n        ComponentCloner.cloneComponent(sourceComp, targetComp);\n      }\n    }\n\n    return cloneEntity;\n  }\n\n  /**\n   * Destroy self.\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n\n    super.destroy();\n    const components = this._components;\n    for (let i = components.length - 1; i >= 0; i--) {\n      components[i].destroy();\n    }\n    this._components.length = 0;\n\n    const children = this._children;\n    while (children.length > 0) {\n      children[0].destroy();\n    }\n\n    if (this._isRoot) {\n      this._scene._removeFromEntityList(this);\n      this._isRoot = false;\n    } else {\n      this._removeFromParent();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _removeComponent(component: Component): void {\n    ComponentsDependencies._removeCheck(this, component.constructor as any);\n    const components = this._components;\n    components.splice(components.indexOf(component), 1);\n  }\n\n  /**\n   * @internal\n   */\n  _addScript(script: Script) {\n    script._entityScriptsIndex = this._scripts.length;\n    this._scripts.add(script);\n  }\n\n  /**\n   * @internal\n   */\n  _removeScript(script: Script): void {\n    const replaced = this._scripts.deleteByIndex(script._entityScriptsIndex);\n    replaced && (replaced._entityScriptsIndex = script._entityScriptsIndex);\n    script._entityScriptsIndex = -1;\n  }\n\n  /**\n   * @internal\n   */\n  _removeFromParent(): void {\n    const oldParent = this._parent;\n    if (oldParent != null) {\n      const oldSibling = oldParent._children;\n      let index = this._siblingIndex;\n      oldSibling.splice(index, 1);\n      for (let n = oldSibling.length; index < n; index++) {\n        oldSibling[index]._siblingIndex--;\n      }\n      this._parent = null;\n      this._siblingIndex = -1;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _processActive(): void {\n    if (this._activeChangedComponents) {\n      throw \"Note: can't set the 'main inActive entity' active in hierarchy, if the operation is in main inActive entity or it's children script's onDisable Event.\";\n    }\n    this._activeChangedComponents = this._engine._componentsManager.getActiveChangedTempList();\n    this._setActiveInHierarchy(this._activeChangedComponents);\n    this._setActiveComponents(true);\n  }\n\n  /**\n   * @internal\n   */\n  _processInActive(): void {\n    if (this._activeChangedComponents) {\n      throw \"Note: can't set the 'main active entity' inActive in hierarchy, if the operation is in main active entity or it's children script's onEnable Event.\";\n    }\n    this._activeChangedComponents = this._engine._componentsManager.getActiveChangedTempList();\n    this._setInActiveInHierarchy(this._activeChangedComponents);\n    this._setActiveComponents(false);\n  }\n\n  private _addToChildrenList(index: number, child: Entity): void {\n    const children = this._children;\n    const childCount = children.length;\n    if (index === undefined) {\n      child._siblingIndex = childCount;\n      children.push(child);\n    } else {\n      if (index < 0 || index > childCount) {\n        throw `The index ${index} is out of child list bounds ${childCount}`;\n      }\n      child._siblingIndex = index;\n      children.splice(index, 0, child);\n      for (let i = index + 1, n = childCount + 1; i < n; i++) {\n        children[i]._siblingIndex++;\n      }\n    }\n  }\n\n  private _setParent(parent: Entity, siblingIndex?: number): void {\n    const oldParent = this._parent;\n    if (parent !== oldParent) {\n      this._removeFromParent();\n      this._parent = parent;\n      if (parent) {\n        parent._addToChildrenList(siblingIndex, this);\n\n        const parentScene = parent._scene;\n        if (this._scene !== parentScene) {\n          Entity._traverseSetOwnerScene(this, parentScene);\n        }\n\n        if (parent._isActiveInHierarchy) {\n          !this._isActiveInHierarchy && this._isActive && this._processActive();\n        } else {\n          this._isActiveInHierarchy && this._processInActive();\n        }\n      } else {\n        this._isActiveInHierarchy && this._processInActive();\n        if (oldParent) {\n          Entity._traverseSetOwnerScene(this, null);\n        }\n      }\n      this._setTransformDirty();\n    }\n  }\n\n  private _getComponentsInChildren<T extends Component>(type: new (entity: Entity) => T, results: T[]): void {\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        results.push(component);\n      }\n    }\n    for (let i = this._children.length - 1; i >= 0; i--) {\n      this._children[i]._getComponentsInChildren<T>(type, results);\n    }\n  }\n\n  private _setActiveComponents(isActive: boolean): void {\n    const activeChangedComponents = this._activeChangedComponents;\n    for (let i = 0, length = activeChangedComponents.length; i < length; ++i) {\n      activeChangedComponents[i]._setActive(isActive);\n    }\n    this._engine._componentsManager.putActiveChangedTempList(activeChangedComponents);\n    this._activeChangedComponents = null;\n  }\n\n  private _setActiveInHierarchy(activeChangedComponents: Component[]): void {\n    this._isActiveInHierarchy = true;\n    const components = this._components;\n    for (let i = components.length - 1; i >= 0; i--) {\n      const component = components[i];\n      (component.enabled || !component._awoken) && activeChangedComponents.push(component);\n    }\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      child.isActive && child._setActiveInHierarchy(activeChangedComponents);\n    }\n  }\n\n  private _setInActiveInHierarchy(activeChangedComponents: Component[]): void {\n    this._isActiveInHierarchy = false;\n    const components = this._components;\n    for (let i = components.length - 1; i >= 0; i--) {\n      const component = components[i];\n      component.enabled && activeChangedComponents.push(component);\n    }\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child: Entity = children[i];\n      child.isActive && child._setInActiveInHierarchy(activeChangedComponents);\n    }\n  }\n\n  private _setTransformDirty() {\n    if (this.transform) {\n      this.transform._parentChange();\n    } else {\n      for (let i = 0, len = this._children.length; i < len; i++) {\n        this._children[i]._setTransformDirty();\n      }\n    }\n  }\n\n  private _setSiblingIndex(sibling: Entity[], target: number): void {\n    target = Math.min(target, sibling.length - 1);\n    if (target < 0) {\n      throw `Sibling index ${target} should large than 0`;\n    }\n    if (this._siblingIndex !== target) {\n      const oldIndex = this._siblingIndex;\n      if (target < oldIndex) {\n        for (let i = oldIndex; i >= target; i--) {\n          const child = i == target ? this : sibling[i - 1];\n          sibling[i] = child;\n          child._siblingIndex = i;\n        }\n      } else {\n        for (let i = oldIndex; i <= target; i++) {\n          const child = i == target ? this : sibling[i + 1];\n          sibling[i] = child;\n          child._siblingIndex = i;\n        }\n      }\n    }\n  }\n\n  //--------------------------------------------------------------deprecated----------------------------------------------------------------\n  private _invModelMatrix: Matrix = new Matrix();\n  private _inverseWorldMatFlag: BoolUpdateFlag;\n\n  /**\n   * @deprecated\n   */\n  getInvModelMatrix(): Matrix {\n    if (this._inverseWorldMatFlag.flag) {\n      Matrix.invert(this.transform.worldMatrix, this._invModelMatrix);\n      this._inverseWorldMatFlag.flag = false;\n    }\n    return this._invModelMatrix;\n  }\n}\n", "/**\n * Color Space.\n */\nexport enum ColorSpace {\n  /** Linear color space. */\n  Linear,\n  /** Gamma color space. */\n  Gamma\n}\n", "/**\n *  The current phase of the pointer.\n */\nexport enum PointerPhase {\n  /** A Pointer pressed on the screen. */\n  Down,\n  /** A pointer moved on the screen. */\n  Move,\n  /** A Pointer pressed on the screen but hasn't moved. */\n  Stationary,\n  /** A pointer was lifted from the screen. */\n  Up,\n  /** The system cancelled tracking for the pointer. */\n  Leave\n}\n", "import { Vector2 } from \"@galacean/engine-math\";\nimport { DisorderedArray } from \"../../DisorderedArray\";\nimport { Entity } from \"../../Entity\";\nimport { PointerButton } from \"../enums/PointerButton\";\nimport { PointerPhase } from \"../enums/PointerPhase\";\n\n/**\n * Pointer.\n */\nexport class Pointer {\n  /**\n   * Unique id.\n   * @remarks Start from 0.\n   */\n  readonly id: number;\n  /** The phase of pointer. */\n  phase: PointerPhase = PointerPhase.Leave;\n  /** The button that triggers the pointer event. */\n  button: PointerButton;\n  /** The currently pressed buttons for this pointer. */\n  pressedButtons: PointerButton;\n  /** The position of the pointer in screen space pixel coordinates. */\n  position: Vector2 = new Vector2();\n  /** The change of the pointer. */\n  deltaPosition: Vector2 = new Vector2();\n  /** @internal */\n  _events: PointerEvent[] = [];\n  /** @internal */\n  _uniqueID: number;\n  /** @internal */\n  _upMap: number[] = [];\n  /** @internal */\n  _downMap: number[] = [];\n  /** @internal */\n  _upList: DisorderedArray<PointerButton> = new DisorderedArray();\n  /** @internal */\n  _downList: DisorderedArray<PointerButton> = new DisorderedArray();\n\n  private _currentPressedEntity: Entity;\n  private _currentEnteredEntity: Entity;\n\n  /** @internal */\n  _firePointerExitAndEnter(rayCastEntity: Entity): void {\n    if (this._currentEnteredEntity !== rayCastEntity) {\n      if (this._currentEnteredEntity) {\n        const scripts = this._currentEnteredEntity._scripts;\n        for (let i = scripts.length - 1; i >= 0; i--) {\n          const script = scripts.get(i);\n          script._waitHandlingInValid || script.onPointerExit(this);\n        }\n      }\n      if (rayCastEntity) {\n        const scripts = rayCastEntity._scripts;\n        for (let i = scripts.length - 1; i >= 0; i--) {\n          const script = scripts.get(i);\n          script._waitHandlingInValid || script.onPointerEnter(this);\n        }\n      }\n      this._currentEnteredEntity = rayCastEntity;\n    }\n  }\n\n  /** @internal */\n  _firePointerDown(rayCastEntity: Entity): void {\n    if (rayCastEntity) {\n      const scripts = rayCastEntity._scripts;\n      for (let i = scripts.length - 1; i >= 0; i--) {\n        const script = scripts.get(i);\n        script._waitHandlingInValid || script.onPointerDown(this);\n      }\n    }\n    this._currentPressedEntity = rayCastEntity;\n  }\n\n  /** @internal */\n  _firePointerDrag(): void {\n    if (this._currentPressedEntity) {\n      const scripts = this._currentPressedEntity._scripts;\n      for (let i = scripts.length - 1; i >= 0; i--) {\n        const script = scripts.get(i);\n        script._waitHandlingInValid || script.onPointerDrag(this);\n      }\n    }\n  }\n\n  /** @internal */\n  _firePointerUpAndClick(rayCastEntity: Entity): void {\n    const { _currentPressedEntity: pressedEntity } = this;\n    if (pressedEntity) {\n      const sameTarget = pressedEntity === rayCastEntity;\n      const scripts = pressedEntity._scripts;\n      for (let i = scripts.length - 1; i >= 0; i--) {\n        const script = scripts.get(i);\n        if (!script._waitHandlingInValid) {\n          sameTarget && script.onPointerClick(this);\n          script.onPointerUp(this);\n        }\n      }\n      this._currentPressedEntity = null;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(id: number) {\n    this.id = id;\n  }\n}\n", "import { Platform } from \"./Platform\";\n\n/**\n * System info.\n */\nexport class SystemInfo {\n  /** The platform is running on. */\n  static platform: Platform = Platform.Unknown;\n  /** The operating system is running on. */\n  static operatingSystem: string = \"\";\n\n  /**\n   * The pixel ratio of the device.\n   */\n  static get devicePixelRatio(): number {\n    return window.devicePixelRatio;\n  }\n\n  /**\n   * @internal\n   */\n  static _initialize(): void {\n    {\n      if (typeof navigator == \"undefined\") {\n        return;\n      }\n\n      const userAgent = navigator.userAgent;\n\n      if (/iPhone/i.test(userAgent)) {\n        SystemInfo.platform = Platform.IPhone;\n      } else if (/iPad/i.test(userAgent)) {\n        SystemInfo.platform = Platform.IPad;\n      } else if (/Android/i.test(userAgent)) {\n        SystemInfo.platform = Platform.Android;\n      } else if (/Macintosh/i.test(userAgent)) {\n        SystemInfo.platform = Platform.Mac;\n      }\n\n      let v: RegExpMatchArray;\n      switch (SystemInfo.platform) {\n        case Platform.IPhone:\n          v = userAgent.match(/OS (\\d+)_?(\\d+)?_?(\\d+)?/);\n          this.operatingSystem = v ? `iPhone OS ${v[1]}.${v[2] || 0}.${v[3] || 0}` : \"iPhone OS\";\n          break;\n        case Platform.IPad:\n          v = userAgent.match(/OS (\\d+)_?(\\d+)?_?(\\d+)?/);\n          this.operatingSystem = v ? `iPad OS ${v[1]}.${v[2] || 0}.${v[3] || 0}` : \"iPad OS\";\n          break;\n        case Platform.Android:\n          v = userAgent.match(/Android (\\d+).?(\\d+)?.?(\\d+)?/);\n          this.operatingSystem = v ? `Android ${v[1]}.${v[2] || 0}.${v[3] || 0}` : \"Android\";\n          break;\n        case Platform.Mac:\n          v = userAgent.match(/Mac OS X (\\d+)_?(\\d+)?_?(\\d+)?/);\n          this.operatingSystem = v ? `Mac OS X ${v[1]}.${v[2] || 0}.${v[3] || 0}` : \"Mac OS X\";\n          break;\n      }\n    }\n  }\n}\n\nSystemInfo._initialize();\n", "/**\n * The keys of the keyboard.\n * Keep up with W3C standards.(https://www.w3.org/TR/2017/CR-uievents-code-20170601/)\n */\nexport enum Keys {\n    /** `~ on a US keyboard. This is the 半角/全角/漢字 (hankaku/zenkaku/kanji) key on Japanese keyboards. */\n    Backquote,\n    /** Used for both the US \\| (on the 101-key layout) and also for the key located between the \" and Enter keys on row C of the 102-, 104- and 106-key layouts. Labelled #~ on a UK (102) keyboard. */\n    Backslash,\n    /**\tBackspace or ⌫. Labelled Delete on Apple keyboards. */\n    Backspace,\n    /** [{ on a US keyboard. */\n    BracketLeft,\n    /** ]} on a US keyboard. */\n    BracketRight,\n    /** ,< on a US keyboard. */\n    Comma,\n    /** 0) on a US keyboard. */\n    Digit0,\n    /** 1! on a US keyboard. */\n    Digit1,\n    /** 2@ on a US keyboard. */\n    Digit2,\n    /** 3# on a US keyboard. */\n    Digit3,\n    /** 4$ on a US keyboard. */\n    Digit4,\n    /** 5% on a US keyboard. */\n    Digit5,\n    /** 6^ on a US keyboard. */\n    Digit6,\n    /** 7& on a US keyboard. */\n    Digit7,\n    /** 8* on a US keyboard. */\n    Digit8,\n    /** 9( on a US keyboard. */\n    Digit9,\n    /** =+ on a US keyboard. */\n    Equal,\n    /** Located between the left Shift and Z keys. Labelled \\| on a UK keyboard. */\n    IntlBackslash,\n    /** Located between the / and right Shift keys. Labelled \\ろ (ro) on a Japanese keyboard. */\n    IntlRo,\n    /** Located between the = and Backspace keys. Labelled ¥ (yen) on a Japanese keyboard. \\/ on a Russian keyboard. */\n    IntlYen,\n    /** a on a US keyboard. Labelled q on an AZERTY (e.g., French) keyboard. */\n    KeyA,\n    /** b on a US keyboard. */\n    KeyB,\n    /** c on a US keyboard. */\n    KeyC,\n    /** d on a US keyboard. */\n    KeyD,\n    /** e on a US keyboard. */\n    KeyE,\n    /** f on a US keyboard. */\n    KeyF,\n    /** g on a US keyboard. */\n    KeyG,\n    /** h on a US keyboard. */\n    KeyH,\n    /** i on a US keyboard. */\n    KeyI,\n    /** j on a US keyboard. */\n    KeyJ,\n    /** k on a US keyboard. */\n    KeyK,\n    /** l on a US keyboard. */\n    KeyL,\n    /** m on a US keyboard. */\n    KeyM,\n    /** n on a US keyboard. */\n    KeyN,\n    /** o on a US keyboard. */\n    KeyO,\n    /** p on a US keyboard. */\n    KeyP,\n    /** q on a US keyboard. Labelled a on an AZERTY (e.g., French) keyboard. */\n    KeyQ,\n    /** r on a US keyboard. */\n    KeyR,\n    /** s on a US keyboard. */\n    KeyS,\n    /** t on a US keyboard. */\n    KeyT,\n    /** u on a US keyboard. */\n    KeyU,\n    /** v on a US keyboard. */\n    KeyV,\n    /** w on a US keyboard. Labelled z on an AZERTY (e.g., French) keyboard. */\n    KeyW,\n    /** x on a US keyboard. */\n    KeyX,\n    /** y on a US keyboard. Labelled z on a QWERTZ (e.g., German) keyboard. */\n    KeyY,\n    /** z on a US keyboard. Labelled w on an AZERTY (e.g., French) keyboard, and y on a QWERTZ (e.g., German) keyboard. */\n    KeyZ,\n    /** -_ on a US keyboard. */\n    Minus,\n    /** .> on a US keyboard. */\n    Period,\n    /** '\" on a US keyboard. */\n    Quote,\n    /** ;: on a US keyboard. */\n    Semicolon,\n    /** /? on a US keyboard. */\n    Slash,\n\n    /** Alt, Option or ⌥. */\n    AltLeft,\n    /** Alt, Option or ⌥. This is labelled AltGr key on many keyboard layouts. */\n    AltRight,\n    /** CapsLock or ⇪. */\n    CapsLock,\n    /** The application context menu key, which is typically found between the right Meta key and the right Control key. */\n    ContextMenu,\n    /** Control or ⌃. */\n    ControlLeft,\n    /** Control or ⌃. */\n    ControlRight,\n    /** Enter or ↵. Labelled Return on Apple keyboards. */\n    Enter,\n    /** The Windows, ⌘, Command or other OS symbol key. */\n    MetaLeft,\n    /** The Windows, ⌘, Command or other OS symbol key. */\n    MetaRight,\n    /** Shift or ⇧. */\n    ShiftLeft,\n    /** Shift or ⇧. */\n    ShiftRight,\n    /** Space. */\n    Space,\n    /** Tab or ⇥. */\n    Tab,\n\n    /** Japanese: 変換 (henkan). */\n    Convert,\n    /** Japanese: カタカナ/ひらがな/ローマ字 (katakana/hiragana/romaji). */\n    KanaMode,\n    /** \n     * Korean: HangulMode 한/영 (han/yeong).\n     * Japanese (Mac keyboard): かな (kana).\n     * */\n    Lang1,\n    /**\n     * \tKorean: Hanja 한자 (hanja).\n     *  Japanese (Mac keyboard): 英数 (eisu).\n     */\n    Lang2,\n    /** Japanese (word-processing keyboard): Katakana. */\n    Lang3,\n    /** Japanese (word-processing keyboard): Hiragana. */\n    Lang4,\n    /** Japanese (word-processing keyboard): Zenkaku/Hankaku. */\n    Lang5,\n    /** Japanese: 無変換 (muhenkan). */\n    NonConvert,\n\n    /** ⌦. The forward delete key. Note that on Apple keyboards, the key labelled Delete on the main part of the keyboard should be encoded as \"Backspace\". */\n    Delete,\n    /** Page Down, End or ↘. */\n    End,\n    /** Help. Not present on standard PC keyboards. */\n    Help,\n    /** Home or ↖. */\n    Home,\n    /** Insert or Ins. Not present on Apple keyboards. */\n    Insert,\n    /** Page Down, PgDn or ⇟. */\n    PageDown,\n    /** Page Up, PgUp or ⇞. */\n    PageUp,\n\n    /** ↓ */\n    ArrowDown,\n    /** ← */\n    ArrowLeft,\n    /** → */\n    ArrowRight,\n    /** ↑ */\n    ArrowUp,\n\n    /** On the Mac, the \"NumLock\" code should be used for the numpad Clear key. */\n    NumLock,\n    /** \n     * 0 Ins on a keyboard.\n     * 0 on a phone or remote control.\n     * */\n    Numpad0,\n    /**\n     * 1 End on a keyboard.\n     * 1 or 1 QZ on a phone or remote control.\n     */\n    Numpad1,\n    /**\n     * 2 ↓ on a keyboard.\n     * 2 ABC on a phone or remote control.\n     */\n    Numpad2,\n    /**\n     * 3 PgDn on a keyboard.\n     * 3 DEF on a phone or remote control.\n     */\n    Numpad3,\n    /**\n     * 4 ← on a keyboard.\n     * 4 GHI on a phone or remote control.\n     */\n    Numpad4,\n    /**\n     * 5 on a keyboard.\n     * 5 JKL on a phone or remote control.\n     */\n    Numpad5,\n    /**\n     * 6 → on a keyboard.\n     * 6 MNO on a phone or remote control.\n     */\n    Numpad6,\n    /**\n     * 7 Home on a keyboard.\n     * 7 PQRS or 7 PRS on a phone or remote control.\n     */\n    Numpad7,\n    /**\n     * 8 ↑ on a keyboard.\n     * 8 TUV on a phone or remote control.\n     */\n    Numpad8,\n    /**\n     * 9 PgUp on a keyboard.\n     * 9 WXYZ or 9 WXY on a phone or remote control.\n     */\n    Numpad9,\n    /** + */\n    NumpadAdd,\n    /** Found on the Microsoft Natural Keyboard. */\n    NumpadBackspace,\n    /** C or AC (All Clear). Also for use with numpads that have a Clear key that is separate from the NumLock key. On the Mac, the numpad Clear key should always be encoded as \"NumLock\". */\n    NumpadClear,\n    /** CE (Clear Entry) */\n    NumpadClearEntry,\n    /** , (thousands separator). For locales where the thousands separator is a \".\" (e.g., Brazil), this key may generate a .. */\n    NumpadComma,\n    /** . Del. For locales where the decimal separator is \",\" (e.g., Brazil), this key may generate a ,. */\n    NumpadDecimal,\n    /** / */\n    NumpadDivide,\n    /** Numpad Enter */\n    NumpadEnter,\n    /** = */\n    NumpadEqual,\n    /** # on a phone or remote control device. This key is typically found below the 9 key and to the right of the 0 key. */\n    NumpadHash,\n    /** M+ Add current entry to the value stored in memory. */\n    NumpadMemoryAdd,\n    /** MC Clear the value stored in memory. */\n    NumpadMemoryClear,\n    /** MR Replace the current entry with the value stored in memory. */\n    NumpadMemoryRecall,\n    /** MS Replace the value stored in memory with the current entry. */\n    NumpadMemoryStore,\n    /** M- Subtract current entry from the value stored in memory. */\n    NumpadMemorySubtract,\n    /** \n     * * on a keyboard. For use with numpads that provide mathematical operations (+, -, * and /).\n     * Use \"NumpadStar\" for the * key on phones and remote controls.\n     */\n    NumpadMultiply,\n    /** ( Found on the Microsoft Natural Keyboard. */\n    NumpadParenLeft,\n    /** ) Found on the Microsoft Natural Keyboard. */\n    NumpadParenRight,\n    /**\n     * * on a phone or remote control device. This key is typically found below the 7 key and to the left of the 0 key.\n     * Use \"NumpadMultiply\" for the * key on numeric keypads.\n     */\n    NumpadStar,\n    /** - */\n    NumpadSubtract,\n\n    /** Esc or ⎋. */\n    Escape,\n    /** F1 */\n    F1,\n    /** F2 */\n    F2,\n    /** F3 */\n    F3,\n    /** F4 */\n    F4,\n    /** F5 */\n    F5,\n    /** F6 */\n    F6,\n    /** F7 */\n    F7,\n    /** F8 */\n    F8,\n    /** F9 */\n    F9,\n    /** F10 */\n    F10,\n    /** F11 */\n    F11,\n    /** F12 */\n    F12,\n    /** F13 */\n    F13,\n    /** F14 */\n    F14,\n    /** F15 */\n    F15,\n    /** Fn This is typically a hardware key that does not generate a separate code. Most keyboards do not place this key in the function section, but it is included here to keep it with related keys. */\n    Fn,\n    /** FLock or FnLock. Function Lock key. Found on the Microsoft Natural Keyboard. */\n    FnLock,\n    /** PrtScr SysRq or Print Screen. */\n    PrintScreen,\n    /** Scroll Lock */\n    ScrollLock,\n    /** Pause Break */\n    Pause,\n\n    /** Some laptops place this key to the left of the ↑ key. */\n    BrowserBack,\n    /** Browser Favorites */\n    BrowserFavorites,\n    /** Some laptops place this key to the right of the ↑ key. */\n    BrowserForward,\n    /** Browser Home */\n    BrowserHome,\n    /** Browser Refresh */\n    BrowserRefresh,\n    /** Browser Search */\n    BrowserSearch,\n    /** Browser Stop */\n    BrowserStop,\n    /** Eject or ⏏. This key is placed in the function section on some Apple keyboards. */\n    Eject,\n    /** Sometimes labelled My Computer on the keyboard. */\n    LaunchApp1,\n    /** Sometimes labelled Calculator on the keyboard. */\n    LaunchApp2,\n    /** Launch Mail */\n    LaunchMail,\n    /** Media Play/Pause */\n    MediaPlayPause,\n    /** Media Select */\n    MediaSelect,\n    /** Media Stop */\n    MediaStop,\n    /** Media Track Next */\n    MediaTrackNext,\n    /** Media Track Previous */\n    MediaTrackPrevious,\n    /** This key is placed in the function section on some Apple keyboards, replacing the Eject key. */\n    Power,\n    /** Sleep */\n    Sleep,\n    /** Audio Volume Down */\n    AudioVolumeDown,\n    /** Audio Volume Mute */\n    AudioVolumeMute,\n    /** Audio Volume Up */\n    AudioVolumeUp,\n    /** Wake Up */\n    WakeUp,\n\n    /** Hyper */\n    Hyper,\n    /** Super */\n    Super,\n    /** Turbo */\n    Turbo,\n\n    /** Abort */\n    Abort,\n    /** Resume */\n    Resume,\n    /** Suspend */\n    Suspend,\n\n    /** Found on Sun’s USB keyboard. */\n    Again,\n    /** Found on Sun’s USB keyboard. */\n    Copy,\n    /** Found on Sun’s USB keyboard. */\n    Cut,\n    /** Found on Sun’s USB keyboard. */\n    Find,\n    /** Found on Sun’s USB keyboard. */\n    Open,\n    /** Found on Sun’s USB keyboard. */\n    Paste,\n    /** Found on Sun’s USB keyboard. */\n    Props,\n    /** Found on Sun’s USB keyboard. */\n    Select,\n    /** Found on Sun’s USB keyboard. */\n    Undo,\n\n    /** Use for dedicated ひらがな key found on some Japanese word processing keyboards. */\n    Hiragana,\n    /** Use for dedicated カタカナ key found on some Japanese word processing keyboards. */\n    Katakana,\n\n    /** This value code should be used when no other value given in this specification is appropriate. */\n    Unidentified,\n}", "import { DisorderedArray } from \"../../DisorderedArray\";\nimport { Platform } from \"../../Platform\";\nimport { SystemInfo } from \"../../SystemInfo\";\nimport { Keys } from \"../enums/Keys\";\nimport { IInput } from \"../interface/IInput\";\n\n/**\n * Keyboard Manager.\n * @internal\n */\nexport class KeyboardManager implements IInput {\n  /** @internal */\n  _curHeldDownKeyToIndexMap: number[] = [];\n  /** @internal */\n  _upKeyToFrameCountMap: number[] = [];\n  /** @internal */\n  _downKeyToFrameCountMap: number[] = [];\n\n  /** @internal */\n  _curFrameHeldDownList: DisorderedArray<Keys> = new DisorderedArray();\n  /** @internal */\n  _curFrameDownList: DisorderedArray<Keys> = new DisorderedArray();\n  /** @internal */\n  _curFrameUpList: DisorderedArray<Keys> = new DisorderedArray();\n\n  private _htmlCanvas: HTMLCanvasElement;\n  private _nativeEvents: KeyboardEvent[] = [];\n  private _hadListener: boolean = false;\n\n  /**\n   * Create a KeyboardManager.\n   */\n  constructor(htmlCanvas: HTMLCanvasElement) {\n    this._htmlCanvas = htmlCanvas;\n    // Need to set tabIndex to make the canvas focus.\n    htmlCanvas.tabIndex = htmlCanvas.tabIndex;\n    this._onKeyEvent = this._onKeyEvent.bind(this);\n    htmlCanvas.addEventListener(\"keydown\", this._onKeyEvent);\n    htmlCanvas.addEventListener(\"keyup\", this._onKeyEvent);\n    this._hadListener = true;\n  }\n\n  /**\n   * @internal\n   */\n  _update(frameCount: number): void {\n    const { _nativeEvents: nativeEvents, _curFrameDownList: curFrameDownList, _curFrameUpList: curFrameUpList } = this;\n    curFrameDownList.length = 0;\n    curFrameUpList.length = 0;\n    if (nativeEvents.length > 0) {\n      const {\n        _curHeldDownKeyToIndexMap: curHeldDownKeyToIndexMap,\n        _curFrameHeldDownList: curFrameHeldDownList,\n        _downKeyToFrameCountMap: downKeyToFrameCountMap,\n        _upKeyToFrameCountMap: upKeyToFrameCountMap\n      } = this;\n      for (let i = 0, n = nativeEvents.length; i < n; i++) {\n        const evt = nativeEvents[i];\n        const codeKey = <Keys>Keys[evt.code];\n        switch (evt.type) {\n          case \"keydown\":\n            // Filter the repeated triggers of the keyboard.\n            if (curHeldDownKeyToIndexMap[codeKey] == null) {\n              curFrameDownList.add(codeKey);\n              curFrameHeldDownList.add(codeKey);\n              curHeldDownKeyToIndexMap[codeKey] = curFrameHeldDownList.length - 1;\n              downKeyToFrameCountMap[codeKey] = frameCount;\n            }\n            break;\n          case \"keyup\":\n            const delIndex = curHeldDownKeyToIndexMap[codeKey];\n            if (delIndex != null) {\n              curHeldDownKeyToIndexMap[codeKey] = null;\n              const swapCode = curFrameHeldDownList.deleteByIndex(delIndex);\n              swapCode && (curHeldDownKeyToIndexMap[swapCode] = delIndex);\n            }\n            curFrameUpList.add(codeKey);\n            upKeyToFrameCountMap[codeKey] = frameCount;\n            // Because on the mac, the keyup event is not responded to when the meta key is held down,\n            // in order to maintain the correct keystroke record, it is necessary to clear the record\n            // when the meta key is lifted.\n            // link: https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser\n            if (SystemInfo.platform === Platform.Mac && (codeKey === Keys.MetaLeft || codeKey === Keys.MetaRight)) {\n              for (let i = 0, len = curFrameHeldDownList.length; i < len; i++) {\n                curHeldDownKeyToIndexMap[curFrameHeldDownList.get(i)] = null;\n              }\n              curFrameHeldDownList.length = 0;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n      nativeEvents.length = 0;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onFocus(): void {\n    if (!this._hadListener) {\n      this._htmlCanvas.addEventListener(\"keydown\", this._onKeyEvent);\n      this._htmlCanvas.addEventListener(\"keyup\", this._onKeyEvent);\n      this._hadListener = true;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onBlur(): void {\n    if (this._hadListener) {\n      this._htmlCanvas.removeEventListener(\"keydown\", this._onKeyEvent);\n      this._htmlCanvas.removeEventListener(\"keyup\", this._onKeyEvent);\n      this._curHeldDownKeyToIndexMap.length = 0;\n      this._curFrameHeldDownList.length = 0;\n      this._curFrameDownList.length = 0;\n      this._curFrameUpList.length = 0;\n      this._nativeEvents.length = 0;\n      this._hadListener = false;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    if (this._hadListener) {\n      this._htmlCanvas.removeEventListener(\"keydown\", this._onKeyEvent);\n      this._htmlCanvas.removeEventListener(\"keyup\", this._onKeyEvent);\n      this._hadListener = false;\n    }\n    this._curHeldDownKeyToIndexMap = null;\n    this._upKeyToFrameCountMap = null;\n    this._downKeyToFrameCountMap = null;\n    this._nativeEvents = null;\n\n    this._curFrameHeldDownList = null;\n    this._curFrameDownList = null;\n    this._curFrameUpList = null;\n  }\n\n  private _onKeyEvent(evt: KeyboardEvent): void {\n    this._nativeEvents.push(evt);\n  }\n}\n", "/**\n * Camera clear flags enumeration.\n */\nexport enum CameraClearFlags {\n  /* Do nothing. */\n  None = 0x0,\n  /* Clear color with scene background. */\n  Color = 0x1,\n  /* Clear depth only. */\n  Depth = 0x2,\n  /* Clear depth only. */\n  Stencil = 0x4,\n\n  /* Clear color with scene background and depth. */\n  ColorDepth = 0x3,\n  /* Clear color with scene background and stencil. */\n  ColorStencil = 0x5,\n  /* Clear depth and stencil. */\n  DepthStencil = 0x6,\n\n  /* Clear color with scene background, depth, and stencil. */\n  All = 0x7\n}\n", "import { Entity } from \"../Entity\";\nimport { Vector3 } from \"@galacean/engine-math\";\n\n/**\n * Structure used to get information back from a raycast or a sweep.\n */\nexport class HitResult {\n  /** The entity that was hit. */\n  entity: Entity = null;\n  /** The distance from the ray's origin to the impact point. */\n  distance: number = 0;\n  /** The impact point in world space where the ray hit the collider. */\n  point: Vector3 = new Vector3();\n  /** The normal of the surface the ray hit. */\n  normal: Vector3 = new Vector3();\n}\n", "import { ICharacterController, ICollider, IPhysics, IPhysicsManager } from \"@galacean/engine-design\";\nimport { Ray, Vector3 } from \"@galacean/engine-math\";\nimport { DisorderedArray } from \"../DisorderedArray\";\nimport { Engine } from \"../Engine\";\nimport { Layer } from \"../Layer\";\nimport { CharacterController } from \"./CharacterController\";\nimport { Collider } from \"./Collider\";\nimport { HitResult } from \"./HitResult\";\nimport { ColliderShape } from \"./shape\";\n\n/**\n * A physics manager is a collection of colliders and constraints which can interact.\n */\nexport class PhysicsManager {\n  /** @internal */\n  static _nativePhysics: IPhysics;\n  /** @internal */\n  _initialized: boolean = false;\n\n  private _engine: Engine;\n  private _restTime: number = 0;\n\n  private _colliders: DisorderedArray<Collider> = new DisorderedArray();\n\n  private _gravity: Vector3 = new Vector3(0, -9.81, 0);\n  private _nativePhysicsManager: IPhysicsManager;\n  private _physicalObjectsMap: Record<number, ColliderShape> = {};\n  private _onContactEnter = (obj1: number, obj2: number) => {\n    const shape1 = this._physicalObjectsMap[obj1];\n    const shape2 = this._physicalObjectsMap[obj2];\n\n    let scripts = shape1.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onCollisionEnter(shape2);\n    }\n\n    scripts = shape2.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onCollisionEnter(shape1);\n    }\n  };\n  private _onContactExit = (obj1: number, obj2: number) => {\n    const shape1 = this._physicalObjectsMap[obj1];\n    const shape2 = this._physicalObjectsMap[obj2];\n\n    let scripts = shape1.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onCollisionExit(shape2);\n    }\n\n    scripts = shape2.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onCollisionExit(shape1);\n    }\n  };\n  private _onContactStay = (obj1: number, obj2: number) => {\n    const shape1 = this._physicalObjectsMap[obj1];\n    const shape2 = this._physicalObjectsMap[obj2];\n\n    let scripts = shape1.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onCollisionStay(shape2);\n    }\n\n    scripts = shape2.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onCollisionStay(shape1);\n    }\n  };\n  private _onTriggerEnter = (obj1: number, obj2: number) => {\n    const shape1 = this._physicalObjectsMap[obj1];\n    const shape2 = this._physicalObjectsMap[obj2];\n\n    let scripts = shape1.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onTriggerEnter(shape2);\n    }\n\n    scripts = shape2.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onTriggerEnter(shape1);\n    }\n  };\n\n  private _onTriggerExit = (obj1: number, obj2: number) => {\n    const shape1 = this._physicalObjectsMap[obj1];\n    const shape2 = this._physicalObjectsMap[obj2];\n\n    let scripts = shape1.collider.entity._scripts;\n    for (let i = 0, n = scripts.length; i < n; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onTriggerExit(shape2);\n    }\n\n    scripts = shape2.collider.entity._scripts;\n    for (let i = 0, n = scripts.length; i < n; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onTriggerExit(shape1);\n    }\n  };\n\n  private _onTriggerStay = (obj1: number, obj2: number) => {\n    const shape1 = this._physicalObjectsMap[obj1];\n    const shape2 = this._physicalObjectsMap[obj2];\n\n    let scripts = shape1.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onTriggerStay(shape2);\n    }\n\n    scripts = shape2.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onTriggerStay(shape1);\n    }\n  };\n\n  /** The fixed time step in seconds at which physics are performed. */\n  fixedTimeStep: number = 1 / 60;\n\n  /**\n   * The max allowed time step in seconds one frame.\n   *\n   * @remarks\n   * When the frame rate is low or stutter occurs, the maximum execution time of physics will not exceed this value.\n   * So physics will slow down a bit when performance hitch occurs.\n   */\n  maxAllowedTimeStep: number = 1 / 3;\n\n  /**\n   * The gravity of physics scene.\n   */\n  get gravity(): Vector3 {\n    return this._gravity;\n  }\n\n  set gravity(value: Vector3) {\n    const gravity = this._gravity;\n    if (gravity !== value) {\n      gravity.copyFrom(value);\n    }\n  }\n\n  /**\n   * @deprecated\n   * Please use `maxAllowedTimeStep` instead.\n   */\n  get maxSumTimeStep(): number {\n    return this.maxAllowedTimeStep;\n  }\n\n  set maxSumTimeStep(value: number) {\n    this.maxAllowedTimeStep = value;\n  }\n\n  constructor(engine: Engine) {\n    this._engine = engine;\n\n    this._setGravity = this._setGravity.bind(this);\n    //@ts-ignore\n    this._gravity._onValueChanged = this._setGravity;\n  }\n\n  /**\n   * initialize PhysicsManager.\n   * @param physics - Physics Engine\n   */\n  initialize(physics: IPhysics): void {\n    if (this._initialized) {\n      return;\n    }\n    PhysicsManager._nativePhysics = physics;\n    this._nativePhysicsManager = PhysicsManager._nativePhysics.createPhysicsManager(\n      this._onContactEnter,\n      this._onContactExit,\n      this._onContactStay,\n      this._onTriggerEnter,\n      this._onTriggerExit,\n      this._onTriggerStay\n    );\n    this._initialized = true;\n  }\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param outHitResult - If true is returned, outHitResult will contain more detailed collision information\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray, outHitResult: HitResult): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray, distance: number): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @param outHitResult - If true is returned, outHitResult will contain more detailed collision information\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray, distance: number, outHitResult: HitResult): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @param layerMask - Layer mask that is used to selectively ignore Colliders when casting\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray, distance: number, layerMask: Layer): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @param layerMask - Layer mask that is used to selectively ignore Colliders when casting\n   * @param outHitResult - If true is returned, outHitResult will contain more detailed collision information\n   * @returns Returns True if the ray intersects with a collider, otherwise false.\n   */\n  raycast(ray: Ray, distance: number, layerMask: Layer, outHitResult: HitResult): boolean;\n\n  raycast(\n    ray: Ray,\n    distanceOrResult?: number | HitResult,\n    layerMaskOrResult?: Layer | HitResult,\n    outHitResult?: HitResult\n  ): boolean {\n    let hitResult: HitResult;\n\n    let distance = Number.MAX_VALUE;\n    if (typeof distanceOrResult === \"number\") {\n      distance = distanceOrResult;\n    } else if (distanceOrResult != undefined) {\n      hitResult = distanceOrResult;\n    }\n\n    let layerMask = Layer.Everything;\n    if (typeof layerMaskOrResult === \"number\") {\n      layerMask = layerMaskOrResult;\n    } else if (layerMaskOrResult != undefined) {\n      hitResult = layerMaskOrResult;\n    }\n\n    if (outHitResult) {\n      hitResult = outHitResult;\n    }\n\n    const onRaycast = (obj: number) => {\n      const shape = this._physicalObjectsMap[obj];\n      return shape.collider.entity.layer & layerMask && shape.isSceneQuery;\n    };\n\n    if (hitResult != undefined) {\n      const result = this._nativePhysicsManager.raycast(ray, distance, onRaycast, (idx, distance, position, normal) => {\n        hitResult.entity = this._physicalObjectsMap[idx]._collider.entity;\n        hitResult.distance = distance;\n        hitResult.normal.copyFrom(normal);\n        hitResult.point.copyFrom(position);\n      });\n\n      if (result) {\n        return true;\n      } else {\n        hitResult.entity = null;\n        hitResult.distance = 0;\n        hitResult.point.set(0, 0, 0);\n        hitResult.normal.set(0, 0, 0);\n        return false;\n      }\n    } else {\n      return this._nativePhysicsManager.raycast(ray, distance, onRaycast);\n    }\n  }\n\n  /**\n   * Call on every frame to update pose of objects.\n   * @internal\n   */\n  _update(deltaTime: number): void {\n    const { fixedTimeStep: fixedTimeStep, _nativePhysicsManager: nativePhysicsManager } = this;\n    const componentsManager = this._engine._componentsManager;\n\n    const simulateTime = Math.min(this.maxAllowedTimeStep, this._restTime + deltaTime);\n    const step = Math.floor(simulateTime / fixedTimeStep);\n    this._restTime = simulateTime - step * fixedTimeStep;\n    for (let i = 0; i < step; i++) {\n      componentsManager.callScriptOnPhysicsUpdate();\n      this._callColliderOnUpdate();\n      nativePhysicsManager.update(fixedTimeStep);\n      this._callColliderOnLateUpdate();\n    }\n  }\n\n  /**\n   * Add ColliderShape into the manager.\n   * @param colliderShape - The Collider Shape.\n   * @internal\n   */\n  _addColliderShape(colliderShape: ColliderShape): void {\n    this._physicalObjectsMap[colliderShape.id] = colliderShape;\n    this._nativePhysicsManager.addColliderShape(colliderShape._nativeShape);\n  }\n\n  /**\n   * Remove ColliderShape.\n   * @param colliderShape - The Collider Shape.\n   * @internal\n   */\n  _removeColliderShape(colliderShape: ColliderShape): void {\n    delete this._physicalObjectsMap[colliderShape.id];\n    this._nativePhysicsManager.removeColliderShape(colliderShape._nativeShape);\n  }\n\n  /**\n   * Add collider into the manager.\n   * @param collider - StaticCollider or DynamicCollider.\n   * @internal\n   */\n  _addCollider(collider: Collider): void {\n    if (collider._index === -1) {\n      collider._index = this._colliders.length;\n      this._colliders.add(collider);\n    }\n    this._nativePhysicsManager.addCollider(<ICollider>collider._nativeCollider);\n  }\n\n  /**\n   * Add character controller into the manager.\n   * @param controller - Character Controller.\n   * @internal\n   */\n  _addCharacterController(controller: CharacterController): void {\n    if (controller._index === -1) {\n      controller._index = this._colliders.length;\n      this._colliders.add(controller);\n    }\n    this._nativePhysicsManager.addCharacterController(<ICharacterController>controller._nativeCollider);\n  }\n\n  /**\n   * Remove collider.\n   * @param collider - StaticCollider or DynamicCollider.\n   * @internal\n   */\n  _removeCollider(collider: Collider): void {\n    const replaced = this._colliders.deleteByIndex(collider._index);\n    replaced && (replaced._index = collider._index);\n    collider._index = -1;\n    this._nativePhysicsManager.removeCollider(<ICollider>collider._nativeCollider);\n  }\n\n  /**\n   * Remove collider.\n   * @param controller - Character Controller.\n   * @internal\n   */\n  _removeCharacterController(controller: CharacterController): void {\n    const replaced = this._colliders.deleteByIndex(controller._index);\n    replaced && (replaced._index = controller._index);\n    controller._index = -1;\n    this._nativePhysicsManager.removeCharacterController(<ICharacterController>controller._nativeCollider);\n  }\n\n  /**\n   * @internal\n   */\n  _callColliderOnUpdate(): void {\n    const elements = this._colliders._elements;\n    for (let i = this._colliders.length - 1; i >= 0; --i) {\n      elements[i]._onUpdate();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _callColliderOnLateUpdate(): void {\n    const elements = this._colliders._elements;\n    for (let i = this._colliders.length - 1; i >= 0; --i) {\n      elements[i]._onLateUpdate();\n    }\n  }\n\n  private _setGravity(): void {\n    this._nativePhysicsManager.setGravity(this._gravity);\n  }\n}\n", "/**\n * Describes how physics materials of the colliding objects are combined.\n */\nexport enum PhysicsMaterialCombineMode {\n  /** Averages the friction/bounce of the two colliding materials. */\n  Average,\n  /** Uses the smaller friction/bounce of the two colliding materials. */\n  Minimum,\n  /** Multiplies the friction/bounce of the two colliding materials. */\n  Multiply,\n  /** Uses the larger friction/bounce of the two colliding materials. */\n  Maximum\n}\n", "import { IPhysicsMaterial } from \"@galacean/engine-design\";\nimport { PhysicsManager } from \"./PhysicsManager\";\nimport { PhysicsMaterialCombineMode } from \"./enums/PhysicsMaterialCombineMode\";\n\n/**\n * Material class to represent a set of surface properties.\n */\nexport class PhysicsMaterial {\n  private _bounciness: number = 0.1;\n  private _dynamicFriction: number = 0.1;\n  private _staticFriction: number = 0.1;\n  private _bounceCombine: PhysicsMaterialCombineMode = PhysicsMaterialCombineMode.Average;\n  private _frictionCombine: PhysicsMaterialCombineMode = PhysicsMaterialCombineMode.Average;\n\n  /** @internal */\n  _nativeMaterial: IPhysicsMaterial;\n\n  constructor() {\n    this._nativeMaterial = PhysicsManager._nativePhysics.createPhysicsMaterial(\n      this._staticFriction,\n      this._dynamicFriction,\n      this._bounciness,\n      this._bounceCombine,\n      this._frictionCombine\n    );\n  }\n\n  /**\n   * The coefficient of bounciness.\n   */\n  get bounciness(): number {\n    return this._bounciness;\n  }\n\n  set bounciness(value: number) {\n    if (this._bounciness !== value) {\n      this._bounciness = value;\n      this._nativeMaterial.setBounciness(value);\n    }\n  }\n\n  /**\n   * The DynamicFriction value.\n   */\n  get dynamicFriction(): number {\n    return this._dynamicFriction;\n  }\n\n  set dynamicFriction(value: number) {\n    if (this._dynamicFriction !== value) {\n      this._dynamicFriction = value;\n      this._nativeMaterial.setDynamicFriction(value);\n    }\n  }\n\n  /**\n   * The coefficient of static friction.\n   */\n  get staticFriction(): number {\n    return this._staticFriction;\n  }\n\n  set staticFriction(value: number) {\n    if (this._staticFriction !== value) {\n      this._staticFriction = value;\n      this._nativeMaterial.setStaticFriction(value);\n    }\n  }\n\n  /**\n   * The restitution combine mode.\n   */\n  get bounceCombine(): PhysicsMaterialCombineMode {\n    return this._bounceCombine;\n  }\n\n  set bounceCombine(value: PhysicsMaterialCombineMode) {\n    if (this._bounceCombine !== value) {\n      this._bounceCombine = value;\n      this._nativeMaterial.setBounceCombine(value);\n    }\n  }\n\n  /**\n   * The friction combine mode.\n   */\n  get frictionCombine(): PhysicsMaterialCombineMode {\n    return this._frictionCombine;\n  }\n\n  set frictionCombine(value: PhysicsMaterialCombineMode) {\n    if (this._frictionCombine !== value) {\n      this._frictionCombine = value;\n      this._nativeMaterial.setFrictionCombine(value);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _destroy() {\n    this._nativeMaterial.destroy();\n  }\n}\n", "import { ICollider, IStaticCollider } from \"@galacean/engine-design\";\nimport { BoolUpdateFlag } from \"../BoolUpdateFlag\";\nimport { ignoreClone } from \"../clone/CloneManager\";\nimport { Component } from \"../Component\";\nimport { dependentComponents } from \"../ComponentsDependencies\";\nimport { Entity } from \"../Entity\";\nimport { Transform } from \"../Transform\";\nimport { ColliderShape } from \"./shape/ColliderShape\";\n\n/**\n * Base class for all colliders.\n * @decorator `@dependentComponents(Transform)`\n */\n@dependentComponents(Transform)\nexport class Collider extends Component {\n  /** @internal */\n  @ignoreClone\n  _index: number = -1;\n  /** @internal */\n  _nativeCollider: ICollider;\n\n  protected _updateFlag: BoolUpdateFlag;\n  protected _shapes: ColliderShape[] = [];\n\n  /**\n   * The shapes of this collider.\n   */\n  get shapes(): Readonly<ColliderShape[]> {\n    return this._shapes;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._updateFlag = this.entity.transform.registerWorldChangeFlag();\n  }\n\n  /**\n   * Add collider shape on this collider.\n   * @param shape - Collider shape\n   */\n  addShape(shape: ColliderShape): void {\n    const oldCollider = shape._collider;\n    if (oldCollider !== this) {\n      if (oldCollider) {\n        oldCollider.removeShape(shape);\n      }\n\n      this._shapes.push(shape);\n      this.engine.physicsManager._addColliderShape(shape);\n      shape._collider = this;\n      this._nativeCollider.addShape(shape._nativeShape);\n    }\n  }\n\n  /**\n   * Remove a collider shape.\n   * @param shape - The collider shape.\n   */\n  removeShape(shape: ColliderShape): void {\n    const index = this._shapes.indexOf(shape);\n    if (index !== -1) {\n      this._shapes.splice(index, 1);\n      this.engine.physicsManager._removeColliderShape(shape);\n      shape._collider = null;\n      this._nativeCollider.removeShape(shape._nativeShape);\n    }\n  }\n\n  /**\n   * Remove all shape attached.\n   */\n  clearShapes(): void {\n    const shapes = this._shapes;\n    for (let i = 0, n = shapes.length; i < n; i++) {\n      const shape = shapes[i];\n      this.engine.physicsManager._removeColliderShape(shape);\n      shape._destroy();\n      this._nativeCollider.removeShape(shape._nativeShape);\n    }\n    shapes.length = 0;\n  }\n\n  /**\n   * @internal\n   */\n  _onUpdate(): void {\n    if (this._updateFlag.flag) {\n      const { transform } = this.entity;\n      (<IStaticCollider>this._nativeCollider).setWorldTransform(\n        transform.worldPosition,\n        transform.worldRotationQuaternion\n      );\n\n      const worldScale = transform.lossyWorldScale;\n      for (let i = 0, n = this.shapes.length; i < n; i++) {\n        this.shapes[i]._nativeShape.setWorldScale(worldScale);\n      }\n      this._updateFlag.flag = false;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onLateUpdate(): void {}\n\n  /**\n   * @override\n   * @internal\n   */\n  _onEnable(): void {\n    this.engine.physicsManager._addCollider(this);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onDisable(): void {\n    this.engine.physicsManager._removeCollider(this);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onDestroy(): void {\n    this.clearShapes();\n    this._nativeCollider.destroy();\n  }\n}\n", "/**\n * The up axis of the collider shape.\n */\nexport enum ControllerNonWalkableMode {\n  /** Stops character from climbing up non-walkable slopes, but doesn't move it otherwise. */\n  PreventClimbing,\n  /** Stops character from climbing up non-walkable slopes, and forces it to slide down those slopes. */\n  PreventClimbingAndForceSliding\n}\n", "import { ICharacterController } from \"@galacean/engine-design\";\nimport { Vector3 } from \"@galacean/engine-math\";\nimport { Entity } from \"../Entity\";\nimport { Collider } from \"./Collider\";\nimport { ControllerNonWalkableMode } from \"./enums/ControllerNonWalkableMode\";\nimport { PhysicsManager } from \"./PhysicsManager\";\nimport { ColliderShape } from \"./shape\";\n\n/**\n * The character controllers.\n */\nexport class CharacterController extends Collider {\n  /** @internal */\n  _index: number = -1;\n\n  private _stepOffset: number = 0.5;\n  private _nonWalkableMode: ControllerNonWalkableMode = ControllerNonWalkableMode.PreventClimbing;\n  private _upDirection = new Vector3(0, 1, 0);\n  private _slopeLimit: number = 0.707;\n\n  /**\n   * The step offset for the controller.\n   */\n  get stepOffset(): number {\n    return this._stepOffset;\n  }\n\n  set stepOffset(value: number) {\n    if (this._stepOffset !== value) {\n      this._stepOffset = value;\n      (<ICharacterController>this._nativeCollider).setStepOffset(value);\n    }\n  }\n\n  /**\n   * The value of the non-walkable mode.\n   */\n  get nonWalkableMode(): ControllerNonWalkableMode {\n    return this._nonWalkableMode;\n  }\n\n  set nonWalkableMode(value: ControllerNonWalkableMode) {\n    if (this._nonWalkableMode !== value) {\n      this._nonWalkableMode = value;\n      (<ICharacterController>this._nativeCollider).setNonWalkableMode(value);\n    }\n  }\n\n  /**\n   * The up direction for the controller.\n   */\n  get upDirection(): Vector3 {\n    return this._upDirection;\n  }\n\n  set upDirection(value: Vector3) {\n    if (this._upDirection !== value) {\n      this._upDirection.copyFrom(value);\n    }\n  }\n\n  /**\n   * The slope limit for the controller.\n   */\n  get slopeLimit(): number {\n    return this._slopeLimit;\n  }\n\n  set slopeLimit(value: number) {\n    if (this._slopeLimit !== value) {\n      this._slopeLimit = value;\n      (<ICharacterController>this._nativeCollider).setSlopeLimit(value);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    (<ICharacterController>this._nativeCollider) = PhysicsManager._nativePhysics.createCharacterController();\n\n    this._setUpDirection = this._setUpDirection.bind(this);\n    //@ts-ignore\n    this._upDirection._onValueChanged = this._setUpDirection;\n  }\n\n  /**\n   * Moves the character using a \"collide-and-slide\" algorithm.\n   * @param disp - Displacement vector\n   * @param minDist - The minimum travelled distance to consider.\n   * @param elapsedTime - Time elapsed since last call\n   * @return flags - The ControllerCollisionFlag\n   */\n  move(disp: Vector3, minDist: number, elapsedTime: number): number {\n    return (<ICharacterController>this._nativeCollider).move(disp, minDist, elapsedTime);\n  }\n\n  /**\n   * Add collider shape on this controller.\n   * @param shape - Collider shape\n   * @override\n   */\n  addShape(shape: ColliderShape): void {\n    if (this._shapes.length > 0) {\n      throw \"only allow single shape on controller!\";\n    }\n    super.addShape(shape);\n    this._updateFlag.flag = true;\n  }\n\n  /**\n   * Remove all shape attached.\n   * @override\n   */\n  clearShapes(): void {\n    if (this._shapes.length > 0) {\n      super.removeShape(this._shapes[0]);\n    }\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onUpdate() {\n    if (this._updateFlag.flag) {\n      const { transform } = this.entity;\n      const shapes = this.shapes;\n      (<ICharacterController>this._nativeCollider).setWorldPosition(transform.worldPosition);\n\n      const worldScale = transform.lossyWorldScale;\n      for (let i = 0, n = shapes.length; i < n; i++) {\n        shapes[i]._nativeShape.setWorldScale(worldScale);\n      }\n      this._updateFlag.flag = false;\n    }\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onLateUpdate() {\n    const position = this.entity.transform.worldPosition;\n    (<ICharacterController>this._nativeCollider).getWorldPosition(position);\n    this.entity.transform.worldPosition = position;\n    this._updateFlag.flag = false;\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onEnable() {\n    this.engine.physicsManager._addCharacterController(this);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onDisable() {\n    this.engine.physicsManager._removeCharacterController(this);\n  }\n\n  private _setUpDirection(): void {\n    (<ICharacterController>this._nativeCollider).setUpDirection(this._upDirection);\n  }\n}\n", "import { IColliderShape } from \"@galacean/engine-design\";\nimport { PhysicsMaterial } from \"../PhysicsMaterial\";\nimport { Vector3 } from \"@galacean/engine-math\";\nimport { Collider } from \"../Collider\";\n\n/**\n * Abstract class for collider shapes.\n */\nexport abstract class ColliderShape {\n  private static _idGenerator: number = 0;\n\n  /** @internal */\n  _collider: Collider;\n  /** @internal */\n  _nativeShape: IColliderShape;\n\n  protected _id: number;\n  protected _material: PhysicsMaterial;\n  private _isTrigger: boolean = false;\n  private _rotation: Vector3 = new Vector3();\n  private _position: Vector3 = new Vector3();\n  private _contactOffset: number = 0.02;\n\n  /**\n   * @internal\n   * @beta\n   * Whether raycast can select it.\n   */\n  isSceneQuery: boolean = true;\n\n  /**\n   * Collider owner of this shape.\n   */\n  get collider(): Collider {\n    return this._collider;\n  }\n\n  /**\n   * Unique id for this shape.\n   */\n  get id(): number {\n    return this._id;\n  }\n\n  /**\n   * Contact offset for this shape.\n   */\n  get contactOffset(): number {\n    return this._contactOffset;\n  }\n\n  set contactOffset(value: number) {\n    if (this._contactOffset !== value) {\n      this._contactOffset = value;\n      this._nativeShape.setContactOffset(value);\n    }\n  }\n\n  /**\n   * Physical material.\n   */\n  get material(): PhysicsMaterial {\n    return this._material;\n  }\n\n  set material(value: PhysicsMaterial) {\n    if (this._material !== value) {\n      this._material = value;\n      this._nativeShape.setMaterial(value._nativeMaterial);\n    }\n  }\n\n  /**\n   * The local rotation of this ColliderShape.\n   */\n  get rotation(): Vector3 {\n    return this._rotation;\n  }\n\n  set rotation(value: Vector3) {\n    if (this._rotation != value) {\n      this._rotation.copyFrom(value);\n    }\n  }\n\n  /**\n   * The local position of this ColliderShape.\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    if (this._position !== value) {\n      this._position.copyFrom(value);\n    }\n  }\n\n  /**\n   * True for TriggerShape, false for SimulationShape.\n   */\n  get isTrigger(): boolean {\n    return this._isTrigger;\n  }\n\n  set isTrigger(value: boolean) {\n    if (this._isTrigger !== value) {\n      this._isTrigger = value;\n      this._nativeShape.setIsTrigger(value);\n    }\n  }\n\n  protected constructor() {\n    this._material = new PhysicsMaterial();\n    this._id = ColliderShape._idGenerator++;\n\n    this._setRotation = this._setRotation.bind(this);\n    this._setPosition = this._setPosition.bind(this);\n    //@ts-ignore\n    this._rotation._onValueChanged = this._setRotation;\n    //@ts-ignore\n    this._position._onValueChanged = this._setPosition;\n  }\n\n  /**\n   * @internal\n   */\n  _destroy() {\n    this._material._destroy();\n    this._nativeShape.destroy();\n  }\n\n  private _setPosition(): void {\n    this._nativeShape.setPosition(this._position);\n  }\n\n  private _setRotation(): void {\n    this._nativeShape.setRotation(this._rotation);\n  }\n}\n", "import { ColliderShape } from \"./ColliderShape\";\nimport { IBoxColliderShape } from \"@galacean/engine-design\";\nimport { Vector3 } from \"@galacean/engine-math\";\nimport { PhysicsManager } from \"../PhysicsManager\";\n\n/**\n * Physical collider shape for box.\n */\nexport class BoxColliderShape extends ColliderShape {\n  private _size: Vector3 = new Vector3(1, 1, 1);\n\n  /**\n   * Size of box shape.\n   */\n  get size(): Vector3 {\n    return this._size;\n  }\n\n  set size(value: Vector3) {\n    if (this._size !== value) {\n      this._size.copyFrom(value);\n    }\n  }\n\n  constructor() {\n    super();\n    this._nativeShape = PhysicsManager._nativePhysics.createBoxColliderShape(\n      this._id,\n      this._size,\n      this._material._nativeMaterial\n    );\n\n    this._setSize = this._setSize.bind(this);\n    //@ts-ignore\n    this._size._onValueChanged = this._setSize;\n  }\n\n  private _setSize(): void {\n    (<IBoxColliderShape>this._nativeShape).setSize(this._size);\n  }\n}\n", "import { ColliderShape } from \"./ColliderShape\";\nimport { ISphereColliderShape } from \"@galacean/engine-design\";\nimport { PhysicsManager } from \"../PhysicsManager\";\n\n/**\n * Physical collider shape for sphere.\n */\nexport class SphereColliderShape extends ColliderShape {\n  private _radius: number = 1;\n\n  /**\n   * Radius of sphere shape.\n   */\n  get radius(): number {\n    return this._radius;\n  }\n\n  set radius(value: number) {\n    if (this._radius !== value) {\n      this._radius = value;\n      (<ISphereColliderShape>this._nativeShape).setRadius(value);\n    }\n  }\n\n  constructor() {\n    super();\n    this._nativeShape = PhysicsManager._nativePhysics.createSphereColliderShape(\n      this._id,\n      this._radius,\n      this._material._nativeMaterial\n    );\n  }\n}\n", "import { PhysicsManager } from \"../PhysicsManager\";\nimport { ColliderShape } from \"./ColliderShape\";\n\n/**\n * Physical collider shape plane.\n */\nexport class PlaneColliderShape extends ColliderShape {\n  constructor() {\n    super();\n    this._nativeShape = PhysicsManager._nativePhysics.createPlaneColliderShape(\n      this._id,\n      this._material._nativeMaterial\n    );\n  }\n}\n", "/**\n * The up axis of the collider shape.\n */\nexport enum ColliderShapeUpAxis {\n  /** Up axis is X. */\n  X,\n  /** Up axis is Y. */\n  Y,\n  /** Up axis is Z. */\n  Z\n}", "import { ColliderShape } from \"./ColliderShape\";\nimport { ICapsuleColliderShape } from \"@galacean/engine-design\";\nimport { PhysicsManager } from \"../PhysicsManager\";\nimport { ColliderShapeUpAxis } from \"../enums/ColliderShapeUpAxis\";\n\n/**\n * Physical collider shape for capsule.\n */\nexport class CapsuleColliderShape extends ColliderShape {\n  private _radius: number = 1;\n  private _height: number = 2;\n  private _upAxis: ColliderShapeUpAxis = ColliderShapeUpAxis.Y;\n\n  /**\n   * Radius of capsule.\n   */\n  get radius(): number {\n    return this._radius;\n  }\n\n  set radius(value: number) {\n    if (this._radius !== value) {\n      this._radius = value;\n      (<ICapsuleColliderShape>this._nativeShape).setRadius(value);\n    }\n  }\n\n  /**\n   * Height of capsule.\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  set height(value: number) {\n    if (this._height !== value) {\n      this._height = value;\n      (<ICapsuleColliderShape>this._nativeShape).setHeight(value);\n    }\n  }\n\n  /**\n   * Up axis of capsule.\n   */\n  get upAxis(): ColliderShapeUpAxis {\n    return this._upAxis;\n  }\n\n  set upAxis(value: ColliderShapeUpAxis) {\n    if (this._upAxis !== value) {\n      this._upAxis = value;\n      (<ICapsuleColliderShape>this._nativeShape).setUpAxis(value);\n    }\n  }\n\n  constructor() {\n    super();\n    this._nativeShape = PhysicsManager._nativePhysics.createCapsuleColliderShape(\n      this._id,\n      this._radius,\n      this._height,\n      this._material._nativeMaterial\n    );\n  }\n}\n", "import { IJoint } from \"@galacean/engine-design\";\nimport { Vector3, Quaternion } from \"@galacean/engine-math\";\nimport { Component } from \"../../Component\";\nimport { Collider } from \"../Collider\";\nimport { dependentComponents } from \"../../ComponentsDependencies\";\nimport { Entity } from \"../../Entity\";\n\n/**\n * A base class providing common functionality for joints.\n * @decorator `@dependentComponents(Collider)`\n */\n@dependentComponents(Collider)\nexport class Joint extends Component {\n  protected _connectedCollider = new JointCollider();\n  protected _collider = new JointCollider();\n  protected _nativeJoint: IJoint;\n  private _force: number = 0;\n  private _torque: number = 0;\n\n  /**\n   * The connected collider.\n   */\n  get connectedCollider(): Collider {\n    return this._connectedCollider.collider;\n  }\n\n  set connectedCollider(value: Collider) {\n    if (this._connectedCollider.collider !== value) {\n      this._connectedCollider.collider = value;\n      this._nativeJoint.setConnectedCollider(value._nativeCollider);\n    }\n  }\n\n  /**\n   * The connected anchor position.\n   * @remarks If connectedCollider is set, this anchor is relative offset, or the anchor is world position.\n   */\n  get connectedAnchor(): Vector3 {\n    return this._connectedCollider.localPosition;\n  }\n\n  set connectedAnchor(value: Vector3) {\n    const connectedAnchor = this._connectedCollider.localPosition;\n    if (value !== connectedAnchor) {\n      connectedAnchor.copyFrom(value);\n    }\n    this._nativeJoint.setConnectedAnchor(value);\n  }\n\n  /**\n   *  The scale to apply to the inverse mass of collider 0 for resolving this constraint.\n   */\n  get connectedMassScale(): number {\n    return this._connectedCollider.massScale;\n  }\n\n  set connectedMassScale(value: number) {\n    if (value !== this._connectedCollider.massScale) {\n      this._connectedCollider.massScale = value;\n      this._nativeJoint.setConnectedMassScale(value);\n    }\n  }\n\n  /**\n   * The scale to apply to the inverse inertia of collider0 for resolving this constraint.\n   */\n  get connectedInertiaScale(): number {\n    return this._connectedCollider.inertiaScale;\n  }\n\n  set connectedInertiaScale(value: number) {\n    if (value !== this._connectedCollider.inertiaScale) {\n      this._connectedCollider.inertiaScale = value;\n      this._nativeJoint.setConnectedInertiaScale(value);\n    }\n  }\n\n  /**\n   * The scale to apply to the inverse mass of collider 1 for resolving this constraint.\n   */\n  get massScale(): number {\n    return this._collider.massScale;\n  }\n\n  set massScale(value: number) {\n    if (value !== this._collider.massScale) {\n      this._collider.massScale = value;\n      this._nativeJoint.setMassScale(value);\n    }\n  }\n\n  /**\n   * The scale to apply to the inverse inertia of collider1 for resolving this constraint.\n   */\n  get inertiaScale(): number {\n    return this._collider.inertiaScale;\n  }\n\n  set inertiaScale(value: number) {\n    if (value !== this._collider.inertiaScale) {\n      this._collider.inertiaScale = value;\n      this._nativeJoint.setInertiaScale(value);\n    }\n  }\n\n  /**\n   * The maximum force the joint can apply before breaking.\n   */\n  get breakForce(): number {\n    return this._force;\n  }\n\n  set breakForce(value: number) {\n    if (value !== this._force) {\n      this._force = value;\n      this._nativeJoint.setBreakForce(value);\n    }\n  }\n\n  /**\n   * The maximum torque the joint can apply before breaking.\n   */\n  get breakTorque(): number {\n    return this._torque;\n  }\n\n  set breakTorque(value: number) {\n    if (value !== this._torque) {\n      this._torque = value;\n      this._nativeJoint.setBreakTorque(value);\n    }\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n    this._connectedCollider.localPosition = new Vector3();\n  }\n}\n\n/**\n * @internal\n */\nclass JointCollider {\n  collider: Collider = null;\n  localPosition: Vector3;\n  localRotation: Quaternion;\n  massScale: number = 0;\n  inertiaScale: number = 0;\n}\n", "import { Joint } from \"./Joint\";\nimport { PhysicsManager } from \"../PhysicsManager\";\nimport { Collider } from \"../Collider\";\n\n/*\n * A fixed joint permits no relative movement between two colliders. ie the colliders are glued together.\n */\nexport class FixedJoint extends Joint {\n  /**\n   * @override\n   * @internal\n   */\n  _onAwake() {\n    const collider = this._collider;\n    collider.collider = this.entity.getComponent(Collider);\n    this._nativeJoint = PhysicsManager._nativePhysics.createFixedJoint(collider.collider._nativeCollider);\n  }\n}\n", "/**\n * Flags specific to the Hinge Joint.\n * @internal\n */\nexport enum HingeJointFlag {\n  /** enable the limit */\n  LimitEnabled = 1,\n  /** enable the drive */\n  DriveEnabled = 2,\n  /** if the existing velocity is beyond the drive velocity, do not add force */\n  DriveFreeSpin = 4\n}\n", "import { Joint } from \"./Joint\";\nimport { IHingeJoint } from \"@galacean/engine-design\";\nimport { PhysicsManager } from \"../PhysicsManager\";\nimport { HingeJointFlag } from \"../enums/HingeJointFlag\";\nimport { Collider } from \"../Collider\";\nimport { Vector3 } from \"@galacean/engine-math\";\nimport { JointMotor } from \"./JointMotor\";\nimport { JointLimits } from \"./JointLimits\";\n\n/**\n * A joint which behaves in a similar way to a hinge or axle.\n */\nexport class HingeJoint extends Joint {\n  private _axis: Vector3 = new Vector3(1, 0, 0);\n  private _hingeFlags: number = 0;\n  private _useSpring: boolean = false;\n  private _jointMonitor: JointMotor;\n  private _limits: JointLimits;\n\n  /**\n   * The anchor rotation.\n   */\n  get axis(): Vector3 {\n    return this._axis;\n  }\n\n  set axis(value: Vector3) {\n    const axis = this._axis;\n    if (value !== axis) {\n      axis.copyFrom(value);\n    }\n    (<IHingeJoint>this._nativeJoint).setAxis(axis);\n  }\n\n  /**\n   * The swing offset.\n   */\n  get swingOffset(): Vector3 {\n    return this._collider.localPosition;\n  }\n\n  set swingOffset(value: Vector3) {\n    const swingOffset = this._collider.localPosition;\n    if (value !== swingOffset) {\n      swingOffset.copyFrom(value);\n    }\n    (<IHingeJoint>this._nativeJoint).setSwingOffset(swingOffset);\n  }\n\n  /**\n   * The current angle in degrees of the joint relative to its rest position.\n   */\n  get angle(): number {\n    return (<IHingeJoint>this._nativeJoint).getAngle();\n  }\n\n  /**\n   * The angular velocity of the joint in degrees per second.\n   */\n  get velocity(): Readonly<Vector3> {\n    return (<IHingeJoint>this._nativeJoint).getVelocity();\n  }\n\n  /**\n   * Enables the joint's limits. Disabled by default.\n   */\n  get useLimits(): boolean {\n    return (this._hingeFlags & HingeJointFlag.LimitEnabled) == HingeJointFlag.LimitEnabled;\n  }\n\n  set useLimits(value: boolean) {\n    if (value !== this.useLimits) {\n      this._hingeFlags |= HingeJointFlag.LimitEnabled;\n    }\n    (<IHingeJoint>this._nativeJoint).setHingeJointFlag(HingeJointFlag.LimitEnabled, value);\n  }\n\n  /**\n   * Enables the joint's motor. Disabled by default.\n   */\n  get useMotor(): boolean {\n    return (this._hingeFlags & HingeJointFlag.DriveEnabled) == HingeJointFlag.DriveEnabled;\n  }\n\n  set useMotor(value: boolean) {\n    if (value !== this.useMotor) {\n      this._hingeFlags |= HingeJointFlag.DriveEnabled;\n    }\n    (<IHingeJoint>this._nativeJoint).setHingeJointFlag(HingeJointFlag.DriveEnabled, value);\n  }\n\n  /**\n   * Enables the joint's spring. Disabled by default.\n   */\n  get useSpring(): boolean {\n    return this._useSpring;\n  }\n\n  set useSpring(value: boolean) {\n    if (this._useSpring !== value) {\n      this._useSpring = value;\n      this.limits = this._limits;\n    }\n  }\n\n  /**\n   * The motor will apply a force up to a maximum force to achieve the target velocity in degrees per second.\n   */\n  get motor(): JointMotor {\n    return this._jointMonitor;\n  }\n\n  set motor(value: JointMotor) {\n    if (this._jointMonitor !== value) {\n      this._jointMonitor = value;\n      (<IHingeJoint>this._nativeJoint).setDriveVelocity(value.targetVelocity);\n      (<IHingeJoint>this._nativeJoint).setDriveForceLimit(value.forceLimit);\n      (<IHingeJoint>this._nativeJoint).setDriveGearRatio(value.gearRation);\n      (<IHingeJoint>this._nativeJoint).setHingeJointFlag(HingeJointFlag.DriveFreeSpin, value.freeSpin);\n    }\n  }\n\n  /**\n   * Limit of angular rotation (in degrees) on the hinge joint.\n   */\n  get limits(): JointLimits {\n    return this._limits;\n  }\n\n  set limits(value: JointLimits) {\n    if (this._limits !== value) {\n      this._limits = value;\n      if (this.useSpring) {\n        (<IHingeJoint>this._nativeJoint).setSoftLimit(value.min, value.max, value.stiffness, value.damping);\n      } else {\n        (<IHingeJoint>this._nativeJoint).setHardLimit(value.min, value.max, value.contactDistance);\n      }\n    }\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onAwake() {\n    const collider = this._collider;\n    collider.localPosition = new Vector3();\n    collider.collider = this.entity.getComponent(Collider);\n    this._nativeJoint = PhysicsManager._nativePhysics.createHingeJoint(collider.collider._nativeCollider);\n  }\n}\n", "import { Joint } from \"./Joint\";\nimport { ISpringJoint } from \"@galacean/engine-design\";\nimport { PhysicsManager } from \"../PhysicsManager\";\nimport { Collider } from \"../Collider\";\nimport { Vector3 } from \"@galacean/engine-math\";\n\n/**\n * A joint that maintains an upper or lower bound (or both) on the distance between two points on different objects.\n */\nexport class SpringJoint extends Joint {\n  private _minDistance: number = 0;\n  private _maxDistance: number = 0;\n  private _tolerance: number = 0.25;\n  private _stiffness: number = 0;\n  private _damping: number = 0;\n\n  /**\n   * The swing offset.\n   */\n  get swingOffset(): Vector3 {\n    return this._collider.localPosition;\n  }\n\n  set swingOffset(value: Vector3) {\n    const swingOffset = this._collider.localPosition;\n    if (value !== swingOffset) {\n      swingOffset.copyFrom(value);\n    }\n    (<ISpringJoint>this._nativeJoint).setSwingOffset(value);\n  }\n\n  /**\n   * The minimum distance.\n   */\n  get minDistance(): number {\n    return this._minDistance;\n  }\n\n  set minDistance(value: number) {\n    if (this._minDistance !== value) {\n      this._minDistance = value;\n      (<ISpringJoint>this._nativeJoint).setMinDistance(value);\n    }\n  }\n\n  /**\n   * The maximum distance.\n   */\n  get maxDistance(): number {\n    return this._maxDistance;\n  }\n\n  set maxDistance(value: number) {\n    if (this._maxDistance !== value) {\n      this._maxDistance = value;\n      (<ISpringJoint>this._nativeJoint).setMaxDistance(value);\n    }\n  }\n\n  /**\n   * The distance beyond the allowed range at which the joint becomes active.\n   */\n  get tolerance(): number {\n    return this._tolerance;\n  }\n\n  set tolerance(value: number) {\n    if (this._tolerance !== value) {\n      this._tolerance = value;\n      (<ISpringJoint>this._nativeJoint).setTolerance(value);\n    }\n  }\n\n  /**\n   * The spring strength of the joint.\n   */\n  get stiffness(): number {\n    return this._stiffness;\n  }\n\n  set stiffness(value: number) {\n    if (this._stiffness !== value) {\n      this._stiffness = value;\n      (<ISpringJoint>this._nativeJoint).setStiffness(value);\n    }\n  }\n\n  /**\n   * The degree of damping of the joint spring of the joint.\n   */\n  get damping(): number {\n    return this._damping;\n  }\n\n  set damping(value: number) {\n    if (this._damping !== value) {\n      this._damping = value;\n      (<ISpringJoint>this._nativeJoint).setDamping(value);\n    }\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onAwake() {\n    const collider = this._collider;\n    collider.localPosition = new Vector3();\n    collider.collider = this.entity.getComponent(Collider);\n    this._nativeJoint = PhysicsManager._nativePhysics.createSpringJoint(collider.collider._nativeCollider);\n  }\n}\n", "/**\n * JointLimits is used to limit the joints angle.\n */\nexport class JointLimits {\n  /** The upper angular limit (in degrees) of the joint. */\n  max: number = 0;\n  /** The lower angular limit (in degrees) of the joint. */\n  min: number = 0;\n  /** Distance inside the limit value at which the limit will be considered to be active by the solver. */\n  contactDistance: number = -1;\n\n  /** The spring forces used to reach the target position. */\n  stiffness: number = 0;\n  /** The damper force uses to dampen the spring. */\n  damping: number = 0;\n}\n", "/**\n * The JointMotor is used to motorize a joint.\n */\nexport class JointMotor {\n  /** The motor will apply a force up to force to achieve targetVelocity. */\n  targetVelocity: number = 0;\n  /** The force limit.*/\n  forceLimit: number = Number.MAX_VALUE;\n  /** Gear ration for the motor */\n  gearRation: number = 1.0;\n  /** If freeSpin is enabled the motor will only accelerate but never slow down. */\n  freeSpin: boolean = false;\n}\n", "/**\n * The up axis of the collider shape.\n */\nexport enum ControllerCollisionFlag {\n  /** Character is colliding to the sides. */\n  Sides = 1,\n  /** Character has collision above. */\n  Up = 2,\n  /** Character has collision below. */\n  Down = 4\n}\n", "import { Entity } from \"../Entity\";\nimport { Collider } from \"./Collider\";\nimport { PhysicsManager } from \"./PhysicsManager\";\n\n/**\n * A static collider component that will not move.\n * @remarks Mostly used for object which always stays at the same place and never moves around.\n */\nexport class StaticCollider extends Collider {\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    const { transform } = this.entity;\n    this._nativeCollider = PhysicsManager._nativePhysics.createStaticCollider(\n      transform.worldPosition,\n      transform.worldRotationQuaternion\n    );\n  }\n}\n", "import { IDynamicCollider } from \"@galacean/engine-design\";\nimport { Quaternion, Vector3 } from \"@galacean/engine-math\";\nimport { Entity } from \"../Entity\";\nimport { Collider } from \"./Collider\";\nimport { PhysicsManager } from \"./PhysicsManager\";\n\n/**\n * A dynamic collider can act with self-defined movement or physical force.\n */\nexport class DynamicCollider extends Collider {\n  private _linearDamping: number = 0;\n  private _angularDamping: number = 0.05;\n  private _linearVelocity = new Vector3();\n  private _angularVelocity = new Vector3();\n  private _mass: number = 1.0;\n  private _centerOfMass = new Vector3();\n  private _inertiaTensor = new Vector3(1, 1, 1);\n  private _maxAngularVelocity: number = 100;\n  private _maxDepenetrationVelocity: number = 1000;\n  private _solverIterations: number = 4;\n  private _isKinematic: boolean = false;\n  private _constraints: DynamicColliderConstraints = 0;\n  private _collisionDetectionMode: CollisionDetectionMode = CollisionDetectionMode.Discrete;\n  private _sleepThreshold: number = 5e-3;\n\n  /**\n   * The linear damping of the dynamic collider.\n   */\n  get linearDamping(): number {\n    return this._linearDamping;\n  }\n\n  set linearDamping(value: number) {\n    if (this._linearDamping !== value) {\n      this._linearDamping = value;\n      (<IDynamicCollider>this._nativeCollider).setLinearDamping(value);\n    }\n  }\n\n  /**\n   * The angular damping of the dynamic collider.\n   */\n  get angularDamping(): number {\n    return this._angularDamping;\n  }\n\n  set angularDamping(value: number) {\n    if (this._angularDamping !== value) {\n      this._angularDamping = value;\n      (<IDynamicCollider>this._nativeCollider).setAngularDamping(value);\n    }\n  }\n\n  /**\n   * The linear velocity vector of the dynamic collider measured in world unit per second.\n   */\n  get linearVelocity(): Vector3 {\n    return this._linearVelocity;\n  }\n\n  set linearVelocity(value: Vector3) {\n    if (this._linearVelocity !== value) {\n      this._linearVelocity.copyFrom(value);\n    }\n  }\n\n  /**\n   * The angular velocity vector of the dynamic collider measured in radians per second.\n   */\n  get angularVelocity(): Vector3 {\n    return this._angularVelocity;\n  }\n\n  set angularVelocity(value: Vector3) {\n    if (this._angularVelocity !== value) {\n      this._angularVelocity.copyFrom(value);\n    }\n  }\n\n  /**\n   * The mass of the dynamic collider.\n   */\n  get mass(): number {\n    return this._mass;\n  }\n\n  set mass(value: number) {\n    if (this._mass !== value) {\n      this._mass = value;\n      (<IDynamicCollider>this._nativeCollider).setMass(value);\n    }\n  }\n\n  /**\n   * The center of mass relative to the transform's origin.\n   */\n  get centerOfMass(): Vector3 {\n    return this._centerOfMass;\n  }\n\n  set centerOfMass(value: Vector3) {\n    if (this._centerOfMass !== value) {\n      this._centerOfMass.copyFrom(value);\n    }\n  }\n\n  /**\n   * The diagonal inertia tensor of mass relative to the center of mass.\n   */\n  get inertiaTensor(): Vector3 {\n    return this._inertiaTensor;\n  }\n\n  set inertiaTensor(value: Vector3) {\n    if (this._inertiaTensor !== value) {\n      this._inertiaTensor.copyFrom(value);\n    }\n  }\n\n  /**\n   * The maximum angular velocity of the collider measured in radians per second. (Default 7) range { 0, infinity }.\n   */\n  get maxAngularVelocity(): number {\n    return this._maxAngularVelocity;\n  }\n\n  set maxAngularVelocity(value: number) {\n    if (this._maxAngularVelocity !== value) {\n      this._maxAngularVelocity = value;\n      (<IDynamicCollider>this._nativeCollider).setMaxAngularVelocity(value);\n    }\n  }\n\n  /**\n   * Maximum velocity of a collider when moving out of penetrating state.\n   */\n  get maxDepenetrationVelocity(): number {\n    return this._maxDepenetrationVelocity;\n  }\n\n  set maxDepenetrationVelocity(value: number) {\n    if (this._maxDepenetrationVelocity !== value) {\n      this._maxDepenetrationVelocity = value;\n      (<IDynamicCollider>this._nativeCollider).setMaxDepenetrationVelocity(value);\n    }\n  }\n\n  /**\n   * The mass-normalized energy threshold, below which objects start going to sleep.\n   */\n  get sleepThreshold(): number {\n    return this._sleepThreshold;\n  }\n\n  set sleepThreshold(value: number) {\n    if (value !== this._sleepThreshold) {\n      this._sleepThreshold = value;\n      (<IDynamicCollider>this._nativeCollider).setSleepThreshold(value);\n    }\n  }\n\n  /**\n   * The solverIterations determines how accurately collider joints and collision contacts are resolved.\n   */\n  get solverIterations(): number {\n    return this._solverIterations;\n  }\n\n  set solverIterations(value: number) {\n    if (this._solverIterations !== value) {\n      this._solverIterations = value;\n      (<IDynamicCollider>this._nativeCollider).setSolverIterations(value);\n    }\n  }\n\n  /**\n   * Controls whether physics affects the dynamic collider.\n   */\n  get isKinematic(): boolean {\n    return this._isKinematic;\n  }\n\n  set isKinematic(value: boolean) {\n    if (this._isKinematic !== value) {\n      this._isKinematic = value;\n      (<IDynamicCollider>this._nativeCollider).setIsKinematic(value);\n    }\n  }\n\n  /**\n   * The particular rigid dynamic lock flag.\n   */\n  get constraints(): DynamicColliderConstraints {\n    return this._constraints;\n  }\n\n  set constraints(value: DynamicColliderConstraints) {\n    if (this._constraints !== value) {\n      this._constraints = value;\n      (<IDynamicCollider>this._nativeCollider).setConstraints(value);\n    }\n  }\n\n  /**\n   * The colliders' collision detection mode.\n   */\n  get collisionDetectionMode(): CollisionDetectionMode {\n    return this._collisionDetectionMode;\n  }\n\n  set collisionDetectionMode(value: CollisionDetectionMode) {\n    if (this._collisionDetectionMode !== value) {\n      this._collisionDetectionMode = value;\n      (<IDynamicCollider>this._nativeCollider).setCollisionDetectionMode(value);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    const { transform } = this.entity;\n    this._nativeCollider = PhysicsManager._nativePhysics.createDynamicCollider(\n      transform.worldPosition,\n      transform.worldRotationQuaternion\n    );\n\n    this._setLinearVelocity = this._setLinearVelocity.bind(this);\n    this._setAngularVelocity = this._setAngularVelocity.bind(this);\n    this._setCenterOfMass = this._setCenterOfMass.bind(this);\n    this._setInertiaTensor = this._setInertiaTensor.bind(this);\n\n    //@ts-ignore\n    this._linearVelocity._onValueChanged = this._setLinearVelocity;\n    //@ts-ignore\n    this._angularVelocity._onValueChanged = this._setAngularVelocity;\n    //@ts-ignore\n    this._centerOfMass._onValueChanged = this._setCenterOfMass;\n    //@ts-ignore\n    this._inertiaTensor._onValueChanged = this._setInertiaTensor;\n  }\n\n  /**\n   * Apply a force to the DynamicCollider.\n   * @param force - The force make the collider move\n   */\n  applyForce(force: Vector3): void {\n    (<IDynamicCollider>this._nativeCollider).addForce(force);\n  }\n\n  /**\n   * Apply a torque to the DynamicCollider.\n   * @param torque - The force make the collider rotate\n   */\n  applyTorque(torque: Vector3): void {\n    (<IDynamicCollider>this._nativeCollider).addTorque(torque);\n  }\n\n  /**\n   * Moves kinematically controlled dynamic actors through the game world.\n   * @param position - The desired position for the kinematic actor\n   */\n  move(position: Vector3): void;\n\n  /**\n   * Moves kinematically controlled dynamic actors through the game world.\n   * @param rotation - The desired rotation for the kinematic actor\n   */\n  move(rotation: Quaternion): void;\n\n  /**\n   * Moves kinematically controlled dynamic actors through the game world.\n   * @param position - The desired position for the kinematic actor\n   * @param rotation - The desired rotation for the kinematic actor\n   */\n  move(position: Vector3, rotation: Quaternion): void;\n\n  move(positionOrRotation: Vector3 | Quaternion, rotation?: Quaternion): void {\n    (<IDynamicCollider>this._nativeCollider).move(positionOrRotation, rotation);\n  }\n\n  /**\n   * Forces a collider to sleep at least one frame.\n   */\n  sleep(): void {\n    (<IDynamicCollider>this._nativeCollider).sleep();\n  }\n\n  /**\n   * Forces a collider to wake up.\n   */\n  wakeUp(): void {\n    (<IDynamicCollider>this._nativeCollider).wakeUp();\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onLateUpdate(): void {\n    const { transform } = this.entity;\n    const { worldPosition, worldRotationQuaternion } = transform;\n    (<IDynamicCollider>this._nativeCollider).getWorldTransform(worldPosition, worldRotationQuaternion);\n    this._updateFlag.flag = false;\n  }\n\n  private _setLinearVelocity(): void {\n    (<IDynamicCollider>this._nativeCollider).setLinearVelocity(this._linearVelocity);\n  }\n\n  private _setAngularVelocity(): void {\n    (<IDynamicCollider>this._nativeCollider).setAngularVelocity(this._angularVelocity);\n  }\n\n  private _setCenterOfMass(): void {\n    (<IDynamicCollider>this._nativeCollider).setCenterOfMass(this._centerOfMass);\n  }\n\n  private _setInertiaTensor(): void {\n    (<IDynamicCollider>this._nativeCollider).setInertiaTensor(this._inertiaTensor);\n  }\n}\n\n/**\n * The collision detection mode constants.\n */\nexport enum CollisionDetectionMode {\n  /** Continuous collision detection is off for this dynamic collider. */\n  Discrete,\n  /** Continuous collision detection is on for colliding with static mesh geometry. */\n  Continuous,\n  /** Continuous collision detection is on for colliding with static and dynamic geometry. */\n  ContinuousDynamic,\n  /** Speculative continuous collision detection is on for static and dynamic geometries */\n  ContinuousSpeculative\n}\n\n/**\n * Use these flags to constrain motion of dynamic collider.\n */\nexport enum DynamicColliderConstraints {\n  /** Not Freeze. */\n  None = 0,\n  /** Freeze motion along the X-axis. */\n  FreezePositionX = 1,\n  /** Freeze motion along the Y-axis. */\n  FreezePositionY = 2,\n  /** Freeze motion along the Z-axis. */\n  FreezePositionZ = 4,\n  /** Freeze rotation along the X-axis. */\n  FreezeRotationX = 8,\n  /** Freeze rotation along the Y-axis. */\n  FreezeRotationY = 16,\n  /** Freeze rotation along the Z-axis. */\n  FreezeRotationZ = 32\n}\n", "/**\n * Defines values that specify the buttons on a pointer device.\n * Refer to the W3C standards:\n * (https://www.w3.org/TR/uievents/#dom-mouseevent-button)\n * (https://www.w3.org/TR/uievents/#dom-mouseevent-buttons)\n * Refer to Microsoft's documentation.(https://docs.microsoft.com/en-us/dotnet/api/system.windows.input.mousebutton?view=windowsdesktop-6.0)\n */\nexport enum PointerButton {\n  /** No button. */\n  None = 0x0,\n  /** Indicate the primary pointer of the device (in general, the left button or the only button on single-button devices, used to activate a user interface control or select text) or the un-initialized value. */\n  Primary = 0x1,\n  /** Indicate the secondary pointer (in general, the right button, often used to display a context menu). */\n  Secondary = 0x2,\n  /** Indicate the auxiliary pointer (in general, the middle button, often combined with a mouse wheel). */\n  Auxiliary = 0x4,\n  /** Indicate the X1 (back) pointer. */\n  XButton1 = 0x8,\n  /** Indicate the X2 (forward) pointer. */\n  XButton2 = 0x10,\n  /** Indicate the X3 pointer. */\n  XButton3 = 0x20,\n  /** Indicate the X4 pointer. */\n  XButton4 = 0x40,\n  /** Indicate the X5 pointer. */\n  XButton5 = 0x80,\n  /** Indicate the X6 pointer. */\n  XButton6 = 0x100,\n  /** Indicate the X7 pointer. */\n  XButton7 = 0x200,\n  /** Indicate the X8 pointer. */\n  XButton8 = 0x400\n}\n\n/**\n * @internal\n */\nexport const _pointerDec2BinMap = [\n  PointerButton.Primary,\n  PointerButton.Auxiliary,\n  PointerButton.Secondary,\n  PointerButton.XButton1,\n  PointerButton.XButton2,\n  PointerButton.XButton3,\n  PointerButton.XButton4,\n  PointerButton.XButton5,\n  PointerButton.XButton6,\n  PointerButton.XButton7,\n  PointerButton.XButton8\n];\n\n/**\n * @internal\n */\nexport const _pointerBin2DecMap: Record<number, number> = {\n  /** Primary */\n  0x1: 0,\n  /** Secondary */\n  0x2: 2,\n  /** Auxiliary */\n  0x4: 1,\n  /** XButton1 */\n  0x8: 3,\n  /** XButton2 */\n  0x10: 4,\n  /** XButton3 */\n  0x20: 5,\n  /** XButton4 */\n  0x40: 6,\n  /** XButton5 */\n  0x80: 7,\n  /** XButton6 */\n  0x100: 8,\n  /** XButton7 */\n  0x200: 9,\n  /** XButton8 */\n  0x400: 10\n};\n", "import { Ray, Vector2 } from \"@galacean/engine-math\";\nimport { Canvas } from \"../../Canvas\";\nimport { DisorderedArray } from \"../../DisorderedArray\";\nimport { Engine } from \"../../Engine\";\nimport { Entity } from \"../../Entity\";\nimport { CameraClearFlags } from \"../../enums/CameraClearFlags\";\nimport { HitResult } from \"../../physics\";\nimport { PointerPhase } from \"../enums/PointerPhase\";\nimport { PointerButton, _pointerBin2DecMap, _pointerDec2BinMap } from \"../enums/PointerButton\";\nimport { IInput } from \"../interface/IInput\";\nimport { Pointer } from \"./Pointer\";\n\n/**\n * Pointer Manager.\n * @internal\n */\nexport class PointerManager implements IInput {\n  private static _tempRay: Ray = new Ray();\n  private static _tempPoint: Vector2 = new Vector2();\n  private static _tempHitResult: HitResult = new HitResult();\n  /** @internal */\n  _pointers: Pointer[] = [];\n  /** @internal */\n  _multiPointerEnabled: boolean = true;\n  /** @internal */\n  _buttons: PointerButton = PointerButton.None;\n  /** @internal */\n  _upMap: number[] = [];\n  /** @internal */\n  _downMap: number[] = [];\n  /** @internal */\n  _upList: DisorderedArray<PointerButton> = new DisorderedArray();\n  /** @internal */\n  _downList: DisorderedArray<PointerButton> = new DisorderedArray();\n\n  private _engine: Engine;\n  private _canvas: Canvas;\n  private _htmlCanvas: HTMLCanvasElement;\n  private _nativeEvents: PointerEvent[] = [];\n  private _pointerPool: Pointer[];\n  private _hadListener: boolean = false;\n\n  /**\n   * Create a PointerManager.\n   * @param engine - The current engine instance\n   * @param htmlCanvas - HTMLCanvasElement\n   */\n  constructor(engine: Engine, htmlCanvas: HTMLCanvasElement) {\n    this._engine = engine;\n    this._canvas = engine.canvas;\n    this._htmlCanvas = htmlCanvas;\n    this._onPointerEvent = this._onPointerEvent.bind(this);\n    this._updatePointerWithPhysics = this._updatePointerWithPhysics.bind(this);\n    this._updatePointerWithoutPhysics = this._updatePointerWithoutPhysics.bind(this);\n    this._onFocus();\n    // If there are no compatibility issues, navigator.maxTouchPoints should be used here\n    this._pointerPool = new Array<Pointer>(11);\n  }\n\n  /**\n   * @internal\n   */\n  _update(frameCount: number): void {\n    const { _pointers: pointers, _nativeEvents: nativeEvents } = this;\n    // Clean up the pointer released in the previous frame\n    let lastIndex = pointers.length - 1;\n    if (lastIndex >= 0) {\n      for (let i = lastIndex; i >= 0; i--) {\n        if (pointers[i].phase === PointerPhase.Leave) {\n          pointers.splice(i, 1);\n        }\n      }\n    }\n\n    // Generate the pointer received for this frame\n    lastIndex = nativeEvents.length - 1;\n    if (lastIndex >= 0) {\n      for (let i = 0; i <= lastIndex; i++) {\n        const evt = nativeEvents[i];\n        this._getPointer(evt.pointerId)?._events.push(evt);\n      }\n      nativeEvents.length = 0;\n    }\n\n    // Pointer handles its own events\n    this._upList.length = this._downList.length = 0;\n    this._buttons = PointerButton.None;\n    lastIndex = pointers.length - 1;\n    if (lastIndex >= 0) {\n      const updatePointer = this._engine.physicsManager._initialized\n        ? this._updatePointerWithPhysics\n        : this._updatePointerWithoutPhysics;\n      const clientRect = this._htmlCanvas.getBoundingClientRect();\n      const { clientWidth, clientHeight } = this._htmlCanvas;\n      const { width, height } = this._canvas;\n      for (let i = lastIndex; i >= 0; i--) {\n        const pointer = pointers[i];\n        pointer._upList.length = pointer._downList.length = 0;\n        updatePointer(frameCount, pointer, clientRect, clientWidth, clientHeight, width, height);\n        this._buttons |= pointer.pressedButtons;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onFocus(): void {\n    if (!this._hadListener) {\n      const { _htmlCanvas: htmlCanvas, _onPointerEvent: onPointerEvent } = this;\n      htmlCanvas.addEventListener(\"pointerdown\", onPointerEvent);\n      htmlCanvas.addEventListener(\"pointerup\", onPointerEvent);\n      htmlCanvas.addEventListener(\"pointerleave\", onPointerEvent);\n      htmlCanvas.addEventListener(\"pointermove\", onPointerEvent);\n      htmlCanvas.addEventListener(\"pointercancel\", onPointerEvent);\n      this._hadListener = true;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onBlur(): void {\n    if (this._hadListener) {\n      const { _htmlCanvas: htmlCanvas, _onPointerEvent: onPointerEvent } = this;\n      htmlCanvas.removeEventListener(\"pointerdown\", onPointerEvent);\n      htmlCanvas.removeEventListener(\"pointerup\", onPointerEvent);\n      htmlCanvas.removeEventListener(\"pointerleave\", onPointerEvent);\n      htmlCanvas.removeEventListener(\"pointermove\", onPointerEvent);\n      htmlCanvas.removeEventListener(\"pointercancel\", onPointerEvent);\n      this._hadListener = false;\n      this._downList.length = 0;\n      this._upList.length = 0;\n      const { _pointers: pointers } = this;\n      for (let i = pointers.length - 1; i >= 0; i--) {\n        pointers[i].phase = PointerPhase.Leave;\n      }\n      pointers.length = 0;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    // @ts-ignore\n    if (this._hadListener) {\n      const { _htmlCanvas: htmlCanvas, _onPointerEvent: onPointerEvent } = this;\n      htmlCanvas.removeEventListener(\"pointerdown\", onPointerEvent);\n      htmlCanvas.removeEventListener(\"pointerup\", onPointerEvent);\n      htmlCanvas.removeEventListener(\"pointerleave\", onPointerEvent);\n      htmlCanvas.removeEventListener(\"pointermove\", onPointerEvent);\n      htmlCanvas.removeEventListener(\"pointercancel\", onPointerEvent);\n      this._hadListener = false;\n    }\n    this._pointerPool.length = 0;\n    this._pointers.length = 0;\n    this._downList.length = 0;\n    this._upList.length = 0;\n    this._htmlCanvas = null;\n    this._engine = null;\n  }\n\n  private _onPointerEvent(evt: PointerEvent) {\n    evt.type === \"pointerdown\" && this._htmlCanvas.focus();\n    this._nativeEvents.push(evt);\n  }\n\n  private _getIndexByPointerID(pointerId: number): number {\n    const { _pointers: pointers } = this;\n    for (let i = pointers.length - 1; i >= 0; i--) {\n      if (pointers[i]._uniqueID === pointerId) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  private _getPointer(pointerId: number): Pointer {\n    const { _pointers: pointers } = this;\n    const index = this._getIndexByPointerID(pointerId);\n    if (index >= 0) {\n      return pointers[index];\n    } else {\n      const lastCount = pointers.length;\n      if (lastCount === 0 || this._multiPointerEnabled) {\n        const { _pointerPool: pointerPool } = this;\n        // Get Pointer smallest index\n        let i = 0;\n        for (; i < lastCount; i++) {\n          if (pointers[i].id > i) {\n            break;\n          }\n        }\n        let pointer = pointerPool[i];\n        if (!pointer) {\n          pointer = pointerPool[i] = new Pointer(i);\n        }\n        pointer._uniqueID = pointerId;\n        pointers.splice(i, 0, pointer);\n        return pointer;\n      } else {\n        return null;\n      }\n    }\n  }\n\n  private _pointerRayCast(normalizedX: number, normalizedY: number): Entity {\n    const { _tempPoint: point, _tempRay: ray, _tempHitResult: hitResult } = PointerManager;\n    const { _activeCameras: cameras } = this._engine.sceneManager.activeScene;\n    for (let i = cameras.length - 1; i >= 0; i--) {\n      const camera = cameras[i];\n      if (!camera.enabled || camera.renderTarget) {\n        continue;\n      }\n      const { x: vpX, y: vpY, z: vpW, w: vpH } = camera.viewport;\n      if (normalizedX >= vpX && normalizedY >= vpY && normalizedX - vpX <= vpW && normalizedY - vpY <= vpH) {\n        point.set((normalizedX - vpX) / vpW, (normalizedY - vpY) / vpH);\n        if (\n          this._engine.physicsManager.raycast(\n            camera.viewportPointToRay(point, ray),\n            Number.MAX_VALUE,\n            camera.cullingMask,\n            hitResult\n          )\n        ) {\n          return hitResult.entity;\n        } else if (camera.clearFlags & CameraClearFlags.Color) {\n          return null;\n        }\n      }\n    }\n  }\n\n  private _updatePointerWithPhysics(\n    frameCount: number,\n    pointer: Pointer,\n    rect: DOMRect,\n    clientW: number,\n    clientH: number,\n    canvasW: number,\n    canvasH: number\n  ): void {\n    const { _events: events, position } = pointer;\n    const length = events.length;\n    if (length > 0) {\n      const { _upList, _upMap, _downList, _downMap } = this;\n      const latestEvent = events[length - 1];\n      const normalizedX = (latestEvent.clientX - rect.left) / clientW;\n      const normalizedY = (latestEvent.clientY - rect.top) / clientH;\n      const currX = normalizedX * canvasW;\n      const currY = normalizedY * canvasH;\n      pointer.deltaPosition.set(currX - position.x, currY - position.y);\n      position.set(currX, currY);\n      pointer._firePointerDrag();\n      const rayCastEntity = this._pointerRayCast(normalizedX, normalizedY);\n      pointer._firePointerExitAndEnter(rayCastEntity);\n      for (let i = 0; i < length; i++) {\n        const event = events[i];\n        const { button } = event;\n        pointer.button = _pointerDec2BinMap[button] || PointerButton.None;\n        pointer.pressedButtons = event.buttons;\n        switch (event.type) {\n          case \"pointerdown\":\n            _downList.add(button);\n            _downMap[button] = frameCount;\n            pointer._downList.add(button);\n            pointer._downMap[button] = frameCount;\n            pointer.phase = PointerPhase.Down;\n            pointer._firePointerDown(rayCastEntity);\n            break;\n          case \"pointerup\":\n            _upList.add(button);\n            _upMap[button] = frameCount;\n            pointer._upList.add(button);\n            pointer._upMap[button] = frameCount;\n            pointer.phase = PointerPhase.Up;\n            pointer._firePointerUpAndClick(rayCastEntity);\n            break;\n          case \"pointermove\":\n            pointer.phase = PointerPhase.Move;\n            break;\n          case \"pointerleave\":\n          case \"pointercancel\":\n            pointer.phase = PointerPhase.Leave;\n            pointer._firePointerExitAndEnter(null);\n          default:\n            break;\n        }\n      }\n      pointer._events.length = 0;\n    } else {\n      pointer.deltaPosition.set(0, 0);\n      pointer.phase = PointerPhase.Stationary;\n      pointer._firePointerDrag();\n      pointer._firePointerExitAndEnter(this._pointerRayCast(position.x / canvasW, position.y / canvasH));\n    }\n  }\n\n  private _updatePointerWithoutPhysics(\n    frameCount: number,\n    pointer: Pointer,\n    rect: DOMRect,\n    clientW: number,\n    clientH: number,\n    canvasW: number,\n    canvasH: number\n  ): void {\n    const { _events: events } = pointer;\n    const length = events.length;\n    if (length > 0) {\n      const { position } = pointer;\n      const latestEvent = events[length - 1];\n      const currX = ((latestEvent.clientX - rect.left) / clientW) * canvasW;\n      const currY = ((latestEvent.clientY - rect.top) / clientH) * canvasH;\n      pointer.deltaPosition.set(currX - position.x, currY - position.y);\n      position.set(currX, currY);\n      pointer.button = _pointerDec2BinMap[latestEvent.button] || PointerButton.None;\n      pointer.pressedButtons = latestEvent.buttons;\n      const { _upList, _upMap, _downList, _downMap } = this;\n      for (let i = 0; i < length; i++) {\n        const { button } = events[i];\n        switch (events[i].type) {\n          case \"pointerdown\":\n            _downList.add(button);\n            _downMap[button] = frameCount;\n            pointer._downList.add(button);\n            pointer._downMap[button] = frameCount;\n            pointer.phase = PointerPhase.Down;\n            break;\n          case \"pointerup\":\n            _upList.add(button);\n            _upMap[button] = frameCount;\n            pointer._upList.add(button);\n            pointer._upMap[button] = frameCount;\n            pointer.phase = PointerPhase.Up;\n            break;\n          case \"pointermove\":\n            pointer.phase = PointerPhase.Move;\n            break;\n          case \"pointerleave\":\n          case \"pointercancel\":\n            pointer.phase = PointerPhase.Leave;\n          default:\n            break;\n        }\n      }\n      pointer._events.length = 0;\n    } else {\n      pointer.deltaPosition.set(0, 0);\n      pointer.phase = PointerPhase.Stationary;\n    }\n  }\n}\n", "import { Vector3 } from \"@galacean/engine-math\";\nimport { IInput } from \"../interface/IInput\";\n\n/**\n * Wheel Manager.\n * @internal\n */\nexport class WheelManager implements IInput {\n  /** @internal */\n  _delta: Vector3 = new Vector3();\n\n  private _nativeEvents: WheelEvent[] = [];\n  private _canvas: HTMLCanvasElement;\n  private _hadListener: boolean;\n\n  /**\n   * Create a KeyboardManager.\n   */\n  constructor(htmlCanvas: HTMLCanvasElement) {\n    this._onWheelEvent = this._onWheelEvent.bind(this);\n    htmlCanvas.addEventListener(\"wheel\", this._onWheelEvent);\n    this._canvas = htmlCanvas;\n    this._hadListener = true;\n  }\n\n  /**\n   * @internal\n   */\n  _update(): void {\n    const { _delta: delta } = this;\n    delta.set(0, 0, 0);\n    const { _nativeEvents: nativeEvents } = this;\n    if (nativeEvents.length > 0) {\n      for (let i = nativeEvents.length - 1; i >= 0; i--) {\n        const evt = nativeEvents[i];\n        delta.x += evt.deltaX;\n        delta.y += evt.deltaY;\n        delta.z += evt.deltaZ;\n      }\n      nativeEvents.length = 0;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onFocus(): void {\n    if (!this._hadListener) {\n      this._canvas.addEventListener(\"wheel\", this._onWheelEvent);\n      this._hadListener = true;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onBlur(): void {\n    if (this._hadListener) {\n      this._canvas.removeEventListener(\"wheel\", this._onWheelEvent);\n      this._nativeEvents.length = 0;\n      this._delta.set(0, 0, 0);\n      this._hadListener = false;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    if (this._hadListener) {\n      this._canvas.removeEventListener(\"wheel\", this._onWheelEvent);\n      this._hadListener = false;\n    }\n    this._nativeEvents = null;\n  }\n\n  private _onWheelEvent(evt: WheelEvent): void {\n    evt.cancelable && evt.preventDefault();\n    this._nativeEvents.push(evt);\n  }\n}\n", "import { Engine } from \"../Engine\";\nimport { KeyboardManager } from \"./keyboard/KeyboardManager\";\nimport { Keys } from \"./enums/Keys\";\nimport { Pointer } from \"./pointer/Pointer\";\nimport { PointerManager } from \"./pointer/PointerManager\";\nimport { PointerButton, _pointerBin2DecMap } from \"./enums/PointerButton\";\nimport { WheelManager } from \"./wheel/WheelManager\";\nimport { Vector3 } from \"@galacean/engine-math\";\n\n/**\n * InputManager manages device input such as mouse, touch, keyboard, etc.\n */\nexport class InputManager {\n  /** Sometimes the input module will not be initialized, such as off-screen rendering. */\n  private _initialized: boolean = false;\n  private _curFrameCount: number = 0;\n  private _wheelManager: WheelManager;\n  private _pointerManager: PointerManager;\n  private _keyboardManager: KeyboardManager;\n\n  /**\n   * Pointer list.\n   */\n  get pointers(): Readonly<Pointer[]> {\n    return this._initialized ? this._pointerManager._pointers : [];\n  }\n\n  /**\n   *  Whether to handle multi-pointer.\n   */\n  get multiPointerEnabled(): boolean {\n    return this._initialized ? this._pointerManager._multiPointerEnabled : false;\n  }\n\n  set multiPointerEnabled(enabled: boolean) {\n    this._initialized && (this._pointerManager._multiPointerEnabled = enabled);\n  }\n\n  /**\n   * Get the change of the scroll wheel on the x-axis.\n   * @returns Change value\n   */\n  get wheelDelta(): Readonly<Vector3 | null> {\n    return this._initialized ? this._wheelManager._delta : null;\n  }\n\n  /**\n   * Whether the key is being held down, if there is no parameter, return whether any key is being held down.\n   * @param key - The keys of the keyboard\n   * @returns Whether the key is being held down\n   */\n  isKeyHeldDown(key?: Keys): boolean {\n    if (this._initialized) {\n      if (key === undefined) {\n        return this._keyboardManager._curFrameHeldDownList.length > 0;\n      } else {\n        return this._keyboardManager._curHeldDownKeyToIndexMap[key] != null;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether the key starts to be pressed down during the current frame, if there is no parameter, return whether any key starts to be pressed down during the current frame.\n   * @param key - The keys of the keyboard\n   * @returns Whether the key starts to be pressed down during the current frame\n   */\n  isKeyDown(key?: Keys): boolean {\n    if (this._initialized) {\n      if (key === undefined) {\n        return this._keyboardManager._curFrameDownList.length > 0;\n      } else {\n        return this._keyboardManager._downKeyToFrameCountMap[key] === this._curFrameCount;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether the key is released during the current frame, if there is no parameter, return whether any key released during the current frame.\n   * @param key - The keys of the keyboard\n   * @returns Whether the key is released during the current frame\n   */\n  isKeyUp(key?: Keys): boolean {\n    if (this._initialized) {\n      if (key === undefined) {\n        return this._keyboardManager._curFrameUpList.length > 0;\n      } else {\n        return this._keyboardManager._upKeyToFrameCountMap[key] === this._curFrameCount;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether the pointer is being held down, if there is no parameter, return whether any pointer is being held down.\n   * @param pointerButton - The pointerButton on a pointer device\n   * @returns Whether the pointer is being held down\n   */\n  isPointerHeldDown(pointerButton?: PointerButton): boolean {\n    if (this._initialized) {\n      if (pointerButton === undefined) {\n        return this._pointerManager._buttons !== 0;\n      } else {\n        return (this._pointerManager._buttons & pointerButton) !== 0;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether the pointer starts to be pressed down during the current frame, if there is no parameter, return whether any pointer starts to be pressed down during the current frame.\n   * @param pointerButton - The pointerButton on a pointer device\n   * @returns Whether the pointer starts to be pressed down during the current frame\n   */\n  isPointerDown(pointerButton?: PointerButton): boolean {\n    if (this._initialized) {\n      if (pointerButton === undefined) {\n        return this._pointerManager._downList.length > 0;\n      } else {\n        return this._pointerManager._downMap[_pointerBin2DecMap[pointerButton]] === this._curFrameCount;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether the pointer is released during the current frame, if there is no parameter, return whether any pointer released during the current frame.\n   * @param pointerButton - The pointerButtons on a mouse device\n   * @returns Whether the pointer is released during the current frame\n   */\n  isPointerUp(pointerButton?: PointerButton): boolean {\n    if (this._initialized) {\n      if (pointerButton === undefined) {\n        return this._pointerManager._upList.length > 0;\n      } else {\n        return this._pointerManager._upMap[_pointerBin2DecMap[pointerButton]] === this._curFrameCount;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(engine: Engine) {\n    // @ts-ignore\n    const canvas = engine._canvas._webCanvas;\n    if (typeof OffscreenCanvas === \"undefined\" || !(canvas instanceof OffscreenCanvas)) {\n      this._wheelManager = new WheelManager(canvas);\n      this._pointerManager = new PointerManager(engine, canvas);\n      this._keyboardManager = new KeyboardManager(canvas);\n      this._onBlur = this._onBlur.bind(this);\n      window.addEventListener(\"blur\", this._onBlur);\n      this._onFocus = this._onFocus.bind(this);\n      window.addEventListener(\"focus\", this._onFocus);\n      this._initialized = true;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _update(): void {\n    if (this._initialized) {\n      ++this._curFrameCount;\n      this._wheelManager._update();\n      this._pointerManager._update(this._curFrameCount);\n      this._keyboardManager._update(this._curFrameCount);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    if (this._initialized) {\n      window.removeEventListener(\"blur\", this._onBlur);\n      window.removeEventListener(\"focus\", this._onFocus);\n      this._wheelManager._destroy();\n      this._pointerManager._destroy();\n      this._keyboardManager._destroy();\n    }\n  }\n\n  private _onBlur(): void {\n    this._wheelManager._onBlur();\n    this._pointerManager._onBlur();\n    this._keyboardManager._onBlur();\n  }\n\n  private _onFocus(): void {\n    this._wheelManager._onFocus();\n    this._pointerManager._onFocus();\n    this._keyboardManager._onFocus();\n  }\n}\n", "/**\n * Number of cascades to use for directional light shadows.\n */\nexport enum ShadowCascadesMode {\n  /** No cascades */\n  NoCascades = 1,\n  /** Two cascades */\n  TwoCascades = 2,\n  /** Four cascades */\n  FourCascades = 4\n}\n", "/**\n * Default shadow resolution.\n */\nexport enum ShadowResolution {\n  /** Low shadow map resolution. */\n  Low,\n  /** Medium shadow map resolution. */\n  Medium,\n  /**  High shadow map resolution. */\n  High,\n  /** Very high shadow map resolution. */\n  VeryHigh\n}\n", "/**\n * Determines which type of shadows should be used.\n */\nexport enum ShadowType {\n  /** Disable Shadows. */\n  None,\n  /** Hard Shadows Only. */\n  Hard,\n  /** Cast \"soft\" shadows with low range. */\n  SoftLow,\n  /** Cast \"soft\" shadows with large range. */\n  SoftHigh\n}\n", "/**\n * Render queue type.\n */\nexport enum RenderQueueType {\n  /** Opaque queue. */\n  Opaque,\n  /** Opaque queue, alpha cutoff. */\n  AlphaTest,\n  /** Transparent queue, rendering from back to front to ensure correct rendering of transparent objects. */\n  Transparent\n}\n", "/**\n * Blend factor.\n * @remarks defines which function is used for blending pixel arithmetic\n */\nexport enum BlendFactor {\n  /** (0, 0, 0, 0)*/\n  Zero,\n  /** (1, 1, 1, 1)*/\n  One,\n  /** (Rs, Gs, Bs, As) */\n  SourceColor,\n  /** (1 - Rs, 1 - Gs, 1 - Bs, 1 - As)*/\n  OneMinusSourceColor,\n  /** (Rd, Gd, Bd, Ad)*/\n  DestinationColor,\n  /** (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad)*/\n  OneMinusDestinationColor,\n  /** (As, As, As, As)*/\n  SourceAlpha,\n  /** (1 - As, 1 - As, 1 - As, 1 - As)*/\n  OneMinusSourceAlpha,\n  /** (Ad, Ad, Ad, Ad)*/\n  DestinationAlpha,\n  /** (1 - Ad, 1 - Ad, 1 - Ad, 1 - Ad)*/\n  OneMinusDestinationAlpha,\n  /** (min(As, 1 - Ad), min(As, 1 - Ad), min(As, 1 - Ad), 10)*/\n  SourceAlphaSaturate,\n  /** (Rc, Gc, Bc, Ac)*/\n  BlendColor,\n  /** (1 - Rc, 1 - Gc, 1 - Bc, 1 - Ac)*/\n  OneMinusBlendColor\n}\n", "/**\n * Blend operation function.\n * @remarks defines how a new pixel is combined with a pixel.\n */\nexport enum BlendOperation {\n  /** src + dst. */\n  Add,\n  /** src - dst. */\n  Subtract,\n  /** dst - src. */\n  ReverseSubtract,\n  /** Minimum of source and destination. */\n  Min,\n  /** Maximum of source and destination. */\n  Max\n}\n", "/**\n * Set which color channels can be rendered to frame buffer.\n * @remarks enumeration can be combined using bit operations.\n */\nexport enum ColorWriteMask {\n  /** Do not write to any channel. */\n  None = 0,\n  /** Write to the red channel. */\n  Red = 0x1,\n  /** Write to the green channel. */\n  Green = 0x2,\n  /** Write to the blue channel. */\n  Blue = 0x4,\n  /** Write to the alpha channel. */\n  Alpha = 0x8,\n  /** Write to all channel. */\n  All = 0xf\n}\n", "/**\n * Depth/Stencil comparison function.\n * @remarks Specifies a function that compares incoming pixel depth/stencil to the current depth/stencil buffer value.\n */\nexport enum CompareFunction {\n  /** never pass. */\n  Never,\n  /** pass if the incoming value is less than the depth/stencil buffer value. */\n  Less,\n  /** pass if the incoming value equals the depth/stencil buffer value. */\n  Equal,\n  /** pass if the incoming value is less than or equal to the depth/stencil buffer value. */\n  LessEqual,\n  /** pass if the incoming value is greater than the depth/stencil buffer value. */\n  Greater,\n  /** pass if the incoming value is not equal to the depth/stencil buffer value. */\n  NotEqual,\n  /** pass if the incoming value is greater than or equal to the depth/stencil buffer value. */\n  GreaterEqual,\n  /** always pass. */\n  Always\n}\n", "/**\n * Culling mode.\n * @remarks specifies whether or not front- and/or back-facing polygons can be culled.\n */\nexport enum CullMode {\n  /** Disable culling. */\n  Off,\n  /** cut the front-face of the polygons. */\n  Front,\n  /** cut the back-face of the polygons. */\n  Back\n}\n", "/**\n * Shader Property type.\n */\nexport enum ShaderPropertyType {\n  /** Float type. */\n  Float,\n  /** Int type. */\n  Int,\n  /** Vector2 type. */\n  Vector2,\n  /** Vector3 type. */\n  Vector3,\n  /** Vector4 type. */\n  Vector4,\n  /** Matrix type. */\n  Matrix,\n  /** Color type. */\n  Color,\n  /** Texture type. */\n  Texture,\n  /** Float array type. */\n  FloatArray,\n  /** Int array type. */\n  IntArray,\n  /** Texture array type. */\n  TextureArray\n}\n", "/**\n * Stencil operation mode.\n * @remarks sets the front and/or back-facing stencil test actions.\n */\nexport enum StencilOperation {\n  /** Keeps the current value. */\n  Keep,\n  /** Sets the stencil buffer value to 0. */\n  Zero,\n  /** Sets the stencil buffer value to the reference value. */\n  Replace,\n  /** Increments the current stencil buffer value. Clamps to the maximum representable unsigned value. */\n  IncrementSaturate,\n  /** Decrements the current stencil buffer value. Clamps to 0. */\n  DecrementSaturate,\n  /** Inverts the current stencil buffer value bitwise. */\n  Invert,\n  /** Increments the current stencil buffer value. Wraps stencil buffer value to zero when incrementing the maximum representable unsigned value. */\n  IncrementWrap,\n  /** Decrements the current stencil buffer value. Wraps stencil buffer value to the maximum representable unsigned value when decrementing a stencil buffer value of 0. */\n  DecrementWrap\n}\n", "/**\n * Shader macro。\n */\nexport class ShaderMacro {\n  /** @internal */\n  static _macroNameIdMap: Record<string, number> = Object.create(null);\n\n  private static _macroNameCounter: number = 0;\n\n  /** Name. */\n  readonly name: string;\n  /** Value. */\n  readonly value: string;\n\n  /** @internal */\n  _nameId: number;\n  /** @internal */\n  _maskIndex: number;\n  /** @internal */\n  _maskValue: number;\n\n  /**\n   * @internal\n   */\n  constructor(name: string, value: string, maskIndex: number, maskValue: number) {\n    this.name = name;\n    this._maskIndex = maskIndex;\n    this._maskValue = maskValue;\n    this.value = value;\n\n    const macroNameIDMap = ShaderMacro._macroNameIdMap;\n    let nameID = macroNameIDMap[name];\n    if (macroNameIDMap[name] === undefined) {\n      macroNameIDMap[name] = nameID = ShaderMacro._macroNameCounter++;\n    }\n    this._nameId = nameID;\n  }\n}\n", "import { ShaderMacro } from \"./ShaderMacro\";\n\n/**\n * Shader macro collection.\n * @internal\n */\nexport class ShaderMacroCollection {\n  /**\n   * Union of two macro collection.\n   * @param left - input macro collection\n   * @param right - input macro collection\n   * @param out - union output macro collection\n   */\n  static unionCollection(left: ShaderMacroCollection, right: ShaderMacroCollection, out: ShaderMacroCollection): void {\n    const outMask = out._mask;\n    let minSize: number, maxSize: number;\n    let minMask: number[], maxMask: number[];\n    if (left._length < right._length) {\n      minSize = left._length;\n      maxSize = right._length;\n      minMask = left._mask;\n      maxMask = right._mask;\n    } else {\n      minSize = right._length;\n      maxSize = left._length;\n      minMask = right._mask;\n      maxMask = left._mask;\n    }\n\n    let i = 0;\n    outMask.length < maxSize && (outMask.length = maxSize);\n    for (; i < minSize; i++) {\n      outMask[i] = minMask[i] | maxMask[i];\n    }\n    for (; i < maxSize; i++) {\n      outMask[i] = maxMask[i];\n    }\n    out._length = maxSize;\n  }\n\n  /** @internal */\n  _mask: number[] = [];\n  /** @internal */\n  _length: number = 0;\n\n  /**\n   * Enable one macro in this macro collection.\n   * @param macro - ShaderMacro\n   */\n  enable(macro: ShaderMacro): void {\n    const index = macro._maskIndex;\n    const size = index + 1;\n    const mask = this._mask;\n    let maskStart = this._length; // must from this._length because this._length maybe less than mask.length and have dirty data should clear.\n    if (maskStart < size) {\n      mask.length < size && (mask.length = size); // mask.length maybe small than size,maybe not.\n      for (; maskStart < index; maskStart++) {\n        mask[maskStart] = 0;\n      }\n      mask[index] = macro._maskValue;\n      this._length = size;\n    } else {\n      mask[index] |= macro._maskValue;\n    }\n  }\n\n  /**\n   * Disable one macro in this macro collection.\n   * @param macro - ShaderMacro\n   */\n  disable(macro: ShaderMacro): void {\n    const index = macro._maskIndex;\n    const mask = this._mask;\n    const endIndex = this._length - 1;\n    if (index > endIndex) {\n      return;\n    }\n    const newValue = mask[index] & ~macro._maskValue;\n    if (index == endIndex && newValue === 0) {\n      this._length--;\n    } else {\n      mask[index] = newValue;\n    }\n  }\n\n  /**\n   * Union of this and other macro collection.\n   * @param macroCollection - macro collection\n   */\n  unionCollection(macroCollection: ShaderMacroCollection): void {\n    const addMask = macroCollection._mask;\n    const addSize = macroCollection._length;\n    const mask = this._mask;\n    const maskSize = this._length;\n    if (maskSize < addSize) {\n      mask.length < addSize && (mask.length = addSize);\n      let i = 0;\n      for (; i < maskSize; i++) {\n        mask[i] |= addMask[i];\n      }\n      for (; i < addSize; i++) {\n        mask[i] = addMask[i];\n      }\n      this._length = addSize;\n    } else {\n      for (let i = 0; i < addSize; i++) {\n        mask[i] |= addMask[i];\n      }\n    }\n  }\n\n  /**\n   * Complementarity of this and other macro collection.\n   * @param macroCollection - macro collection\n   */\n  complementaryCollection(macroCollection: ShaderMacroCollection): void {\n    const removeMask = macroCollection._mask;\n    const mask = this._mask;\n    let endIndex = this._length - 1;\n    let i = Math.min(macroCollection._length - 1, endIndex);\n    for (; i >= 0; i--) {\n      const newValue = mask[i] & ~removeMask[i];\n      if (i == endIndex && newValue === 0) {\n        endIndex--;\n        this._length--;\n      } else {\n        mask[i] = newValue;\n      }\n    }\n  }\n\n  /**\n   * Intersection of this and other macro collection.\n   * @param macroCollection - macro collection\n   */\n  intersectionCollection(macroCollection: ShaderMacroCollection): void {\n    const unionMask = macroCollection._mask;\n    const mask = this._mask;\n    for (let i = this._length - 1; i >= 0; i--) {\n      const value = mask[i] & unionMask[i];\n      if (value == 0 && i == this._length - 1) {\n        this._length--;\n      } else {\n        mask[i] = value;\n      }\n    }\n  }\n\n  /**\n   * Whether macro is enabled in this macro collection.\n   * @param macro - ShaderMacro\n   */\n  isEnable(macro: ShaderMacro): boolean {\n    const index = macro._maskIndex;\n    if (index >= this._length) {\n      return false;\n    }\n    return (this._mask[index] & macro._maskValue) !== 0;\n  }\n\n  /**\n   * Clear this macro collection.\n   */\n  clear(): void {\n    this._length = 0;\n  }\n}\n", "export function _extends() {\n    _extends = Object.assign || function assign(target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];\n            for (var key in source) if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n        }\n\n        return target;\n    };\n\n    return _extends.apply(this, arguments);\n}\nexport { _extends as _ };\n", "import pbr_frag_define from \"./pbr_frag_define.glsl\";\n\n/** direct + IBL */\nimport pbr_helper from \"./pbr_helper.glsl\";\nimport brdf from \"./brdf.glsl\";\nimport direct_irradiance_frag_define from \"./direct_irradiance_frag_define.glsl\";\nimport ibl_frag_define from \"./ibl_frag_define.glsl\";\n\nimport pbr_frag from \"./pbr_frag.glsl\";\n\nexport default {\n  pbr_frag_define,\n\n  pbr_helper,\n  brdf,\n  direct_irradiance_frag_define,\n  ibl_frag_define,\n\n  pbr_frag\n};\n", "import ShadowCoord from \"./ShadowCoord.glsl\";\nimport ShadowFragmentDeclaration from \"./ShadowFragmentDeclaration.glsl\";\nimport shadow_sample_tent from \"./shadow_sample_tent.glsl\";\nimport ShadowVertexDeclaration from \"./ShadowVertexDeclaration.glsl\";\nimport ShadowVertex from \"./ShadowVertex.glsl\";\n\nexport default {\n  ShadowCoord,\n  ShadowFragmentDeclaration,\n  shadow_sample_tent,\n  ShadowVertexDeclaration,\n  ShadowVertex\n};\n", "import camera_declare from \"./camera_declare.glsl\";\nimport common from \"./common.glsl\";\nimport common_vert from \"./common_vert.glsl\";\nimport transform_declare from \"./transform_declare.glsl\";\n\nimport color_share from \"./color_share.glsl\";\nimport FogFragmentDeclaration from \"./FogFragmentDeclaration.glsl\";\nimport FogVertexDeclaration from \"./FogVertexDeclaration.glsl\";\nimport normal_share from \"./normal_share.glsl\";\nimport uv_share from \"./uv_share.glsl\";\nimport worldpos_share from \"./worldpos_share.glsl\";\n\nimport begin_normal_vert from \"./begin_normal_vert.glsl\";\nimport begin_position_vert from \"./begin_position_vert.glsl\";\n\nimport blendShape_input from \"./blendShape_input.glsl\";\nimport blendShape_vert from \"./blendShape_vert.glsl\";\nimport color_vert from \"./color_vert.glsl\";\nimport FogVertex from \"./FogVertex.glsl\";\nimport normal_vert from \"./normal_vert.glsl\";\nimport position_vert from \"./position_vert.glsl\";\nimport skinning_vert from \"./skinning_vert.glsl\";\nimport uv_vert from \"./uv_vert.glsl\";\nimport worldpos_vert from \"./worldpos_vert.glsl\";\n\nimport FogFragment from \"./FogFragment.glsl\";\nimport light_frag_define from \"./light_frag_define.glsl\";\nimport mobile_material_frag from \"./mobile_material_frag.glsl\";\n\nimport begin_mobile_frag from \"./begin_mobile_frag.glsl\";\nimport begin_viewdir_frag from \"./begin_viewdir_frag.glsl\";\n\nimport mobile_blinnphong_frag from \"./mobile_blinnphong_frag.glsl\";\n\nimport noise_cellular from \"./noise_cellular.glsl\";\nimport noise_cellular_2D from \"./noise_cellular_2D.glsl\";\nimport noise_cellular_2x2 from \"./noise_cellular_2x2.glsl\";\nimport noise_cellular_2x2x2 from \"./noise_cellular_2x2x2.glsl\";\nimport noise_cellular_3D from \"./noise_cellular_3D.glsl\";\nimport noise_common from \"./noise_common.glsl\";\nimport noise_perlin from \"./noise_perlin.glsl\";\nimport noise_perlin_2D from \"./noise_perlin_2D.glsl\";\nimport noise_perlin_3D from \"./noise_perlin_3D.glsl\";\nimport noise_perlin_4D from \"./noise_perlin_4D.glsl\";\nimport noise_psrd_2D from \"./noise_psrd_2D.glsl\";\nimport noise_simplex from \"./noise_simplex.glsl\";\nimport noise_simplex_2D from \"./noise_simplex_2D.glsl\";\nimport noise_simplex_3D from \"./noise_simplex_3D.glsl\";\nimport noise_simplex_3D_grad from \"./noise_simplex_3D_grad.glsl\";\nimport noise_simplex_4D from \"./noise_simplex_4D.glsl\";\n\nimport PBRShaderLib from \"./pbr\";\nimport ShadowLib from \"./shadow\";\n\nimport normal_get from \"./normal_get.glsl\";\n\nexport const ShaderLib = {\n  common,\n  common_vert,\n  transform_declare,\n  camera_declare,\n\n  color_share,\n  normal_share,\n  uv_share,\n  worldpos_share,\n  FogVertexDeclaration,\n  FogFragmentDeclaration,\n\n  begin_normal_vert,\n  begin_position_vert,\n\n  position_vert,\n  color_vert,\n  normal_vert,\n  skinning_vert,\n  blendShape_input,\n  blendShape_vert,\n  uv_vert,\n  worldpos_vert,\n  FogVertex,\n\n  light_frag_define,\n  mobile_material_frag,\n  FogFragment,\n\n  begin_mobile_frag,\n  begin_viewdir_frag,\n\n  mobile_blinnphong_frag,\n\n  noise_common,\n  noise_cellular_2D,\n  noise_cellular_2x2,\n  noise_cellular_2x2x2,\n  noise_cellular_3D,\n  noise_cellular,\n  noise_perlin_2D,\n  noise_perlin_3D,\n  noise_perlin_4D,\n  noise_perlin,\n  noise_psrd_2D,\n  noise_simplex_2D,\n  noise_simplex_3D_grad,\n  noise_simplex_3D,\n  noise_simplex_4D,\n  noise_simplex,\n\n  ...ShadowLib,\n  ...PBRShaderLib,\n  normal_get\n};\n", "import { ShaderLib } from \"./ShaderLib\";\nimport { Logger } from \"../base/Logger\";\n\nclass ShaderFactory {\n  static parseCustomMacros(macros: string[]) {\n    return macros.map((m) => `#define ${m}\\n`).join(\"\");\n  }\n\n  static parseIncludes(src: string) {\n    const regex = /^[ \\t]*#include +<([\\w\\d.]+)>/gm;\n\n    function replace(match, slice) {\n      var replace = ShaderLib[slice];\n\n      if (replace === undefined) {\n        Logger.error(`Shader slice \"${match.trim()}\" not founded.`);\n        return \"\";\n      }\n\n      return ShaderFactory.parseIncludes(replace);\n    }\n\n    return src.replace(regex, replace);\n  }\n\n  /**\n   * GLSL extension.\n   * @param extensions - such as [\"GL_EXT_shader_texture_lod\"]\n   * */\n  static parseExtension(extensions: string[]): string {\n    return extensions.map((e) => `#extension ${e} : enable\\n`).join(\"\");\n  }\n\n  /**\n   * Convert lower GLSL version to GLSL 300 es.\n   * @param shader - code\n   * @param isFrag - Whether it is a fragment shader.\n   * */\n  static convertTo300(shader: string, isFrag?: boolean) {\n    /** replace attribute and in */\n    shader = shader.replace(/\\battribute\\b/g, \"in\");\n    shader = shader.replace(/\\bvarying\\b/g, isFrag ? \"in\" : \"out\");\n\n    /** replace api */\n    shader = shader.replace(/\\btexture(2D|Cube)\\b/g, \"texture\");\n    shader = shader.replace(/\\btexture(2D|Cube)LodEXT\\b/g, \"textureLod\");\n    if (isFrag) {\n      const isMRT = /\\bgl_FragData\\[.+?\\]/g.test(shader);\n      if (isMRT) {\n        shader = shader.replace(/\\bgl_FragColor\\b/g, \"gl_FragData[0]\");\n        const result = shader.match(/\\bgl_FragData\\[.+?\\]/g);\n        shader = this._replaceMRTShader(shader, result);\n      } else {\n        shader = shader.replace(/void\\s+?main\\s*\\(/g, `out vec4 glFragColor;\\nvoid main(`);\n        shader = shader.replace(/\\bgl_FragColor\\b/g, \"glFragColor\");\n      }\n    }\n\n    return shader;\n  }\n\n  private static _replaceMRTShader(shader: string, result: string[]): string {\n    let declaration = \"\";\n    const mrtIndexSet = new Set();\n\n    for (let i = 0; i < result.length; i++) {\n      const res = result[i].match(/\\bgl_FragData\\[(.+?)\\]/);\n      mrtIndexSet.add(res[1]);\n    }\n\n    mrtIndexSet.forEach((index) => {\n      declaration += `layout(location=${index}) out vec4 fragOutColor${index};\\n`;\n    });\n    declaration += `void main(`;\n\n    shader = shader.replace(/\\bgl_FragData\\[(.+?)\\]/g, \"fragOutColor$1\");\n\n    shader = shader.replace(/void\\s+?main\\s*\\(/g, declaration);\n    return shader;\n  }\n}\n\nexport { ShaderFactory };\n", "/**\n * Shader data grouping.\n */\nexport enum ShaderDataGroup {\n  /** Scene group. */\n  Scene,\n  /** Camera group. */\n  Camera,\n  /** Renderer group. */\n  Renderer,\n  /** material group. */\n  Material\n}\n", "import { Color, Matrix, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { Engine } from \"../Engine\";\nimport { ColorSpace } from \"../enums/ColorSpace\";\nimport { IHardwareRenderer } from \"../renderingHardwareInterface/IHardwareRenderer\";\nimport { Texture } from \"../texture/Texture\";\nimport { ShaderPropertyValueType } from \"./ShaderData\";\n\n/**\n * Shader uniform。\n * @internal\n */\nexport class ShaderUniform {\n  name: string;\n  propertyId: number;\n  location: WebGLUniformLocation;\n  applyFunc: (shaderUniform: ShaderUniform, value: ShaderPropertyValueType) => void;\n  cacheValue: number | Vector2 | Vector3 | Vector4;\n  textureIndex: GLenum | GLenum[];\n  textureDefault: Texture | Texture[];\n  textureUseComporeMode: boolean = false;\n\n  private _rhi: IHardwareRenderer;\n  private _gl: WebGLRenderingContext;\n  private _colorSpace: ColorSpace;\n\n  constructor(engine: Engine) {\n    const rhi = engine._hardwareRenderer;\n    this._rhi = rhi;\n    this._gl = rhi.gl;\n    this._colorSpace = engine.settings.colorSpace;\n  }\n\n  upload1f(shaderUniform: ShaderUniform, value: number): void {\n    if (this.cacheValue !== value) {\n      this._gl.uniform1f(shaderUniform.location, value);\n      this.cacheValue = value;\n    }\n  }\n\n  upload1fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform1fv(shaderUniform.location, value);\n  }\n\n  upload2f(shaderUniform: ShaderUniform, value: Vector2 | Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector2>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g) {\n        if (this._colorSpace === ColorSpace.Linear) {\n          this._gl.uniform2f(\n            shaderUniform.location,\n            Color.gammaToLinearSpace((<Color>value).r),\n            Color.gammaToLinearSpace((<Color>value).g)\n          );\n        } else {\n          this._gl.uniform2f(shaderUniform.location, (<Color>value).r, (<Color>value).g);\n        }\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n      }\n    } else {\n      if (cacheValue.x !== (<Vector2>value).x || cacheValue.y !== (<Vector2>value).y) {\n        this._gl.uniform2f(shaderUniform.location, (<Vector2>value).x, (<Vector2>value).y);\n        cacheValue.x = (<Vector2>value).x;\n        cacheValue.y = (<Vector2>value).y;\n      }\n    }\n  }\n\n  upload2fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform2fv(shaderUniform.location, value);\n  }\n\n  upload3f(shaderUniform: ShaderUniform, value: Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector3>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g || cacheValue.z !== (<Color>value).b) {\n        if (this._colorSpace === ColorSpace.Linear) {\n          this._gl.uniform3f(\n            shaderUniform.location,\n            Color.gammaToLinearSpace((<Color>value).r),\n            Color.gammaToLinearSpace((<Color>value).g),\n            Color.gammaToLinearSpace((<Color>value).b)\n          );\n        } else {\n          this._gl.uniform3f(shaderUniform.location, (<Color>value).r, (<Color>value).g, (<Color>value).b);\n        }\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector3>value).x ||\n        cacheValue.y !== (<Vector3>value).y ||\n        cacheValue.z !== (<Vector3>value).z\n      ) {\n        this._gl.uniform3f(shaderUniform.location, (<Vector3>value).x, (<Vector3>value).y, (<Vector3>value).z);\n        cacheValue.x = (<Vector3>value).x;\n        cacheValue.y = (<Vector3>value).y;\n        cacheValue.z = (<Vector3>value).z;\n      }\n    }\n  }\n\n  upload3fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform3fv(shaderUniform.location, value);\n  }\n\n  upload4f(shaderUniform: ShaderUniform, value: Vector4 | Color): void {\n    const cacheValue = <Vector4>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (\n        cacheValue.x !== (<Color>value).r ||\n        cacheValue.y !== (<Color>value).g ||\n        cacheValue.z !== (<Color>value).b ||\n        cacheValue.w !== (<Color>value).a\n      ) {\n        if (this._colorSpace === ColorSpace.Linear) {\n          this._gl.uniform4f(\n            shaderUniform.location,\n            Color.gammaToLinearSpace((<Color>value).r),\n            Color.gammaToLinearSpace((<Color>value).g),\n            Color.gammaToLinearSpace((<Color>value).b),\n            (<Color>value).a\n          );\n        } else {\n          this._gl.uniform4f(\n            shaderUniform.location,\n            (<Color>value).r,\n            (<Color>value).g,\n            (<Color>value).b,\n            (<Color>value).a\n          );\n        }\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n        cacheValue.w = (<Color>value).a;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector4>value).x ||\n        cacheValue.y !== (<Vector4>value).y ||\n        cacheValue.z !== (<Vector4>value).z ||\n        cacheValue.w !== (<Vector4>value).w\n      ) {\n        this._gl.uniform4f(\n          shaderUniform.location,\n          (<Vector4>value).x,\n          (<Vector4>value).y,\n          (<Vector4>value).z,\n          (<Vector4>value).w\n        );\n        cacheValue.x = (<Vector4>value).x;\n        cacheValue.y = (<Vector4>value).y;\n        cacheValue.z = (<Vector4>value).z;\n        cacheValue.w = (<Vector4>value).w;\n      }\n    }\n  }\n\n  upload4fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform4fv(shaderUniform.location, value);\n  }\n\n  upload1i(shaderUniform: ShaderUniform, value: number): void {\n    if (this.cacheValue !== value) {\n      this._gl.uniform1i(shaderUniform.location, value);\n      this.cacheValue = value;\n    }\n  }\n\n  upload1iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform1iv(shaderUniform.location, value);\n  }\n\n  upload2i(shaderUniform: ShaderUniform, value: Vector2 | Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector2>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g) {\n        this._gl.uniform2i(shaderUniform.location, (<Color>value).r, (<Color>value).g);\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n      }\n    } else {\n      if (cacheValue.x !== (<Vector2>value).x || cacheValue.y !== (<Vector2>value).y) {\n        this._gl.uniform2i(shaderUniform.location, (<Vector2>value).x, (<Vector2>value).y);\n        cacheValue.x = (<Vector2>value).x;\n        cacheValue.y = (<Vector2>value).y;\n      }\n    }\n  }\n\n  upload2iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform2iv(shaderUniform.location, value);\n  }\n\n  upload3i(shaderUniform: ShaderUniform, value: Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector3>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g || cacheValue.z !== (<Color>value).b) {\n        this._gl.uniform3i(shaderUniform.location, (<Color>value).r, (<Color>value).g, (<Color>value).b);\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector3>value).x ||\n        cacheValue.y !== (<Vector3>value).y ||\n        cacheValue.z !== (<Vector3>value).z\n      ) {\n        this._gl.uniform3i(shaderUniform.location, (<Vector3>value).x, (<Vector3>value).y, (<Vector3>value).z);\n        cacheValue.x = (<Vector3>value).x;\n        cacheValue.y = (<Vector3>value).y;\n        cacheValue.z = (<Vector3>value).z;\n      }\n    }\n  }\n  upload3iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform3iv(shaderUniform.location, value);\n  }\n  upload4i(shaderUniform: ShaderUniform, value: Vector4 | Color): void {\n    const cacheValue = <Vector4>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (\n        cacheValue.x !== (<Color>value).r ||\n        cacheValue.y !== (<Color>value).g ||\n        cacheValue.z !== (<Color>value).b ||\n        cacheValue.w !== (<Color>value).a\n      ) {\n        this._gl.uniform4i(\n          shaderUniform.location,\n          (<Color>value).r,\n          (<Color>value).g,\n          (<Color>value).b,\n          (<Color>value).a\n        );\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n        cacheValue.w = (<Color>value).a;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector4>value).x ||\n        cacheValue.y !== (<Vector4>value).y ||\n        cacheValue.z !== (<Vector4>value).z ||\n        cacheValue.w !== (<Vector4>value).w\n      ) {\n        this._gl.uniform4i(\n          shaderUniform.location,\n          (<Vector4>value).x,\n          (<Vector4>value).y,\n          (<Vector4>value).z,\n          (<Vector4>value).w\n        );\n        cacheValue.x = (<Vector4>value).x;\n        cacheValue.y = (<Vector4>value).y;\n        cacheValue.z = (<Vector4>value).z;\n        cacheValue.w = (<Vector4>value).w;\n      }\n    }\n  }\n\n  upload4iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform4iv(shaderUniform.location, value);\n  }\n\n  uploadMat4(shaderUniform: ShaderUniform, value: Matrix): void {\n    this._gl.uniformMatrix4fv(shaderUniform.location, false, value.elements);\n  }\n\n  uploadMat4v(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniformMatrix4fv(shaderUniform.location, false, value);\n  }\n\n  uploadTexture(shaderUniform: ShaderUniform, value: Texture): void {\n    const rhi = this._rhi;\n    rhi.activeTexture(shaderUniform.textureIndex as GLenum);\n    rhi.bindTexture(value._platformTexture);\n\n    value._setUseDepthCompareMode(shaderUniform.textureUseComporeMode);\n  }\n\n  uploadTextureArray(shaderUniform: ShaderUniform, value: Texture[]): void {\n    const rhi = this._rhi;\n    const textureIndices = shaderUniform.textureIndex as GLenum[];\n    for (let i = 0; i < value.length; i++) {\n      const texture = value[i];\n      rhi.activeTexture(textureIndices[i]);\n      rhi.bindTexture(texture._platformTexture);\n      texture._setUseDepthCompareMode(shaderUniform.textureUseComporeMode);\n    }\n  }\n}\n", "import { ShaderUniform } from \"./ShaderUniform\";\n\n/**\n * Shader uniform block.\n * @internal\n */\nexport class ShaderUniformBlock {\n  readonly constUniforms: ShaderUniform[] = [];\n  readonly textureUniforms: ShaderUniform[] = [];\n}\n", "import { Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\nimport { IHardwareRenderer } from \"../renderingHardwareInterface/IHardwareRenderer\";\nimport { Scene } from \"../Scene\";\nimport { Texture } from \"../texture\";\nimport { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { Shader } from \"./Shader\";\nimport { ShaderData } from \"./ShaderData\";\nimport { ShaderUniform } from \"./ShaderUniform\";\nimport { ShaderUniformBlock } from \"./ShaderUniformBlock\";\n\n/**\n * Shader program, corresponding to the GPU shader program.\n * @internal\n */\nexport class ShaderProgram {\n  private static _counter: number = 0;\n\n  private static _addLineNum(str: string) {\n    const lines = str.split(\"\\n\");\n    const limitLength = (lines.length + 1).toString().length + 6;\n    let prefix;\n    return lines\n      .map((line, index) => {\n        prefix = `0:${index + 1}`;\n        if (prefix.length >= limitLength) return prefix.substring(0, limitLength) + line;\n\n        for (let i = 0; i < limitLength - prefix.length; i++) prefix += \" \";\n\n        return prefix + line;\n      })\n      .join(\"\\n\");\n  }\n\n  id: number;\n\n  readonly sceneUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly cameraUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly rendererUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly materialUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly otherUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n\n  /** @internal */\n  _uploadRenderCount: number = -1;\n  /** @internal */\n  _uploadScene: Scene;\n  /** @internal */\n  _uploadCamera: Camera;\n  /** @internal */\n  _uploadRenderer: Renderer;\n  /** @internal */\n  _uploadMaterial: Material;\n\n  attributeLocation: Record<string, GLint> = Object.create(null);\n\n  // @todo: move to RHI.\n  private _isValid: boolean;\n  private _engine: Engine;\n  private _gl: WebGLRenderingContext;\n  private _vertexShader: WebGLShader;\n  private _fragmentShader: WebGLShader;\n  private _glProgram: WebGLProgram;\n  private _activeTextureUint: number = 0;\n\n  /**\n   * Whether this shader program is valid.\n   */\n  get isValid(): boolean {\n    return this._isValid;\n  }\n\n  constructor(engine: Engine, vertexSource: string, fragmentSource: string) {\n    this._engine = engine;\n    this._gl = engine._hardwareRenderer.gl;\n    this._glProgram = this._createProgram(vertexSource, fragmentSource);\n\n    if (this._glProgram) {\n      this._isValid = true;\n      this._recordLocation();\n    } else {\n      this._isValid = false;\n    }\n\n    this.id = ShaderProgram._counter++;\n  }\n\n  /**\n   * Upload all shader data in shader uniform block.\n   * @param uniformBlock - shader Uniform block\n   * @param shaderData - shader data\n   */\n  uploadAll(uniformBlock: ShaderUniformBlock, shaderData: ShaderData): void {\n    this.uploadUniforms(uniformBlock, shaderData);\n    this.uploadTextures(uniformBlock, shaderData);\n  }\n\n  /**\n   * Upload constant shader data in shader uniform block.\n   * @param uniformBlock - shader Uniform block\n   * @param shaderData - shader data\n   */\n  uploadUniforms(uniformBlock: ShaderUniformBlock, shaderData: ShaderData): void {\n    const propertyValueMap = shaderData._propertyValueMap;\n    const constUniforms = uniformBlock.constUniforms;\n\n    for (let i = 0, n = constUniforms.length; i < n; i++) {\n      const uniform = constUniforms[i];\n      const data = propertyValueMap[uniform.propertyId];\n      data != null && uniform.applyFunc(uniform, data);\n    }\n  }\n\n  /**\n   * Upload texture shader data in shader uniform block.\n   * @param uniformBlock - shader Uniform block\n   * @param shaderData - shader data\n   */\n  uploadTextures(uniformBlock: ShaderUniformBlock, shaderData: ShaderData): void {\n    const propertyValueMap = shaderData._propertyValueMap;\n    const textureUniforms = uniformBlock.textureUniforms;\n    // textureUniforms property maybe null if ShaderUniformBlock not contain any texture.\n    if (textureUniforms) {\n      for (let i = 0, n = textureUniforms.length; i < n; i++) {\n        const uniform = textureUniforms[i];\n        const texture = <Texture>propertyValueMap[uniform.propertyId];\n        if (texture && !texture.destroyed) {\n          uniform.applyFunc(uniform, texture);\n        } else {\n          uniform.applyFunc(uniform, uniform.textureDefault);\n        }\n      }\n    }\n  }\n\n  /**\n   * Upload ungroup texture shader data in shader uniform block.\n   */\n  uploadUnGroupTextures(): void {\n    const textureUniforms = this.otherUniformBlock.textureUniforms;\n    // textureUniforms property maybe null if ShaderUniformBlock not contain any texture.\n    if (textureUniforms) {\n      for (let i = 0, n = textureUniforms.length; i < n; i++) {\n        const uniform = textureUniforms[i];\n        uniform.applyFunc(uniform, uniform.textureDefault);\n      }\n    }\n  }\n\n  /**\n   * Grouping other data.\n   */\n  groupingOtherUniformBlock(): void {\n    const { constUniforms, textureUniforms } = this.otherUniformBlock;\n    constUniforms.length > 0 && this._groupingSubOtherUniforms(constUniforms, false);\n    textureUniforms.length > 0 && this._groupingSubOtherUniforms(textureUniforms, true);\n  }\n\n  /**\n   * Bind this shader program.\n   * @returns Whether the shader program is switched.\n   */\n  bind(): boolean {\n    const rhi: IHardwareRenderer = this._engine._hardwareRenderer;\n    if (rhi._currentBind !== this) {\n      this._gl.useProgram(this._glProgram);\n      rhi._currentBind = this;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Destroy this shader program.\n   */\n  destroy(): void {\n    const gl = this._gl;\n    this._vertexShader && gl.deleteShader(this._vertexShader);\n    this._fragmentShader && gl.deleteShader(this._fragmentShader);\n    this._glProgram && gl.deleteProgram(this._glProgram);\n  }\n\n  private _groupingSubOtherUniforms(uniforms: ShaderUniform[], isTexture: boolean): void {\n    for (let i = uniforms.length - 1; i >= 0; i--) {\n      const uniform = uniforms[i];\n      const group = Shader._getShaderPropertyGroup(uniform.name);\n      if (group !== undefined) {\n        uniforms.splice(uniforms.indexOf(uniform), 1);\n        this._groupingUniform(uniform, group, isTexture);\n      }\n    }\n  }\n\n  private _groupingUniform(uniform: ShaderUniform, group: ShaderDataGroup, isTexture: boolean): void {\n    switch (group) {\n      case ShaderDataGroup.Scene:\n        if (isTexture) {\n          this.sceneUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.sceneUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.Camera:\n        if (isTexture) {\n          this.cameraUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.cameraUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.Renderer:\n        if (isTexture) {\n          this.rendererUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.rendererUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.Material:\n        if (isTexture) {\n          this.materialUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.materialUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      default:\n        if (isTexture) {\n          this.otherUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.otherUniformBlock.constUniforms.push(uniform);\n        }\n    }\n  }\n\n  /**\n   * init and link program with shader.\n   */\n  private _createProgram(vertexSource: string, fragmentSource: string): WebGLProgram | null {\n    const gl = this._gl;\n\n    // create and compile shader\n    const vertexShader = this._createShader(gl.VERTEX_SHADER, vertexSource);\n    if (!vertexShader) {\n      return null;\n    }\n\n    const fragmentShader = this._createShader(gl.FRAGMENT_SHADER, fragmentSource);\n    if (!fragmentShader) {\n      return null;\n    }\n\n    // link program and shader\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    gl.validateProgram(program);\n\n    if (gl.isContextLost()) {\n      Logger.error(\"Context lost while linking program.\");\n      gl.deleteShader(vertexShader);\n      gl.deleteShader(fragmentShader);\n      return null;\n    }\n\n    if (Logger.isEnabled && !gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      Logger.error(\"Could not link WebGL program. \\n\" + gl.getProgramInfoLog(program));\n      gl.deleteProgram(program);\n      return null;\n    }\n\n    this._vertexShader = vertexShader;\n    this._fragmentShader = fragmentShader;\n    return program;\n  }\n\n  private _createShader(shaderType: number, shaderSource: string): WebGLShader | null {\n    const gl = this._gl;\n    const shader = gl.createShader(shaderType);\n\n    if (!shader) {\n      console.warn(\"Context lost while create shader.\");\n      return null;\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n\n    if (gl.isContextLost()) {\n      console.warn(\"Context lost while compiling shader.\");\n      gl.deleteShader(shader);\n      return null;\n    }\n\n    if (Logger.isEnabled && !gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      console.warn(\n        `Could not compile WebGL shader.\\n${gl.getShaderInfoLog(shader)}`,\n        ShaderProgram._addLineNum(shaderSource)\n      );\n      gl.deleteShader(shader);\n      return null;\n    }\n\n    return shader;\n  }\n\n  /**\n   * record the location of uniform/attribute.\n   */\n  private _recordLocation(): void {\n    const gl = this._gl;\n    const program = this._glProgram;\n    const uniformInfos = this._getUniformInfos();\n    const attributeInfos = this._getAttributeInfos();\n\n    uniformInfos.forEach(({ name, size, type }) => {\n      const shaderUniform = new ShaderUniform(this._engine);\n      let isArray = false;\n      let isTexture = false;\n\n      if (name.indexOf(\"[0]\") > 0) {\n        name = name.substr(0, name.length - 3);\n        isArray = true;\n      }\n\n      const location = gl.getUniformLocation(program, name);\n      shaderUniform.name = name;\n      shaderUniform.propertyId = Shader.getPropertyByName(name)._uniqueId;\n      shaderUniform.location = location;\n\n      switch (type) {\n        case gl.FLOAT:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload1fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload1f;\n            shaderUniform.cacheValue = 0;\n          }\n          break;\n        case gl.FLOAT_VEC2:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload2fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload2f;\n            shaderUniform.cacheValue = new Vector2(0, 0);\n          }\n          break;\n        case gl.FLOAT_VEC3:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload3fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload3f;\n            shaderUniform.cacheValue = new Vector3(0, 0, 0);\n          }\n          break;\n        case gl.FLOAT_VEC4:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload4fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload4f;\n            shaderUniform.cacheValue = new Vector4(0, 0, 0, 0);\n          }\n          break;\n        case gl.BOOL:\n        case gl.INT:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload1iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload1i;\n            shaderUniform.cacheValue = 0;\n          }\n          break;\n        case gl.BOOL_VEC2:\n        case gl.INT_VEC2:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload2iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload2i;\n            shaderUniform.cacheValue = new Vector2(0, 0);\n          }\n          break;\n        case gl.BOOL_VEC3:\n        case gl.INT_VEC3:\n          if (isArray) {\n          } else {\n          }\n          shaderUniform.applyFunc = isArray ? shaderUniform.upload3iv : shaderUniform.upload3i;\n          shaderUniform.cacheValue = new Vector3(0, 0, 0);\n          break;\n        case gl.BOOL_VEC4:\n        case gl.INT_VEC4:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload4iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload4i;\n            shaderUniform.cacheValue = new Vector4(0, 0, 0);\n          }\n          break;\n        case gl.FLOAT_MAT4:\n          shaderUniform.applyFunc = isArray ? shaderUniform.uploadMat4v : shaderUniform.uploadMat4;\n          break;\n        case gl.SAMPLER_2D:\n        case gl.SAMPLER_CUBE:\n        case (<WebGL2RenderingContext>gl).SAMPLER_2D_ARRAY:\n        case (<WebGL2RenderingContext>gl).SAMPLER_2D_SHADOW:\n          let defaultTexture: Texture;\n          switch (type) {\n            case gl.SAMPLER_2D:\n              defaultTexture = this._engine._magentaTexture2D;\n              break;\n            case gl.SAMPLER_CUBE:\n              defaultTexture = this._engine._magentaTextureCube;\n              break;\n            case (<WebGL2RenderingContext>gl).SAMPLER_2D_ARRAY:\n              defaultTexture = this._engine._magentaTexture2DArray;\n              break;\n            case (<WebGL2RenderingContext>gl).SAMPLER_2D_SHADOW:\n              defaultTexture = this._engine._depthTexture2D;\n              shaderUniform.textureUseComporeMode = true;\n              break;\n          }\n\n          isTexture = true;\n          if (isArray) {\n            const defaultTextures = new Array<Texture>(size);\n            const textureIndices = new Int32Array(size);\n            const glTextureIndices = new Array<number>(size);\n\n            for (let i = 0; i < size; i++) {\n              defaultTextures[i] = defaultTexture;\n              textureIndices[i] = this._activeTextureUint;\n              glTextureIndices[i] = gl.TEXTURE0 + this._activeTextureUint++;\n            }\n            shaderUniform.textureDefault = defaultTextures;\n            shaderUniform.textureIndex = glTextureIndices;\n            shaderUniform.applyFunc = shaderUniform.uploadTextureArray;\n            this.bind();\n            gl.uniform1iv(location, textureIndices);\n          } else {\n            const glTextureIndex = gl.TEXTURE0 + this._activeTextureUint;\n            shaderUniform.textureDefault = defaultTexture;\n            shaderUniform.textureIndex = glTextureIndex;\n            shaderUniform.applyFunc = shaderUniform.uploadTexture;\n            this.bind();\n            gl.uniform1i(location, this._activeTextureUint++);\n          }\n          break;\n        default:\n          throw new Error(\"Unsupported uniform type\");\n      }\n\n      const group = Shader._getShaderPropertyGroup(name);\n      this._groupingUniform(shaderUniform, group, isTexture);\n    });\n\n    attributeInfos.forEach(({ name }) => {\n      this.attributeLocation[name] = gl.getAttribLocation(program, name);\n    });\n  }\n\n  private _getUniformInfos(): WebGLActiveInfo[] {\n    const gl = this._gl;\n    const program = this._glProgram;\n    const uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    const uniformInfos = new Array<WebGLActiveInfo>(uniformCount);\n    for (let i = 0; i < uniformCount; ++i) {\n      const info = gl.getActiveUniform(program, i);\n      uniformInfos[i] = info;\n    }\n\n    return uniformInfos;\n  }\n\n  private _getAttributeInfos(): WebGLActiveInfo[] {\n    const gl = this._gl;\n    const program = this._glProgram;\n    const attributeInfos = new Array<WebGLActiveInfo>();\n\n    const attributeCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i = 0; i < attributeCount; ++i) {\n      const info = gl.getActiveAttrib(program, i);\n      attributeInfos[i] = info;\n    }\n\n    return attributeInfos;\n  }\n}\n", "import { GLCapabilityType } from \"../base/Constant\";\nimport { Engine } from \"../Engine\";\nimport { ShaderFactory } from \"../shaderlib/ShaderFactory\";\nimport { Shader } from \"./Shader\";\nimport { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderProgram } from \"./ShaderProgram\";\n\n/**\n * Shader pass containing vertex and fragment source.\n */\nexport class ShaderPass {\n  private static _shaderPassCounter: number = 0;\n\n  /** @internal */\n  _shaderPassId: number = 0;\n\n  private _vertexSource: string;\n  private _fragmentSource: string;\n\n  constructor(vertexSource: string, fragmentSource: string) {\n    this._shaderPassId = ShaderPass._shaderPassCounter++;\n\n    this._vertexSource = vertexSource;\n    this._fragmentSource = fragmentSource;\n  }\n\n  /**\n   * @internal\n   */\n  _getShaderProgram(engine: Engine, macroCollection: ShaderMacroCollection): ShaderProgram {\n    const shaderProgramPool = engine._getShaderProgramPool(this);\n    let shaderProgram = shaderProgramPool.get(macroCollection);\n    if (shaderProgram) {\n      return shaderProgram;\n    }\n\n    const isWebGL2: boolean = engine._hardwareRenderer.isWebGL2;\n    const macroNameList = [];\n    Shader._getNamesByMacros(macroCollection, macroNameList);\n    const macroNameStr = ShaderFactory.parseCustomMacros(macroNameList);\n    const versionStr = isWebGL2 ? \"#version 300 es\" : \"#version 100\";\n    const graphicAPI = isWebGL2 ? \"#define GRAPHICS_API_WEBGL2\" : \"#define GRAPHICS_API_WEBGL1\";\n    let precisionStr = `\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n      precision highp int;\n    #else\n      precision mediump float;\n      precision mediump int;\n    #endif\n    `;\n\n    if (engine._hardwareRenderer.canIUse(GLCapabilityType.shaderTextureLod)) {\n      precisionStr += \"#define HAS_TEX_LOD\\n\";\n    }\n    if (engine._hardwareRenderer.canIUse(GLCapabilityType.standardDerivatives)) {\n      precisionStr += \"#define HAS_DERIVATIVES\\n\";\n    }\n\n    let vertexSource = ShaderFactory.parseIncludes(\n      ` ${versionStr}\n        ${graphicAPI}\n        ${macroNameStr}\n      ` + this._vertexSource\n    );\n\n    let fragmentSource = ShaderFactory.parseIncludes(\n      ` ${versionStr}\n        ${graphicAPI}\n        ${isWebGL2 ? \"\" : ShaderFactory.parseExtension(Shader._shaderExtension)}\n        ${precisionStr}\n        ${macroNameStr}\n      ` + this._fragmentSource\n    );\n\n    if (isWebGL2) {\n      vertexSource = ShaderFactory.convertTo300(vertexSource);\n      fragmentSource = ShaderFactory.convertTo300(fragmentSource, true);\n    }\n\n    shaderProgram = new ShaderProgram(engine, vertexSource, fragmentSource);\n\n    shaderProgramPool.cache(shaderProgram);\n    return shaderProgram;\n  }\n}\n", "import { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { ShaderPropertyType } from \"./enums/ShaderPropertyType\";\n\n/**\n * Shader property.\n */\nexport class ShaderProperty {\n  private static _propertyNameCounter: number = 0;\n\n  /** @internal */\n  _uniqueId: number;\n  /** @internal */\n  _group: ShaderDataGroup;\n  /** @internal */\n  _type: ShaderPropertyType;\n\n  /** Shader property name. */\n  readonly name: string;\n\n  /**\n   * Shader property type.\n   */\n  get type(): ShaderPropertyType {\n    return this._type;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(name: string) {\n    this.name = name;\n    this._uniqueId = ShaderProperty._propertyNameCounter++;\n  }\n}\n", "import { Engine } from \"../Engine\";\nimport { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { ShaderMacro } from \"./ShaderMacro\";\nimport { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderPass } from \"./ShaderPass\";\nimport { ShaderProperty } from \"./ShaderProperty\";\n\n/**\n * Shader for rendering.\n */\nexport class Shader {\n  /** @internal */\n  static readonly _compileMacros: ShaderMacroCollection = new ShaderMacroCollection();\n  /** @internal */\n  static readonly _shaderExtension: string[] = [\n    \"GL_EXT_shader_texture_lod\",\n    \"GL_OES_standard_derivatives\",\n    \"GL_EXT_draw_buffers\"\n  ];\n  /** @internal */\n  static _propertyIdMap: Record<number, ShaderProperty> = Object.create(null);\n\n  private static _shaderMap: Record<string, Shader> = Object.create(null);\n  private static _propertyNameMap: Record<string, ShaderProperty> = Object.create(null);\n  private static _macroMaskMap: string[][] = [];\n  private static _macroCounter: number = 0;\n  private static _macroMap: Record<string, ShaderMacro> = Object.create(null);\n\n  /**\n   * Create a shader.\n   * @param name - Name of the shader\n   * @param vertexSource - Vertex source code\n   * @param fragmentSource - Fragment source code\n   * @returns Shader\n   */\n  static create(name: string, vertexSource: string, fragmentSource: string): Shader;\n\n  /**\n   * Create a shader.\n   * @param name - Name of the shader\n   * @param shaderPasses - Shader passes\n   * @returns Shader\n   */\n  static create(name: string, shaderPasses: ShaderPass[]): Shader;\n\n  static create(name: string, vertexSourceOrShaderPasses: string | ShaderPass[], fragmentSource?: string): Shader {\n    const shaderMap = Shader._shaderMap;\n    if (shaderMap[name]) {\n      throw `Shader named \"${name}\" already exists.`;\n    }\n    return (shaderMap[name] = new Shader(name, vertexSourceOrShaderPasses, fragmentSource));\n  }\n\n  /**\n   * Find a shader by name.\n   * @param name - Name of the shader\n   */\n  static find(name: string): Shader {\n    return Shader._shaderMap[name];\n  }\n\n  /**\n   * Get shader macro by name.\n   * @param name - Name of the shader macro\n   * @returns Shader macro\n   */\n  static getMacroByName(name: string): ShaderMacro;\n\n  /**\n   * Get shader macro by name.\n   * @param name - Name of the shader macro\n   * @param value - Value of the shader macro\n   * @returns Shader macro\n   */\n  static getMacroByName(name: string, value: string): ShaderMacro;\n\n  static getMacroByName(name: string, value?: string): ShaderMacro {\n    const key = value ? name + ` ` + value : name;\n    let macro = Shader._macroMap[key];\n    if (!macro) {\n      const maskMap = Shader._macroMaskMap;\n      const counter = Shader._macroCounter;\n      const index = Math.floor(counter / 32);\n      const bit = counter % 32;\n\n      macro = new ShaderMacro(name, value, index, 1 << bit);\n      Shader._macroMap[key] = macro;\n      if (index == maskMap.length) {\n        maskMap.length++;\n        maskMap[index] = new Array<string>(32);\n      }\n      maskMap[index][bit] = key;\n      Shader._macroCounter++;\n    }\n    return macro;\n  }\n\n  /**\n   * Get shader property by name.\n   * @param name - Name of the shader property\n   * @returns Shader property\n   */\n  static getPropertyByName(name: string): ShaderProperty {\n    const propertyNameMap = Shader._propertyNameMap;\n    if (propertyNameMap[name] != null) {\n      return propertyNameMap[name];\n    } else {\n      const property = new ShaderProperty(name);\n      propertyNameMap[name] = property;\n      Shader._propertyIdMap[property._uniqueId] = property;\n      return property;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getShaderPropertyGroup(propertyName: string): ShaderDataGroup | null {\n    const shaderProperty = Shader._propertyNameMap[propertyName];\n    return shaderProperty?._group;\n  }\n\n  /**\n   * @internal\n   */\n  static _getNamesByMacros(macros: ShaderMacroCollection, out: string[]): void {\n    const maskMap = Shader._macroMaskMap;\n    const mask = macros._mask;\n    out.length = 0;\n    for (let i = 0, n = macros._length; i < n; i++) {\n      const subMaskMap = maskMap[i];\n      const subMask = mask[i];\n      const m = subMask < 0 ? 32 : Math.floor(Math.log2(subMask)) + 1; // if is negative must contain 1 << 31.\n      for (let j = 0; j < m; j++) {\n        if (subMask & (1 << j)) {\n          out.push(subMaskMap[j]);\n        }\n      }\n    }\n  }\n\n  /** The name of shader. */\n  readonly name: string;\n\n  /**\n   *  Shader passes.\n   */\n  get passes(): ReadonlyArray<ShaderPass> {\n    return this._passes;\n  }\n\n  private _passes: ShaderPass[] = [];\n\n  private constructor(name: string, vertexSourceOrShaderPasses: string | ShaderPass[], fragmentSource?: string) {\n    this.name = name;\n\n    if (typeof vertexSourceOrShaderPasses === \"string\") {\n      this._passes.push(new ShaderPass(vertexSourceOrShaderPasses, fragmentSource));\n    } else {\n      const passCount = vertexSourceOrShaderPasses.length;\n      if (passCount < 1) {\n        throw \"Shader pass count must large than 0.\";\n      }\n      for (let i = 0; i < passCount; i++) {\n        this._passes.push(vertexSourceOrShaderPasses[i]);\n      }\n    }\n  }\n\n  /**\n   * Compile shader variant by macro name list.\n   *\n   * @remarks\n   * Usually a shader contains some macros,any combination of macros is called shader variant.\n   *\n   * @param engine - Engine to which the shader variant belongs\n   * @param macros - Macro name list\n   * @returns Is the compiled shader variant valid\n   */\n  compileVariant(engine: Engine, macros: string[]): boolean {\n    const compileMacros = Shader._compileMacros;\n    compileMacros.clear();\n    for (let i = 0, n = macros.length; i < n; i++) {\n      compileMacros.enable(Shader.getMacroByName(macros[i]));\n    }\n\n    let isValid = true;\n    const passes = this._passes;\n    for (let i = 0, n = passes.length; i < n; i++) {\n      isValid &&= passes[i]._getShaderProgram(engine, compileMacros).isValid;\n    }\n    return isValid;\n  }\n}\n", "import { IClone } from \"@galacean/engine-design\";\nimport { Color, Matrix, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { IRefObject } from \"../asset/IRefObject\";\nimport { CloneManager } from \"../clone/CloneManager\";\nimport { Texture } from \"../texture/Texture\";\nimport { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { ShaderPropertyType } from \"./enums/ShaderPropertyType\";\nimport { Shader } from \"./Shader\";\nimport { ShaderMacro } from \"./ShaderMacro\";\nimport { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderProperty } from \"./ShaderProperty\";\n\n/**\n * Shader data collection,Correspondence includes shader properties data and macros data.\n */\nexport class ShaderData implements IRefObject, IClone {\n  /** @internal */\n  _group: ShaderDataGroup;\n  /** @internal */\n  _propertyValueMap: Record<number, ShaderPropertyValueType> = Object.create(null);\n  /** @internal */\n  _macroCollection: ShaderMacroCollection = new ShaderMacroCollection();\n\n  private _macroMap: Record<number, ShaderMacro> = Object.create(null);\n  private _refCount: number = 0;\n\n  /**\n   * @internal\n   */\n  constructor(group: ShaderDataGroup) {\n    this._group = group;\n  }\n\n  /**\n   * Get float by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Float\n   */\n  getFloat(propertyName: string): number;\n\n  /**\n   * Get float by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Float\n   */\n  getFloat(property: ShaderProperty): number;\n\n  getFloat(property: string | ShaderProperty): number {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set float by shader property name.\n   * @remarks Corresponding float shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Float\n   */\n  setFloat(propertyName: string, value: number): void;\n\n  /**\n   * Set float by shader property.\n   * @remarks Corresponding float shader property type.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Float\n   */\n  setFloat(property: ShaderProperty, value: number): void;\n\n  setFloat(property: string | ShaderProperty, value: number): void {\n    this._setPropertyValue(property, ShaderPropertyType.Float, value);\n  }\n\n  /**\n   * Get int by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Int\n   */\n  getInt(propertyName: string): number;\n\n  /**\n   * Get int by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Int\n   */\n  getInt(property: ShaderProperty): number;\n\n  getInt(property: string | ShaderProperty): number {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set int by shader property name.\n   * @remarks Correspondence includes int and bool shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Int\n   */\n  setInt(propertyName: string, value: number): void;\n\n  /**\n   * Set int by shader property.\n   * @remarks Correspondence includes int and bool shader property type.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Int\n   */\n  setInt(property: ShaderProperty, value: number): void;\n\n  setInt(property: string | ShaderProperty, value: number): void {\n    this._setPropertyValue(property, ShaderPropertyType.Int, value);\n  }\n\n  /**\n   * Get float array by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Float array\n   */\n  getFloatArray(propertyName: string): Float32Array;\n\n  /**\n   * Get float array by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Float array\n   */\n  getFloatArray(property: ShaderProperty): Float32Array;\n\n  getFloatArray(property: string | ShaderProperty): Float32Array {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set float array by shader property name.\n   * @remarks Correspondence includes float array、vec2 array、vec3 array、vec4 array and matrix array shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Float array\n   */\n  setFloatArray(propertyName: string, value: Float32Array): void;\n\n  /**\n   * Set float array by shader property.\n   * @remarks Correspondence includes float array、vec2 array、vec3 array、vec4 array and matrix array shader property type.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Float array\n   */\n  setFloatArray(property: ShaderProperty, value: Float32Array): void;\n\n  setFloatArray(property: string | ShaderProperty, value: Float32Array): void {\n    this._setPropertyValue(property, ShaderPropertyType.FloatArray, value);\n  }\n\n  /**\n   * Get int array by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Int Array\n   */\n  getIntArray(propertyName: string): Int32Array;\n\n  /**\n   * Get int array by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Int Array\n   */\n  getIntArray(property: ShaderProperty): Int32Array;\n\n  getIntArray(property: string | ShaderProperty): Int32Array {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set int array by shader property name.\n   * @remarks Correspondence includes bool array、int array、bvec2 array、bvec3 array、bvec4 array、ivec2 array、ivec3 array and ivec4 array shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Int Array\n   */\n  setIntArray(propertyName: string, value: Int32Array): void;\n\n  /**\n   * Set int array by shader property.\n   * @remarks Correspondence includes bool array、int array、bvec2 array、bvec3 array、bvec4 array、ivec2 array、ivec3 array and ivec4 array shader property type.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Int Array\n   */\n  setIntArray(property: ShaderProperty, value: Int32Array): void;\n\n  setIntArray(property: string | ShaderProperty, value: Int32Array): void {\n    this._setPropertyValue(property, ShaderPropertyType.IntArray, value);\n  }\n\n  /**\n   * Get two-dimensional from shader property name.\n   * @param propertyName - Shader property name\n   * @returns Two-dimensional vector\n   */\n  getVector2(propertyName: string): Vector2;\n\n  /**\n   * Get two-dimensional from shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Two-dimensional vector\n   */\n  getVector2(property: ShaderProperty): Vector2;\n\n  getVector2(property: string | ShaderProperty): Vector2 {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set two-dimensional vector from shader property name.\n   * @remarks Correspondence includes vec2、ivec2 and bvec2 shader property type.\n   * @param property - Shader property name\n   * @param value - Two-dimensional vector\n   */\n  setVector2(property: string, value: Vector2): void;\n\n  /**\n   * Set two-dimensional vector from shader property.\n   * @remarks Correspondence includes vec2、ivec2 and bvec2 shader property type.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Two-dimensional vector\n   */\n  setVector2(property: ShaderProperty, value: Vector2): void;\n\n  setVector2(property: string | ShaderProperty, value: Vector2): void {\n    this._setPropertyValue(property, ShaderPropertyType.Vector2, value);\n  }\n\n  /**\n   * Get vector3 by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Three-dimensional vector\n   */\n  getVector3(propertyName: string): Vector3;\n\n  /**\n   * Get vector3 by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Three-dimensional vector\n   */\n  getVector3(property: ShaderProperty): Vector3;\n\n  getVector3(property: string | ShaderProperty): Vector3 {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set three dimensional vector by shader property name.\n   * @remarks Correspondence includes vec3、ivec3 and bvec3 shader property type.\n   * @param property - Shader property name\n   * @param value - Three-dimensional vector\n   */\n  setVector3(property: string, value: Vector3): void;\n\n  /**\n   * Set three dimensional vector by shader property.\n   * @remarks Correspondence includes vec3、ivec3 and bvec3 shader property type.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Three-dimensional vector\n   */\n  setVector3(property: ShaderProperty, value: Vector3): void;\n\n  setVector3(property: string | ShaderProperty, value: Vector3): void {\n    this._setPropertyValue(property, ShaderPropertyType.Vector3, value);\n  }\n\n  /**\n   * Get vector4 by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Four-dimensional vector\n   */\n  getVector4(propertyName: string): Vector4;\n\n  /**\n   * Get vector4 by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Four-dimensional vector\n   */\n  getVector4(property: ShaderProperty): Vector4;\n\n  getVector4(property: string | ShaderProperty): Vector4 {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set four-dimensional vector by shader property name.\n   * @remarks Correspondence includes vec4、ivec4 and bvec4 shader property type.\n   * @param property - Shader property name\n   * @param value - Four-dimensional vector\n   */\n  setVector4(property: string, value: Vector4): void;\n\n  /**\n   * Set four-dimensional vector by shader property.\n   * @remarks Correspondence includes vec4、ivec4 and bvec4 shader property type.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Four-dimensional vector\n   */\n  setVector4(property: ShaderProperty, value: Vector4): void;\n\n  setVector4(property: string | ShaderProperty, value: Vector4): void {\n    this._setPropertyValue(property, ShaderPropertyType.Vector4, value);\n  }\n\n  /**\n   * Get matrix by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Matrix\n   */\n  getMatrix(propertyName: string): Matrix;\n\n  /**\n   * Get matrix by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Matrix\n   */\n  getMatrix(property: ShaderProperty): Matrix;\n\n  getMatrix(property: string | ShaderProperty): Matrix {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set matrix by shader property name.\n   * @remarks Correspondence includes matrix shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Matrix\n   */\n  setMatrix(propertyName: string, value: Matrix);\n\n  /**\n   * Set matrix by shader property.\n   * @remarks Correspondence includes matrix shader property type.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Matrix\n   */\n  setMatrix(property: ShaderProperty, value: Matrix);\n\n  setMatrix(property: string | ShaderProperty, value: Matrix): void {\n    this._setPropertyValue(property, ShaderPropertyType.Matrix, value);\n  }\n\n  /**\n   * Get color by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Color\n   */\n  getColor(propertyName: string): Color;\n\n  /**\n   * Get color by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Color\n   */\n  getColor(property: ShaderProperty): Color;\n\n  getColor(property: string | ShaderProperty): Color {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set color by shader property name.\n   * @remarks Correspondence includes vec4 shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Color\n   */\n  setColor(propertyName: string, value: Color): void;\n\n  /**\n   * Set color by shader property.\n   * @remarks Correspondence includes vec4 shader property type.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Color\n   */\n  setColor(property: ShaderProperty, value: Color): void;\n\n  setColor(property: string | ShaderProperty, value: Color): void {\n    this._setPropertyValue(property, ShaderPropertyType.Color, value);\n  }\n\n  /**\n   * Get texture by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Texture\n   */\n  getTexture(propertyName: string): Texture;\n\n  /**\n   * Get texture by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Texture\n   */\n  getTexture(property: ShaderProperty): Texture;\n\n  getTexture(property: string | ShaderProperty): Texture {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set texture by shader property name.\n   * @param propertyName - Shader property name\n   * @param value - Texture\n   */\n  setTexture(propertyName: string, value: Texture): void;\n\n  /**\n   * Set texture by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Texture\n   */\n  setTexture(property: ShaderProperty, value: Texture): void;\n\n  setTexture(property: string | ShaderProperty, value: Texture): void {\n    if (this._getRefCount() > 0) {\n      const lastValue = this.getPropertyValue<Texture>(property);\n      lastValue && lastValue._addRefCount(-1);\n      value && value._addRefCount(1);\n    }\n    this._setPropertyValue(property, ShaderPropertyType.Texture, value);\n  }\n\n  /**\n   * Get texture array by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Texture array\n   */\n  getTextureArray(propertyName: string): Texture[];\n\n  /**\n   * Get texture array by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Texture array\n   */\n  getTextureArray(property: ShaderProperty): Texture[];\n\n  getTextureArray(property: string | ShaderProperty): Texture[] {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set texture array by shader property name.\n   * @param propertyName - Shader property name\n   * @param value - Texture array\n   */\n  setTextureArray(propertyName: string, value: Texture[]): void;\n\n  /**\n   * Set texture array by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Texture array\n   */\n  setTextureArray(property: ShaderProperty, value: Texture[]): void;\n\n  setTextureArray(property: string | ShaderProperty, value: Texture[]): void {\n    if (this._getRefCount() > 0) {\n      const lastValue = this.getPropertyValue<Texture[]>(property);\n      if (lastValue) {\n        for (let i = 0, n = lastValue.length; i < n; i++) {\n          lastValue[i]._addRefCount(-1);\n        }\n      }\n      if (value) {\n        for (let i = 0, n = value.length; i < n; i++) {\n          value[i]._addRefCount(1);\n        }\n      }\n    }\n    this._setPropertyValue(property, ShaderPropertyType.TextureArray, value);\n  }\n\n  /**\n   * Get shader property value set on this shaderData.\n   * @param property - Shader property\n   * @returns Property value\n   */\n  getPropertyValue<T extends ShaderPropertyValueType>(property: string | ShaderProperty): T {\n    if (typeof property === \"string\") {\n      property = Shader.getPropertyByName(property);\n    }\n    return this._propertyValueMap[property._uniqueId] as T;\n  }\n\n  /**\n   * Enable macro with name.\n   * @param macroName - Macro name\n   */\n  enableMacro(macroName: string): void;\n\n  /**\n   * Enable macro with name and value.\n   * @remarks Name and value will combine, it's equal the macro of \"name value\".\n   * @param name - Macro name\n   * @param value - Macro value\n   */\n  enableMacro(name: string, value: string): void;\n\n  /**\n   * Enable macro with shaderMacro.\n   * @param macro - Shader macro\n   */\n  enableMacro(macro: ShaderMacro): void;\n\n  enableMacro(macro: string | ShaderMacro, value?: string): void {\n    if (typeof macro === \"string\") {\n      macro = Shader.getMacroByName(macro, value);\n    }\n    const nameID = macro._nameId;\n    const lastMacro = this._macroMap[nameID];\n    if (lastMacro !== macro) {\n      const macroCollection = this._macroCollection;\n      lastMacro && macroCollection.disable(lastMacro);\n      macroCollection.enable(macro);\n      this._macroMap[nameID] = macro;\n    }\n  }\n\n  /**\n   * Disable macro.\n   * @param macroName - Macro name\n   */\n  disableMacro(macroName: string): void;\n\n  /**\n   * Disable macro.\n   * @param macro - Shader macro\n   */\n  disableMacro(macro: ShaderMacro): void;\n\n  disableMacro(macro: string | ShaderMacro): void {\n    let nameID: number;\n    if (typeof macro === \"string\") {\n      nameID = ShaderMacro._macroNameIdMap[macro];\n      if (nameID === undefined) {\n        return;\n      }\n    } else {\n      nameID = macro._nameId;\n    }\n\n    const currentMacro = this._macroMap[nameID];\n    if (currentMacro) {\n      this._macroCollection.disable(currentMacro);\n      delete this._macroMap[nameID];\n    }\n  }\n\n  /**\n   * Get shader macro array that are currently enabled for ShaderData.\n   */\n  getMacros(): ShaderMacro[];\n  /**\n   * Get shader macro array that are currently enabled for ShaderData.\n   * @param out - Shader macro array\n   */\n  getMacros(out: ShaderMacro[]): void;\n\n  getMacros(out?: ShaderMacro[]): ShaderMacro[] | void {\n    if (out) {\n      const macroMap = this._macroMap;\n      out.length = 0;\n      for (var key in macroMap) {\n        out.push(macroMap[key]);\n      }\n    } else {\n      return Object.values(this._macroMap);\n    }\n  }\n\n  /**\n   * Get all shader properties that have been set on this shaderData\n   * @returns  All shader properties\n   */\n  getProperties(): ShaderProperty[];\n\n  /**\n   * Get all shader properties that have been set on this shaderData\n   * @param out - All shader properties\n   */\n  getProperties(out: ShaderProperty[]): void;\n\n  getProperties(out?: ShaderProperty[]): void | ShaderProperty[] {\n    let properties: ShaderProperty[];\n    if (out) {\n      out.length = 0;\n      properties = out;\n    } else {\n      properties = [];\n    }\n\n    const propertyValueMap = this._propertyValueMap;\n    const propertyIdMap = Shader._propertyIdMap;\n    for (let key in propertyValueMap) {\n      properties.push(propertyIdMap[key]);\n    }\n\n    if (!out) {\n      return properties;\n    }\n  }\n\n  clone(): ShaderData {\n    const shaderData = new ShaderData(this._group);\n    this.cloneTo(shaderData);\n    return shaderData;\n  }\n\n  cloneTo(target: ShaderData): void {\n    CloneManager.deepCloneObject(this._macroCollection, target._macroCollection);\n    Object.assign(target._macroMap, this._macroMap);\n\n    const propertyValueMap = this._propertyValueMap;\n    const targetPropertyValueMap = target._propertyValueMap;\n    const keys = Object.keys(propertyValueMap);\n    for (let i = 0, n = keys.length; i < n; i++) {\n      const k = keys[i];\n      const property = <ShaderPropertyValueType>propertyValueMap[k];\n      if (property != null) {\n        if (typeof property === \"number\") {\n          targetPropertyValueMap[k] = property;\n        } else if (property instanceof Texture) {\n          targetPropertyValueMap[k] = property;\n        } else if (property instanceof Array || property instanceof Float32Array || property instanceof Int32Array) {\n          targetPropertyValueMap[k] = property.slice();\n        } else {\n          const targetProperty = targetPropertyValueMap[k];\n          if (targetProperty) {\n            targetProperty.copyFrom(property);\n          } else {\n            targetPropertyValueMap[k] = property.clone();\n          }\n        }\n      } else {\n        targetPropertyValueMap[k] = property;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _setPropertyValue<T extends ShaderPropertyValueType>(\n    property: string | ShaderProperty,\n    type: ShaderPropertyType,\n    value: T\n  ): void {\n    if (typeof property === \"string\") {\n      property = Shader.getPropertyByName(property);\n    }\n\n    if (property._group !== this._group) {\n      if (property._group === undefined) {\n        property._group = this._group;\n      } else {\n        throw `Shader property ${property.name} has been used as ${ShaderDataGroup[property._group]} group.`;\n      }\n    }\n\n    if (property._type !== type) {\n      if (property._type === undefined) {\n        property._type = type;\n      } else {\n        throw `Shader property ${property.name} has been used as ${ShaderPropertyType[property._type]} type.`;\n      }\n    }\n\n    this._propertyValueMap[property._uniqueId] = value;\n  }\n\n  /**\n   * @internal\n   */\n  _getRefCount(): number {\n    return this._refCount;\n  }\n\n  /**\n   * @internal\n   */\n  _addRefCount(value: number): void {\n    this._refCount += value;\n    const properties = this._propertyValueMap;\n    for (const k in properties) {\n      const property = properties[k];\n      // @todo: Separate array to speed performance.\n      if (property && property instanceof Texture) {\n        property._addRefCount(value);\n      }\n    }\n  }\n}\n\nexport type ShaderPropertyValueType =\n  | number\n  | Vector2\n  | Vector3\n  | Vector4\n  | Color\n  | Matrix\n  | Texture\n  | Texture[]\n  | Int32Array\n  | Float32Array;\n", "import { Color, Matrix } from \"@galacean/engine-math\";\nimport { ignoreClone } from \"../clone/CloneManager\";\nimport { Component } from \"../Component\";\nimport { Layer } from \"../Layer\";\nimport { ShadowType } from \"../shadow\";\n\n/**\n * Light base class.\n */\nexport abstract class Light extends Component {\n  /**\n   * Each type of light source is at most 10, beyond which it will not take effect.\n   * */\n  protected static _maxLight: number = 10;\n\n  /** Light Intensity */\n  intensity: number = 1;\n\n  /**\n   * Culling mask - which layers the light affect.\n   * @remarks Support bit manipulation, corresponding to `Layer`.\n   */\n  cullingMask: Layer = Layer.Everything;\n\n  /** How this light casts shadows. */\n  shadowType: ShadowType = ShadowType.None;\n  /** Shadow bias.*/\n  shadowBias: number = 1;\n  /** Shadow mapping normal-based bias. */\n  shadowNormalBias: number = 1;\n  /** Near plane value to use for shadow frustums. */\n  shadowNearPlane: number = 0.1;\n  /** Shadow intensity, the larger the value, the clearer and darker the shadow. */\n  shadowStrength: number = 1.0;\n\n  /** @internal */\n  @ignoreClone\n  _lightIndex: number = -1;\n\n  private _color: Color = new Color(1, 1, 1, 1);\n  private _viewMat: Matrix;\n  private _inverseViewMat: Matrix;\n  private _lightColor: Color = new Color();\n\n  /**\n   * Light Color.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    if (this._color !== value) {\n      this._color.copyFrom(value);\n    }\n  }\n\n  /**\n   * View matrix.\n   */\n  get viewMatrix(): Matrix {\n    if (!this._viewMat) this._viewMat = new Matrix();\n    Matrix.invert(this.entity.transform.worldMatrix, this._viewMat);\n    return this._viewMat;\n  }\n\n  /**\n   * Inverse view matrix.\n   */\n  get inverseViewMatrix(): Matrix {\n    if (!this._inverseViewMat) this._inverseViewMat = new Matrix();\n    Matrix.invert(this.viewMatrix, this._inverseViewMat);\n    return this._inverseViewMat;\n  }\n\n  /**\n   * @internal\n   */\n  abstract get _shadowProjectionMatrix(): Matrix;\n\n  protected _getLightColor(): Color {\n    this._lightColor.r = this.color.r * this.intensity;\n    this._lightColor.g = this.color.g * this.intensity;\n    this._lightColor.b = this.color.b * this.intensity;\n    this._lightColor.a = this.color.a * this.intensity;\n    return this._lightColor;\n  }\n}\n", "import { Matrix, Vector3 } from \"@galacean/engine-math\";\nimport { Shader, ShaderData } from \"../shader\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Directional light.\n */\nexport class DirectLight extends Light {\n  private static _cullingMaskProperty: ShaderProperty = Shader.getPropertyByName(\"u_directLightCullingMask\");\n  private static _colorProperty: ShaderProperty = Shader.getPropertyByName(\"u_directLightColor\");\n  private static _directionProperty: ShaderProperty = Shader.getPropertyByName(\"u_directLightDirection\");\n\n  private static _combinedData = {\n    cullingMask: new Int32Array(Light._maxLight * 2),\n    color: new Float32Array(Light._maxLight * 3),\n    direction: new Float32Array(Light._maxLight * 3)\n  };\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData): void {\n    const data = DirectLight._combinedData;\n\n    shaderData.setIntArray(DirectLight._cullingMaskProperty, data.cullingMask);\n    shaderData.setFloatArray(DirectLight._colorProperty, data.color);\n    shaderData.setFloatArray(DirectLight._directionProperty, data.direction);\n  }\n\n  private _forward: Vector3 = new Vector3();\n\n  private _reverseDirection: Vector3 = new Vector3();\n\n  /**\n   * Get direction.\n   */\n  get direction(): Vector3 {\n    this.entity.transform.getWorldForward(this._forward);\n    return this._forward;\n  }\n\n  /**\n   * Get the opposite direction of the directional light direction.\n   */\n  get reverseDirection(): Vector3 {\n    Vector3.scale(this.direction, -1, this._reverseDirection);\n    return this._reverseDirection;\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  get _shadowProjectionMatrix(): Matrix {\n    throw \"Unknown!\";\n  }\n\n  /**\n   * @internal\n   */\n  _appendData(lightIndex: number): void {\n    const cullingMaskStart = lightIndex * 2;\n    const colorStart = lightIndex * 3;\n    const directionStart = lightIndex * 3;\n    const lightColor = this._getLightColor();\n    const direction = this.direction;\n\n    const data = DirectLight._combinedData;\n\n    const cullingMask = this.cullingMask;\n    data.cullingMask[cullingMaskStart] = cullingMask & 65535;\n    data.cullingMask[cullingMaskStart + 1] = (cullingMask >>> 16) & 65535;\n\n    data.color[colorStart] = lightColor.r;\n    data.color[colorStart + 1] = lightColor.g;\n    data.color[colorStart + 2] = lightColor.b;\n    data.direction[directionStart] = direction.x;\n    data.direction[directionStart + 1] = direction.y;\n    data.direction[directionStart + 2] = direction.z;\n  }\n\n  /**\n   * Mount to the current Scene.\n   * @internal\n   * @override\n   */\n  _onEnable(): void {\n    this.engine._lightManager._attachDirectLight(this);\n  }\n\n  /**\n   * Unmount from the current Scene.\n   * @internal\n   * @override\n   */\n  _onDisable(): void {\n    this.engine._lightManager._detachDirectLight(this);\n  }\n}\n", "import { Matrix, Vector3 } from \"@galacean/engine-math\";\nimport { Shader, ShaderData } from \"../shader\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Point light.\n */\nexport class PointLight extends Light {\n  private static _cullingMaskProperty: ShaderProperty = Shader.getPropertyByName(\"u_pointLightCullingMask\");\n  private static _colorProperty: ShaderProperty = Shader.getPropertyByName(\"u_pointLightColor\");\n  private static _positionProperty: ShaderProperty = Shader.getPropertyByName(\"u_pointLightPosition\");\n  private static _distanceProperty: ShaderProperty = Shader.getPropertyByName(\"u_pointLightDistance\");\n\n  private static _combinedData = {\n    cullingMask: new Int32Array(Light._maxLight * 2),\n    color: new Float32Array(Light._maxLight * 3),\n    position: new Float32Array(Light._maxLight * 3),\n    distance: new Float32Array(Light._maxLight)\n  };\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData): void {\n    const data = PointLight._combinedData;\n\n    shaderData.setIntArray(PointLight._cullingMaskProperty, data.cullingMask);\n    shaderData.setFloatArray(PointLight._colorProperty, data.color);\n    shaderData.setFloatArray(PointLight._positionProperty, data.position);\n    shaderData.setFloatArray(PointLight._distanceProperty, data.distance);\n  }\n\n  /** Defines a distance cutoff at which the light's intensity must be considered zero. */\n  distance: number = 100;\n\n  /**\n   * Get light position.\n   */\n  get position(): Vector3 {\n    return this.entity.transform.worldPosition;\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  get _shadowProjectionMatrix(): Matrix {\n    throw \"Unknown!\";\n  }\n\n  /**\n   * @internal\n   */\n  _appendData(lightIndex: number): void {\n    const cullingMaskStart = lightIndex * 2;\n    const colorStart = lightIndex * 3;\n    const positionStart = lightIndex * 3;\n    const distanceStart = lightIndex;\n\n    const lightColor = this._getLightColor();\n    const lightPosition = this.position;\n\n    const data = PointLight._combinedData;\n\n    const cullingMask = this.cullingMask;\n    data.cullingMask[cullingMaskStart] = cullingMask & 65535;\n    data.cullingMask[cullingMaskStart + 1] = (cullingMask >>> 16) & 65535;\n\n    data.color[colorStart] = lightColor.r;\n    data.color[colorStart + 1] = lightColor.g;\n    data.color[colorStart + 2] = lightColor.b;\n    data.position[positionStart] = lightPosition.x;\n    data.position[positionStart + 1] = lightPosition.y;\n    data.position[positionStart + 2] = lightPosition.z;\n    data.distance[distanceStart] = this.distance;\n  }\n\n  /**\n   * Mount to the current Scene.\n   * @internal\n   * @override\n   */\n  _onEnable(): void {\n    this.engine._lightManager._attachPointLight(this);\n  }\n\n  /**\n   * Unmount from the current Scene.\n   * @internal\n   * @override\n   */\n  _onDisable(): void {\n    this.engine._lightManager._detachPointLight(this);\n  }\n}\n", "import { Matrix, Vector3 } from \"@galacean/engine-math\";\nimport { Shader, ShaderData } from \"../shader\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Spot light.\n */\nexport class SpotLight extends Light {\n  private static _cullingMaskProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightCullingMask\");\n  private static _colorProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightColor\");\n  private static _positionProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightPosition\");\n  private static _directionProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightDirection\");\n  private static _distanceProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightDistance\");\n  private static _angleCosProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightAngleCos\");\n  private static _penumbraCosProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightPenumbraCos\");\n\n  private static _combinedData = {\n    cullingMask: new Int32Array(Light._maxLight * 2),\n    color: new Float32Array(Light._maxLight * 3),\n    position: new Float32Array(Light._maxLight * 3),\n    direction: new Float32Array(Light._maxLight * 3),\n    distance: new Float32Array(Light._maxLight),\n    angleCos: new Float32Array(Light._maxLight),\n    penumbraCos: new Float32Array(Light._maxLight)\n  };\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData): void {\n    const data = SpotLight._combinedData;\n\n    shaderData.setIntArray(SpotLight._cullingMaskProperty, data.cullingMask);\n    shaderData.setFloatArray(SpotLight._colorProperty, data.color);\n    shaderData.setFloatArray(SpotLight._positionProperty, data.position);\n    shaderData.setFloatArray(SpotLight._directionProperty, data.direction);\n    shaderData.setFloatArray(SpotLight._distanceProperty, data.distance);\n    shaderData.setFloatArray(SpotLight._angleCosProperty, data.angleCos);\n    shaderData.setFloatArray(SpotLight._penumbraCosProperty, data.penumbraCos);\n  }\n\n  /** Defines a distance cutoff at which the light's intensity must be considered zero. */\n  distance: number = 100;\n  /** Angle, in radians, from centre of spotlight where falloff begins. */\n  angle: number = Math.PI / 6;\n  /** Angle, in radians, from falloff begins to ends. */\n  penumbra: number = Math.PI / 12;\n\n  private _forward: Vector3 = new Vector3();\n  private _inverseDirection: Vector3 = new Vector3();\n  private _projectMatrix: Matrix = new Matrix();\n\n  /**\n   * Get light position.\n   */\n  get position(): Vector3 {\n    return this.entity.transform.worldPosition;\n  }\n\n  /**\n   * Get light direction.\n   */\n  get direction(): Vector3 {\n    this.entity.transform.getWorldForward(this._forward);\n    return this._forward;\n  }\n\n  /**\n   * Get the opposite direction of the spotlight.\n   */\n  get reverseDirection(): Vector3 {\n    Vector3.scale(this.direction, -1, this._inverseDirection);\n    return this._inverseDirection;\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  get _shadowProjectionMatrix(): Matrix {\n    const matrix = this._projectMatrix;\n    const fov = Math.min(Math.PI / 2, this.angle * 2 * Math.sqrt(2));\n    Matrix.perspective(fov, 1, this.shadowNearPlane, this.distance + this.shadowNearPlane, matrix);\n    return matrix;\n  }\n\n  /**\n   * @internal\n   */\n  _appendData(lightIndex: number): void {\n    const cullingMaskStart = lightIndex * 2;\n    const colorStart = lightIndex * 3;\n    const positionStart = lightIndex * 3;\n    const directionStart = lightIndex * 3;\n    const distanceStart = lightIndex;\n    const penumbraCosStart = lightIndex;\n    const angleCosStart = lightIndex;\n\n    const color = this._getLightColor();\n    const position = this.position;\n    const direction = this.direction;\n\n    const data = SpotLight._combinedData;\n\n    const cullingMask = this.cullingMask;\n    data.cullingMask[cullingMaskStart] = cullingMask & 65535;\n    data.cullingMask[cullingMaskStart + 1] = (cullingMask >>> 16) & 65535;\n\n    data.color[colorStart] = color.r;\n    data.color[colorStart + 1] = color.g;\n    data.color[colorStart + 2] = color.b;\n    data.position[positionStart] = position.x;\n    data.position[positionStart + 1] = position.y;\n    data.position[positionStart + 2] = position.z;\n    data.direction[directionStart] = direction.x;\n    data.direction[directionStart + 1] = direction.y;\n    data.direction[directionStart + 2] = direction.z;\n    data.distance[distanceStart] = this.distance;\n    data.angleCos[angleCosStart] = Math.cos(this.angle);\n    data.penumbraCos[penumbraCosStart] = Math.cos(this.angle + this.penumbra);\n  }\n\n  /**\n   * Mount to the current Scene.\n   * @internal\n   * @override\n   */\n  _onEnable(): void {\n    this.engine._lightManager._attachSpotLight(this);\n  }\n\n  /**\n   * Unmount from the current Scene.\n   * @internal\n   * @override\n   */\n  _onDisable(): void {\n    this.engine._lightManager._detachSpotLight(this);\n  }\n}\n", "import { DisorderedArray } from \"../DisorderedArray\";\nimport { ShaderData } from \"../shader\";\nimport { ShadowType } from \"../shadow\";\nimport { DirectLight } from \"./DirectLight\";\nimport { PointLight } from \"./PointLight\";\nimport { SpotLight } from \"./SpotLight\";\n\n/**\n * Light manager.\n */\nexport class LightManager {\n  /** @internal */\n  _spotLights: DisorderedArray<SpotLight> = new DisorderedArray();\n  /** @internal */\n  _pointLights: DisorderedArray<PointLight> = new DisorderedArray();\n  /** @internal */\n  _directLights: DisorderedArray<DirectLight> = new DisorderedArray();\n\n  /**\n   * @internal\n   */\n  _attachSpotLight(light: SpotLight): void {\n    light._lightIndex = this._spotLights.length;\n    this._spotLights.add(light);\n  }\n\n  /**\n   * @internal\n   */\n  _detachSpotLight(light: SpotLight): void {\n    const replaced = this._spotLights.deleteByIndex(light._lightIndex);\n    replaced && (replaced._lightIndex = light._lightIndex);\n    light._lightIndex = -1;\n  }\n\n  /**\n   * @internal\n   */\n  _attachPointLight(light: PointLight): void {\n    light._lightIndex = this._pointLights.length;\n    this._pointLights.add(light);\n  }\n\n  /**\n   * @internal\n   */\n  _detachPointLight(light: PointLight): void {\n    const replaced = this._pointLights.deleteByIndex(light._lightIndex);\n    replaced && (replaced._lightIndex = light._lightIndex);\n    light._lightIndex = -1;\n  }\n\n  /**\n   * @internal\n   */\n  _attachDirectLight(light: DirectLight): void {\n    light._lightIndex = this._directLights.length;\n    this._directLights.add(light);\n  }\n\n  /**\n   * @internal\n   */\n  _detachDirectLight(light: DirectLight): void {\n    const replaced = this._directLights.deleteByIndex(light._lightIndex);\n    replaced && (replaced._lightIndex = light._lightIndex);\n    light._lightIndex = -1;\n  }\n\n  /**\n   * @internal\n   */\n  _getSunLightIndex(): number {\n    const directLights = this._directLights;\n\n    let sunLightIndex = -1;\n    let maxIntensity = Number.NEGATIVE_INFINITY;\n    let hasShadowLight = false;\n    for (let i = 0, n = directLights.length; i < n; i++) {\n      const directLight = directLights.get(i);\n      if (directLight.shadowType !== ShadowType.None && !hasShadowLight) {\n        maxIntensity = Number.NEGATIVE_INFINITY;\n        hasShadowLight = true;\n      }\n      const intensity = directLight.intensity * directLight.color.getBrightness();\n      if (hasShadowLight) {\n        if (directLight.shadowType !== ShadowType.None && maxIntensity < intensity) {\n          maxIntensity = intensity;\n          sunLightIndex = i;\n        }\n      } else {\n        if (maxIntensity < intensity) {\n          maxIntensity = intensity;\n          sunLightIndex = i;\n        }\n      }\n    }\n    return sunLightIndex;\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(shaderData: ShaderData): void {\n    const spotLight = this._spotLights;\n    const pointLight = this._pointLights;\n    const directLight = this._directLights;\n    const spotLightCount = spotLight.length;\n    const pointLightCount = pointLight.length;\n    const directLightCount = directLight.length;\n\n    for (let i = 0, len = spotLightCount; i < len; i++) {\n      const light = spotLight.get(i);\n      light._appendData(i);\n    }\n\n    for (let i = 0, len = pointLightCount; i < len; i++) {\n      const light = pointLight.get(i);\n      light._appendData(i);\n    }\n\n    for (let i = 0, len = directLightCount; i < len; i++) {\n      const light = directLight.get(i);\n      light._appendData(i);\n    }\n\n    if (directLightCount) {\n      DirectLight._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_DIRECT_LIGHT_COUNT\", directLightCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_DIRECT_LIGHT_COUNT\");\n    }\n\n    if (pointLightCount) {\n      PointLight._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_POINT_LIGHT_COUNT\", pointLightCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_POINT_LIGHT_COUNT\");\n    }\n\n    if (spotLightCount) {\n      SpotLight._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_SPOT_LIGHT_COUNT\", spotLightCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_SPOT_LIGHT_COUNT\");\n    }\n  }\n}\n", "import { BlendOperation } from \"../enums/BlendOperation\";\nimport { BlendFactor } from \"../enums/BlendFactor\";\nimport { ColorWriteMask } from \"../enums/ColorWriteMask\";\n\n/**\n * The blend state of the render target.\n */\nexport class RenderTargetBlendState {\n  /** Whether to enable blend. */\n  enabled: boolean = false;\n  /** color (RGB) blend operation. */\n  colorBlendOperation: BlendOperation = BlendOperation.Add;\n  /** alpha (A) blend operation. */\n  alphaBlendOperation: BlendOperation = BlendOperation.Add;\n  /** color blend factor (RGB) for source. */\n  sourceColorBlendFactor: BlendFactor = BlendFactor.One;\n  /** alpha blend factor (A) for source. */\n  sourceAlphaBlendFactor: BlendFactor = BlendFactor.One;\n  /** color blend factor (RGB) for destination. */\n  destinationColorBlendFactor: BlendFactor = BlendFactor.Zero;\n  /** alpha blend factor (A) for destination. */\n  destinationAlphaBlendFactor: BlendFactor = BlendFactor.Zero;\n  /** color mask. */\n  colorWriteMask: ColorWriteMask = ColorWriteMask.All;\n}\n", "import { Color } from \"@galacean/engine-math\";\nimport { GLCapabilityType } from \"../../base/Constant\";\nimport { IHardwareRenderer } from \"../../renderingHardwareInterface/IHardwareRenderer\";\nimport { BlendFactor } from \"../enums/BlendFactor\";\nimport { BlendOperation } from \"../enums/BlendOperation\";\nimport { ColorWriteMask } from \"../enums/ColorWriteMask\";\nimport { RenderState } from \"./RenderState\";\nimport { RenderTargetBlendState } from \"./RenderTargetBlendState\";\n\n/**\n * Blend state.\n */\nexport class BlendState {\n  private static _getGLBlendFactor(rhi: IHardwareRenderer, blendFactor: BlendFactor): number {\n    const gl = rhi.gl;\n\n    switch (blendFactor) {\n      case BlendFactor.Zero:\n        return gl.ZERO;\n      case BlendFactor.One:\n        return gl.ONE;\n      case BlendFactor.SourceColor:\n        return gl.SRC_COLOR;\n      case BlendFactor.OneMinusSourceColor:\n        return gl.ONE_MINUS_SRC_COLOR;\n      case BlendFactor.DestinationColor:\n        return gl.DST_COLOR;\n      case BlendFactor.OneMinusDestinationColor:\n        return gl.ONE_MINUS_DST_COLOR;\n      case BlendFactor.SourceAlpha:\n        return gl.SRC_ALPHA;\n      case BlendFactor.OneMinusSourceAlpha:\n        return gl.ONE_MINUS_SRC_ALPHA;\n      case BlendFactor.DestinationAlpha:\n        return gl.DST_ALPHA;\n      case BlendFactor.OneMinusDestinationAlpha:\n        return gl.ONE_MINUS_DST_ALPHA;\n      case BlendFactor.SourceAlphaSaturate:\n        return gl.SRC_ALPHA_SATURATE;\n      case BlendFactor.BlendColor:\n        return gl.CONSTANT_COLOR;\n      case BlendFactor.OneMinusBlendColor:\n        return gl.ONE_MINUS_CONSTANT_COLOR;\n    }\n  }\n\n  private static _getGLBlendOperation(rhi: IHardwareRenderer, blendOperation: BlendOperation): number {\n    const gl = rhi.gl;\n\n    switch (blendOperation) {\n      case BlendOperation.Add:\n        return gl.FUNC_ADD;\n      case BlendOperation.Subtract:\n        return gl.FUNC_SUBTRACT;\n      case BlendOperation.ReverseSubtract:\n        return gl.FUNC_REVERSE_SUBTRACT;\n      case BlendOperation.Min:\n        if (!rhi.canIUse(GLCapabilityType.blendMinMax)) {\n          throw new Error(\"BlendOperation.Min is not supported in this context\");\n        }\n        return gl.MIN; // in webgl1.0 is an extension\n      case BlendOperation.Max:\n        if (!rhi.canIUse(GLCapabilityType.blendMinMax)) {\n          throw new Error(\"BlendOperation.Max is not supported in this context\");\n        }\n        return gl.MAX; // in webgl1.0 is an extension\n    }\n  }\n\n  /** The blend state of the render target. */\n  readonly targetBlendState: RenderTargetBlendState = new RenderTargetBlendState();\n  /** Constant blend color. */\n  readonly blendColor: Color = new Color(0, 0, 0, 0);\n  /** Whether to use (Alpha-to-Coverage) technology. */\n  alphaToCoverage: boolean = false;\n\n  /**\n   * @internal\n   * Apply the current blend state by comparing with the last blend state.\n   */\n  _apply(hardwareRenderer: IHardwareRenderer, lastRenderState: RenderState): void {\n    this._platformApply(hardwareRenderer, lastRenderState.blendState);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: BlendState): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const lastTargetBlendState = lastState.targetBlendState;\n\n    const {\n      enabled,\n      colorBlendOperation,\n      alphaBlendOperation,\n      sourceColorBlendFactor,\n      destinationColorBlendFactor,\n      sourceAlphaBlendFactor,\n      destinationAlphaBlendFactor,\n      colorWriteMask\n    } = this.targetBlendState;\n\n    if (enabled !== lastTargetBlendState.enabled) {\n      if (enabled) {\n        gl.enable(gl.BLEND);\n      } else {\n        gl.disable(gl.BLEND);\n      }\n      lastTargetBlendState.enabled = enabled;\n    }\n\n    if (enabled) {\n      // apply blend factor.\n      if (\n        sourceColorBlendFactor !== lastTargetBlendState.sourceColorBlendFactor ||\n        destinationColorBlendFactor !== lastTargetBlendState.destinationColorBlendFactor ||\n        sourceAlphaBlendFactor !== lastTargetBlendState.sourceAlphaBlendFactor ||\n        destinationAlphaBlendFactor !== lastTargetBlendState.destinationAlphaBlendFactor\n      ) {\n        gl.blendFuncSeparate(\n          BlendState._getGLBlendFactor(rhi, sourceColorBlendFactor),\n          BlendState._getGLBlendFactor(rhi, destinationColorBlendFactor),\n          BlendState._getGLBlendFactor(rhi, sourceAlphaBlendFactor),\n          BlendState._getGLBlendFactor(rhi, destinationAlphaBlendFactor)\n        );\n        lastTargetBlendState.sourceColorBlendFactor = sourceColorBlendFactor;\n        lastTargetBlendState.destinationColorBlendFactor = destinationColorBlendFactor;\n        lastTargetBlendState.sourceAlphaBlendFactor = sourceAlphaBlendFactor;\n        lastTargetBlendState.destinationAlphaBlendFactor = destinationAlphaBlendFactor;\n      }\n\n      // apply blend operation.\n      if (\n        colorBlendOperation !== lastTargetBlendState.colorBlendOperation ||\n        alphaBlendOperation !== lastTargetBlendState.alphaBlendOperation\n      ) {\n        gl.blendEquationSeparate(\n          BlendState._getGLBlendOperation(rhi, colorBlendOperation),\n          BlendState._getGLBlendOperation(rhi, alphaBlendOperation)\n        );\n        lastTargetBlendState.colorBlendOperation = colorBlendOperation;\n        lastTargetBlendState.alphaBlendOperation = alphaBlendOperation;\n      }\n\n      // apply blend color.\n      const blendColor = this.blendColor;\n      if (!Color.equals(lastState.blendColor, blendColor)) {\n        gl.blendColor(blendColor.r, blendColor.g, blendColor.b, blendColor.a);\n        lastState.blendColor.copyFrom(blendColor);\n      }\n    }\n\n    // apply color mask.\n    if (colorWriteMask !== lastTargetBlendState.colorWriteMask) {\n      gl.colorMask(\n        (colorWriteMask & ColorWriteMask.Red) !== 0,\n        (colorWriteMask & ColorWriteMask.Green) !== 0,\n        (colorWriteMask & ColorWriteMask.Blue) !== 0,\n        (colorWriteMask & ColorWriteMask.Alpha) !== 0\n      );\n      lastTargetBlendState.colorWriteMask = colorWriteMask;\n    }\n\n    // apply alpha to coverage.\n    const alphaToCoverage = this.alphaToCoverage;\n    if (alphaToCoverage !== lastState.alphaToCoverage) {\n      if (alphaToCoverage) {\n        gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n      } else {\n        gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n      }\n      lastState.alphaToCoverage = alphaToCoverage;\n    }\n  }\n}\n", "import { IHardwareRenderer } from \"../../renderingHardwareInterface/IHardwareRenderer\";\nimport { CompareFunction } from \"../enums/CompareFunction\";\nimport { RenderState } from \"./RenderState\";\n\n/**\n * Depth state.\n */\nexport class DepthState {\n  private static _getGLCompareFunction(rhi: IHardwareRenderer, compareFunction: CompareFunction): number {\n    const gl = rhi.gl;\n\n    switch (compareFunction) {\n      case CompareFunction.Never:\n        return gl.NEVER;\n      case CompareFunction.Less:\n        return gl.LESS;\n      case CompareFunction.Equal:\n        return gl.EQUAL;\n      case CompareFunction.LessEqual:\n        return gl.LEQUAL;\n      case CompareFunction.Greater:\n        return gl.GREATER;\n      case CompareFunction.NotEqual:\n        return gl.NOTEQUAL;\n      case CompareFunction.GreaterEqual:\n        return gl.GEQUAL;\n      case CompareFunction.Always:\n        return gl.ALWAYS;\n    }\n  }\n\n  /** Whether to enable the depth test. */\n  enabled: boolean = true;\n  /** Whether the depth value can be written.*/\n  writeEnabled: boolean = true;\n  /** Depth comparison function. */\n  compareFunction: CompareFunction = CompareFunction.Less;\n\n  /**\n   * @internal\n   * Apply the current depth state by comparing with the last depth state.\n   */\n  _apply(hardwareRenderer: IHardwareRenderer, lastRenderState: RenderState): void {\n    this._platformApply(hardwareRenderer, lastRenderState.depthState);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: DepthState): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const { enabled, compareFunction, writeEnabled } = this;\n\n    if (enabled != lastState.enabled) {\n      if (enabled) {\n        gl.enable(gl.DEPTH_TEST);\n      } else {\n        gl.disable(gl.DEPTH_TEST);\n      }\n      lastState.enabled = enabled;\n    }\n\n    if (enabled) {\n      // apply compare func.\n      if (compareFunction != lastState.compareFunction) {\n        gl.depthFunc(DepthState._getGLCompareFunction(rhi, compareFunction));\n        lastState.compareFunction = compareFunction;\n      }\n\n      // apply write enabled.\n      if (writeEnabled != lastState.writeEnabled) {\n        gl.depthMask(writeEnabled);\n        lastState.writeEnabled = writeEnabled;\n      }\n    }\n  }\n}\n", "import { IHardwareRenderer } from \"../../renderingHardwareInterface/IHardwareRenderer\";\nimport { CullMode } from \"../enums/CullMode\";\nimport { RenderState } from \"./RenderState\";\n\n/**\n * Raster state.\n */\nexport class RasterState {\n  /** Specifies whether or not front- and/or back-facing polygons can be culled. */\n  cullMode: CullMode = CullMode.Back;\n  /** The multiplier by which an implementation-specific value is multiplied with to create a constant depth offset. */\n  depthBias: number = 0;\n  /** The scale factor for the variable depth offset for each polygon. */\n  slopeScaledDepthBias: number = 0;\n\n  /** @internal */\n  _cullFaceEnable: boolean = true;\n  /** @internal */\n  _frontFaceInvert: boolean = false;\n\n  /**\n   * @internal\n   */\n  _apply(hardwareRenderer: IHardwareRenderer, lastRenderState: RenderState, frontFaceInvert: boolean): void {\n    this._platformApply(hardwareRenderer, lastRenderState.rasterState, frontFaceInvert);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: RasterState, frontFaceInvert: boolean): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const { cullMode, depthBias, slopeScaledDepthBias } = this;\n\n    const cullFaceEnable = cullMode !== CullMode.Off;\n    if (cullFaceEnable !== lastState._cullFaceEnable) {\n      if (cullFaceEnable) {\n        gl.enable(gl.CULL_FACE);\n      } else {\n        gl.disable(gl.CULL_FACE);\n      }\n      lastState._cullFaceEnable = cullFaceEnable;\n    }\n\n    // apply front face.\n    if (cullFaceEnable) {\n      if (cullMode !== lastState.cullMode) {\n        if (cullMode == CullMode.Back) {\n          gl.cullFace(gl.BACK);\n        } else {\n          gl.cullFace(gl.FRONT);\n        }\n        lastState.cullMode = cullMode;\n      }\n    }\n\n    if (frontFaceInvert !== lastState._frontFaceInvert) {\n      if (frontFaceInvert) {\n        gl.frontFace(gl.CW);\n      } else {\n        gl.frontFace(gl.CCW);\n      }\n      lastState._frontFaceInvert = frontFaceInvert;\n    }\n\n    // apply polygonOffset.\n    if (!rhi._enableGlobalDepthBias) {\n      if (depthBias !== lastState.depthBias || slopeScaledDepthBias !== lastState.slopeScaledDepthBias) {\n        if (depthBias !== 0 || slopeScaledDepthBias !== 0) {\n          gl.enable(gl.POLYGON_OFFSET_FILL);\n          gl.polygonOffset(slopeScaledDepthBias, depthBias);\n        } else {\n          gl.disable(gl.POLYGON_OFFSET_FILL);\n        }\n        lastState.depthBias = depthBias;\n        lastState.slopeScaledDepthBias = slopeScaledDepthBias;\n      }\n    }\n  }\n}\n", "import { IHardwareRenderer } from \"../../renderingHardwareInterface/IHardwareRenderer\";\nimport { CompareFunction } from \"../enums/CompareFunction\";\nimport { StencilOperation } from \"../enums/StencilOperation\";\nimport { RenderState } from \"./RenderState\";\n\n/**\n * Stencil state.\n */\nexport class StencilState {\n  private static _getGLCompareFunction(rhi: IHardwareRenderer, compareFunction: CompareFunction): number {\n    const gl = rhi.gl;\n\n    switch (compareFunction) {\n      case CompareFunction.Never:\n        return gl.NEVER;\n      case CompareFunction.Less:\n        return gl.LESS;\n      case CompareFunction.Equal:\n        return gl.EQUAL;\n      case CompareFunction.LessEqual:\n        return gl.LEQUAL;\n      case CompareFunction.Greater:\n        return gl.GREATER;\n      case CompareFunction.NotEqual:\n        return gl.NOTEQUAL;\n      case CompareFunction.GreaterEqual:\n        return gl.GEQUAL;\n      case CompareFunction.Always:\n        return gl.ALWAYS;\n    }\n  }\n\n  private static _getGLStencilOperation(rhi: IHardwareRenderer, compareFunction: StencilOperation): number {\n    const gl = rhi.gl;\n\n    switch (compareFunction) {\n      case StencilOperation.Keep:\n        return gl.KEEP;\n      case StencilOperation.Zero:\n        return gl.ZERO;\n      case StencilOperation.Replace:\n        return gl.REPLACE;\n      case StencilOperation.IncrementSaturate:\n        return gl.INCR;\n      case StencilOperation.DecrementSaturate:\n        return gl.DECR;\n      case StencilOperation.Invert:\n        return gl.INVERT;\n      case StencilOperation.IncrementWrap:\n        return gl.INCR_WRAP;\n      case StencilOperation.DecrementWrap:\n        return gl.DECR_WRAP;\n    }\n  }\n\n  /** Whether to enable stencil test. */\n  enabled: boolean = false;\n  /** Write the reference value of the stencil buffer. */\n  referenceValue: number = 0;\n  /** Specifying a bit-wise mask that is used to AND the reference value and the stored stencil value when the test is done. */\n  mask: number = 0xff;\n  /** Specifying a bit mask to enable or disable writing of individual bits in the stencil planes. */\n  writeMask: number = 0xff;\n  /** The comparison function of the reference value of the front face of the geometry and the current buffer storage value. */\n  compareFunctionFront: CompareFunction = CompareFunction.Always;\n  /** The comparison function of the reference value of the back of the geometry and the current buffer storage value. */\n  compareFunctionBack: CompareFunction = CompareFunction.Always;\n  /** specifying the function to use for front face when both the stencil test and the depth test pass. */\n  passOperationFront: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for back face when both the stencil test and the depth test pass. */\n  passOperationBack: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for front face when the stencil test fails. */\n  failOperationFront: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for back face when the stencil test fails. */\n  failOperationBack: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for front face when the stencil test passes, but the depth test fails. */\n  zFailOperationFront: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for back face when the stencil test passes, but the depth test fails. */\n  zFailOperationBack: StencilOperation = StencilOperation.Keep;\n\n  /**\n   * @internal\n   */\n  _apply(hardwareRenderer: IHardwareRenderer, lastRenderState: RenderState): void {\n    this._platformApply(hardwareRenderer, lastRenderState.stencilState);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: StencilState): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const {\n      enabled,\n      referenceValue,\n      mask,\n      compareFunctionFront,\n      compareFunctionBack,\n      failOperationFront,\n      zFailOperationFront,\n      passOperationFront,\n      failOperationBack,\n      zFailOperationBack,\n      passOperationBack,\n      writeMask\n    } = this;\n\n    if (enabled != lastState.enabled) {\n      if (enabled) {\n        gl.enable(gl.STENCIL_TEST);\n      } else {\n        gl.disable(gl.STENCIL_TEST);\n      }\n      lastState.enabled = enabled;\n    }\n\n    if (enabled) {\n      // apply stencil func.\n      const referenceOrMaskChange = referenceValue !== lastState.referenceValue || mask !== lastState.mask;\n      if (referenceOrMaskChange || compareFunctionFront !== lastState.compareFunctionFront) {\n        gl.stencilFuncSeparate(\n          gl.FRONT,\n          StencilState._getGLCompareFunction(rhi, compareFunctionFront),\n          referenceValue,\n          mask\n        );\n        lastState.compareFunctionFront = compareFunctionFront;\n      }\n\n      if (referenceOrMaskChange || compareFunctionBack !== lastState.compareFunctionBack) {\n        gl.stencilFuncSeparate(gl.BACK, StencilState._getGLCompareFunction(rhi, compareFunctionBack), referenceValue, mask);\n        lastState.compareFunctionBack = this.compareFunctionBack;\n      }\n      if (referenceOrMaskChange) {\n        lastState.referenceValue = this.referenceValue;\n        lastState.mask = this.mask;\n      }\n\n      // apply stencil operation.\n      if (\n        failOperationFront !== lastState.failOperationFront ||\n        zFailOperationFront !== lastState.zFailOperationFront ||\n        passOperationFront !== lastState.passOperationFront\n      ) {\n        gl.stencilOpSeparate(\n          gl.FRONT,\n          StencilState._getGLStencilOperation(rhi, failOperationFront),\n          StencilState._getGLStencilOperation(rhi, zFailOperationFront),\n          StencilState._getGLStencilOperation(rhi, passOperationFront)\n        );\n        lastState.failOperationFront = failOperationFront;\n        lastState.zFailOperationFront = zFailOperationFront;\n        lastState.passOperationFront = passOperationFront;\n      }\n\n      if (\n        failOperationBack !== lastState.failOperationBack ||\n        zFailOperationBack !== lastState.zFailOperationBack ||\n        passOperationBack !== lastState.passOperationBack\n      ) {\n        gl.stencilOpSeparate(\n          gl.BACK,\n          StencilState._getGLStencilOperation(rhi, failOperationBack),\n          StencilState._getGLStencilOperation(rhi, zFailOperationBack),\n          StencilState._getGLStencilOperation(rhi, passOperationBack)\n        );\n        lastState.failOperationBack = failOperationBack;\n        lastState.zFailOperationBack = zFailOperationBack;\n        lastState.passOperationBack = passOperationBack;\n      }\n\n      // apply write mask.\n      if (writeMask !== lastState.writeMask) {\n        gl.stencilMask(writeMask);\n        lastState.writeMask = writeMask;\n      }\n    }\n  }\n}\n", "import { Engine } from \"../../Engine\";\nimport { RenderQueueType } from \"../enums/RenderQueueType\";\nimport { BlendState } from \"./BlendState\";\nimport { DepthState } from \"./DepthState\";\nimport { RasterState } from \"./RasterState\";\nimport { StencilState } from \"./StencilState\";\n\n/**\n * Render state.\n */\nexport class RenderState {\n  /** Blend state. */\n  readonly blendState: BlendState = new BlendState();\n  /** Depth state. */\n  readonly depthState: DepthState = new DepthState();\n  /** Stencil state. */\n  readonly stencilState: StencilState = new StencilState();\n  /** Raster state. */\n  readonly rasterState: RasterState = new RasterState();\n\n  /** Render queue type. */\n  renderQueueType: RenderQueueType = RenderQueueType.Opaque;\n\n  /**\n   * @internal\n   */\n  _apply(engine: Engine, frontFaceInvert: boolean): void {\n    const hardwareRenderer = engine._hardwareRenderer;\n    const lastRenderState = engine._lastRenderState;\n    this.blendState._apply(hardwareRenderer, lastRenderState);\n    this.depthState._apply(hardwareRenderer, lastRenderState);\n    this.stencilState._apply(hardwareRenderer, lastRenderState);\n    this.rasterState._apply(hardwareRenderer, lastRenderState, frontFaceInvert);\n  }\n}\n", "import { IClone } from \"@galacean/engine-design\";\nimport { RefObject } from \"../asset/RefObject\";\nimport { CloneManager } from \"../clone/CloneManager\";\nimport { Engine } from \"../Engine\";\nimport { MeshRenderElement } from \"../RenderPipeline/MeshRenderElement\";\nimport { SpriteElement } from \"../RenderPipeline/SpriteElement\";\nimport { ShaderDataGroup } from \"../shader/enums/ShaderDataGroup\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { RenderState } from \"../shader/state/RenderState\";\n\n/**\n * Material.\n */\nexport class Material extends RefObject implements IClone {\n  /** Name. */\n  name: string;\n  /** Shader data. */\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Material);\n\n  /** @internal */\n  _shader: Shader;\n  /** @internal */\n  _renderStates: RenderState[] = []; // todo: later will as a part of shaderData when shader effect frame is OK, that is more powerful and flexible.\n\n  /**\n   * Shader used by the material.\n   */\n  get shader(): Shader {\n    return this._shader;\n  }\n\n  set shader(value: Shader) {\n    this._shader = value;\n\n    const renderStates = this._renderStates;\n    const lastStatesCount = renderStates.length;\n    const passCount = value.passes.length;\n\n    if (lastStatesCount < passCount) {\n      for (let i = lastStatesCount; i < passCount; i++) {\n        renderStates.push(new RenderState());\n      }\n    } else {\n      renderStates.length = passCount;\n    }\n  }\n\n  /**\n   * First Render state.\n   */\n  get renderState(): RenderState {\n    return this._renderStates[0];\n  }\n\n  /**\n   * Render states.\n   */\n  get renderStates(): Readonly<RenderState[]> {\n    return this._renderStates;\n  }\n\n  /**\n   * Create a material instance.\n   * @param engine - Engine to which the material belongs\n   * @param shader - Shader used by the material\n   */\n  constructor(engine: Engine, shader: Shader) {\n    super(engine);\n    this.shader = shader;\n  }\n\n  /**\n   * Clone and return the instance.\n   */\n  clone(): Material {\n    const dest = new Material(this._engine, this.shader);\n    this.cloneTo(dest);\n    return dest;\n  }\n\n  /**\n   * Clone to the target material.\n   * @param target - target material\n   */\n  cloneTo(target: Material): void {\n    target.shader = this.shader;\n    this.shaderData.cloneTo(target.shaderData);\n    CloneManager.deepCloneObject(this.renderStates, target.renderStates);\n  }\n\n  /**\n   * @override\n   */\n  _addRefCount(value: number): void {\n    super._addRefCount(value);\n    this.shaderData._addRefCount(value);\n  }\n\n  /**\n   * @internal\n   * @todo:temporary solution\n   */\n  _preRender(renderElement: MeshRenderElement | SpriteElement) {}\n\n  /**\n   * @override\n   */\n  protected _onDestroy(): void {}\n}\n", "/**\n * Class pool utils.\n */\nexport class ClassPool<T> {\n  private _elementPoolIndex: number = 0;\n  private _elementPool: T[] = [];\n  private _type: new () => T;\n\n  constructor(type: new () => T) {\n    this._type = type;\n  }\n\n  /**\n   * Get element from pool.\n   */\n  getFromPool(): T {\n    const { _elementPoolIndex: index, _elementPool: pool } = this;\n    this._elementPoolIndex++;\n    if (pool.length === index) {\n      const element = new this._type();\n      pool.push(element);\n      return element;\n    } else {\n      return pool[index];\n    }\n  }\n\n  /**\n   * Reset pool.\n   */\n  resetPool(): void {\n    this._elementPoolIndex = 0;\n  }\n}\n", "import { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\nimport { ShaderPass } from \"../shader\";\nimport { RenderState } from \"../shader/state/RenderState\";\n\nexport class RenderElement {\n  component: Renderer;\n  material: Material;\n  multiRenderData: boolean;\n  renderState: RenderState;\n  shaderPass: ShaderPass;\n}\n", "import { Mesh } from \"../graphic/Mesh\";\nimport { SubMesh } from \"../graphic/SubMesh\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\nimport { ShaderPass } from \"../shader/ShaderPass\";\nimport { RenderState } from \"../shader/state/RenderState\";\nimport { RenderElement } from \"./RenderElement\";\n\n/**\n * Render element.\n */\nexport class MeshRenderElement extends RenderElement {\n  /** Mesh. */\n  mesh: Mesh;\n  /** Sub mesh. */\n  subMesh: SubMesh;\n\n  setValue(\n    component: Renderer,\n    mesh: Mesh,\n    subMesh: SubMesh,\n    material: Material,\n    renderState: RenderState,\n    shaderPass: ShaderPass\n  ): void {\n    this.component = component;\n    this.mesh = mesh;\n    this.subMesh = subMesh;\n    this.material = material;\n    this.renderState = renderState;\n    this.shaderPass = shaderPass;\n  }\n}\n", "import { Camera } from \"../Camera\";\nimport { Shader } from \"../shader\";\nimport { VirtualCamera } from \"../VirtualCamera\";\n\n/**\n * @internal\n * Rendering context.\n */\nexport class RenderContext {\n  /** @internal */\n  static _vpMatrixProperty = Shader.getPropertyByName(\"u_VPMat\");\n\n  private static _viewMatrixProperty = Shader.getPropertyByName(\"u_viewMat\");\n  private static _projectionMatrixProperty = Shader.getPropertyByName(\"u_projMat\");\n\n  camera: Camera;\n  virtualCamera: VirtualCamera;\n\n  applyVirtualCamera(virtualCamera: VirtualCamera): void {\n    this.virtualCamera = virtualCamera;\n    const shaderData = this.camera.shaderData;\n    shaderData.setMatrix(RenderContext._viewMatrixProperty, virtualCamera.viewMatrix);\n    shaderData.setMatrix(RenderContext._projectionMatrixProperty, virtualCamera.projectionMatrix);\n    shaderData.setMatrix(RenderContext._vpMatrixProperty, virtualCamera.viewProjectionMatrix);\n  }\n}\n", "import { RenderData2D } from \"../2d/data/RenderData2D\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\nimport { ShaderPass } from \"../shader\";\nimport { RenderState } from \"../shader/state/RenderState\";\nimport { Texture2D } from \"../texture\";\nimport { RenderElement } from \"./RenderElement\";\n\nexport class SpriteElement extends RenderElement {\n  renderData: RenderData2D;\n  texture: Texture2D;\n\n  constructor() {\n    super();\n    this.multiRenderData = false;\n  }\n\n  setValue(\n    component: Renderer,\n    renderDate: RenderData2D,\n    material: Material,\n    texture: Texture2D,\n    renderState: RenderState,\n    shaderPass: ShaderPass\n  ): void {\n    this.component = component;\n    this.renderData = renderDate;\n    this.material = material;\n    this.texture = texture;\n    this.renderState = renderState;\n    this.shaderPass = shaderPass;\n  }\n}\n", "import { RenderData2D } from \"../2d/data/RenderData2D\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\nimport { RenderElement } from \"./RenderElement\";\n\nexport class SpriteMaskElement extends RenderElement {\n  renderData: RenderData2D;\n  isAdd: boolean = true;\n\n  constructor() {\n    super();\n    this.multiRenderData = false;\n  }\n\n  setValue(component: Renderer, renderData: RenderData2D, material: Material): void {\n    this.component = component;\n    this.renderData = renderData;\n    this.material = material;\n  }\n}\n", "/**\n * Sprite mask interaction.\n */\nexport enum SpriteMaskInteraction {\n  /** The sprite will not interact with the masking system. */\n  None,\n  /** The sprite will be visible only in areas where a mask is present. */\n  VisibleInsideMask,\n  /** The sprite will be visible only in areas where no mask is present. */\n  VisibleOutsideMask\n}\n", "import { BoundingBox, Matrix, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { Component } from \"./Component\";\nimport { dependentComponents } from \"./ComponentsDependencies\";\nimport { Entity } from \"./Entity\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { Transform, TransformModifyFlags } from \"./Transform\";\nimport { assignmentClone, deepClone, ignoreClone, shallowClone } from \"./clone/CloneManager\";\nimport { Material } from \"./material/Material\";\nimport { Shader } from \"./shader\";\nimport { ShaderData } from \"./shader/ShaderData\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { ShaderDataGroup } from \"./shader/enums/ShaderDataGroup\";\n\n/**\n * Basis for all renderers.\n * @decorator `@dependentComponents(Transform)`\n */\n@dependentComponents(Transform)\nexport class Renderer extends Component {\n  private static _tempVector0 = new Vector3();\n\n  private static _receiveShadowMacro = Shader.getMacroByName(\"OASIS_RECEIVE_SHADOWS\");\n  private static _localMatrixProperty = Shader.getPropertyByName(\"u_localMat\");\n  private static _worldMatrixProperty = Shader.getPropertyByName(\"u_modelMat\");\n  private static _mvMatrixProperty = Shader.getPropertyByName(\"u_MVMat\");\n  private static _mvpMatrixProperty = Shader.getPropertyByName(\"u_MVPMat\");\n  private static _mvInvMatrixProperty = Shader.getPropertyByName(\"u_MVInvMat\");\n  private static _normalMatrixProperty = Shader.getPropertyByName(\"u_normalMat\");\n  private static _rendererLayerProperty = Shader.getPropertyByName(\"oasis_RendererLayer\");\n\n  /** ShaderData related to renderer. */\n  @deepClone\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Renderer);\n\n  /** @internal */\n  @ignoreClone\n  _distanceForSort: number;\n  /** @internal */\n  @ignoreClone\n  _onUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _rendererIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _globalShaderMacro: ShaderMacroCollection = new ShaderMacroCollection();\n  /** @internal */\n  @deepClone\n  _bounds: BoundingBox = new BoundingBox();\n  @ignoreClone\n  _renderFrameCount: number;\n\n  @ignoreClone\n  protected _overrideUpdate: boolean = false;\n  @shallowClone\n  protected _materials: Material[] = [];\n  @ignoreClone\n  protected _dirtyUpdateFlag: number = 0;\n\n  @ignoreClone\n  private _mvMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _mvpMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _mvInvMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _normalMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _materialsInstanced: boolean[] = [];\n  @ignoreClone\n  private _priority: number = 0;\n  @assignmentClone\n  private _receiveShadows: boolean = true;\n\n  @ignoreClone\n  protected _rendererLayer: Vector4 = new Vector4();\n\n  /**\n   * Whether it is culled in the current frame and does not participate in rendering.\n   */\n  get isCulled(): boolean {\n    return !(this._renderFrameCount === undefined || this._renderFrameCount === this._engine.time.frameCount - 1);\n  }\n\n  /**\n   * Whether receive shadow.\n   */\n  get receiveShadows(): boolean {\n    return this._receiveShadows;\n  }\n\n  set receiveShadows(value: boolean) {\n    if (this._receiveShadows !== value) {\n      if (value) {\n        this.shaderData.enableMacro(Renderer._receiveShadowMacro);\n      } else {\n        this.shaderData.disableMacro(Renderer._receiveShadowMacro);\n      }\n      this._receiveShadows = value;\n    }\n  }\n\n  /** Whether cast shadow. */\n  castShadows: boolean = true;\n\n  /**\n   * Material count.\n   */\n  get materialCount(): number {\n    return this._materials.length;\n  }\n\n  set materialCount(value: number) {\n    const materials = this._materials;\n    const materialsInstanced = this._materialsInstanced;\n\n    materials.length !== value && (materials.length = value);\n    materialsInstanced.length > value && (materialsInstanced.length = value);\n  }\n\n  /**\n   * The bounding volume of the renderer.\n   */\n  get bounds(): BoundingBox {\n    if (this._dirtyUpdateFlag & RendererUpdateFlags.WorldVolume) {\n      this._updateBounds(this._bounds);\n      this._dirtyUpdateFlag &= ~RendererUpdateFlags.WorldVolume;\n    }\n    return this._bounds;\n  }\n\n  /**\n   * The render priority of the renderer, lower values are rendered first and higher values are rendered last.\n   */\n  get priority(): number {\n    return this._priority;\n  }\n\n  set priority(value: number) {\n    this._priority = value;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    const prototype = Renderer.prototype;\n    const shaderData = this.shaderData;\n    this._overrideUpdate = this.update !== prototype.update;\n\n    shaderData._addRefCount(1);\n\n    this._onTransformChanged = this._onTransformChanged.bind(this);\n    this._registerEntityTransformListener();\n\n    shaderData.enableMacro(Renderer._receiveShadowMacro);\n    shaderData.setVector4(Renderer._rendererLayerProperty, this._rendererLayer);\n  }\n\n  /**\n   * Get the first instance material.\n   * @returns The first instance material\n   */\n  getInstanceMaterial(): Material | null;\n\n  /**\n   * Get the first instance material by index.\n   * @remarks Calling this function for the first time after the material is set will create an instance material to ensure that it is unique to the renderer.\n   * @param index - Material index\n   * @returns Instance material\n   */\n  getInstanceMaterial(index: number): Material | null;\n\n  getInstanceMaterial(index: number = 0): Material | null {\n    const materials = this._materials;\n    if (materials.length > index) {\n      const material = materials[index];\n      if (material) {\n        if (this._materialsInstanced[index]) {\n          return material;\n        } else {\n          return this._createInstanceMaterial(material, index);\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the first material.\n   * @returns The first material\n   */\n  getMaterial(): Material | null;\n\n  /**\n   * Get the first material by index.\n   * @param index - Material index\n   * @returns Material\n   */\n  getMaterial(index: number): Material | null;\n\n  getMaterial(index: number = 0): Material | null {\n    return this._materials[index] || null;\n  }\n\n  /**\n   * Set the first material.\n   * @param material - The first material\n   */\n  setMaterial(material: Material): void;\n\n  /**\n   * Set material by index.\n   * @param index - Material index\n   * @param material - The material\n   */\n  setMaterial(index: number, material: Material): void;\n\n  setMaterial(indexOrMaterial: number | Material, material: Material = null): void {\n    if (typeof indexOrMaterial === \"number\") {\n      this._setMaterial(indexOrMaterial, material);\n    } else {\n      this._setMaterial(0, indexOrMaterial);\n    }\n  }\n\n  /**\n   * Get all instance materials.\n   * @remarks Calling this function for the first time after the material is set will create an instance material to ensure that it is unique to the renderer.\n   * @returns All instance materials\n   */\n  getInstanceMaterials(): Readonly<Material[]> {\n    const materials = this._materials;\n    const materialsInstance = this._materialsInstanced;\n    for (let i = 0, n = materials.length; i < n; i++) {\n      if (!materialsInstance[i]) {\n        this._createInstanceMaterial(this._materials[i], i);\n      }\n    }\n    return materials;\n  }\n\n  /**\n   * Get all materials.\n   * @returns All materials\n   */\n  getMaterials(): Readonly<Material[]> {\n    return this._materials;\n  }\n\n  /**\n   * Set all materials.\n   * @param materials - All materials\n   */\n  setMaterials(materials: Material[]): void {\n    const count = materials.length;\n    const internalMaterials = this._materials;\n    const materialsInstanced = this._materialsInstanced;\n\n    for (let i = count, n = internalMaterials.length; i < n; i++) {\n      const internalMaterial = internalMaterials[i];\n      internalMaterial && internalMaterial._addRefCount(-1);\n    }\n\n    internalMaterials.length !== count && (internalMaterials.length = count);\n    materialsInstanced.length !== 0 && (materialsInstanced.length = 0);\n\n    for (let i = 0; i < count; i++) {\n      const internalMaterial = internalMaterials[i];\n      const material = materials[i];\n      if (internalMaterial !== material) {\n        internalMaterials[i] = material;\n        internalMaterial && internalMaterial._addRefCount(-1);\n        material && material._addRefCount(1);\n      }\n    }\n  }\n\n  update(deltaTime: number): void {}\n\n  /**\n   * @override\n   * @internal\n   */\n  _onEnable(): void {\n    const componentsManager = this.engine._componentsManager;\n    if (this._overrideUpdate) {\n      componentsManager.addOnUpdateRenderers(this);\n    }\n    componentsManager.addRenderer(this);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onDisable(): void {\n    const componentsManager = this.engine._componentsManager;\n    if (this._overrideUpdate) {\n      componentsManager.removeOnUpdateRenderers(this);\n    }\n    componentsManager.removeRenderer(this);\n  }\n\n  /**\n   * @internal\n   */\n  _prepareRender(context: RenderContext): void {\n    const virtualCamera = context.virtualCamera;\n    const cameraPosition = virtualCamera.position;\n    const boundsCenter = this.bounds.getCenter(Renderer._tempVector0);\n\n    if (virtualCamera.isOrthographic) {\n      Vector3.subtract(boundsCenter, cameraPosition, boundsCenter);\n      this._distanceForSort = Vector3.dot(boundsCenter, virtualCamera.forward);\n    } else {\n      this._distanceForSort = Vector3.distanceSquared(boundsCenter, cameraPosition);\n    }\n\n    this._updateShaderData(context);\n    this._render(context);\n\n    // union camera global macro and renderer macro.\n    ShaderMacroCollection.unionCollection(\n      context.camera._globalShaderMacro,\n      this.shaderData._macroCollection,\n      this._globalShaderMacro\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _onDestroy(): void {\n    this.entity.transform._updateFlagManager.removeListener(this._onTransformChanged);\n\n    this.shaderData._addRefCount(-1);\n\n    const materials = this._materials;\n    for (let i = 0, n = materials.length; i < n; i++) {\n      materials[i]?._addRefCount(-1);\n    }\n  }\n\n  protected _updateShaderData(context: RenderContext): void {\n    const entity = this.entity;\n    const worldMatrix = entity.transform.worldMatrix;\n    this._updateTransformShaderData(context, worldMatrix);\n\n    const layer = entity.layer;\n    this._rendererLayer.set(layer & 65535, (layer >>> 16) & 65535, 0, 0);\n  }\n\n  protected _updateTransformShaderData(context: RenderContext, worldMatrix: Matrix): void {\n    const shaderData = this.shaderData;\n    const virtualCamera = context.virtualCamera;\n\n    const mvMatrix = this._mvMatrix;\n    const mvpMatrix = this._mvpMatrix;\n    const mvInvMatrix = this._mvInvMatrix;\n    const normalMatrix = this._normalMatrix;\n\n    Matrix.multiply(virtualCamera.viewMatrix, worldMatrix, mvMatrix);\n    Matrix.multiply(virtualCamera.viewProjectionMatrix, worldMatrix, mvpMatrix);\n    Matrix.invert(mvMatrix, mvInvMatrix);\n    Matrix.invert(worldMatrix, normalMatrix);\n    normalMatrix.transpose();\n\n    shaderData.setMatrix(Renderer._localMatrixProperty, this.entity.transform.localMatrix);\n    shaderData.setMatrix(Renderer._worldMatrixProperty, worldMatrix);\n    shaderData.setMatrix(Renderer._mvMatrixProperty, mvMatrix);\n    shaderData.setMatrix(Renderer._mvpMatrixProperty, mvpMatrix);\n    shaderData.setMatrix(Renderer._mvInvMatrixProperty, mvInvMatrix);\n    shaderData.setMatrix(Renderer._normalMatrixProperty, normalMatrix);\n  }\n\n  protected _registerEntityTransformListener(): void {\n    this.entity.transform._updateFlagManager.addListener(this._onTransformChanged);\n  }\n\n  protected _updateBounds(worldBounds: BoundingBox): void {}\n\n  protected _render(context: RenderContext): void {\n    throw \"not implement\";\n  }\n\n  private _createInstanceMaterial(material: Material, index: number): Material {\n    const insMaterial: Material = material.clone();\n    insMaterial.name = insMaterial.name + \"(Instance)\";\n    material._addRefCount(-1);\n    insMaterial._addRefCount(1);\n    this._materialsInstanced[index] = true;\n    this._materials[index] = insMaterial;\n    return insMaterial;\n  }\n\n  private _setMaterial(index: number, material: Material): void {\n    const materials = this._materials;\n    if (index >= materials.length) {\n      materials.length = index + 1;\n    }\n\n    const internalMaterial = materials[index];\n    if (internalMaterial !== material) {\n      const materialsInstance = this._materialsInstanced;\n      index < materialsInstance.length && (materialsInstance[index] = false);\n\n      internalMaterial && internalMaterial._addRefCount(-1);\n      material && material._addRefCount(1);\n      materials[index] = material;\n    }\n  }\n\n  @ignoreClone\n  protected _onTransformChanged(type: TransformModifyFlags): void {\n    this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n  }\n}\n\n/**\n * @internal\n */\nexport enum RendererUpdateFlags {\n  /** Include world position and world bounds. */\n  WorldVolume = 0x1\n}\n", "/**\n *  Static interface implement decorator.\n *  https://stackoverflow.com/questions/13955157/how-to-define-static-property-in-typescript-interface\n */\nexport function StaticInterfaceImplement<T>() {\n  return <U extends T>(constructor: U) => {\n    constructor;\n  };\n}\n\n", "import { BoundingBox, Matrix, Vector2, Vector3 } from \"@galacean/engine-math\";\nimport { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { SpriteMask } from \"../sprite\";\nimport { SpriteRenderer } from \"../sprite/SpriteRenderer\";\nimport { IAssembler } from \"./IAssembler\";\n\n/**\n * @internal\n */\n@StaticInterfaceImplement<IAssembler>()\nexport class SimpleSpriteAssembler {\n  static _rectangleTriangles: number[] = [0, 1, 2, 2, 1, 3];\n  static _worldMatrix: Matrix = new Matrix();\n\n  static resetData(renderer: SpriteRenderer | SpriteMask): void {\n    const { _renderData: renderData } = renderer;\n    const vertexCount = (renderData.vertexCount = 4);\n    const { positions, uvs } = renderData;\n    if (positions.length < vertexCount) {\n      for (let i = positions.length; i < vertexCount; i++) {\n        positions.push(new Vector3());\n        uvs.push(new Vector2());\n      }\n    }\n    renderData.triangles = SimpleSpriteAssembler._rectangleTriangles;\n  }\n\n  static updatePositions(renderer: SpriteRenderer | SpriteMask): void {\n    const { width, height, sprite } = renderer;\n    const { x: pivotX, y: pivotY } = sprite.pivot;\n    // Renderer's worldMatrix;\n    const { _worldMatrix: worldMatrix } = SimpleSpriteAssembler;\n    const { elements: wE } = worldMatrix;\n    // Parent's worldMatrix.\n    const { elements: pWE } = renderer.entity.transform.worldMatrix;\n    const sx = renderer.flipX ? -width : width;\n    const sy = renderer.flipY ? -height : height;\n    (wE[0] = pWE[0] * sx), (wE[1] = pWE[1] * sx), (wE[2] = pWE[2] * sx);\n    (wE[4] = pWE[4] * sy), (wE[5] = pWE[5] * sy), (wE[6] = pWE[6] * sy);\n    (wE[8] = pWE[8]), (wE[9] = pWE[9]), (wE[10] = pWE[10]);\n    wE[12] = pWE[12] - pivotX * wE[0] - pivotY * wE[4];\n    wE[13] = pWE[13] - pivotX * wE[1] - pivotY * wE[5];\n    wE[14] = pWE[14] - pivotX * wE[2] - pivotY * wE[6];\n\n    // ---------------\n    //  2 - 3\n    //  |   |\n    //  0 - 1\n    // ---------------\n    // Update positions.\n    const spritePositions = sprite._getPositions();\n    const { positions } = renderer._renderData;\n    for (let i = 0; i < 4; i++) {\n      const { x, y } = spritePositions[i];\n      positions[i].set(wE[0] * x + wE[4] * y + wE[12], wE[1] * x + wE[5] * y + wE[13], wE[2] * x + wE[6] * y + wE[14]);\n    }\n\n    BoundingBox.transform(sprite._getBounds(), worldMatrix, renderer._bounds);\n  }\n\n  static updateUVs(renderer: SpriteRenderer | SpriteMask): void {\n    const spriteUVs = renderer.sprite._getUVs();\n    const renderUVs = renderer._renderData.uvs;\n    const { x: left, y: bottom } = spriteUVs[0];\n    const { x: right, y: top } = spriteUVs[3];\n    renderUVs[0].set(left, bottom);\n    renderUVs[1].set(right, bottom);\n    renderUVs[2].set(left, top);\n    renderUVs[3].set(right, top);\n  }\n}\n", "import { Color, Vector2, Vector3 } from \"@galacean/engine-math\";\n\n/**\n * @internal\n */\nexport class RenderData2D {\n  constructor(\n    public vertexCount: number,\n    public positions: Vector3[],\n    public uvs: Vector2[],\n    public triangles: number[] = null,\n    public color: Color = null\n  ) {}\n}\n", "/**\n * Sprite mask layer.\n */\nexport enum SpriteMaskLayer {\n  /** Mask layer 0. */\n  Layer0 = 0x1,\n  /** Mask layer 1. */\n  Layer1 = 0x2,\n  /** Mask layer 2. */\n  Layer2 = 0x4,\n  /** Mask layer 3. */\n  Layer3 = 0x8,\n  /** Mask layer 4. */\n  Layer4 = 0x10,\n  /** Mask layer 5. */\n  Layer5 = 0x20,\n  /** Mask layer 6. */\n  Layer6 = 0x40,\n  /** Mask layer 7. */\n  Layer7 = 0x80,\n  /** Mask layer 8. */\n  Layer8 = 0x100,\n  /** Mask layer 9. */\n  Layer9 = 0x200,\n  /** Mask layer 10. */\n  Layer10 = 0x400,\n  /** Mask layer 11. */\n  Layer11 = 0x800,\n  /** Mask layer 12. */\n  Layer12 = 0x1000,\n  /** Mask layer 13. */\n  Layer13 = 0x2000,\n  /** Mask layer 14. */\n  Layer14 = 0x4000,\n  /** Mask layer 15. */\n  Layer15 = 0x8000,\n  /** Mask layer 16. */\n  Layer16 = 0x10000,\n  /** Mask layer 17. */\n  Layer17 = 0x20000,\n  /** Mask layer 18. */\n  Layer18 = 0x40000,\n  /** Mask layer 19. */\n  Layer19 = 0x80000,\n  /** Mask layer 20. */\n  Layer20 = 0x100000,\n  /** Mask layer 21. */\n  Layer21 = 0x200000,\n  /** Mask layer 22. */\n  Layer22 = 0x400000,\n  /** Mask layer 23. */\n  Layer23 = 0x800000,\n  /** Mask layer 24. */\n  Layer24 = 0x1000000,\n  /** Mask layer 25. */\n  Layer25 = 0x2000000,\n  /** Mask layer 26. */\n  Layer26 = 0x4000000,\n  /** Mask layer 27. */\n  Layer27 = 0x8000000,\n  /** Mask layer 28. */\n  Layer28 = 0x10000000,\n  /** Mask layer 29. */\n  Layer29 = 0x20000000,\n  /** Mask layer 30. */\n  Layer30 = 0x40000000,\n  /** Mask layer 31. */\n  Layer31 = 0x80000000,\n  /** All mask layers. */\n  Everything = 0xffffffff\n}\n", "/**\n * Sprite Property Dirty Flag.\n */\nexport enum SpriteModifyFlags {\n  texture = 0x1,\n  size = 0x2,\n  atlasRotate = 0x4,\n  atlasRegion = 0x8,\n  atlasRegionOffset = 0x10,\n  region = 0x20,\n  pivot = 0x40,\n  border = 0x80\n}\n", "import { BoundingBox } from \"@galacean/engine-math\";\nimport { assignmentClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { ICustomClone } from \"../../clone/ComponentCloner\";\nimport { Entity } from \"../../Entity\";\nimport { Renderer, RendererUpdateFlags } from \"../../Renderer\";\nimport { RenderContext } from \"../../RenderPipeline/RenderContext\";\nimport { SpriteMaskElement } from \"../../RenderPipeline/SpriteMaskElement\";\nimport { Shader } from \"../../shader/Shader\";\nimport { ShaderProperty } from \"../../shader/ShaderProperty\";\nimport { SimpleSpriteAssembler } from \"../assembler/SimpleSpriteAssembler\";\nimport { RenderData2D } from \"../data/RenderData2D\";\nimport { SpriteMaskLayer } from \"../enums/SpriteMaskLayer\";\nimport { SpriteModifyFlags } from \"../enums/SpriteModifyFlags\";\nimport { Sprite } from \"./Sprite\";\n\n/**\n * A component for masking Sprites.\n */\nexport class SpriteMask extends Renderer implements ICustomClone {\n  /** @internal */\n  static _textureProperty: ShaderProperty = Shader.getPropertyByName(\"u_maskTexture\");\n  /** @internal */\n  static _alphaCutoffProperty: ShaderProperty = Shader.getPropertyByName(\"u_maskAlphaCutoff\");\n\n  /** The mask layers the sprite mask influence to. */\n  @assignmentClone\n  influenceLayers: number = SpriteMaskLayer.Everything;\n  /** @internal */\n  _maskElement: SpriteMaskElement;\n\n  /** @internal */\n  _renderData: RenderData2D;\n\n  @ignoreClone\n  private _sprite: Sprite = null;\n\n  @ignoreClone\n  private _automaticWidth: number = 0;\n  @ignoreClone\n  private _automaticHeight: number = 0;\n  @assignmentClone\n  private _customWidth: number = undefined;\n  @assignmentClone\n  private _customHeight: number = undefined;\n  @assignmentClone\n  private _flipX: boolean = false;\n  @assignmentClone\n  private _flipY: boolean = false;\n\n  @assignmentClone\n  private _alphaCutoff: number = 0.5;\n\n  /**\n   * Render width (in world coordinates).\n   *\n   * @remarks\n   * If width is set, return the set value,\n   * otherwise return `SpriteMask.sprite.width`.\n   */\n  get width(): number {\n    if (this._customWidth !== undefined) {\n      return this._customWidth;\n    } else {\n      this._dirtyUpdateFlag & SpriteMaskUpdateFlags.AutomaticSize && this._calDefaultSize();\n      return this._automaticWidth;\n    }\n  }\n\n  set width(value: number) {\n    if (this._customWidth !== value) {\n      this._customWidth = value;\n      this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n    }\n  }\n\n  /**\n   * Render height (in world coordinates).\n   *\n   * @remarks\n   * If height is set, return the set value,\n   * otherwise return `SpriteMask.sprite.height`.\n   */\n  get height(): number {\n    if (this._customHeight !== undefined) {\n      return this._customHeight;\n    } else {\n      this._dirtyUpdateFlag & SpriteMaskUpdateFlags.AutomaticSize && this._calDefaultSize();\n      return this._automaticHeight;\n    }\n  }\n\n  set height(value: number) {\n    if (this._customHeight !== value) {\n      this._customHeight = value;\n      this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n    }\n  }\n\n  /**\n   * Flips the sprite on the X axis.\n   */\n  get flipX(): boolean {\n    return this._flipX;\n  }\n\n  set flipX(value: boolean) {\n    if (this._flipX !== value) {\n      this._flipX = value;\n      this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n    }\n  }\n\n  /**\n   * Flips the sprite on the Y axis.\n   */\n  get flipY(): boolean {\n    return this._flipY;\n  }\n\n  set flipY(value: boolean) {\n    if (this._flipY !== value) {\n      this._flipY = value;\n      this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n    }\n  }\n\n  /**\n   * The Sprite to render.\n   */\n  get sprite(): Sprite {\n    return this._sprite;\n  }\n\n  set sprite(value: Sprite | null) {\n    const lastSprite = this._sprite;\n    if (lastSprite !== value) {\n      lastSprite && lastSprite._updateFlagManager.removeListener(this._onSpriteChange);\n      this._dirtyUpdateFlag |= SpriteMaskUpdateFlags.All;\n      if (value) {\n        value._updateFlagManager.addListener(this._onSpriteChange);\n        this.shaderData.setTexture(SpriteMask._textureProperty, value.texture);\n      } else {\n        this.shaderData.setTexture(SpriteMask._textureProperty, null);\n      }\n      this._sprite = value;\n    }\n  }\n\n  /**\n   * The minimum alpha value used by the mask to select the area of influence defined over the mask's sprite. Value between 0 and 1.\n   */\n  get alphaCutoff(): number {\n    return this._alphaCutoff;\n  }\n\n  set alphaCutoff(value: number) {\n    if (this._alphaCutoff !== value) {\n      this._alphaCutoff = value;\n      this.shaderData.setFloat(SpriteMask._alphaCutoffProperty, value);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._renderData = new RenderData2D(4, [], []);\n    SimpleSpriteAssembler.resetData(this);\n    this.setMaterial(this._engine._spriteMaskDefaultMaterial);\n    this.shaderData.setFloat(SpriteMask._alphaCutoffProperty, this._alphaCutoff);\n    this._onSpriteChange = this._onSpriteChange.bind(this);\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onDestroy(): void {\n    this._sprite?._updateFlagManager.removeListener(this._onSpriteChange);\n    this._sprite = null;\n    this._renderData = null;\n    super._onDestroy();\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: SpriteMask): void {\n    target.sprite = this._sprite;\n  }\n\n  /**\n   * @override\n   */\n  protected _updateBounds(worldBounds: BoundingBox): void {\n    if (this.sprite) {\n      SimpleSpriteAssembler.updatePositions(this);\n    } else {\n      worldBounds.min.set(0, 0, 0);\n      worldBounds.max.set(0, 0, 0);\n    }\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  protected _render(context: RenderContext): void {\n    if (!this.sprite?.texture || !this.width || !this.height) {\n      return;\n    }\n\n    // Update position\n    if (this._dirtyUpdateFlag & RendererUpdateFlags.WorldVolume) {\n      SimpleSpriteAssembler.updatePositions(this);\n      this._dirtyUpdateFlag &= ~RendererUpdateFlags.WorldVolume;\n    }\n\n    // Update uv\n    if (this._dirtyUpdateFlag & SpriteMaskUpdateFlags.UV) {\n      SimpleSpriteAssembler.updateUVs(this);\n      this._dirtyUpdateFlag &= ~SpriteMaskUpdateFlags.UV;\n    }\n\n    const spriteMaskElementPool = this._engine._spriteMaskElementPool;\n    const maskElement = spriteMaskElementPool.getFromPool();\n    maskElement.setValue(this, this._renderData, this.getMaterial());\n    context.camera._renderPipeline._allSpriteMasks.add(this);\n    this._maskElement = maskElement;\n  }\n\n  private _calDefaultSize(): void {\n    const sprite = this._sprite;\n    if (sprite) {\n      this._automaticWidth = sprite.width;\n      this._automaticHeight = sprite.height;\n    } else {\n      this._automaticWidth = this._automaticHeight = 0;\n    }\n    this._dirtyUpdateFlag &= ~SpriteMaskUpdateFlags.AutomaticSize;\n  }\n\n  @ignoreClone\n  private _onSpriteChange(type: SpriteModifyFlags): void {\n    switch (type) {\n      case SpriteModifyFlags.texture:\n        this.shaderData.setTexture(SpriteMask._textureProperty, this.sprite.texture);\n        break;\n      case SpriteModifyFlags.size:\n        this._dirtyUpdateFlag |= SpriteMaskUpdateFlags.AutomaticSize;\n        if (this._customWidth === undefined || this._customHeight === undefined) {\n          this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n        }\n        break;\n      case SpriteModifyFlags.region:\n      case SpriteModifyFlags.atlasRegionOffset:\n        this._dirtyUpdateFlag |= SpriteMaskUpdateFlags.RenderData;\n        break;\n      case SpriteModifyFlags.atlasRegion:\n        this._dirtyUpdateFlag |= SpriteMaskUpdateFlags.UV;\n        break;\n      case SpriteModifyFlags.pivot:\n        this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n        break;\n      default:\n        break;\n    }\n  }\n}\n\n/**\n * @remarks Extends `RendererUpdateFlag`.\n */\nenum SpriteMaskUpdateFlags {\n  /** UV. */\n  UV = 0x2,\n  /** WorldVolume and UV . */\n  RenderData = 0x3,\n  /** Automatic Size. */\n  AutomaticSize = 0x4,\n  /** All. */\n  All = 0x7\n}\n", "/**\n * Vertex element format.\n */\nexport enum VertexElementFormat {\n  /** 32-bit float */\n  Float,\n  /** Two-dimensional 32-bit float */\n  Vector2,\n  /** Three-dimensional 32-bit float */\n  Vector3,\n  /** Four-dimensional 32-bit float */\n  Vector4,\n  /** Four-dimensional 8-bit integer,range is [-128,127] */\n  Byte4,\n  /** Four-dimensional 8-bit Unsigned integer, range is [0,255] */\n  UByte4,\n  /** Four-dimensional 8-bit Normalized integer, range is [-1,1] */\n  NormalizedByte4,\n  /** Four-dimensional 8-bit Normalized unsigned integer, range is [0,1] */\n  NormalizedUByte4,\n  /** Two-dimensional 16-bit integer, range is[-32768, 32767] */\n  Short2,\n  /** Two-dimensional 16-bit Unsigned integer, range is [0, 65535] */\n  UShort2,\n  /** Two-dimensional 16-bit Unsigned integer, range is [-1, 1] */\n  NormalizedShort2,\n  /** Two-dimensional 16-bit Normalized unsigned integer, range is [0, 1] */\n  NormalizedUShort2,\n  /** Four-dimensional 16-bit integer, range is [-32768, 32767] */\n  Short4,\n  /** Four-dimensional 16-bit Unsigned integer, range is [0, 65535] */\n  UShort4,\n  /** Four-dimensional 16-bit Normalized integer, range is[-1, 1] */\n  NormalizedShort4,\n  /** Four-dimensional 16-bit Normalized unsigned integer, range is [0, 1] */\n  NormalizedUShort4\n}\n", "/**\n * Buffer usage.\n */\nexport enum BufferUsage {\n  /** The buffer content are intended to be specified once, and used many times */\n  Static,\n  /** The buffer contents are intended to be respecified repeatedly, and used many times */\n  Dynamic,\n  /** The buffer contents are intended to be specified once, and used at most a few times */\n  Stream\n}\n", "/**\n * Index format.\n */\nexport enum IndexFormat {\n  /** 8 bit */\n  UInt8,\n  /** 16 bit */\n  UInt16,\n  /** 32 bit */\n  UInt32\n}\n", "import { DataType } from \"../base/Constant\";\nimport { BufferUsage } from \"./enums/BufferUsage\";\nimport { IndexFormat } from \"./enums/IndexFormat\";\nimport { VertexElementFormat } from \"./enums/VertexElementFormat\";\n\nexport interface ElementInfo {\n  size: number;\n  type: DataType;\n  normalized: boolean;\n}\n\nexport class BufferUtil {\n  /**\n   * @internal\n   */\n  static _getGLBufferUsage(gl: WebGLRenderingContext, bufferUsage: BufferUsage): number {\n    switch (bufferUsage) {\n      case BufferUsage.Static:\n        return gl.STATIC_DRAW;\n      case BufferUsage.Dynamic:\n        return gl.DYNAMIC_DRAW;\n      case BufferUsage.Stream:\n        return gl.STREAM_DRAW;\n    }\n  }\n\n  static _getGLIndexType(indexFormat: IndexFormat): DataType {\n    switch (indexFormat) {\n      case IndexFormat.UInt8:\n        return DataType.UNSIGNED_BYTE;\n      case IndexFormat.UInt16:\n        return DataType.UNSIGNED_SHORT;\n      case IndexFormat.UInt32:\n        return DataType.UNSIGNED_INT;\n    }\n  }\n\n  static _getGLIndexByteCount(indexFormat: IndexFormat): number {\n    switch (indexFormat) {\n      case IndexFormat.UInt8:\n        return 1;\n      case IndexFormat.UInt16:\n        return 2;\n      case IndexFormat.UInt32:\n        return 4;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getElementInfo(format: VertexElementFormat): ElementInfo {\n    let size: number;\n    let type: DataType;\n    let normalized: boolean = false;\n\n    switch (format) {\n      case VertexElementFormat.Float:\n        size = 1;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector2:\n        size = 2;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector3:\n        size = 3;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector4:\n        size = 4;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Byte4:\n        size = 4;\n        type = DataType.BYTE;\n        break;\n      case VertexElementFormat.UByte4:\n        size = 4;\n        type = DataType.UNSIGNED_BYTE;\n        break;\n      case VertexElementFormat.NormalizedByte4:\n        size = 4;\n        type = DataType.BYTE;\n        normalized = true;\n        break;\n      case VertexElementFormat.NormalizedUByte4:\n        size = 4;\n        type = DataType.UNSIGNED_BYTE;\n        normalized = true;\n        break;\n      case VertexElementFormat.Short2:\n        size = 2;\n        type = DataType.SHORT;\n        break;\n      case VertexElementFormat.UShort2:\n        size = 2;\n        type = DataType.UNSIGNED_SHORT;\n        break;\n      case VertexElementFormat.NormalizedShort2:\n        size = 2;\n        type = DataType.SHORT;\n        normalized = true;\n        break;\n      case VertexElementFormat.NormalizedUShort2:\n        size = 2;\n        type = DataType.UNSIGNED_SHORT;\n        normalized = true;\n        break;\n      case VertexElementFormat.Short4:\n        size = 4;\n        type = DataType.SHORT;\n        break;\n      case VertexElementFormat.UShort4:\n        size = 4;\n        type = DataType.UNSIGNED_SHORT;\n        break;\n      case VertexElementFormat.NormalizedShort4:\n        size = 4;\n        type = DataType.SHORT;\n        normalized = true;\n        break;\n      case VertexElementFormat.NormalizedUShort4:\n        size = 4;\n        type = DataType.UNSIGNED_SHORT;\n        normalized = true;\n        break;\n      default:\n        break;\n    }\n    return { size, type, normalized };\n  }\n}\n", "import { BufferUtil, ElementInfo } from \"./BufferUtil\";\nimport { VertexElementFormat } from \"./enums/VertexElementFormat\";\n\n/**\n * Vertex element.\n */\nexport class VertexElement {\n  _glElementInfo: ElementInfo;\n\n  private _semantic: string;\n  private _offset: number;\n  private _format: VertexElementFormat;\n  private _bindingIndex: number;\n  private _instanceStepRate: number;\n\n  /**\n   * Vertex semantic.\n   */\n  get semantic(): string {\n    return this._semantic;\n  }\n\n  /**\n   * Vertex data byte offset.\n   */\n  get offset(): number {\n    return this._offset;\n  }\n\n  set offset(value: number) {\n    this._offset = value;\n  }\n\n  /**\n   * Vertex data format.\n   */\n  get format(): VertexElementFormat {\n    return this._format;\n  }\n\n  /**\n   * Vertex buffer binding index.\n   */\n  get bindingIndex(): number {\n    return this._bindingIndex;\n  }\n\n  set bindingIndex(value: number) {\n    this._bindingIndex = value;\n  }\n\n  /**\n   * Instance cadence, the number of instances drawn for each vertex in the buffer, non-instance elements must be 0.\n   */\n  get instanceStepRate(): number {\n    return this._instanceStepRate;\n  }\n\n  /**\n   * Create vertex element.\n   * @param semantic - Input vertex semantic\n   * @param offset - Vertex data byte offset\n   * @param format - Vertex data format\n   * @param bindingIndex - Vertex buffer binding index\n   * @param instanceStepRate - Instance cadence, the number of instances drawn for each vertex in the buffer, non-instance elements must be 0.\n   */\n  constructor(\n    semantic: string,\n    offset: number,\n    format: VertexElementFormat,\n    bindingIndex: number,\n    instanceStepRate: number = 0\n  ) {\n    this._semantic = semantic;\n    this._offset = offset;\n    this._format = format;\n    this._bindingIndex = bindingIndex;\n    this._glElementInfo = BufferUtil._getElementInfo(this.format);\n    this._instanceStepRate = Math.floor(instanceStepRate);\n  }\n}\n", "/**\n * Buffer binding flag.\n */\nexport enum BufferBindFlag {\n  /** Vertex buffer binding flag */\n  VertexBuffer,\n  /** Index buffer binding flag */\n  IndexBuffer\n}\n", "/**\n * Define update strategy when call bufferData/bufferSubData func.\n */\nexport enum SetDataOptions {\n  /** Can overwrite part of used buffer data and ensure correct rendering */\n  None,\n  /** Discard old buffer and create a new buffer, and won't affect the previous rendering */\n  Discard\n  ///** Need to ensure that the buffer data will not be overwritten, and won't interrupting rendering if setData immediately */\n  //NoOverwrite\n}\n", "import { RefObject } from \"../asset/RefObject\";\nimport { Engine } from \"../Engine\";\nimport { IHardwareRenderer } from \"../renderingHardwareInterface/IHardwareRenderer\";\nimport { BufferUtil } from \"./BufferUtil\";\nimport { BufferBindFlag } from \"./enums/BufferBindFlag\";\nimport { BufferUsage } from \"./enums/BufferUsage\";\nimport { SetDataOptions } from \"./enums/SetDataOptions\";\n\n/**\n * Buffer.\n */\nexport class Buffer extends RefObject {\n  _glBindTarget: number;\n  _glBufferUsage: number;\n  _nativeBuffer: WebGLBuffer;\n\n  private _hardwareRenderer: IHardwareRenderer;\n  private _type: BufferBindFlag;\n  private _byteLength: number;\n  private _bufferUsage: BufferUsage;\n\n  /**\n   * Buffer binding flag.\n   */\n  get type(): BufferBindFlag {\n    return this._type;\n  }\n\n  /**\n   * Byte length.\n   */\n  get byteLength(): number {\n    return this._byteLength;\n  }\n\n  /**\n   * Buffer usage.\n   */\n  get bufferUsage(): BufferUsage {\n    return this._bufferUsage;\n  }\n\n  /**\n   * Create Buffer.\n   * @param engine - Engine\n   * @param type - Buffer binding flag\n   * @param byteLength - Byte length\n   * @param bufferUsage - Buffer usage\n   */\n  constructor(engine: Engine, type: BufferBindFlag, byteLength: number, bufferUsage?: BufferUsage);\n\n  /**\n   * Create Buffer.\n   * @param engine - Engine\n   * @param type - Buffer binding flag\n   * @param data - Byte\n   * @param bufferUsage - Buffer usage\n   */\n  constructor(engine: Engine, type: BufferBindFlag, data: ArrayBuffer | ArrayBufferView, bufferUsage?: BufferUsage);\n\n  constructor(\n    engine: Engine,\n    type: BufferBindFlag,\n    byteLengthOrData: number | ArrayBuffer | ArrayBufferView,\n    bufferUsage: BufferUsage = BufferUsage.Static\n  ) {\n    super(engine);\n    this._engine = engine;\n    this._type = type;\n    this._bufferUsage = bufferUsage;\n\n    const hardwareRenderer = engine._hardwareRenderer;\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = hardwareRenderer.gl;\n    const glBufferUsage = BufferUtil._getGLBufferUsage(gl, bufferUsage);\n    const glBindTarget = type === BufferBindFlag.VertexBuffer ? gl.ARRAY_BUFFER : gl.ELEMENT_ARRAY_BUFFER;\n\n    this._nativeBuffer = gl.createBuffer();\n    this._hardwareRenderer = hardwareRenderer;\n    this._glBufferUsage = glBufferUsage;\n    this._glBindTarget = glBindTarget;\n\n    this.bind();\n    if (typeof byteLengthOrData === \"number\") {\n      this._byteLength = byteLengthOrData;\n      gl.bufferData(glBindTarget, byteLengthOrData, glBufferUsage);\n    } else {\n      this._byteLength = byteLengthOrData.byteLength;\n      gl.bufferData(glBindTarget, byteLengthOrData, glBufferUsage);\n    }\n    gl.bindBuffer(glBindTarget, null);\n  }\n\n  /**\n   * Bind buffer.\n   */\n  bind(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.bindBuffer(this._glBindTarget, this._nativeBuffer);\n  }\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   */\n  setData(data: ArrayBuffer | ArrayBufferView): void;\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   * @param bufferByteOffset - buffer byte offset\n   */\n  setData(data: ArrayBuffer | ArrayBufferView, bufferByteOffset: number): void;\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   * @param dataOffset - Buffer byte offset\n   * @param dataLength - Data length\n   */\n  setData(data: ArrayBuffer | ArrayBufferView, bufferByteOffset: number, dataOffset: number, dataLength?: number): void;\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   * @param dataOffset - Buffer byte offset\n   * @param dataLength - Data length\n   * @param options - Update strategy: None/Discard/NoOverwrite\n   */\n  setData(\n    data: ArrayBuffer | ArrayBufferView,\n    bufferByteOffset: number,\n    dataOffset: number,\n    dataLength: number,\n    options: SetDataOptions\n  ): void;\n\n  setData(\n    data: ArrayBuffer | ArrayBufferView,\n    bufferByteOffset: number = 0,\n    dataOffset: number = 0,\n    dataLength?: number,\n    options: SetDataOptions = SetDataOptions.None\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    const isWebGL2: boolean = this._hardwareRenderer.isWebGL2;\n    const glBindTarget: number = this._glBindTarget;\n    this.bind();\n\n    if (options === SetDataOptions.Discard) {\n      gl.bufferData(glBindTarget, this._byteLength, this._glBufferUsage);\n    }\n\n    // TypeArray is BYTES_PER_ELEMENT, unTypeArray is 1\n    const byteSize = (<Uint8Array>data).BYTES_PER_ELEMENT || 1;\n    const dataByteLength = dataLength ? byteSize * dataLength : data.byteLength;\n\n    if (dataOffset !== 0 || dataByteLength < data.byteLength) {\n      const isArrayBufferView = (<ArrayBufferView>data).byteOffset !== undefined;\n      if (isWebGL2 && isArrayBufferView) {\n        gl.bufferSubData(glBindTarget, bufferByteOffset, <ArrayBufferView>data, dataOffset, dataByteLength / byteSize);\n      } else {\n        const subData = new Uint8Array(\n          isArrayBufferView ? (<ArrayBufferView>data).buffer : <ArrayBuffer>data,\n          dataOffset * byteSize,\n          dataByteLength\n        );\n        gl.bufferSubData(glBindTarget, bufferByteOffset, subData);\n      }\n    } else {\n      gl.bufferSubData(glBindTarget, bufferByteOffset, data);\n    }\n    gl.bindBuffer(glBindTarget, null);\n  }\n\n  /**\n   * Get buffer data.\n   * @param data - Output buffer data\n   */\n  getData(data: ArrayBufferView): void;\n\n  /**\n   * Get buffer data.\n   * @param data - Output buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   */\n  getData(data: ArrayBufferView, bufferByteOffset: number): void;\n\n  /**\n   * Get buffer data.\n   * @param data - Output buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   * @param dataOffset - Output data offset\n   * @param dataLength - Output data length\n   */\n  getData(data: ArrayBufferView, bufferByteOffset: number, dataOffset: number, dataLength: number): void;\n\n  getData(data: ArrayBufferView, bufferByteOffset: number = 0, dataOffset: number = 0, dataLength?: number): void {\n    const isWebGL2: boolean = this._hardwareRenderer.isWebGL2;\n\n    if (isWebGL2) {\n      const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n      this.bind();\n      gl.getBufferSubData(this._glBindTarget, bufferByteOffset, data, dataOffset, dataLength);\n    } else {\n      throw \"Buffer is write-only on WebGL1.0 platforms.\";\n    }\n  }\n\n  /**\n   * @override\n   * Destroy.\n   */\n  _onDestroy() {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.deleteBuffer(this._nativeBuffer);\n    this._nativeBuffer = null;\n    this._hardwareRenderer = null;\n  }\n\n  /**\n   * @deprecated\n   */\n  resize(dataLength: number) {\n    this.bind();\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.bufferData(this._glBindTarget, dataLength, this._glBufferUsage);\n    this._byteLength = dataLength;\n  }\n}\n", "/**\n * Mesh topology.\n */\nexport enum MeshTopology {\n  /** Draws a single dot */\n  Points = 0,\n  /** Draws a line between a pair of vertices */\n  Lines = 1,\n  /** Draws a straight line to the next vertex, and connects the last vertex back to the first */\n  LineLoop = 2,\n  /** Draws a straight line to the next vertex. */\n  LineStrip = 3,\n  /** Draws a triangle for a group of three vertices */\n  Triangles = 4,\n  /** Draws a triangle strip */\n  TriangleStrip = 5,\n  /** Draws a triangle fan */\n  TriangleFan = 6\n}\n", "import { IndexFormat } from \"./enums/IndexFormat\";\nimport { Buffer } from \"./Buffer\";\n\n/**\n * Index buffer binding.\n */\nexport class IndexBufferBinding {\n  /** @internal */\n  _buffer: Buffer;\n  /** @internal */\n  _format: IndexFormat;\n\n  /**\n   * Index buffer.\n   */\n  get buffer(): Buffer {\n    return this._buffer;\n  }\n\n  /**\n   * Index buffer format.\n   */\n  get format(): IndexFormat {\n    return this._format;\n  }\n\n  /**\n   * Create index buffer binding.\n   * @param buffer - Index buffer\n   * @param format - Index buffer format\n   */\n  constructor(buffer: Buffer, format: IndexFormat) {\n    this._buffer = buffer;\n    this._format = format;\n  }\n}\n", "import { MeshTopology } from \"./enums/MeshTopology\";\n\n/**\n * Sub-mesh, mainly contains drawing information.\n */\nexport class SubMesh {\n  /** Start drawing offset. */\n  start: number;\n  /** Drawing count. */\n  count: number;\n  /** Drawing topology. */\n  topology: MeshTopology;\n\n  /**\n   * Create a sub-mesh.\n   * @param start - Start drawing offset\n   * @param count - Drawing count\n   * @param topology - Drawing topology\n   */\n  constructor(start: number = 0, count: number = 0, topology: MeshTopology = MeshTopology.Triangles) {\n    this.start = start;\n    this.count = count;\n    this.topology = topology;\n  }\n}\n", "import { IPlatformPrimitive } from \"@galacean/engine-design/types/renderingHardwareInterface/IPlatformPrimitive\";\nimport { BoundingBox } from \"@galacean/engine-math\";\nimport { RefObject } from \"../asset/RefObject\";\nimport { Engine } from \"../Engine\";\nimport { BufferUtil } from \"../graphic/BufferUtil\";\nimport { MeshTopology } from \"../graphic/enums/MeshTopology\";\nimport { IndexBufferBinding } from \"../graphic/IndexBufferBinding\";\nimport { SubMesh } from \"../graphic/SubMesh\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { ShaderProgram } from \"../shader/ShaderProgram\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\n\n/**\n * Mesh.\n */\nexport abstract class Mesh extends RefObject {\n  /** Name. */\n  name: string;\n\n  /** @internal */\n  _vertexElementMap: Record<string, VertexElement> = {};\n  /** @internal */\n  _glIndexType: number;\n  /** @internal */\n  _glIndexByteCount: number;\n  /** @internal */\n  _bufferStructChanged: boolean;\n  /** @internal */\n  _platformPrimitive: IPlatformPrimitive;\n\n  /** @internal */\n  _instanceCount: number = 0;\n  /** @internal */\n  _vertexBufferBindings: VertexBufferBinding[] = [];\n  /** @internal */\n  _indexBufferBinding: IndexBufferBinding = null;\n  /** @internal */\n  _vertexElements: VertexElement[] = [];\n  /** @internal */\n  _enableVAO: boolean = true;\n  /** @internal */\n  _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n\n  private _bounds: BoundingBox = new BoundingBox();\n  private _subMeshes: SubMesh[] = [];\n\n  /**\n   * The bounding volume of the mesh.\n   */\n  get bounds(): BoundingBox {\n    return this._bounds;\n  }\n\n  set bounds(value: BoundingBox) {\n    if (this._bounds !== value) {\n      this._bounds.copyFrom(value);\n    }\n  }\n\n  /**\n   * First sub-mesh. Rendered using the first material.\n   */\n  get subMesh(): SubMesh | null {\n    return this._subMeshes[0] || null;\n  }\n\n  /**\n   * A collection of sub-mesh, each sub-mesh can be rendered with an independent material.\n   */\n  get subMeshes(): Readonly<SubMesh[]> {\n    return this._subMeshes;\n  }\n\n  /**\n   * Create mesh.\n   * @param engine - Engine\n   * @param name - Mesh name\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n    this._platformPrimitive = this._engine._hardwareRenderer.createPlatformPrimitive(this);\n    this._onBoundsChanged = this._onBoundsChanged.bind(this);\n\n    const bounds = this._bounds;\n    // @ts-ignore\n    bounds.min._onValueChanged = this._onBoundsChanged;\n    // @ts-ignore\n    bounds.max._onValueChanged = this._onBoundsChanged;\n  }\n\n  /**\n   * Add sub-mesh, each sub-mesh can correspond to an independent material.\n   * @param subMesh - Start drawing offset, if the index buffer is set, it means the offset in the index buffer, if not set, it means the offset in the vertex buffer\n   * @returns Sub-mesh\n   */\n  addSubMesh(subMesh: SubMesh): SubMesh;\n\n  /**\n   * Add sub-mesh, each sub-mesh can correspond to an independent material.\n   * @param start - Start drawing offset, if the index buffer is set, it means the offset in the index buffer, if not set, it means the offset in the vertex buffer\n   * @param count - Drawing count, if the index buffer is set, it means the count in the index buffer, if not set, it means the count in the vertex buffer\n   * @param topology - Drawing topology, default is MeshTopology.Triangles\n   * @returns Sub-mesh\n   */\n  addSubMesh(start: number, count: number, topology?: MeshTopology): SubMesh;\n\n  addSubMesh(\n    startOrSubMesh: number | SubMesh,\n    count?: number,\n    topology: MeshTopology = MeshTopology.Triangles\n  ): SubMesh {\n    if (typeof startOrSubMesh === \"number\") {\n      startOrSubMesh = new SubMesh(startOrSubMesh, count, topology);\n    }\n    this._subMeshes.push(startOrSubMesh);\n    return startOrSubMesh;\n  }\n\n  /**\n   * Remove sub-mesh.\n   * @param subMesh - Sub-mesh needs to be removed\n   */\n  removeSubMesh(subMesh: SubMesh): void {\n    const subMeshes = this._subMeshes;\n    const index = subMeshes.indexOf(subMesh);\n    if (index !== -1) {\n      subMeshes.splice(index, 1);\n    }\n  }\n\n  /**\n   * Clear all sub-mesh.\n   */\n  clearSubMesh(): void {\n    this._subMeshes.length = 0;\n  }\n\n  /**\n   * @internal\n   */\n  _clearVertexElements(): void {\n    this._vertexElements.length = 0;\n    const vertexElementMap = this._vertexElementMap;\n    for (const k in vertexElementMap) {\n      delete vertexElementMap[k];\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _addVertexElement(element: VertexElement): void {\n    const { semantic } = element;\n    this._vertexElementMap[semantic] = element;\n    this._vertexElements.push(element);\n    this._updateFlagManager.dispatch(MeshModifyFlags.VertexElements);\n    this._bufferStructChanged = true;\n  }\n\n  /**\n   * @internal\n   */\n  _insertVertexElement(i: number, element: VertexElement): void {\n    const { semantic } = element;\n    this._vertexElementMap[semantic] = element;\n    this._vertexElements.splice(i, 0, element);\n    this._updateFlagManager.dispatch(MeshModifyFlags.VertexElements);\n    this._bufferStructChanged = true;\n  }\n\n  /**\n   * @internal\n   */\n  _setVertexBufferBinding(index: number, binding: VertexBufferBinding): void {\n    if (this._getRefCount() > 0) {\n      const lastBinding = this._vertexBufferBindings[index];\n      lastBinding && lastBinding._buffer._addRefCount(-1);\n      binding._buffer._addRefCount(1);\n    }\n    this._vertexBufferBindings[index] = binding;\n    this._bufferStructChanged = true;\n  }\n\n  /**\n   * @internal\n   */\n  _draw(shaderProgram: ShaderProgram, subMesh: SubMesh): void {\n    this._platformPrimitive.draw(shaderProgram, subMesh);\n    this._bufferStructChanged = false;\n  }\n\n  /**\n   * @override\n   */\n  _addRefCount(value: number): void {\n    super._addRefCount(value);\n    const vertexBufferBindings = this._vertexBufferBindings;\n    for (let i = 0, n = vertexBufferBindings.length; i < n; i++) {\n      vertexBufferBindings[i]._buffer._addRefCount(value);\n    }\n  }\n\n  /**\n   * @override\n   * Destroy.\n   */\n  _onDestroy(): void {\n    this._vertexBufferBindings = null;\n    this._indexBufferBinding = null;\n    this._vertexElements = null;\n    this._vertexElementMap = null;\n    this._platformPrimitive.destroy();\n  }\n\n  protected _setVertexElements(elements: VertexElement[]): void {\n    this._clearVertexElements();\n    for (let i = 0, n = elements.length; i < n; i++) {\n      this._addVertexElement(elements[i]);\n    }\n  }\n\n  protected _setIndexBufferBinding(binding: IndexBufferBinding | null): void {\n    const lastBinding = this._indexBufferBinding;\n    if (binding) {\n      this._indexBufferBinding = binding;\n      this._glIndexType = BufferUtil._getGLIndexType(binding.format);\n      this._glIndexByteCount = BufferUtil._getGLIndexByteCount(binding.format);\n      (!lastBinding || lastBinding._buffer !== binding._buffer) && (this._bufferStructChanged = true);\n    } else {\n      this._indexBufferBinding = null;\n      this._glIndexType = undefined;\n      lastBinding && (this._bufferStructChanged = true);\n    }\n  }\n\n  private _onBoundsChanged(): void {\n    this._updateFlagManager.dispatch(MeshModifyFlags.Bounds);\n  }\n}\n\n/**\n * @internal\n */\nexport enum MeshModifyFlags {\n  Bounds = 0x1,\n  VertexElements = 0x2\n}\n", "import { Buffer } from \"./Buffer\";\n\n/**\n * Vertex buffer binding.\n */\nexport class VertexBufferBinding {\n  /** @internal */\n  _buffer: Buffer;\n  /** @internal */\n  _stride: number;\n\n  /**\n   * Vertex buffer.\n   */\n  get buffer(): Buffer {\n    return this._buffer;\n  }\n\n  /**\n   * Vertex buffer stride.\n   */\n  get stride(): number {\n    return this._stride;\n  }\n\n  /**\n   * Create vertex buffer.\n   * @param buffer - Vertex buffer\n   * @param stride - Vertex buffer stride\n   */\n  constructor(buffer: Buffer, stride: number) {\n    this._buffer = buffer;\n    this._stride = stride;\n  }\n}\n", "import { Vector2, Vector3 } from \"@galacean/engine-math\";\nimport { BoolUpdateFlag } from \"../BoolUpdateFlag\";\nimport { Engine } from \"../Engine\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { BufferBindFlag } from \"../graphic/enums/BufferBindFlag\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { Texture2DArray, TextureFilterMode, TextureFormat } from \"../texture\";\nimport { BlendShape } from \"./BlendShape\";\nimport { ModelMesh } from \"./ModelMesh\";\nimport { SkinnedMeshRenderer } from \"./SkinnedMeshRenderer\";\n\n/**\n * @internal\n */\nexport class BlendShapeManager {\n  private static _blendShapeMacro = Shader.getMacroByName(\"OASIS_BLENDSHAPE\");\n  private static _blendShapeTextureMacro = Shader.getMacroByName(\"OASIS_BLENDSHAPE_TEXTURE\");\n  private static _blendShapeNormalMacro = Shader.getMacroByName(\"OASIS_BLENDSHAPE_NORMAL\");\n  private static _blendShapeTangentMacro = Shader.getMacroByName(\"OASIS_BLENDSHAPE_TANGENT\");\n\n  private static _blendShapeWeightsProperty = Shader.getPropertyByName(\"u_blendShapeWeights\");\n  private static _blendShapeTextureProperty = Shader.getPropertyByName(\"u_blendShapeTexture\");\n  private static _blendShapeTextureInfoProperty = Shader.getPropertyByName(\"u_blendShapeTextureInfo\");\n\n  /** @internal */\n  _blendShapeCount: number = 0;\n  /** @internal */\n  _blendShapes: BlendShape[] = [];\n  /** @internal */\n  _blendShapeNames: string[];\n  /** @internal */\n  _subDataDirtyFlags: BoolUpdateFlag[] = [];\n  /** @internal */\n  _vertexTexture: Texture2DArray;\n  /** @internal */\n  _vertexBuffers: Buffer[] = [];\n  /** @internal */\n  _vertices: Float32Array;\n  /** @internal */\n  _uniformOccupiesCount: number = 0;\n\n  private _useBlendNormal: boolean = false;\n  private _useBlendTangent: boolean = false;\n  private _vertexElementCount: number = 0;\n  private _bufferBindingOffset: number;\n  private _vertexElementOffset: number;\n\n  private _storeInVertexBufferInfo: Vector2[] = [];\n  private _maxCountSingleVertexBuffer: number = 0;\n  private readonly _engine: Engine;\n  private readonly _modelMesh: ModelMesh;\n  private readonly _lastCreateHostInfo: Vector3 = new Vector3(0, 0, 0);\n  private readonly _canUseTextureStoreData: boolean = true;\n  private readonly _dataTextureInfo: Vector3 = new Vector3();\n\n  constructor(engine: Engine, modelMesh: ModelMesh) {\n    this._engine = engine;\n    this._modelMesh = modelMesh;\n    this._canUseTextureStoreData = this._engine._hardwareRenderer.capability.canUseFloatTextureBlendShape;\n    this._updateLayoutChange = this._updateLayoutChange.bind(this);\n  }\n\n  /**\n   * @internal\n   */\n  _addBlendShape(blendShape: BlendShape): void {\n    this._blendShapes.push(blendShape);\n    this._blendShapeCount++;\n\n    blendShape._layoutChangeManager.addListener(this._updateLayoutChange);\n    this._updateLayoutChange(0, blendShape);\n\n    this._subDataDirtyFlags.push(blendShape._createSubDataDirtyFlag());\n  }\n\n  /**\n   * @internal\n   */\n  _clearBlendShapes(): void {\n    const blendShapes = this._blendShapes;\n    for (let i = 0, n = blendShapes.length; i < n; i++) {\n      blendShapes[i]._layoutChangeManager.removeListener(this._updateLayoutChange);\n    }\n    this._useBlendNormal = false;\n    this._useBlendTangent = false;\n    this._vertexElementCount = 0;\n    this._blendShapes.length = 0;\n    this._blendShapeCount = 0;\n\n    const subDataDirtyFlags = this._subDataDirtyFlags;\n    for (let i = 0, n = subDataDirtyFlags.length; i < n; i++) {\n      subDataDirtyFlags[i].destroy();\n    }\n    subDataDirtyFlags.length = 0;\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(shaderData: ShaderData, skinnedMeshRenderer: SkinnedMeshRenderer): void {\n    let blendShapeCount = this._blendShapeCount;\n    if (blendShapeCount > 0) {\n      shaderData.enableMacro(BlendShapeManager._blendShapeMacro);\n      if (this._useTextureMode()) {\n        shaderData.enableMacro(BlendShapeManager._blendShapeTextureMacro);\n        shaderData.setTexture(BlendShapeManager._blendShapeTextureProperty, this._vertexTexture);\n        shaderData.setVector3(BlendShapeManager._blendShapeTextureInfoProperty, this._dataTextureInfo);\n        shaderData.setFloatArray(BlendShapeManager._blendShapeWeightsProperty, skinnedMeshRenderer.blendShapeWeights);\n        shaderData.enableMacro(\"OASIS_BLENDSHAPE_COUNT\", blendShapeCount.toString());\n        this._uniformOccupiesCount = blendShapeCount + 1;\n      } else {\n        const maxBlendCount = this._getVertexBufferModeSupportCount();\n        if (blendShapeCount > maxBlendCount) {\n          let condensedBlendShapeWeights = skinnedMeshRenderer._condensedBlendShapeWeights;\n          if (!condensedBlendShapeWeights) {\n            condensedBlendShapeWeights = new Float32Array(maxBlendCount);\n            skinnedMeshRenderer._condensedBlendShapeWeights = condensedBlendShapeWeights;\n          }\n          this._filterCondensedBlendShapeWeights(skinnedMeshRenderer.blendShapeWeights, condensedBlendShapeWeights);\n          shaderData.setFloatArray(BlendShapeManager._blendShapeWeightsProperty, condensedBlendShapeWeights);\n          this._modelMesh._enableVAO = false;\n          blendShapeCount = maxBlendCount;\n        } else {\n          shaderData.setFloatArray(BlendShapeManager._blendShapeWeightsProperty, skinnedMeshRenderer.blendShapeWeights);\n          this._modelMesh._enableVAO = true;\n        }\n        shaderData.disableMacro(BlendShapeManager._blendShapeTextureMacro);\n        shaderData.disableMacro(\"OASIS_BLENDSHAPE_COUNT\");\n        this._uniformOccupiesCount = blendShapeCount;\n      }\n\n      if (this._useBlendNormal) {\n        shaderData.enableMacro(BlendShapeManager._blendShapeNormalMacro);\n      } else {\n        shaderData.disableMacro(BlendShapeManager._blendShapeNormalMacro);\n      }\n      if (this._useBlendTangent) {\n        shaderData.enableMacro(BlendShapeManager._blendShapeTangentMacro);\n      } else {\n        shaderData.disableMacro(BlendShapeManager._blendShapeTangentMacro);\n      }\n    } else {\n      shaderData.disableMacro(BlendShapeManager._blendShapeMacro);\n      shaderData.disableMacro(\"OASIS_BLENDSHAPE_COUNT\");\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _useTextureMode(): boolean {\n    if (!this._canUseTextureStoreData) {\n      return false;\n    }\n    return this._blendShapeCount > this._getVertexBufferModeSupportCount();\n  }\n\n  /**\n   * @internal\n   */\n  _layoutOrCountChange(): boolean {\n    const last = this._lastCreateHostInfo;\n    return last.x !== this._blendShapeCount || !!last.y !== this._useBlendNormal || !!last.z !== this._useBlendTangent;\n  }\n\n  /**\n   * @internal\n   */\n  _vertexElementsNeedUpdate(): boolean {\n    const maxSupportCount = this._getVertexBufferModeSupportCount();\n    const info = this._lastCreateHostInfo;\n    return (\n      Math.min(info.x, maxSupportCount) !== Math.min(this._blendShapeCount, maxSupportCount) ||\n      !!info.y !== this._useBlendNormal ||\n      !!info.z !== this._useBlendTangent\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _needUpdateData(): boolean {\n    const subDataDirtyFlags = this._subDataDirtyFlags;\n    for (let i = 0, n = subDataDirtyFlags.length; i < n; i++) {\n      if (subDataDirtyFlags[i].flag) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @internal\n   */\n  _setAttributeModeOffsetInfo(vertexElementOffset: number, bufferBindingOffset: number): void {\n    this._vertexElementOffset = vertexElementOffset;\n    this._bufferBindingOffset = bufferBindingOffset;\n  }\n\n  /**\n   * @internal\n   */\n  _addVertexElements(modelMesh: ModelMesh): void {\n    const bindingOffset = this._bufferBindingOffset;\n\n    let offset = 0;\n    for (let i = 0, n = Math.min(this._blendShapeCount, this._getVertexBufferModeSupportCount()); i < n; i++) {\n      modelMesh._addVertexElement(\n        new VertexElement(`POSITION_BS${i}`, offset, VertexElementFormat.Vector3, bindingOffset)\n      );\n      offset += 12;\n      if (this._useBlendNormal) {\n        modelMesh._addVertexElement(\n          new VertexElement(`NORMAL_BS${i}`, offset, VertexElementFormat.Vector3, bindingOffset)\n        );\n        offset += 12;\n      }\n      if (this._useBlendTangent) {\n        modelMesh._addVertexElement(\n          new VertexElement(`TANGENT_BS${i}`, offset, VertexElementFormat.Vector3, bindingOffset)\n        );\n        offset += 12;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _update(vertexCountChange: boolean, noLongerAccessible: boolean): void {\n    const { vertexCount } = this._modelMesh;\n    const useTexture = this._useTextureMode();\n    const createHost = this._layoutOrCountChange() || vertexCountChange;\n\n    if (createHost) {\n      if (useTexture) {\n        this._createTextureArray(vertexCount);\n      } else {\n        this._createVertexBuffers(vertexCount, noLongerAccessible);\n      }\n      this._lastCreateHostInfo.set(this._blendShapeCount, +this._useBlendNormal, +this._useBlendTangent);\n    }\n    if (this._needUpdateData()) {\n      if (useTexture) {\n        this._updateTextureArray(vertexCount, createHost);\n      } else {\n        this._updateVertexBuffers(vertexCount, createHost);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _releaseMemoryCache(): void {\n    const { _blendShapes: blendShapes } = this;\n    const { length: blendShapeCount } = blendShapes;\n\n    const blendShapeNamesMap = new Array<string>(blendShapeCount);\n    for (let i = 0; i < blendShapeCount; i++) {\n      blendShapeNamesMap[i] = blendShapes[i].name;\n    }\n    this._blendShapeNames = blendShapeNamesMap;\n\n    for (let i = 0, n = blendShapes.length; i < n; i++) {\n      blendShapes[i]._layoutChangeManager.removeListener(this._updateLayoutChange);\n    }\n\n    const dataChangedFlags = this._subDataDirtyFlags;\n    for (let i = 0, n = dataChangedFlags.length; i < n; i++) {\n      dataChangedFlags[i].destroy();\n    }\n\n    this._subDataDirtyFlags = null;\n    this._blendShapes = null;\n    this._vertices = null;\n  }\n\n  private _createVertexBuffers(vertexCount: number, noLongerAccessible: boolean): void {\n    const {\n      _engine: engine,\n      _modelMesh: modelMesh,\n      _blendShapeCount: blendShapeCount,\n      _vertexBuffers: vertexBuffers\n    } = this;\n    const vertexFloatCount = this._vertexElementCount * 3;\n    const vertexByteCount = vertexFloatCount * 4;\n    const maxCountSingleBuffer = Math.floor(255 / vertexByteCount); // 255: Attribute MaxStride\n    const bufferCount = Math.ceil(blendShapeCount / maxCountSingleBuffer);\n    const floatCount = vertexFloatCount * vertexCount * Math.min(maxCountSingleBuffer, blendShapeCount);\n\n    vertexBuffers.length = bufferCount;\n    this._vertices = new Float32Array(floatCount);\n    this._maxCountSingleVertexBuffer = maxCountSingleBuffer;\n    this._storeInVertexBufferInfo.length = blendShapeCount;\n\n    const bufferBindingOffset = this._bufferBindingOffset;\n    for (let i = 0; i < bufferCount; i++) {\n      const lastIndex = bufferCount - 1;\n      const containCount = i === lastIndex ? blendShapeCount - lastIndex * maxCountSingleBuffer : maxCountSingleBuffer;\n      const stride = containCount * vertexByteCount;\n      const byteLength = stride * vertexCount;\n\n      const usage = noLongerAccessible ? BufferUsage.Static : BufferUsage.Dynamic;\n      const blendShapeBuffer = new Buffer(engine, BufferBindFlag.VertexBuffer, byteLength, usage);\n      modelMesh._setVertexBufferBinding(bufferBindingOffset + i, new VertexBufferBinding(blendShapeBuffer, stride));\n      vertexBuffers[i] = blendShapeBuffer;\n    }\n  }\n\n  private _createTextureArray(vertexCount: number): void {\n    const maxTextureSize = this._engine._hardwareRenderer.capability.maxTextureSize;\n    const vertexPixelStride = this._vertexElementCount;\n\n    let textureWidth = vertexPixelStride * vertexCount;\n    let textureHeight = 1;\n    if (textureWidth > maxTextureSize) {\n      textureHeight = Math.ceil(textureWidth / maxTextureSize);\n      textureWidth = maxTextureSize;\n    }\n\n    let blendShapeDataTexture = this._vertexTexture;\n    const blendShapeCount = this._blendShapes.length;\n\n    blendShapeDataTexture && blendShapeDataTexture.destroy();\n\n    blendShapeDataTexture = new Texture2DArray(\n      this._engine,\n      textureWidth,\n      textureHeight,\n      blendShapeCount,\n      TextureFormat.R32G32B32A32,\n      false\n    );\n    blendShapeDataTexture.filterMode = TextureFilterMode.Point;\n\n    this._vertices = new Float32Array(blendShapeCount * textureWidth * textureHeight * 4);\n    this._vertexTexture = blendShapeDataTexture;\n    this._dataTextureInfo.set(vertexPixelStride, textureWidth, textureHeight);\n  }\n\n  /**\n   * @internal\n   */\n  _updateVertexBuffers(vertexCount: number, force: boolean): void {\n    const { _blendShapes: blendShapes, _maxCountSingleVertexBuffer: maxCountSingleBuffer } = this;\n    const { _vertices: vertices, _vertexBuffers: vertexBuffers, _storeInVertexBufferInfo: storeInfos } = this;\n\n    const subDataDirtyFlags = this._subDataDirtyFlags;\n    const blendShapeFloatStride = this._vertexElementCount * 3;\n    const blendShapeByteStride = blendShapeFloatStride * 4;\n    const bufferOffset = this._bufferBindingOffset;\n\n    // @todo: should fix bug when dataChangedFlag is true\n    for (let i = 0, n = blendShapes.length; i < n; i++) {\n      const dataChangedFlag = subDataDirtyFlags[i];\n      if (force || dataChangedFlag.flag) {\n        const { frames } = blendShapes[i];\n        const frameCount = frames.length;\n        const endFrame = frames[frameCount - 1];\n        if (frameCount > 0 && endFrame.deltaPositions.length !== vertexCount) {\n          throw \"BlendShape frame deltaPositions length must same with mesh vertexCount.\";\n        }\n\n        const bufferIndex = Math.floor(i / maxCountSingleBuffer);\n        const indexInBuffer = i % maxCountSingleBuffer;\n        const buffer = vertexBuffers[bufferIndex];\n        const bufferFloatStride = buffer.byteLength / (vertexCount * 4);\n\n        let offset = indexInBuffer * blendShapeFloatStride;\n\n        let storeInfo = storeInfos[i];\n        storeInfo || (storeInfos[i] = storeInfo = new Vector2());\n        storeInfo.set(bufferOffset + bufferIndex, indexInBuffer * blendShapeByteStride); // BufferOffset is mesh vertexBuffer offset\n\n        const { deltaPositions } = endFrame;\n        for (let j = 0; j < vertexCount; j++) {\n          const start = offset + bufferFloatStride * j;\n          const deltaPosition = deltaPositions[j];\n          if (deltaPosition) {\n            vertices[start] = deltaPosition.x;\n            vertices[start + 1] = deltaPosition.y;\n            vertices[start + 2] = deltaPosition.z;\n          }\n        }\n        offset += 3;\n\n        if (this._useBlendNormal) {\n          const { deltaNormals } = endFrame;\n          if (deltaNormals) {\n            for (let j = 0; j < vertexCount; j++) {\n              const start = offset + bufferFloatStride * j;\n              const deltaNormal = deltaNormals[j];\n              if (deltaNormal) {\n                vertices[start] = deltaNormal.x;\n                vertices[start + 1] = deltaNormal.y;\n                vertices[start + 2] = deltaNormal.z;\n              }\n            }\n          }\n          offset += 3;\n        }\n\n        if (this._useBlendTangent) {\n          const { deltaTangents } = endFrame;\n          if (deltaTangents) {\n            for (let j = 0; j < vertexCount; j++) {\n              const start = offset + bufferFloatStride * j;\n              const deltaTangent = deltaTangents[j];\n              if (deltaTangent) {\n                vertices[start] = deltaTangent.x;\n                vertices[start + 1] = deltaTangent.y;\n                vertices[start + 2] = deltaTangent.z;\n              }\n            }\n          }\n          offset += 3;\n        }\n\n        if (indexInBuffer === maxCountSingleBuffer - 1 || i === n - 1) {\n          // @todo: can optimize in setData\n          buffer.setData(vertices, 0, 0, buffer.byteLength / 4);\n        }\n\n        dataChangedFlag.flag = false;\n      }\n    }\n  }\n\n  private _updateTextureArray(vertexCount: number, force: boolean): void {\n    const {\n      _blendShapes: blendShapes,\n      _vertexTexture: vertexTexture,\n      _vertices: vertices,\n      _subDataDirtyFlags: subDataDirtyFlags\n    } = this;\n\n    for (let i = 0, n = blendShapes.length; i < n; i++) {\n      const subDirtyFlag = subDataDirtyFlags[i];\n      const subBlendShapeDataStride = vertexTexture.width * vertexTexture.height * 4;\n      if (force || subDirtyFlag.flag) {\n        const { frames } = blendShapes[i];\n        const frameCount = frames.length;\n        const endFrame = frames[frameCount - 1];\n        if (frameCount > 0 && endFrame.deltaPositions.length !== vertexCount) {\n          throw \"BlendShape frame deltaPositions length must same with mesh vertexCount.\";\n        }\n\n        const { deltaPositions, deltaNormals, deltaTangents } = endFrame;\n        let offset = i * subBlendShapeDataStride;\n        for (let j = 0; j < vertexCount; j++) {\n          const position = deltaPositions[j];\n          vertices[offset] = position.x;\n          vertices[offset + 1] = position.y;\n          vertices[offset + 2] = position.z;\n          offset += 4;\n\n          if (deltaNormals) {\n            const normal = deltaNormals[j];\n            vertices[offset] = normal.x;\n            vertices[offset + 1] = normal.y;\n            vertices[offset + 2] = normal.z;\n            offset += 4;\n          }\n\n          if (deltaTangents) {\n            const tangent = deltaTangents[j];\n            vertices[offset] = tangent.x;\n            vertices[offset + 1] = tangent.y;\n            vertices[offset + 2] = tangent.z;\n            offset += 4;\n          }\n        }\n        subDirtyFlag.flag = false;\n      }\n    }\n    vertexTexture.setPixelBuffer(0, vertices);\n  }\n\n  private _updateLayoutChange(type: number, blendShape: BlendShape): void {\n    const notFirst = this._blendShapeCount > 1;\n    let vertexElementCount = 1;\n    let useBlendNormal = blendShape._useBlendShapeNormal;\n    let useBlendTangent = blendShape._useBlendShapeTangent;\n    if (notFirst) {\n      useBlendNormal &&= this._useBlendNormal;\n      useBlendTangent &&= this._useBlendTangent;\n    }\n\n    useBlendNormal && vertexElementCount++;\n    useBlendTangent && vertexElementCount++;\n\n    this._useBlendNormal = useBlendNormal;\n    this._useBlendTangent = useBlendTangent;\n    this._vertexElementCount = vertexElementCount;\n  }\n\n  private _attributeModeUpdateVertexElement(\n    vertexElements: VertexElement[],\n    vertexBufferStoreInfo: Vector2[],\n    index: number,\n    condensedIndex: number\n  ): void {\n    let elementOffset = this._vertexElementOffset + this._vertexElementCount * condensedIndex;\n\n    let { x: bufferIndex, y: offset } = vertexBufferStoreInfo[index];\n    const vertexElement = vertexElements[elementOffset];\n    vertexElement.bindingIndex = bufferIndex;\n    vertexElement.offset = offset;\n    if (this._useBlendNormal) {\n      const vertexElement = vertexElements[++elementOffset];\n      offset += 12;\n      vertexElement.bindingIndex = bufferIndex;\n      vertexElement.offset = offset;\n    }\n    if (this._useBlendTangent) {\n      const vertexElement = vertexElements[++elementOffset];\n      offset += 12;\n      vertexElement.bindingIndex = bufferIndex;\n      vertexElement.offset = offset;\n    }\n  }\n\n  private _getVertexBufferModeSupportCount(): number {\n    if (this._useBlendNormal && this._useBlendTangent) {\n      return 2;\n    } else {\n      return this._useBlendNormal || this._useBlendTangent ? 4 : 8;\n    }\n  }\n\n  private _filterCondensedBlendShapeWeights(\n    blendShapeWeights: Float32Array,\n    condensedBlendShapeWeights: Float32Array\n  ): void {\n    const condensedWeightsCount = condensedBlendShapeWeights.length;\n    const vertexElements = this._modelMesh._vertexElements;\n    const vertexBufferStoreInfo = this._storeInVertexBufferInfo;\n    let thresholdWeight = Number.POSITIVE_INFINITY;\n    let thresholdIndex: number;\n    for (let i = 0, n = Math.min(blendShapeWeights.length, this._blendShapeCount); i < n; i++) {\n      const weight = blendShapeWeights[i];\n      if (i < condensedWeightsCount) {\n        this._attributeModeUpdateVertexElement(vertexElements, vertexBufferStoreInfo, i, i);\n        condensedBlendShapeWeights[i] = weight;\n        if (weight < thresholdWeight) {\n          thresholdWeight = weight;\n          thresholdIndex = i;\n        }\n      } else if (weight > thresholdWeight) {\n        this._attributeModeUpdateVertexElement(vertexElements, vertexBufferStoreInfo, i, thresholdIndex);\n        condensedBlendShapeWeights[thresholdIndex] = weight;\n\n        thresholdWeight = Number.POSITIVE_INFINITY;\n        for (let j = 0; j < condensedWeightsCount; j++) {\n          const condensedWeight = condensedBlendShapeWeights[j];\n          if (condensedWeight < thresholdWeight) {\n            thresholdWeight = condensedWeight;\n            thresholdIndex = j;\n          }\n        }\n      }\n    }\n  }\n}\n", "/**\n * Vertex attribute types of a vertex in a ModelMesh.\n */\nexport enum VertexAttribute {\n  /** Vertex position. */\n  Position = \"POSITION\",\n  /** Vertex normal. */\n  Normal = \"NORMAL\",\n  /** Vertex color. */\n  Color = \"COLOR_0\",\n  /** Vertex tangent. */\n  Tangent = \"TANGENT\",\n  /** Vertex bone weight. */\n  BoneWeight = \"WEIGHTS_0\",\n  /** Vertex bone index. */\n  BoneIndex = \"JOINTS_0\",\n  /** Vertex UV. */\n  UV = \"TEXCOORD_0\",\n  /** Vertex UV1. */\n  UV1 = \"TEXCOORD_1\",\n  /** Vertex UV2. */\n  UV2 = \"TEXCOORD_2\",\n  /** Vertex UV3. */\n  UV3 = \"TEXCOORD_3\",\n  /** Vertex UV4. */\n  UV4 = \"TEXCOORD_4\",\n  /** Vertex UV5. */\n  UV5 = \"TEXCOORD_5\",\n  /** Vertex UV6. */\n  UV6 = \"TEXCOORD_6\",\n  /** Vertex UV7. */\n  UV7 = \"TEXCOORD_7\"\n}\n", "import { Color, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { Engine } from \"../Engine\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { BufferBindFlag } from \"../graphic/enums/BufferBindFlag\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { IndexBufferBinding } from \"../graphic/IndexBufferBinding\";\nimport { Mesh } from \"../graphic/Mesh\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { BlendShape } from \"./BlendShape\";\nimport { BlendShapeManager } from \"./BlendShapeManager\";\nimport { VertexAttribute } from \"./enums/VertexAttribute\";\n\n/**\n * Mesh containing common vertex elements of the model.\n */\nexport class ModelMesh extends Mesh {\n  private static _tempVec0 = new Vector3();\n  private static _tempVec1 = new Vector3();\n  private static _tempVec2 = new Vector3();\n  private static _tempVec3 = new Vector3();\n  private static _tempVec4 = new Vector3();\n\n  /** @internal */\n  _blendShapeManager: BlendShapeManager;\n\n  private _vertexCount: number = 0;\n  private _accessible: boolean = true;\n  private _verticesFloat32: Float32Array | null = null;\n  private _verticesUint8: Uint8Array | null = null;\n  private _indices: Uint8Array | Uint16Array | Uint32Array | null = null;\n  private _indicesFormat: IndexFormat = null;\n  private _indicesChangeFlag: boolean = false;\n\n  private _positions: Vector3[] | null = null;\n  private _normals: Vector3[] | null = null;\n  private _colors: Color[] | null = null;\n  private _tangents: Vector4[] | null = null;\n  private _uv: Vector2[] | null = null;\n  private _uv1: Vector2[] | null = null;\n  private _uv2: Vector2[] | null = null;\n  private _uv3: Vector2[] | null = null;\n  private _uv4: Vector2[] | null = null;\n  private _uv5: Vector2[] | null = null;\n  private _uv6: Vector2[] | null = null;\n  private _uv7: Vector2[] | null = null;\n  private _boneWeights: Vector4[] | null = null;\n  private _boneIndices: Vector4[] | null = null;\n\n  private _bufferStrides: number[] = [];\n  private _vertexBufferUpdateFlag: number = 0;\n  private _vertexDataUpdateFlag: number = 0;\n  private _vertexElementsUpdate: boolean = false;\n  private _customVertexElements: VertexElement[] = [];\n  private _vertexCountChanged: boolean = false;\n\n  /**\n   * Whether to access data of the mesh.\n   */\n  get accessible(): boolean {\n    return this._accessible;\n  }\n\n  /**\n   * Vertex count of current mesh.\n   */\n  get vertexCount(): number {\n    if (this._vertexDataUpdateFlag & VertexChangedFlags.Position) {\n      let vertexCount = 0;\n      const positionElement = this._vertexElementMap[VertexAttribute.Position];\n      if (positionElement) {\n        const positionBufferBinding = this._vertexBufferBindings[positionElement.bindingIndex];\n        if (positionBufferBinding) {\n          vertexCount = positionBufferBinding.buffer.byteLength / positionBufferBinding.stride;\n        }\n      }\n\n      this._vertexCount = vertexCount;\n      this._vertexDataUpdateFlag &= ~VertexChangedFlags.Position;\n    }\n    return this._vertexCount;\n  }\n\n  /**\n   * Vertex element collection.\n   */\n  get vertexElements(): Readonly<VertexElement[]> {\n    this._updateVertexElements();\n    return this._vertexElements;\n  }\n\n  /**\n   * Vertex buffer binding collection.\n   */\n  get vertexBufferBindings(): Readonly<VertexBufferBinding[]> {\n    return this._vertexBufferBindings;\n  }\n\n  /**\n   * BlendShapes of this ModelMesh.\n   */\n  get blendShapes(): Readonly<BlendShape[]> {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._blendShapeManager._blendShapes;\n  }\n\n  /**\n   * BlendShape count of this ModelMesh.\n   */\n  get blendShapeCount(): number {\n    return this._blendShapeManager._blendShapeCount;\n  }\n\n  /**\n   * Create a model mesh.\n   * @param engine - Engine to which the mesh belongs\n   * @param name - Mesh name\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n    this._blendShapeManager = new BlendShapeManager(engine, this);\n  }\n\n  /**\n   * Set positions for the mesh.\n   * @param positions - The positions for the mesh.\n   */\n  setPositions(positions: Vector3[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    if (!this._positions && !positions) {\n      return;\n    }\n\n    const newVertexCount = positions?.length || 0;\n    this._vertexCountChanged = this._vertexCount != newVertexCount;\n    this._vertexCount = newVertexCount;\n\n    this._vertexElementsUpdate = !!this._positions !== !!positions;\n    this._vertexBufferUpdateFlag |= VertexChangedFlags.Position;\n    this._vertexDataUpdateFlag &= ~VertexChangedFlags.Position;\n    this._positions = positions;\n  }\n\n  /**\n   * Get positions for the mesh.\n   * @remarks Please call the setPositions() method after modification to ensure that the modification takes effect.\n   */\n  getPositions(): Vector3[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    return this._positions;\n  }\n\n  /**\n   * Set per-vertex normals for the mesh.\n   * @param normals - The normals for the mesh.\n   */\n  setNormals(normals: Vector3[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    if (normals) {\n      if (normals.length !== this._vertexCount) {\n        throw \"The array provided needs to be the same size as vertex count.\";\n      }\n    } else if (!this._normals) {\n      return;\n    }\n\n    this._vertexElementsUpdate = !!this._normals !== !!normals;\n    this._vertexBufferUpdateFlag |= VertexChangedFlags.Normal;\n    this._vertexDataUpdateFlag &= ~VertexChangedFlags.Normal;\n    this._normals = normals;\n  }\n\n  /**\n   * Get normals for the mesh.\n   * @remarks Please call the setNormals() method after modification to ensure that the modification takes effect.\n   */\n  getNormals(): Vector3[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._normals;\n  }\n\n  /**\n   * Set per-vertex colors for the mesh.\n   * @param colors - The colors for the mesh.\n   */\n  setColors(colors: Color[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    if (colors) {\n      if (colors.length !== this._vertexCount) {\n        throw \"The array provided needs to be the same size as vertex count.\";\n      }\n    } else if (!this._colors) {\n      return;\n    }\n\n    this._vertexElementsUpdate = !!this._colors !== !!colors;\n    this._vertexBufferUpdateFlag |= VertexChangedFlags.Color;\n    this._vertexDataUpdateFlag &= ~VertexChangedFlags.Color;\n    this._colors = colors;\n  }\n\n  /**\n   * Get colors for the mesh.\n   * @remarks Please call the setColors() method after modification to ensure that the modification takes effect.\n   */\n  getColors(): Color[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._colors;\n  }\n\n  /**\n   * Set per-vertex bone weights for the mesh.\n   * @param boneWeights - The bone weights for the mesh.\n   */\n  setBoneWeights(boneWeights: Vector4[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (boneWeights) {\n      if (boneWeights.length !== this._vertexCount) {\n        throw \"The array provided needs to be the same size as vertex count.\";\n      }\n    } else if (!this._boneWeights) {\n      return;\n    }\n\n    this._vertexElementsUpdate = !!this._boneWeights !== !!boneWeights;\n    this._vertexBufferUpdateFlag |= VertexChangedFlags.BoneWeight;\n    this._vertexDataUpdateFlag &= ~VertexChangedFlags.BoneWeight;\n    this._boneWeights = boneWeights;\n  }\n\n  /**\n   * Get weights for the mesh.\n   * @remarks Please call the setWeights() method after modification to ensure that the modification takes effect.\n   */\n  getBoneWeights(): Vector4[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._boneWeights;\n  }\n\n  /**\n   * Set per-vertex bone indices for the mesh.\n   * @param boneIndices - The bone indices for the mesh.\n   */\n  setBoneIndices(boneIndices: Vector4[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (boneIndices) {\n      if (boneIndices?.length !== this._vertexCount) {\n        throw \"The array provided needs to be the same size as vertex count.\";\n      }\n    } else if (!this._boneIndices) {\n      return;\n    }\n\n    this._vertexElementsUpdate = !!this._boneIndices !== !!boneIndices;\n    this._vertexBufferUpdateFlag |= VertexChangedFlags.BoneIndex;\n    this._vertexDataUpdateFlag &= ~VertexChangedFlags.BoneIndex;\n    this._boneIndices = boneIndices;\n  }\n\n  /**\n   * Get joints for the mesh.\n   * @remarks Please call the setBoneIndices() method after modification to ensure that the modification takes effect.\n   */\n  getBoneIndices(): Vector4[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._boneIndices;\n  }\n\n  /**\n   * Set per-vertex tangents for the mesh.\n   * @param tangents - The tangents for the mesh.\n   */\n  setTangents(tangents: Vector4[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (tangents) {\n      if (tangents.length !== this._vertexCount) {\n        throw \"The array provided needs to be the same size as vertex count.\";\n      }\n    } else if (!this._tangents) {\n      return;\n    }\n\n    this._vertexElementsUpdate = !!this._tangents !== !!tangents;\n    this._vertexBufferUpdateFlag |= VertexChangedFlags.Tangent;\n    this._vertexDataUpdateFlag &= ~VertexChangedFlags.Tangent;\n    this._tangents = tangents;\n  }\n\n  /**\n   * Get tangents for the mesh.\n   * @remarks Please call the setTangents() method after modification to ensure that the modification takes effect.\n   */\n  getTangents(): Vector4[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._tangents;\n  }\n\n  /**\n   * Set per-vertex uv for the mesh.\n   * @param uv - The uv for the mesh.\n   */\n  setUVs(uv: Vector2[] | null): void;\n  /**\n   * Set per-vertex uv for the mesh by channelIndex.\n   * @param uv - The uv for the mesh.\n   * @param channelIndex - The index of uv channels, in [0 ~ 7] range.\n   */\n  setUVs(uv: Vector2[] | null, channelIndex: number): void;\n  setUVs(uv: Vector2[] | null, channelIndex?: number): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (uv && uv.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    channelIndex = channelIndex ?? 0;\n    switch (channelIndex) {\n      case 0:\n        if (!this._uv && !uv) {\n          return;\n        }\n\n        this._vertexElementsUpdate = !!this._uv !== !!uv;\n        this._vertexBufferUpdateFlag |= VertexChangedFlags.UV;\n        this._vertexDataUpdateFlag &= ~VertexChangedFlags.UV;\n        this._uv = uv;\n        break;\n      case 1:\n        if (!this._uv1 && !uv) {\n          return;\n        }\n\n        this._vertexElementsUpdate = !!this._uv1 !== !!uv;\n        this._vertexBufferUpdateFlag |= VertexChangedFlags.UV1;\n        this._vertexDataUpdateFlag &= ~VertexChangedFlags.UV1;\n        this._uv1 = uv;\n        break;\n      case 2:\n        if (!this._uv2 && !uv) {\n          return;\n        }\n\n        this._vertexElementsUpdate = !!this._uv2 !== !!uv;\n        this._vertexBufferUpdateFlag |= VertexChangedFlags.UV2;\n        this._vertexDataUpdateFlag &= ~VertexChangedFlags.UV2;\n        this._uv2 = uv;\n        break;\n      case 3:\n        if (!this._uv3 && !uv) {\n          return;\n        }\n\n        this._vertexElementsUpdate = !!this._uv3 !== !!uv;\n        this._vertexBufferUpdateFlag |= VertexChangedFlags.UV3;\n        this._vertexDataUpdateFlag &= ~VertexChangedFlags.UV3;\n        this._uv3 = uv;\n        break;\n      case 4:\n        if (!this._uv4 && !uv) {\n          return;\n        }\n\n        this._vertexElementsUpdate = !!this._uv4 !== !!uv;\n        this._vertexBufferUpdateFlag |= VertexChangedFlags.UV4;\n        this._vertexDataUpdateFlag &= ~VertexChangedFlags.UV4;\n        this._uv4 = uv;\n        break;\n      case 5:\n        if (!this._uv5 && !uv) {\n          return;\n        }\n\n        this._vertexElementsUpdate = !!this._uv5 !== !!uv;\n        this._vertexBufferUpdateFlag |= VertexChangedFlags.UV5;\n        this._vertexDataUpdateFlag &= ~VertexChangedFlags.UV5;\n        this._uv5 = uv;\n        break;\n      case 6:\n        if (!this._uv6 && !uv) {\n          return;\n        }\n\n        this._vertexElementsUpdate = !!this._uv6 !== !!uv;\n        this._vertexBufferUpdateFlag |= VertexChangedFlags.UV6;\n        this._vertexDataUpdateFlag &= ~VertexChangedFlags.UV6;\n        this._uv6 = uv;\n        break;\n      case 7:\n        if (!this._uv7 && !uv) {\n          return;\n        }\n\n        this._vertexElementsUpdate = !!this._uv7 !== !!uv;\n        this._vertexBufferUpdateFlag |= VertexChangedFlags.UV7;\n        this._vertexDataUpdateFlag &= ~VertexChangedFlags.UV7;\n        this._uv7 = uv;\n        break;\n      default:\n        throw \"The index of channel needs to be in range [0 - 7].\";\n    }\n  }\n\n  /**\n   * Get uv for the mesh.\n   * @remarks Please call the setUV() method after modification to ensure that the modification takes effect.\n   */\n  getUVs(): Vector2[] | null;\n  /**\n   * Get uv for the mesh by channelIndex.\n   * @param channelIndex - The index of uv channels, in [0 ~ 7] range.\n   * @remarks Please call the setUV() method after modification to ensure that the modification takes effect.\n   */\n  getUVs(channelIndex: number): Vector2[] | null;\n  getUVs(channelIndex?: number): Vector2[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    channelIndex = channelIndex ?? 0;\n    switch (channelIndex) {\n      case 0:\n        return this._uv;\n      case 1:\n        return this._uv1;\n      case 2:\n        return this._uv2;\n      case 3:\n        return this._uv3;\n      case 4:\n        return this._uv4;\n      case 5:\n        return this._uv5;\n      case 6:\n        return this._uv6;\n      case 7:\n        return this._uv7;\n    }\n    throw \"The index of channel needs to be in range [0 - 7].\";\n  }\n\n  /**\n   * Set indices for the mesh.\n   * @param indices - The indices for the mesh.\n   */\n  setIndices(indices: Uint8Array | Uint16Array | Uint32Array): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (this._indices !== indices) {\n      this._indices = indices;\n      if (indices instanceof Uint8Array) {\n        this._indicesFormat = IndexFormat.UInt8;\n      } else if (indices instanceof Uint16Array) {\n        this._indicesFormat = IndexFormat.UInt16;\n      } else if (indices instanceof Uint32Array) {\n        this._indicesFormat = IndexFormat.UInt32;\n      }\n    }\n\n    this._indicesChangeFlag = true;\n  }\n\n  /**\n   * Get indices for the mesh.\n   */\n  getIndices(): Uint8Array | Uint16Array | Uint32Array {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._indices;\n  }\n\n  /**\n   * @beta\n   * @todo Update buffer should support custom vertex elements.\n   * Set vertex elements.\n   * @param elements - Vertex element collection\n   */\n  setVertexElements(elements: VertexElement[]): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    const customVertexElements = this._customVertexElements;\n    customVertexElements.length = 0;\n\n    const customVertexElementMap: Record<string, VertexElement> = {};\n    for (let i = 0, n = elements.length; i < n; i++) {\n      const element = elements[i];\n      customVertexElements.push(element);\n      customVertexElementMap[element.semantic] = element;\n    }\n\n    if (customVertexElementMap[VertexAttribute.Position]) {\n      const positions = this.getPositions();\n      positions && (this._vertexBufferUpdateFlag |= VertexChangedFlags.Position);\n    } else {\n      this.setPositions(null);\n    }\n\n    if (customVertexElementMap[VertexAttribute.Normal]) {\n      const normals = this.getNormals();\n      normals && (this._vertexBufferUpdateFlag |= VertexChangedFlags.Normal);\n    } else {\n      this.setNormals(null);\n    }\n\n    if (customVertexElementMap[VertexAttribute.Color]) {\n      const colors = this.getColors();\n      colors && (this._vertexBufferUpdateFlag |= VertexChangedFlags.Color);\n    } else {\n      this.setColors(null);\n    }\n\n    if (customVertexElementMap[VertexAttribute.BoneWeight]) {\n      const boneWeights = this.getBoneWeights();\n      boneWeights && (this._vertexBufferUpdateFlag |= VertexChangedFlags.BoneWeight);\n    } else {\n      this.setBoneWeights(null);\n    }\n\n    if (customVertexElementMap[VertexAttribute.BoneIndex]) {\n      const boneIndices = this.getBoneIndices();\n      boneIndices && (this._vertexBufferUpdateFlag |= VertexChangedFlags.BoneIndex);\n    } else {\n      this.setBoneIndices(null);\n    }\n\n    if (customVertexElementMap[VertexAttribute.Tangent]) {\n      const tangents = this.getTangents();\n      tangents && (this._vertexBufferUpdateFlag |= VertexChangedFlags.Tangent);\n    } else {\n      this.setTangents(null);\n    }\n\n    if (customVertexElementMap[VertexAttribute.UV]) {\n      const uvs = this.getUVs(0);\n      uvs && (this._vertexBufferUpdateFlag |= VertexChangedFlags.UV);\n    } else {\n      this.setUVs(null, 0);\n    }\n\n    if (customVertexElementMap[VertexAttribute.UV1]) {\n      const uv1s = this.getUVs(1);\n      uv1s && (this._vertexBufferUpdateFlag |= VertexChangedFlags.UV1);\n    } else {\n      this.setUVs(null, 1);\n    }\n\n    if (customVertexElementMap[VertexAttribute.UV2]) {\n      const uv2s = this.getUVs(2);\n      uv2s && (this._vertexBufferUpdateFlag |= VertexChangedFlags.UV2);\n    } else {\n      this.setUVs(null, 2);\n    }\n\n    if (customVertexElementMap[VertexAttribute.UV3]) {\n      const uv3s = this.getUVs(3);\n      uv3s && (this._vertexBufferUpdateFlag |= VertexChangedFlags.UV3);\n    } else {\n      this.setUVs(null, 3);\n    }\n\n    if (customVertexElementMap[VertexAttribute.UV4]) {\n      const uv4s = this.getUVs(4);\n      uv4s && (this._vertexBufferUpdateFlag |= VertexChangedFlags.UV4);\n    } else {\n      this.setUVs(null, 4);\n    }\n\n    if (customVertexElementMap[VertexAttribute.UV5]) {\n      const uv5s = this.getUVs(5);\n      uv5s && (this._vertexBufferUpdateFlag |= VertexChangedFlags.UV5);\n    } else {\n      this.setUVs(null, 5);\n    }\n\n    if (customVertexElementMap[VertexAttribute.UV6]) {\n      const uv6s = this.getUVs(6);\n      uv6s && (this._vertexBufferUpdateFlag |= VertexChangedFlags.UV6);\n    } else {\n      this.setUVs(null, 6);\n    }\n\n    if (customVertexElementMap[VertexAttribute.UV7]) {\n      const uv7s = this.getUVs(7);\n      uv7s && (this._vertexBufferUpdateFlag |= VertexChangedFlags.UV7);\n    } else {\n      this.setUVs(null, 7);\n    }\n\n    this._vertexElementsUpdate = true;\n  }\n\n  /**\n   * @beta\n   * Set vertex buffer binding.\n   * @param vertexBufferBindings - Vertex buffer binding\n   * @param index - Vertex buffer index, the default value is 0\n   */\n  setVertexBufferBinding(vertexBufferBindings: VertexBufferBinding, index?: number): void;\n\n  /**\n   * @beta\n   * Set vertex buffer binding.\n   * @param vertexBuffer - Vertex buffer\n   * @param stride - Vertex buffer data stride\n   * @param index - Vertex buffer index, the default value is 0\n   */\n  setVertexBufferBinding(vertexBuffer: Buffer, stride: number, index?: number): void;\n\n  /**\n   * @beta\n   * @todo Use this way to update gpu buffer should can get cpu data(may be should support get data form GPU).\n   * @use `setPosition` and `setVertexBufferBinding` at the same time, thew VertexBufferBinding and Vertex buffer data should right.\n   */\n  setVertexBufferBinding(\n    bufferOrBinding: Buffer | VertexBufferBinding,\n    strideOrFirstIndex: number = 0,\n    index: number = 0\n  ): void {\n    let binding = <VertexBufferBinding>bufferOrBinding;\n    const isBinding = binding.buffer !== undefined;\n    isBinding || (binding = new VertexBufferBinding(<Buffer>bufferOrBinding, strideOrFirstIndex));\n\n    const bindings = this._vertexBufferBindings;\n    bindings.length <= index && (bindings.length = index + 1);\n    this._setVertexBufferBinding(isBinding ? strideOrFirstIndex : index, binding);\n    this._vertexDataUpdateFlag |= VertexChangedFlags.Position;\n  }\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBufferBindings - Vertex buffer binding\n   * @param firstIndex - First vertex buffer index, the default value is 0\n   */\n  setVertexBufferBindings(vertexBufferBindings: VertexBufferBinding[], firstIndex: number = 0): void {\n    const bindings = this._vertexBufferBindings;\n    const count = vertexBufferBindings.length;\n    const needLength = firstIndex + count;\n    bindings.length < needLength && (bindings.length = needLength);\n    for (let i = 0; i < count; i++) {\n      this._setVertexBufferBinding(firstIndex + i, vertexBufferBindings[i]);\n    }\n  }\n\n  /**\n   * Add a BlendShape for this ModelMesh.\n   * @param blendShape - The BlendShape\n   */\n  addBlendShape(blendShape: BlendShape): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    this._blendShapeManager._addBlendShape(blendShape);\n  }\n\n  /**\n   * Clear all BlendShapes.\n   */\n  clearBlendShapes(): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    this._blendShapeManager._clearBlendShapes();\n  }\n\n  /**\n   * Get name of BlendShape by given index.\n   * @param index - The index of BlendShape\n   * @returns The name of BlendShape\n   */\n  getBlendShapeName(index: number): string {\n    if (this._accessible) {\n      const blendShapes = this._blendShapeManager._blendShapes;\n      return blendShapes[index].name;\n    } else {\n      return this._blendShapeManager._blendShapeNames[index];\n    }\n  }\n\n  /**\n   * Upload Mesh Data to GPU.\n   * @param noLongerAccessible - Whether to access data later. If true, you'll never access data anymore (free memory cache)\n   */\n  uploadData(noLongerAccessible: boolean): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    // Update vertex elements\n    this._updateVertexElements();\n\n    // Vertex count change\n    const vertexBuffer = this._vertexBufferBindings[0]?._buffer;\n    if (this._vertexCountChanged) {\n      this._vertexBufferUpdateFlag = VertexChangedFlags.All;\n      vertexBuffer?.destroy();\n\n      const elementCount = this._bufferStrides[0] / 4;\n\n      const vertexFloatCount = elementCount * this.vertexCount;\n      const vertices = new Float32Array(vertexFloatCount);\n      this._verticesFloat32 = vertices;\n      this._verticesUint8 = new Uint8Array(vertices.buffer);\n      this._updateVertices(vertices);\n\n      const bufferUsage = noLongerAccessible ? BufferUsage.Static : BufferUsage.Dynamic;\n      const newVertexBuffer = new Buffer(this._engine, BufferBindFlag.VertexBuffer, vertices, bufferUsage);\n\n      this._setVertexBufferBinding(0, new VertexBufferBinding(newVertexBuffer, elementCount * 4));\n      this._vertexCountChanged = false;\n    } else {\n      if (this._vertexBufferUpdateFlag & VertexChangedFlags.All) {\n        const vertices = this._verticesFloat32;\n        this._updateVertices(vertices);\n        vertexBuffer.setData(vertices);\n      }\n    }\n\n    const { _indices: indices } = this;\n    const indexBuffer = this._indexBufferBinding?._buffer;\n    if (indices) {\n      if (!indexBuffer || indices.byteLength != indexBuffer.byteLength) {\n        indexBuffer?.destroy();\n        const newIndexBuffer = new Buffer(this._engine, BufferBindFlag.IndexBuffer, indices);\n        this._setIndexBufferBinding(new IndexBufferBinding(newIndexBuffer, this._indicesFormat));\n        this._indicesChangeFlag = false;\n      } else if (this._indicesChangeFlag) {\n        indexBuffer.setData(indices);\n        if (this._indexBufferBinding._format !== this._indicesFormat) {\n          this._setIndexBufferBinding(new IndexBufferBinding(indexBuffer, this._indicesFormat));\n        }\n        this._indicesChangeFlag = false;\n      }\n    } else if (indexBuffer) {\n      indexBuffer.destroy();\n      this._setIndexBufferBinding(null);\n    }\n\n    const { _blendShapeManager: blendShapeManager } = this;\n    blendShapeManager._blendShapeCount > 0 && blendShapeManager._update(this._vertexCountChanged, noLongerAccessible);\n\n    if (noLongerAccessible) {\n      this._accessible = false;\n      this._releaseCache();\n    }\n  }\n\n  /**\n   * Calculate mesh tangent.\n   * @remark need to set positions(with or not with indices), normals, uv before calculation.\n   * @remark based on http://foundationsofgameenginedev.com/FGED2-sample.pdf\n   */\n  calculateTangents(): void {\n    if (!this._normals || !this._uv) {\n      throw \"Set normal and uv before calculation.\";\n    }\n    const { _indices: indices, _positions: positions, _normals: normals, _uv: uvs, _vertexCount: vertexCount } = this;\n    const { _tempVec0: e1, _tempVec1: e2, _tempVec2: t, _tempVec3: b, _tempVec4: temp } = ModelMesh;\n    const triangleCount = indices ? indices.length / 3 : positions.length / 3;\n    const tangents = new Array<Vector4>(vertexCount);\n    const biTangents = new Array<Vector3>(vertexCount);\n    for (let i = 0; i < vertexCount; i++) {\n      tangents[i] = new Vector4();\n      biTangents[i] = new Vector3();\n    }\n\n    // Calculate tangent and bi-tangent for each triangle and add to all three vertices.\n    for (let k = 0; k < triangleCount; k++) {\n      let i0 = 3 * k;\n      let i1 = 3 * k + 1;\n      let i2 = 3 * k + 2;\n      if (indices) {\n        i0 = indices[i0];\n        i1 = indices[i1];\n        i2 = indices[i2];\n      }\n\n      const p0 = positions[i0];\n      const p1 = positions[i1];\n      const p2 = positions[i2];\n      const w0 = uvs[i0];\n      const w1 = uvs[i1];\n      const w2 = uvs[i2];\n\n      Vector3.subtract(p1, p0, e1);\n      Vector3.subtract(p2, p0, e2);\n      const x1 = w1.x - w0.x;\n      const x2 = w2.x - w0.x;\n      const y1 = w1.y - w0.y;\n      const y2 = w2.y - w0.y;\n      const r = 1.0 / (x1 * y2 - x2 * y1);\n\n      Vector3.scale(e1, y2 * r, t);\n      Vector3.scale(e2, y1 * r, temp);\n      Vector3.subtract(t, temp, t);\n      Vector3.scale(e2, x1 * r, b);\n      Vector3.scale(e1, x2 * r, temp);\n      Vector3.subtract(b, temp, b);\n\n      let tangent = tangents[i0];\n      tangent.set(tangent.x + t.x, tangent.y + t.y, tangent.z + t.z, 1.0);\n\n      tangent = tangents[i1];\n      tangent.set(tangent.x + t.x, tangent.y + t.y, tangent.z + t.z, 1.0);\n\n      tangent = tangents[i2];\n      tangent.set(tangent.x + t.x, tangent.y + t.y, tangent.z + t.z, 1.0);\n\n      biTangents[i0].add(b);\n      biTangents[i1].add(b);\n      biTangents[i2].add(b);\n    }\n\n    // Orthonormalize each tangent and calculate the handedness.\n    for (let i = 0; i < vertexCount; i++) {\n      const n = normals[i];\n      const b = biTangents[i];\n      const tangent = tangents[i];\n      t.set(tangent.x, tangent.y, tangent.z);\n\n      Vector3.cross(t, b, temp);\n      const w = Vector3.dot(temp, n) > 0.0 ? 1 : -1;\n      Vector3.scale(n, Vector3.dot(t, n), temp);\n      Vector3.subtract(t, temp, t);\n      t.normalize();\n      tangent.set(t.x, t.y, t.z, w);\n    }\n    this.setTangents(tangents);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onDestroy(): void {\n    super._onDestroy();\n    this._accessible && this._releaseCache();\n  }\n\n  private _supplementaryVertexElements(): void {\n    this._clearVertexElements();\n\n    const customVertexElements = this._customVertexElements;\n    for (let i = 0, n = customVertexElements.length; i < n; i++) {\n      this._addVertexElement(customVertexElements[i]);\n    }\n\n    const vertexElementMap = this._vertexElementMap;\n    if (this._positions && !vertexElementMap[VertexAttribute.Position]) {\n      this._insertVertexAttribute(VertexAttribute.Position);\n    } else {\n    }\n\n    if (this._normals && !vertexElementMap[VertexAttribute.Normal]) {\n      this._insertVertexAttribute(VertexAttribute.Normal);\n    }\n\n    if (this._colors && !vertexElementMap[VertexAttribute.Color]) {\n      this._insertVertexAttribute(VertexAttribute.Color);\n    }\n\n    if (this._boneWeights && !vertexElementMap[VertexAttribute.BoneWeight]) {\n      this._insertVertexAttribute(VertexAttribute.BoneWeight);\n    }\n\n    if (this._boneIndices && !vertexElementMap[VertexAttribute.BoneIndex]) {\n      this._insertVertexAttribute(VertexAttribute.BoneIndex);\n    }\n\n    if (this._tangents && !vertexElementMap[VertexAttribute.Tangent]) {\n      this._insertVertexAttribute(VertexAttribute.Tangent);\n    }\n\n    if (this._uv && !vertexElementMap[VertexAttribute.UV]) {\n      this._insertVertexAttribute(VertexAttribute.UV);\n    }\n\n    if (this._uv1 && !vertexElementMap[VertexAttribute.UV1]) {\n      this._insertVertexAttribute(VertexAttribute.UV1);\n    }\n\n    if (this._uv2 && !vertexElementMap[VertexAttribute.UV2]) {\n      this._insertVertexAttribute(VertexAttribute.UV2);\n    }\n\n    if (this._uv3 && !vertexElementMap[VertexAttribute.UV3]) {\n      this._insertVertexAttribute(VertexAttribute.UV3);\n    }\n\n    if (this._uv4 && !vertexElementMap[VertexAttribute.UV4]) {\n      this._insertVertexAttribute(VertexAttribute.UV4);\n    }\n\n    if (this._uv5 && !vertexElementMap[VertexAttribute.UV5]) {\n      this._insertVertexAttribute(VertexAttribute.UV5);\n    }\n\n    if (this._uv6 && !vertexElementMap[VertexAttribute.UV6]) {\n      this._insertVertexAttribute(VertexAttribute.UV6);\n    }\n\n    if (this._uv7 && !vertexElementMap[VertexAttribute.UV7]) {\n      this._insertVertexAttribute(VertexAttribute.UV7);\n    }\n  }\n\n  private _updateVertexElements(): void {\n    const bsManager = this._blendShapeManager;\n    const bsAttributeUpdate = !bsManager._useTextureMode() && bsManager._vertexElementsNeedUpdate();\n\n    if (this._vertexElementsUpdate || bsAttributeUpdate) {\n      this._supplementaryVertexElements();\n\n      if (bsAttributeUpdate && bsManager._blendShapeCount > 0) {\n        // Reserve at least 1 placeholder to save the built-in vertex buffer\n        bsManager._setAttributeModeOffsetInfo(this._vertexElements.length, this._vertexBufferBindings.length || 1);\n        bsManager._addVertexElements(this);\n      }\n      this._vertexElementsUpdate = false;\n    }\n  }\n\n  private _updateVertices(vertices: Float32Array): void {\n    // prettier-ignore\n    const { _bufferStrides,_vertexCount, _positions, _normals, _colors, _vertexBufferUpdateFlag: _vertexChangeFlag, _boneWeights, _boneIndices, _tangents, _uv, _uv1, _uv2, _uv3, _uv4, _uv5, _uv6, _uv7 } = this;\n    const _vertexStrideFloat = _bufferStrides[0] / 4;\n\n    if (_vertexChangeFlag & VertexChangedFlags.Position) {\n      for (let i = 0; i < _vertexCount; i++) {\n        const start = _vertexStrideFloat * i;\n        const position = _positions[i];\n        vertices[start] = position.x;\n        vertices[start + 1] = position.y;\n        vertices[start + 2] = position.z;\n      }\n    }\n\n    let offset = 3;\n\n    if (_normals) {\n      if (_vertexChangeFlag & VertexChangedFlags.Normal) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const normal = _normals[i];\n          if (normal) {\n            vertices[start] = normal.x;\n            vertices[start + 1] = normal.y;\n            vertices[start + 2] = normal.z;\n          }\n        }\n      }\n      offset += 3;\n    }\n\n    if (_colors) {\n      if (_vertexChangeFlag & VertexChangedFlags.Color) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const color = _colors[i];\n          if (color) {\n            vertices[start] = color.r;\n            vertices[start + 1] = color.g;\n            vertices[start + 2] = color.b;\n            vertices[start + 3] = color.a;\n          }\n        }\n      }\n      offset += 4;\n    }\n\n    if (_boneWeights) {\n      if (_vertexChangeFlag & VertexChangedFlags.BoneWeight) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const weight = _boneWeights[i];\n          if (weight) {\n            vertices[start] = weight.x;\n            vertices[start + 1] = weight.y;\n            vertices[start + 2] = weight.z;\n            vertices[start + 3] = weight.w;\n          }\n        }\n      }\n      offset += 4;\n    }\n\n    if (_boneIndices) {\n      if (_vertexChangeFlag & VertexChangedFlags.BoneIndex) {\n        const { _verticesUint8 } = this;\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const joint = _boneIndices[i];\n          if (joint) {\n            const internalStart = start * 4;\n            _verticesUint8[internalStart] = joint.x;\n            _verticesUint8[internalStart + 1] = joint.y;\n            _verticesUint8[internalStart + 2] = joint.z;\n            _verticesUint8[internalStart + 3] = joint.w;\n          }\n        }\n      }\n      offset += 1;\n    }\n\n    if (_tangents) {\n      if (_vertexChangeFlag & VertexChangedFlags.Tangent) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const tangent = _tangents[i];\n          if (tangent) {\n            vertices[start] = tangent.x;\n            vertices[start + 1] = tangent.y;\n            vertices[start + 2] = tangent.z;\n            vertices[start + 3] = tangent.w;\n          }\n        }\n      }\n      offset += 4;\n    }\n    if (_uv) {\n      if (_vertexChangeFlag & VertexChangedFlags.UV) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const uv = _uv[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv1) {\n      if (_vertexChangeFlag & VertexChangedFlags.UV1) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const uv = _uv1[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv2) {\n      if (_vertexChangeFlag & VertexChangedFlags.UV2) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const uv = _uv2[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv3) {\n      if (_vertexChangeFlag & VertexChangedFlags.UV3) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const uv = _uv3[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv4) {\n      if (_vertexChangeFlag & VertexChangedFlags.UV4) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const uv = _uv4[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv5) {\n      if (_vertexChangeFlag & VertexChangedFlags.UV5) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const uv = _uv5[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv6) {\n      if (_vertexChangeFlag & VertexChangedFlags.UV6) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const uv = _uv6[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv7) {\n      if (_vertexChangeFlag & VertexChangedFlags.UV7) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const uv = _uv7[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    this._vertexBufferUpdateFlag = 0;\n  }\n\n  private _insertVertexAttribute(vertexAttribute: VertexAttribute): void {\n    const format = this._getAttributeFormat(vertexAttribute);\n    const needByteLength = this._getAttributeByteLength(vertexAttribute);\n    const vertexElements = this._vertexElements;\n\n    let i = 0;\n    let lastOffset = 0;\n    for (let n = vertexElements.length; i < n; i++) {\n      const vertexElement = vertexElements[i];\n      if (vertexElement.bindingIndex == 0) {\n        if (vertexElement.offset - lastOffset >= needByteLength) {\n          break;\n        }\n        lastOffset = vertexElement.offset + this._getAttributeByteLength(vertexElement.semantic);\n      }\n    }\n    this._insertVertexElement(i, new VertexElement(vertexAttribute, lastOffset, format, 0));\n    this._bufferStrides[0] = lastOffset + needByteLength;\n  }\n\n  private _getAttributeFormat(attribute: VertexAttribute): VertexElementFormat {\n    switch (attribute) {\n      case VertexAttribute.Position:\n        return VertexElementFormat.Vector3;\n      case VertexAttribute.Normal:\n        return VertexElementFormat.Vector3;\n      case VertexAttribute.Color:\n        return VertexElementFormat.Vector4;\n      case VertexAttribute.BoneWeight:\n        return VertexElementFormat.Vector4;\n      case VertexAttribute.BoneIndex:\n        return VertexElementFormat.UByte4;\n      case VertexAttribute.Tangent:\n        return VertexElementFormat.Vector4;\n      case VertexAttribute.UV:\n      case VertexAttribute.UV1:\n      case VertexAttribute.UV2:\n      case VertexAttribute.UV3:\n      case VertexAttribute.UV4:\n      case VertexAttribute.UV5:\n      case VertexAttribute.UV6:\n      case VertexAttribute.UV7:\n        return VertexElementFormat.Vector2;\n    }\n  }\n\n  private _getAttributeByteLength(attribute: string): number {\n    switch (attribute) {\n      case VertexAttribute.Position:\n        return 12;\n      case VertexAttribute.Normal:\n        return 12;\n      case VertexAttribute.Color:\n        return 16;\n      case VertexAttribute.BoneWeight:\n        return 16;\n      case VertexAttribute.BoneIndex:\n        return 4;\n      case VertexAttribute.Tangent:\n        return 16;\n      case VertexAttribute.UV:\n      case VertexAttribute.UV1:\n      case VertexAttribute.UV2:\n      case VertexAttribute.UV3:\n      case VertexAttribute.UV4:\n      case VertexAttribute.UV5:\n      case VertexAttribute.UV6:\n      case VertexAttribute.UV7:\n        return 8;\n    }\n  }\n\n  private _releaseCache(): void {\n    this._verticesUint8 = null;\n    this._indices = null;\n    this._verticesFloat32 = null;\n    this._positions = null;\n    this._tangents = null;\n    this._normals = null;\n    this._colors = null;\n    this._uv = null;\n    this._uv1 = null;\n    this._uv2 = null;\n    this._uv3 = null;\n    this._uv4 = null;\n    this._uv5 = null;\n    this._uv6 = null;\n    this._uv7 = null;\n    this._blendShapeManager._releaseMemoryCache();\n  }\n}\n\nenum VertexChangedFlags {\n  Position = 0x1,\n  Normal = 0x2,\n  Color = 0x4,\n  Tangent = 0x8,\n  BoneWeight = 0x10,\n  BoneIndex = 0x20,\n  UV = 0x40,\n  UV1 = 0x80,\n  UV2 = 0x100,\n  UV3 = 0x200,\n  UV4 = 0x400,\n  UV5 = 0x800,\n  UV6 = 0x1000,\n  UV7 = 0x2000,\n  All = 0xffff\n}\n", "import { Matrix } from \"@galacean/engine-math\";\nimport { EngineObject } from \"../base/EngineObject\";\nimport { Entity } from \"../Entity\";\n\n/**\n * Mesh skin data, equal glTF skins define\n */\nexport class Skin extends EngineObject {\n  public inverseBindMatrices: Matrix[];\n  public joints: string[];\n  public skeleton: string;\n  /**\n   * Constructor of skin\n   * @param name - name\n   */\n  constructor(public name: string) {\n    super(null);\n    this.inverseBindMatrices = []; // inverse bind matrix array\n    this.joints = []; // joints name array, element type: string\n    this.skeleton = \"none\"; // root bone name\n  }\n}\n", "import { BoundingBox } from \"@galacean/engine-math\";\nimport { Entity } from \"../Entity\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { Renderer, RendererUpdateFlags } from \"../Renderer\";\nimport { Logger } from \"../base/Logger\";\nimport { ignoreClone } from \"../clone/CloneManager\";\nimport { ICustomClone } from \"../clone/ComponentCloner\";\nimport { Mesh, MeshModifyFlags } from \"../graphic/Mesh\";\nimport { Shader } from \"../shader/Shader\";\n\n/**\n * MeshRenderer Component.\n */\nexport class MeshRenderer extends Renderer implements ICustomClone {\n  private static _uvMacro = Shader.getMacroByName(\"O3_HAS_UV\");\n  private static _uv1Macro = Shader.getMacroByName(\"O3_HAS_UV1\");\n  private static _normalMacro = Shader.getMacroByName(\"O3_HAS_NORMAL\");\n  private static _tangentMacro = Shader.getMacroByName(\"O3_HAS_TANGENT\");\n  private static _vertexColorMacro = Shader.getMacroByName(\"O3_HAS_VERTEXCOLOR\");\n\n  private _enableVertexColor: boolean = false;\n\n  /** @internal */\n  @ignoreClone\n  _mesh: Mesh;\n\n  /**\n   * Mesh assigned to the renderer.\n   */\n  get mesh(): Mesh {\n    return this._mesh;\n  }\n\n  set mesh(value: Mesh) {\n    if (this._mesh !== value) {\n      this._setMesh(value);\n    }\n  }\n\n  /**\n   * Whether enable vertex color.\n   */\n  get enableVertexColor(): boolean {\n    return this._enableVertexColor;\n  }\n\n  set enableVertexColor(value: boolean) {\n    if (value !== this._enableVertexColor) {\n      this._dirtyUpdateFlag |= MeshRendererUpdateFlags.VertexElementMacro;\n      this._enableVertexColor = value;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._onMeshChanged = this._onMeshChanged.bind(this);\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onDestroy(): void {\n    super._onDestroy();\n    const mesh = this._mesh;\n    if (mesh && !mesh.destroyed) {\n      mesh._addRefCount(-1);\n      this._mesh = null;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: MeshRenderer): void {\n    target.mesh = this._mesh;\n  }\n\n  /**\n   * @override\n   */\n  protected _updateBounds(worldBounds: BoundingBox): void {\n    const mesh = this._mesh;\n    if (mesh) {\n      const localBounds = mesh.bounds;\n      const worldMatrix = this._entity.transform.worldMatrix;\n      BoundingBox.transform(localBounds, worldMatrix, worldBounds);\n    } else {\n      worldBounds.min.set(0, 0, 0);\n      worldBounds.max.set(0, 0, 0);\n    }\n  }\n\n  /**\n   * @override\n   */\n  protected _render(context: RenderContext): void {\n    const mesh = this._mesh;\n    if (mesh) {\n      if (this._dirtyUpdateFlag & MeshRendererUpdateFlags.VertexElementMacro) {\n        const shaderData = this.shaderData;\n        const vertexElements = mesh._vertexElements;\n\n        shaderData.disableMacro(MeshRenderer._uvMacro);\n        shaderData.disableMacro(MeshRenderer._uv1Macro);\n        shaderData.disableMacro(MeshRenderer._normalMacro);\n        shaderData.disableMacro(MeshRenderer._tangentMacro);\n        shaderData.disableMacro(MeshRenderer._vertexColorMacro);\n\n        for (let i = 0, n = vertexElements.length; i < n; i++) {\n          switch (vertexElements[i].semantic) {\n            case \"TEXCOORD_0\":\n              shaderData.enableMacro(MeshRenderer._uvMacro);\n              break;\n            case \"TEXCOORD_1\":\n              shaderData.enableMacro(MeshRenderer._uv1Macro);\n              break;\n            case \"NORMAL\":\n              shaderData.enableMacro(MeshRenderer._normalMacro);\n              break;\n            case \"TANGENT\":\n              shaderData.enableMacro(MeshRenderer._tangentMacro);\n              break;\n            case \"COLOR_0\":\n              this.enableVertexColor && shaderData.enableMacro(MeshRenderer._vertexColorMacro);\n              break;\n          }\n        }\n        this._dirtyUpdateFlag &= ~MeshRendererUpdateFlags.VertexElementMacro;\n      }\n\n      const subMeshes = mesh.subMeshes;\n      const renderPipeline = context.camera._renderPipeline;\n      const renderElementPool = this._engine._renderElementPool;\n      for (let i = 0, n = subMeshes.length; i < n; i++) {\n        const material = this._materials[i];\n        if (material) {\n          const renderStates = material.renderStates;\n          const shaderPasses = material.shader.passes;\n          for (let j = 0, m = shaderPasses.length; j < m; j++) {\n            const element = renderElementPool.getFromPool();\n            element.setValue(this, mesh, subMeshes[i], material, renderStates[j], shaderPasses[j]);\n            renderPipeline.pushPrimitive(element);\n          }\n        }\n      }\n    } else {\n      Logger.error(\"mesh is null.\");\n    }\n  }\n\n  private _setMesh(mesh: Mesh): void {\n    const lastMesh = this._mesh;\n    if (lastMesh) {\n      lastMesh._addRefCount(-1);\n      lastMesh._updateFlagManager.removeListener(this._onMeshChanged);\n    }\n    if (mesh) {\n      mesh._addRefCount(1);\n      mesh._updateFlagManager.addListener(this._onMeshChanged);\n      this._dirtyUpdateFlag |= MeshRendererUpdateFlags.All;\n    }\n    this._mesh = mesh;\n  }\n\n  @ignoreClone\n  private _onMeshChanged(type: MeshModifyFlags): void {\n    type & MeshModifyFlags.Bounds && (this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume);\n    type & MeshModifyFlags.VertexElements && (this._dirtyUpdateFlag |= MeshRendererUpdateFlags.VertexElementMacro);\n  }\n}\n\n/**\n * @remarks Extends `RendererUpdateFlag`.\n */\nenum MeshRendererUpdateFlags {\n  /** VertexElementMacro. */\n  VertexElementMacro = 0x2,\n  /** All. */\n  All = 0x3\n}\n", "import { Matrix } from \"@galacean/engine-math\";\n\nexport class Utils {\n  /**\n   * @internal\n   */\n  static _floatMatrixMultiply(left: Matrix, re: Float32Array, rOffset: number, oe: Float32Array, offset: number): void {\n    const le = left.elements;\n\n    // prettier-ignore\n    const l11 = le[0], l12 = le[1], l13 = le[2], l14 = le[3],\n    l21 = le[4], l22 = le[5], l23 = le[6], l24 = le[7],\n    l31 = le[8], l32 = le[9], l33 = le[10], l34 = le[11],\n    l41 = le[12], l42 = le[13], l43 = le[14], l44 = le[15];\n\n    // prettier-ignore\n    const r11 = re[rOffset], r12 = re[rOffset + 1], r13 = re[rOffset + 2], r14 = re[rOffset + 3],\n    r21 = re[rOffset + 4], r22 = re[rOffset + 5], r23 = re[rOffset + 6], r24 = re[rOffset + 7],\n    r31 = re[rOffset + 8], r32 = re[rOffset + 9], r33 = re[rOffset + 10], r34 = re[rOffset + 11],\n    r41 = re[rOffset + 12], r42 = re[rOffset + 13], r43 = re[rOffset + 14], r44 = re[rOffset + 15];\n\n    oe[offset] = l11 * r11 + l21 * r12 + l31 * r13 + l41 * r14;\n    oe[offset + 1] = l12 * r11 + l22 * r12 + l32 * r13 + l42 * r14;\n    oe[offset + 2] = l13 * r11 + l23 * r12 + l33 * r13 + l43 * r14;\n    oe[offset + 3] = l14 * r11 + l24 * r12 + l34 * r13 + l44 * r14;\n\n    oe[offset + 4] = l11 * r21 + l21 * r22 + l31 * r23 + l41 * r24;\n    oe[offset + 5] = l12 * r21 + l22 * r22 + l32 * r23 + l42 * r24;\n    oe[offset + 6] = l13 * r21 + l23 * r22 + l33 * r23 + l43 * r24;\n    oe[offset + 7] = l14 * r21 + l24 * r22 + l34 * r23 + l44 * r24;\n\n    oe[offset + 8] = l11 * r31 + l21 * r32 + l31 * r33 + l41 * r34;\n    oe[offset + 9] = l12 * r31 + l22 * r32 + l32 * r33 + l42 * r34;\n    oe[offset + 10] = l13 * r31 + l23 * r32 + l33 * r33 + l43 * r34;\n    oe[offset + 11] = l14 * r31 + l24 * r32 + l34 * r33 + l44 * r34;\n\n    oe[offset + 12] = l11 * r41 + l21 * r42 + l31 * r43 + l41 * r44;\n    oe[offset + 13] = l12 * r41 + l22 * r42 + l32 * r43 + l42 * r44;\n    oe[offset + 14] = l13 * r41 + l23 * r42 + l33 * r43 + l43 * r44;\n    oe[offset + 15] = l14 * r41 + l24 * r42 + l34 * r43 + l44 * r44;\n  }\n\n  /**\n   * @internal\n   * Simplify lodash get: https://github.com/lodash/lodash/blob/master/get.js.\n   * @param target - The object to query.\n   * @param path - The path of the property to get.\n   * @returns Returns the resolved value.\n   */\n  static _reflectGet(target: Object, path: string) {\n    const pathArr = this._stringToPath(path);\n\n    let object = target;\n    let index = 0;\n    const length = pathArr.length;\n\n    while (object != null && index < length) {\n      object = object[pathArr[index++]];\n    }\n    return index && index == length ? object : undefined;\n  }\n\n  private static _stringToPath(string): string[] {\n    const result = [];\n    if (string.charCodeAt(0) === charCodeOfDot) {\n      result.push(\"\");\n    }\n    string.replace(rePropName, (match, expression, quote, subString) => {\n      let key = match;\n      if (quote) {\n        key = subString.replace(reEscapeChar, \"$1\");\n      } else if (expression) {\n        key = expression.trim();\n      }\n      result.push(key);\n    });\n    return result;\n  }\n}\n\nconst charCodeOfDot = \".\".charCodeAt(0);\nconst reEscapeChar = /\\\\(\\\\)?/g;\nconst rePropName = RegExp(\n  // Match anything that isn't a dot or bracket.\n  \"[^.[\\\\]]+\" +\n    \"|\" +\n    // Or match property names within brackets.\n    \"\\\\[(?:\" +\n    // Match a non-string expression.\n    \"([^\\\"'][^[]*)\" +\n    \"|\" +\n    // Or match strings (supports escaping characters).\n    \"([\\\"'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2\" +\n    \")\\\\]\" +\n    \"|\" +\n    // Or match \"\" as the space between consecutive dots or empty brackets.\n    \"(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))\",\n  \"g\"\n);\n", "import { BoundingBox, Matrix, Vector2 } from \"@galacean/engine-math\";\nimport { Entity } from \"../Entity\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { RendererUpdateFlags } from \"../Renderer\";\nimport { Utils } from \"../Utils\";\nimport { Logger } from \"../base/Logger\";\nimport { ignoreClone } from \"../clone/CloneManager\";\nimport { Shader } from \"../shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { TextureFilterMode } from \"../texture/enums/TextureFilterMode\";\nimport { TextureFormat } from \"../texture/enums/TextureFormat\";\nimport { MeshRenderer } from \"./MeshRenderer\";\nimport { ModelMesh } from \"./ModelMesh\";\nimport { Skin } from \"./Skin\";\n\n/**\n * SkinnedMeshRenderer.\n */\nexport class SkinnedMeshRenderer extends MeshRenderer {\n  private static _tempMatrix = new Matrix();\n  private static _jointCountProperty = Shader.getPropertyByName(\"u_jointCount\");\n  private static _jointSamplerProperty = Shader.getPropertyByName(\"u_jointSampler\");\n  private static _jointMatrixProperty = Shader.getPropertyByName(\"u_jointMatrix\");\n\n  @ignoreClone\n  private _supportSkinning: boolean = false;\n  @ignoreClone\n  private _hasInitSkin: boolean = false;\n  @ignoreClone\n  private _jointDataCreateCache: Vector2 = new Vector2(-1, -1);\n  private _skin: Skin;\n  @ignoreClone\n  private _blendShapeWeights: Float32Array;\n  @ignoreClone\n  private _maxVertexUniformVectors: number;\n  @ignoreClone\n  private _rootBone: Entity;\n  @ignoreClone\n  private _localBounds: BoundingBox = new BoundingBox();\n  @ignoreClone\n  private _jointMatrices: Float32Array;\n  @ignoreClone\n  private _jointTexture: Texture2D;\n  @ignoreClone\n  private _jointEntities: Entity[];\n\n  /** @internal */\n  @ignoreClone\n  _condensedBlendShapeWeights: Float32Array;\n\n  /**\n   * The weights of the BlendShapes.\n   * @remarks Array index is BlendShape index.\n   */\n  get blendShapeWeights(): Float32Array {\n    this._checkBlendShapeWeightLength();\n    return this._blendShapeWeights;\n  }\n\n  set blendShapeWeights(value: Float32Array) {\n    this._checkBlendShapeWeightLength();\n    const blendShapeWeights = this._blendShapeWeights;\n    if (value.length <= blendShapeWeights.length) {\n      blendShapeWeights.set(value);\n    } else {\n      for (let i = 0, n = blendShapeWeights.length; i < n; i++) {\n        blendShapeWeights[i] = value[i];\n      }\n    }\n  }\n\n  /**\n   * Skin Object.\n   */\n  get skin(): Skin {\n    return this._skin;\n  }\n\n  set skin(value: Skin) {\n    if (this._skin !== value) {\n      this._skin = value;\n      this._hasInitSkin = false;\n    }\n  }\n\n  /**\n   * Local bounds.\n   */\n  get localBounds(): BoundingBox {\n    return this._localBounds;\n  }\n\n  set localBounds(value: BoundingBox) {\n    if (this._localBounds !== value) {\n      this._localBounds.copyFrom(value);\n    }\n  }\n\n  /**\n   * Root bone.\n   */\n  get rootBone(): Entity {\n    return this._rootBone;\n  }\n\n  set rootBone(value: Entity) {\n    this._skin.skeleton = value.name;\n    this._hasInitSkin = false;\n    this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._skin = null;\n\n    const rhi = this.entity.engine._hardwareRenderer;\n    let maxVertexUniformVectors = rhi.renderStates.getParameter(rhi.gl.MAX_VERTEX_UNIFORM_VECTORS);\n\n    // Limit size to 256 to avoid some problem:\n    // For renderer is \"Apple GPU\", when uniform is large than 256 the skeleton matrix array access in shader very slow in Safari or WKWebview. This may be a apple bug, Chrome and Firefox is OK!\n    // For renderer is \"ANGLE (AMD, AMD Radeon(TM) Graphics Direct3011 vs_5_0 ps_5_0, D3011)\", compile shader si very slow because of max uniform is 4096.\n    maxVertexUniformVectors = Math.min(maxVertexUniformVectors, rhi._options._maxAllowSkinUniformVectorCount);\n\n    this._maxVertexUniformVectors = maxVertexUniformVectors;\n\n    this._onLocalBoundsChanged = this._onLocalBoundsChanged.bind(this);\n\n    const localBounds = this._localBounds;\n    // @ts-ignore\n    localBounds.min._onValueChanged = this._onLocalBoundsChanged;\n    // @ts-ignore\n    localBounds.max._onValueChanged = this._onLocalBoundsChanged;\n  }\n\n  /**\n   * @internal\n   */\n  update(): void {\n    if (!this._hasInitSkin) {\n      this._initSkin();\n      this._hasInitSkin = true;\n    }\n\n    if (this._supportSkinning) {\n      const ibms = this._skin.inverseBindMatrices;\n      const worldToLocal = this._rootBone.getInvModelMatrix();\n      const { _jointEntities: joints, _jointMatrices: jointMatrices } = this;\n\n      for (let i = joints.length - 1; i >= 0; i--) {\n        const joint = joints[i];\n        const offset = i * 16;\n        if (joint) {\n          Utils._floatMatrixMultiply(joint.transform.worldMatrix, ibms[i].elements, 0, jointMatrices, offset);\n        } else {\n          jointMatrices.set(ibms[i].elements, offset);\n        }\n        Utils._floatMatrixMultiply(worldToLocal, jointMatrices, offset, jointMatrices, offset);\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  protected _updateShaderData(context: RenderContext): void {\n    const entity = this.entity;\n\n    const shaderData = this.shaderData;\n\n    const mesh = <ModelMesh>this.mesh;\n    const blendShapeManager = mesh._blendShapeManager;\n    blendShapeManager._updateShaderData(shaderData, this);\n\n    const skin = this._skin;\n    if (skin) {\n      const bsUniformOccupiesCount = blendShapeManager._uniformOccupiesCount;\n      const jointCount = skin.joints.length;\n      const jointDataCreateCache = this._jointDataCreateCache;\n      const jointCountChange = jointCount !== jointDataCreateCache.x;\n\n      if (jointCountChange || bsUniformOccupiesCount !== jointDataCreateCache.y) {\n        // directly use max joint count to avoid shader recompile\n        // @TODO: different shader type should use different count, not always 44\n        const remainUniformJointCount = Math.ceil((this._maxVertexUniformVectors - (44 + bsUniformOccupiesCount)) / 4);\n\n        if (jointCount > remainUniformJointCount) {\n          const engine = this.engine;\n          if (engine._hardwareRenderer.canIUseMoreJoints) {\n            if (jointCountChange) {\n              this._jointTexture?.destroy();\n              this._jointTexture = new Texture2D(engine, 4, jointCount, TextureFormat.R32G32B32A32, false);\n              this._jointTexture.filterMode = TextureFilterMode.Point;\n            }\n            shaderData.disableMacro(\"O3_JOINTS_NUM\");\n            shaderData.enableMacro(\"O3_USE_JOINT_TEXTURE\");\n            shaderData.setTexture(SkinnedMeshRenderer._jointSamplerProperty, this._jointTexture);\n            this._supportSkinning = true;\n          } else {\n            this._supportSkinning = false;\n            this._jointTexture?.destroy();\n            shaderData.disableMacro(\"O3_HAS_SKIN\");\n            Logger.warn(\n              `component's joints count(${jointCount}) greater than device's MAX_VERTEX_UNIFORM_VECTORS number ${this._maxVertexUniformVectors}, and don't support jointTexture in this device. suggest joint count less than ${remainUniformJointCount}.`,\n              this\n            );\n          }\n        } else {\n          this._supportSkinning = true;\n          this._jointTexture?.destroy();\n          shaderData.disableMacro(\"O3_USE_JOINT_TEXTURE\");\n          shaderData.enableMacro(\"O3_JOINTS_NUM\", remainUniformJointCount.toString());\n          shaderData.setFloatArray(SkinnedMeshRenderer._jointMatrixProperty, this._jointMatrices);\n        }\n        jointDataCreateCache.set(jointCount, bsUniformOccupiesCount);\n      }\n\n      if (this._jointTexture) {\n        this._jointTexture.setPixelBuffer(this._jointMatrices);\n      }\n    }\n\n    const worldMatrix =\n      this._supportSkinning && this._rootBone ? this._rootBone.transform.worldMatrix : entity.transform.worldMatrix;\n    this._updateTransformShaderData(context, worldMatrix);\n\n    const layer = entity.layer;\n    this._rendererLayer.set(layer & 65535, (layer >>> 16) & 65535, 0, 0);\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: SkinnedMeshRenderer): void {\n    super._cloneTo(target);\n    this._blendShapeWeights && (target._blendShapeWeights = this._blendShapeWeights.slice());\n  }\n\n  /**\n   * @override\n   */\n  protected _registerEntityTransformListener(): void {\n    // Cancel register listener to entity transform.\n  }\n\n  /**\n   * @override\n   */\n  protected _updateBounds(worldBounds: BoundingBox): void {\n    if (this._rootBone) {\n      const localBounds = this._localBounds;\n      const worldMatrix = this._rootBone.transform.worldMatrix;\n      BoundingBox.transform(localBounds, worldMatrix, worldBounds);\n    } else {\n      super._updateBounds(worldBounds);\n    }\n  }\n\n  private _initSkin(): void {\n    const rhi = this.entity.engine._hardwareRenderer;\n    if (!rhi) return;\n\n    const { _skin: skin, shaderData } = this;\n    if (!skin) {\n      shaderData.disableMacro(\"O3_HAS_SKIN\");\n      return;\n    }\n\n    const joints = skin.joints;\n    const jointCount = joints.length;\n    const jointEntities = new Array<Entity>(jointCount);\n    for (let i = jointCount - 1; i >= 0; i--) {\n      jointEntities[i] = this._findByEntityName(this.entity, joints[i]);\n    }\n    this._jointEntities = jointEntities;\n    this._jointMatrices = new Float32Array(jointCount * 16);\n\n    const lastRootBone = this._rootBone;\n    const rootBone = this._findByEntityName(this.entity, skin.skeleton);\n\n    lastRootBone && lastRootBone.transform._updateFlagManager.removeListener(this._onTransformChanged);\n    rootBone.transform._updateFlagManager.addListener(this._onTransformChanged);\n\n    const rootIndex = joints.indexOf(skin.skeleton);\n    if (rootIndex !== -1) {\n      BoundingBox.transform(this._mesh.bounds, skin.inverseBindMatrices[rootIndex], this._localBounds);\n    } else {\n      // Root bone is not in joints list, we can only compute approximate inverse bind matrix\n      // Average all root bone's children inverse bind matrix\n      const approximateBindMatrix = new Matrix(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n      let subRootBoneCount = this._computeApproximateBindMatrix(\n        jointEntities,\n        skin.inverseBindMatrices,\n        rootBone,\n        approximateBindMatrix\n      );\n\n      if (subRootBoneCount !== 0) {\n        Matrix.multiplyScalar(approximateBindMatrix, 1.0 / subRootBoneCount, approximateBindMatrix);\n        BoundingBox.transform(this._mesh.bounds, approximateBindMatrix, this._localBounds);\n      } else {\n        this._localBounds.copyFrom(this._mesh.bounds);\n      }\n    }\n\n    this._rootBone = rootBone;\n    if (jointCount) {\n      shaderData.enableMacro(\"O3_HAS_SKIN\");\n      shaderData.setInt(SkinnedMeshRenderer._jointCountProperty, jointCount);\n    } else {\n      shaderData.disableMacro(\"O3_HAS_SKIN\");\n    }\n  }\n\n  private _computeApproximateBindMatrix(\n    jointEntities: Entity[],\n    inverseBindMatrices: Matrix[],\n    rootEntity: Entity,\n    approximateBindMatrix: Matrix\n  ): number {\n    let subRootBoneCount = 0;\n    const children = rootEntity.children;\n    for (let i = 0, n = children.length; i < n; i++) {\n      const rootChild = children[i];\n      const index = jointEntities.indexOf(rootChild);\n      if (index !== -1) {\n        Matrix.add(approximateBindMatrix, inverseBindMatrices[index], approximateBindMatrix);\n        subRootBoneCount++;\n      } else {\n        subRootBoneCount += this._computeApproximateBindMatrix(\n          jointEntities,\n          inverseBindMatrices,\n          rootChild,\n          approximateBindMatrix\n        );\n      }\n    }\n\n    return subRootBoneCount;\n  }\n\n  private _findByEntityName(rootEntity: Entity, name: string): Entity {\n    if (!rootEntity) {\n      return null;\n    }\n\n    const result = rootEntity.findByName(name);\n    if (result) {\n      return result;\n    }\n\n    return this._findByEntityName(rootEntity.parent, name);\n  }\n\n  private _checkBlendShapeWeightLength(): void {\n    const mesh = <ModelMesh>this._mesh;\n    const newBlendShapeCount = mesh ? mesh.blendShapeCount : 0;\n    const lastBlendShapeWeights = this._blendShapeWeights;\n    if (lastBlendShapeWeights) {\n      const lastBlendShapeWeightsCount = lastBlendShapeWeights.length;\n      if (lastBlendShapeWeightsCount !== newBlendShapeCount) {\n        const newBlendShapeWeights = new Float32Array(newBlendShapeCount);\n        if (newBlendShapeCount > lastBlendShapeWeightsCount) {\n          newBlendShapeWeights.set(lastBlendShapeWeights);\n        } else {\n          for (let i = 0; i < newBlendShapeCount; i++) {\n            newBlendShapeWeights[i] = lastBlendShapeWeights[i];\n          }\n        }\n        this._blendShapeWeights = newBlendShapeWeights;\n      }\n    } else {\n      this._blendShapeWeights = new Float32Array(newBlendShapeCount);\n    }\n  }\n\n  @ignoreClone\n  private _onLocalBoundsChanged(): void {\n    this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n  }\n}\n", "import { Vector2, Vector3 } from \"@galacean/engine-math\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { Engine } from \"../Engine\";\nimport { ModelMesh } from \"./ModelMesh\";\n\n/**\n * Used to generate common primitive meshes.\n */\nexport class PrimitiveMesh {\n  /**\n   * Create a sphere mesh.\n   * @param engine - Engine\n   * @param radius - Sphere radius\n   * @param segments - Number of segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Sphere model mesh\n   */\n  static createSphere(\n    engine: Engine,\n    radius: number = 0.5,\n    segments: number = 18,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    segments = Math.max(2, Math.floor(segments));\n\n    const count = segments + 1;\n    const vertexCount = count * count;\n    const rectangleCount = segments * segments;\n    const indices = PrimitiveMesh._generateIndices(engine, vertexCount, rectangleCount * 6);\n    const thetaRange = Math.PI;\n    const alphaRange = thetaRange * 2;\n    const countReciprocal = 1.0 / count;\n    const segmentsReciprocal = 1.0 / segments;\n\n    const positions: Vector3[] = new Array(vertexCount);\n    const normals: Vector3[] = new Array(vertexCount);\n    const uvs: Vector2[] = new Array(vertexCount);\n\n    for (let i = 0; i < vertexCount; ++i) {\n      const x = i % count;\n      const y = (i * countReciprocal) | 0;\n      const u = x * segmentsReciprocal;\n      const v = y * segmentsReciprocal;\n      const alphaDelta = u * alphaRange;\n      const thetaDelta = v * thetaRange;\n      const sinTheta = Math.sin(thetaDelta);\n\n      let posX = -radius * Math.cos(alphaDelta) * sinTheta;\n      let posY = radius * Math.cos(thetaDelta);\n      let posZ = radius * Math.sin(alphaDelta) * sinTheta;\n\n      // Position\n      positions[i] = new Vector3(posX, posY, posZ);\n      // Normal\n      normals[i] = new Vector3(posX, posY, posZ);\n      // Texcoord\n      uvs[i] = new Vector2(u, v);\n    }\n\n    let offset = 0;\n    for (let i = 0; i < rectangleCount; ++i) {\n      const x = i % segments;\n      const y = (i * segmentsReciprocal) | 0;\n\n      const a = y * count + x;\n      const b = a + 1;\n      const c = a + count;\n      const d = c + 1;\n\n      indices[offset++] = b;\n      indices[offset++] = a;\n      indices[offset++] = d;\n      indices[offset++] = a;\n      indices[offset++] = c;\n      indices[offset++] = d;\n    }\n\n    const { bounds } = mesh;\n    bounds.min.set(-radius, -radius, -radius);\n    bounds.max.set(radius, radius, radius);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a cuboid mesh.\n   * @param engine - Engine\n   * @param width - Cuboid width\n   * @param height - Cuboid height\n   * @param depth - Cuboid depth\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Cuboid model mesh\n   */\n  static createCuboid(\n    engine: Engine,\n    width: number = 1,\n    height: number = 1,\n    depth: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n\n    const halfWidth: number = width / 2;\n    const halfHeight: number = height / 2;\n    const halfDepth: number = depth / 2;\n\n    const positions: Vector3[] = new Array(24);\n    const normals: Vector3[] = new Array(24);\n    const uvs: Vector2[] = new Array(24);\n\n    // Up\n    positions[0] = new Vector3(-halfWidth, halfHeight, -halfDepth);\n    positions[1] = new Vector3(halfWidth, halfHeight, -halfDepth);\n    positions[2] = new Vector3(halfWidth, halfHeight, halfDepth);\n    positions[3] = new Vector3(-halfWidth, halfHeight, halfDepth);\n    normals[0] = new Vector3(0, 1, 0);\n    normals[1] = new Vector3(0, 1, 0);\n    normals[2] = new Vector3(0, 1, 0);\n    normals[3] = new Vector3(0, 1, 0);\n    uvs[0] = new Vector2(0, 0);\n    uvs[1] = new Vector2(1, 0);\n    uvs[2] = new Vector2(1, 1);\n    uvs[3] = new Vector2(0, 1);\n    // Down\n    positions[4] = new Vector3(-halfWidth, -halfHeight, -halfDepth);\n    positions[5] = new Vector3(halfWidth, -halfHeight, -halfDepth);\n    positions[6] = new Vector3(halfWidth, -halfHeight, halfDepth);\n    positions[7] = new Vector3(-halfWidth, -halfHeight, halfDepth);\n    normals[4] = new Vector3(0, -1, 0);\n    normals[5] = new Vector3(0, -1, 0);\n    normals[6] = new Vector3(0, -1, 0);\n    normals[7] = new Vector3(0, -1, 0);\n    uvs[4] = new Vector2(0, 1);\n    uvs[5] = new Vector2(1, 1);\n    uvs[6] = new Vector2(1, 0);\n    uvs[7] = new Vector2(0, 0);\n    // Left\n    positions[8] = new Vector3(-halfWidth, halfHeight, -halfDepth);\n    positions[9] = new Vector3(-halfWidth, halfHeight, halfDepth);\n    positions[10] = new Vector3(-halfWidth, -halfHeight, halfDepth);\n    positions[11] = new Vector3(-halfWidth, -halfHeight, -halfDepth);\n    normals[8] = new Vector3(-1, 0, 0);\n    normals[9] = new Vector3(-1, 0, 0);\n    normals[10] = new Vector3(-1, 0, 0);\n    normals[11] = new Vector3(-1, 0, 0);\n    uvs[8] = new Vector2(0, 0);\n    uvs[9] = new Vector2(1, 0);\n    uvs[10] = new Vector2(1, 1);\n    uvs[11] = new Vector2(0, 1);\n    // Right\n    positions[12] = new Vector3(halfWidth, halfHeight, -halfDepth);\n    positions[13] = new Vector3(halfWidth, halfHeight, halfDepth);\n    positions[14] = new Vector3(halfWidth, -halfHeight, halfDepth);\n    positions[15] = new Vector3(halfWidth, -halfHeight, -halfDepth);\n    normals[12] = new Vector3(1, 0, 0);\n    normals[13] = new Vector3(1, 0, 0);\n    normals[14] = new Vector3(1, 0, 0);\n    normals[15] = new Vector3(1, 0, 0);\n    uvs[12] = new Vector2(1, 0);\n    uvs[13] = new Vector2(0, 0);\n    uvs[14] = new Vector2(0, 1);\n    uvs[15] = new Vector2(1, 1);\n    // Front\n    positions[16] = new Vector3(-halfWidth, halfHeight, halfDepth);\n    positions[17] = new Vector3(halfWidth, halfHeight, halfDepth);\n    positions[18] = new Vector3(halfWidth, -halfHeight, halfDepth);\n    positions[19] = new Vector3(-halfWidth, -halfHeight, halfDepth);\n    normals[16] = new Vector3(0, 0, 1);\n    normals[17] = new Vector3(0, 0, 1);\n    normals[18] = new Vector3(0, 0, 1);\n    normals[19] = new Vector3(0, 0, 1);\n    uvs[16] = new Vector2(0, 0);\n    uvs[17] = new Vector2(1, 0);\n    uvs[18] = new Vector2(1, 1);\n    uvs[19] = new Vector2(0, 1);\n    // Back\n    positions[20] = new Vector3(-halfWidth, halfHeight, -halfDepth);\n    positions[21] = new Vector3(halfWidth, halfHeight, -halfDepth);\n    positions[22] = new Vector3(halfWidth, -halfHeight, -halfDepth);\n    positions[23] = new Vector3(-halfWidth, -halfHeight, -halfDepth);\n    normals[20] = new Vector3(0, 0, -1);\n    normals[21] = new Vector3(0, 0, -1);\n    normals[22] = new Vector3(0, 0, -1);\n    normals[23] = new Vector3(0, 0, -1);\n    uvs[20] = new Vector2(1, 0);\n    uvs[21] = new Vector2(0, 0);\n    uvs[22] = new Vector2(0, 1);\n    uvs[23] = new Vector2(1, 1);\n\n    const indices = new Uint16Array(36);\n\n    // prettier-ignore\n    // Up\n    indices[0] = 0, indices[1] = 2, indices[2] = 1, indices[3] = 2, indices[4] = 0, indices[5] = 3,\n    // Down\n    indices[6] = 4, indices[7] = 6, indices[8] = 7, indices[9] = 6, indices[10] = 4, indices[11] = 5,\n    // Left\n    indices[12] = 8, indices[13] = 10, indices[14] = 9, indices[15] = 10, indices[16] = 8, indices[17] = 11,\n    // Right\n    indices[18] = 12, indices[19] = 14, indices[20] = 15, indices[21] = 14, indices[22] = 12, indices[23] = 13,\n    // Front\n    indices[24] = 16, indices[25] = 18, indices[26] = 17, indices[27] = 18, indices[28] = 16, indices[29] = 19,\n    // Back\n    indices[30] = 20, indices[31] = 22, indices[32] = 23, indices[33] = 22, indices[34] = 20, indices[35] = 21;\n\n    const { bounds } = mesh;\n    bounds.min.set(-halfWidth, -halfHeight, -halfDepth);\n    bounds.max.set(halfWidth, halfHeight, halfDepth);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a plane mesh.\n   * @param engine - Engine\n   * @param width - Plane width\n   * @param height - Plane height\n   * @param horizontalSegments - Plane horizontal segments\n   * @param verticalSegments - Plane vertical segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Plane model mesh\n   */\n  static createPlane(\n    engine: Engine,\n    width: number = 1,\n    height: number = 1,\n    horizontalSegments: number = 1,\n    verticalSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    horizontalSegments = Math.max(1, Math.floor(horizontalSegments));\n    verticalSegments = Math.max(1, Math.floor(verticalSegments));\n\n    const horizontalCount = horizontalSegments + 1;\n    const verticalCount = verticalSegments + 1;\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n    const gridWidth = width / horizontalSegments;\n    const gridHeight = height / verticalSegments;\n    const vertexCount = horizontalCount * verticalCount;\n    const rectangleCount = verticalSegments * horizontalSegments;\n    const indices = PrimitiveMesh._generateIndices(engine, vertexCount, rectangleCount * 6);\n    const horizontalCountReciprocal = 1.0 / horizontalCount;\n    const horizontalSegmentsReciprocal = 1.0 / horizontalSegments;\n    const verticalSegmentsReciprocal = 1.0 / verticalSegments;\n\n    const positions: Vector3[] = new Array(vertexCount);\n    const normals: Vector3[] = new Array(vertexCount);\n    const uvs: Vector2[] = new Array(vertexCount);\n\n    for (let i = 0; i < vertexCount; ++i) {\n      const x = i % horizontalCount;\n      const z = (i * horizontalCountReciprocal) | 0;\n\n      // Position\n      positions[i] = new Vector3(x * gridWidth - halfWidth, 0, z * gridHeight - halfHeight);\n      // Normal\n      normals[i] = new Vector3(0, 1, 0);\n      // Texcoord\n      uvs[i] = new Vector2(x * horizontalSegmentsReciprocal, z * verticalSegmentsReciprocal);\n    }\n\n    let offset = 0;\n    for (let i = 0; i < rectangleCount; ++i) {\n      const x = i % horizontalSegments;\n      const y = (i * horizontalSegmentsReciprocal) | 0;\n\n      const a = y * horizontalCount + x;\n      const b = a + 1;\n      const c = a + horizontalCount;\n      const d = c + 1;\n\n      indices[offset++] = a;\n      indices[offset++] = c;\n      indices[offset++] = b;\n      indices[offset++] = c;\n      indices[offset++] = d;\n      indices[offset++] = b;\n    }\n\n    const { bounds } = mesh;\n    bounds.min.set(-halfWidth, 0, -halfHeight);\n    bounds.max.set(halfWidth, 0, halfHeight);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a cylinder mesh.\n   * @param engine - Engine\n   * @param radiusTop - The radius of top cap\n   * @param radiusBottom - The radius of bottom cap\n   * @param height - The height of torso\n   * @param radialSegments - Cylinder radial segments\n   * @param heightSegments - Cylinder height segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Cylinder model mesh\n   */\n  static createCylinder(\n    engine: Engine,\n    radiusTop: number = 0.5,\n    radiusBottom: number = 0.5,\n    height: number = 2,\n    radialSegments: number = 20,\n    heightSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    radialSegments = Math.floor(radialSegments);\n    heightSegments = Math.floor(heightSegments);\n\n    const radialCount = radialSegments + 1;\n    const verticalCount = heightSegments + 1;\n    const halfHeight = height * 0.5;\n    const unitHeight = height / heightSegments;\n    const torsoVertexCount = radialCount * verticalCount;\n    const torsoRectangleCount = radialSegments * heightSegments;\n    const capTriangleCount = radialSegments * 2;\n    const totalVertexCount = torsoVertexCount + 2 + capTriangleCount;\n    const indices = PrimitiveMesh._generateIndices(\n      engine,\n      totalVertexCount,\n      torsoRectangleCount * 6 + capTriangleCount * 3\n    );\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n    const heightSegmentsReciprocal = 1.0 / heightSegments;\n\n    const positions: Vector3[] = new Array(totalVertexCount);\n    const normals: Vector3[] = new Array(totalVertexCount);\n    const uvs: Vector2[] = new Array(totalVertexCount);\n\n    let indicesOffset = 0;\n\n    // Create torso\n    const thetaStart = Math.PI;\n    const thetaRange = Math.PI * 2;\n    const radiusDiff = radiusBottom - radiusTop;\n    const slope = radiusDiff / height;\n    const radiusSlope = radiusDiff / heightSegments;\n\n    for (let i = 0; i < torsoVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * heightSegmentsReciprocal;\n      const theta = thetaStart + u * thetaRange;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const radius = radiusBottom - y * radiusSlope;\n\n      let posX = radius * sinTheta;\n      let posY = y * unitHeight - halfHeight;\n      let posZ = radius * cosTheta;\n\n      // Position\n      positions[i] = new Vector3(posX, posY, posZ);\n      // Normal\n      normals[i] = new Vector3(sinTheta, slope, cosTheta);\n      // Texcoord\n      uvs[i] = new Vector2(u, 1 - v);\n    }\n\n    for (let i = 0; i < torsoRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = c;\n    }\n\n    // Bottom position\n    positions[torsoVertexCount] = new Vector3(0, -halfHeight, 0);\n    // Bottom normal\n    normals[torsoVertexCount] = new Vector3(0, -1, 0);\n    // Bottom texcoord\n    uvs[torsoVertexCount] = new Vector2(0.5, 0.5);\n\n    // Top position\n    positions[torsoVertexCount + 1] = new Vector3(0, halfHeight, 0);\n    // Top normal\n    normals[torsoVertexCount + 1] = new Vector3(0, 1, 0);\n    // Top texcoord\n    uvs[torsoVertexCount + 1] = new Vector2(0.5, 0.5);\n\n    // Add cap vertices\n    let offset = torsoVertexCount + 2;\n\n    const diameterTopReciprocal = 1.0 / (radiusTop * 2);\n    const diameterBottomReciprocal = 1.0 / (radiusBottom * 2);\n    const positionStride = radialCount * heightSegments;\n    for (let i = 0; i < radialSegments; ++i) {\n      const curPosBottom = positions[i];\n      let curPosX = curPosBottom.x;\n      let curPosZ = curPosBottom.z;\n\n      // Bottom position\n      positions[offset] = new Vector3(curPosX, -halfHeight, curPosZ);\n      // Bottom normal\n      normals[offset] = new Vector3(0, -1, 0);\n      // Bottom texcoord\n      uvs[offset++] = new Vector2(curPosX * diameterBottomReciprocal + 0.5, 0.5 - curPosZ * diameterBottomReciprocal);\n\n      const curPosTop = positions[i + positionStride];\n      curPosX = curPosTop.x;\n      curPosZ = curPosTop.z;\n\n      // Top position\n      positions[offset] = new Vector3(curPosX, halfHeight, curPosZ);\n      // Top normal\n      normals[offset] = new Vector3(0, 1, 0);\n      // Top texcoord\n      uvs[offset++] = new Vector2(curPosX * diameterTopReciprocal + 0.5, curPosZ * diameterTopReciprocal + 0.5);\n    }\n\n    // Add cap indices\n    const topCapIndex = torsoVertexCount + 1;\n    const bottomIndiceIndex = torsoVertexCount + 2;\n    const topIndiceIndex = bottomIndiceIndex + 1;\n    for (let i = 0; i < radialSegments; ++i) {\n      const firstStride = i * 2;\n      const secondStride = i === radialSegments - 1 ? 0 : firstStride + 2;\n\n      // Bottom\n      indices[indicesOffset++] = torsoVertexCount;\n      indices[indicesOffset++] = bottomIndiceIndex + secondStride;\n      indices[indicesOffset++] = bottomIndiceIndex + firstStride;\n\n      // Top\n      indices[indicesOffset++] = topCapIndex;\n      indices[indicesOffset++] = topIndiceIndex + firstStride;\n      indices[indicesOffset++] = topIndiceIndex + secondStride;\n    }\n\n    const { bounds } = mesh;\n    const radiusMax = Math.max(radiusTop, radiusBottom);\n    bounds.min.set(-radiusMax, -halfHeight, -radiusMax);\n    bounds.max.set(radiusMax, halfHeight, radiusMax);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a torus mesh.\n   * @param engine - Engine\n   * @param radius - Torus radius\n   * @param tubeRadius - Torus tube\n   * @param radialSegments - Torus radial segments\n   * @param tubularSegments - Torus tubular segments\n   * @param arc - Central angle\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Torus model mesh\n   */\n  static createTorus(\n    engine: Engine,\n    radius: number = 0.5,\n    tubeRadius: number = 0.1,\n    radialSegments: number = 30,\n    tubularSegments: number = 30,\n    arc: number = 360,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    radialSegments = Math.floor(radialSegments);\n    tubularSegments = Math.floor(tubularSegments);\n\n    const vertexCount = (radialSegments + 1) * (tubularSegments + 1);\n    const rectangleCount = radialSegments * tubularSegments;\n    const indices = PrimitiveMesh._generateIndices(engine, vertexCount, rectangleCount * 6);\n\n    const positions: Vector3[] = new Array(vertexCount);\n    const normals: Vector3[] = new Array(vertexCount);\n    const uvs: Vector2[] = new Array(vertexCount);\n\n    arc = (arc / 180) * Math.PI;\n\n    let offset = 0;\n\n    for (let i = 0; i <= radialSegments; i++) {\n      for (let j = 0; j <= tubularSegments; j++) {\n        const u = (j / tubularSegments) * arc;\n        const v = (i / radialSegments) * Math.PI * 2;\n        const cosV = Math.cos(v);\n        const sinV = Math.sin(v);\n        const cosU = Math.cos(u);\n        const sinU = Math.sin(u);\n\n        const position = new Vector3(\n          (radius + tubeRadius * cosV) * cosU,\n          (radius + tubeRadius * cosV) * sinU,\n          tubeRadius * sinV\n        );\n        positions[offset] = position;\n\n        const centerX = radius * cosU;\n        const centerY = radius * sinU;\n        normals[offset] = new Vector3(position.x - centerX, position.y - centerY, position.z).normalize();\n\n        uvs[offset++] = new Vector2(j / tubularSegments, i / radialSegments);\n      }\n    }\n\n    offset = 0;\n    for (let i = 1; i <= radialSegments; i++) {\n      for (let j = 1; j <= tubularSegments; j++) {\n        const a = (tubularSegments + 1) * i + j - 1;\n        const b = (tubularSegments + 1) * (i - 1) + j - 1;\n        const c = (tubularSegments + 1) * (i - 1) + j;\n        const d = (tubularSegments + 1) * i + j;\n\n        indices[offset++] = a;\n        indices[offset++] = b;\n        indices[offset++] = d;\n\n        indices[offset++] = b;\n        indices[offset++] = c;\n        indices[offset++] = d;\n      }\n    }\n\n    const { bounds } = mesh;\n    const outerRadius = radius + tubeRadius;\n    bounds.min.set(-outerRadius, -outerRadius, -tubeRadius);\n    bounds.max.set(outerRadius, outerRadius, tubeRadius);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a cone mesh.\n   * @param engine - Engine\n   * @param radius - The radius of cap\n   * @param height - The height of torso\n   * @param radialSegments - Cylinder radial segments\n   * @param heightSegments - Cylinder height segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Cone model mesh\n   */\n  static createCone(\n    engine: Engine,\n    radius: number = 0.5,\n    height: number = 2,\n    radialSegments: number = 20,\n    heightSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    radialSegments = Math.floor(radialSegments);\n    heightSegments = Math.floor(heightSegments);\n\n    const radialCount = radialSegments + 1;\n    const verticalCount = heightSegments + 1;\n    const halfHeight = height * 0.5;\n    const unitHeight = height / heightSegments;\n    const torsoVertexCount = radialCount * verticalCount;\n    const torsoRectangleCount = radialSegments * heightSegments;\n    const totalVertexCount = torsoVertexCount + 1 + radialSegments;\n    const indices = PrimitiveMesh._generateIndices(\n      engine,\n      totalVertexCount,\n      torsoRectangleCount * 6 + radialSegments * 3\n    );\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n    const heightSegmentsReciprocal = 1.0 / heightSegments;\n\n    const positions: Vector3[] = new Array(totalVertexCount);\n    const normals: Vector3[] = new Array(totalVertexCount);\n    const uvs: Vector2[] = new Array(totalVertexCount);\n\n    let indicesOffset = 0;\n\n    // Create torso\n    const thetaStart = Math.PI;\n    const thetaRange = Math.PI * 2;\n    const slope = radius / height;\n\n    for (let i = 0; i < torsoVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * heightSegmentsReciprocal;\n      const theta = thetaStart + u * thetaRange;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const curRadius = radius - y * radius;\n\n      let posX = curRadius * sinTheta;\n      let posY = y * unitHeight - halfHeight;\n      let posZ = curRadius * cosTheta;\n\n      // Position\n      positions[i] = new Vector3(posX, posY, posZ);\n      // Normal\n      normals[i] = new Vector3(sinTheta, slope, cosTheta);\n      // Texcoord\n      uvs[i] = new Vector2(u, 1 - v);\n    }\n\n    for (let i = 0; i < torsoRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = c;\n    }\n\n    // Bottom position\n    positions[torsoVertexCount] = new Vector3(0, -halfHeight, 0);\n    // Bottom normal\n    normals[torsoVertexCount] = new Vector3(0, -1, 0);\n    // Bottom texcoord\n    uvs[torsoVertexCount] = new Vector2(0.5, 0.5);\n\n    // Add bottom cap vertices\n    let offset = torsoVertexCount + 1;\n    const diameterBottomReciprocal = 1.0 / (radius * 2);\n    for (let i = 0; i < radialSegments; ++i) {\n      const curPos = positions[i];\n      let curPosX = curPos.x;\n      let curPosZ = curPos.z;\n\n      // Bottom position\n      positions[offset] = new Vector3(curPosX, -halfHeight, curPosZ);\n      // Bottom normal\n      normals[offset] = new Vector3(0, -1, 0);\n      // Bottom texcoord\n      uvs[offset++] = new Vector2(curPosX * diameterBottomReciprocal + 0.5, 0.5 - curPosZ * diameterBottomReciprocal);\n    }\n\n    const bottomIndiceIndex = torsoVertexCount + 1;\n    for (let i = 0; i < radialSegments; ++i) {\n      const firstStride = i;\n      const secondStride = i === radialSegments - 1 ? 0 : firstStride + 1;\n\n      // Bottom\n      indices[indicesOffset++] = torsoVertexCount;\n      indices[indicesOffset++] = bottomIndiceIndex + secondStride;\n      indices[indicesOffset++] = bottomIndiceIndex + firstStride;\n    }\n\n    const { bounds } = mesh;\n    bounds.min.set(-radius, -halfHeight, -radius);\n    bounds.max.set(radius, halfHeight, radius);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a capsule mesh.\n   * @param engine - Engine\n   * @param radius - The radius of the two hemispherical ends\n   * @param height - The height of the cylindrical part, measured between the centers of the hemispherical ends\n   * @param radialSegments - Hemispherical end radial segments\n   * @param heightSegments - Cylindrical part height segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Capsule model mesh\n   */\n  static createCapsule(\n    engine: Engine,\n    radius: number = 0.5,\n    height: number = 2,\n    radialSegments: number = 6,\n    heightSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n\n    radialSegments = Math.max(2, Math.floor(radialSegments));\n    heightSegments = Math.floor(heightSegments);\n\n    const radialCount = radialSegments + 1;\n    const verticalCount = heightSegments + 1;\n    const halfHeight = height * 0.5;\n    const unitHeight = height / heightSegments;\n    const torsoVertexCount = radialCount * verticalCount;\n    const torsoRectangleCount = radialSegments * heightSegments;\n\n    const capVertexCount = radialCount * radialCount;\n    const capRectangleCount = radialSegments * radialSegments;\n\n    const totalVertexCount = torsoVertexCount + 2 * capVertexCount;\n    const indices = PrimitiveMesh._generateIndices(\n      engine,\n      totalVertexCount,\n      (torsoRectangleCount + 2 * capRectangleCount) * 6\n    );\n\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n    const heightSegmentsReciprocal = 1.0 / heightSegments;\n\n    const thetaStart = Math.PI;\n    const thetaRange = Math.PI * 2;\n\n    const positions = new Array<Vector3>(totalVertexCount);\n    const normals = new Array<Vector3>(totalVertexCount);\n    const uvs = new Array<Vector2>(totalVertexCount);\n\n    let indicesOffset = 0;\n\n    // create torso\n    for (let i = 0; i < torsoVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * heightSegmentsReciprocal;\n      const theta = thetaStart + u * thetaRange;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n\n      positions[i] = new Vector3(radius * sinTheta, y * unitHeight - halfHeight, radius * cosTheta);\n      normals[i] = new Vector3(sinTheta, 0, cosTheta);\n      uvs[i] = new Vector2(u, 1 - v);\n    }\n\n    for (let i = 0; i < torsoRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = c;\n    }\n\n    PrimitiveMesh._createCapsuleCap(\n      radius,\n      height,\n      radialSegments,\n      thetaRange,\n      torsoVertexCount,\n      1,\n      positions,\n      normals,\n      uvs,\n      indices,\n      indicesOffset\n    );\n\n    PrimitiveMesh._createCapsuleCap(\n      radius,\n      height,\n      radialSegments,\n      -thetaRange,\n      torsoVertexCount + capVertexCount,\n      -1,\n      positions,\n      normals,\n      uvs,\n      indices,\n      indicesOffset + 6 * capRectangleCount\n    );\n\n    const { bounds } = mesh;\n    bounds.min.set(-radius, -radius - halfHeight, -radius);\n    bounds.max.set(radius, radius + halfHeight, radius);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  private static _initialize(\n    mesh: ModelMesh,\n    positions: Vector3[],\n    normals: Vector3[],\n    uvs: Vector2[],\n    indices: Uint16Array | Uint32Array,\n    noLongerAccessible: boolean\n  ) {\n    mesh.setPositions(positions);\n    mesh.setNormals(normals);\n    mesh.setUVs(uvs);\n    mesh.setIndices(indices);\n    mesh.calculateTangents();\n\n    mesh.uploadData(noLongerAccessible);\n    mesh.addSubMesh(0, indices.length);\n  }\n\n  private static _generateIndices(engine: Engine, vertexCount: number, indexCount: number): Uint16Array | Uint32Array {\n    let indices: Uint16Array | Uint32Array = null;\n    if (vertexCount > 65535) {\n      if (engine._hardwareRenderer.canIUse(GLCapabilityType.elementIndexUint)) {\n        indices = new Uint32Array(indexCount);\n      } else {\n        throw Error(\"The vertex count is over limit.\");\n      }\n    } else {\n      indices = new Uint16Array(indexCount);\n    }\n    return indices;\n  }\n\n  private static _createCapsuleCap(\n    radius: number,\n    height: number,\n    radialSegments: number,\n    capAlphaRange: number,\n    offset: number,\n    posIndex: number,\n    positions: Vector3[],\n    normals: Vector3[],\n    uvs: Vector2[],\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ) {\n    const radialCount = radialSegments + 1;\n    const halfHeight = height * 0.5 * posIndex;\n    const capVertexCount = radialCount * radialCount;\n    const capRectangleCount = radialSegments * radialSegments;\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n\n    for (let i = 0; i < capVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * radialSegmentsReciprocal;\n      const alphaDelta = u * capAlphaRange;\n      const thetaDelta = (v * Math.PI) / 2;\n      const sinTheta = Math.sin(thetaDelta);\n\n      const posX = -radius * Math.cos(alphaDelta) * sinTheta;\n      const posY = radius * Math.cos(thetaDelta) * posIndex + halfHeight;\n      const posZ = radius * Math.sin(alphaDelta) * sinTheta;\n\n      const index = i + offset;\n      positions[index] = new Vector3(posX, posY, posZ);\n      normals[index] = new Vector3(posX, posY - halfHeight, posZ);\n      uvs[index] = new Vector2(u, v);\n    }\n\n    for (let i = 0; i < capRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x + offset;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = d;\n    }\n  }\n}\n", "import { IndexBufferBinding, IndexFormat, Mesh, Buffer, VertexBufferBinding, VertexElement } from \"../graphic\";\n\n/**\n * BufferMesh.\n */\nexport class BufferMesh extends Mesh {\n  /**\n   * Instanced count, disable instanced drawing when set zero.\n   */\n  get instanceCount(): number {\n    return this._instanceCount;\n  }\n\n  set instanceCount(value: number) {\n    this._instanceCount = value;\n  }\n\n  /**\n   * Vertex buffer binding collection.\n   */\n  get vertexBufferBindings(): Readonly<VertexBufferBinding[]> {\n    return this._vertexBufferBindings;\n  }\n\n  /**\n   * Index buffer binding.\n   */\n  get indexBufferBinding(): IndexBufferBinding {\n    return this._indexBufferBinding;\n  }\n\n  /**\n   * Vertex element collection.\n   */\n  get vertexElements(): Readonly<VertexElement[]> {\n    return this._vertexElements;\n  }\n\n  /**\n   * Set vertex elements.\n   * @param elements - Vertex element collection\n   */\n  setVertexElements(elements: VertexElement[]): void {\n    this._setVertexElements(elements);\n  }\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBufferBindings - Vertex buffer binding\n   * @param index - Vertex buffer index, the default value is 0\n   */\n  setVertexBufferBinding(vertexBufferBindings: VertexBufferBinding, index?: number): void;\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBuffer - Vertex buffer\n   * @param stride - Vertex buffer data stride\n   * @param index - Vertex buffer index, the default value is 0\n   */\n  setVertexBufferBinding(vertexBuffer: Buffer, stride: number, index?: number): void;\n\n  setVertexBufferBinding(\n    bufferOrBinding: Buffer | VertexBufferBinding,\n    strideOrFirstIndex: number = 0,\n    index: number = 0\n  ): void {\n    let binding = <VertexBufferBinding>bufferOrBinding;\n    const isBinding = binding.buffer !== undefined;\n    isBinding || (binding = new VertexBufferBinding(<Buffer>bufferOrBinding, strideOrFirstIndex));\n\n    const bindings = this._vertexBufferBindings;\n    bindings.length <= index && (bindings.length = index + 1);\n    this._setVertexBufferBinding(isBinding ? strideOrFirstIndex : index, binding);\n  }\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBufferBindings - Vertex buffer binding\n   * @param firstIndex - First vertex buffer index, the default value is 0\n   */\n  setVertexBufferBindings(vertexBufferBindings: VertexBufferBinding[], firstIndex: number = 0): void {\n    const bindings = this._vertexBufferBindings;\n    const count = vertexBufferBindings.length;\n    const needLength = firstIndex + count;\n    bindings.length < needLength && (bindings.length = needLength);\n    for (let i = 0; i < count; i++) {\n      this._setVertexBufferBinding(firstIndex + i, vertexBufferBindings[i]);\n    }\n  }\n\n  /**\n   * Set index buffer binding.\n   * @param buffer - Index buffer\n   * @param format - Index buffer format\n   */\n  setIndexBufferBinding(buffer: Buffer, format: IndexFormat): void;\n\n  /**\n   * Set index buffer binding.\n   * @param bufferBinding - Index buffer binding\n   * @remarks When bufferBinding is null, it will clear IndexBufferBinding\n   */\n  setIndexBufferBinding(bufferBinding: IndexBufferBinding | null): void;\n\n  setIndexBufferBinding(bufferOrBinding: Buffer | IndexBufferBinding | null, format?: IndexFormat): void {\n    let binding = <IndexBufferBinding>bufferOrBinding;\n    if (binding) {\n      const isBinding = binding.buffer !== undefined;\n      isBinding || (binding = new IndexBufferBinding(<Buffer>bufferOrBinding, format));\n    }\n    this._setIndexBufferBinding(binding);\n  }\n}\n", "import { Vector3 } from \"@galacean/engine-math\";\n\n/**\n * BlendShapeFrame.\n */\nexport class BlendShapeFrame {\n  /** Weight of BlendShapeFrame. */\n  readonly weight: number;\n  /** Delta positions for the frame being added. */\n  readonly deltaPositions: Readonly<Readonly<Vector3>[]>;\n  /** Delta normals for the frame being added. */\n  readonly deltaNormals: Readonly<Readonly<Vector3[]> | null>;\n  /** Delta tangents for the frame being added. */\n  readonly deltaTangents: Readonly<Readonly<Vector3[]> | null>;\n\n  /**\n   * Create a BlendShapeFrame.\n   * @param weight - Weight of BlendShapeFrame\n   * @param deltaPositions - Delta positions for the frame being added\n   * @param deltaNormals - Delta normals for the frame being added\n   * @param deltaTangents - Delta tangents for the frame being added\n   */\n  constructor(\n    weight: number,\n    deltaPositions: Vector3[],\n    deltaNormals: Vector3[] = null,\n    deltaTangents: Vector3[] = null\n  ) {\n    if (deltaNormals && deltaNormals.length !== deltaPositions.length) {\n      throw \"deltaNormals length must same with deltaPositions length.\";\n    }\n\n    if (deltaTangents && deltaTangents.length !== deltaPositions.length) {\n      throw \"deltaTangents length must same with deltaPositions length.\";\n    }\n\n    this.weight = weight;\n    this.deltaPositions = deltaPositions;\n    this.deltaNormals = deltaNormals;\n    this.deltaTangents = deltaTangents;\n  }\n}\n", "import { Vector3 } from \"@galacean/engine-math\";\nimport { BoolUpdateFlag } from \"../BoolUpdateFlag\";\nimport { UpdateFlag } from \"../UpdateFlag\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\nimport { BlendShapeFrame } from \"./BlendShapeFrame\";\n\n/**\n * BlendShape.\n */\nexport class BlendShape {\n  /** Name of BlendShape. */\n  name: string;\n\n  /** @internal */\n  _useBlendShapeNormal: boolean = true;\n  /** @internal */\n  _useBlendShapeTangent: boolean = true;\n  /** @internal */\n  _layoutChangeManager: UpdateFlagManager = new UpdateFlagManager();\n\n  private _dataChangeManager: UpdateFlagManager = new UpdateFlagManager();\n  private _frames: BlendShapeFrame[] = [];\n\n  /**\n   * Frames of BlendShape.\n   */\n  get frames(): Readonly<BlendShapeFrame[]> {\n    return this._frames;\n  }\n\n  /**\n   * Create a BlendShape.\n   * @param name - BlendShape name.\n   */\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  /**\n   * Add a BlendShapeFrame by weight, deltaPositions, deltaNormals and deltaTangents.\n   * @param weight - Weight of BlendShapeFrame\n   * @param deltaPositions - Delta positions for the frame being added\n   * @param deltaNormals - Delta normals for the frame being added\n   * @param deltaTangents - Delta tangents for the frame being added\n   */\n  addFrame(\n    weight: number,\n    deltaPositions: Vector3[],\n    deltaNormals?: Vector3[],\n    deltaTangents?: Vector3[]\n  ): BlendShapeFrame;\n\n  /**\n   * Add a BlendShapeFrame.\n   * @param frame - The BlendShapeFrame.\n   */\n  addFrame(frame: BlendShapeFrame): void;\n\n  addFrame(\n    frameOrWeight: BlendShapeFrame | number,\n    deltaPositions?: Vector3[],\n    deltaNormals?: Vector3[],\n    deltaTangents?: Vector3[]\n  ): void | BlendShapeFrame {\n    if (typeof frameOrWeight === \"number\") {\n      const frame = new BlendShapeFrame(frameOrWeight, deltaPositions, deltaNormals, deltaTangents);\n      this._addFrame(frame);\n      return frame;\n    } else {\n      this._addFrame(frameOrWeight);\n    }\n  }\n\n  /**\n   * Clear all frames.\n   */\n  clearFrames(): void {\n    this._frames.length = 0;\n    this._updateUseNormalAndTangent(true, true);\n    this._dataChangeManager.dispatch();\n  }\n\n  /**\n   * @internal\n   */\n  _addDataDirtyFlag(flag: UpdateFlag): void {\n    this._dataChangeManager.addFlag(flag);\n  }\n\n  /**\n   * @internal\n   */\n  _createSubDataDirtyFlag(): BoolUpdateFlag {\n    return this._dataChangeManager.createFlag(BoolUpdateFlag);\n  }\n\n  private _addFrame(frame: BlendShapeFrame): void {\n    const frames = this._frames;\n    const frameCount = frames.length;\n    if (frameCount > 0 && frame.deltaPositions.length !== frames[frameCount - 1].deltaPositions.length) {\n      throw \"Frame's deltaPositions length must same with before frame deltaPositions length.\";\n    }\n    this._frames.push(frame);\n\n    this._updateUseNormalAndTangent(!!frame.deltaNormals, !!frame.deltaTangents);\n    this._dataChangeManager.dispatch();\n  }\n\n  private _updateUseNormalAndTangent(useNormal: boolean, useTangent: boolean): void {\n    const useBlendShapeNormal = this._useBlendShapeNormal && useNormal;\n    const useBlendShapeTangent = this._useBlendShapeTangent && useTangent;\n    if (this._useBlendShapeNormal !== useBlendShapeNormal || this._useBlendShapeTangent !== useBlendShapeTangent) {\n      this._useBlendShapeNormal = useBlendShapeNormal;\n      this._useBlendShapeTangent = useBlendShapeTangent;\n      this._layoutChangeManager.dispatch(0, this);\n    }\n  }\n}\n", "import { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { Buffer, BufferBindFlag, BufferUsage, IndexFormat, MeshTopology, SubMesh, VertexElement } from \"../graphic\";\nimport { Material } from \"../material\";\nimport { BufferMesh } from \"../mesh\";\nimport { ClassPool } from \"./ClassPool\";\nimport { SpriteElement } from \"./SpriteElement\";\nimport { SpriteMaskElement } from \"./SpriteMaskElement\";\nimport { TextRenderElement } from \"./TextRenderElement\";\n\ntype Element = SpriteElement | SpriteMaskElement;\n\nexport abstract class Basic2DBatcher {\n  /** The maximum number of vertex. */\n  static MAX_VERTEX_COUNT: number = 4096;\n  static _canUploadSameBuffer: boolean = true;\n\n  /** @internal */\n  _engine: Engine;\n  /** @internal */\n  _subMeshPool: ClassPool<SubMesh> = new ClassPool(SubMesh);\n  /** @internal */\n  _batchedQueue: Element[] = [];\n  /** @internal */\n  _meshes: BufferMesh[] = [];\n  /** @internal */\n  _meshCount: number = 1;\n  /** @internal */\n  _vertexBuffers: Buffer[] = [];\n  /** @internal */\n  _indiceBuffers: Buffer[] = [];\n  /** @internal */\n  _vertices: Float32Array;\n  /** @internal */\n  _indices: Uint16Array;\n  /** @internal */\n  _flushId: number = 0;\n  /** @internal */\n  _vertexCount: number = 0;\n  /** @internal */\n  _elementCount: number = 0;\n\n  constructor(engine: Engine) {\n    this._engine = engine;\n\n    const { MAX_VERTEX_COUNT } = Basic2DBatcher;\n    this._vertices = new Float32Array(MAX_VERTEX_COUNT * 9);\n    this._indices = new Uint16Array(MAX_VERTEX_COUNT * 3);\n\n    const { _meshes, _meshCount } = this;\n    for (let i = 0; i < _meshCount; i++) {\n      _meshes[i] = this._createMesh(engine, i);\n    }\n  }\n\n  drawElement(\n    element: SpriteMaskElement | SpriteElement | TextRenderElement,\n    camera: Camera,\n    replaceMaterial: Material\n  ): void {\n    if (element.multiRenderData) {\n      const elements = (<TextRenderElement>element).charElements;\n      for (let i = 0, n = elements.length; i < n; ++i) {\n        this._drawSubElement(elements[i], camera, replaceMaterial);\n      }\n    } else {\n      this._drawSubElement(<SpriteMaskElement | SpriteElement>element, camera, replaceMaterial);\n    }\n  }\n\n  private _drawSubElement(element: SpriteMaskElement | SpriteElement, camera: Camera, replaceMaterial: Material) {\n    const len = element.renderData.vertexCount;\n    if (this._vertexCount + len > Basic2DBatcher.MAX_VERTEX_COUNT) {\n      this.flush(camera, replaceMaterial);\n    }\n\n    this._vertexCount += len;\n    this._batchedQueue[this._elementCount++] = element;\n  }\n\n  flush(camera: Camera, replaceMaterial: Material): void {\n    const batchedQueue = this._batchedQueue;\n\n    if (batchedQueue.length === 0) {\n      return;\n    }\n    this._updateData(this._engine);\n    this.drawBatches(camera, replaceMaterial);\n\n    if (!Basic2DBatcher._canUploadSameBuffer) {\n      this._flushId++;\n    }\n\n    batchedQueue.length = 0;\n    this._subMeshPool.resetPool();\n    this._vertexCount = 0;\n    this._elementCount = 0;\n  }\n\n  clear(): void {\n    this._flushId = 0;\n    this._vertexCount = 0;\n    this._elementCount = 0;\n    this._batchedQueue.length = 0;\n  }\n\n  destroy(): void {\n    this._batchedQueue = null;\n\n    const { _meshes: meshes, _vertexBuffers: vertexBuffers, _indiceBuffers: indiceBuffers } = this;\n\n    for (let i = 0, n = meshes.length; i < n; ++i) {\n      meshes[i].destroy();\n    }\n    this._meshes = null;\n\n    for (let i = 0, n = vertexBuffers.length; i < n; ++i) {\n      vertexBuffers[i].destroy();\n    }\n    this._vertexBuffers = null;\n\n    for (let i = 0, n = indiceBuffers.length; i < n; ++i) {\n      indiceBuffers[i].destroy();\n    }\n    this._indiceBuffers = null;\n  }\n\n  private _createMesh(engine: Engine, index: number): BufferMesh {\n    const { MAX_VERTEX_COUNT } = Basic2DBatcher;\n    const mesh = new BufferMesh(engine, `BufferMesh${index}`);\n\n    const vertexElements: VertexElement[] = [];\n    const vertexStride = this.createVertexElements(vertexElements);\n\n    // vertices\n    this._vertexBuffers[index] = new Buffer(\n      engine,\n      BufferBindFlag.VertexBuffer,\n      MAX_VERTEX_COUNT * 4 * vertexStride,\n      BufferUsage.Dynamic\n    );\n    // indices\n    this._indiceBuffers[index] = new Buffer(\n      engine,\n      BufferBindFlag.IndexBuffer,\n      MAX_VERTEX_COUNT * 2 * 3,\n      BufferUsage.Dynamic\n    );\n    mesh.setVertexBufferBinding(this._vertexBuffers[index], vertexStride);\n    mesh.setIndexBufferBinding(this._indiceBuffers[index], IndexFormat.UInt16);\n    mesh.setVertexElements(vertexElements);\n\n    return mesh;\n  }\n\n  private _updateData(engine: Engine): void {\n    const { _meshes, _flushId } = this;\n\n    if (!Basic2DBatcher._canUploadSameBuffer && this._meshCount <= _flushId) {\n      this._meshCount++;\n      _meshes[_flushId] = this._createMesh(engine, _flushId);\n    }\n\n    const { _batchedQueue: batchedQueue, _vertices: vertices, _indices: indices } = this;\n    const mesh = _meshes[_flushId];\n    mesh.clearSubMesh();\n\n    let vertexIndex = 0;\n    let indiceIndex = 0;\n    let vertexStartIndex = 0;\n    let vertexCount = 0;\n    let curIndiceStartIndex = 0;\n    let curMeshIndex = 0;\n    let preElement: Element = null;\n    for (let i = 0, len = batchedQueue.length; i < len; i++) {\n      const curElement = batchedQueue[i];\n\n      // Batch vertex\n      vertexIndex = this.updateVertices(curElement, vertices, vertexIndex);\n\n      // Batch indice\n      const { triangles } = curElement.renderData;\n      const triangleNum = triangles.length;\n      for (let j = 0; j < triangleNum; j++) {\n        indices[indiceIndex++] = triangles[j] + curIndiceStartIndex;\n      }\n\n      curIndiceStartIndex += curElement.renderData.vertexCount;\n\n      if (preElement === null) {\n        vertexCount += triangleNum;\n      } else {\n        if (this.canBatch(preElement, curElement)) {\n          vertexCount += triangleNum;\n        } else {\n          mesh.addSubMesh(this._getSubMeshFromPool(vertexStartIndex, vertexCount));\n          vertexStartIndex += vertexCount;\n          vertexCount = triangleNum;\n          batchedQueue[curMeshIndex++] = preElement;\n        }\n      }\n\n      preElement = curElement;\n    }\n\n    mesh.addSubMesh(this._getSubMeshFromPool(vertexStartIndex, vertexCount));\n    batchedQueue[curMeshIndex] = preElement;\n\n    this._vertexBuffers[_flushId].setData(vertices, 0, 0, vertexIndex);\n    this._indiceBuffers[_flushId].setData(indices, 0, 0, indiceIndex);\n  }\n\n  private _getSubMeshFromPool(start: number, count: number): SubMesh {\n    const subMesh = this._subMeshPool.getFromPool();\n    subMesh.start = start;\n    subMesh.count = count;\n    subMesh.topology = MeshTopology.Triangles;\n    return subMesh;\n  }\n\n  /**\n   * @internal\n   */\n  abstract createVertexElements(vertexElements: VertexElement[]): number;\n\n  /**\n   * @internal\n   */\n  abstract canBatch(preElement: Element, curElement: Element): boolean;\n\n  /**\n   * @internal\n   */\n  abstract updateVertices(element: Element, vertices: Float32Array, vertexIndex: number): number;\n\n  /**\n   * @internal\n   */\n  abstract drawBatches(camera: Camera, replaceMaterial: Material): void;\n}\n", "import { SpriteMask } from \"../2d/sprite/SpriteMask\";\nimport { Camera } from \"../Camera\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { StencilOperation } from \"../shader/enums/StencilOperation\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { Basic2DBatcher } from \"./Basic2DBatcher\";\nimport { SpriteMaskElement } from \"./SpriteMaskElement\";\n\nexport class SpriteMaskBatcher extends Basic2DBatcher {\n  createVertexElements(vertexElements: VertexElement[]): number {\n    vertexElements[0] = new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0);\n    vertexElements[1] = new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0);\n    return 20;\n  }\n\n  canBatch(preElement: SpriteMaskElement, curElement: SpriteMaskElement): boolean {\n    if (preElement.isAdd !== curElement.isAdd) {\n      return false;\n    }\n\n    // Compare renderer property\n    const preShaderData = (<SpriteMask>preElement.component).shaderData;\n    const curShaderData = (<SpriteMask>curElement.component).shaderData;\n    const textureProperty = SpriteMask._textureProperty;\n    const alphaCutoffProperty = SpriteMask._alphaCutoffProperty;\n\n    return (\n      preShaderData.getTexture(textureProperty) === curShaderData.getTexture(textureProperty) &&\n      preShaderData.getTexture(alphaCutoffProperty) === curShaderData.getTexture(alphaCutoffProperty)\n    );\n  }\n\n  updateVertices(element: SpriteMaskElement, vertices: Float32Array, vertexIndex: number): number {\n    const { positions, uvs, vertexCount } = element.renderData;\n    for (let i = 0; i < vertexCount; i++) {\n      const curPos = positions[i];\n      const curUV = uvs[i];\n      vertices[vertexIndex++] = curPos.x;\n      vertices[vertexIndex++] = curPos.y;\n      vertices[vertexIndex++] = curPos.z;\n      vertices[vertexIndex++] = curUV.x;\n      vertices[vertexIndex++] = curUV.y;\n    }\n\n    return vertexIndex;\n  }\n\n  drawBatches(camera: Camera): void {\n    const { _engine: engine, _batchedQueue: batchedQueue } = this;\n    const mesh = this._meshes[this._flushId];\n    const subMeshes = mesh.subMeshes;\n    const sceneData = camera.scene.shaderData;\n    const cameraData = camera.shaderData;\n\n    for (let i = 0, len = subMeshes.length; i < len; i++) {\n      const subMesh = subMeshes[i];\n      const spriteMaskElement = <SpriteMaskElement>batchedQueue[i];\n\n      if (!subMesh || !spriteMaskElement) {\n        return;\n      }\n\n      const renderer = <SpriteMask>spriteMaskElement.component;\n      const material = spriteMaskElement.material;\n\n      const compileMacros = Shader._compileMacros;\n      // union render global macro and material self macro.\n      ShaderMacroCollection.unionCollection(\n        renderer._globalShaderMacro,\n        material.shaderData._macroCollection,\n        compileMacros\n      );\n\n      // Update stencil state\n      const stencilState = material.renderState.stencilState;\n      const op = spriteMaskElement.isAdd ? StencilOperation.IncrementSaturate : StencilOperation.DecrementSaturate;\n      stencilState.passOperationFront = op;\n      stencilState.passOperationBack = op;\n\n      const program = material.shader.passes[0]._getShaderProgram(engine, compileMacros);\n      if (!program.isValid) {\n        return;\n      }\n\n      program.bind();\n      program.groupingOtherUniformBlock();\n      program.uploadAll(program.sceneUniformBlock, sceneData);\n      program.uploadAll(program.cameraUniformBlock, cameraData);\n      program.uploadAll(program.rendererUniformBlock, renderer.shaderData);\n      program.uploadAll(program.materialUniformBlock, material.shaderData);\n\n      material.renderState._apply(engine, false);\n\n      engine._hardwareRenderer.drawPrimitive(mesh, subMesh, program);\n    }\n  }\n}\n", "import { SpriteMaskInteraction } from \"../2d/enums/SpriteMaskInteraction\";\nimport { SpriteRenderer } from \"../2d/sprite/SpriteRenderer\";\nimport { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { SpriteMaskBatcher } from \"./SpriteMaskBatcher\";\n\n/**\n * @internal\n */\nexport class SpriteMaskManager {\n  _batcher: SpriteMaskBatcher;\n\n  private _preMaskLayer: number = 0;\n\n  constructor(engine: Engine) {\n    this._batcher = new SpriteMaskBatcher(engine);\n  }\n\n  clear(): void {\n    this._preMaskLayer = 0;\n    this._batcher.clear();\n  }\n\n  preRender(camera: Camera, renderer: SpriteRenderer): void {\n    if (renderer.maskInteraction === SpriteMaskInteraction.None) {\n      return;\n    }\n\n    this._batcher.clear();\n    this._processMasksDiff(camera, renderer);\n    this._batcher.flush(camera, null);\n  }\n\n  postRender(renderer: SpriteRenderer): void {\n    if (renderer.maskInteraction === SpriteMaskInteraction.None) {\n      return;\n    }\n\n    this._preMaskLayer = renderer.maskLayer;\n  }\n\n  destroy(): void {\n    this._batcher.destroy();\n    this._batcher = null;\n  }\n\n  private _processMasksDiff(camera: Camera, renderer: SpriteRenderer): void {\n    const preMaskLayer = this._preMaskLayer;\n    const curMaskLayer = renderer.maskLayer;\n    if (preMaskLayer !== curMaskLayer) {\n      const allMasks = camera._renderPipeline._allSpriteMasks;\n      const commonLayer = preMaskLayer & curMaskLayer;\n      const addLayer = curMaskLayer & ~preMaskLayer;\n      const reduceLayer = preMaskLayer & ~curMaskLayer;\n\n      const allMaskElements = allMasks._elements;\n      for (let i = 0, n = allMasks.length; i < n; i++) {\n        const mask = allMaskElements[i];\n        const influenceLayers = mask.influenceLayers;\n\n        if (influenceLayers & commonLayer) {\n          continue;\n        }\n\n        if (influenceLayers & addLayer) {\n          const maskRenderElement = mask._maskElement;\n          maskRenderElement.isAdd = true;\n          this._batcher.drawElement(maskRenderElement, camera, null);\n          continue;\n        }\n\n        if (influenceLayers & reduceLayer) {\n          const maskRenderElement = mask._maskElement;\n          maskRenderElement.isAdd = false;\n          this._batcher.drawElement(maskRenderElement, camera, null);\n        }\n      }\n    }\n  }\n}\n", "import { RenderElement } from \"./RenderElement\";\nimport { SpriteElement } from \"./SpriteElement\";\n\nexport class TextRenderElement extends RenderElement {\n  charElements: SpriteElement[] = [];\n\n  constructor() {\n    super();\n    this.multiRenderData = true;\n  }\n}\n", "/**\n * The Background mode enumeration.\n */\nexport enum BackgroundMode {\n  /* Solid color. */\n  SolidColor,\n  /* Sky. */\n  Sky,\n  /** Texture */\n  Texture\n}\n", "/**\n * Filling mode of background texture.\n */\nexport enum BackgroundTextureFillMode {\n  /* Maintain the aspect ratio and scale the texture to fit the width of the canvas. */\n  AspectFitWidth,\n  /* Maintain the aspect ratio and scale the texture to fit the height of the canvas. */\n  AspectFitHeight,\n  /* Scale the texture fully fills the canvas. */\n  Fill\n}\n", "import { MathUtil, Matrix } from \"@galacean/engine-math\";\nimport { Logger } from \"../base/Logger\";\nimport { Mesh } from \"../graphic/Mesh\";\nimport { Material } from \"../material\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\n\n/**\n * Sky.\n */\nexport class Sky {\n  private static _epsilon: number = 1e-6;\n  private static _viewProjMatrix: Matrix = new Matrix();\n  private static _projectionMatrix: Matrix = new Matrix(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, Sky._epsilon - 1, -1, 0, 0, 0, 0);\n\n  /** Material of the sky. */\n  material: Material;\n  /** Mesh of the sky. */\n  mesh: Mesh;\n\n  /**\n   * @internal\n   */\n  _render(context: RenderContext): void {\n    const { material, mesh } = this;\n    if (!material) {\n      Logger.warn(\"The material of sky is not defined.\");\n      return;\n    }\n    if (!mesh) {\n      Logger.warn(\"The mesh of sky is not defined.\");\n      return;\n    }\n\n    const { engine, aspectRatio, fieldOfView, viewMatrix, shaderData: cameraShaderData } = context.camera;\n    const { _viewProjMatrix: viewProjMatrix, _projectionMatrix: projectionMatrix } = Sky;\n    const rhi = engine._hardwareRenderer;\n    const { shaderData: materialShaderData, shader, renderState } = material;\n\n    // no-scale view matrix\n    viewProjMatrix.copyFrom(viewMatrix);\n    const e = viewProjMatrix.elements;\n    e[12] = e[13] = e[14] = 0;\n\n    // epsilon-infinity projection matrix http://terathon.com/gdc07_lengyel.pdf\n    const f = 1.0 / Math.tan(MathUtil.degreeToRadian(fieldOfView) / 2);\n    projectionMatrix.elements[0] = f / aspectRatio;\n    projectionMatrix.elements[5] = f;\n\n    // view-proj matrix\n    Matrix.multiply(projectionMatrix, viewProjMatrix, viewProjMatrix);\n    const originViewProjMatrix = cameraShaderData.getMatrix(RenderContext._vpMatrixProperty);\n    cameraShaderData.setMatrix(RenderContext._vpMatrixProperty, viewProjMatrix);\n\n    const compileMacros = Shader._compileMacros;\n    ShaderMacroCollection.unionCollection(\n      context.camera._globalShaderMacro,\n      materialShaderData._macroCollection,\n      compileMacros\n    );\n    const program = shader.passes[0]._getShaderProgram(engine, compileMacros);\n    program.bind();\n    program.groupingOtherUniformBlock();\n    program.uploadAll(program.cameraUniformBlock, cameraShaderData);\n    program.uploadAll(program.materialUniformBlock, materialShaderData);\n    program.uploadUnGroupTextures();\n\n    renderState._apply(engine, false);\n    rhi.drawPrimitive(mesh, mesh.subMesh, program);\n    cameraShaderData.setMatrix(RenderContext._vpMatrixProperty, originViewProjMatrix);\n  }\n}\n", "import { Color, Vector2, Vector3 } from \"@galacean/engine-math\";\nimport { ModelMesh } from \".\";\nimport { Engine } from \"./Engine\";\nimport { BackgroundMode } from \"./enums/BackgroundMode\";\nimport { BackgroundTextureFillMode } from \"./enums/BackgroundTextureFillMode\";\nimport { Sky } from \"./sky/Sky\";\nimport { Texture2D } from \"./texture\";\n\n/**\n * Background of scene.\n */\nexport class Background {\n  /**\n   * Background mode.\n   * @defaultValue `BackgroundMode.SolidColor`\n   * @remarks If using `BackgroundMode.Sky` mode and material or mesh of the `sky` is not defined, it will downgrade to `BackgroundMode.SolidColor`.\n   */\n  mode: BackgroundMode = BackgroundMode.SolidColor;\n\n  /**\n   * Background solid color.\n   * @defaultValue `new Color(0.25, 0.25, 0.25, 1.0)`\n   * @remarks When `mode` is `BackgroundMode.SolidColor`, the property will take effects.\n   */\n  solidColor: Color = new Color(0.25, 0.25, 0.25, 1.0);\n\n  /**\n   * Background sky.\n   * @remarks When `mode` is `BackgroundMode.Sky`, the property will take effects.\n   */\n  readonly sky: Sky = new Sky();\n\n  /** @internal */\n  _textureFillMode: BackgroundTextureFillMode = BackgroundTextureFillMode.AspectFitHeight;\n\n  /** @internal */\n  _mesh: ModelMesh;\n\n  private _texture: Texture2D = null;\n\n  /**\n   * Background texture.\n   * @remarks When `mode` is `BackgroundMode.Texture`, the property will take effects.\n   */\n  get texture(): Texture2D {\n    return this._texture;\n  }\n\n  set texture(value: Texture2D) {\n    if (this._texture !== value) {\n      this._texture = value;\n      this._engine._backgroundTextureMaterial.shaderData.setTexture(\"u_baseTexture\", value);\n    }\n  }\n\n  /**\n   * @internal\n   * Background texture fill mode.\n   * @remarks When `mode` is `BackgroundMode.Texture`, the property will take effects.\n   * @defaultValue `BackgroundTextureFillMode.FitHeight`\n   */\n  get textureFillMode(): BackgroundTextureFillMode {\n    return this._textureFillMode;\n  }\n\n  set textureFillMode(value: BackgroundTextureFillMode) {\n    if (value !== this._textureFillMode) {\n      this._textureFillMode = value;\n      this._resizeBackgroundTexture();\n    }\n  }\n\n  /**\n   * Constructor of Background.\n   * @param _engine Engine Which the background belongs to.\n   */\n  constructor(private _engine: Engine) {\n    this._mesh = this._createPlane(_engine);\n  }\n\n  /**\n   * @internal\n   */\n  _resizeBackgroundTexture(): void {\n    if (!this._texture) {\n      return;\n    }\n    const { canvas } = this._engine;\n    const { width, height } = canvas;\n    const { _mesh:_backgroundTextureMesh } = this;\n    const positions = _backgroundTextureMesh.getPositions();\n\n    switch (this._textureFillMode) {\n      case BackgroundTextureFillMode.Fill:\n        positions[0].set(-1, -1, 1);\n        positions[1].set(1, -1, 1);\n        positions[2].set(-1, 1, 1);\n        positions[3].set(1, 1, 1);\n        break;\n      case BackgroundTextureFillMode.AspectFitWidth:\n        const fitWidthScale = (this._texture.height * width) / this.texture.width / height;\n        positions[0].set(-1, -fitWidthScale, 1);\n        positions[1].set(1, -fitWidthScale, 1);\n        positions[2].set(-1, fitWidthScale, 1);\n        positions[3].set(1, fitWidthScale, 1);\n        break;\n      case BackgroundTextureFillMode.AspectFitHeight:\n        const fitHeightScale = (this._texture.width * height) / this.texture.height / width;\n        positions[0].set(-fitHeightScale, -1, 1);\n        positions[1].set(fitHeightScale, -1, 1);\n        positions[2].set(-fitHeightScale, 1, 1);\n        positions[3].set(fitHeightScale, 1, 1);\n        break;\n    }\n    _backgroundTextureMesh.setPositions(positions);\n    _backgroundTextureMesh.uploadData(false);\n  }\n\n  private _createPlane(\n    engine: Engine,\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    mesh.isGCIgnored = true;\n    const indices = new Uint8Array([1, 2, 0, 1, 3, 2]);\n\n    const positions: Vector3[] = new Array(4);\n    const uvs: Vector2[] = new Array(4);\n\n    for (let i = 0; i < 4; ++i) {\n      positions[i] = new Vector3();\n      uvs[i] = new Vector2(i % 2, 1 - ((i * 0.5) | 0));\n    }\n\n    mesh.setPositions(positions);\n    mesh.setUVs(uvs);\n    mesh.setIndices(indices);\n\n    mesh.uploadData(false);\n    mesh.addSubMesh(0, indices.length);\n    return mesh;\n  }\n}\n", "/**\n * Fog Mode.\n */\nexport enum FogMode {\n  /** Disable fog. */\n  None,\n  /** Linear fog. */\n  Linear,\n  /** Exponential fog. */\n  Exponential,\n  /** Exponential squared fog. */\n  ExponentialSquared\n}\n", "/**\n * Diffuse mode.\n */\nexport enum DiffuseMode {\n  /** Solid color mode. */\n  SolidColor,\n\n  /**\n   * SH mode\n   * @remarks\n   * Use SH3 to represent irradiance environment maps efficiently, allowing for interactive rendering of diffuse objects under distant illumination.\n   */\n  SphericalHarmonics\n}\n", "import { Color, SphericalHarmonics3 } from \"@galacean/engine-math\";\nimport { Scene } from \"../Scene\";\nimport { Shader, ShaderData } from \"../shader\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { TextureCube } from \"../texture\";\nimport { DiffuseMode } from \"./enums/DiffuseMode\";\n\n/**\n * Ambient light.\n */\nexport class AmbientLight {\n  private static _shMacro: ShaderMacro = Shader.getMacroByName(\"O3_USE_SH\");\n  private static _specularMacro: ShaderMacro = Shader.getMacroByName(\"O3_USE_SPECULAR_ENV\");\n  private static _decodeRGBMMacro: ShaderMacro = Shader.getMacroByName(\"O3_DECODE_ENV_RGBM\");\n\n  private static _diffuseColorProperty: ShaderProperty = Shader.getPropertyByName(\"u_envMapLight.diffuse\");\n  private static _diffuseSHProperty: ShaderProperty = Shader.getPropertyByName(\"u_env_sh\");\n  private static _diffuseIntensityProperty: ShaderProperty = Shader.getPropertyByName(\"u_envMapLight.diffuseIntensity\");\n  private static _specularTextureProperty: ShaderProperty = Shader.getPropertyByName(\"u_env_specularSampler\");\n  private static _specularIntensityProperty: ShaderProperty = Shader.getPropertyByName(\n    \"u_envMapLight.specularIntensity\"\n  );\n  private static _mipLevelProperty: ShaderProperty = Shader.getPropertyByName(\"u_envMapLight.mipMapLevel\");\n\n  private _diffuseSphericalHarmonics: SphericalHarmonics3;\n  private _diffuseSolidColor: Color = new Color(0.212, 0.227, 0.259);\n  private _diffuseIntensity: number = 1.0;\n  private _specularTexture: TextureCube;\n  private _specularIntensity: number = 1.0;\n  private _diffuseMode: DiffuseMode = DiffuseMode.SolidColor;\n  private _shArray: Float32Array = new Float32Array(27);\n  private _scenes: Scene[] = [];\n  private _specularTextureDecodeRGBM: boolean = false;\n\n  /**\n   * Whether to decode from specularTexture with RGBM format.\n   */\n  get specularTextureDecodeRGBM(): boolean {\n    return this._specularTextureDecodeRGBM;\n  }\n\n  set specularTextureDecodeRGBM(value: boolean) {\n    this._specularTextureDecodeRGBM = value;\n\n    const scenes = this._scenes;\n    for (let i = 0, n = scenes.length; i < n; i++) {\n      this._setSpecularTextureDecodeRGBM(scenes[i].shaderData);\n    }\n  }\n\n  /**\n   * Diffuse mode of ambient light.\n   */\n  get diffuseMode(): DiffuseMode {\n    return this._diffuseMode;\n  }\n\n  set diffuseMode(value: DiffuseMode) {\n    this._diffuseMode = value;\n\n    const scenes = this._scenes;\n    for (let i = 0, n = scenes.length; i < n; i++) {\n      this._setDiffuseMode(scenes[i].shaderData);\n    }\n  }\n\n  /**\n   * Diffuse reflection solid color.\n   * @remarks Effective when diffuse reflection mode is `DiffuseMode.SolidColor`.\n   */\n  get diffuseSolidColor(): Color {\n    return this._diffuseSolidColor;\n  }\n\n  set diffuseSolidColor(value: Color) {\n    if (value !== this._diffuseSolidColor) {\n      this._diffuseSolidColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Diffuse reflection spherical harmonics 3.\n   * @remarks Effective when diffuse reflection mode is `DiffuseMode.SphericalHarmonics`.\n   */\n  get diffuseSphericalHarmonics(): SphericalHarmonics3 {\n    return this._diffuseSphericalHarmonics;\n  }\n\n  set diffuseSphericalHarmonics(value: SphericalHarmonics3) {\n    this._diffuseSphericalHarmonics = value;\n    if (value) {\n      this._preComputeSH(value, this._shArray);\n      const scenes = this._scenes;\n      for (let i = 0, n = scenes.length; i < n; i++) {\n        scenes[i].shaderData.setFloatArray(AmbientLight._diffuseSHProperty, this._shArray);\n      }\n    }\n  }\n\n  /**\n   * Diffuse reflection intensity.\n   */\n  get diffuseIntensity(): number {\n    return this._diffuseIntensity;\n  }\n\n  set diffuseIntensity(value: number) {\n    this._diffuseIntensity = value;\n\n    const scenes = this._scenes;\n    for (let i = 0, n = scenes.length; i < n; i++) {\n      scenes[i].shaderData.setFloat(AmbientLight._diffuseIntensityProperty, value);\n    }\n  }\n\n  /**\n   * Specular reflection texture.\n   */\n  get specularTexture(): TextureCube {\n    return this._specularTexture;\n  }\n\n  set specularTexture(value: TextureCube) {\n    this._specularTexture = value;\n\n    const scenes = this._scenes;\n    for (let i = 0, n = scenes.length; i < n; i++) {\n      this._setSpecularTexture(scenes[i].shaderData);\n    }\n  }\n\n  /**\n   * Specular reflection intensity.\n   */\n  get specularIntensity(): number {\n    return this._specularIntensity;\n  }\n\n  set specularIntensity(value: number) {\n    this._specularIntensity = value;\n\n    for (let i = 0, n = this._scenes.length; i < n; i++) {\n      this._scenes[i].shaderData.setFloat(AmbientLight._specularIntensityProperty, value);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _addToScene(scene: Scene): void {\n    this._scenes.push(scene);\n\n    const shaderData = scene.shaderData;\n    shaderData.setColor(AmbientLight._diffuseColorProperty, this._diffuseSolidColor);\n    shaderData.setFloat(AmbientLight._diffuseIntensityProperty, this._diffuseIntensity);\n    shaderData.setFloat(AmbientLight._specularIntensityProperty, this._specularIntensity);\n    shaderData.setFloatArray(AmbientLight._diffuseSHProperty, this._shArray);\n\n    this._setDiffuseMode(shaderData);\n    this._setSpecularTextureDecodeRGBM(shaderData);\n    this._setSpecularTexture(shaderData);\n  }\n\n  /**\n   * @internal\n   */\n  _removeFromScene(scene: Scene): void {\n    const scenes = this._scenes;\n    const index = scenes.indexOf(scene);\n    scenes.splice(index, 1);\n  }\n\n  private _setDiffuseMode(sceneShaderData: ShaderData): void {\n    if (this._diffuseMode === DiffuseMode.SphericalHarmonics) {\n      sceneShaderData.enableMacro(AmbientLight._shMacro);\n    } else {\n      sceneShaderData.disableMacro(AmbientLight._shMacro);\n    }\n  }\n\n  private _setSpecularTexture(sceneShaderData: ShaderData): void {\n    if (this._specularTexture) {\n      sceneShaderData.setTexture(AmbientLight._specularTextureProperty, this._specularTexture);\n      sceneShaderData.setFloat(AmbientLight._mipLevelProperty, this._specularTexture.mipmapCount - 1);\n      sceneShaderData.enableMacro(AmbientLight._specularMacro);\n    } else {\n      sceneShaderData.disableMacro(AmbientLight._specularMacro);\n    }\n  }\n\n  private _setSpecularTextureDecodeRGBM(sceneShaderData: ShaderData): void {\n    if (this._specularTextureDecodeRGBM) {\n      sceneShaderData.enableMacro(AmbientLight._decodeRGBMMacro);\n    } else {\n      sceneShaderData.disableMacro(AmbientLight._decodeRGBMMacro);\n    }\n  }\n\n  private _preComputeSH(sh: SphericalHarmonics3, out: Float32Array): void {\n    /**\n     * Basis constants\n     *\n     * 0: 1/2 * Math.sqrt(1 / Math.PI)\n     *\n     * 1: -1/2 * Math.sqrt(3 / Math.PI)\n     * 2: 1/2 * Math.sqrt(3 / Math.PI)\n     * 3: -1/2 * Math.sqrt(3 / Math.PI)\n     *\n     * 4: 1/2 * Math.sqrt(15 / Math.PI)\n     * 5: -1/2 * Math.sqrt(15 / Math.PI)\n     * 6: 1/4 * Math.sqrt(5 / Math.PI)\n     * 7: -1/2 * Math.sqrt(15 / Math.PI)\n     * 8: 1/4 * Math.sqrt(15 / Math.PI)\n     */\n\n    /**\n     * Convolution kernel\n     *\n     * 0: Math.PI\n     * 1: (2 * Math.PI) / 3\n     * 2: Math.PI / 4\n     */\n\n    const src = sh.coefficients;\n\n    // l0\n    out[0] = src[0] * 0.886227; // kernel0 * basis0 = 0.886227\n    out[1] = src[1] * 0.886227;\n    out[2] = src[2] * 0.886227;\n\n    // l1\n    out[3] = src[3] * -1.023327; // kernel1 * basis1 = -1.023327;\n    out[4] = src[4] * -1.023327;\n    out[5] = src[5] * -1.023327;\n    out[6] = src[6] * 1.023327; // kernel1 * basis2 = 1.023327\n    out[7] = src[7] * 1.023327;\n    out[8] = src[8] * 1.023327;\n    out[9] = src[9] * -1.023327; // kernel1 * basis3 = -1.023327\n    out[10] = src[10] * -1.023327;\n    out[11] = src[11] * -1.023327;\n\n    // l2\n    out[12] = src[12] * 0.858086; // kernel2 * basis4 = 0.858086\n    out[13] = src[13] * 0.858086;\n    out[14] = src[14] * 0.858086;\n    out[15] = src[15] * -0.858086; // kernel2 * basis5 = -0.858086\n    out[16] = src[16] * -0.858086;\n    out[17] = src[17] * -0.858086;\n    out[18] = src[18] * 0.247708; // kernel2 * basis6 = 0.247708\n    out[19] = src[19] * 0.247708;\n    out[20] = src[20] * 0.247708;\n    out[21] = src[21] * -0.858086; // kernel2 * basis7 = -0.858086\n    out[22] = src[22] * -0.858086;\n    out[23] = src[23] * -0.858086;\n    out[24] = src[24] * 0.429042; // kernel2 * basis8 = 0.429042\n    out[25] = src[25] * 0.429042;\n    out[26] = src[26] * 0.429042;\n  }\n}\n", "import { Color, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { Background } from \"./Background\";\nimport { EngineObject, Logger } from \"./base\";\nimport { Camera } from \"./Camera\";\nimport { Engine } from \"./Engine\";\nimport { Entity } from \"./Entity\";\nimport { FogMode } from \"./enums/FogMode\";\nimport { Light } from \"./lighting\";\nimport { AmbientLight } from \"./lighting/AmbientLight\";\nimport { Shader } from \"./shader\";\nimport { ShaderDataGroup } from \"./shader/enums/ShaderDataGroup\";\nimport { ShaderData } from \"./shader/ShaderData\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { ShadowCascadesMode } from \"./shadow/enum/ShadowCascadesMode\";\nimport { ShadowResolution } from \"./shadow/enum/ShadowResolution\";\nimport { ShadowType } from \"./shadow/enum/ShadowType\";\n\n/**\n * Scene.\n */\nexport class Scene extends EngineObject {\n  private static _fogColorProperty = Shader.getPropertyByName(\"oasis_FogColor\");\n  private static _fogParamsProperty = Shader.getPropertyByName(\"oasis_FogParams\");\n\n  /** Scene name. */\n  name: string;\n\n  /** The background of the scene. */\n  readonly background: Background = new Background(this._engine);\n  /** Scene-related shader data. */\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Scene);\n\n  /** If cast shadows. */\n  castShadows: boolean = true;\n  /** The resolution of the shadow maps. */\n  shadowResolution: ShadowResolution = ShadowResolution.Medium;\n  /** The splits of two cascade distribution. */\n  shadowTwoCascadeSplits: number = 1.0 / 3.0;\n  /** The splits of four cascade distribution. */\n  shadowFourCascadeSplits: Vector3 = new Vector3(1.0 / 15, 3.0 / 15.0, 7.0 / 15.0);\n  /** Max Shadow distance. */\n  shadowDistance: number = 50;\n\n  /** @internal */\n  _activeCameras: Camera[] = [];\n  /** @internal */\n  _isActiveInEngine: boolean = false;\n  /** @internal */\n  _globalShaderMacro: ShaderMacroCollection = new ShaderMacroCollection();\n  /** @internal */\n  _rootEntities: Entity[] = [];\n  /** @internal */\n  _sunLight: Light;\n\n  private _shadowCascades: ShadowCascadesMode = ShadowCascadesMode.NoCascades;\n  private _ambientLight: AmbientLight;\n  private _fogMode: FogMode = FogMode.None;\n  private _fogColor: Color = new Color(0.5, 0.5, 0.5, 1.0);\n  private _fogStart: number = 0;\n  private _fogEnd: number = 300;\n  private _fogDensity: number = 0.01;\n  private _fogParams: Vector4 = new Vector4();\n\n  /**\n   *  Number of cascades to use for directional light shadows.\n   */\n  get shadowCascades(): ShadowCascadesMode {\n    return this._shadowCascades;\n  }\n\n  set shadowCascades(value: ShadowCascadesMode) {\n    if (this._shadowCascades !== value) {\n      this.shaderData.enableMacro(\"CASCADED_COUNT\", value.toString());\n      this._shadowCascades = value;\n    }\n  }\n\n  /**\n   * Ambient light.\n   */\n  get ambientLight(): AmbientLight {\n    return this._ambientLight;\n  }\n\n  set ambientLight(value: AmbientLight) {\n    if (!value) {\n      Logger.warn(\"The scene must have one ambient light\");\n      return;\n    }\n\n    const lastAmbientLight = this._ambientLight;\n    if (lastAmbientLight !== value) {\n      lastAmbientLight && lastAmbientLight._removeFromScene(this);\n      value._addToScene(this);\n      this._ambientLight = value;\n    }\n  }\n\n  /**\n   * Fog mode.\n   * @remarks\n   * If set to `FogMode.None`, the fog will be disabled.\n   * If set to `FogMode.Linear`, the fog will be linear and controlled by `fogStart` and `fogEnd`.\n   * If set to `FogMode.Exponential`, the fog will be exponential and controlled by `fogDensity`.\n   * If set to `FogMode.ExponentialSquared`, the fog will be exponential squared and controlled by `fogDensity`.\n   */\n  get fogMode(): FogMode {\n    return this._fogMode;\n  }\n\n  set fogMode(value: FogMode) {\n    if (this._fogMode !== value) {\n      this.shaderData.enableMacro(\"OASIS_FOG_MODE\", value.toString());\n      this._fogMode = value;\n    }\n  }\n\n  /**\n   * Fog color.\n   */\n  get fogColor(): Color {\n    return this._fogColor;\n  }\n\n  set fogColor(value: Color) {\n    if (this._fogColor !== value) {\n      this._fogColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Fog start.\n   */\n  get fogStart(): number {\n    return this._fogStart;\n  }\n\n  set fogStart(value: number) {\n    if (this._fogStart !== value) {\n      this._computeLinearFogParams(value, this._fogEnd);\n      this._fogStart = value;\n    }\n  }\n\n  /**\n   * Fog end.\n   */\n  get fogEnd(): number {\n    return this._fogEnd;\n  }\n\n  set fogEnd(value: number) {\n    if (this._fogEnd !== value) {\n      this._computeLinearFogParams(this._fogStart, value);\n      this._fogEnd = value;\n    }\n  }\n\n  /**\n   * Fog density.\n   */\n  get fogDensity(): number {\n    return this._fogDensity;\n  }\n\n  set fogDensity(value: number) {\n    if (this._fogDensity !== value) {\n      this._computeExponentialFogParams(value);\n      this._fogDensity = value;\n    }\n  }\n\n  /**\n   * Count of root entities.\n   */\n  get rootEntitiesCount(): number {\n    return this._rootEntities.length;\n  }\n\n  /**\n   * Root entity collection.\n   */\n  get rootEntities(): Readonly<Entity[]> {\n    return this._rootEntities;\n  }\n\n  /**\n   * Create scene.\n   * @param engine - Engine\n   * @param name - Name\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name || \"\";\n\n    const shaderData = this.shaderData;\n    shaderData._addRefCount(1);\n    this.ambientLight = new AmbientLight();\n    engine.sceneManager._allScenes.push(this);\n\n    shaderData.enableMacro(\"OASIS_FOG_MODE\", this._fogMode.toString());\n    shaderData.enableMacro(\"CASCADED_COUNT\", this.shadowCascades.toString());\n    shaderData.setColor(Scene._fogColorProperty, this._fogColor);\n    shaderData.setVector4(Scene._fogParamsProperty, this._fogParams);\n\n    this._computeLinearFogParams(this._fogStart, this._fogEnd);\n    this._computeExponentialFogParams(this._fogDensity);\n  }\n\n  /**\n   * Create root entity.\n   * @param name - Entity name\n   * @returns Entity\n   */\n  createRootEntity(name?: string): Entity {\n    const entity = new Entity(this._engine, name);\n    this.addRootEntity(entity);\n    return entity;\n  }\n\n  /**\n   * Append an entity.\n   * @param entity - The root entity to add\n   */\n  addRootEntity(entity: Entity): void;\n\n  /**\n   * Append an entity.\n   * @param index - specified index\n   * @param entity - The root entity to add\n   */\n  addRootEntity(index: number, entity: Entity): void;\n\n  addRootEntity(indexOrChild: number | Entity, entity?: Entity): void {\n    let index: number;\n    if (typeof indexOrChild === \"number\") {\n      index = indexOrChild;\n    } else {\n      index = undefined;\n      entity = indexOrChild;\n    }\n\n    const isRoot = entity._isRoot;\n    // let entity become root\n    if (!isRoot) {\n      entity._isRoot = true;\n      entity._removeFromParent();\n    }\n\n    // add or remove from scene's rootEntities\n    const oldScene = entity._scene;\n    if (oldScene !== this) {\n      if (oldScene && isRoot) {\n        oldScene._removeFromEntityList(entity);\n      }\n      this._addToRootEntityList(index, entity);\n      Entity._traverseSetOwnerScene(entity, this);\n    } else if (!isRoot) {\n      this._addToRootEntityList(index, entity);\n    }\n\n    // process entity active/inActive\n    if (this._isActiveInEngine) {\n      !entity._isActiveInHierarchy && entity._isActive && entity._processActive();\n    } else {\n      entity._isActiveInHierarchy && entity._processInActive();\n    }\n  }\n\n  /**\n   * Remove an entity.\n   * @param entity - The root entity to remove\n   */\n  removeRootEntity(entity: Entity): void {\n    if (entity._isRoot && entity._scene == this) {\n      this._removeFromEntityList(entity);\n      entity._isRoot = false;\n      this._isActiveInEngine && entity._isActiveInHierarchy && entity._processInActive();\n      Entity._traverseSetOwnerScene(entity, null);\n    }\n  }\n\n  /**\n   * Get root entity from index.\n   * @param index - Index\n   * @returns Entity\n   */\n  getRootEntity(index: number = 0): Entity | null {\n    return this._rootEntities[index];\n  }\n\n  /**\n   * Find entity globally by name.\n   * @param name - Entity name\n   * @returns Entity\n   */\n  findEntityByName(name: string): Entity | null {\n    const rootEntities = this._rootEntities;\n    for (let i = 0, n = rootEntities.length; i < n; i++) {\n      const entity = rootEntities[i].findByName(name);\n      if (entity) {\n        return entity;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Find entity globally by name,use ‘/’ symbol as a path separator.\n   * @param path - Entity's path\n   * @returns Entity\n   */\n  findEntityByPath(path: string): Entity | null {\n    const splits = path.split(\"/\").filter(Boolean);\n    for (let i = 0, n = this.rootEntitiesCount; i < n; i++) {\n      let findEntity = this.getRootEntity(i);\n      if (findEntity.name != splits[0]) continue;\n      for (let j = 1, m = splits.length; j < m; ++j) {\n        findEntity = Entity._findChildByName(findEntity, splits[j]);\n        if (!findEntity) break;\n      }\n      return findEntity;\n    }\n    return null;\n  }\n\n  /**\n   * Destroy this scene.\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n\n    this._destroy();\n\n    const allScenes = this.engine.sceneManager._allScenes;\n    allScenes.splice(allScenes.indexOf(this), 1);\n  }\n\n  /**\n   * @internal\n   */\n  _attachRenderCamera(camera: Camera): void {\n    const index = this._activeCameras.indexOf(camera);\n    if (index === -1) {\n      this._activeCameras.push(camera);\n    } else {\n      Logger.warn(\"Camera already attached.\");\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _detachRenderCamera(camera: Camera): void {\n    const index = this._activeCameras.indexOf(camera);\n    if (index !== -1) {\n      this._activeCameras.splice(index, 1);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _processActive(active: boolean): void {\n    this._isActiveInEngine = active;\n    const rootEntities = this._rootEntities;\n    for (let i = rootEntities.length - 1; i >= 0; i--) {\n      const entity = rootEntities[i];\n      if (entity._isActive) {\n        active ? entity._processActive() : entity._processInActive();\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(): void {\n    const shaderData = this.shaderData;\n    const lightManager = this._engine._lightManager;\n\n    lightManager._updateShaderData(this.shaderData);\n    const sunLightIndex = lightManager._getSunLightIndex();\n    if (sunLightIndex !== -1) {\n      this._sunLight = lightManager._directLights.get(sunLightIndex);\n    }\n\n    if (this.castShadows && this._sunLight && this._sunLight.shadowType !== ShadowType.None) {\n      shaderData.enableMacro(\"SHADOW_TYPE\", this._sunLight.shadowType.toString());\n    } else {\n      shaderData.disableMacro(\"SHADOW_TYPE\");\n    }\n\n    // union scene and camera macro.\n    ShaderMacroCollection.unionCollection(\n      this.engine._macroCollection,\n      shaderData._macroCollection,\n      this._globalShaderMacro\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _removeFromEntityList(entity: Entity): void {\n    const rootEntities = this._rootEntities;\n    let index = entity._siblingIndex;\n    rootEntities.splice(index, 1);\n    for (let n = rootEntities.length; index < n; index++) {\n      rootEntities[index]._siblingIndex--;\n    }\n    entity._siblingIndex = -1;\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    this._isActiveInEngine && (this._engine.sceneManager.activeScene = null);\n    while (this.rootEntitiesCount > 0) {\n      this._rootEntities[0].destroy();\n    }\n    this._activeCameras.length = 0;\n    this.shaderData._addRefCount(-1);\n  }\n\n  private _addToRootEntityList(index: number, rootEntity: Entity): void {\n    const rootEntities = this._rootEntities;\n    const rootEntityCount = rootEntities.length;\n    if (index === undefined) {\n      rootEntity._siblingIndex = rootEntityCount;\n      rootEntities.push(rootEntity);\n    } else {\n      if (index < 0 || index > rootEntityCount) {\n        throw `The index ${index} is out of child list bounds ${rootEntityCount}`;\n      }\n      rootEntity._siblingIndex = index;\n      rootEntities.splice(index, 0, rootEntity);\n      for (let i = index + 1, n = rootEntityCount + 1; i < n; i++) {\n        rootEntities[i]._siblingIndex++;\n      }\n    }\n  }\n\n  private _computeLinearFogParams(fogStart: number, fogEnd: number): void {\n    const fogRange = fogEnd - fogStart;\n    const fogParams = this._fogParams;\n    fogParams.x = -1 / fogRange;\n    fogParams.y = fogEnd / fogRange;\n  }\n\n  private _computeExponentialFogParams(density: number) {\n    this._fogParams.z = density / Math.LN2;\n    this._fogParams.w = density / Math.sqrt(Math.LN2);\n  }\n}\n", "import { AssetPromise } from \"./asset/AssetPromise\";\nimport { Engine } from \"./Engine\";\nimport { Scene } from \"./Scene\";\n\n/**\n * Scene manager.\n */\nexport class SceneManager {\n  /** @internal */\n  _allScenes: Scene[] = [];\n  /** @internal */\n  _activeScene: Scene;\n\n  /**\n   * Get the activated scene.\n   */\n  get activeScene(): Scene {\n    return this._activeScene;\n  }\n\n  set activeScene(scene: Scene) {\n    const oldScene = this._activeScene;\n    if (oldScene !== scene) {\n      oldScene && oldScene._processActive(false);\n      scene && scene._processActive(true);\n      this._activeScene = scene;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(public readonly engine: Engine) {}\n\n  /**\n   * Load and activate scene.\n   * @param url - the path of the scene\n   * @param destroyOldScene - whether to destroy old scene information\n   * @returns scene promise\n   */\n  loadScene(url: string, destroyOldScene: boolean = true): AssetPromise<Scene> {\n    const scenePromise = this.engine.resourceManager.load<Scene>(url);\n    scenePromise.then((scene: Scene) => {\n      const oldScene: Scene = this._activeScene;\n      this.activeScene = scene;\n      if (oldScene && destroyOldScene) {\n        oldScene.destroy();\n      }\n    });\n    return scenePromise;\n  }\n\n  /**\n   * Merge the source scene into the target scene.\n   * @remarks the global information of destScene will be used after the merge, and the lightingMap information will be merged.\n   * @param sourceScene - source scene\n   * @param destScene - target scene\n   */\n  mergeScenes(sourceScene: Scene, destScene: Scene): void {\n    const oldRootEntities = sourceScene.rootEntities;\n    for (let i: number = 0, n: number = oldRootEntities.length; i < n; i++) {\n      destScene.addRootEntity(oldRootEntities[i]);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _destroyAllScene(): void {\n    const allScenes = this._allScenes;\n    for (let i = 0, n = allScenes.length; i < n; i++) {\n      allScenes[i]._destroy();\n    }\n    allScenes.length = 0;\n  }\n}\n", "import blinnPhongFs from \"../shaderlib/extra/blinn-phong.fs.glsl\";\nimport blinnPhongVs from \"../shaderlib/extra/blinn-phong.vs.glsl\";\nimport particleFs from \"../shaderlib/extra/particle.fs.glsl\";\nimport particleVs from \"../shaderlib/extra/particle.vs.glsl\";\nimport pbrFs from \"../shaderlib/extra/pbr.fs.glsl\";\nimport pbrSpecularFs from \"../shaderlib/extra/pbr-specular.fs.glsl\";\nimport pbrVs from \"../shaderlib/extra/pbr.vs.glsl\";\nimport shadowMapFs from \"../shaderlib/extra/shadow-map.fs.glsl\";\nimport shadowMapVs from \"../shaderlib/extra/shadow-map.vs.glsl\";\nimport skyboxFs from \"../shaderlib/extra/skybox.fs.glsl\";\nimport skyboxVs from \"../shaderlib/extra/skybox.vs.glsl\";\nimport spriteMaskFs from \"../shaderlib/extra/sprite-mask.fs.glsl\";\nimport spriteMaskVs from \"../shaderlib/extra/sprite-mask.vs.glsl\";\nimport spriteFs from \"../shaderlib/extra/sprite.fs.glsl\";\nimport spriteVs from \"../shaderlib/extra/sprite.vs.glsl\";\nimport unlitFs from \"../shaderlib/extra/unlit.fs.glsl\";\nimport unlitVs from \"../shaderlib/extra/unlit.vs.glsl\";\nimport backgroundTextureVs from \"../shaderlib/extra/background-texture.vs.glsl\";\nimport backgroundTextureFs from \"../shaderlib/extra/background-texture.fs.glsl\";\nimport { Shader } from \"./Shader\";\n\n/**\n * Internal shader pool.\n * @internal\n */\nexport class ShaderPool {\n  static init(): void {\n    Shader.create(\"blinn-phong\", blinnPhongVs, blinnPhongFs);\n    Shader.create(\"pbr\", pbrVs, pbrFs);\n    Shader.create(\"pbr-specular\", pbrVs, pbrSpecularFs);\n    Shader.create(\"unlit\", unlitVs, unlitFs);\n    Shader.create(\"shadow-map\", shadowMapVs, shadowMapFs);\n    Shader.create(\"skybox\", skyboxVs, skyboxFs);\n    Shader.create(\"particle-shader\", particleVs, particleFs);\n    Shader.create(\"SpriteMask\", spriteMaskVs, spriteMaskFs);\n    Shader.create(\"Sprite\", spriteVs, spriteFs);\n    Shader.create(\"background-texture\", backgroundTextureVs, backgroundTextureFs);\n  }\n}\n", "import { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderProgram } from \"./ShaderProgram\";\n\n/**\n * Shader program pool.\n * @internal\n */\nexport class ShaderProgramPool {\n  private _cacheHierarchy: number = 1;\n  private _cacheMap: object = Object.create(null);\n  private _lastQueryMap: Record<number, ShaderProgram>;\n  private _lastQueryKey: number;\n\n  /**\n   * Get shader program by macro collection.\n   * @param macros - macro collection\n   * @returns shader program\n   */\n  get(macros: ShaderMacroCollection): ShaderProgram | null {\n    let cacheMap = this._cacheMap;\n    const maskLength = macros._length;\n    if (maskLength > this._cacheHierarchy) {\n      this._resizeCacheMapHierarchy(cacheMap, 0, maskLength);\n    }\n\n    const mask = macros._mask;\n    const endIndex = macros._length - 1;\n    const maxEndIndex = this._cacheHierarchy - 1;\n    for (let i = 0; i < maxEndIndex; i++) {\n      const subMask = endIndex < i ? 0 : mask[i];\n      let subCacheShaders: object = cacheMap[subMask];\n      subCacheShaders || (cacheMap[subMask] = subCacheShaders = Object.create(null));\n      cacheMap = subCacheShaders;\n    }\n\n    const cacheKey = endIndex < maxEndIndex ? 0 : mask[maxEndIndex];\n    const shader = (<Record<number, ShaderProgram>>cacheMap)[cacheKey];\n    if (!shader) {\n      this._lastQueryKey = cacheKey;\n      this._lastQueryMap = <Record<number, ShaderProgram>>cacheMap;\n    }\n    return shader;\n  }\n\n  /**\n   * Cache the shader program.\n   *\n   * @remarks\n   * The method must return an empty value after calling get() to run normally.\n   *\n   * @param shaderProgram - shader program\n   */\n  cache(shaderProgram: ShaderProgram): void {\n    this._lastQueryMap[this._lastQueryKey] = shaderProgram;\n  }\n\n  private _resizeCacheMapHierarchy(cacheMap: object, hierarchy: number, resizeLength: number): void {\n    // only expand but not shrink.\n    const end = this._cacheHierarchy - 1;\n    if (hierarchy == end) {\n      for (let k in cacheMap) {\n        const shader: ShaderProgram = cacheMap[k];\n        let subCacheMap = cacheMap;\n        for (let i = 0, n = resizeLength - end; i < n; i++) {\n          if (i == n - 1) {\n            subCacheMap[0] = shader;\n          } else {\n            subCacheMap = subCacheMap[i == 0 ? k : 0] = Object.create(null);\n          }\n        }\n      }\n      this._cacheHierarchy = resizeLength;\n    } else {\n      for (let k in cacheMap) {\n        this._resizeCacheMapHierarchy(cacheMap[k], ++hierarchy, resizeLength);\n      }\n    }\n  }\n}\n", "import { Color } from \"@galacean/engine-math/src/Color\";\nimport { Font } from \"./2d/text/Font\";\nimport { ResourceManager } from \"./asset/ResourceManager\";\nimport { Event, EventDispatcher, Logger, Time } from \"./base\";\nimport { GLCapabilityType } from \"./base/Constant\";\nimport { Canvas } from \"./Canvas\";\nimport { ComponentsManager } from \"./ComponentsManager\";\nimport { EngineSettings } from \"./EngineSettings\";\nimport { Entity } from \"./Entity\";\nimport { ColorSpace } from \"./enums/ColorSpace\";\nimport { InputManager } from \"./input\";\nimport { LightManager } from \"./lighting/LightManager\";\nimport { Material } from \"./material/Material\";\nimport { PhysicsManager } from \"./physics\";\nimport { IHardwareRenderer } from \"./renderingHardwareInterface\";\nimport { ClassPool } from \"./RenderPipeline/ClassPool\";\nimport { MeshRenderElement } from \"./RenderPipeline/MeshRenderElement\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { SpriteElement } from \"./RenderPipeline/SpriteElement\";\nimport { SpriteMaskElement } from \"./RenderPipeline/SpriteMaskElement\";\nimport { SpriteMaskManager } from \"./RenderPipeline/SpriteMaskManager\";\nimport { TextRenderElement } from \"./RenderPipeline/TextRenderElement\";\nimport { Scene } from \"./Scene\";\nimport { SceneManager } from \"./SceneManager\";\nimport { BlendFactor } from \"./shader/enums/BlendFactor\";\nimport { BlendOperation } from \"./shader/enums/BlendOperation\";\nimport { ColorWriteMask } from \"./shader/enums/ColorWriteMask\";\nimport { CompareFunction } from \"./shader/enums/CompareFunction\";\nimport { CullMode } from \"./shader/enums/CullMode\";\nimport { RenderQueueType } from \"./shader/enums/RenderQueueType\";\nimport { Shader } from \"./shader/Shader\";\nimport { ShaderMacro } from \"./shader/ShaderMacro\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { ShaderPass } from \"./shader/ShaderPass\";\nimport { ShaderPool } from \"./shader/ShaderPool\";\nimport { ShaderProgramPool } from \"./shader/ShaderProgramPool\";\nimport { RenderState } from \"./shader/state/RenderState\";\nimport { Texture2D, Texture2DArray, TextureCube, TextureCubeFace, TextureFormat } from \"./texture\";\n\nShaderPool.init();\n\n/**\n * Engine.\n */\nexport class Engine extends EventDispatcher {\n  /** @internal */\n  static _gammaMacro: ShaderMacro = Shader.getMacroByName(\"OASIS_COLORSPACE_GAMMA\");\n  /** @internal */\n  static _noDepthTextureMacro: ShaderMacro = Shader.getMacroByName(\"OASIS_NO_DEPTH_TEXTURE\");\n  /** @internal Conversion of space units to pixel units for 2D. */\n  static _pixelsPerUnit: number = 100;\n\n  /** Physics manager of Engine. */\n  readonly physicsManager: PhysicsManager;\n  readonly inputManager: InputManager;\n\n  _lightManager: LightManager = new LightManager();\n  _componentsManager: ComponentsManager = new ComponentsManager();\n  _hardwareRenderer: IHardwareRenderer;\n  _lastRenderState: RenderState = new RenderState();\n  _renderElementPool: ClassPool<MeshRenderElement> = new ClassPool(MeshRenderElement);\n  _spriteElementPool: ClassPool<SpriteElement> = new ClassPool(SpriteElement);\n  _spriteMaskElementPool: ClassPool<SpriteMaskElement> = new ClassPool(SpriteMaskElement);\n  _textElementPool: ClassPool<TextRenderElement> = new ClassPool(TextRenderElement);\n  _spriteDefaultMaterial: Material;\n  _spriteMaskDefaultMaterial: Material;\n  _textDefaultFont: Font;\n  _renderContext: RenderContext = new RenderContext();\n\n  /* @internal */\n  _magentaTexture2D: Texture2D;\n  /* @internal */\n  _magentaTextureCube: TextureCube;\n  /* @internal */\n  _magentaTexture2DArray: Texture2DArray;\n  /* @internal */\n  _magentaMaterial: Material;\n  /* @internal */\n  _depthTexture2D: Texture2D;\n\n  /* @internal */\n  _backgroundTextureMaterial: Material;\n  /* @internal */\n  _renderCount: number = 0;\n  /* @internal */\n  _shaderProgramPools: ShaderProgramPool[] = [];\n  /** @internal */\n  _spriteMaskManager: SpriteMaskManager;\n  /** @internal */\n  _canSpriteBatch: boolean = true;\n  /** @internal @todo: temporary solution */\n  _macroCollection: ShaderMacroCollection = new ShaderMacroCollection();\n\n  protected _canvas: Canvas;\n\n  private _settings: EngineSettings = {};\n  private _resourceManager: ResourceManager = new ResourceManager(this);\n  private _sceneManager: SceneManager = new SceneManager(this);\n  private _vSyncCount: number = 1;\n  private _targetFrameRate: number = 60;\n  private _time: Time = new Time();\n  private _isPaused: boolean = true;\n  private _requestId: number;\n  private _timeoutId: number;\n  private _vSyncCounter: number = 1;\n  private _targetFrameInterval: number = 1000 / 60;\n  private _destroyed: boolean = false;\n  private _frameInProcess: boolean = false;\n  private _waittingDestroy: boolean = false;\n\n  private _animate = () => {\n    if (this._vSyncCount) {\n      this._requestId = requestAnimationFrame(this._animate);\n      if (this._vSyncCounter++ % this._vSyncCount === 0) {\n        this.update();\n        this._vSyncCounter = 1;\n      }\n    } else {\n      this._timeoutId = window.setTimeout(this._animate, this._targetFrameInterval);\n      this.update();\n    }\n  };\n\n  /**\n   * Settings of Engine.\n   */\n  get settings(): EngineSettings {\n    return this._settings;\n  }\n\n  /**\n   * The canvas to use for rendering.\n   */\n  get canvas(): Canvas {\n    return this._canvas;\n  }\n\n  /**\n   * Get the resource manager.\n   */\n  get resourceManager(): ResourceManager {\n    return this._resourceManager;\n  }\n\n  /**\n   * Get the scene manager.\n   */\n  get sceneManager(): SceneManager {\n    return this._sceneManager;\n  }\n\n  /**\n   * Get the Time class.\n   */\n  get time(): Time {\n    return this._time;\n  }\n\n  /**\n   * Whether the engine is paused.\n   */\n  get isPaused(): boolean {\n    return this._isPaused;\n  }\n\n  /**\n   * The number of vertical synchronization means the number of vertical blanking for one frame.\n   * @remarks 0 means that the vertical synchronization is turned off.\n   */\n  get vSyncCount(): number {\n    return this._vSyncCount;\n  }\n\n  set vSyncCount(value: number) {\n    this._vSyncCount = Math.max(0, Math.floor(value));\n  }\n\n  /**\n   * Set the target frame rate you want to achieve.\n   * @remarks\n   * It only takes effect when vSyncCount = 0 (ie, vertical synchronization is turned off).\n   * The larger the value, the higher the target frame rate, Number.POSITIVE_INFINITY represents the infinite target frame rate.\n   */\n  get targetFrameRate(): number {\n    return this._targetFrameRate;\n  }\n\n  set targetFrameRate(value: number) {\n    value = Math.max(0.000001, value);\n    this._targetFrameRate = value;\n    this._targetFrameInterval = 1000 / value;\n  }\n\n  /**\n   * Indicates whether the engine is destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  /**\n   * Create engine.\n   * @param canvas - The canvas to use for rendering\n   * @param hardwareRenderer - Graphics API renderer\n   * @param settings - Engine Settings\n   */\n  constructor(canvas: Canvas, hardwareRenderer: IHardwareRenderer, settings?: EngineSettings) {\n    super();\n    this._hardwareRenderer = hardwareRenderer;\n    this._hardwareRenderer.init(canvas);\n\n    this.physicsManager = new PhysicsManager(this);\n\n    this._canvas = canvas;\n    this._sceneManager.activeScene = new Scene(this, \"DefaultScene\");\n\n    this._spriteMaskManager = new SpriteMaskManager(this);\n    this._spriteDefaultMaterial = this._createSpriteMaterial();\n    this._spriteMaskDefaultMaterial = this._createSpriteMaskMaterial();\n    this._textDefaultFont = Font.createFromOS(this, \"Arial\");\n    this._textDefaultFont.isGCIgnored = false;\n\n    this.inputManager = new InputManager(this);\n\n    const magentaPixel = new Uint8Array([255, 0, 255, 255]);\n\n    const magentaTexture2D = new Texture2D(this, 1, 1, TextureFormat.R8G8B8A8, false);\n    magentaTexture2D.setPixelBuffer(magentaPixel);\n    magentaTexture2D.isGCIgnored = true;\n\n    const magentaTextureCube = new TextureCube(this, 1, TextureFormat.R8G8B8A8, false);\n    magentaTextureCube.setPixelBuffer(TextureCubeFace.PositiveX, magentaPixel);\n    magentaTextureCube.setPixelBuffer(TextureCubeFace.NegativeX, magentaPixel);\n    magentaTextureCube.setPixelBuffer(TextureCubeFace.PositiveY, magentaPixel);\n    magentaTextureCube.setPixelBuffer(TextureCubeFace.NegativeY, magentaPixel);\n    magentaTextureCube.setPixelBuffer(TextureCubeFace.PositiveZ, magentaPixel);\n    magentaTextureCube.setPixelBuffer(TextureCubeFace.NegativeZ, magentaPixel);\n    magentaTextureCube.isGCIgnored = true;\n\n    if (!hardwareRenderer.canIUse(GLCapabilityType.depthTexture)) {\n      this._macroCollection.enable(Engine._noDepthTextureMacro);\n    } else {\n      const depthTexture2D = new Texture2D(this, 1, 1, TextureFormat.Depth16, false);\n      depthTexture2D.isGCIgnored = true;\n      this._depthTexture2D = depthTexture2D;\n    }\n\n    this._magentaTexture2D = magentaTexture2D;\n    this._magentaTextureCube = magentaTextureCube;\n\n    if (hardwareRenderer.isWebGL2) {\n      const magentaTexture2DArray = new Texture2DArray(this, 1, 1, 1, TextureFormat.R8G8B8A8, false);\n      magentaTexture2DArray.setPixelBuffer(0, magentaPixel);\n      magentaTexture2DArray.isGCIgnored = true;\n      this._magentaTexture2DArray = magentaTexture2DArray;\n    }\n\n    const magentaMaterial = new Material(this, Shader.find(\"unlit\"));\n    magentaMaterial.shaderData.setColor(\"u_baseColor\", new Color(1.0, 0.0, 1.01, 1.0));\n    this._magentaMaterial = magentaMaterial;\n\n    const backgroundTextureMaterial = new Material(this, Shader.find(\"background-texture\"));\n    backgroundTextureMaterial.isGCIgnored = true;\n    backgroundTextureMaterial.renderState.depthState.compareFunction = CompareFunction.LessEqual;\n    this._backgroundTextureMaterial = backgroundTextureMaterial;\n\n    const innerSettings = this._settings;\n    const colorSpace = settings?.colorSpace || ColorSpace.Linear;\n    colorSpace === ColorSpace.Gamma && this._macroCollection.enable(Engine._gammaMacro);\n    innerSettings.colorSpace = colorSpace;\n  }\n\n  /**\n   * Create an entity.\n   * @param name - The name of the entity\n   * @returns Entity\n   */\n  createEntity(name?: string): Entity {\n    return new Entity(this, name);\n  }\n\n  /**\n   * Pause the engine.\n   */\n  pause(): void {\n    this._isPaused = true;\n    cancelAnimationFrame(this._requestId);\n    clearTimeout(this._timeoutId);\n  }\n\n  /**\n   * Resume the engine.\n   */\n  resume(): void {\n    if (!this._isPaused) return;\n    this._isPaused = false;\n    this.time.reset();\n    this._requestId = requestAnimationFrame(this._animate);\n  }\n\n  /**\n   * Update the engine loop manually. If you call engine.run(), you generally don't need to call this function.\n   */\n  update(): void {\n    const time = this._time;\n    time.tick();\n    \n    const deltaTime = time.deltaTime;\n    this._frameInProcess = true;\n\n    this._renderElementPool.resetPool();\n    this._spriteElementPool.resetPool();\n    this._spriteMaskElementPool.resetPool();\n    this._textElementPool.resetPool();\n\n    const scene = this._sceneManager._activeScene;\n    const componentsManager = this._componentsManager;\n    if (scene) {\n      scene._activeCameras.sort((camera1, camera2) => camera1.priority - camera2.priority);\n\n      componentsManager.callScriptOnStart();\n      this.physicsManager._initialized && this.physicsManager._update(deltaTime / 1000.0);\n      this.inputManager._update();\n      componentsManager.callScriptOnUpdate(deltaTime);\n      componentsManager.callAnimationUpdate(deltaTime);\n      componentsManager.callScriptOnLateUpdate(deltaTime);\n      this._render(scene);\n    }\n\n    if (!this._waittingDestroy) {\n      componentsManager.handlingInvalidScripts();\n    }\n    if (this._waittingDestroy) {\n      this._destroy();\n    }\n    this._frameInProcess = false;\n  }\n\n  /**\n   * Execution engine loop.\n   */\n  run(): void {\n    this.resume();\n    this.trigger(new Event(\"run\", this));\n  }\n\n  private _destroy(): void {\n    this._sceneManager._destroyAllScene();\n    this._componentsManager.handlingInvalidScripts();\n\n    this._resourceManager._destroy();\n    this._magentaTexture2D.destroy(true);\n    this._magentaTextureCube.destroy(true);\n    this._textDefaultFont.destroy(true);\n\n    this.inputManager._destroy();\n    this.trigger(new Event(\"shutdown\", this));\n\n    // -- cancel animation\n    this.pause();\n\n    this._animate = null;\n\n    this._sceneManager = null;\n    this._resourceManager = null;\n    this._canvas = null;\n    this._time = null;\n\n    // delete mask manager\n    this._spriteMaskManager.destroy();\n\n    this.removeAllEventListeners();\n    this._waittingDestroy = false;\n    this._destroyed = true;\n  }\n\n  /**\n   * Destroy engine.\n   * @remarks If call during frame execution will delay until the end of the frame\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n\n    if (this._frameInProcess) {\n      this._waittingDestroy = true;\n    } else {\n      this._destroy();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _getShaderProgramPool(shaderPass: ShaderPass): ShaderProgramPool {\n    const index = shaderPass._shaderPassId;\n    const shaderProgramPools = this._shaderProgramPools;\n    let pool = shaderProgramPools[index];\n    if (!pool) {\n      const length = index + 1;\n      if (length > shaderProgramPools.length) {\n        shaderProgramPools.length = length;\n      }\n      shaderProgramPools[index] = pool = new ShaderProgramPool();\n    }\n    return pool;\n  }\n\n  /**\n   * @intenral\n   */\n  _render(scene: Scene): void {\n    const cameras = scene._activeCameras;\n    const componentsManager = this._componentsManager;\n    const deltaTime = this.time.deltaTime;\n    componentsManager.callRendererOnUpdate(deltaTime);\n\n    scene._updateShaderData();\n\n    if (cameras.length > 0) {\n      for (let i = 0, n = cameras.length; i < n; i++) {\n        const camera = cameras[i];\n        componentsManager.callCameraOnBeginRender(camera);\n        camera.render();\n        componentsManager.callCameraOnEndRender(camera);\n\n        // temp solution for webgl implement bug\n        if (this._hardwareRenderer._options._forceFlush) {\n          this._hardwareRenderer.flush();\n        }\n      }\n    } else {\n      Logger.debug(\"NO active camera.\");\n    }\n  }\n\n  private _createSpriteMaterial(): Material {\n    const material = new Material(this, Shader.find(\"Sprite\"));\n    const renderState = material.renderState;\n    const target = renderState.blendState.targetBlendState;\n    target.enabled = true;\n    target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n    target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    target.sourceAlphaBlendFactor = BlendFactor.One;\n    target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n    renderState.depthState.writeEnabled = false;\n    renderState.rasterState.cullMode = CullMode.Off;\n    material.renderState.renderQueueType = RenderQueueType.Transparent;\n    material.isGCIgnored = true;\n    return material;\n  }\n\n  private _createSpriteMaskMaterial(): Material {\n    const material = new Material(this, Shader.find(\"SpriteMask\"));\n    const renderState = material.renderState;\n    renderState.blendState.targetBlendState.colorWriteMask = ColorWriteMask.None;\n    renderState.rasterState.cullMode = CullMode.Off;\n    renderState.stencilState.enabled = true;\n    renderState.depthState.enabled = false;\n    material.isGCIgnored = true;\n    return material;\n  }\n}\n", "import { Camera } from \"./Camera\";\nimport { ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { Pointer } from \"./input\";\nimport { ColliderShape } from \"./physics\";\n\n/**\n * Script class, used for logic writing.\n */\nexport class Script extends Component {\n  /** @internal */\n  @ignoreClone\n  _started: boolean = false;\n  /** @internal */\n  @ignoreClone\n  _onStartIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onLateUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onPhysicsUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onPreRenderIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onPostRenderIndex: number = -1;\n  @ignoreClone\n  _entityScriptsIndex: number = -1;\n  @ignoreClone\n  _waitHandlingInValid: boolean = false;\n\n  /**\n   * Called when be enabled first time, only once.\n   */\n  onAwake(): void {}\n\n  /**\n   * Called when be enabled.\n   */\n  onEnable(): void {}\n\n  /**\n   * Called before the frame-level loop start for the first time, only once.\n   */\n  onStart(): void {}\n\n  /**\n   * The main loop, called frame by frame.\n   * @param deltaTime - The deltaTime when the script update.\n   */\n  onUpdate(deltaTime: number): void {}\n\n  /**\n   * Called after the onUpdate finished, called frame by frame.\n   * @param deltaTime - The deltaTime when the script update.\n   */\n  onLateUpdate(deltaTime: number): void {}\n\n  /**\n   * Called before camera rendering, called per camera.\n   * @param camera - Current camera.\n   */\n  onBeginRender(camera: Camera): void {}\n\n  /**\n   * Called after camera rendering, called per camera.\n   * @param camera - Current camera.\n   */\n  onEndRender(camera: Camera): void {}\n\n  /**\n   * Called before physics calculations, the number of times is related to the physical update frequency.\n   */\n  onPhysicsUpdate(): void {}\n\n  /**\n   * Called when the collision enter.\n   * @param other - ColliderShape\n   */\n  onTriggerEnter(other: ColliderShape): void {}\n\n  /**\n   * Called when the collision stay.\n   * @remarks onTriggerStay is called every frame while the collision stay.\n   * @param other - ColliderShape\n   */\n  onTriggerExit(other: ColliderShape): void {}\n\n  /**\n   * Called when the collision exit.\n   * @param other - ColliderShape\n   */\n  onTriggerStay(other: ColliderShape): void {}\n\n  /**\n   * Called when the collision enter.\n   * @param other - ColliderShape\n   */\n  onCollisionEnter(other: ColliderShape): void {}\n\n  /**\n   * Called when the collision stay.\n   * @remarks onTriggerStay is called every frame while the collision stay.\n   * @param other - ColliderShape\n   */\n  onCollisionExit(other: ColliderShape): void {}\n\n  /**\n   * Called when the collision exit.\n   * @param other - ColliderShape\n   */\n  onCollisionStay(other: ColliderShape): void {}\n\n  /**\n   * Called when the pointer is down while over the ColliderShape.\n   * @param pointer - The pointer that triggered\n   */\n  onPointerDown(pointer: Pointer): void {}\n\n  /**\n   * Called when the pointer is up while over the ColliderShape.\n   * @param pointer - The pointer that triggered\n   */\n  onPointerUp(pointer: Pointer): void {}\n\n  /**\n   * Called when the pointer is down and up with the same collider.\n   * @param pointer - The pointer that triggered\n   */\n  onPointerClick(pointer: Pointer): void {}\n\n  /**\n   * Called when the pointer is enters the ColliderShape.\n   * @param pointer - The pointer that triggered\n   */\n  onPointerEnter(pointer: Pointer): void {}\n\n  /**\n   * Called when the pointer is no longer over the ColliderShape.\n   * @param pointer - The pointer that triggered\n   */\n  onPointerExit(pointer: Pointer): void {}\n\n  /**\n   * Called when the pointer is down while over the ColliderShape and is still holding down.\n   * @param pointer - The pointer that triggered\n   * @remarks onPointerDrag is called every frame while the pointer is down.\n   */\n  onPointerDrag(pointer: Pointer): void {}\n\n  /**\n   * Called when be disabled.\n   */\n  onDisable(): void {}\n\n  /**\n   * Called at the end of the destroyed frame.\n   */\n  onDestroy(): void {}\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onAwake(): void {\n    this.onAwake();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onEnable(): void {\n    if (this._waitHandlingInValid) {\n      this._waitHandlingInValid = false;\n    } else {\n      const { _componentsManager: componentsManager } = this.engine;\n      const { prototype } = Script;\n      if (!this._started) {\n        componentsManager.addOnStartScript(this);\n      }\n      if (this.onUpdate !== prototype.onUpdate) {\n        componentsManager.addOnUpdateScript(this);\n      }\n      if (this.onLateUpdate !== prototype.onLateUpdate) {\n        componentsManager.addOnLateUpdateScript(this);\n      }\n      if (this.onPhysicsUpdate !== prototype.onPhysicsUpdate) {\n        componentsManager.addOnPhysicsUpdateScript(this);\n      }\n      this._entity._addScript(this);\n    }\n\n    this.onEnable();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onDisable(): void {\n    this._waitHandlingInValid = true;\n    this._engine._componentsManager.addDisableScript(this);\n    this.onDisable();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onDestroy(): void {\n    this._engine._componentsManager.addPendingDestroyScript(this);\n  }\n\n  /**\n   * @internal\n   */\n  _handlingInValid(): void {\n    const componentsManager = this.engine._componentsManager;\n    const { prototype } = Script;\n    if (this.onUpdate !== prototype.onUpdate) {\n      componentsManager.removeOnUpdateScript(this);\n    }\n    if (this.onLateUpdate !== prototype.onLateUpdate) {\n      componentsManager.removeOnLateUpdateScript(this);\n    }\n    if (this.onPhysicsUpdate !== prototype.onPhysicsUpdate) {\n      componentsManager.removeOnPhysicsUpdateScript(this);\n    }\n\n    this._entity._removeScript(this);\n    this._waitHandlingInValid = false;\n  }\n}\n", "import { SpriteMaskInteraction } from \"../2d/enums/SpriteMaskInteraction\";\nimport { SpriteRenderer } from \"../2d/sprite/SpriteRenderer\";\nimport { Camera } from \"../Camera\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { Material } from \"../material\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Basic2DBatcher } from \"./Basic2DBatcher\";\nimport { SpriteElement } from \"./SpriteElement\";\n\n/**\n * @internal\n */\nexport class SpriteBatcher extends Basic2DBatcher {\n  private static _textureProperty: ShaderProperty = Shader.getPropertyByName(\"u_spriteTexture\");\n\n  createVertexElements(vertexElements: VertexElement[]): number {\n    vertexElements[0] = new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0);\n    vertexElements[1] = new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0);\n    vertexElements[2] = new VertexElement(\"COLOR_0\", 20, VertexElementFormat.Vector4, 0);\n    return 36;\n  }\n\n  canBatch(preElement: SpriteElement, curElement: SpriteElement): boolean {\n    if (!this._engine._canSpriteBatch) {\n      return false;\n    }\n\n    const preRenderer = <SpriteRenderer>preElement.component;\n    const curRenderer = <SpriteRenderer>curElement.component;\n\n    // Compare mask\n    if (!this.checkBatchWithMask(preRenderer, curRenderer)) {\n      return false;\n    }\n\n    // Compare texture\n    if (preElement.texture !== curElement.texture) {\n      return false;\n    }\n\n    // Compare material\n    return preElement.material === curElement.material;\n  }\n\n  checkBatchWithMask(left: SpriteRenderer, right: SpriteRenderer): boolean {\n    const leftMaskInteraction = left.maskInteraction;\n\n    if (leftMaskInteraction !== right.maskInteraction) {\n      return false;\n    }\n    if (leftMaskInteraction === SpriteMaskInteraction.None) {\n      return true;\n    }\n    return left.maskLayer === right.maskLayer;\n  }\n\n  updateVertices(element: SpriteElement, vertices: Float32Array, vertexIndex: number): number {\n    const { positions, uvs, color, vertexCount } = element.renderData;\n    for (let i = 0; i < vertexCount; i++) {\n      const curPos = positions[i];\n      const curUV = uvs[i];\n      vertices[vertexIndex++] = curPos.x;\n      vertices[vertexIndex++] = curPos.y;\n      vertices[vertexIndex++] = curPos.z;\n      vertices[vertexIndex++] = curUV.x;\n      vertices[vertexIndex++] = curUV.y;\n      vertices[vertexIndex++] = color.r;\n      vertices[vertexIndex++] = color.g;\n      vertices[vertexIndex++] = color.b;\n      vertices[vertexIndex++] = color.a;\n    }\n\n    return vertexIndex;\n  }\n\n  drawBatches(camera: Camera, replaceMaterial: Material): void {\n    const { _engine: engine, _batchedQueue: batchedQueue } = this;\n    const mesh = this._meshes[this._flushId];\n    const subMeshes = mesh.subMeshes;\n    const maskManager = engine._spriteMaskManager;\n    const sceneData = camera.scene.shaderData;\n    const cameraData = camera.shaderData;\n\n    for (let i = 0, len = subMeshes.length; i < len; i++) {\n      const subMesh = subMeshes[i];\n      const spriteElement = <SpriteElement>batchedQueue[i];\n\n      if (!subMesh || !spriteElement) {\n        return;\n      }\n\n      const renderer = <SpriteRenderer>spriteElement.component;\n      const material = spriteElement.material;\n      maskManager.preRender(camera, renderer);\n\n      const compileMacros = Shader._compileMacros;\n      // union render global macro and material self macro.\n      ShaderMacroCollection.unionCollection(\n        renderer._globalShaderMacro,\n        material.shaderData._macroCollection,\n        compileMacros\n      );\n\n      // @todo: temporary solution\n      (replaceMaterial || material)._preRender(spriteElement);\n      const program = spriteElement.shaderPass._getShaderProgram(engine, compileMacros);\n      if (!program.isValid) {\n        return;\n      }\n\n      renderer.shaderData.setTexture(SpriteBatcher._textureProperty, spriteElement.texture);\n\n      program.bind();\n      program.groupingOtherUniformBlock();\n      program.uploadAll(program.sceneUniformBlock, sceneData);\n      program.uploadAll(program.cameraUniformBlock, cameraData);\n      program.uploadAll(program.rendererUniformBlock, renderer.shaderData);\n      program.uploadAll(program.materialUniformBlock, material.shaderData);\n\n      spriteElement.renderState._apply(engine, false);\n      engine._hardwareRenderer.drawPrimitive(mesh, subMesh, program);\n\n      maskManager.postRender(renderer);\n    }\n  }\n\n  destroy(): void {\n    this._batchedQueue = null;\n\n    const { _meshes: meshes, _vertexBuffers: vertexBuffers, _indiceBuffers: indiceBuffers } = this;\n\n    for (let i = 0, n = meshes.length; i < n; ++i) {\n      meshes[i].destroy();\n    }\n    this._meshes = null;\n\n    for (let i = 0, n = vertexBuffers.length; i < n; ++i) {\n      vertexBuffers[i].destroy();\n    }\n    this._vertexBuffers = null;\n\n    for (let i = 0, n = indiceBuffers.length; i < n; ++i) {\n      indiceBuffers[i].destroy();\n    }\n    this._indiceBuffers = null;\n  }\n}\n", "import { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { Layer } from \"../Layer\";\nimport { Material } from \"../material/Material\";\nimport { Shader } from \"../shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { MeshRenderElement } from \"./MeshRenderElement\";\nimport { RenderElement } from \"./RenderElement\";\nimport { SpriteBatcher } from \"./SpriteBatcher\";\nimport { SpriteElement } from \"./SpriteElement\";\n\n/**\n * Render queue.\n */\nexport class RenderQueue {\n  /**\n   * @internal\n   */\n  static _compareFromNearToFar(a: RenderElement, b: RenderElement): number {\n    return a.component.priority - b.component.priority || a.component._distanceForSort - b.component._distanceForSort;\n  }\n\n  /**\n   * @internal\n   */\n  static _compareFromFarToNear(a: RenderElement, b: RenderElement): number {\n    return a.component.priority - b.component.priority || b.component._distanceForSort - a.component._distanceForSort;\n  }\n\n  readonly items: RenderElement[] = [];\n  private _spriteBatcher: SpriteBatcher;\n\n  constructor(engine: Engine) {\n    this._spriteBatcher = new SpriteBatcher(engine);\n  }\n\n  /**\n   * Push a render element.\n   */\n  pushPrimitive(element: RenderElement): void {\n    this.items.push(element);\n  }\n\n  render(camera: Camera, replaceMaterial: Material, mask: Layer, customShader: Shader): void {\n    const items = this.items;\n    if (items.length === 0) {\n      return;\n    }\n\n    const { engine, scene } = camera;\n    const renderCount = engine._renderCount;\n    const rhi = engine._hardwareRenderer;\n    const sceneData = scene.shaderData;\n    const cameraData = camera.shaderData;\n\n    for (let i = 0, n = items.length; i < n; i++) {\n      const item = items[i];\n      const renderPassFlag = item.component.entity.layer;\n\n      if (!(renderPassFlag & mask)) {\n        continue;\n      }\n\n      if (!!(item as MeshRenderElement).mesh) {\n        this._spriteBatcher.flush(camera, replaceMaterial);\n\n        const compileMacros = Shader._compileMacros;\n        const element = <MeshRenderElement>item;\n        const renderer = element.component;\n        const material = element.material.destroyed ? engine._magentaMaterial : element.material;\n        const rendererData = renderer.shaderData;\n        const materialData = material.shaderData;\n\n        // @todo: temporary solution\n        (replaceMaterial || material)._preRender(element);\n\n        // union render global macro and material self macro.\n        ShaderMacroCollection.unionCollection(\n          renderer._globalShaderMacro,\n          materialData._macroCollection,\n          compileMacros\n        );\n\n        // @todo: temporary solution\n        const program = (\n          customShader?.passes[0] ||\n          replaceMaterial?.shader.passes[0] ||\n          element.shaderPass\n        )._getShaderProgram(engine, compileMacros);\n\n        if (!program.isValid) {\n          continue;\n        }\n\n        const switchProgram = program.bind();\n        const switchRenderCount = renderCount !== program._uploadRenderCount;\n\n        if (switchRenderCount) {\n          program.groupingOtherUniformBlock();\n          program.uploadAll(program.sceneUniformBlock, sceneData);\n          program.uploadAll(program.cameraUniformBlock, cameraData);\n          program.uploadAll(program.rendererUniformBlock, rendererData);\n          program.uploadAll(program.materialUniformBlock, materialData);\n          // UnGroup textures should upload default value, texture uint maybe change by logic of texture bind.\n          program.uploadUnGroupTextures();\n          program._uploadScene = scene;\n          program._uploadCamera = camera;\n          program._uploadRenderer = renderer;\n          program._uploadMaterial = material;\n          program._uploadRenderCount = renderCount;\n        } else {\n          if (program._uploadScene !== scene) {\n            program.uploadAll(program.sceneUniformBlock, sceneData);\n            program._uploadScene = scene;\n          } else if (switchProgram) {\n            program.uploadTextures(program.sceneUniformBlock, sceneData);\n          }\n\n          if (program._uploadCamera !== camera) {\n            program.uploadAll(program.cameraUniformBlock, cameraData);\n            program._uploadCamera = camera;\n          } else if (switchProgram) {\n            program.uploadTextures(program.cameraUniformBlock, cameraData);\n          }\n\n          if (program._uploadRenderer !== renderer) {\n            program.uploadAll(program.rendererUniformBlock, rendererData);\n            program._uploadRenderer = renderer;\n          } else if (switchProgram) {\n            program.uploadTextures(program.rendererUniformBlock, rendererData);\n          }\n\n          if (program._uploadMaterial !== material) {\n            program.uploadAll(program.materialUniformBlock, materialData);\n            program._uploadMaterial = material;\n          } else if (switchProgram) {\n            program.uploadTextures(program.materialUniformBlock, materialData);\n          }\n\n          // We only consider switchProgram case, because UnGroup texture's value is always default.\n          if (switchProgram) {\n            program.uploadUnGroupTextures();\n          }\n        }\n        element.renderState._apply(engine, renderer.entity.transform._isFrontFaceInvert());\n\n        rhi.drawPrimitive(element.mesh, element.subMesh, program);\n      } else {\n        const spriteElement = <SpriteElement>item;\n        this._spriteBatcher.drawElement(spriteElement, camera, replaceMaterial);\n      }\n    }\n\n    this._spriteBatcher.flush(camera, replaceMaterial);\n  }\n\n  /**\n   * Clear collection.\n   */\n  clear(): void {\n    this.items.length = 0;\n    this._spriteBatcher.clear();\n  }\n\n  /**\n   * Destroy internal resources.\n   */\n  destroy(): void {\n    this._spriteBatcher.destroy();\n    this._spriteBatcher = null;\n  }\n\n  /**\n   * Sort the elements.\n   */\n  sort(compareFunc: Function): void {\n    this._quickSort(this.items, 0, this.items.length, compareFunc);\n  }\n\n  /**\n   * @remarks\n   * Modified based on v8.\n   * https://github.com/v8/v8/blob/7.2-lkgr/src/js/array.js\n   */\n  private _quickSort<T>(a: T[], from: number, to: number, compareFunc: Function): void {\n    while (true) {\n      // Insertion sort is faster for short arrays.\n      if (to - from <= 10) {\n        this._insertionSort(a, from, to, compareFunc);\n        return;\n      }\n      const third_index = (from + to) >> 1;\n      // Find a pivot as the median of first, last and middle element.\n      let v0 = a[from];\n      let v1 = a[to - 1];\n      let v2 = a[third_index];\n      const c01 = compareFunc(v0, v1);\n      if (c01 > 0) {\n        // v1 < v0, so swap them.\n        const tmp = v0;\n        v0 = v1;\n        v1 = tmp;\n      } // v0 <= v1.\n      const c02 = compareFunc(v0, v2);\n      if (c02 >= 0) {\n        // v2 <= v0 <= v1.\n        const tmp = v0;\n        v0 = v2;\n        v2 = v1;\n        v1 = tmp;\n      } else {\n        // v0 <= v1 && v0 < v2\n        const c12 = compareFunc(v1, v2);\n        if (c12 > 0) {\n          // v0 <= v2 < v1\n          const tmp = v1;\n          v1 = v2;\n          v2 = tmp;\n        }\n      }\n      // v0 <= v1 <= v2\n      a[from] = v0;\n      a[to - 1] = v2;\n      const pivot = v1;\n      let low_end = from + 1; // Upper bound of elements lower than pivot.\n      let high_start = to - 1; // Lower bound of elements greater than pivot.\n      a[third_index] = a[low_end];\n      a[low_end] = pivot;\n\n      // From low_end to i are elements equal to pivot.\n      // From i to high_start are elements that haven't been compared yet.\n      partition: for (let i = low_end + 1; i < high_start; i++) {\n        let element = a[i];\n        let order = compareFunc(element, pivot);\n        if (order < 0) {\n          a[i] = a[low_end];\n          a[low_end] = element;\n          low_end++;\n        } else if (order > 0) {\n          do {\n            high_start--;\n            if (high_start == i) break partition;\n            const top_elem = a[high_start];\n            order = compareFunc(top_elem, pivot);\n          } while (order > 0);\n          a[i] = a[high_start];\n          a[high_start] = element;\n          if (order < 0) {\n            element = a[i];\n            a[i] = a[low_end];\n            a[low_end] = element;\n            low_end++;\n          }\n        }\n      }\n      if (to - high_start < low_end - from) {\n        this._quickSort(a, high_start, to, compareFunc);\n        to = low_end;\n      } else {\n        this._quickSort(a, from, low_end, compareFunc);\n        from = high_start;\n      }\n    }\n  }\n\n  private _insertionSort<T>(a: T[], from: number, to: number, compareFunc: Function): void {\n    for (let i = from + 1; i < to; i++) {\n      let j;\n      const element = a[i];\n      for (j = i - 1; j >= from; j--) {\n        const tmp = a[j];\n        const order = compareFunc(tmp, element);\n        if (order > 0) {\n          a[j + 1] = tmp;\n        } else {\n          break;\n        }\n      }\n      a[j + 1] = element;\n    }\n  }\n}\n", "import { Matrix, Vector3 } from \"@galacean/engine-math\";\n\n/**\n * @internal\n */\nexport class VirtualCamera {\n  position: Vector3 = new Vector3();\n  isOrthographic: boolean = false;\n  viewMatrix: Matrix = new Matrix();\n  projectionMatrix: Matrix = new Matrix();\n  viewProjectionMatrix: Matrix = new Matrix();\n  /** Only orth mode use. */\n  forward: Vector3 = new Vector3();\n}\n", "import { BoundingSphere, Matrix, Plane, Vector3 } from \"@galacean/engine-math\";\nimport { VirtualCamera } from \"../VirtualCamera\";\n\n/**\n * @internal\n */\nexport class ShadowSliceData {\n  resolution: number;\n  virtualCamera: VirtualCamera = new VirtualCamera();\n  cullPlanes: Plane[] = [\n    new Plane(new Vector3()),\n    new Plane(new Vector3()),\n    new Plane(new Vector3()),\n    new Plane(new Vector3()),\n    new Plane(new Vector3()),\n    new Plane(new Vector3()),\n    new Plane(new Vector3()),\n    new Plane(new Vector3()),\n    new Plane(new Vector3()),\n    new Plane(new Vector3())\n  ];\n  cullPlaneCount: number;\n\n  // bounding sphere\n  splitBoundSphere: BoundingSphere = new BoundingSphere(new Vector3(), 0.0);\n  sphereCenterZ: number;\n}\n", "import {\n  BoundingBox,\n  BoundingFrustum,\n  CollisionUtil,\n  FrustumFace,\n  MathUtil,\n  Matrix,\n  Plane,\n  Vector2,\n  Vector3\n} from \"@galacean/engine-math\";\nimport { Camera } from \"../Camera\";\nimport { DirectLight, Light } from \"../lighting\";\nimport { Renderer } from \"../Renderer\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { TextureFormat } from \"../texture\";\nimport { Utils } from \"../Utils\";\nimport { ShadowResolution } from \"./enum/ShadowResolution\";\nimport { ShadowType } from \"./enum/ShadowType\";\nimport { ShadowSliceData } from \"./ShadowSliceData\";\n\n/**\n * @internal\n */\nenum FrustumCorner {\n  FarBottomLeft = 0,\n  FarTopLeft = 1,\n  FarTopRight = 2,\n  FarBottomRight = 3,\n  nearBottomLeft = 4,\n  nearTopLeft = 5,\n  nearTopRight = 6,\n  nearBottomRight = 7,\n  unknown = 8\n}\n\n/**\n * @internal\n */\nexport class ShadowUtils {\n  private static _tempMatrix0: Matrix = new Matrix();\n\n  // prettier-ignore\n  /** @internal */\n  private static _shadowMapCoordMatrix: Matrix = new Matrix(\n    0.5, 0.0, 0.0, 0.0,\n    0.0, 0.5, 0.0, 0.0,\n    0.0, 0.0, 0.5, 0.0,\n    0.5, 0.5, 0.5, 1.0\n  );\n\n  private static _frustumCorners: Vector3[] = [\n    new Vector3(),\n    new Vector3(),\n    new Vector3(),\n    new Vector3(),\n    new Vector3(),\n    new Vector3(),\n    new Vector3(),\n    new Vector3()\n  ];\n  private static _adjustNearPlane: Plane = new Plane(new Vector3());\n  private static _adjustFarPlane: Plane = new Plane(new Vector3());\n  private static _backPlaneFaces: FrustumFace[] = new Array(5);\n  private static _edgePlanePoint2: Vector3 = new Vector3();\n\n  /** near, far, left, right, bottom, top  */\n  private static _frustumPlaneNeighbors: FrustumFace[][] = [\n    [FrustumFace.Left, FrustumFace.Right, FrustumFace.Top, FrustumFace.Bottom],\n    [FrustumFace.Left, FrustumFace.Right, FrustumFace.Top, FrustumFace.Bottom],\n    [FrustumFace.Near, FrustumFace.Far, FrustumFace.Top, FrustumFace.Bottom],\n    [FrustumFace.Near, FrustumFace.Far, FrustumFace.Top, FrustumFace.Bottom],\n    [FrustumFace.Near, FrustumFace.Far, FrustumFace.Left, FrustumFace.Right],\n    [FrustumFace.Near, FrustumFace.Far, FrustumFace.Left, FrustumFace.Right]\n  ];\n\n  /** near, far, left, right, bottom, top  */\n  private static _frustumTwoPlaneCorners: FrustumCorner[][][] = [\n    [\n      // near, far, left, right, bottom, top\n      [FrustumCorner.unknown, FrustumCorner.unknown],\n      [FrustumCorner.unknown, FrustumCorner.unknown],\n      [FrustumCorner.nearBottomLeft, FrustumCorner.nearTopLeft],\n      [FrustumCorner.nearTopRight, FrustumCorner.nearBottomRight],\n      [FrustumCorner.nearBottomRight, FrustumCorner.nearBottomLeft],\n      [FrustumCorner.nearTopLeft, FrustumCorner.nearTopRight]\n    ],\n    [\n      // near, far, left, right, bottom, top\n      [FrustumCorner.unknown, FrustumCorner.unknown],\n      [FrustumCorner.unknown, FrustumCorner.unknown],\n      [FrustumCorner.FarTopLeft, FrustumCorner.FarBottomLeft],\n      [FrustumCorner.FarBottomRight, FrustumCorner.FarTopRight],\n      [FrustumCorner.FarBottomLeft, FrustumCorner.FarBottomRight],\n      [FrustumCorner.FarTopRight, FrustumCorner.FarTopLeft]\n    ],\n    [\n      // near, far, left, right, bottom, top\n      [FrustumCorner.nearTopLeft, FrustumCorner.nearBottomLeft],\n      [FrustumCorner.FarBottomLeft, FrustumCorner.FarTopLeft],\n      [FrustumCorner.unknown, FrustumCorner.unknown],\n      [FrustumCorner.unknown, FrustumCorner.unknown],\n      [FrustumCorner.nearBottomLeft, FrustumCorner.FarBottomLeft],\n      [FrustumCorner.FarTopLeft, FrustumCorner.nearTopLeft]\n    ],\n    [\n      // near, far, left, right, bottom, top\n      [FrustumCorner.nearBottomRight, FrustumCorner.nearTopRight],\n      [FrustumCorner.FarTopRight, FrustumCorner.FarBottomRight],\n      [FrustumCorner.unknown, FrustumCorner.unknown],\n      [FrustumCorner.unknown, FrustumCorner.unknown],\n      [FrustumCorner.FarBottomRight, FrustumCorner.nearBottomRight],\n      [FrustumCorner.nearTopRight, FrustumCorner.FarTopRight]\n    ],\n    [\n      // near, far, left, right, bottom, top\n      [FrustumCorner.nearBottomLeft, FrustumCorner.nearBottomRight],\n      [FrustumCorner.FarBottomRight, FrustumCorner.FarBottomLeft],\n      [FrustumCorner.FarBottomLeft, FrustumCorner.nearBottomLeft],\n      [FrustumCorner.nearBottomRight, FrustumCorner.FarBottomRight],\n      [FrustumCorner.unknown, FrustumCorner.unknown],\n      [FrustumCorner.unknown, FrustumCorner.unknown]\n    ],\n    [\n      // near, far, left, right, bottom, top\n      [FrustumCorner.nearTopRight, FrustumCorner.nearTopLeft],\n      [FrustumCorner.FarTopLeft, FrustumCorner.FarTopRight],\n      [FrustumCorner.nearTopLeft, FrustumCorner.FarTopLeft],\n      [FrustumCorner.FarTopRight, FrustumCorner.nearTopRight],\n      [FrustumCorner.unknown, FrustumCorner.unknown],\n      [FrustumCorner.unknown, FrustumCorner.unknown]\n    ]\n  ];\n  //now max shadow sample tent is 5x5, atlas borderSize at least 3=ceil(2.5),and +1 pixel is for global border for no cascade mode.\n  static readonly atlasBorderSize: number = 4.0;\n\n  static shadowResolution(value: ShadowResolution): number {\n    switch (value) {\n      case ShadowResolution.Low:\n        return 512;\n      case ShadowResolution.Medium:\n        return 1024;\n      case ShadowResolution.High:\n        return 2048;\n      case ShadowResolution.VeryHigh:\n        return 4096;\n    }\n  }\n\n  static shadowDepthFormat(value: ShadowResolution, supportDepthTexture: boolean): TextureFormat {\n    if (supportDepthTexture) {\n      return TextureFormat.Depth16;\n    } else {\n      return TextureFormat.R8G8B8A8;\n    }\n  }\n\n  static cullingRenderBounds(bounds: BoundingBox, cullPlaneCount: number, cullPlanes: Plane[]): boolean {\n    const { min, max } = bounds;\n\n    for (let i = 0; i < cullPlaneCount; i++) {\n      const plane = cullPlanes[i];\n      const normal = plane.normal;\n      if (\n        normal.x * (normal.x >= 0.0 ? max.x : min.x) +\n          normal.y * (normal.y >= 0.0 ? max.y : min.y) +\n          normal.z * (normal.z >= 0.0 ? max.z : min.z) <\n        -plane.distance\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  static shadowCullFrustum(\n    context: RenderContext,\n    light: Light,\n    renderer: Renderer,\n    shadowSliceData: ShadowSliceData\n  ): void {\n    const layer = renderer._entity.layer;\n    // filter by camera culling mask\n    if (context.camera.cullingMask & layer && light.cullingMask & layer) {\n      if (\n        renderer.castShadows &&\n        ShadowUtils.cullingRenderBounds(renderer.bounds, shadowSliceData.cullPlaneCount, shadowSliceData.cullPlanes)\n      ) {\n        renderer._renderFrameCount = renderer.engine.time._frameCount;\n        renderer._prepareRender(context);\n      }\n    }\n  }\n\n  static getBoundSphereByFrustum(\n    near: number,\n    far: number,\n    camera: Camera,\n    forward: Vector3,\n    shadowSliceData: ShadowSliceData\n  ): void {\n    const { aspectRatio, fieldOfView } = camera;\n\n    // https://lxjk.github.io/2017/04/15/Calculate-Minimal-Bounding-Sphere-of-Frustum.html\n    let centerZ: number;\n    let radius: number;\n    const k = Math.sqrt(1.0 + aspectRatio * aspectRatio) * Math.tan(MathUtil.degreeToRadian(fieldOfView) / 2.0);\n    const k2 = k * k;\n    const farSNear = far - near;\n    const farANear = far + near;\n    if (k2 > farSNear / farANear) {\n      centerZ = far;\n      radius = far * k;\n    } else {\n      centerZ = 0.5 * farANear * (1 + k2);\n      radius =\n        0.5 * Math.sqrt(farSNear * farSNear + 2.0 * (far * far + near * near) * k2 + farANear * farANear * k2 * k2);\n    }\n\n    const center = shadowSliceData.splitBoundSphere.center;\n    shadowSliceData.splitBoundSphere.radius = radius;\n    Vector3.scale(forward, centerZ, center);\n    Vector3.add(camera.entity.transform.worldPosition, center, center);\n    shadowSliceData.sphereCenterZ = centerZ;\n  }\n\n  static getDirectionLightShadowCullPlanes(\n    cameraFrustum: BoundingFrustum,\n    splitDistance: number,\n    cameraNear: number,\n    direction: Vector3,\n    shadowSliceData: ShadowSliceData\n  ): void {\n    // http://lspiroengine.com/?p=187\n    const frustumCorners = ShadowUtils._frustumCorners;\n    const backPlaneFaces = ShadowUtils._backPlaneFaces;\n    const planeNeighbors = ShadowUtils._frustumPlaneNeighbors;\n    const twoPlaneCorners = ShadowUtils._frustumTwoPlaneCorners;\n    const edgePlanePoint2 = ShadowUtils._edgePlanePoint2;\n    const out = shadowSliceData.cullPlanes;\n\n    // cameraFrustumPlanes is share\n    const near = cameraFrustum.getPlane(FrustumFace.Near);\n    const far = cameraFrustum.getPlane(FrustumFace.Far);\n    const left = cameraFrustum.getPlane(FrustumFace.Left);\n    const right = cameraFrustum.getPlane(FrustumFace.Right);\n    const bottom = cameraFrustum.getPlane(FrustumFace.Bottom);\n    const top = cameraFrustum.getPlane(FrustumFace.Top);\n\n    // adjustment the near/far plane\n    const splitNearDistance = splitDistance - cameraNear;\n    const splitNear = ShadowUtils._adjustNearPlane;\n    const splitFar = ShadowUtils._adjustFarPlane;\n    splitNear.normal.copyFrom(near.normal);\n    splitFar.normal.copyFrom(far.normal);\n    splitNear.distance = near.distance - splitNearDistance;\n    // do a clamp if the sphere is out of range the far plane\n    splitFar.distance = Math.min(\n      -near.distance + shadowSliceData.sphereCenterZ + shadowSliceData.splitBoundSphere.radius,\n      far.distance\n    );\n\n    CollisionUtil.intersectionPointThreePlanes(splitNear, bottom, right, frustumCorners[FrustumCorner.nearBottomRight]);\n    CollisionUtil.intersectionPointThreePlanes(splitNear, top, right, frustumCorners[FrustumCorner.nearTopRight]);\n    CollisionUtil.intersectionPointThreePlanes(splitNear, top, left, frustumCorners[FrustumCorner.nearTopLeft]);\n    CollisionUtil.intersectionPointThreePlanes(splitNear, bottom, left, frustumCorners[FrustumCorner.nearBottomLeft]);\n    CollisionUtil.intersectionPointThreePlanes(splitFar, bottom, right, frustumCorners[FrustumCorner.FarBottomRight]);\n    CollisionUtil.intersectionPointThreePlanes(splitFar, top, right, frustumCorners[FrustumCorner.FarTopRight]);\n    CollisionUtil.intersectionPointThreePlanes(splitFar, top, left, frustumCorners[FrustumCorner.FarTopLeft]);\n    CollisionUtil.intersectionPointThreePlanes(splitFar, bottom, left, frustumCorners[FrustumCorner.FarBottomLeft]);\n\n    let backIndex = 0;\n    for (let i = 0; i < 6; i++) {\n      // maybe 3、4、5(light eye is at far, forward is near, or orthographic camera is any axis)\n      let plane: Plane;\n      switch (i) {\n        case FrustumFace.Near:\n          plane = splitNear;\n          break;\n        case FrustumFace.Far:\n          plane = splitFar;\n          break;\n        default:\n          plane = cameraFrustum.getPlane(i);\n          break;\n      }\n      if (Vector3.dot(plane.normal, direction) < 0.0) {\n        out[backIndex].copyFrom(plane);\n        backPlaneFaces[backIndex] = i;\n        backIndex++;\n      }\n    }\n\n    let edgeIndex = backIndex;\n    for (let i = 0; i < backIndex; i++) {\n      const backFace = backPlaneFaces[i];\n      const neighborFaces = planeNeighbors[backFace];\n      for (let j = 0; j < 4; j++) {\n        const neighborFace = neighborFaces[j];\n        let notBackFace = true;\n        for (let k = 0; k < backIndex; k++)\n          if (neighborFace == backPlaneFaces[k]) {\n            notBackFace = false;\n            break;\n          }\n        if (notBackFace) {\n          const corners = twoPlaneCorners[backFace][neighborFace];\n          const point0 = frustumCorners[corners[0]];\n          const point1 = frustumCorners[corners[1]];\n          Vector3.add(point0, direction, edgePlanePoint2);\n          Plane.fromPoints(point0, point1, edgePlanePoint2, out[edgeIndex++]);\n        }\n      }\n    }\n    shadowSliceData.cullPlaneCount = edgeIndex;\n  }\n\n  static getDirectionalLightMatrices(\n    lightUp: Vector3,\n    lightSide: Vector3,\n    lightForward: Vector3,\n    cascadeIndex: number,\n    nearPlane: number,\n    shadowResolution: number,\n    shadowSliceData: ShadowSliceData,\n    outShadowMatrices: Float32Array\n  ): void {\n    const boundSphere = shadowSliceData.splitBoundSphere;\n    shadowSliceData.resolution = shadowResolution;\n\n    // To solve shadow swimming problem.\n    const center = boundSphere.center;\n    const radius = boundSphere.radius;\n    const halfShadowResolution = shadowResolution / 2;\n    // Add border to project edge pixel PCF.\n    // Improve:the clip planes not consider the border,but I think is OK,because the object can clip is not continuous.\n    const borderRadius = (radius * halfShadowResolution) / (halfShadowResolution - ShadowUtils.atlasBorderSize);\n    const borderDiam = borderRadius * 2.0;\n    const sizeUnit = shadowResolution / borderDiam;\n    const radiusUnit = borderDiam / shadowResolution;\n    const upLen = Math.ceil(Vector3.dot(center, lightUp) * sizeUnit) * radiusUnit;\n    const sideLen = Math.ceil(Vector3.dot(center, lightSide) * sizeUnit) * radiusUnit;\n    const forwardLen = Vector3.dot(center, lightForward);\n    center.x = lightUp.x * upLen + lightSide.x * sideLen + lightForward.x * forwardLen;\n    center.y = lightUp.y * upLen + lightSide.y * sideLen + lightForward.y * forwardLen;\n    center.z = lightUp.z * upLen + lightSide.z * sideLen + lightForward.z * forwardLen;\n\n    // Direction light use shadow pancaking tech,do special dispose with nearPlane.\n    const virtualCamera = shadowSliceData.virtualCamera;\n    const position = virtualCamera.position;\n    const viewMatrix = virtualCamera.viewMatrix;\n    const projectMatrix = virtualCamera.projectionMatrix;\n\n    Vector3.scale(lightForward, radius + nearPlane, position);\n    Vector3.subtract(center, position, position);\n    Matrix.lookAt(position, center, lightUp, viewMatrix);\n    Matrix.ortho(\n      -borderRadius,\n      borderRadius,\n      -borderRadius,\n      borderRadius,\n      0.0,\n      radius * 2.0 + nearPlane,\n      projectMatrix\n    );\n\n    const viewProjectionMatrix = virtualCamera.viewProjectionMatrix;\n    Matrix.multiply(projectMatrix, viewMatrix, viewProjectionMatrix);\n    Utils._floatMatrixMultiply(\n      ShadowUtils._shadowMapCoordMatrix,\n      viewProjectionMatrix.elements,\n      0,\n      outShadowMatrices,\n      cascadeIndex * 16\n    );\n  }\n\n  static getMaxTileResolutionInAtlas(atlasWidth: number, atlasHeight: number, tileCount: number): number {\n    let resolution = Math.min(atlasWidth, atlasHeight);\n\n    let currentTileCount = Math.floor(atlasWidth / resolution) * Math.floor(atlasHeight / resolution);\n\n    while (currentTileCount < tileCount) {\n      resolution = Math.floor(resolution >> 1);\n      currentTileCount = Math.floor(atlasWidth / resolution) * Math.floor(atlasHeight / resolution);\n    }\n    return resolution;\n  }\n\n  static getShadowBias(light: DirectLight, projectionMatrix: Matrix, shadowResolution: number, out: Vector2): void {\n    // Frustum size is guaranteed to be a cube as we wrap shadow frustum around a sphere\n    // elements[0] = 2.0 / (right - left)\n    const frustumSize = 2.0 / projectionMatrix.elements[0];\n\n    // depth and normal bias scale is in shadowmap texel size in world space\n    const texelSize = frustumSize / shadowResolution;\n    let depthBias = -light.shadowBias * texelSize;\n    let normalBias = -light.shadowNormalBias * texelSize;\n\n    if (light.shadowType == ShadowType.SoftHigh) {\n      // TODO: depth and normal bias assume sample is no more than 1 texel away from shadowmap\n      // This is not true with PCF. Ideally we need to do either\n      // cone base bias (based on distance to center sample)\n      // or receiver place bias based on derivatives.\n      // For now we scale it by the PCF kernel size (5x5)\n      const kernelRadius = 2.5;\n      depthBias *= kernelRadius;\n      normalBias *= kernelRadius;\n    }\n    out.set(depthBias, normalBias);\n  }\n\n  /**\n   * Apply shadow slice scale and offset\n   */\n  static applySliceTransform(\n    tileSize: number,\n    atlasWidth: number,\n    atlasHeight: number,\n    cascadeIndex: number,\n    atlasOffset: Vector2,\n    outShadowMatrices: Float32Array\n  ): void {\n    const sliceMatrix = ShadowUtils._tempMatrix0;\n    const slice = sliceMatrix.elements;\n\n    const oneOverAtlasWidth = 1.0 / atlasWidth;\n    const oneOverAtlasHeight = 1.0 / atlasHeight;\n    const scaleX = tileSize * oneOverAtlasWidth;\n    const scaleY = tileSize * oneOverAtlasHeight;\n    const offsetX = atlasOffset.x * oneOverAtlasWidth;\n    const offsetY = atlasOffset.y * oneOverAtlasHeight;\n\n    (slice[0] = scaleX), (slice[1] = 0), (slice[2] = 0), (slice[3] = 0);\n    (slice[4] = 0), (slice[5] = scaleY), (slice[6] = 0), (slice[7] = 0);\n    (slice[8] = 0), (slice[9] = 0), (slice[10] = 1), (slice[11] = 0);\n    (slice[12] = offsetX), (slice[13] = offsetY), (slice[14] = 0), (slice[15] = 1);\n\n    const offset = cascadeIndex * 16;\n    Utils._floatMatrixMultiply(sliceMatrix, outShadowMatrices, offset, outShadowMatrices, offset);\n  }\n}\n", "import { Color, MathUtil, Matrix, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { Layer } from \"../Layer\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { RenderQueue } from \"../RenderPipeline/RenderQueue\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { CameraClearFlags } from \"../enums/CameraClearFlags\";\nimport { DirectLight } from \"../lighting\";\nimport { Shader } from \"../shader\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { TextureDepthCompareFunction } from \"../texture/enums/TextureDepthCompareFunction\";\nimport { TextureFormat } from \"../texture/enums/TextureFormat\";\nimport { TextureWrapMode } from \"../texture/enums/TextureWrapMode\";\nimport { ShadowSliceData } from \"./ShadowSliceData\";\nimport { ShadowUtils } from \"./ShadowUtils\";\nimport { ShadowCascadesMode } from \"./enum/ShadowCascadesMode\";\n\n/**\n * Cascade shadow caster.\n */\nexport class CascadedShadowCasterPass {\n  private static _lightShadowBiasProperty = Shader.getPropertyByName(\"u_shadowBias\");\n  private static _lightDirectionProperty = Shader.getPropertyByName(\"u_lightDirection\");\n\n  private static _shadowMatricesProperty = Shader.getPropertyByName(\"u_shadowMatrices\");\n  private static _shadowMapSize = Shader.getPropertyByName(\"u_shadowMapSize\");\n  private static _shadowInfosProperty = Shader.getPropertyByName(\"u_shadowInfo\");\n  private static _shadowMapsProperty = Shader.getPropertyByName(\"u_shadowMap\");\n  private static _shadowSplitSpheresProperty = Shader.getPropertyByName(\"u_shadowSplitSpheres\");\n\n  private static _maxCascades: number = 4;\n  private static _cascadesSplitDistance: number[] = new Array(CascadedShadowCasterPass._maxCascades + 1);\n\n  private static _viewport = new Vector4(0, 0, 1, 1);\n  private static _clearColor = new Color(1, 1, 1, 1);\n  private static _tempVector = new Vector3();\n  private static _tempMatrix0 = new Matrix();\n\n  private readonly _camera: Camera;\n  private readonly _engine: Engine;\n  private readonly _shadowCasterShader: Shader;\n  private readonly _supportDepthTexture: boolean;\n\n  private _shadowMapResolution: number;\n  private _shadowMapSize: Vector4 = new Vector4();\n  private _shadowTileResolution: number;\n  private _shadowBias: Vector2 = new Vector2();\n  private _shadowMapFormat: TextureFormat;\n  private _shadowCascadeMode: ShadowCascadesMode;\n  private _shadowSliceData: ShadowSliceData = new ShadowSliceData();\n  private _lightUp: Vector3 = new Vector3();\n  private _lightSide: Vector3 = new Vector3();\n  private _existShadowMap: boolean = false;\n\n  private _splitBoundSpheres = new Float32Array(CascadedShadowCasterPass._maxCascades * 4);\n  /** The end is project prcision problem in shader. */\n  private _shadowMatrices = new Float32Array((CascadedShadowCasterPass._maxCascades + 1) * 16);\n  // strength, null, lightIndex\n  private _shadowInfos = new Vector3();\n  private _depthTexture: Texture2D;\n  private _renderTargets: RenderTarget;\n  private _viewportOffsets: Vector2[] = [new Vector2(), new Vector2(), new Vector2(), new Vector2()];\n\n  constructor(camera: Camera) {\n    this._camera = camera;\n    this._engine = camera.engine;\n\n    this._supportDepthTexture = camera.engine._hardwareRenderer.canIUse(GLCapabilityType.depthTexture);\n    this._shadowCasterShader = Shader.find(\"shadow-map\");\n    this._shadowSliceData.virtualCamera.isOrthographic = true;\n  }\n\n  /**\n   * @internal\n   */\n  _render(context: RenderContext): void {\n    this._updateShadowSettings();\n    this._existShadowMap = false;\n    this._renderDirectShadowMap(context);\n\n    if (this._existShadowMap) {\n      this._updateReceiversShaderData();\n    }\n  }\n\n  private _renderDirectShadowMap(context: RenderContext): void {\n    const {\n      _engine: engine,\n      _camera: camera,\n      _shadowCasterShader: shadowCasterShader,\n      _viewportOffsets: viewports,\n      _shadowSliceData: shadowSliceData,\n      _splitBoundSpheres: splitBoundSpheres,\n      _shadowMatrices: shadowMatrices\n    } = this;\n\n    const {\n      _opaqueQueue: opaqueQueue,\n      _alphaTestQueue: alphaTestQueue,\n      _transparentQueue: transparentQueue\n    } = camera._renderPipeline;\n\n    const componentsManager = engine._componentsManager;\n    const rhi = engine._hardwareRenderer;\n    const shadowCascades = camera.scene.shadowCascades;\n    const splitDistance = CascadedShadowCasterPass._cascadesSplitDistance;\n    const boundSphere = shadowSliceData.splitBoundSphere;\n    const lightWorld = CascadedShadowCasterPass._tempMatrix0;\n    const lightWorldE = lightWorld.elements;\n    const lightUp = this._lightUp;\n    const lightSide = this._lightSide;\n    const lightForward = shadowSliceData.virtualCamera.forward;\n\n    const sunLightIndex = engine._lightManager._getSunLightIndex();\n\n    if (sunLightIndex !== -1) {\n      const light = camera.scene._sunLight;\n      const shadowFar = Math.min(camera.scene.shadowDistance, camera.farClipPlane);\n      this._getCascadesSplitDistance(shadowFar);\n      // prepare render target\n      const renderTarget = this._getAvailableRenderTarget();\n      // @todo: shouldn't set viewport and scissor in activeRenderTarget\n      rhi.activeRenderTarget(renderTarget, CascadedShadowCasterPass._viewport, 0);\n      if (this._supportDepthTexture) {\n        rhi.clearRenderTarget(engine, CameraClearFlags.Depth, null);\n      } else {\n        rhi.clearRenderTarget(engine, CameraClearFlags.All, CascadedShadowCasterPass._clearColor);\n      }\n      this._shadowInfos.x = light.shadowStrength;\n      this._shadowInfos.z = sunLightIndex;\n\n      // prepare light and camera direction\n      Matrix.rotationQuaternion(light.entity.transform.worldRotationQuaternion, lightWorld);\n      lightSide.set(lightWorldE[0], lightWorldE[1], lightWorldE[2]);\n      lightUp.set(lightWorldE[4], lightWorldE[5], lightWorldE[6]);\n      lightForward.set(-lightWorldE[8], -lightWorldE[9], -lightWorldE[10]);\n      camera.entity.transform.getWorldForward(CascadedShadowCasterPass._tempVector);\n\n      const shadowTileResolution = this._shadowTileResolution;\n\n      for (let j = 0; j < shadowCascades; j++) {\n        ShadowUtils.getBoundSphereByFrustum(\n          splitDistance[j],\n          splitDistance[j + 1],\n          camera,\n          CascadedShadowCasterPass._tempVector.normalize(),\n          shadowSliceData\n        );\n        ShadowUtils.getDirectionLightShadowCullPlanes(\n          camera._frustum,\n          splitDistance[j],\n          camera.nearClipPlane,\n          lightForward,\n          shadowSliceData\n        );\n\n        ShadowUtils.getDirectionalLightMatrices(\n          lightUp,\n          lightSide,\n          lightForward,\n          j,\n          light.shadowNearPlane,\n          shadowTileResolution,\n          shadowSliceData,\n          shadowMatrices\n        );\n        if (shadowCascades > 1) {\n          const shadowMapSize = this._shadowMapSize;\n          ShadowUtils.applySliceTransform(\n            shadowTileResolution,\n            shadowMapSize.z,\n            shadowMapSize.w,\n            j,\n            this._viewportOffsets[j],\n            shadowMatrices\n          );\n        }\n        this._updateSingleShadowCasterShaderData(<DirectLight>light, shadowSliceData, context);\n\n        // upload pre-cascade infos.\n        const center = boundSphere.center;\n        const radius = boundSphere.radius;\n        const offset = j * 4;\n        splitBoundSpheres[offset] = center.x;\n        splitBoundSpheres[offset + 1] = center.y;\n        splitBoundSpheres[offset + 2] = center.z;\n        splitBoundSpheres[offset + 3] = radius * radius;\n        opaqueQueue.clear();\n        alphaTestQueue.clear();\n        transparentQueue.clear();\n        const renderers = componentsManager._renderers;\n        const elements = renderers._elements;\n        for (let k = renderers.length - 1; k >= 0; --k) {\n          ShadowUtils.shadowCullFrustum(context, light, elements[k], shadowSliceData);\n        }\n\n        if (opaqueQueue.items.length || alphaTestQueue.items.length) {\n          opaqueQueue.sort(RenderQueue._compareFromNearToFar);\n          alphaTestQueue.sort(RenderQueue._compareFromNearToFar);\n\n          const { x, y } = viewports[j];\n\n          rhi.setGlobalDepthBias(1.0, 1.0);\n\n          rhi.viewport(x, y, shadowTileResolution, shadowTileResolution);\n          // for no cascade is for the edge,for cascade is for the beyond maxCascade pixel can use (0,0,0) trick sample the shadowMap\n          rhi.scissor(x + 1, y + 1, shadowTileResolution - 2, shadowTileResolution - 2);\n          engine._renderCount++;\n\n          opaqueQueue.render(camera, null, Layer.Everything, shadowCasterShader);\n          alphaTestQueue.render(camera, null, Layer.Everything, shadowCasterShader);\n          rhi.setGlobalDepthBias(0, 0);\n        }\n      }\n      this._existShadowMap = true;\n    }\n  }\n\n  private _updateReceiversShaderData(): void {\n    const scene = this._camera.scene;\n    const splitBoundSpheres = this._splitBoundSpheres;\n    const shadowMatrices = this._shadowMatrices;\n    const shadowCascades = scene.shadowCascades;\n\n    // set zero matrix to project the index out of max cascade\n    if (shadowCascades > 1) {\n      for (let i = shadowCascades * 4, n = splitBoundSpheres.length; i < n; i++) {\n        splitBoundSpheres[i] = 0.0;\n      }\n    }\n\n    // set zero matrix to project the index out of max cascade\n    for (var i = shadowCascades * 16, n = shadowMatrices.length; i < n; i++) {\n      shadowMatrices[i] = 0.0;\n    }\n\n    const shaderData = scene.shaderData;\n    shaderData.setFloatArray(CascadedShadowCasterPass._shadowMatricesProperty, this._shadowMatrices);\n    shaderData.setVector3(CascadedShadowCasterPass._shadowInfosProperty, this._shadowInfos);\n    shaderData.setTexture(CascadedShadowCasterPass._shadowMapsProperty, this._depthTexture);\n    shaderData.setFloatArray(CascadedShadowCasterPass._shadowSplitSpheresProperty, this._splitBoundSpheres);\n    shaderData.setVector4(CascadedShadowCasterPass._shadowMapSize, this._shadowMapSize);\n  }\n\n  private _getCascadesSplitDistance(shadowFar: number): void {\n    const cascadesSplitDistance = CascadedShadowCasterPass._cascadesSplitDistance;\n    const { shadowTwoCascadeSplits, shadowFourCascadeSplits, shadowCascades } = this._camera.scene;\n    const { nearClipPlane, aspectRatio, fieldOfView } = this._camera;\n\n    cascadesSplitDistance[0] = nearClipPlane;\n    const range = shadowFar - nearClipPlane;\n    const tFov = Math.tan(MathUtil.degreeToRadian(fieldOfView) * 0.5);\n    const denominator = 1.0 + tFov * tFov * (aspectRatio * aspectRatio + 1.0);\n    switch (shadowCascades) {\n      case ShadowCascadesMode.NoCascades:\n        cascadesSplitDistance[1] = this._getFarWithRadius(shadowFar, denominator);\n        break;\n      case ShadowCascadesMode.TwoCascades:\n        cascadesSplitDistance[1] = this._getFarWithRadius(nearClipPlane + range * shadowTwoCascadeSplits, denominator);\n        cascadesSplitDistance[2] = this._getFarWithRadius(shadowFar, denominator);\n        break;\n      case ShadowCascadesMode.FourCascades:\n        cascadesSplitDistance[1] = this._getFarWithRadius(\n          nearClipPlane + range * shadowFourCascadeSplits.x,\n          denominator\n        );\n        cascadesSplitDistance[2] = this._getFarWithRadius(\n          nearClipPlane + range * shadowFourCascadeSplits.y,\n          denominator\n        );\n        cascadesSplitDistance[3] = this._getFarWithRadius(\n          nearClipPlane + range * shadowFourCascadeSplits.z,\n          denominator\n        );\n        cascadesSplitDistance[4] = this._getFarWithRadius(shadowFar, denominator);\n        break;\n    }\n  }\n\n  private _getFarWithRadius(radius: number, denominator: number): number {\n    // use the frustum side as the radius and get the far distance form camera.\n    // var tFov: number = Math.tan(fov * 0.5);// get this the equation using Pythagorean\n    // return Math.sqrt(radius * radius / (1.0 + tFov * tFov * (aspectRatio * aspectRatio + 1.0)));\n    return Math.sqrt((radius * radius) / denominator);\n  }\n\n  private _getAvailableRenderTarget(): RenderTarget {\n    const engine = this._engine;\n    const format = this._shadowMapFormat;\n    const { z: width, w: height } = this._shadowMapSize;\n    let depthTexture = this._depthTexture;\n    let renderTarget = this._renderTargets;\n    if (\n      renderTarget == null ||\n      depthTexture?.width !== width ||\n      depthTexture?.height !== height ||\n      depthTexture?.format !== format\n    ) {\n      depthTexture = this._depthTexture = new Texture2D(engine, width, height, format, false);\n      depthTexture.wrapModeV = depthTexture.wrapModeU = TextureWrapMode.Clamp;\n      if (engine._hardwareRenderer._isWebGL2) {\n        depthTexture.depthCompareFunction = TextureDepthCompareFunction.Less;\n      }\n\n      if (this._supportDepthTexture) {\n        renderTarget = this._renderTargets = new RenderTarget(engine, width, height, null, depthTexture);\n      } else {\n        renderTarget = this._renderTargets = new RenderTarget(engine, width, height, depthTexture);\n      }\n    }\n    return renderTarget;\n  }\n\n  private _updateShadowSettings(): void {\n    const scene = this._camera.scene;\n    const shadowFormat = ShadowUtils.shadowDepthFormat(scene.shadowResolution, this._supportDepthTexture);\n    const shadowResolution = ShadowUtils.shadowResolution(scene.shadowResolution);\n    const shadowCascades = scene.shadowCascades;\n\n    if (\n      shadowFormat !== this._shadowMapFormat ||\n      shadowResolution !== this._shadowMapResolution ||\n      shadowCascades !== this._shadowCascadeMode\n    ) {\n      this._shadowMapFormat = shadowFormat;\n      this._shadowMapResolution = shadowResolution;\n      this._shadowCascadeMode = shadowCascades;\n\n      if (shadowCascades == ShadowCascadesMode.NoCascades) {\n        this._shadowTileResolution = shadowResolution;\n        this._shadowMapSize.set(1 / shadowResolution, 1 / shadowResolution, shadowResolution, shadowResolution);\n      } else {\n        const shadowTileResolution = ShadowUtils.getMaxTileResolutionInAtlas(\n          shadowResolution,\n          shadowResolution,\n          shadowCascades\n        );\n        this._shadowTileResolution = shadowTileResolution;\n        const width = shadowTileResolution * 2;\n        const height =\n          shadowCascades == ShadowCascadesMode.TwoCascades ? shadowTileResolution : shadowTileResolution * 2;\n        this._shadowMapSize.set(1.0 / width, 1.0 / height, width, height);\n      }\n\n      this._renderTargets = null;\n\n      const viewportOffset = this._viewportOffsets;\n      const shadowTileResolution = this._shadowTileResolution;\n      switch (shadowCascades) {\n        case ShadowCascadesMode.NoCascades:\n          viewportOffset[0].set(0, 0);\n          break;\n        case ShadowCascadesMode.TwoCascades:\n          viewportOffset[0].set(0, 0);\n          viewportOffset[1].set(shadowTileResolution, 0);\n          break;\n        case ShadowCascadesMode.FourCascades:\n          viewportOffset[0].set(0, 0);\n          viewportOffset[1].set(shadowTileResolution, 0);\n          viewportOffset[2].set(0, shadowTileResolution);\n          viewportOffset[3].set(shadowTileResolution, shadowTileResolution);\n      }\n    }\n  }\n\n  private _updateSingleShadowCasterShaderData(\n    light: DirectLight,\n    shadowSliceData: ShadowSliceData,\n    context: RenderContext\n  ): void {\n    const virtualCamera = shadowSliceData.virtualCamera;\n    ShadowUtils.getShadowBias(light, virtualCamera.projectionMatrix, this._shadowTileResolution, this._shadowBias);\n\n    const sceneShaderData = this._camera.scene.shaderData;\n    sceneShaderData.setVector2(CascadedShadowCasterPass._lightShadowBiasProperty, this._shadowBias);\n    sceneShaderData.setVector3(CascadedShadowCasterPass._lightDirectionProperty, light.direction);\n\n    context.applyVirtualCamera(virtualCamera);\n  }\n}\n", "import { Color } from \"@galacean/engine-math\";\nimport { Camera } from \"../Camera\";\nimport { CameraClearFlags } from \"../enums/CameraClearFlags\";\nimport { Layer } from \"../Layer\";\nimport { Material } from \"../material/Material\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\nimport { RenderQueue } from \"./RenderQueue\";\n\nlet passNum = 0;\n\n/**\n * RenderPass.\n */\nclass RenderPass {\n  public name: string;\n  public enabled: boolean;\n  public priority: number;\n  public renderTarget: RenderTarget;\n  public replaceMaterial: Material;\n  public mask: Layer;\n  public renderOverride: boolean;\n  public clearFlags: CameraClearFlags | undefined;\n  public clearColor: Color | undefined;\n\n  /**\n   * Create a RenderPass.\n   * @param name - Pass name\n   * @param priority - Priority, less than 0 before the default pass, greater than 0 after the default pass\n   * @param renderTarget - The specified Render Target\n   * @param replaceMaterial -  Replaced material\n   * @param mask - Perform bit and operations with Entity.Layer to filter the objects that this Pass needs to render\n   */\n  constructor(\n    name = `RENDER_PASS${passNum++}`,\n    priority = 0,\n    renderTarget = null,\n    replaceMaterial = null,\n    mask = null\n  ) {\n    this.name = name;\n    this.enabled = true;\n    this.priority = priority;\n    this.renderTarget = renderTarget;\n    this.replaceMaterial = replaceMaterial;\n    this.mask = mask || Layer.Everything;\n    this.renderOverride = false; // If renderOverride is set to true, you need to implement the render method\n  }\n\n  /**\n   * Rendering callback, will be executed if renderOverride is set to true.\n   * @param camera - Camera\n   * @param opaqueQueue - Opaque queue\n   * @param alphaTestQueue - Alpha test queue\n   * @param transparentQueue - Transparent queue\n   */\n  render(camera: Camera, opaqueQueue: RenderQueue, alphaTestQueue: RenderQueue, transparentQueue: RenderQueue) {}\n\n  /**\n   * Post rendering callback.\n   * @param camera - Camera\n   * @param opaqueQueue - Opaque queue\n   * @param alphaTestQueue - Alpha test queue\n   * @param transparentQueue - Transparent queue\n   */\n  preRender(camera: Camera, opaqueQueue: RenderQueue, alphaTestQueue: RenderQueue, transparentQueue: RenderQueue) {}\n\n  /**\n   * Post rendering callback.\n   * @param camera - Camera\n   * @param opaqueQueue - Opaque queue\n   * @param alphaTestQueue - Alpha test queue\n   * @param transparentQueue - Transparent queue\n   */\n  postRender(camera: Camera, opaqueQueue: RenderQueue, alphaTestQueue: RenderQueue, transparentQueue: RenderQueue) {}\n}\n\nexport { RenderPass };\n", "import { Vector2, Vector3 } from \"@galacean/engine-math\";\nimport { SpriteMask } from \"../2d\";\nimport { Background } from \"../Background\";\nimport { Camera } from \"../Camera\";\nimport { DisorderedArray } from \"../DisorderedArray\";\nimport { Engine } from \"../Engine\";\nimport { BackgroundMode } from \"../enums/BackgroundMode\";\nimport { BackgroundTextureFillMode } from \"../enums/BackgroundTextureFillMode\";\nimport { CameraClearFlags } from \"../enums/CameraClearFlags\";\nimport { Layer } from \"../Layer\";\nimport { Material } from \"../material\";\nimport { RenderQueueType } from \"../shader/enums/RenderQueueType\";\nimport { Shader } from \"../shader/Shader\";\nimport { CascadedShadowCasterPass } from \"../shadow/CascadedShadowCasterPass\";\nimport { ShadowType } from \"../shadow/enum/ShadowType\";\nimport { RenderTarget, TextureCubeFace } from \"../texture\";\nimport { RenderContext } from \"./RenderContext\";\nimport { RenderElement } from \"./RenderElement\";\nimport { RenderPass } from \"./RenderPass\";\nimport { RenderQueue } from \"./RenderQueue\";\n\n/**\n * Basic render pipeline.\n */\nexport class BasicRenderPipeline {\n  private static _tempVector0 = new Vector3();\n  private static _tempVector1 = new Vector3();\n\n  /** @internal */\n  _opaqueQueue: RenderQueue;\n  /** @internal */\n  _transparentQueue: RenderQueue;\n  /** @internal */\n  _alphaTestQueue: RenderQueue;\n  /** @internal */\n  _allSpriteMasks: DisorderedArray<SpriteMask> = new DisorderedArray();\n\n  private _camera: Camera;\n  private _defaultPass: RenderPass;\n  private _renderPassArray: Array<RenderPass>;\n  private _lastCanvasSize = new Vector2();\n  private _cascadedShadowCaster: CascadedShadowCasterPass;\n\n  /**\n   * Create a basic render pipeline.\n   * @param camera - Camera\n   */\n  constructor(camera: Camera) {\n    this._camera = camera;\n    const { engine } = camera;\n    this._opaqueQueue = new RenderQueue(engine);\n    this._alphaTestQueue = new RenderQueue(engine);\n    this._transparentQueue = new RenderQueue(engine);\n    this._cascadedShadowCaster = new CascadedShadowCasterPass(camera);\n\n    this._renderPassArray = [];\n    this._defaultPass = new RenderPass(\"default\", 0, null, null, 0);\n    this.addRenderPass(this._defaultPass);\n  }\n\n  /**\n   * Default render pass.\n   */\n  get defaultRenderPass() {\n    return this._defaultPass;\n  }\n\n  /**\n   * Add render pass.\n   * @param nameOrPass - The name of this Pass or RenderPass object. When it is a name, the following parameters need to be provided\n   * @param priority - Priority, less than 0 before the default pass, greater than 0 after the default pass\n   * @param renderTarget - The specified Render Target\n   * @param replaceMaterial -  Replaced material\n   * @param mask - Perform bit and operations with Entity.Layer to filter the objects that this Pass needs to render\n   */\n  addRenderPass(\n    nameOrPass: string | RenderPass,\n    priority: number = null,\n    renderTarget: RenderTarget = null,\n    replaceMaterial: Material = null,\n    mask: Layer = null\n  ) {\n    if (typeof nameOrPass === \"string\") {\n      const renderPass = new RenderPass(nameOrPass, priority, renderTarget, replaceMaterial, mask);\n      this._renderPassArray.push(renderPass);\n    } else if (nameOrPass instanceof RenderPass) {\n      this._renderPassArray.push(nameOrPass);\n    }\n\n    this._renderPassArray.sort(function (p1, p2) {\n      return p1.priority - p2.priority;\n    });\n  }\n\n  /**\n   * Remove render pass by name or render pass object.\n   * @param nameOrPass - Render pass name or render pass object\n   */\n  removeRenderPass(nameOrPass: string | RenderPass): void {\n    let pass: RenderPass;\n    if (typeof nameOrPass === \"string\") pass = this.getRenderPass(nameOrPass);\n    else if (nameOrPass instanceof RenderPass) pass = nameOrPass;\n    if (pass) {\n      const idx = this._renderPassArray.indexOf(pass);\n      this._renderPassArray.splice(idx, 1);\n    }\n  }\n\n  /**\n   * Get render pass by name.\n   * @param  name - Render pass name\n   */\n  getRenderPass(name: string) {\n    for (let i = 0, len = this._renderPassArray.length; i < len; i++) {\n      const pass = this._renderPassArray[i];\n      if (pass.name === name) return pass;\n    }\n\n    return null;\n  }\n\n  /**\n   * Destroy internal resources.\n   */\n  destroy(): void {\n    this._opaqueQueue.destroy();\n    this._alphaTestQueue.destroy();\n    this._transparentQueue.destroy();\n    this._allSpriteMasks = null;\n    this._renderPassArray = null;\n    this._defaultPass = null;\n    this._camera = null;\n  }\n\n  /**\n   * Perform scene rendering.\n   * @param context - Render context\n   * @param cubeFace - Render surface of cube texture\n   * @param mipLevel - Set mip level the data want to write\n   */\n  render(context: RenderContext, cubeFace?: TextureCubeFace, mipLevel?: number) {\n    const camera = this._camera;\n    const scene = camera.scene;\n    const opaqueQueue = this._opaqueQueue;\n    const alphaTestQueue = this._alphaTestQueue;\n    const transparentQueue = this._transparentQueue;\n\n    camera.engine._spriteMaskManager.clear();\n    if (scene.castShadows && scene._sunLight?.shadowType !== ShadowType.None) {\n      this._cascadedShadowCaster._render(context);\n    }\n    opaqueQueue.clear();\n    alphaTestQueue.clear();\n    transparentQueue.clear();\n    this._allSpriteMasks.length = 0;\n\n    context.applyVirtualCamera(camera._virtualCamera);\n\n    this._callRender(context);\n    opaqueQueue.sort(RenderQueue._compareFromNearToFar);\n    alphaTestQueue.sort(RenderQueue._compareFromNearToFar);\n    transparentQueue.sort(RenderQueue._compareFromFarToNear);\n\n    for (let i = 0, len = this._renderPassArray.length; i < len; i++) {\n      this._drawRenderPass(context, this._renderPassArray[i], camera, cubeFace, mipLevel);\n    }\n  }\n\n  private _drawRenderPass(\n    context: RenderContext,\n    pass: RenderPass,\n    camera: Camera,\n    cubeFace?: TextureCubeFace,\n    mipLevel?: number\n  ) {\n    pass.preRender(camera, this._opaqueQueue, this._alphaTestQueue, this._transparentQueue);\n\n    if (pass.enabled) {\n      const { engine, scene } = camera;\n      const { background } = scene;\n      const rhi = engine._hardwareRenderer;\n      const renderTarget = camera.renderTarget || pass.renderTarget;\n      rhi.activeRenderTarget(renderTarget, camera.viewport, mipLevel);\n      renderTarget?._setRenderTargetInfo(cubeFace, mipLevel);\n      const clearFlags = pass.clearFlags ?? camera.clearFlags;\n      const color = pass.clearColor ?? background.solidColor;\n      if (clearFlags !== CameraClearFlags.None) {\n        rhi.clearRenderTarget(camera.engine, clearFlags, color);\n      }\n\n      if (pass.renderOverride) {\n        pass.render(camera, this._opaqueQueue, this._alphaTestQueue, this._transparentQueue);\n      } else {\n        this._opaqueQueue.render(camera, pass.replaceMaterial, pass.mask, null);\n        this._alphaTestQueue.render(camera, pass.replaceMaterial, pass.mask, null);\n        if (camera.clearFlags & CameraClearFlags.Color) {\n          if (background.mode === BackgroundMode.Sky) {\n            background.sky._render(context);\n          } else if (background.mode === BackgroundMode.Texture && background.texture) {\n            this._drawBackgroundTexture(engine, background);\n          }\n        }\n        this._transparentQueue.render(camera, pass.replaceMaterial, pass.mask, null);\n      }\n\n      renderTarget?._blitRenderTarget();\n      renderTarget?.generateMipmaps();\n    }\n\n    pass.postRender(camera, this._opaqueQueue, this._alphaTestQueue, this._transparentQueue);\n  }\n\n  /**\n   * Push a render element to the render queue.\n   * @param element - Render element\n   */\n  pushPrimitive(element: RenderElement): void {\n    switch (element.renderState.renderQueueType) {\n      case RenderQueueType.Transparent:\n        this._transparentQueue.pushPrimitive(element);\n        break;\n      case RenderQueueType.AlphaTest:\n        this._alphaTestQueue.pushPrimitive(element);\n        break;\n      case RenderQueueType.Opaque:\n        this._opaqueQueue.pushPrimitive(element);\n        break;\n    }\n  }\n\n  private _drawBackgroundTexture(engine: Engine, background: Background) {\n    const rhi = engine._hardwareRenderer;\n    const { _backgroundTextureMaterial, canvas } = engine;\n    const mesh = background._mesh;\n\n    if (\n      (this._lastCanvasSize.x !== canvas.width || this._lastCanvasSize.y !== canvas.height) &&\n      background._textureFillMode !== BackgroundTextureFillMode.Fill\n    ) {\n      this._lastCanvasSize.set(canvas.width, canvas.height);\n      background._resizeBackgroundTexture();\n    }\n\n    const program = _backgroundTextureMaterial.shader.passes[0]._getShaderProgram(engine, Shader._compileMacros);\n    program.bind();\n    program.uploadAll(program.materialUniformBlock, _backgroundTextureMaterial.shaderData);\n    program.uploadUnGroupTextures();\n\n    _backgroundTextureMaterial.renderState._apply(engine, false);\n    rhi.drawPrimitive(mesh, mesh.subMesh, program);\n  }\n\n  private _callRender(context: RenderContext): void {\n    const engine = context.camera.engine;\n    const renderers = engine._componentsManager._renderers;\n    const camera = context.camera;\n    const elements = renderers._elements;\n    for (let i = renderers.length - 1; i >= 0; --i) {\n      const renderer = elements[i];\n\n      // filter by camera culling mask.\n      if (!(camera.cullingMask & renderer._entity.layer)) {\n        continue;\n      }\n\n      // filter by camera frustum.\n      if (camera.enableFrustumCulling) {\n        if (!camera._frustum.intersectsBox(renderer.bounds)) {\n          continue;\n        }\n      }\n      renderer._renderFrameCount = engine.time._frameCount;\n      renderer._prepareRender(context);\n    }\n  }\n}\n", "import { BoundingFrustum, MathUtil, Matrix, Ray, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { Logger } from \"./base\";\nimport { BoolUpdateFlag } from \"./BoolUpdateFlag\";\nimport { deepClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { dependentComponents } from \"./ComponentsDependencies\";\nimport { Entity } from \"./Entity\";\nimport { CameraClearFlags } from \"./enums/CameraClearFlags\";\nimport { Layer } from \"./Layer\";\nimport { BasicRenderPipeline } from \"./RenderPipeline/BasicRenderPipeline\";\nimport { ShaderDataGroup } from \"./shader/enums/ShaderDataGroup\";\nimport { Shader } from \"./shader/Shader\";\nimport { ShaderData } from \"./shader/ShaderData\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { TextureCubeFace } from \"./texture/enums/TextureCubeFace\";\nimport { RenderTarget } from \"./texture/RenderTarget\";\nimport { Transform } from \"./Transform\";\nimport { VirtualCamera } from \"./VirtualCamera\";\n\nclass MathTemp {\n  static tempVec4 = new Vector4();\n  static tempVec3 = new Vector3();\n  static tempVec2 = new Vector2();\n}\n\n/**\n * Camera component, as the entrance to the three-dimensional world.\n * @decorator `@dependentComponents(Transform)`\n */\n@dependentComponents(Transform)\nexport class Camera extends Component {\n  /** @internal */\n  private static _inverseViewMatrixProperty = Shader.getPropertyByName(\"u_viewInvMat\");\n  /** @internal */\n  private static _cameraPositionProperty = Shader.getPropertyByName(\"u_cameraPos\");\n\n  /** Shader data. */\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Camera);\n\n  /** Rendering priority - A Camera with higher priority will be rendered on top of a camera with lower priority. */\n  priority: number = 0;\n\n  /** Whether to enable frustum culling, it is enabled by default. */\n  enableFrustumCulling: boolean = true;\n\n  /**\n   * Determining what to clear when rendering by a Camera.\n   * @defaultValue `CameraClearFlags.All`\n   */\n  clearFlags: CameraClearFlags = CameraClearFlags.All;\n\n  /**\n   * Culling mask - which layers the camera renders.\n   * @remarks Support bit manipulation, corresponding to `Layer`.\n   */\n  cullingMask: Layer = Layer.Everything;\n\n  /** @internal */\n  _globalShaderMacro: ShaderMacroCollection = new ShaderMacroCollection();\n  /** @internal */\n  @deepClone\n  _frustum: BoundingFrustum = new BoundingFrustum();\n  /** @internal */\n  @ignoreClone\n  _renderPipeline: BasicRenderPipeline;\n  /** @internal */\n  @ignoreClone\n  _virtualCamera: VirtualCamera = new VirtualCamera();\n\n  private _isProjMatSetting = false;\n  private _nearClipPlane: number = 0.1;\n  private _farClipPlane: number = 100;\n  private _fieldOfView: number = 45;\n  private _orthographicSize: number = 10;\n  private _isProjectionDirty = true;\n  private _isInvProjMatDirty: boolean = true;\n  private _isFrustumProjectDirty: boolean = true;\n  private _customAspectRatio: number | undefined = undefined;\n  private _renderTarget: RenderTarget = null;\n\n  @ignoreClone\n  private _frustumViewChangeFlag: BoolUpdateFlag;\n  @ignoreClone\n  private _transform: Transform;\n  @ignoreClone\n  private _isViewMatrixDirty: BoolUpdateFlag;\n  @ignoreClone\n  private _isInvViewProjDirty: BoolUpdateFlag;\n  @deepClone\n  private _viewport: Vector4 = new Vector4(0, 0, 1, 1);\n  @deepClone\n  private _inverseProjectionMatrix: Matrix = new Matrix();\n  @deepClone\n  private _lastAspectSize: Vector2 = new Vector2(0, 0);\n  @deepClone\n  private _invViewProjMat: Matrix = new Matrix();\n\n  /**\n   * Near clip plane - the closest point to the camera when rendering occurs.\n   */\n  get nearClipPlane(): number {\n    return this._nearClipPlane;\n  }\n\n  set nearClipPlane(value: number) {\n    this._nearClipPlane = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Far clip plane - the furthest point to the camera when rendering occurs.\n   */\n  get farClipPlane(): number {\n    return this._farClipPlane;\n  }\n\n  set farClipPlane(value: number) {\n    this._farClipPlane = value;\n    this._projMatChange();\n  }\n\n  /**\n   * The camera's view angle. activating when camera use perspective projection.\n   */\n  get fieldOfView(): number {\n    return this._fieldOfView;\n  }\n\n  set fieldOfView(value: number) {\n    this._fieldOfView = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Aspect ratio. The default is automatically calculated by the viewport's aspect ratio. If it is manually set,\n   * the manual value will be kept. Call resetAspectRatio() to restore it.\n   */\n  get aspectRatio(): number {\n    const canvas = this._entity.engine.canvas;\n    return this._customAspectRatio ?? (canvas.width * this._viewport.z) / (canvas.height * this._viewport.w);\n  }\n\n  set aspectRatio(value: number) {\n    this._customAspectRatio = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Viewport, normalized expression, the upper left corner is (0, 0), and the lower right corner is (1, 1).\n   * @remarks Re-assignment is required after modification to ensure that the modification takes effect.\n   */\n  get viewport(): Vector4 {\n    return this._viewport;\n  }\n\n  set viewport(value: Vector4) {\n    if (value !== this._viewport) {\n      this._viewport.copyFrom(value);\n    }\n    this._projMatChange();\n  }\n\n  /**\n   * Whether it is orthogonal, the default is false. True will use orthographic projection, false will use perspective projection.\n   */\n  get isOrthographic(): boolean {\n    return this._virtualCamera.isOrthographic;\n  }\n\n  set isOrthographic(value: boolean) {\n    this._virtualCamera.isOrthographic = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Half the size of the camera in orthographic mode.\n   */\n  get orthographicSize(): number {\n    return this._orthographicSize;\n  }\n\n  set orthographicSize(value: number) {\n    this._orthographicSize = value;\n    this._projMatChange();\n  }\n\n  /**\n   * View matrix.\n   */\n  get viewMatrix(): Readonly<Matrix> {\n    const viewMatrix = this._virtualCamera.viewMatrix;\n    if (this._isViewMatrixDirty.flag) {\n      this._isViewMatrixDirty.flag = false;\n      // Ignore scale.\n      const transform = this._transform;\n      Matrix.rotationTranslation(transform.worldRotationQuaternion, transform.worldPosition, viewMatrix);\n      viewMatrix.invert();\n    }\n    return viewMatrix;\n  }\n\n  /**\n   * The projection matrix is ​​calculated by the relevant parameters of the camera by default.\n   * If it is manually set, the manual value will be maintained. Call resetProjectionMatrix() to restore it.\n   */\n  set projectionMatrix(value: Matrix) {\n    this._virtualCamera.projectionMatrix.copyFrom(value);\n    this._isProjMatSetting = true;\n    this._projMatChange();\n  }\n\n  get projectionMatrix(): Matrix {\n    const virtualCamera = this._virtualCamera;\n    const projectionMatrix = virtualCamera.projectionMatrix;\n    const canvas = this._entity.engine.canvas;\n\n    if (\n      (!this._isProjectionDirty || this._isProjMatSetting) &&\n      this._lastAspectSize.x === canvas.width &&\n      this._lastAspectSize.y === canvas.height\n    ) {\n      return projectionMatrix;\n    }\n    this._isProjectionDirty = false;\n    this._lastAspectSize.x = canvas.width;\n    this._lastAspectSize.y = canvas.height;\n    const aspectRatio = this.aspectRatio;\n    if (!virtualCamera.isOrthographic) {\n      Matrix.perspective(\n        MathUtil.degreeToRadian(this._fieldOfView),\n        aspectRatio,\n        this._nearClipPlane,\n        this._farClipPlane,\n        projectionMatrix\n      );\n    } else {\n      const width = this._orthographicSize * aspectRatio;\n      const height = this._orthographicSize;\n      Matrix.ortho(-width, width, -height, height, this._nearClipPlane, this._farClipPlane, projectionMatrix);\n    }\n    return projectionMatrix;\n  }\n\n  /**\n   * Whether to enable HDR.\n   * @todo When render pipeline modification\n   */\n  get enableHDR(): boolean {\n    console.log(\"not implementation\");\n    return false;\n  }\n\n  set enableHDR(value: boolean) {\n    console.log(\"not implementation\");\n  }\n\n  /**\n   * RenderTarget. After setting, it will be rendered to the renderTarget. If it is empty, it will be rendered to the main canvas.\n   */\n  get renderTarget(): RenderTarget | null {\n    return this._renderTarget;\n  }\n\n  set renderTarget(value: RenderTarget | null) {\n    this._renderTarget = value;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n\n    const transform = this.entity.transform;\n    this._transform = transform;\n    this._isViewMatrixDirty = transform.registerWorldChangeFlag();\n    this._isInvViewProjDirty = transform.registerWorldChangeFlag();\n    this._frustumViewChangeFlag = transform.registerWorldChangeFlag();\n    this._renderPipeline = new BasicRenderPipeline(this);\n    this.shaderData._addRefCount(1);\n  }\n\n  /**\n   * Restore the automatic calculation of projection matrix through fieldOfView, nearClipPlane and farClipPlane.\n   */\n  resetProjectionMatrix(): void {\n    this._isProjMatSetting = false;\n    this._projMatChange();\n  }\n\n  /**\n   * Restore the automatic calculation of the aspect ratio through the viewport aspect ratio.\n   */\n  resetAspectRatio(): void {\n    this._customAspectRatio = undefined;\n    this._projMatChange();\n  }\n\n  /**\n   * Transform a point from world space to viewport space.\n   * @param point - Point in world space\n   * @param out - Point in viewport space, X and Y are the camera viewport space coordinates, Z is in world space units from the plane that camera forward is normal to\n   * @returns Point in viewport space\n   */\n  worldToViewportPoint(point: Vector3, out: Vector3): Vector3 {\n    const cameraPoint = MathTemp.tempVec3;\n    const viewportPoint = MathTemp.tempVec4;\n\n    Vector3.transformCoordinate(point, this.viewMatrix, cameraPoint);\n    Vector3.transformToVec4(cameraPoint, this.projectionMatrix, viewportPoint);\n\n    const w = viewportPoint.w;\n    out.set((viewportPoint.x / w + 1.0) * 0.5, (1.0 - viewportPoint.y / w) * 0.5, -cameraPoint.z);\n    return out;\n  }\n\n  /**\n   * Transform a point from viewport space to world space.\n   * @param point - Point in viewport space, X and Y are the camera viewport space coordinates, Z is in world space units from the plane that camera forward is normal to\n   * @param out - Point in world space\n   * @returns Point in world space\n   */\n  viewportToWorldPoint(point: Vector3, out: Vector3): Vector3 {\n    const { nearClipPlane, farClipPlane } = this;\n    const nf = 1 / (nearClipPlane - farClipPlane);\n\n    let z: number;\n    if (this.isOrthographic) {\n      z = -point.z * 2 * nf;\n      z += (farClipPlane + nearClipPlane) * nf;\n    } else {\n      const pointZ = point.z;\n      z = -pointZ * (nearClipPlane + farClipPlane) * nf;\n      z += 2 * nearClipPlane * farClipPlane * nf;\n      z = z / pointZ;\n    }\n\n    this._innerViewportToWorldPoint(point.x, point.y, (z + 1.0) / 2.0, this._getInvViewProjMat(), out);\n    return out;\n  }\n\n  /**\n   * Generate a ray by a point in viewport.\n   * @param point - Point in viewport space, X and Y are the camera viewport space coordinates\n   * @param out - Ray\n   * @returns Ray\n   */\n  viewportPointToRay(point: Vector2, out: Ray): Ray {\n    const invViewProjMat = this._getInvViewProjMat();\n    // Use the intersection of the near clipping plane as the origin point.\n    const origin = this._innerViewportToWorldPoint(point.x, point.y, 0.0, invViewProjMat, out.origin);\n    // Use the intersection of the far clipping plane as the origin point.\n    const direction = this._innerViewportToWorldPoint(point.x, point.y, 1.0, invViewProjMat, out.direction);\n    Vector3.subtract(direction, origin, direction);\n    direction.normalize();\n    return out;\n  }\n\n  /**\n   * Transform the X and Y coordinates of a point from screen space to viewport space\n   * @param point - Point in screen space\n   * @param out - Point in viewport space\n   * @returns Point in viewport space\n   */\n  screenToViewportPoint<T extends Vector2 | Vector3>(point: Vector3 | Vector2, out: T): T {\n    const canvas = this.engine.canvas;\n    const viewport = this.viewport;\n    out.x = (point.x / canvas.width - viewport.x) / viewport.z;\n    out.y = (point.y / canvas.height - viewport.y) / viewport.w;\n    (<Vector3>point).z !== undefined && ((<Vector3>out).z = (<Vector3>point).z);\n    return out;\n  }\n\n  /**\n   * Transform the X and Y coordinates of a point from viewport space to screen space.\n   * @param point - Point in viewport space\n   * @param out - Point in screen space\n   * @returns Point in screen space\n   */\n  viewportToScreenPoint<T extends Vector2 | Vector3 | Vector4>(point: T, out: T): T {\n    const canvas = this.engine.canvas;\n    const viewport = this.viewport;\n    out.x = (viewport.x + point.x * viewport.z) * canvas.width;\n    out.y = (viewport.y + point.y * viewport.w) * canvas.height;\n    (<Vector3>point).z !== undefined && ((<Vector3>out).z = (<Vector3>point).z);\n    return out;\n  }\n\n  /**\n   * Transform a point from world space to screen space.\n   *\n   * @remarks\n   * Screen space is defined in pixels, the left-top of the screen is (0,0), the right-top is (canvasPixelWidth,canvasPixelHeight).\n   *\n   * @param point - Point in world space\n   * @param out - The result will be stored\n   * @returns X and Y are the coordinates of the point in screen space, Z is the distance from the camera in world space\n   */\n  worldToScreenPoint(point: Vector3, out: Vector3): Vector3 {\n    this.worldToViewportPoint(point, out);\n    return this.viewportToScreenPoint(out, out);\n  }\n\n  /**\n   * Transform a point from screen space to world space.\n   *\n   * @param point - Screen space point, the top-left of the screen is (0,0), the right-bottom is (pixelWidth,pixelHeight), The z position is in world units from the camera\n   * @param out - Point in world space\n   * @returns Point in world space\n   */\n  screenToWorldPoint(point: Vector3, out: Vector3): Vector3 {\n    this.screenToViewportPoint(point, out);\n    return this.viewportToWorldPoint(out, out);\n  }\n\n  /**\n   * Generate a ray by a point in screen.\n   * @param point - Point in screen space, the top-left of the screen is (0,0), the right-bottom is (pixelWidth,pixelHeight)\n   * @param out - Ray\n   * @returns Ray\n   */\n  screenPointToRay(point: Vector2, out: Ray): Ray {\n    const viewportPoint = MathTemp.tempVec2;\n    this.screenToViewportPoint(point, viewportPoint);\n    return this.viewportPointToRay(viewportPoint, out);\n  }\n\n  /**\n   * Manually call the rendering of the camera.\n   * @param cubeFace - Cube rendering surface collection\n   * @param mipLevel - Set mip level the data want to write, only take effect in webgl2.0\n   */\n  render(cubeFace?: TextureCubeFace, mipLevel: number = 0): void {\n    const context = this.engine._renderContext;\n    const virtualCamera = this._virtualCamera;\n\n    const transform = this.entity.transform;\n    Matrix.multiply(this.projectionMatrix, this.viewMatrix, virtualCamera.viewProjectionMatrix);\n    virtualCamera.position.copyFrom(transform.worldPosition);\n    if (virtualCamera.isOrthographic) {\n      transform.getWorldForward(virtualCamera.forward);\n    }\n\n    context.camera = this;\n    context.virtualCamera = virtualCamera;\n\n    // compute cull frustum.\n    if (this.enableFrustumCulling && (this._frustumViewChangeFlag.flag || this._isFrustumProjectDirty)) {\n      this._frustum.calculateFromMatrix(virtualCamera.viewProjectionMatrix);\n      this._frustumViewChangeFlag.flag = false;\n      this._isFrustumProjectDirty = false;\n    }\n\n    this._updateShaderData();\n\n    // union scene and camera macro.\n    ShaderMacroCollection.unionCollection(\n      this.scene._globalShaderMacro,\n      this.shaderData._macroCollection,\n      this._globalShaderMacro\n    );\n\n    if (mipLevel > 0 && !this.engine._hardwareRenderer.isWebGL2) {\n      mipLevel = 0;\n      Logger.error(\"mipLevel only take effect in WebGL2.0\");\n    }\n    this._renderPipeline.render(context, cubeFace, mipLevel);\n    this._engine._renderCount++;\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onEnable(): void {\n    this.entity.scene._attachRenderCamera(this);\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onDisable(): void {\n    this.entity.scene._detachRenderCamera(this);\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onDestroy(): void {\n    this._renderPipeline?.destroy();\n    this._isInvViewProjDirty.destroy();\n    this._isViewMatrixDirty.destroy();\n    this.shaderData._addRefCount(-1);\n  }\n\n  private _projMatChange(): void {\n    this._isFrustumProjectDirty = true;\n    this._isProjectionDirty = true;\n    this._isInvProjMatDirty = true;\n    this._isInvViewProjDirty.flag = true;\n  }\n\n  private _innerViewportToWorldPoint(x: number, y: number, z: number, invViewProjMat: Matrix, out: Vector3): Vector3 {\n    // Depth is a normalized value, 0 is nearPlane, 1 is farClipPlane.\n    // Transform to clipping space matrix\n    const clipPoint = MathTemp.tempVec3;\n    clipPoint.set(x * 2 - 1, 1 - y * 2, z * 2 - 1);\n    Vector3.transformCoordinate(clipPoint, invViewProjMat, out);\n    return out;\n  }\n\n  private _updateShaderData(): void {\n    const shaderData = this.shaderData;\n    shaderData.setMatrix(Camera._inverseViewMatrixProperty, this._transform.worldMatrix);\n    shaderData.setVector3(Camera._cameraPositionProperty, this._transform.worldPosition);\n  }\n\n  /**\n   * The inverse matrix of view projection matrix.\n   */\n  private _getInvViewProjMat(): Matrix {\n    if (this._isInvViewProjDirty.flag) {\n      this._isInvViewProjDirty.flag = false;\n      Matrix.multiply(this._transform.worldMatrix, this._getInverseProjectionMatrix(), this._invViewProjMat);\n    }\n    return this._invViewProjMat;\n  }\n\n  /**\n   * The inverse of the projection matrix.\n   */\n  private _getInverseProjectionMatrix(): Readonly<Matrix> {\n    if (this._isInvProjMatDirty) {\n      this._isInvProjMatDirty = false;\n      Matrix.invert(this.projectionMatrix, this._inverseProjectionMatrix);\n    }\n    return this._inverseProjectionMatrix;\n  }\n}\n", "import { AssetPromise } from \"./AssetPromise\";\n\nconst mimeType = {\n  json: \"json\",\n  gltf: \"json\",\n  mtl: \"json\",\n  prefab: \"json\",\n  txt: \"text\",\n  bin: \"arraybuffer\",\n  png: \"image\",\n  webp: \"image\",\n  jpg: \"image\"\n};\n\nconst defaultRetryCount = 1;\nconst defaultTimeout = Infinity;\nconst defaultInterval = 500;\n\nexport type RequestConfig = {\n  type?: XMLHttpRequestResponseType | \"image\";\n  retryCount?: number;\n  retryInterval?: number;\n  timeout?: number;\n} & RequestInit;\n\n/**\n * Web request.\n * @param url - The link\n * @param config - Load configuration\n */\nexport function request<T>(url: string, config: RequestConfig = {}): AssetPromise<T> {\n  return new AssetPromise((resolve, reject, setProgress) => {\n    const retryCount = config.retryCount ?? defaultRetryCount;\n    const retryInterval = config.retryInterval ?? defaultInterval;\n    config.timeout = config.timeout ?? defaultTimeout;\n    config.type = config.type ?? getMimeTypeFromUrl(url);\n    const realRequest = config.type === \"image\" ? requestImage : requestRes;\n    let lastError: Error;\n    const executor = new MultiExecutor(\n      () => {\n        return realRequest<T>(url, config)\n          .onProgress(setProgress)\n          .then((res) => {\n            resolve(res);\n            executor.stop();\n          })\n          .catch((err) => (lastError = err));\n      },\n      retryCount,\n      retryInterval\n    );\n    executor.start(() => {\n      reject(lastError);\n    });\n  });\n}\n\nfunction requestImage<T>(url: string, config: RequestConfig): AssetPromise<T> {\n  return new AssetPromise((resolve, reject) => {\n    const { timeout } = config;\n    const img = new Image();\n    const onerror = () => {\n      reject(new Error(`request ${url} fail`));\n    };\n    img.onerror = onerror;\n\n    img.onabort = onerror;\n\n    let timeoutId = -1;\n    if (timeout != Infinity) {\n      timeoutId = window.setTimeout(() => {\n        reject(new Error(`request ${url} timeout`));\n      }, timeout);\n    }\n\n    img.onload = ((timeoutId) => {\n      return () => {\n        // Call requestAnimationFrame to avoid iOS's bug.\n        requestAnimationFrame(() => {\n          //@ts-ignore\n          resolve(img);\n          img.onload = null;\n          img.onerror = null;\n          img.onabort = null;\n        });\n        clearTimeout(timeoutId);\n      };\n    })(timeoutId);\n\n    img.crossOrigin = \"anonymous\";\n\n    img.src = url;\n  });\n}\n\nfunction requestRes<T>(url: string, config: RequestConfig): AssetPromise<T> {\n  return new AssetPromise((resolve, reject, setProgress) => {\n    const xhr = new XMLHttpRequest();\n    xhr.timeout = config.timeout;\n    config.method = config.method ?? \"get\";\n    xhr.onload = () => {\n      if (xhr.status < 200 || xhr.status >= 300) {\n        reject(new Error(`request failed from: ${url}`));\n        return;\n      }\n      const result = xhr.response ?? xhr.responseText;\n      resolve(result);\n    };\n    xhr.onerror = () => {\n      reject(new Error(`request failed from: ${url}`));\n    };\n    xhr.ontimeout = () => {\n      reject(new Error(`request timeout from: ${url}`));\n    };\n    xhr.onprogress = (e) => {\n      setProgress(e.loaded / e.total);\n    };\n    xhr.open(config.method, url, true);\n    xhr.withCredentials = config.credentials === \"include\";\n    //@ts-ignore\n    xhr.responseType = config.type;\n    const headers = config.headers;\n    if (headers) {\n      Object.keys(headers).forEach((name) => {\n        xhr.setRequestHeader(name, headers[name]);\n      });\n    }\n    // @ts-ignore\n    xhr.send(config.body as XMLHttpRequestBodyInit);\n  });\n}\n\nfunction getMimeTypeFromUrl(url: string) {\n  const extname = url.substring(url.lastIndexOf(\".\") + 1);\n  return mimeType[extname];\n}\n\nexport class MultiExecutor {\n  private _timeoutId: number = -100;\n  private _currentCount = 0;\n  constructor(\n    private execFunc: (count?: number) => Promise<any>,\n    private totalCount: number,\n    private interval: number\n  ) {\n    this.exec = this.exec.bind(this);\n  }\n\n  private done: Function;\n  start(done?: Function): void {\n    this.done = done;\n    this.exec();\n  }\n\n  stop(): void {\n    clearTimeout(this._timeoutId);\n  }\n\n  private exec(): void {\n    if (this._currentCount >= this.totalCount) {\n      this.done && this.done();\n      return;\n    }\n    this._currentCount++;\n    this.execFunc(this._currentCount).then(() => {\n      //@ts-ignore\n      this._timeoutId = setTimeout(this.exec, this.interval);\n    });\n  }\n}\n", "import { AssetPromise } from \"./AssetPromise\";\nimport { LoadItem } from \"./LoadItem\";\nimport { request, RequestConfig } from \"./request\";\nimport { ResourceManager } from \"./ResourceManager\";\n/**\n * Loader abstract class.\n */\nexport abstract class Loader<T> {\n  /**\n   * Register a class with a string name for serialization and deserialization.\n   * @param key - class name\n   * @param obj - class object\n   */\n  public static registerClass(className: string, classDefine: { new (...args: any): any }) {\n    this._engineObjects[className] = classDefine;\n  }\n\n  /**\n   * Get the class object by class name.\n   * @param key - class name\n   * @returns class object\n   */\n  public static getClass(className: string): { new (...args: any): any } {\n    return this._engineObjects[className];\n  }\n\n  private static _engineObjects: { [key: string]: any } = {};\n\n  constructor(public readonly useCache: boolean) {}\n\n  request: <U>(url: string, config: RequestConfig) => AssetPromise<U> = request;\n  abstract load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<T> | Record<string, AssetPromise<any>>;\n}\n", "/**\n * Asset Type.\n */\nexport enum AssetType {\n  /**\n   * Plain text.\n   * @remarks Will not be cached based on url in ResourceManager.\n   */\n  Text = \"text\",\n  /**\n   * JSON.\n   * @remarks Will not be cached based on url in ResourceManager.\n   */\n  JSON = \"json\",\n  /**\n   * ArrayBuffer.\n   * @remarks Will not be cached based on url in ResourceManager.\n   */\n  Buffer = \"buffer\",\n  /** 2D Texture. */\n  Texture2D = \"texture2d\",\n  /** Cube Texture. */\n  TextureCube = \"texture-cube\",\n  /** Material. */\n  Material = \"material\",\n  /** Mesh. */\n  Mesh = \"mesh\",\n  /** AnimationClip. */\n  AnimationClip = \"AnimationClip\",\n  /** AnimatorController. */\n  AnimatorController = \"AnimatorController\",\n  /** Prefab.*/\n  Prefab = \"prefab\",\n  /** Compress Texture. */\n  KTX = \"ktx\",\n  /** Cube Compress Texture. */\n  KTXCube = \"ktx-cube\",\n  /** Sprite. */\n  Sprite = \"sprite\",\n  /** Sprite Atlas. */\n  SpriteAtlas = \"sprite-atlas\",\n  /** Ambient light. */\n  Env = \"environment\",\n  /** Scene. */\n  Scene = \"scene\",\n  /** HDR to cube. */\n  HDR = \"HDR\",\n  /** Font. */\n  Font = \"font\",\n  /** Source Font, include ttf、 otf and woff. */\n  SourceFont = \"source-font\"\n}\n", "/**\n * Alpha blend mode.\n */\nexport enum BlendMode {\n  /** SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\n  Normal,\n  /** SRC ALPHA * SRC + ONE * DEST */\n  Additive\n}\n", "/**\n * Set which face for render.\n */\nexport enum RenderFace {\n  /** Render front face. */\n  Front,\n  /** Render back face. */\n  Back,\n  /** Render double face. */\n  Double\n}\n", "import { Engine } from \"../Engine\";\nimport { BlendFactor, BlendOperation, CullMode, Shader } from \"../shader\";\nimport { RenderQueueType } from \"../shader/enums/RenderQueueType\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { RenderState } from \"../shader/state/RenderState\";\nimport { BlendMode } from \"./enums/BlendMode\";\nimport { RenderFace } from \"./enums/RenderFace\";\nimport { Material } from \"./Material\";\n\nexport class BaseMaterial extends Material {\n  protected static _baseColorProp = Shader.getPropertyByName(\"u_baseColor\");\n  protected static _baseTextureProp = Shader.getPropertyByName(\"u_baseTexture\");\n  protected static _baseTextureMacro: ShaderMacro = Shader.getMacroByName(\"BASETEXTURE\");\n  protected static _tilingOffsetProp = Shader.getPropertyByName(\"u_tilingOffset\");\n  protected static _normalTextureProp = Shader.getPropertyByName(\"u_normalTexture\");\n  protected static _normalIntensityProp = Shader.getPropertyByName(\"u_normalIntensity\");\n  protected static _normalTextureMacro: ShaderMacro = Shader.getMacroByName(\"NORMALTEXTURE\");\n  protected static _emissiveColorProp = Shader.getPropertyByName(\"u_emissiveColor\");\n  protected static _emissiveTextureProp = Shader.getPropertyByName(\"u_emissiveTexture\");\n  protected static _emissiveTextureMacro: ShaderMacro = Shader.getMacroByName(\"EMISSIVETEXTURE\");\n  protected static _transparentMacro: ShaderMacro = Shader.getMacroByName(\"OASIS_TRANSPARENT\");\n\n  private static _alphaCutoffProp = Shader.getPropertyByName(\"u_alphaCutoff\");\n  private static _alphaCutoffMacro: ShaderMacro = Shader.getMacroByName(\"ALPHA_CUTOFF\");\n\n  private _renderFace: RenderFace = RenderFace.Front;\n  private _isTransparent: boolean = false;\n  private _blendMode: BlendMode = BlendMode.Normal;\n\n  /**\n   * Shader used by the material.\n   */\n  get shader(): Shader {\n    return this._shader;\n  }\n\n  set shader(value: Shader) {\n    this._shader = value;\n\n    const renderStates = this._renderStates;\n    const lastStatesCount = renderStates.length;\n    const passCount = value.passes.length;\n\n    if (lastStatesCount < passCount) {\n      for (let i = lastStatesCount; i < passCount; i++) {\n        renderStates.push(new RenderState());\n        this.setBlendMode(i, BlendMode.Normal);\n      }\n    } else {\n      renderStates.length = passCount;\n    }\n  }\n\n  /**\n   * Whethor transparent of first shader pass render state.\n   */\n  get isTransparent(): boolean {\n    return this._isTransparent;\n  }\n\n  set isTransparent(value: boolean) {\n    if (value !== this._isTransparent) {\n      this.setIsTransparent(0, value);\n      this._isTransparent = value;\n    }\n  }\n\n  /**\n   * Blend mode of first shader pass render state.\n   * @remarks Only take effect when `isTransparent` is `true`.\n   */\n  get blendMode(): BlendMode {\n    return this._blendMode;\n  }\n\n  set blendMode(value: BlendMode) {\n    if (value !== this._blendMode) {\n      this.setBlendMode(0, value);\n      this._blendMode = value;\n    }\n  }\n\n  /**\n   * Alpha cutoff value.\n   * @remarks\n   * Fragments with alpha channel lower than cutoff value will be discarded.\n   * `0` means no fragment will be discarded.\n   */\n  get alphaCutoff(): number {\n    return this.shaderData.getFloat(BaseMaterial._alphaCutoffProp);\n  }\n\n  set alphaCutoff(value: number) {\n    const { shaderData } = this;\n    if (shaderData.getFloat(BaseMaterial._alphaCutoffProp) !== value) {\n      if (value) {\n        shaderData.enableMacro(BaseMaterial._alphaCutoffMacro);\n      } else {\n        shaderData.disableMacro(BaseMaterial._alphaCutoffMacro);\n      }\n\n      const { renderStates } = this;\n      for (let i = 0, n = renderStates.length; i < n; i++) {\n        const renderState = renderStates[i];\n        if (value > 0) {\n          renderState.renderQueueType = renderState.blendState.targetBlendState.enabled\n            ? RenderQueueType.Transparent\n            : RenderQueueType.AlphaTest;\n        } else {\n          renderState.renderQueueType = renderState.blendState.targetBlendState.enabled\n            ? RenderQueueType.Transparent\n            : RenderQueueType.Opaque;\n        }\n      }\n\n      shaderData.setFloat(BaseMaterial._alphaCutoffProp, value);\n    }\n  }\n\n  /**\n   * Face for render of first shader pass render state.\n   */\n  get renderFace(): RenderFace {\n    return this._renderFace;\n  }\n\n  set renderFace(value: RenderFace) {\n    if (value !== this._renderFace) {\n      this.setRenderFace(0, value);\n      this._renderFace = value;\n    }\n  }\n\n  /**\n   * Create a BaseMaterial instance.\n   * @param engine - Engine to which the material belongs\n   * @param shader - Shader used by the material\n   */\n  constructor(engine: Engine, shader: Shader) {\n    super(engine, shader);\n    this.shaderData.setFloat(BaseMaterial._alphaCutoffProp, 0);\n  }\n\n  /**\n   * Set if is transparent of the shader pass render state.\n   * @param passIndex - Shader pass index\n   * @param isTransparent - If is transparent\n   */\n  setIsTransparent(passIndex: number, isTransparent: boolean): void {\n    const { renderStates } = this;\n    if (renderStates.length < passIndex) {\n      throw \"Pass should less than pass count.\";\n    }\n    const renderState = renderStates[passIndex];\n\n    if (isTransparent) {\n      renderState.blendState.targetBlendState.enabled = true;\n      renderState.depthState.writeEnabled = false;\n      renderState.renderQueueType = RenderQueueType.Transparent;\n      this.shaderData.enableMacro(BaseMaterial._transparentMacro);\n    } else {\n      renderState.blendState.targetBlendState.enabled = false;\n      renderState.depthState.writeEnabled = true;\n      renderState.renderQueueType = this.shaderData.getFloat(BaseMaterial._alphaCutoffProp)\n        ? RenderQueueType.AlphaTest\n        : RenderQueueType.Opaque;\n      this.shaderData.disableMacro(BaseMaterial._transparentMacro);\n    }\n  }\n\n  /**\n   * Set the blend mode of shader pass render state.\n   * @param passIndex - Shader pass index\n   * @param blendMode - Blend mode\n   */\n  setBlendMode(passIndex: number, blendMode: BlendMode): void {\n    const { renderStates } = this;\n    if (renderStates.length < passIndex) {\n      throw \"Pass should less than pass count.\";\n    }\n    const { targetBlendState: target } = renderStates[passIndex].blendState;\n\n    switch (blendMode) {\n      case BlendMode.Normal:\n        target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n        target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n        target.sourceAlphaBlendFactor = BlendFactor.One;\n        target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n        target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n        break;\n      case BlendMode.Additive:\n        target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n        target.destinationColorBlendFactor = BlendFactor.One;\n        target.sourceAlphaBlendFactor = BlendFactor.One;\n        target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n        target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n        break;\n    }\n  }\n\n  /**\n   * Set the render face of shader pass render state.\n   * @param passIndex - Shader pass index\n   * @param renderFace - Render face\n   */\n  setRenderFace(passIndex: number, renderFace: RenderFace): void {\n    const { renderStates } = this;\n    if (renderStates.length < passIndex) {\n      throw \"Pass should less than pass count.\";\n    }\n\n    switch (renderFace) {\n      case RenderFace.Front:\n        renderStates[passIndex].rasterState.cullMode = CullMode.Back;\n        break;\n      case RenderFace.Back:\n        renderStates[passIndex].rasterState.cullMode = CullMode.Front;\n        break;\n      case RenderFace.Double:\n        renderStates[passIndex].rasterState.cullMode = CullMode.Off;\n        break;\n    }\n  }\n\n  /**\n   * @override\n   * Clone and return the instance.\n   */\n  clone(): BaseMaterial {\n    const dest = new BaseMaterial(this._engine, this.shader);\n    this.cloneTo(dest);\n    return dest;\n  }\n\n  /**\n   * @override\n   * Clone to the target material.\n   * @param target - target material\n   */\n  cloneTo(target: BaseMaterial): void {\n    super.cloneTo(target);\n    target._renderFace = this._renderFace;\n    target._isTransparent = this._isTransparent;\n    target._blendMode = this._blendMode;\n  }\n}\n", "import { Color, Vector4 } from \"@galacean/engine-math\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { BaseMaterial } from \"./BaseMaterial\";\n\n/**\n * Blinn-phong Material.\n */\nexport class BlinnPhongMaterial extends BaseMaterial {\n  private static _specularColorProp = Shader.getPropertyByName(\"u_specularColor\");\n  private static _shininessProp = Shader.getPropertyByName(\"u_shininess\");\n  private static _specularTextureProp = Shader.getPropertyByName(\"u_specularTexture\");\n\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(BlinnPhongMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(BlinnPhongMaterial._baseColorProp);\n    if (value !== baseColor) {\n      baseColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Base texture.\n   */\n  get baseTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._baseTextureProp);\n  }\n\n  set baseTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._baseTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(BlinnPhongMaterial._baseTextureMacro);\n    } else {\n      this.shaderData.disableMacro(BlinnPhongMaterial._baseTextureMacro);\n    }\n  }\n\n  /**\n   * Specular color.\n   */\n  get specularColor(): Color {\n    return this.shaderData.getColor(BlinnPhongMaterial._specularColorProp);\n  }\n\n  set specularColor(value: Color) {\n    const specularColor = this.shaderData.getColor(BlinnPhongMaterial._specularColorProp);\n    if (value !== specularColor) {\n      specularColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Specular texture.\n   */\n  get specularTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._specularTextureProp);\n  }\n\n  set specularTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._specularTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"O3_SPECULAR_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"O3_SPECULAR_TEXTURE\");\n    }\n  }\n\n  /**\n   * Emissive color.\n   */\n  get emissiveColor(): Color {\n    return this.shaderData.getColor(BlinnPhongMaterial._emissiveColorProp);\n  }\n\n  set emissiveColor(value: Color) {\n    const emissiveColor = this.shaderData.getColor(BlinnPhongMaterial._emissiveColorProp);\n    if (value !== emissiveColor) {\n      emissiveColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Emissive texture.\n   */\n  get emissiveTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._emissiveTextureProp);\n  }\n\n  set emissiveTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._emissiveTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(BlinnPhongMaterial._emissiveTextureMacro);\n    } else {\n      this.shaderData.disableMacro(BlinnPhongMaterial._emissiveTextureMacro);\n    }\n  }\n\n  /**\n   * Normal texture.\n   */\n  get normalTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._normalTextureProp);\n  }\n\n  set normalTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._normalTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(BlinnPhongMaterial._normalTextureMacro);\n    } else {\n      this.shaderData.disableMacro(BlinnPhongMaterial._normalTextureMacro);\n    }\n  }\n\n  /**\n   * Normal texture intensity.\n   */\n  get normalIntensity(): number {\n    return this.shaderData.getFloat(BlinnPhongMaterial._normalIntensityProp);\n  }\n\n  set normalIntensity(value: number) {\n    this.shaderData.setFloat(BlinnPhongMaterial._normalIntensityProp, value);\n  }\n\n  /**\n   * Set the specular reflection coefficient, the larger the value, the more convergent the specular reflection effect.\n   */\n  get shininess(): number {\n    return this.shaderData.getFloat(BlinnPhongMaterial._shininessProp);\n  }\n\n  set shininess(value: number) {\n    this.shaderData.setFloat(BlinnPhongMaterial._shininessProp, Math.max(value, 1e-4));\n  }\n\n  /**\n   * Tiling and offset of main textures.\n   */\n  get tilingOffset(): Vector4 {\n    return this.shaderData.getVector4(BlinnPhongMaterial._tilingOffsetProp);\n  }\n\n  set tilingOffset(value: Vector4) {\n    const tilingOffset = this.shaderData.getVector4(BlinnPhongMaterial._tilingOffsetProp);\n    if (value !== tilingOffset) {\n      tilingOffset.copyFrom(value);\n    }\n  }\n\n  /**\n   * Create a BlinnPhong material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"blinn-phong\"));\n\n    const shaderData = this.shaderData;\n\n    shaderData.enableMacro(\"O3_NEED_WORLDPOS\");\n    shaderData.enableMacro(\"O3_NEED_TILINGOFFSET\");\n\n    shaderData.setColor(BlinnPhongMaterial._baseColorProp, new Color(1, 1, 1, 1));\n    shaderData.setColor(BlinnPhongMaterial._specularColorProp, new Color(1, 1, 1, 1));\n    shaderData.setColor(BlinnPhongMaterial._emissiveColorProp, new Color(0, 0, 0, 1));\n    shaderData.setVector4(BlinnPhongMaterial._tilingOffsetProp, new Vector4(1, 1, 0, 0));\n    shaderData.setFloat(BlinnPhongMaterial._shininessProp, 16);\n    shaderData.setFloat(BlinnPhongMaterial._normalIntensityProp, 1);\n  }\n\n  /**\n   * @override\n   */\n  clone(): BlinnPhongMaterial {\n    var dest: BlinnPhongMaterial = new BlinnPhongMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n", "/**\n * Texture UV coordinate.\n */\nexport enum TextureCoordinate {\n  UV0 = 0,\n  UV1,\n  UV2,\n  UV3,\n  UV4,\n  UV5,\n  UV6,\n  UV7\n}\n", "import { Color, Vector4 } from \"@galacean/engine-math\";\nimport { Logger } from \"..\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { BaseMaterial } from \"./BaseMaterial\";\nimport { TextureCoordinate } from \"./enums/TextureCoordinate\";\n\n/**\n * PBR (Physically-Based Rendering) Material.\n */\nexport abstract class PBRBaseMaterial extends BaseMaterial {\n  private static _occlusionTextureIntensityProp = Shader.getPropertyByName(\"u_occlusionIntensity\");\n  private static _occlusionTextureCoordProp = Shader.getPropertyByName(\"u_occlusionTextureCoord\");\n  private static _occlusionTextureProp = Shader.getPropertyByName(\"u_occlusionTexture\");\n\n  private static _clearCoatProp = Shader.getPropertyByName(\"u_clearCoat\");\n  private static _clearCoatTextureProp = Shader.getPropertyByName(\"u_clearCoatTexture\");\n  private static _clearCoatRoughnessProp = Shader.getPropertyByName(\"u_clearCoatRoughness\");\n  private static _clearCoatRoughnessTextureProp = Shader.getPropertyByName(\"u_clearCoatRoughnessTexture\");\n  private static _clearCoatNormalTextureProp = Shader.getPropertyByName(\"u_clearCoatNormalTexture\");\n\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(PBRBaseMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(PBRBaseMaterial._baseColorProp);\n    if (value !== baseColor) {\n      baseColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Base texture.\n   */\n  get baseTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._baseTextureProp);\n  }\n\n  set baseTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._baseTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(PBRBaseMaterial._baseTextureMacro);\n    } else {\n      this.shaderData.disableMacro(PBRBaseMaterial._baseTextureMacro);\n    }\n  }\n\n  /**\n   * Normal texture.\n   */\n  get normalTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._normalTextureProp);\n  }\n\n  set normalTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._normalTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(PBRBaseMaterial._normalTextureMacro);\n    } else {\n      this.shaderData.disableMacro(PBRBaseMaterial._normalTextureMacro);\n    }\n  }\n\n  /**\n   * Normal texture intensity.\n   */\n  get normalTextureIntensity(): number {\n    return this.shaderData.getFloat(PBRBaseMaterial._normalIntensityProp);\n  }\n\n  set normalTextureIntensity(value: number) {\n    this.shaderData.setFloat(PBRBaseMaterial._normalIntensityProp, value);\n  }\n\n  /**\n   * Emissive color.\n   */\n  get emissiveColor(): Color {\n    return this.shaderData.getColor(PBRBaseMaterial._emissiveColorProp);\n  }\n\n  set emissiveColor(value: Color) {\n    const emissiveColor = this.shaderData.getColor(PBRBaseMaterial._emissiveColorProp);\n    if (value !== emissiveColor) {\n      emissiveColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Emissive texture.\n   */\n  get emissiveTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._emissiveTextureProp);\n  }\n\n  set emissiveTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._emissiveTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(PBRBaseMaterial._emissiveTextureMacro);\n    } else {\n      this.shaderData.disableMacro(PBRBaseMaterial._emissiveTextureMacro);\n    }\n  }\n\n  /**\n   * Occlusion texture.\n   */\n  get occlusionTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._occlusionTextureProp);\n  }\n\n  set occlusionTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._occlusionTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"OCCLUSIONTEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"OCCLUSIONTEXTURE\");\n    }\n  }\n\n  /**\n   * Occlusion texture intensity.\n   */\n  get occlusionTextureIntensity(): number {\n    return this.shaderData.getFloat(PBRBaseMaterial._occlusionTextureIntensityProp);\n  }\n\n  set occlusionTextureIntensity(value: number) {\n    this.shaderData.setFloat(PBRBaseMaterial._occlusionTextureIntensityProp, value);\n  }\n\n  /**\n   * Occlusion texture uv coordinate.\n   * @remarks Must be UV0 or UV1.\n   */\n  get occlusionTextureCoord(): TextureCoordinate {\n    return this.shaderData.getFloat(PBRBaseMaterial._occlusionTextureCoordProp);\n  }\n\n  set occlusionTextureCoord(value: TextureCoordinate) {\n    if (value > TextureCoordinate.UV1) {\n      Logger.warn(\"Occlusion texture uv coordinate must be UV0 or UV1.\");\n    }\n    this.shaderData.setFloat(PBRBaseMaterial._occlusionTextureCoordProp, value);\n  }\n\n  /**\n   * Tiling and offset of main textures.\n   */\n  get tilingOffset(): Vector4 {\n    return this.shaderData.getVector4(PBRBaseMaterial._tilingOffsetProp);\n  }\n\n  set tilingOffset(value: Vector4) {\n    const tilingOffset = this.shaderData.getVector4(PBRBaseMaterial._tilingOffsetProp);\n    if (value !== tilingOffset) {\n      tilingOffset.copyFrom(value);\n    }\n  }\n\n  /**\n   * The clearCoat layer intensity, default 0.\n   */\n  get clearCoat(): number {\n    return this.shaderData.getFloat(PBRBaseMaterial._clearCoatProp);\n  }\n\n  set clearCoat(value: number) {\n    if (!!this.shaderData.getFloat(PBRBaseMaterial._clearCoatProp) !== !!value) {\n      if (value === 0) {\n        this.shaderData.disableMacro(\"CLEARCOAT\");\n      } else {\n        this.shaderData.enableMacro(\"CLEARCOAT\");\n      }\n    }\n    this.shaderData.setFloat(PBRBaseMaterial._clearCoatProp, value);\n  }\n\n  /**\n   * The clearCoat layer intensity texture.\n   */\n  get clearCoatTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._clearCoatTextureProp);\n  }\n\n  set clearCoatTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._clearCoatTextureProp, value);\n\n    if (value) {\n      this.shaderData.enableMacro(\"HAS_CLEARCOATTEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"HAS_CLEARCOATTEXTURE\");\n    }\n  }\n\n  /**\n   * The clearCoat layer roughness, default 0.\n   */\n  get clearCoatRoughness(): number {\n    return this.shaderData.getFloat(PBRBaseMaterial._clearCoatRoughnessProp);\n  }\n\n  set clearCoatRoughness(value: number) {\n    this.shaderData.setFloat(PBRBaseMaterial._clearCoatRoughnessProp, value);\n  }\n\n  /**\n   * The clearCoat layer roughness texture.\n   */\n  get clearCoatRoughnessTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._clearCoatRoughnessTextureProp);\n  }\n\n  set clearCoatRoughnessTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._clearCoatRoughnessTextureProp, value);\n\n    if (value) {\n      this.shaderData.enableMacro(\"HAS_CLEARCOATROUGHNESSTEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"HAS_CLEARCOATROUGHNESSTEXTURE\");\n    }\n  }\n\n  /**\n   * The clearCoat normal map texture.\n   */\n  get clearCoatNormalTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._clearCoatNormalTextureProp);\n  }\n\n  set clearCoatNormalTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._clearCoatNormalTextureProp, value);\n\n    if (value) {\n      this.shaderData.enableMacro(\"HAS_CLEARCOATNORMALTEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"HAS_CLEARCOATNORMALTEXTURE\");\n    }\n  }\n\n  /**\n   * Create a pbr base material instance.\n   * @param engine - Engine to which the material belongs\n   * @param shader - Shader used by the material\n   */\n  protected constructor(engine: Engine, shader: Shader) {\n    super(engine, shader);\n\n    const shaderData = this.shaderData;\n\n    shaderData.enableMacro(\"O3_NEED_WORLDPOS\");\n    shaderData.enableMacro(\"O3_NEED_TILINGOFFSET\");\n\n    shaderData.setColor(PBRBaseMaterial._baseColorProp, new Color(1, 1, 1, 1));\n    shaderData.setColor(PBRBaseMaterial._emissiveColorProp, new Color(0, 0, 0, 1));\n    shaderData.setVector4(PBRBaseMaterial._tilingOffsetProp, new Vector4(1, 1, 0, 0));\n\n    shaderData.setFloat(PBRBaseMaterial._normalIntensityProp, 1);\n    shaderData.setFloat(PBRBaseMaterial._occlusionTextureIntensityProp, 1);\n    shaderData.setFloat(PBRBaseMaterial._occlusionTextureCoordProp, TextureCoordinate.UV0);\n\n    shaderData.setFloat(PBRBaseMaterial._clearCoatProp, 0);\n    shaderData.setFloat(PBRBaseMaterial._clearCoatRoughnessProp, 0);\n  }\n}\n", "import { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { PBRBaseMaterial } from \"./PBRBaseMaterial\";\n\n/**\n * PBR (Metallic-Roughness Workflow) Material.\n */\nexport class PBRMaterial extends PBRBaseMaterial {\n  private static _metallicProp = Shader.getPropertyByName(\"u_metal\");\n  private static _roughnessProp = Shader.getPropertyByName(\"u_roughness\");\n  private static _roughnessMetallicTextureProp = Shader.getPropertyByName(\"u_roughnessMetallicTexture\");\n\n  private static _iorProp = Shader.getPropertyByName(\"material_IOR\");\n\n  /**\n   * Index Of Refraction.\n   * @defaultValue `1.5`\n   */\n  get ior(): number {\n    return this.shaderData.getFloat(PBRMaterial._iorProp);\n  }\n\n  set ior(v: number) {\n    this.shaderData.setFloat(PBRMaterial._iorProp, Math.max(v, 0));\n  }\n\n  /**\n   * Metallic.\n   * @defaultValue `1.0`\n   */\n  get metallic(): number {\n    return this.shaderData.getFloat(PBRMaterial._metallicProp);\n  }\n\n  set metallic(value: number) {\n    this.shaderData.setFloat(PBRMaterial._metallicProp, value);\n  }\n\n  /**\n   * Roughness. default 1.0.\n   * @defaultValue `1.0`\n   */\n  get roughness(): number {\n    return this.shaderData.getFloat(PBRMaterial._roughnessProp);\n  }\n\n  set roughness(value: number) {\n    this.shaderData.setFloat(PBRMaterial._roughnessProp, value);\n  }\n\n  /**\n   * Roughness metallic texture.\n   * @remarks G channel is roughness, B channel is metallic\n   */\n  get roughnessMetallicTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRMaterial._roughnessMetallicTextureProp);\n  }\n\n  set roughnessMetallicTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRMaterial._roughnessMetallicTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"ROUGHNESSMETALLICTEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"ROUGHNESSMETALLICTEXTURE\");\n    }\n  }\n\n  /**\n   * Create a pbr metallic-roughness workflow material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"pbr\"));\n    this.shaderData.setFloat(PBRMaterial._metallicProp, 1);\n    this.shaderData.setFloat(PBRMaterial._roughnessProp, 1);\n    this.shaderData.setFloat(PBRMaterial._iorProp, 1.5);\n  }\n\n  /**\n   * @override\n   */\n  clone(): PBRMaterial {\n    const dest = new PBRMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n", "import { Color } from \"@galacean/engine-math\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { PBRBaseMaterial } from \"./PBRBaseMaterial\";\n\n/**\n * PBR (Specular-Glossiness Workflow) Material.\n */\nexport class PBRSpecularMaterial extends PBRBaseMaterial {\n  private static _specularColorProp = Shader.getPropertyByName(\"u_PBRSpecularColor\");\n  private static _glossinessProp = Shader.getPropertyByName(\"u_glossiness\");\n  private static _specularGlossinessTextureProp = Shader.getPropertyByName(\"u_specularGlossinessTexture\");\n  private static _specularGlossinessTextureMacro: ShaderMacro = Shader.getMacroByName(\"SPECULARGLOSSINESSTEXTURE\");\n\n  /**\n   * Specular color.\n   */\n  get specularColor(): Color {\n    return this.shaderData.getColor(PBRSpecularMaterial._specularColorProp);\n  }\n\n  set specularColor(value: Color) {\n    const specularColor = this.shaderData.getColor(PBRSpecularMaterial._specularColorProp);\n    if (value !== specularColor) {\n      specularColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Glossiness.\n   */\n  get glossiness(): number {\n    return this.shaderData.getFloat(PBRSpecularMaterial._glossinessProp);\n  }\n\n  set glossiness(value: number) {\n    this.shaderData.setFloat(PBRSpecularMaterial._glossinessProp, value);\n  }\n\n  /**\n   * Specular glossiness texture.\n   * @remarks RGB is specular, A is glossiness\n   */\n  get specularGlossinessTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRSpecularMaterial._specularGlossinessTextureProp);\n  }\n\n  set specularGlossinessTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRSpecularMaterial._specularGlossinessTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(PBRSpecularMaterial._specularGlossinessTextureMacro);\n    } else {\n      this.shaderData.disableMacro(PBRSpecularMaterial._specularGlossinessTextureMacro);\n    }\n  }\n\n  /**\n   * Create a pbr specular-glossiness workflow material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"pbr-specular\"));\n\n    this.shaderData.setColor(PBRSpecularMaterial._specularColorProp, new Color(1, 1, 1, 1));\n    this.shaderData.setFloat(PBRSpecularMaterial._glossinessProp, 1.0);\n  }\n\n  /**\n   * @override\n   */\n  clone(): PBRSpecularMaterial {\n    const dest = new PBRSpecularMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n", "import { Color, Vector4 } from \"@galacean/engine-math\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { BaseMaterial } from \"./BaseMaterial\";\n\n/**\n * Unlit Material.\n */\nexport class UnlitMaterial extends BaseMaterial {\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(UnlitMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(UnlitMaterial._baseColorProp);\n    if (value !== baseColor) {\n      baseColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Base texture.\n   */\n  get baseTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(UnlitMaterial._baseTextureProp);\n  }\n\n  set baseTexture(value: Texture2D) {\n    this.shaderData.setTexture(UnlitMaterial._baseTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(UnlitMaterial._baseTextureMacro);\n    } else {\n      this.shaderData.disableMacro(UnlitMaterial._baseTextureMacro);\n    }\n  }\n\n  /**\n   * Tiling and offset of main textures.\n   */\n  get tilingOffset(): Vector4 {\n    return this.shaderData.getVector4(UnlitMaterial._tilingOffsetProp);\n  }\n\n  set tilingOffset(value: Vector4) {\n    const tilingOffset = this.shaderData.getVector4(UnlitMaterial._tilingOffsetProp);\n    if (value !== tilingOffset) {\n      tilingOffset.copyFrom(value);\n    }\n  }\n\n  /**\n   * Create a unlit material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"unlit\"));\n\n    const shaderData = this.shaderData;\n\n    shaderData.enableMacro(\"OMIT_NORMAL\");\n    shaderData.enableMacro(\"O3_NEED_TILINGOFFSET\");\n\n    shaderData.setColor(UnlitMaterial._baseColorProp, new Color(1, 1, 1, 1));\n    shaderData.setVector4(UnlitMaterial._tilingOffsetProp, new Vector4(1, 1, 0, 0));\n  }\n\n  /**\n   * @override\n   */\n  clone(): UnlitMaterial {\n    const dest = new UnlitMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n", "/**\n * The horizontal alignment of the text.\n */\nexport enum TextHorizontalAlignment {\n  /** Align left horizontally */\n  Left = 0,\n  /** Align center horizontally */\n  Center = 1,\n  /** Align right horizontally */\n  Right = 2\n}\n\n/**\n * The vertical alignment of the text.\n */\nexport enum TextVerticalAlignment {\n  /** Align top vertically */\n  Top = 0,\n  /** Align center vertically */\n  Center = 1,\n  /** Align bottom vertically */\n  Bottom = 2\n}\n", "/**\n * The way to handle the situation where wrapped text is too tall to fit in the height.\n */\nexport enum OverflowMode {\n  /** Overflow when the text is too tall */\n  Overflow = 0,\n  /** Truncate with height when the text is too tall */\n  Truncate = 1\n}\n", "/**\n * The style of the font.\n */\nexport enum FontStyle {\n  /** Set font without style */\n  None = 0x0,\n  /** Set font bold */\n  Bold = 0x1,\n  /** Set font italic */\n  Italic = 0x2\n}\n", "import { RefObject } from \"../../asset/RefObject\";\nimport { Engine } from \"../../Engine\";\nimport { Sprite } from \"../sprite/Sprite\";\n\n/**\n * Sprite Atlas.\n */\nexport class SpriteAtlas extends RefObject {\n  private _sprites: Sprite[] = new Array<Sprite>();\n  private _spriteNamesToIndex: Record<string, number> = {};\n\n  /**\n   * All the sprites in the atlas.\n   */\n  get sprites(): Readonly<Sprite[]> {\n    return this._sprites;\n  }\n\n  /**\n   * Get the last sprite named 'name' from the atlas.\n   * @param name - The name of the sprite you want to find\n   * @returns The sprite you want to find\n   */\n  getSprite(name: string): Sprite {\n    const sprite = this._sprites[this._spriteNamesToIndex[name]];\n    if (!sprite) {\n      console.warn(\"There is no sprite named \" + name + \" in the atlas.\");\n    }\n    return sprite;\n  }\n\n  /**\n   * Get all the sprite named 'name' from the atlas.\n   * @param name - The name of the sprites you want to find\n   * @param outSprites - This array holds the sprites found\n   * @returns The sprites you want to find\n   */\n  getSprites(name: string, outSprites: Sprite[]): Sprite[] {\n    outSprites.length = 0;\n    let i = this._spriteNamesToIndex[name];\n    if (i !== undefined) {\n      const { _sprites } = this;\n      for (; i >= 0; i--) {\n        const sprite = _sprites[i];\n        sprite.name === name && outSprites.push(sprite);\n      }\n    } else {\n      console.warn(\"The name of the sprite you want to find is not exit in SpriteAtlas.\");\n    }\n    return outSprites;\n  }\n\n  /**\n   * Constructor a SpriteAtlas.\n   * @param engine - Engine to which the SpriteAtlas belongs\n   */\n  constructor(engine: Engine) {\n    super(engine);\n  }\n\n  /**\n   * @internal\n   */\n  _addSprite(sprite: Sprite): void {\n    this._spriteNamesToIndex[sprite.name] = this._sprites.push(sprite) - 1;\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy(): void {\n    this._sprites = null;\n    this._spriteNamesToIndex = null;\n  }\n}\n", "/**\n * Sprite's drawing mode enumeration.\n */\nexport enum SpriteDrawMode {\n  /** Overall scaling when modifying size. */\n  Simple,\n  /** When modifying the size, it is transformed according to the 9-slice settings (border). */\n  Sliced\n}\n", "import { BoundingBox, MathUtil, Rect, Vector2, Vector4 } from \"@galacean/engine-math\";\nimport { RefObject } from \"../../asset/RefObject\";\nimport { Engine } from \"../../Engine\";\nimport { Texture2D } from \"../../texture/Texture2D\";\nimport { UpdateFlagManager } from \"../../UpdateFlagManager\";\nimport { SpriteModifyFlags } from \"../enums/SpriteModifyFlags\";\n\n/**\n * 2D sprite.\n */\nexport class Sprite extends RefObject {\n  /** The name of sprite. */\n  name: string;\n\n  private _automaticWidth: number = 0;\n  private _automaticHeight: number = 0;\n  private _customWidth: number = undefined;\n  private _customHeight: number = undefined;\n\n  private _positions: Vector2[] = [new Vector2(), new Vector2(), new Vector2(), new Vector2()];\n  private _uvs: Vector2[] = [new Vector2(), new Vector2(), new Vector2(), new Vector2()];\n  private _bounds: BoundingBox = new BoundingBox();\n\n  private _texture: Texture2D = null;\n  private _atlasRotated: boolean = false;\n  private _atlasRegion: Rect = new Rect(0, 0, 1, 1);\n  private _atlasRegionOffset: Vector4 = new Vector4(0, 0, 0, 0);\n\n  private _region: Rect = new Rect(0, 0, 1, 1);\n  private _pivot: Vector2 = new Vector2(0.5, 0.5);\n  private _border: Vector4 = new Vector4(0, 0, 0, 0);\n\n  private _dirtyUpdateFlag: SpriteUpdateFlags = SpriteUpdateFlags.all;\n\n  /** @internal */\n  _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n\n  /**\n   * The reference to the used texture.\n   */\n  get texture(): Texture2D {\n    return this._texture;\n  }\n\n  set texture(value: Texture2D) {\n    if (this._texture !== value) {\n      this._texture = value;\n      this._dispatchSpriteChange(SpriteModifyFlags.texture);\n      if (this._customWidth === undefined || this._customHeight === undefined) {\n        this._dispatchSpriteChange(SpriteModifyFlags.size);\n      }\n    }\n  }\n\n  /**\n   * The width of the sprite (in world coordinates).\n   * \n   * @remarks\n   * If width is set, return the set value,\n   * otherwise return the width calculated according to `Texture.width`, `Sprite.region`, `Sprite.atlasRegion`, `Sprite.atlasRegionOffset` and `Engine._pixelsPerUnit`.\n   */\n  get width(): number {\n    if (this._customWidth !== undefined) {\n      return this._customWidth;\n    } else {\n      this._dirtyUpdateFlag & SpriteUpdateFlags.automaticSize && this._calDefaultSize();\n      return this._automaticWidth;\n    }\n  }\n\n  set width(value: number) {\n    if (this._customWidth !== value) {\n      this._customWidth = value;\n      this._dispatchSpriteChange(SpriteModifyFlags.size);\n    }\n  }\n\n  /**\n   * The height of the sprite (in world coordinates).\n   * \n   * @remarks\n   * If height is set, return the set value,\n   * otherwise return the height calculated according to `Texture.height`, `Sprite.region`, `Sprite.atlasRegion`, `Sprite.atlasRegionOffset` and `Engine._pixelsPerUnit`.\n   */\n  get height(): number {\n    if (this._customHeight !== undefined) {\n      return this._customHeight;\n    } else {\n      this._dirtyUpdateFlag & SpriteUpdateFlags.automaticSize && this._calDefaultSize();\n      return this._automaticHeight;\n    }\n  }\n\n  set height(value: number) {\n    if (this._customHeight !== value) {\n      this._customHeight = value;\n      this._dispatchSpriteChange(SpriteModifyFlags.size);\n    }\n  }\n\n  /**\n   * Is it rotated 90 degrees clockwise when packing.\n   */\n  get atlasRotated(): boolean {\n    return this._atlasRotated;\n  }\n\n  set atlasRotated(value: boolean) {\n    if (this._atlasRotated != value) {\n      this._atlasRotated = value;\n    }\n  }\n\n  /**\n   * The rectangle region of the original texture on its atlas texture, specified in normalized.\n   */\n  get atlasRegion(): Rect {\n    return this._atlasRegion;\n  }\n\n  set atlasRegion(value: Rect) {\n    const x = MathUtil.clamp(value.x, 0, 1);\n    const y = MathUtil.clamp(value.y, 0, 1);\n    this._atlasRegion.set(x, y, MathUtil.clamp(value.width, 0, 1 - x), MathUtil.clamp(value.height, 0, 1 - y));\n    this._dispatchSpriteChange(SpriteModifyFlags.atlasRegion);\n    if (this._customWidth === undefined || this._customHeight === undefined) {\n      this._dispatchSpriteChange(SpriteModifyFlags.size);\n    }\n  }\n\n  /**\n   * The rectangle region offset of the original texture on its atlas texture, specified in normalized.\n   */\n  get atlasRegionOffset(): Vector4 {\n    return this._atlasRegionOffset;\n  }\n\n  set atlasRegionOffset(value: Vector4) {\n    const x = MathUtil.clamp(value.x, 0, 1);\n    const y = MathUtil.clamp(value.y, 0, 1);\n    this._atlasRegionOffset.set(x, y, MathUtil.clamp(value.z, 0, 1 - x), MathUtil.clamp(value.w, 0, 1 - y));\n    this._dispatchSpriteChange(SpriteModifyFlags.atlasRegionOffset);\n    if (this._customWidth === undefined || this._customHeight === undefined) {\n      this._dispatchSpriteChange(SpriteModifyFlags.size);\n    }\n  }\n\n  /**\n   * The rectangle region of the sprite, specified in normalized.\n   */\n  get region(): Rect {\n    return this._region;\n  }\n\n  set region(value: Rect) {\n    const region = this._region;\n    const x = MathUtil.clamp(value.x, 0, 1);\n    const y = MathUtil.clamp(value.y, 0, 1);\n    region.set(x, y, MathUtil.clamp(value.width, 0, 1 - x), MathUtil.clamp(value.height, 0, 1 - y));\n    this._dispatchSpriteChange(SpriteModifyFlags.region);\n    if (this._customWidth === undefined || this._customHeight === undefined) {\n      this._dispatchSpriteChange(SpriteModifyFlags.size);\n    }\n  }\n\n  /**\n   * Location of the sprite's center point in the rectangle region, specified in normalized.\n   * The origin is at the bottom left and the default value is (0.5, 0.5).\n   */\n  get pivot(): Vector2 {\n    return this._pivot;\n  }\n\n  set pivot(value: Vector2) {\n    const pivot = this._pivot;\n    if (pivot === value) {\n      this._dispatchSpriteChange(SpriteModifyFlags.pivot);\n    } else {\n      const { x, y } = value;\n      if (pivot.x !== x || pivot.y !== y) {\n        pivot.set(x, y);\n        this._dispatchSpriteChange(SpriteModifyFlags.pivot);\n      }\n    }\n  }\n\n  /**\n   * Get the border of the sprite.\n   *  x      y       z     w\n   *  |      |       |     |\n   * Left, bottom, right, top.\n   * @remarks only use in sliced mode.\n   */\n  get border(): Vector4 {\n    return this._border;\n  }\n\n  set border(value: Vector4) {\n    const border = this._border;\n    const x = MathUtil.clamp(value.x, 0, 1);\n    const y = MathUtil.clamp(value.y, 0, 1);\n    border.set(x, y, MathUtil.clamp(value.z, 0, 1 - x), MathUtil.clamp(value.w, 0, 1 - y));\n    this._dispatchSpriteChange(SpriteModifyFlags.border);\n  }\n\n  /**\n   * Constructor a Sprite.\n   * @param engine - Engine to which the sprite belongs\n   * @param texture - Texture from which to obtain the Sprite\n   * @param region - Rectangle region of the texture to use for the Sprite, specified in normalized\n   * @param pivot - Sprite's pivot point relative to its graphic rectangle, specified in normalized\n   * @param border - Boundaries when using Slice DrawMode, specified in normalized\n   * @param name - The name of Sprite\n   */\n  constructor(\n    engine: Engine,\n    texture: Texture2D = null,\n    region: Rect = null,\n    pivot: Vector2 = null,\n    border: Vector4 = null,\n    name: string = null\n  ) {\n    super(engine);\n    this._texture = texture;\n    region && this._region.copyFrom(region);\n    pivot && this._pivot.copyFrom(pivot);\n    border && this._border.copyFrom(border);\n    this.name = name;\n  }\n\n  /**\n   * Clone.\n   * @returns Cloned sprite\n   */\n  clone(): Sprite {\n    const cloneSprite = new Sprite(this._engine, this._texture, this._region, this._pivot, this._border, this.name);\n    cloneSprite._atlasRotated = this._atlasRotated;\n    cloneSprite._atlasRegion.copyFrom(this._atlasRegion);\n    cloneSprite._atlasRegionOffset.copyFrom(this._atlasRegionOffset);\n    return cloneSprite;\n  }\n\n  /**\n   * @internal\n   */\n  _getPositions(): Vector2[] {\n    this._dirtyUpdateFlag & SpriteUpdateFlags.positions && this._updatePositions();\n    return this._positions;\n  }\n\n  /**\n   * @internal\n   */\n  _getUVs(): Vector2[] {\n    this._dirtyUpdateFlag & SpriteUpdateFlags.uvs && this._updateUVs();\n    return this._uvs;\n  }\n\n  /**\n   * @internal\n   */\n  _getBounds(): BoundingBox {\n    this._dirtyUpdateFlag & SpriteUpdateFlags.positions && this._updatePositions();\n    return this._bounds;\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy(): void {\n    if (this._texture) {\n      this._texture = null;\n    }\n  }\n\n  private _calDefaultSize(): void {\n    if (this._texture) {\n      const { _texture, _atlasRegion, _atlasRegionOffset, _region } = this;\n      const pixelsPerUnitReciprocal = 1.0 / Engine._pixelsPerUnit;\n      this._automaticWidth =\n        ((_texture.width * _atlasRegion.width) / (1 - _atlasRegionOffset.x - _atlasRegionOffset.z)) *\n        _region.width *\n        pixelsPerUnitReciprocal;\n      this._automaticHeight =\n        ((_texture.height * _atlasRegion.height) / (1 - _atlasRegionOffset.y - _atlasRegionOffset.w)) *\n        _region.height *\n        pixelsPerUnitReciprocal;\n    } else {\n      this._automaticWidth = this._automaticHeight = 0;\n    }\n    this._dirtyUpdateFlag &= ~SpriteUpdateFlags.automaticSize;\n  }\n\n  private _updatePositions(): void {\n    const blank = this._atlasRegionOffset;\n    const { x: regionX, y: regionY, width: regionW, height: regionH } = this._region;\n    const regionRight = 1 - regionX - regionW;\n    const regionBottom = 1 - regionY - regionH;\n    const left = Math.max(blank.x - regionX, 0) / regionW;\n    const bottom = Math.max(blank.w - regionY, 0) / regionH;\n    const right = 1 - Math.max(blank.z - regionRight, 0) / regionW;\n    const top = 1 - Math.max(blank.y - regionBottom, 0) / regionH;\n\n    // Update positions.\n    // ---------------\n    //  2 - 3\n    //  |   |\n    //  0 - 1\n    // ---------------\n    const positions = this._positions;\n    positions[0].set(left, bottom);\n    positions[1].set(right, bottom);\n    positions[2].set(left, top);\n    positions[3].set(right, top);\n\n    const { min, max } = this._bounds;\n    min.set(left, bottom, 0);\n    max.set(right, top, 0);\n    this._dirtyUpdateFlag &= ~SpriteUpdateFlags.positions;\n  }\n\n  private _updateUVs(): void {\n    const { _uvs: uv, _atlasRegionOffset: atlasRegionOffset } = this;\n    const { x: regionX, y: regionY, width: regionW, height: regionH } = this._region;\n    const regionRight = 1 - regionX - regionW;\n    const regionBottom = 1 - regionY - regionH;\n    const { x: atlasRegionX, y: atlasRegionY, width: atlasRegionW, height: atlasRegionH } = this._atlasRegion;\n    const { x: offsetLeft, y: offsetTop, z: offsetRight, w: offsetBottom } = atlasRegionOffset;\n    const realWidth = atlasRegionW / (1 - offsetLeft - offsetRight);\n    const realHeight = atlasRegionH / (1 - offsetTop - offsetBottom);\n    // Coordinates of the four boundaries.\n    const left = Math.max(regionX - offsetLeft, 0) * realWidth + atlasRegionX;\n    const top = Math.max(regionBottom - offsetTop, 0) * realHeight + atlasRegionY;\n    const right = atlasRegionW + atlasRegionX - Math.max(regionRight - offsetRight, 0) * realWidth;\n    const bottom = atlasRegionH + atlasRegionY - Math.max(regionY - offsetBottom, 0) * realHeight;\n    const { x: borderLeft, y: borderBottom, z: borderRight, w: borderTop } = this._border;\n    // Left-Bottom\n    uv[0].set(left, bottom);\n    // Border ( Left-Bottom )\n    uv[1].set(\n      (regionX - offsetLeft + borderLeft * regionW) * realWidth + atlasRegionX,\n      atlasRegionH + atlasRegionY - (regionY - offsetBottom + borderBottom * regionH) * realHeight\n    );\n    // Border ( Right-Top )\n    uv[2].set(\n      atlasRegionW + atlasRegionX - (regionRight - offsetRight + borderRight * regionW) * realWidth,\n      (regionBottom - offsetTop + borderTop * regionH) * realHeight + atlasRegionY\n    );\n    // Right-Top\n    uv[3].set(right, top);\n    this._dirtyUpdateFlag &= ~SpriteUpdateFlags.uvs;\n  }\n\n  private _dispatchSpriteChange(type: SpriteModifyFlags): void {\n    switch (type) {\n      case SpriteModifyFlags.texture:\n        this._dirtyUpdateFlag |= SpriteUpdateFlags.automaticSize;\n        break;\n      case SpriteModifyFlags.atlasRegionOffset:\n      case SpriteModifyFlags.region:\n        this._dirtyUpdateFlag |= SpriteUpdateFlags.all;\n        break;\n      case SpriteModifyFlags.atlasRegion:\n        this._dirtyUpdateFlag |= SpriteUpdateFlags.automaticSize | SpriteUpdateFlags.uvs;\n        break;\n      case SpriteModifyFlags.border:\n        this._dirtyUpdateFlag |= SpriteUpdateFlags.uvs;\n        break;\n    }\n    this._updateFlagManager.dispatch(type);\n  }\n}\n\nenum SpriteUpdateFlags {\n  positions = 0x1,\n  uvs = 0x2,\n  automaticSize = 0x4,\n  all = 0x7\n}\n", "import { Matrix, Vector2, Vector3 } from \"@galacean/engine-math\";\nimport { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { SpriteRenderer } from \"../sprite/SpriteRenderer\";\nimport { IAssembler } from \"./IAssembler\";\n\n/**\n * @internal\n */\n@StaticInterfaceImplement<IAssembler>()\nexport class SlicedSpriteAssembler {\n  static _worldMatrix: Matrix = new Matrix();\n  static resetData(renderer: SpriteRenderer): void {\n    const { _renderData: renderData } = renderer;\n    const { positions, uvs } = renderData;\n    if (positions.length < 16) {\n      for (let i = positions.length; i < 16; i++) {\n        positions.push(new Vector3());\n        uvs.push(new Vector2());\n      }\n    }\n    renderData.triangles = [];\n  }\n\n  static updatePositions(renderer: SpriteRenderer): void {\n    const { width, height, sprite } = renderer;\n    const { positions, uvs, triangles } = renderer._renderData;\n    const { border } = sprite;\n    const spriteUVs = sprite._getUVs();\n    // Update local positions.\n    const spritePositions = sprite._getPositions();\n    const { x: left, y: bottom } = spritePositions[0];\n    const { x: right, y: top } = spritePositions[3];\n    const { width: expectWidth, height: expectHeight } = sprite;\n    const fixedLeft = expectWidth * border.x;\n    const fixedBottom = expectHeight * border.y;\n    const fixedRight = expectWidth * border.z;\n    const fixedTop = expectHeight * border.w;\n\n    // ------------------------\n    //     [3]\n    //      |\n    //     [2]\n    //      |\n    //     [1]\n    //      |\n    // row [0] - [1] - [2] - [3]\n    //    column\n    // ------------------------\n    // Calculate row and column.\n    let row: number[], column: number[];\n    if (fixedLeft + fixedRight > width) {\n      const widthScale = width / (fixedLeft + fixedRight);\n      row = [\n        expectWidth * left * widthScale,\n        fixedLeft * widthScale,\n        fixedLeft * widthScale,\n        width - expectWidth * (1 - right) * widthScale\n      ];\n    } else {\n      row = [expectWidth * left, fixedLeft, width - fixedRight, width - expectWidth * (1 - right)];\n    }\n\n    if (fixedTop + fixedBottom > height) {\n      const heightScale = height / (fixedTop + fixedBottom);\n      column = [\n        expectHeight * bottom * heightScale,\n        fixedBottom * heightScale,\n        fixedBottom * heightScale,\n        height - expectHeight * (1 - top) * heightScale\n      ];\n    } else {\n      column = [expectHeight * bottom, fixedBottom, height - fixedTop, height - expectHeight * (1 - top)];\n    }\n\n    // Update renderer's worldMatrix.\n    const { x: pivotX, y: pivotY } = renderer.sprite.pivot;\n    const localTransX = renderer.width * pivotX;\n    const localTransY = renderer.height * pivotY;\n    // Renderer's worldMatrix.\n    const { _worldMatrix: worldMatrix } = SlicedSpriteAssembler;\n    const { elements: wE } = worldMatrix;\n    // Parent's worldMatrix.\n    const { elements: pWE } = renderer.entity.transform.worldMatrix;\n    const sx = renderer.flipX ? -1 : 1;\n    const sy = renderer.flipY ? -1 : 1;\n    (wE[0] = pWE[0] * sx), (wE[1] = pWE[1] * sx), (wE[2] = pWE[2] * sx);\n    (wE[4] = pWE[4] * sy), (wE[5] = pWE[5] * sy), (wE[6] = pWE[6] * sy);\n    (wE[8] = pWE[8]), (wE[9] = pWE[9]), (wE[10] = pWE[10]);\n    wE[12] = pWE[12] - localTransX * wE[0] - localTransY * wE[4];\n    wE[13] = pWE[13] - localTransX * wE[1] - localTransY * wE[5];\n    wE[14] = pWE[14] - localTransX * wE[2] - localTransY * wE[6];\n\n    // ------------------------\n    //  3 - 7 - 11 - 15\n    //  |   |   |    |\n    //  2 - 6 - 10 - 14\n    //  |   |   |    |\n    //  1 - 5 - 9  - 13\n    //  |   |   |    |\n    //  0 - 4 - 8  - 12\n    // ------------------------\n    // Assemble position and uv.\n    let vertexCount = 0;\n    let realICount = 0;\n    for (let i = 0; i < 4; i++) {\n      const rowValue = row[i];\n      const rowU = spriteUVs[i].x;\n      for (let j = 0; j < 4; j++) {\n        const columnValue = column[j];\n        positions[vertexCount].set(\n          wE[0] * rowValue + wE[4] * columnValue + wE[12],\n          wE[1] * rowValue + wE[5] * columnValue + wE[13],\n          wE[2] * rowValue + wE[6] * columnValue + wE[14]\n        );\n        uvs[vertexCount].set(rowU, spriteUVs[j].y);\n        ++vertexCount;\n      }\n      ++realICount;\n    }\n\n    const realJCount = vertexCount / realICount;\n    let indexOffset = 0;\n    for (let i = 0; i < realICount - 1; ++i) {\n      for (let j = 0; j < realJCount - 1; ++j) {\n        const start = i * realJCount + j;\n        triangles[indexOffset++] = start;\n        triangles[indexOffset++] = start + 1;\n        triangles[indexOffset++] = start + realJCount;\n        triangles[indexOffset++] = start + 1;\n        triangles[indexOffset++] = start + realJCount + 1;\n        triangles[indexOffset++] = start + realJCount;\n      }\n    }\n    renderer._renderData.vertexCount = realICount * realJCount;\n    triangles.length = (realICount - 1) * (realJCount - 1) * 6;\n\n    const { min, max } = renderer._bounds;\n    min.set(row[0], column[0], 0);\n    max.set(row[3], column[3], 0);\n    renderer._bounds.transform(worldMatrix);\n  }\n\n  static updateUVs(renderer: SpriteRenderer): void {}\n}\n", "import { BoundingBox, Color } from \"@galacean/engine-math\";\nimport { assignmentClone, deepClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { ICustomClone } from \"../../clone/ComponentCloner\";\nimport { Entity } from \"../../Entity\";\nimport { Renderer, RendererUpdateFlags } from \"../../Renderer\";\nimport { RenderContext } from \"../../RenderPipeline/RenderContext\";\nimport { CompareFunction } from \"../../shader/enums/CompareFunction\";\nimport { Shader } from \"../../shader/Shader\";\nimport { ShaderProperty } from \"../../shader/ShaderProperty\";\nimport { IAssembler } from \"../assembler/IAssembler\";\nimport { SimpleSpriteAssembler } from \"../assembler/SimpleSpriteAssembler\";\nimport { SlicedSpriteAssembler } from \"../assembler/SlicedSpriteAssembler\";\nimport { RenderData2D } from \"../data/RenderData2D\";\nimport { SpriteDrawMode } from \"../enums/SpriteDrawMode\";\nimport { SpriteMaskInteraction } from \"../enums/SpriteMaskInteraction\";\nimport { SpriteMaskLayer } from \"../enums/SpriteMaskLayer\";\nimport { SpriteModifyFlags } from \"../enums/SpriteModifyFlags\";\nimport { Sprite } from \"./Sprite\";\n\n/**\n * Renders a Sprite for 2D graphics.\n */\nexport class SpriteRenderer extends Renderer implements ICustomClone {\n  /** @internal */\n  static _textureProperty: ShaderProperty = Shader.getPropertyByName(\"u_spriteTexture\");\n\n  /** @internal */\n  @ignoreClone\n  _renderData: RenderData2D;\n\n  @ignoreClone\n  private _drawMode: SpriteDrawMode;\n  @ignoreClone\n  private _assembler: IAssembler;\n\n  @deepClone\n  private _color: Color = new Color(1, 1, 1, 1);\n  @ignoreClone\n  private _sprite: Sprite = null;\n\n  @ignoreClone\n  private _automaticWidth: number = 0;\n  @ignoreClone\n  private _automaticHeight: number = 0;\n  @assignmentClone\n  private _customWidth: number = undefined;\n  @assignmentClone\n  private _customHeight: number = undefined;\n  @assignmentClone\n  private _flipX: boolean = false;\n  @assignmentClone\n  private _flipY: boolean = false;\n\n  @assignmentClone\n  private _maskLayer: number = SpriteMaskLayer.Layer0;\n  @assignmentClone\n  private _maskInteraction: SpriteMaskInteraction = SpriteMaskInteraction.None;\n\n  /**\n   * The draw mode of the sprite renderer.\n   */\n  get drawMode(): SpriteDrawMode {\n    return this._drawMode;\n  }\n\n  set drawMode(drawMode: SpriteDrawMode) {\n    if (this._drawMode !== drawMode) {\n      this._drawMode = drawMode;\n      switch (drawMode) {\n        case SpriteDrawMode.Simple:\n          this._assembler = SimpleSpriteAssembler;\n          break;\n        case SpriteDrawMode.Sliced:\n          this._assembler = SlicedSpriteAssembler;\n          break;\n        default:\n          break;\n      }\n      this._assembler.resetData(this);\n      this._dirtyUpdateFlag |= SpriteRendererUpdateFlags.RenderData;\n    }\n  }\n\n  /**\n   * The Sprite to render.\n   */\n  get sprite(): Sprite {\n    return this._sprite;\n  }\n\n  set sprite(value: Sprite | null) {\n    const lastSprite = this._sprite;\n    if (lastSprite !== value) {\n      lastSprite && lastSprite._updateFlagManager.removeListener(this._onSpriteChange);\n      this._dirtyUpdateFlag |= SpriteRendererUpdateFlags.All;\n      if (value) {\n        value._updateFlagManager.addListener(this._onSpriteChange);\n        this.shaderData.setTexture(SpriteRenderer._textureProperty, value.texture);\n      } else {\n        this.shaderData.setTexture(SpriteRenderer._textureProperty, null);\n      }\n      this._sprite = value;\n    }\n  }\n\n  /**\n   * Rendering color for the Sprite graphic.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    if (this._color !== value) {\n      this._color.copyFrom(value);\n    }\n  }\n\n  /**\n   * Render width (in world coordinates).\n   *\n   * @remarks\n   * If width is set, return the set value,\n   * otherwise return `SpriteRenderer.sprite.width`.\n   */\n  get width(): number {\n    if (this._customWidth !== undefined) {\n      return this._customWidth;\n    } else {\n      this._dirtyUpdateFlag & SpriteRendererUpdateFlags.AutomaticSize && this._calDefaultSize();\n      return this._automaticWidth;\n    }\n  }\n\n  set width(value: number) {\n    if (this._customWidth !== value) {\n      this._customWidth = value;\n      this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n    }\n  }\n\n  /**\n   * Render height (in world coordinates).\n   *\n   * @remarks\n   * If height is set, return the set value,\n   * otherwise return `SpriteRenderer.sprite.height`.\n   */\n  get height(): number {\n    if (this._customHeight !== undefined) {\n      return this._customHeight;\n    } else {\n      this._dirtyUpdateFlag & SpriteRendererUpdateFlags.AutomaticSize && this._calDefaultSize();\n      return this._automaticHeight;\n    }\n  }\n\n  set height(value: number) {\n    if (this._customHeight !== value) {\n      this._customHeight = value;\n      this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n    }\n  }\n\n  /**\n   * Flips the sprite on the X axis.\n   */\n  get flipX(): boolean {\n    return this._flipX;\n  }\n\n  set flipX(value: boolean) {\n    if (this._flipX !== value) {\n      this._flipX = value;\n      this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n    }\n  }\n\n  /**\n   * Flips the sprite on the Y axis.\n   */\n  get flipY(): boolean {\n    return this._flipY;\n  }\n\n  set flipY(value: boolean) {\n    if (this._flipY !== value) {\n      this._flipY = value;\n      this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n    }\n  }\n\n  /**\n   * The mask layer the sprite renderer belongs to.\n   */\n  get maskLayer(): number {\n    return this._maskLayer;\n  }\n\n  set maskLayer(value: number) {\n    this._maskLayer = value;\n  }\n\n  /**\n   * Interacts with the masks.\n   */\n  get maskInteraction(): SpriteMaskInteraction {\n    return this._maskInteraction;\n  }\n\n  set maskInteraction(value: SpriteMaskInteraction) {\n    if (this._maskInteraction !== value) {\n      this._maskInteraction = value;\n      this._updateStencilState();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._renderData = new RenderData2D(4, [], [], null, this._color);\n    this.drawMode = SpriteDrawMode.Simple;\n    this.setMaterial(this._engine._spriteDefaultMaterial);\n    this._onSpriteChange = this._onSpriteChange.bind(this);\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: SpriteRenderer): void {\n    target.sprite = this._sprite;\n    target.drawMode = this._drawMode;\n  }\n\n  /**\n   * @internal\n   */\n  _onDestroy(): void {\n    this._sprite?._updateFlagManager.removeListener(this._onSpriteChange);\n    this._color = null;\n    this._sprite = null;\n    this._assembler = null;\n    this._renderData = null;\n    super._onDestroy();\n  }\n\n  /**\n   * @override\n   */\n  protected _updateBounds(worldBounds: BoundingBox): void {\n    if (this.sprite) {\n      this._assembler.updatePositions(this);\n    } else {\n      worldBounds.min.set(0, 0, 0);\n      worldBounds.max.set(0, 0, 0);\n    }\n  }\n\n  /**\n   * @override\n   */\n  protected _render(context: RenderContext): void {\n    if (!this.sprite?.texture || !this.width || !this.height) {\n      return;\n    }\n\n    // Update position\n    if (this._dirtyUpdateFlag & RendererUpdateFlags.WorldVolume) {\n      this._assembler.updatePositions(this);\n      this._dirtyUpdateFlag &= ~RendererUpdateFlags.WorldVolume;\n    }\n\n    // Update uv\n    if (this._dirtyUpdateFlag & SpriteRendererUpdateFlags.UV) {\n      this._assembler.updateUVs(this);\n      this._dirtyUpdateFlag &= ~SpriteRendererUpdateFlags.UV;\n    }\n\n    // Push primitive\n    const material = this.getMaterial();\n    const passes = material.shader.passes;\n    const renderStates = material.renderStates;\n    const texture = this.sprite.texture;\n    for (let i = 0, n = passes.length; i < n; i++) {\n      const spriteElement = this._engine._spriteElementPool.getFromPool();\n      spriteElement.setValue(this, this._renderData, material, texture, renderStates[i], passes[i]);\n      context.camera._renderPipeline.pushPrimitive(spriteElement);\n    }\n  }\n\n  private _calDefaultSize(): void {\n    const sprite = this._sprite;\n    if (sprite) {\n      this._automaticWidth = sprite.width;\n      this._automaticHeight = sprite.height;\n    } else {\n      this._automaticWidth = this._automaticHeight = 0;\n    }\n    this._dirtyUpdateFlag &= ~SpriteRendererUpdateFlags.AutomaticSize;\n  }\n\n  private _updateStencilState(): void {\n    // Update stencil.\n    const material = this.getInstanceMaterial();\n    const stencilState = material.renderState.stencilState;\n    const maskInteraction = this._maskInteraction;\n    if (maskInteraction === SpriteMaskInteraction.None) {\n      stencilState.enabled = false;\n      stencilState.writeMask = 0xff;\n      stencilState.referenceValue = 0;\n      stencilState.compareFunctionFront = stencilState.compareFunctionBack = CompareFunction.Always;\n    } else {\n      stencilState.enabled = true;\n      stencilState.writeMask = 0x00;\n      stencilState.referenceValue = 1;\n      const compare =\n        maskInteraction === SpriteMaskInteraction.VisibleInsideMask\n          ? CompareFunction.LessEqual\n          : CompareFunction.Greater;\n      stencilState.compareFunctionFront = compare;\n      stencilState.compareFunctionBack = compare;\n    }\n  }\n\n  @ignoreClone\n  private _onSpriteChange(type: SpriteModifyFlags): void {\n    switch (type) {\n      case SpriteModifyFlags.texture:\n        this.shaderData.setTexture(SpriteRenderer._textureProperty, this.sprite.texture);\n        break;\n      case SpriteModifyFlags.size:\n        this._dirtyUpdateFlag |= SpriteRendererUpdateFlags.AutomaticSize;\n        // When the width and height of `SpriteRenderer` are `undefined`,\n        // the `size` of `Sprite` will affect the position of `SpriteRenderer`.\n        if (\n          this._drawMode === SpriteDrawMode.Sliced ||\n          this._customWidth === undefined ||\n          this._customHeight === undefined\n        ) {\n          this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n        }\n        break;\n      case SpriteModifyFlags.border:\n        this._drawMode === SpriteDrawMode.Sliced && (this._dirtyUpdateFlag |= SpriteRendererUpdateFlags.RenderData);\n        break;\n      case SpriteModifyFlags.region:\n      case SpriteModifyFlags.atlasRegionOffset:\n        this._dirtyUpdateFlag |= SpriteRendererUpdateFlags.RenderData;\n        break;\n      case SpriteModifyFlags.atlasRegion:\n        this._dirtyUpdateFlag |= SpriteRendererUpdateFlags.UV;\n        break;\n      case SpriteModifyFlags.pivot:\n        this._dirtyUpdateFlag |= RendererUpdateFlags.WorldVolume;\n        break;\n    }\n  }\n}\n\n/**\n * @remarks Extends `RendererUpdateFlag`.\n */\nenum SpriteRendererUpdateFlags {\n  /** UV. */\n  UV = 0x2,\n  /** WorldVolume and UV . */\n  RenderData = 0x3,\n  /** Automatic Size. */\n  AutomaticSize = 0x4,\n  /** All. */\n  All = 0x7\n}\n", "import { Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { Texture2D } from \"../../texture\";\nimport { RenderData2D } from \"../data/RenderData2D\";\n\n/**\n * @internal\n */\nexport class CharRenderData {\n  static triangles: number[] = [0, 2, 1, 2, 0, 3];\n\n  texture: Texture2D;\n  /** x:Top y:Left z:Bottom w:Right */\n  localPositions: Vector4 = new Vector4();\n  renderData: RenderData2D;\n\n  constructor() {\n    const positions = [new Vector3(), new Vector3(), new Vector3(), new Vector3()];\n    this.renderData = new RenderData2D(4, positions, null, CharRenderData.triangles, null);\n  }\n}\n", "/**\n * @internal\n */\nexport class CharRenderDataPool<T> {\n  private _elements: T[] = [];\n  private _type: new () => T;\n\n  constructor(type: new () => T, length: number) {\n    this._type = type;\n    const elements = this._elements;\n    for (let i = 0; i < length; ++i) {\n      elements[i] = new type();\n    }\n  }\n\n  get(): T {\n    if (this._elements.length > 0) {\n      return this._elements.pop();\n    }\n    return new this._type();\n  }\n\n  put(data: T): void {\n    this._elements.push(data);\n  }\n}\n", "import { Engine } from \"../../Engine\";\nimport { CharInfo } from \"./CharInfo\";\nimport { FontStyle } from \"../enums/FontStyle\";\nimport { OverflowMode } from \"../enums/TextOverflow\";\nimport { TextRenderer } from \"./TextRenderer\";\nimport { Vector2 } from \"@galacean/engine-math\";\nimport { SubFont } from \"./SubFont\";\n\n/**\n * @internal\n * TextUtils includes some helper function for text.\n */\nexport class TextUtils {\n  /** @internal */\n  static _genericFontFamilies: Array<string> = [\n    \"serif\",\n    \"sans-serif\",\n    \"monospace\",\n    \"cursive\",\n    \"fantasy\",\n    \"system-ui\",\n    \"math\",\n    \"emoji\",\n    \"fangsong\"\n  ];\n  /** These characters are all tall to help calculate the height required for text. */\n  private static _measureString: string = \"|ÉqÅ\";\n  private static _measureBaseline: string = \"M\";\n  private static _heightMultiplier: number = 2;\n  private static _baselineMultiplier: number = 1.4;\n  private static _fontSizeInfoCache: Record<string, FontSizeInfo> = {};\n  private static _textContext: TextContext = null;\n\n  /**\n   * The instance function to get an object includes 2d context and canvas.\n   * @returns the TextContext object\n   */\n  static textContext(): TextContext {\n    let { _textContext: textContext } = TextUtils;\n    if (!textContext) {\n      let canvas: HTMLCanvasElement | OffscreenCanvas;\n      try {\n        canvas = new OffscreenCanvas(0, 0);\n      } catch {\n        canvas = document.createElement(\"canvas\");\n      }\n      const context = <CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D>canvas.getContext(\"2d\");\n      textContext = { canvas, context };\n      TextUtils._textContext = textContext;\n    }\n    return textContext;\n  }\n\n  /**\n   * Measure the font.\n   * @param fontString - the string of the font\n   * @returns the font size info\n   */\n  static measureFont(fontString: string): FontSizeInfo {\n    const { _fontSizeInfoCache: fontSizeInfoCache } = TextUtils;\n    let info = fontSizeInfoCache[fontString];\n    if (info) {\n      return info;\n    }\n\n    info = <FontSizeInfo>TextUtils._measureFontOrChar(fontString);\n    fontSizeInfoCache[fontString] = info;\n    return info;\n  }\n\n  /**\n   * Get native font string.\n   * @param fontName - The font name\n   * @param fontSize - The font size\n   * @param style - The font style\n   * @returns The native font string\n   */\n  static getNativeFontString(fontName: string, fontSize: number, style: FontStyle): string {\n    let str = style & FontStyle.Bold ? \"bold \" : \"\";\n    style & FontStyle.Italic && (str += \"italic \");\n    // Check if font already contains strings\n    if (!/([\\\"\\'])[^\\'\\\"]+\\1/.test(fontName) && TextUtils._genericFontFamilies.indexOf(fontName) == -1) {\n      fontName = `\"${fontName}\"`;\n    }\n    str += `${fontSize}px ${fontName}`;\n    return str;\n  }\n\n  static measureChar(char: string, fontString: string): CharInfo {\n    return <CharInfo>TextUtils._measureFontOrChar(fontString, char);\n  }\n\n  static measureTextWithWrap(renderer: TextRenderer): TextMetrics {\n    const { fontSize, fontStyle, _subFont: subFont } = renderer;\n    const { name } = renderer.font;\n    const fontString = TextUtils.getNativeFontString(name, fontSize, fontStyle);\n    const fontSizeInfo = TextUtils.measureFont(fontString);\n    const subTexts = renderer.text.split(/(?:\\r\\n|\\r|\\n)/);\n    const lines = new Array<string>();\n    const lineWidths = new Array<number>();\n    const lineMaxSizes = new Array<FontSizeInfo>();\n    const { _pixelsPerUnit } = Engine;\n    const lineHeight = fontSizeInfo.size + renderer.lineSpacing * _pixelsPerUnit;\n    const wrapWidth = renderer.width * _pixelsPerUnit;\n    let width = 0;\n\n    for (let i = 0, n = subTexts.length; i < n; ++i) {\n      const subText = subTexts[i];\n      let chars = \"\";\n      let charsWidth = 0;\n      let maxAscent = -1;\n      let maxDescent = -1;\n\n      for (let j = 0, m = subText.length; j < m; ++j) {\n        const char = subText[j];\n        const charInfo = TextUtils._getCharInfo(char, fontString, subFont);\n        const { w, offsetY } = charInfo;\n        const halfH = charInfo.h * 0.5;\n        const ascent = halfH + offsetY;\n        const descent = halfH - offsetY;\n        if (charsWidth + w > wrapWidth) {\n          if (charsWidth === 0) {\n            lines.push(char);\n            lineWidths.push(w);\n            lineMaxSizes.push({\n              ascent,\n              descent,\n              size: ascent + descent\n            });\n          } else {\n            lines.push(chars);\n            lineWidths.push(charsWidth);\n            lineMaxSizes.push({\n              ascent: maxAscent,\n              descent: maxDescent,\n              size: maxAscent + maxDescent\n            });\n            chars = char;\n            charsWidth = charInfo.xAdvance;\n            maxAscent = ascent;\n            maxDescent = descent;\n          }\n        } else {\n          chars += char;\n          charsWidth += charInfo.xAdvance;\n          maxAscent < ascent && (maxAscent = ascent);\n          maxDescent < descent && (maxDescent = descent);\n        }\n      }\n\n      if (charsWidth > 0) {\n        lines.push(chars);\n        lineWidths.push(charsWidth);\n        lineMaxSizes.push({\n          ascent: maxAscent,\n          descent: maxDescent,\n          size: maxAscent + maxDescent\n        });\n      }\n    }\n\n    let height = renderer.height * _pixelsPerUnit;\n    if (renderer.overflowMode === OverflowMode.Overflow) {\n      height = lineHeight * lines.length;\n    }\n\n    return {\n      width,\n      height,\n      lines,\n      lineWidths,\n      lineHeight,\n      lineMaxSizes\n    };\n  }\n\n  static measureTextWithoutWrap(renderer: TextRenderer): TextMetrics {\n    const { fontSize, fontStyle, _subFont: subFont } = renderer;\n    const { name } = renderer.font;\n    const fontString = TextUtils.getNativeFontString(name, fontSize, fontStyle);\n    const fontSizeInfo = TextUtils.measureFont(fontString);\n    const lines = renderer.text.split(/(?:\\r\\n|\\r|\\n)/);\n    const lineCount = lines.length;\n    const lineWidths = new Array<number>();\n    const lineMaxSizes = new Array<FontSizeInfo>();\n    const { _pixelsPerUnit } = Engine;\n    const lineHeight = fontSizeInfo.size + renderer.lineSpacing * _pixelsPerUnit;\n    let width = 0;\n    let height = renderer.height * _pixelsPerUnit;\n    if (renderer.overflowMode === OverflowMode.Overflow) {\n      height = lineHeight * lineCount;\n    }\n\n    for (let i = 0; i < lineCount; ++i) {\n      const line = lines[i];\n      let curWidth = 0;\n      let maxAscent = -1;\n      let maxDescent = -1;\n\n      for (let j = 0, m = line.length; j < m; ++j) {\n        const charInfo = TextUtils._getCharInfo(line[j], fontString, subFont);\n        curWidth += charInfo.xAdvance;\n        const { offsetY } = charInfo;\n        const halfH = charInfo.h * 0.5;\n        const ascent = halfH + offsetY;\n        const descent = halfH - offsetY;\n        maxAscent < ascent && (maxAscent = ascent);\n        maxDescent < descent && (maxDescent = descent);\n      }\n      lineWidths[i] = curWidth;\n      lineMaxSizes[i] = {\n        ascent: maxAscent,\n        descent: maxDescent,\n        size: maxAscent + maxDescent\n      };\n      if (curWidth > width) {\n        width = curWidth;\n      }\n    }\n\n    return {\n      width,\n      height,\n      lines,\n      lineWidths,\n      lineHeight,\n      lineMaxSizes\n    };\n  }\n\n  /**\n   * Get native font hash.\n   * @param fontName - The font name\n   * @param fontSize - The font size\n   * @param style - The font style\n   * @returns The native font hash\n   */\n  static getNativeFontHash(fontName: string, fontSize: number, style: FontStyle): string {\n    let str = style & FontStyle.Bold ? \"bold\" : \"\";\n    style & FontStyle.Italic && (str += \"italic\");\n    // Check if font already contains strings\n    if (!/([\\\"\\'])[^\\'\\\"]+\\1/.test(fontName) && TextUtils._genericFontFamilies.indexOf(fontName) == -1) {\n      fontName = `${fontName}`;\n    }\n    str += `${fontSize}px${fontName}`;\n    return str;\n  }\n\n  private static _measureFontOrChar(fontString: string, char: string = \"\"): FontSizeInfo | CharInfo {\n    const { canvas, context } = TextUtils.textContext();\n    context.font = fontString;\n    const measureString = char || TextUtils._measureString;\n    // Safari gets data confusion through getImageData when the canvas width is not an integer.\n    // The measure text width of some special invisible characters may be 0, so make sure the width is at least 1.\n    // @todo: Text layout may vary from standard and not support emoji.\n    const width = Math.max(1, Math.round(context.measureText(measureString).width));\n    let baseline = Math.ceil(context.measureText(TextUtils._measureBaseline).width);\n    const height = baseline * TextUtils._heightMultiplier;\n    baseline = (TextUtils._baselineMultiplier * baseline) | 0;\n\n    canvas.width = width;\n    canvas.height = height;\n\n    context.font = fontString;\n    context.fillStyle = \"#000\";\n    context.clearRect(0, 0, width, height);\n    context.textBaseline = \"middle\";\n    context.fillStyle = \"#fff\";\n    context.fillText(measureString, 0, baseline);\n\n    const colorData = context.getImageData(0, 0, width, height).data;\n    const len = colorData.length;\n\n    let top = -1;\n    let bottom = -1;\n    let y;\n    let ascent = 0;\n    let descent = 0;\n    let size = 0;\n\n    const integerW = canvas.width;\n    const integerWReciprocal = 1.0 / integerW;\n    for (let i = 0; i < len; i += 4) {\n      if (colorData[i + 3] !== 0) {\n        const idx = i * 0.25;\n        y = ~~(idx * integerWReciprocal);\n\n        if (top === -1) {\n          top = y;\n        }\n\n        if (y > bottom) {\n          bottom = y;\n        }\n      } else {\n        colorData[i] = colorData[i + 1] = colorData[i + 2] = 255;\n      }\n    }\n\n    if (top !== -1 && bottom !== -1) {\n      ascent = baseline - top;\n      descent = bottom - baseline + 1;\n      size = ascent + descent;\n    }\n    const sizeInfo = { ascent, descent, size };\n\n    if (char) {\n      let data = null;\n      if (size > 0) {\n        const lineIntegerW = integerW * 4;\n        // gl.texSubImage2D uploading data of type Uint8ClampedArray is not supported in some devices(eg: IphoneX IOS 13.6.1).\n        data = new Uint8Array(colorData.buffer, top * lineIntegerW, size * lineIntegerW);\n      }\n      return {\n        x: 0,\n        y: 0,\n        w: width,\n        h: size,\n        offsetX: 0,\n        offsetY: (ascent - descent) * 0.5,\n        xAdvance: width,\n        uvs: [new Vector2(), new Vector2(), new Vector2(), new Vector2()],\n        ascent,\n        descent,\n        index: 0,\n        data\n      };\n    } else {\n      return sizeInfo;\n    }\n  }\n\n  private static _getCharInfo(char: string, fontString: string, font: SubFont): CharInfo {\n    let charInfo = font._getCharInfo(char);\n    if (!charInfo) {\n      charInfo = TextUtils.measureChar(char, fontString);\n      font._uploadCharTexture(charInfo);\n      font._addCharInfo(char, charInfo);\n    }\n\n    return charInfo;\n  }\n}\n\n/**\n * @internal\n * TextContext.\n */\nexport interface TextContext {\n  canvas: HTMLCanvasElement | OffscreenCanvas;\n  context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D;\n}\n\n/**\n * @internal\n * FontSizeInfo.\n */\nexport interface FontSizeInfo {\n  ascent: number;\n  descent: number;\n  size: number;\n}\n\n/**\n * @internal\n * TextMetrics.\n */\nexport interface TextMetrics {\n  width: number;\n  height: number;\n  lines: Array<string>;\n  lineWidths: Array<number>;\n  lineHeight: number;\n  lineMaxSizes?: Array<FontSizeInfo>;\n}\n", "import { BoundingBox, Color, Vector3 } from \"@galacean/engine-math\";\nimport { assignmentClone, deepClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { ICustomClone } from \"../../clone/ComponentCloner\";\nimport { Engine } from \"../../Engine\";\nimport { Entity } from \"../../Entity\";\nimport { Renderer } from \"../../Renderer\";\nimport { RenderContext } from \"../../RenderPipeline/RenderContext\";\nimport { CompareFunction } from \"../../shader/enums/CompareFunction\";\nimport { TransformModifyFlags } from \"../../Transform\";\nimport { FontStyle } from \"../enums/FontStyle\";\nimport { SpriteMaskInteraction } from \"../enums/SpriteMaskInteraction\";\nimport { SpriteMaskLayer } from \"../enums/SpriteMaskLayer\";\nimport { TextHorizontalAlignment, TextVerticalAlignment } from \"../enums/TextAlignment\";\nimport { OverflowMode } from \"../enums/TextOverflow\";\nimport { CharRenderData } from \"./CharRenderData\";\nimport { CharRenderDataPool } from \"./CharRenderDataPool\";\nimport { Font } from \"./Font\";\nimport { SubFont } from \"./SubFont\";\nimport { TextUtils } from \"./TextUtils\";\n\n/**\n * Renders a text for 2D graphics.\n */\nexport class TextRenderer extends Renderer implements ICustomClone {\n  private static _charRenderDataPool: CharRenderDataPool<CharRenderData> = new CharRenderDataPool(CharRenderData, 50);\n  private static _tempVec30: Vector3 = new Vector3();\n  private static _tempVec31: Vector3 = new Vector3();\n\n  /** @internal */\n  @assignmentClone\n  _subFont: SubFont = null;\n  /** @internal */\n  @ignoreClone\n  _charRenderDatas: CharRenderData[] = [];\n  @ignoreClone\n  _dirtyFlag: number = DirtyFlag.Font;\n\n  @deepClone\n  private _color: Color = new Color(1, 1, 1, 1);\n  @assignmentClone\n  private _text: string = \"\";\n  @assignmentClone\n  private _width: number = 0;\n  @assignmentClone\n  private _height: number = 0;\n  @ignoreClone\n  private _localBounds: BoundingBox = new BoundingBox();\n  @assignmentClone\n  private _font: Font = null;\n  @assignmentClone\n  private _fontSize: number = 24;\n  @assignmentClone\n  private _fontStyle: FontStyle = FontStyle.None;\n  @assignmentClone\n  private _lineSpacing: number = 0;\n  @assignmentClone\n  private _horizontalAlignment: TextHorizontalAlignment = TextHorizontalAlignment.Center;\n  @assignmentClone\n  private _verticalAlignment: TextVerticalAlignment = TextVerticalAlignment.Center;\n  @assignmentClone\n  private _enableWrapping: boolean = false;\n  @assignmentClone\n  private _overflowMode: OverflowMode = OverflowMode.Overflow;\n  @assignmentClone\n  private _maskInteraction: SpriteMaskInteraction = SpriteMaskInteraction.None;\n  @assignmentClone\n  private _maskLayer: number = SpriteMaskLayer.Layer0;\n\n  /**\n   * Rendering color for the Text.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    if (this._color !== value) {\n      this._color.copyFrom(value);\n    }\n  }\n\n  /**\n   * Rendering string for the Text.\n   */\n  get text(): string {\n    return this._text;\n  }\n\n  set text(value: string) {\n    value = value || \"\";\n    if (this._text !== value) {\n      this._text = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * The width of the TextRenderer (in 3D world coordinates).\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  set width(value: number) {\n    if (this._width !== value) {\n      this._width = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * The height of the TextRenderer (in 3D world coordinates).\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  set height(value: number) {\n    if (this._height !== value) {\n      this._height = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * The font of the Text.\n   */\n  get font(): Font {\n    return this._font;\n  }\n\n  set font(value: Font) {\n    const lastFont = this._font;\n    if (lastFont !== value) {\n      lastFont && lastFont._addRefCount(-1);\n      value && value._addRefCount(1);\n      this._font = value;\n      this._setDirtyFlagTrue(DirtyFlag.Font);\n    }\n  }\n\n  /**\n   * The font size of the Text.\n   */\n  get fontSize(): number {\n    return this._fontSize;\n  }\n\n  set fontSize(value: number) {\n    if (this._fontSize !== value) {\n      this._fontSize = value;\n      this._setDirtyFlagTrue(DirtyFlag.Font);\n    }\n  }\n\n  /**\n   * The style of the font.\n   */\n  get fontStyle(): FontStyle {\n    return this._fontStyle;\n  }\n\n  set fontStyle(value: FontStyle) {\n    if (this.fontStyle !== value) {\n      this._fontStyle = value;\n      this._setDirtyFlagTrue(DirtyFlag.Font);\n    }\n  }\n\n  /**\n   * The space between two lines (in pixels).\n   */\n  get lineSpacing(): number {\n    return this._lineSpacing;\n  }\n\n  set lineSpacing(value: number) {\n    if (this._lineSpacing !== value) {\n      this._lineSpacing = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * The horizontal alignment.\n   */\n  get horizontalAlignment(): TextHorizontalAlignment {\n    return this._horizontalAlignment;\n  }\n\n  set horizontalAlignment(value: TextHorizontalAlignment) {\n    if (this._horizontalAlignment !== value) {\n      this._horizontalAlignment = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * The vertical alignment.\n   */\n  get verticalAlignment(): TextVerticalAlignment {\n    return this._verticalAlignment;\n  }\n\n  set verticalAlignment(value: TextVerticalAlignment) {\n    if (this._verticalAlignment !== value) {\n      this._verticalAlignment = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * Whether wrap text to next line when exceeds the width of the container.\n   */\n  get enableWrapping(): boolean {\n    return this._enableWrapping;\n  }\n\n  set enableWrapping(value: boolean) {\n    if (this._enableWrapping !== value) {\n      this._enableWrapping = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * The overflow mode.\n   */\n  get overflowMode(): OverflowMode {\n    return this._overflowMode;\n  }\n\n  set overflowMode(value: OverflowMode) {\n    if (this._overflowMode !== value) {\n      this._overflowMode = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * Interacts with the masks.\n   */\n  get maskInteraction(): SpriteMaskInteraction {\n    return this._maskInteraction;\n  }\n\n  set maskInteraction(value: SpriteMaskInteraction) {\n    if (this._maskInteraction !== value) {\n      this._maskInteraction = value;\n      this._setDirtyFlagTrue(DirtyFlag.MaskInteraction);\n    }\n  }\n\n  /**\n   * The mask layer the sprite renderer belongs to.\n   */\n  get maskLayer(): number {\n    return this._maskLayer;\n  }\n\n  set maskLayer(value: number) {\n    this._maskLayer = value;\n  }\n\n  /**\n   * The bounding volume of the TextRenderer.\n   */\n  get bounds(): BoundingBox {\n    this._isContainDirtyFlag(DirtyFlag.SubFont) && this._resetSubFont();\n    this._isContainDirtyFlag(DirtyFlag.LocalPositionBounds) && this._updateLocalData();\n    this._isContainDirtyFlag(DirtyFlag.WorldPosition) && this._updatePosition();\n    this._isContainDirtyFlag(DirtyFlag.WorldBounds) && this._updateBounds(this._bounds);\n    this._setDirtyFlagFalse(DirtyFlag.Font);\n\n    return this._bounds;\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n    const { engine } = this;\n    this._font = engine._textDefaultFont;\n    this._font._addRefCount(1);\n    this.setMaterial(engine._spriteDefaultMaterial);\n  }\n\n  /**\n   * @internal\n   */\n  _onDestroy(): void {\n    // Clear render data.\n    const charRenderDatas = this._charRenderDatas;\n    for (let i = 0, n = charRenderDatas.length; i < n; ++i) {\n      TextRenderer._charRenderDataPool.put(charRenderDatas[i]);\n    }\n    charRenderDatas.length = 0;\n\n    if (this._font) {\n      this._font._addRefCount(-1);\n      this._font = null;\n    }\n    this._subFont && (this._subFont = null);\n\n    super._onDestroy();\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: TextRenderer): void {\n    target.font = this._font;\n    target._subFont = this._subFont;\n  }\n\n  /**\n   * @internal\n   */\n  _isContainDirtyFlag(type: number): boolean {\n    return (this._dirtyFlag & type) != 0;\n  }\n\n  /**\n   * @internal\n   */\n  _setDirtyFlagTrue(type: number): void {\n    this._dirtyFlag |= type;\n  }\n\n  /**\n   * @internal\n   */\n  _setDirtyFlagFalse(type: number): void {\n    this._dirtyFlag &= ~type;\n  }\n\n  /**\n   * @override\n   */\n  protected _updateBounds(worldBounds: BoundingBox): void {\n    BoundingBox.transform(this._localBounds, this._entity.transform.worldMatrix, worldBounds);\n  }\n\n  /**\n   * @override\n   */\n  protected _render(context: RenderContext): void {\n    if (\n      this._text === \"\" ||\n      (this.enableWrapping && this.width <= 0) ||\n      (this.overflowMode === OverflowMode.Truncate && this.height <= 0)\n    ) {\n      return;\n    }\n\n    if (this._isContainDirtyFlag(DirtyFlag.MaskInteraction)) {\n      this._updateStencilState();\n      this._setDirtyFlagFalse(DirtyFlag.MaskInteraction);\n    }\n\n    if (this._isContainDirtyFlag(DirtyFlag.SubFont)) {\n      this._resetSubFont();\n      this._setDirtyFlagFalse(DirtyFlag.SubFont);\n    }\n\n    if (this._isContainDirtyFlag(DirtyFlag.LocalPositionBounds)) {\n      this._updateLocalData();\n      this._setDirtyFlagFalse(DirtyFlag.LocalPositionBounds);\n    }\n\n    if (this._isContainDirtyFlag(DirtyFlag.WorldPosition)) {\n      this._updatePosition();\n      this._setDirtyFlagFalse(DirtyFlag.WorldPosition);\n    }\n\n    const spriteElementPool = this._engine._spriteElementPool;\n    const textElement = this._engine._textElementPool.getFromPool();\n    const charElements = textElement.charElements;\n    const material = this.getMaterial();\n    const charRenderDatas = this._charRenderDatas;\n    const charCount = charRenderDatas.length;\n    const passes = material.shader.passes;\n    const renderStates = material.renderStates;\n\n    textElement.component = this;\n    textElement.material = material;\n    charElements.length = charCount;\n    textElement.renderState = renderStates[0];\n\n    for (let i = 0; i < charCount; ++i) {\n      const charRenderData = charRenderDatas[i];\n      const spriteElement = spriteElementPool.getFromPool();\n      spriteElement.setValue(\n        this,\n        charRenderData.renderData,\n        material,\n        charRenderData.texture,\n        renderStates[0],\n        passes[0]\n      );\n      charElements[i] = spriteElement;\n    }\n    context.camera._renderPipeline.pushPrimitive(textElement);\n  }\n\n  private _updateStencilState(): void {\n    const material = this.getInstanceMaterial();\n    const stencilState = material.renderState.stencilState;\n    const maskInteraction = this._maskInteraction;\n\n    if (maskInteraction === SpriteMaskInteraction.None) {\n      stencilState.enabled = false;\n      stencilState.writeMask = 0xff;\n      stencilState.referenceValue = 0;\n      stencilState.compareFunctionFront = stencilState.compareFunctionBack = CompareFunction.Always;\n    } else {\n      stencilState.enabled = true;\n      stencilState.writeMask = 0x00;\n      stencilState.referenceValue = 1;\n      const compare =\n        maskInteraction === SpriteMaskInteraction.VisibleInsideMask\n          ? CompareFunction.LessEqual\n          : CompareFunction.Greater;\n      stencilState.compareFunctionFront = compare;\n      stencilState.compareFunctionBack = compare;\n    }\n  }\n\n  private _resetSubFont(): void {\n    this._subFont = this._font._getSubFont(this.fontSize, this.fontStyle);\n  }\n\n  private _updatePosition(): void {\n    const { transform } = this.entity;\n    const e = transform.worldMatrix.elements;\n    const charRenderDatas = this._charRenderDatas;\n\n    // prettier-ignore\n    const e0 = e[0], e1 = e[1], e2 = e[2],\n    e4 = e[4], e5 = e[5], e6 = e[6],\n    e12 = e[12], e13 = e[13], e14 = e[14];\n\n    const up = TextRenderer._tempVec31.set(e4, e5, e6);\n    const right = TextRenderer._tempVec30.set(e0, e1, e2);\n\n    for (let i = 0, n = charRenderDatas.length; i < n; ++i) {\n      const charRenderData = charRenderDatas[i];\n      const { localPositions } = charRenderData;\n      const { positions } = charRenderData.renderData;\n\n      const { x: topLeftX, y: topLeftY } = localPositions;\n\n      // Top-Left\n      const worldPosition0 = positions[0];\n      worldPosition0.x = topLeftX * e0 + topLeftY * e4 + e12;\n      worldPosition0.y = topLeftX * e1 + topLeftY * e5 + e13;\n      worldPosition0.z = topLeftX * e2 + topLeftY * e6 + e14;\n\n      // Right offset\n      const worldPosition1 = positions[1];\n      Vector3.scale(right, localPositions.z - topLeftX, worldPosition1);\n\n      // Top-Right\n      Vector3.add(worldPosition0, worldPosition1, worldPosition1);\n\n      // Up offset\n      const worldPosition2 = positions[2];\n      Vector3.scale(up, localPositions.w - topLeftY, worldPosition2);\n\n      // Bottom-Left\n      Vector3.add(worldPosition0, worldPosition2, positions[3]);\n      // Bottom-Right\n      Vector3.add(worldPosition1, worldPosition2, worldPosition2);\n    }\n  }\n\n  private _updateLocalData(): void {\n    const { color, horizontalAlignment, verticalAlignment, _charRenderDatas: charRenderDatas } = this;\n    const { min, max } = this._localBounds;\n    min.set(0, 0, 0);\n    max.set(0, 0, 0);\n    const { _pixelsPerUnit } = Engine;\n    const pixelsPerUnitReciprocal = 1.0 / _pixelsPerUnit;\n    const charFont = this._subFont;\n    const rendererWidth = this.width * _pixelsPerUnit;\n    const halfRendererWidth = rendererWidth * 0.5;\n    const rendererHeight = this.height * _pixelsPerUnit;\n\n    const textMetrics = this.enableWrapping\n      ? TextUtils.measureTextWithWrap(this)\n      : TextUtils.measureTextWithoutWrap(this);\n    const { height, lines, lineWidths, lineHeight, lineMaxSizes } = textMetrics;\n    const charRenderDataPool = TextRenderer._charRenderDataPool;\n    const halfLineHeight = lineHeight * 0.5;\n    const linesLen = lines.length;\n\n    let startY = 0;\n    const topDiff = lineHeight * 0.5 - lineMaxSizes[0].ascent;\n    const bottomDiff = lineHeight * 0.5 - lineMaxSizes[linesLen - 1].descent - 1;\n    switch (verticalAlignment) {\n      case TextVerticalAlignment.Top:\n        startY = rendererHeight * 0.5 - halfLineHeight + topDiff;\n        break;\n      case TextVerticalAlignment.Center:\n        startY = height * 0.5 - halfLineHeight - (bottomDiff - topDiff) * 0.5;\n        break;\n      case TextVerticalAlignment.Bottom:\n        startY = height - rendererHeight * 0.5 - halfLineHeight - bottomDiff;\n        break;\n    }\n\n    let renderDataCount = 0;\n    let minX = Number.MAX_SAFE_INTEGER;\n    let minY = Number.MAX_SAFE_INTEGER;\n    let maxX = Number.MIN_SAFE_INTEGER;\n    let maxY = Number.MIN_SAFE_INTEGER;\n    let lastLineIndex = linesLen - 1;\n    for (let i = 0; i < linesLen; ++i) {\n      const line = lines[i];\n      const lineWidth = lineWidths[i];\n\n      let startX = 0;\n      switch (horizontalAlignment) {\n        case TextHorizontalAlignment.Left:\n          startX = -halfRendererWidth;\n          break;\n        case TextHorizontalAlignment.Center:\n          startX = -lineWidth * 0.5;\n          break;\n        case TextHorizontalAlignment.Right:\n          startX = halfRendererWidth - lineWidth;\n          break;\n      }\n\n      for (let j = 0, m = line.length - 1; j <= m; ++j) {\n        const char = line[j];\n        const charInfo = charFont._getCharInfo(char);\n\n        if (charInfo.h > 0) {\n          const charRenderData = charRenderDatas[renderDataCount] || charRenderDataPool.get();\n          const { renderData, localPositions } = charRenderData;\n          charRenderData.texture = charFont._getTextureByIndex(charInfo.index);\n          renderData.color = color;\n\n          renderData.uvs = charInfo.uvs;\n          const { w, ascent, descent } = charInfo;\n\n          const left = startX * pixelsPerUnitReciprocal;\n          const right = (startX + w) * pixelsPerUnitReciprocal;\n          const top = (startY + ascent) * pixelsPerUnitReciprocal;\n          const bottom = (startY - descent + 1) * pixelsPerUnitReciprocal;\n\n          localPositions.set(left, top, right, bottom);\n          charRenderDatas[renderDataCount] = charRenderData;\n          renderDataCount++;\n\n          i === 0 && (maxY = Math.max(maxY, top));\n          i === lastLineIndex && (minY = Math.min(minY, bottom));\n          j === 0 && (minX = Math.min(minX, left));\n          j === m && (maxX = Math.max(maxX, right));\n        }\n        startX += charInfo.xAdvance;\n      }\n\n      startY -= lineHeight;\n    }\n\n    min.set(minX, minY, 0);\n    max.set(maxX, maxY, 0);\n\n    // Revert excess render data to pool.\n    const lastRenderDataCount = charRenderDatas.length;\n    if (lastRenderDataCount > renderDataCount) {\n      for (let i = renderDataCount; i < lastRenderDataCount; ++i) {\n        charRenderDataPool.put(charRenderDatas[i]);\n      }\n      charRenderDatas.length = renderDataCount;\n    }\n\n    charFont._getLastIndex() > 0 &&\n      charRenderDatas.sort((a, b) => {\n        return a.texture.instanceId - b.texture.instanceId;\n      });\n  }\n\n  protected _onTransformChanged(bit: TransformModifyFlags): void {\n    super._onTransformChanged(bit);\n    this._setDirtyFlagTrue(DirtyFlag.WorldPosition | DirtyFlag.WorldBounds);\n  }\n}\n\nenum DirtyFlag {\n  SubFont = 0x1,\n  LocalPositionBounds = 0x2,\n  WorldPosition = 0x4,\n  WorldBounds = 0x8,\n  MaskInteraction = 0x10,\n\n  Position = LocalPositionBounds | WorldPosition | WorldBounds,\n  Font = SubFont | Position\n}\n", "import { KeyframeValueType } from \"../../../Keyframe\";\nimport { AnimationCurveOwner } from \"../AnimationCurveOwner\";\nimport { IAnimationCurveOwnerAssembler } from \"./IAnimationCurveOwnerAssembler\";\n\n/**\n * @internal\n */\nexport class UniversalAnimationCurveOwnerAssembler<V extends KeyframeValueType>\n  implements IAnimationCurveOwnerAssembler<V>\n{\n  private _mounted: Record<string, V>;\n  private _propertyName: string;\n\n  initialize(owner: AnimationCurveOwner<KeyframeValueType>): void {\n    let mounted: any = owner.component;\n    const properties = (owner.property as string).split(\".\");\n    const endIndex = properties.length - 1;\n    for (let i = 0; i < endIndex; i++) {\n      mounted = mounted[properties[i]];\n    }\n    this._mounted = mounted;\n    this._propertyName = properties[endIndex];\n  }\n\n  getTargetValue(): V {\n    return this._mounted[this._propertyName];\n  }\n\n  setTargetValue(value: V): void {\n    this._mounted[this._propertyName] = value;\n  }\n}\n", "import { Component } from \"../../../Component\";\nimport { Entity } from \"../../../Entity\";\nimport { AnimationCurve } from \"../../animationCurve/AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"../../animationCurve/interfaces/IAnimationCurveCalculator\";\nimport { KeyframeValueType } from \"../../Keyframe\";\nimport { IAnimationCurveOwnerAssembler } from \"./assembler/IAnimationCurveOwnerAssembler\";\nimport { UniversalAnimationCurveOwnerAssembler } from \"./assembler/UniversalAnimationCurveOwnerAssembler\";\n\n/**\n * @internal\n */\nexport class AnimationCurveOwner<V extends KeyframeValueType> {\n  private static _assemblerMap = new Map<ComponentType, Record<string, AssemblerType>>();\n\n  static registerAssembler(componentType: ComponentType, property: string, assemblerType: AssemblerType): void {\n    let subMap = AnimationCurveOwner._assemblerMap.get(componentType);\n    if (!subMap) {\n      subMap = {};\n      AnimationCurveOwner._assemblerMap.set(componentType, subMap);\n    }\n    subMap[property] = assemblerType;\n  }\n\n  static getAssemblerType(componentType: ComponentType, property: string): AssemblerType {\n    const subMap = AnimationCurveOwner._assemblerMap.get(componentType);\n    const assemblerType = subMap ? subMap[property] : undefined;\n    return assemblerType ?? UniversalAnimationCurveOwnerAssembler<KeyframeValueType>;\n  }\n\n  readonly target: Entity;\n  readonly type: new (entity: Entity) => Component;\n  readonly property: string;\n  readonly component: Component;\n\n  crossCurveMark: number = 0;\n  crossCurveDataIndex: number;\n  defaultValue: V;\n  fixedPoseValue: V;\n  hasSavedDefaultValue: boolean = false;\n  baseEvaluateData: IEvaluateData<V> = { curKeyframeIndex: 0, value: null };\n\n  crossEvaluateData: IEvaluateData<V> = { curKeyframeIndex: 0, value: null };\n  crossSrcCurveIndex: number;\n  crossDestCurveIndex: number;\n\n  referenceTargetValue: V;\n\n  private _assembler: IAnimationCurveOwnerAssembler<V>;\n  private _cureType: IAnimationCurveCalculator<V>;\n\n  constructor(\n    target: Entity,\n    type: new (entity: Entity) => Component,\n    property: string,\n    cureType: IAnimationCurveCalculator<V>\n  ) {\n    this.target = target;\n    this.type = type;\n    this.property = property;\n    this.component = target.getComponent(type);\n    this._cureType = cureType;\n\n    const assemblerType = AnimationCurveOwner.getAssemblerType(type, property);\n    this._assembler = <IAnimationCurveOwnerAssembler<V>>new assemblerType();\n    this._assembler.initialize(this);\n\n    if (cureType._isReferenceType) {\n      this.referenceTargetValue = this._assembler.getTargetValue();\n    }\n  }\n\n  evaluateAndApplyValue(curve: AnimationCurve<V>, time: number, layerWeight: number, additive: boolean): void {\n    if (curve.keys.length) {\n      if (additive) {\n        const value = curve._evaluateAdditive(time, this.baseEvaluateData);\n\n        const cureType = this._cureType;\n        if (cureType._isReferenceType) {\n          cureType._additiveValue(value, layerWeight, this.referenceTargetValue);\n        } else {\n          const assembler = this._assembler;\n          const originValue = assembler.getTargetValue();\n          const additiveValue = cureType._additiveValue(value, layerWeight, originValue);\n          assembler.setTargetValue(additiveValue);\n        }\n      } else {\n        const value = curve._evaluate(time, this.baseEvaluateData);\n\n        this._applyValue(value, layerWeight);\n      }\n    }\n  }\n\n  crossFadeAndApplyValue(\n    srcCurve: AnimationCurve<V>,\n    destCurve: AnimationCurve<V>,\n    srcTime: number,\n    destTime: number,\n    crossWeight: number,\n    layerWeight: number,\n    additive: boolean\n  ): void {\n    const srcValue =\n      srcCurve && srcCurve.keys.length\n        ? additive\n          ? srcCurve._evaluateAdditive(srcTime, this.baseEvaluateData)\n          : srcCurve._evaluate(srcTime, this.baseEvaluateData)\n        : additive\n        ? this._cureType._getZeroValue(this.baseEvaluateData.value)\n        : this.defaultValue;\n\n    const destValue =\n      destCurve && destCurve.keys.length\n        ? additive\n          ? destCurve._evaluateAdditive(destTime, this.crossEvaluateData)\n          : destCurve._evaluate(destTime, this.crossEvaluateData)\n        : additive\n        ? this._cureType._getZeroValue(this.crossEvaluateData.value)\n        : this.defaultValue;\n\n    this._applyCrossValue(srcValue, destValue, crossWeight, layerWeight, additive);\n  }\n\n  crossFadeFromPoseAndApplyValue(\n    destCurve: AnimationCurve<V>,\n    destTime: number,\n    crossWeight: number,\n    layerWeight: number,\n    additive: boolean\n  ): void {\n    const srcValue = additive\n      ? this._cureType._subtractValue(this.fixedPoseValue, this.defaultValue, this.baseEvaluateData.value)\n      : this.fixedPoseValue;\n    const destValue =\n      destCurve && destCurve.keys.length\n        ? additive\n          ? destCurve._evaluateAdditive(destTime, this.crossEvaluateData)\n          : destCurve._evaluate(destTime, this.crossEvaluateData)\n        : additive\n        ? this._cureType._getZeroValue(this.crossEvaluateData.value)\n        : this.defaultValue;\n\n    this._applyCrossValue(srcValue, destValue, crossWeight, layerWeight, additive);\n  }\n\n  revertDefaultValue(): void {\n    this._assembler.setTargetValue(this.defaultValue);\n  }\n\n  saveDefaultValue(): void {\n    if (this._cureType._isReferenceType) {\n      this._cureType._copyValue(this.referenceTargetValue, this.defaultValue);\n    } else {\n      this.defaultValue = this._assembler.getTargetValue();\n    }\n    this.hasSavedDefaultValue = true;\n  }\n\n  saveFixedPoseValue(): void {\n    if (this._cureType._isReferenceType) {\n      this._cureType._copyValue(this.referenceTargetValue, this.fixedPoseValue);\n    } else {\n      this.fixedPoseValue = this._assembler.getTargetValue();\n    }\n  }\n\n  private _applyValue(value: V, weight: number): void {\n    if (weight === 1.0) {\n      if (this._cureType._isReferenceType) {\n        this._cureType._copyValue(value, this.referenceTargetValue);\n      } else {\n        this._assembler.setTargetValue(value);\n      }\n    } else {\n      if (this._cureType._isReferenceType) {\n        const targetValue = this.referenceTargetValue;\n        this._cureType._lerpValue(targetValue, value, weight, targetValue);\n      } else {\n        const originValue = this._assembler.getTargetValue();\n        const lerpValue = this._cureType._lerpValue(originValue, value, weight);\n        this._assembler.setTargetValue(lerpValue);\n      }\n    }\n  }\n\n  private _applyCrossValue(\n    srcValue: V,\n    destValue: V,\n    crossWeight: number,\n    layerWeight: number,\n    additive: boolean\n  ): void {\n    let out: V;\n    if (this._cureType._isReferenceType) {\n      out = this.baseEvaluateData.value;\n      this._cureType._lerpValue(srcValue, destValue, crossWeight, out);\n    } else {\n      out = this._cureType._lerpValue(srcValue, destValue, crossWeight);\n    }\n\n    if (additive) {\n      if (this._cureType._isReferenceType) {\n        this._cureType._additiveValue(out, layerWeight, this.referenceTargetValue);\n      } else {\n        const originValue = this._assembler.getTargetValue();\n        const lerpValue = this._cureType._additiveValue(out, layerWeight, originValue);\n        this._assembler.setTargetValue(lerpValue);\n      }\n    } else {\n      this._applyValue(out, layerWeight);\n    }\n  }\n}\n\ntype ComponentType = new (entity: Entity) => Component;\ntype AssemblerType = new () => IAnimationCurveOwnerAssembler<KeyframeValueType>;\n\nexport interface IEvaluateData<V extends KeyframeValueType> {\n  curKeyframeIndex: number;\n  value: V;\n}\n", "import { Vector3 } from \"@galacean/engine-math\";\nimport { Transform } from \"../../../../Transform\";\nimport { KeyframeValueType } from \"../../../Keyframe\";\nimport { AnimationCurveOwner } from \"../AnimationCurveOwner\";\nimport { IAnimationCurveOwnerAssembler } from \"./IAnimationCurveOwnerAssembler\";\n\n/**\n * @internal\n */\nexport class PositionAnimationCurveOwnerAssembler implements IAnimationCurveOwnerAssembler<Vector3> {\n  private _transform: Transform;\n\n  initialize(owner: AnimationCurveOwner<KeyframeValueType>): void {\n    this._transform = owner.target.transform;\n  }\n\n  getTargetValue(): Vector3 {\n    return this._transform.position;\n  }\n  setTargetValue(value: Vector3): void {\n    this._transform.position = value;\n  }\n}\n\nAnimationCurveOwner.registerAssembler(Transform, \"position\", PositionAnimationCurveOwnerAssembler);\n", "import { Quaternion } from \"@galacean/engine-math\";\nimport { Transform } from \"../../../../Transform\";\nimport { KeyframeValueType } from \"../../../Keyframe\";\nimport { AnimationCurveOwner } from \"../AnimationCurveOwner\";\nimport { IAnimationCurveOwnerAssembler } from \"./IAnimationCurveOwnerAssembler\";\n\n/**\n * @internal\n */\nexport class RotationAnimationCurveOwnerAssembler implements IAnimationCurveOwnerAssembler<Quaternion> {\n  private _transform: Transform;\n\n  initialize(owner: AnimationCurveOwner<KeyframeValueType>): void {\n    this._transform = owner.target.transform;\n  }\n\n  getTargetValue(): Quaternion {\n    return this._transform.rotationQuaternion;\n  }\n\n  setTargetValue(value: Quaternion): void {\n    this._transform.rotationQuaternion = value;\n  }\n}\n\nAnimationCurveOwner.registerAssembler(Transform, \"rotationQuaternion\", RotationAnimationCurveOwnerAssembler);\n", "import { Vector3 } from \"@galacean/engine-math\";\nimport { Transform } from \"../../../../Transform\";\nimport { KeyframeValueType } from \"../../../Keyframe\";\nimport { AnimationCurveOwner } from \"../AnimationCurveOwner\";\nimport { IAnimationCurveOwnerAssembler } from \"./IAnimationCurveOwnerAssembler\";\n\n/**\n * @internal\n */\nexport class ScaleAnimationCurveOwnerAssembler implements IAnimationCurveOwnerAssembler<Vector3> {\n  private _transform: Transform;\n\n  initialize(owner: AnimationCurveOwner<KeyframeValueType>): void {\n    this._transform = owner.target.transform;\n  }\n\n  getTargetValue(): Vector3 {\n    return this._transform.scale;\n  }\n\n  setTargetValue(value: Vector3): void {\n    this._transform.scale = value;\n  }\n}\nAnimationCurveOwner.registerAssembler(Transform, \"scale\", ScaleAnimationCurveOwnerAssembler);\n", "import { SkinnedMeshRenderer } from \"../../../../mesh\";\nimport { KeyframeValueType } from \"../../../Keyframe\";\nimport { AnimationCurveOwner } from \"../AnimationCurveOwner\";\nimport { IAnimationCurveOwnerAssembler } from \"./IAnimationCurveOwnerAssembler\";\n\n/**\n * @internal\n */\nexport class BlendShapeWeightsAnimationCurveOwnerAssembler implements IAnimationCurveOwnerAssembler<Float32Array> {\n  private _skinnedMeshRenderer: SkinnedMeshRenderer;\n\n  initialize(owner: AnimationCurveOwner<KeyframeValueType>): void {\n    this._skinnedMeshRenderer = owner.target.getComponent(SkinnedMeshRenderer);\n  }\n\n  getTargetValue(): Float32Array {\n    return this._skinnedMeshRenderer.blendShapeWeights;\n  }\n\n  setTargetValue(value: Float32Array): void {\n    this._skinnedMeshRenderer.blendShapeWeights = value;\n  }\n}\n\nAnimationCurveOwner.registerAssembler(\n  SkinnedMeshRenderer,\n  \"blendShapeWeights\",\n  BlendShapeWeightsAnimationCurveOwnerAssembler\n);\n", "import { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { AnimationCurve } from \"./animationCurve\";\nimport { IAnimationCurveCalculator } from \"./animationCurve/interfaces/IAnimationCurveCalculator\";\nimport { AnimationCurveOwner } from \"./internal/animationCurveOwner/AnimationCurveOwner\";\nimport { KeyframeValueType } from \"./Keyframe\";\n\n/**\n * Associate AnimationCurve and the Entity\n */\nexport class AnimationClipCurveBinding {\n  /**\n   * Path to the entity this curve applies to. The relativePath is formatted similar to a pathname,\n   * e.g. \"root/spine/leftArm\". If relativePath is empty it refers to the entity the animation clip is attached to.\n   */\n  relativePath: string;\n  /** The class type of the component that is animated. */\n  type: new (entity: Entity) => Component;\n  /** The name or path to the property being animated. */\n  property: string;\n  /** The animation curve. */\n  curve: AnimationCurve<KeyframeValueType>;\n\n  private _tempCurveOwner: Record<number, AnimationCurveOwner<KeyframeValueType>> = {};\n\n  /**\n   * @internal\n   */\n  _createCurveOwner(entity: Entity): AnimationCurveOwner<KeyframeValueType> {\n    const curveType = (<unknown>this.curve.constructor) as IAnimationCurveCalculator<KeyframeValueType>;\n    const owner = new AnimationCurveOwner(entity, this.type, this.property, curveType);\n\n    curveType._initializeOwner(owner);\n    return owner;\n  }\n\n  /**\n   * @internal\n   */\n  _getTempCurveOwner(entity: Entity): AnimationCurveOwner<KeyframeValueType> {\n    const { instanceId } = entity;\n    if (!this._tempCurveOwner[instanceId]) {\n      this._tempCurveOwner[instanceId] = this._createCurveOwner(entity);\n    }\n    return this._tempCurveOwner[instanceId];\n  }\n}\n", "/**\n * AnimationEvent lets you call a script function similar to SendMessage as part of playing back an animation.\n */\nexport class AnimationEvent {\n  /** The time when the event be triggered. */\n  time: number;\n  /** The name of the method called in the script. */\n  functionName: string;\n  /** The parameter that is stored in the event and will be sent to the function. */\n  parameter: Object;\n}\n", "import { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { AnimationClipCurveBinding } from \"./AnimationClipCurveBinding\";\nimport { AnimationCurve } from \"./animationCurve/AnimationCurve\";\nimport { AnimationEvent } from \"./AnimationEvent\";\nimport { KeyframeValueType } from \"./Keyframe\";\n\n/**\n * Stores keyframe based animations.\n */\nexport class AnimationClip {\n  /** @internal */\n  _curveBindings: AnimationClipCurveBinding[] = [];\n\n  private _length: number = 0;\n  private _events: AnimationEvent[] = [];\n\n  /**\n   * Animation events for this animation clip.\n   */\n  get events(): Readonly<AnimationEvent[]> {\n    return this._events;\n  }\n\n  /**\n   * Animation curve bindings for this animation clip.\n   */\n  get curveBindings(): Readonly<AnimationClipCurveBinding[]> {\n    return this._curveBindings;\n  }\n\n  /**\n   * Animation length in seconds.\n   */\n  get length(): number {\n    return this._length;\n  }\n\n  /**\n   * @param name - The AnimationClip's name\n   */\n  constructor(public readonly name: string) {}\n\n  /**\n   * Adds an animation event to the clip.\n   * @param functionName - The name of the method called in the script\n   * @param time - The time when the event be triggered\n   * @param parameter - The parameter that is stored in the event and will be sent to the function\n   */\n  addEvent(functionName: string, time: number, parameter: Object): void;\n\n  /**\n   * Adds an animation event to the clip.\n   * @param event - The animation event\n   */\n  addEvent(event: AnimationEvent): void;\n\n  addEvent(param: AnimationEvent | string, time?: number, parameter?: Object): void {\n    if (typeof param === \"string\") {\n      const event = new AnimationEvent();\n      event.functionName = param;\n      event.time = time;\n      event.parameter = parameter;\n      this._events.push(event);\n    } else {\n      this._events.push(param);\n    }\n    this._events.sort((a, b) => a.time - b.time);\n  }\n\n  /**\n   * Clears all events from the clip.\n   */\n  clearEvents(): void {\n    this._events.length = 0;\n  }\n\n  /**\n   * Add curve binding for the clip.\n   * @param relativePath - Path to the game object this curve applies to. The relativePath is formatted similar to a pathname, e.g. \"/root/spine/leftArm\"\n   * @param type- The class type of the component that is animated\n   * @param propertyName - The name or path to the property being animated\n   * @param curve - The animation curve\n   */\n  addCurveBinding<T extends Component>(\n    relativePath: string,\n    type: new (entity: Entity) => T,\n    propertyName: string,\n    curve: AnimationCurve<KeyframeValueType>\n  ): void {\n    const curveBinding = new AnimationClipCurveBinding();\n    curveBinding.relativePath = relativePath;\n    curveBinding.type = type;\n    curveBinding.property = propertyName;\n    curveBinding.curve = curve;\n    if (curve.length > this._length) {\n      this._length = curve.length;\n    }\n    this._curveBindings.push(curveBinding);\n  }\n\n  /**\n   * Clears all curve bindings from the clip.\n   */\n  clearCurveBindings(): void {\n    this._curveBindings.length = 0;\n    this._length = 0;\n  }\n\n  /**\n   * @internal\n   * Samples an animation at a given time.\n   * @param entity - The animated entity\n   * @param time - The time to sample an animation\n   */\n  _sampleAnimation(entity: Entity, time: number): void {\n    const { _curveBindings: curveBindings } = this;\n    for (let i = curveBindings.length - 1; i >= 0; i--) {\n      const curveData = curveBindings[i];\n      const targetEntity = entity.findByPath(curveData.relativePath);\n      if (targetEntity) {\n        const curveOwner = curveData._getTempCurveOwner(targetEntity);\n        curveOwner.evaluateAndApplyValue(curveData.curve, time, 1, false);\n      }\n    }\n  }\n}\n", "/**\n * Animation interpolation method.\n */\nexport enum InterpolationType {\n  /** Linear interpolation */\n  Linear,\n  /** Cubic spline interpolation */\n  CubicSpine,\n  /** Stepped interpolation */\n  Step,\n  /** Hermite interpolation */\n  Hermite\n}\n", "import { InterpolationType } from \"../enums/InterpolationType\";\nimport { IEvaluateData } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe, KeyframeValueType } from \"../Keyframe\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\nexport abstract class AnimationCurve<V extends KeyframeValueType> {\n  /** All keys defined in the animation curve. */\n  keys: Keyframe<V>[] = [];\n\n  protected _evaluateData: IEvaluateData<V> = { curKeyframeIndex: 0, value: null };\n  protected _length: number = 0;\n  protected _interpolation: InterpolationType;\n\n  private _type: IAnimationCurveCalculator<V>;\n\n  /**\n   * The interpolationType of the animation curve.\n   */\n  get interpolation(): InterpolationType {\n    return this._interpolation;\n  }\n\n  set interpolation(value: InterpolationType) {\n    if (!this._type._isInterpolationType && value !== InterpolationType.Step) {\n      this._interpolation = InterpolationType.Step;\n      console.warn(\"The interpolation type must be `InterpolationType.Step`.\");\n    } else {\n      this._interpolation = value;\n    }\n  }\n\n  /**\n   * Animation curve length in seconds.\n   */\n  get length(): number {\n    return this._length;\n  }\n\n  constructor() {\n    const type = (<unknown>this.constructor) as IAnimationCurveCalculator<V>;\n    this._interpolation = type._isInterpolationType ? InterpolationType.Linear : InterpolationType.Step;\n    this._type = type;\n  }\n\n  /**\n   * Add a new key to the curve.\n   * @param key - The keyframe\n   */\n  addKey(key: Keyframe<V>): void {\n    const { time } = key;\n    const { keys } = this;\n\n    if (time >= this._length) {\n      keys.push(key);\n      this._length = time;\n    } else {\n      let index = keys.length;\n      while (--index >= 0 && time < keys[index].time);\n      keys.splice(index + 1, 0, key);\n    }\n  }\n\n  /**\n   * Evaluate the curve at time.\n   * @param time - The time within the curve you want to evaluate\n   */\n  evaluate(time: number): V {\n    return this._evaluate(time, this._evaluateData);\n  }\n\n  /**\n   * Removes a key.\n   * @param index - The index of the key to remove\n   */\n  removeKey(index: number): void {\n    this.keys.splice(index, 1);\n    const { keys } = this;\n\n    let newLength = 0;\n    for (let i = keys.length - 1; i >= 0; i--) {\n      const key = keys[i];\n      if (key.time > length) {\n        newLength = key.time;\n      }\n    }\n    this._length = newLength;\n  }\n\n  /**\n   * @internal\n   */\n  _evaluate(time: number, evaluateData: IEvaluateData<V>): V {\n    const { length } = this.keys;\n    if (!length) {\n      console.warn(`This curve don't have any keyframes: `, this);\n      return;\n    }\n\n    const { keys, interpolation } = this;\n\n    // Compute curIndex and nextIndex.\n    let curIndex = evaluateData.curKeyframeIndex;\n\n    // Reset loop,if delete keyfranme may cause `curIndex >= length`\n    if (curIndex !== -1 && (curIndex >= length || time < keys[curIndex].time)) {\n      curIndex = -1;\n    }\n\n    let nextIndex = curIndex + 1;\n    while (nextIndex < length) {\n      if (time < keys[nextIndex].time) {\n        break;\n      }\n      curIndex++;\n      nextIndex++;\n    }\n    evaluateData.curKeyframeIndex = curIndex;\n\n    // Evaluate value.\n    let value: V;\n    if (curIndex === -1) {\n      value = this._type._copyValue(keys[0].value, evaluateData.value);\n    } else if (nextIndex === length) {\n      value = this._type._copyValue(keys[curIndex].value, evaluateData.value);\n    } else {\n      // Time between first frame and end frame.\n      const curFrame = keys[curIndex];\n      const nextFrame = keys[nextIndex];\n      const curFrameTime = curFrame.time;\n      const duration = nextFrame.time - curFrameTime;\n      const t = (time - curFrameTime) / duration;\n\n      switch (interpolation) {\n        case InterpolationType.Linear:\n          value = this._type._lerpValue(curFrame.value, nextFrame.value, t, evaluateData.value);\n          break;\n        case InterpolationType.Step:\n          value = this._type._copyValue(curFrame.value, evaluateData.value);\n          break;\n        case InterpolationType.CubicSpine:\n        case InterpolationType.Hermite:\n          value = this._type._hermiteInterpolationValue(curFrame, nextFrame, t, duration, evaluateData.value);\n          break;\n      }\n    }\n    return value;\n  }\n\n  /**\n   * @internal\n   */\n  _evaluateAdditive(time: number, evaluateData: IEvaluateData<V>): V {\n    const result = this._evaluate(time, evaluateData);\n    return this._type._subtractValue(result, this.keys[0].value, evaluateData.value);\n  }\n}\n", "import { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { AnimationCurveOwner } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe } from \"../Keyframe\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\n@StaticInterfaceImplement<IAnimationCurveCalculator<number[]>>()\nexport class AnimationArrayCurve extends AnimationCurve<number[]> {\n  /** @internal */\n  static _isReferenceType: boolean = true;\n  /** @internal */\n  static _isInterpolationType: boolean = true;\n\n  /**\n   * @internal\n   */\n  static _initializeOwner(owner: AnimationCurveOwner<number[]>): void {\n    owner.defaultValue = [];\n    owner.fixedPoseValue = [];\n    owner.baseEvaluateData.value = [];\n    owner.crossEvaluateData.value = [];\n  }\n\n  /**\n   * @internal\n   */\n  static _lerpValue(srcValue: number[], destValue: number[], weight: number, out: number[]): number[] {\n    for (let i = 0, n = out.length; i < n; ++i) {\n      const src = srcValue[i];\n      out[i] = src + (destValue[i] - src) * weight;\n    }\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _subtractValue(src: number[], base: number[], out: number[]): number[] {\n    for (let i = 0, n = src.length; i < n; i++) {\n      out[i] = src[i] - base[i];\n    }\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _getZeroValue(out: number[]): number[] {\n    for (let i = 0, n = out.length; i < n; i++) {\n      out[i] = 0;\n    }\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _additiveValue(value: number[], weight: number, out: number[]): number[] {\n    for (let i = 0, n = out.length; i < n; ++i) {\n      out[i] += value[i] * weight;\n    }\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _copyValue(source: number[], out: number[]): number[] {\n    for (let i = 0, n = out.length; i < n; ++i) {\n      out[i] = source[i];\n    }\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _hermiteInterpolationValue(\n    frame: Keyframe<number[]>,\n    nextFrame: Keyframe<number[]>,\n    t: number,\n    duration: number,\n    out: number[]\n  ): number[] {\n    const t0 = frame.outTangent;\n    const t1 = nextFrame.inTangent;\n    const p0 = frame.value;\n    const p1 = nextFrame.value;\n\n    const t2 = t * t;\n    const t3 = t2 * t;\n    const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n    const b = t3 - 2.0 * t2 + t;\n    const c = t3 - t2;\n    const d = -2.0 * t3 + 3.0 * t2;\n\n    for (let i = 0, n = p0.length; i < n; ++i) {\n      if (Number.isFinite(t0[i]) && Number.isFinite(t1[i])) {\n        out[i] = a * p0[i] + b * t0[i] * duration + c * t1[i] * duration + d * p1[i];\n      } else {\n        out[i] = frame.value[i];\n      }\n    }\n    return out;\n  }\n\n  constructor() {\n    super();\n    this._evaluateData.value = [];\n  }\n}\n", "import { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { AnimationCurveOwner } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe } from \"../Keyframe\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\n@StaticInterfaceImplement<IAnimationCurveCalculator<boolean>>()\nexport class AnimationBoolCurve extends AnimationCurve<boolean> {\n  /** @internal */\n  static _isReferenceType: boolean = false;\n  /** @internal */\n  static _isInterpolationType: boolean = false;\n\n  /**\n   * @internal\n   */\n  static _initializeOwner(owner: AnimationCurveOwner<boolean>): void {\n    owner.defaultValue = false;\n    owner.fixedPoseValue = false;\n    owner.baseEvaluateData.value = false;\n    owner.crossEvaluateData.value = false;\n  }\n  /**\n   * @internal\n   */\n  static _lerpValue(srcValue: boolean, destValue: boolean): boolean {\n    return destValue;\n  }\n\n  /**\n   * @internal\n   */\n  static _subtractValue(src: boolean, base: boolean, out: boolean): boolean {\n    return src;\n  }\n\n  /**\n   * @internal\n   */\n  static _getZeroValue(): boolean {\n    return false;\n  }\n  /**\n   * @internal\n   */\n  static _additiveValue(value: boolean, weight: number, source: boolean): boolean {\n    return value;\n  }\n\n  /**\n   * @internal\n   */\n  static _copyValue(value: boolean): boolean {\n    return value;\n  }\n\n  /**\n   * @internal\n   */\n  static _hermiteInterpolationValue(frame: Keyframe<boolean>): boolean {\n    return frame.value;\n  }\n\n  constructor() {\n    super();\n    this._evaluateData.value = false;\n  }\n}\n", "import { Color } from \"@galacean/engine-math\";\nimport { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { AnimationCurveOwner } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe } from \"../Keyframe\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\n@StaticInterfaceImplement<IAnimationCurveCalculator<Color>>()\nexport class AnimationColorCurve extends AnimationCurve<Color> {\n  /** @internal */\n  static _isReferenceType: boolean = true;\n  /** @internal */\n  static _isInterpolationType: boolean = true;\n\n  /**\n   * @internal\n   */\n  static _initializeOwner(owner: AnimationCurveOwner<Color>): void {\n    owner.defaultValue = new Color();\n    owner.fixedPoseValue = new Color();\n    owner.baseEvaluateData.value = new Color();\n    owner.crossEvaluateData.value = new Color();\n  }\n\n  /**\n   * @internal\n   */\n  static _lerpValue(srcValue: Color, destValue: Color, weight: number, out: Color): Color {\n    Color.lerp(srcValue, destValue, weight, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _subtractValue(src: Color, base: Color, out: Color): Color {\n    Color.subtract(src, base, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _getZeroValue(out: Color) {\n    out.set(0, 0, 0, 0);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _additiveValue(value: Color, weight: number, out: Color): Color {\n    Color.scale(value, weight, value);\n    Color.add(out, value, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _copyValue(source: Color, out: Color): Color {\n    out.copyFrom(source);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _hermiteInterpolationValue(\n    frame: Keyframe<Color>,\n    nextFrame: Keyframe<Color>,\n    t: number,\n    dur: number,\n    out: Color\n  ): Color {\n    const p0 = frame.value;\n    const tan0 = frame.outTangent;\n    const p1 = nextFrame.value;\n    const tan1 = nextFrame.inTangent;\n\n    const t2 = t * t;\n    const t3 = t2 * t;\n    const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n    const b = t3 - 2.0 * t2 + t;\n    const c = t3 - t2;\n    const d = -2.0 * t3 + 3.0 * t2;\n\n    let t0 = tan0.x,\n      t1 = tan1.x;\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.r = a * p0.r + b * t0 * dur + c * t1 * dur + d * p1.r;\n    } else {\n      out.r = p0.r;\n    }\n\n    (t0 = tan0.y), (t1 = tan1.y);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.g = a * p0.g + b * t0 * dur + c * t1 * dur + d * p1.g;\n    } else {\n      out.g = p0.g;\n    }\n\n    (t0 = tan0.z), (t1 = tan1.z);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.b = a * p0.b + b * t0 * dur + c * t1 * dur + d * p1.b;\n    } else {\n      out.b = p0.b;\n    }\n\n    (t0 = tan0.w), (t1 = tan1.w);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.a = a * p0.a + b * t0 * dur + c * t1 * dur + d * p1.a;\n    } else {\n      out.a = p0.a;\n    }\n\n    return out;\n  }\n\n  constructor() {\n    super();\n    this._evaluateData.value = new Color();\n  }\n}\n", "import { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { AnimationCurveOwner } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe } from \"../Keyframe\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\n@StaticInterfaceImplement<IAnimationCurveCalculator<Float32Array>>()\nexport class AnimationFloatArrayCurve extends AnimationCurve<Float32Array> {\n  /** @internal */\n  static _isReferenceType: boolean = true;\n  /** @internal */\n  static _isInterpolationType: boolean = true;\n\n  /**\n   * @internal\n   */\n  static _initializeOwner(owner: AnimationCurveOwner<Float32Array>): void {\n    const size = owner.referenceTargetValue.length;\n    owner.defaultValue = new Float32Array(size);\n    owner.fixedPoseValue = new Float32Array(size);\n    owner.baseEvaluateData.value = new Float32Array(size);\n    owner.crossEvaluateData.value = new Float32Array(size);\n  }\n\n  /**\n   * @internal\n   */\n  static _lerpValue(srcValue: Float32Array, destValue: Float32Array, weight: number, out: Float32Array): Float32Array {\n    for (let i = 0, n = out.length; i < n; ++i) {\n      const src = srcValue[i];\n      out[i] = src + (destValue[i] - src) * weight;\n    }\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _subtractValue(src: Float32Array, base: Float32Array, out: Float32Array): Float32Array {\n    for (let i = 0, n = src.length; i < n; i++) {\n      out[i] = src[i] - base[i];\n    }\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _getZeroValue(out: Float32Array): Float32Array {\n    for (let i = 0, n = out.length; i < n; i++) {\n      out[i] = 0;\n    }\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _additiveValue(value: Float32Array, weight: number, out: Float32Array): Float32Array {\n    for (let i = 0, n = out.length; i < n; ++i) {\n      out[i] += value[i] * weight;\n    }\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _copyValue(source: Float32Array, out: Float32Array): Float32Array {\n    for (let i = 0, n = out.length; i < n; ++i) {\n      out[i] = source[i];\n    }\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _hermiteInterpolationValue(\n    frame: Keyframe<Float32Array>,\n    nextFrame: Keyframe<Float32Array>,\n    t: number,\n    dur: number,\n    out: Float32Array\n  ): Float32Array {\n    const t0 = frame.outTangent;\n    const t1 = nextFrame.inTangent;\n    const p0 = frame.value;\n    const p1 = nextFrame.value;\n\n    const t2 = t * t;\n    const t3 = t2 * t;\n    const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n    const b = t3 - 2.0 * t2 + t;\n    const c = t3 - t2;\n    const d = -2.0 * t3 + 3.0 * t2;\n\n    for (let i = 0, n = p0.length; i < n; ++i) {\n      if (Number.isFinite(t0[i]) && Number.isFinite(t1[i])) {\n        out[i] = a * p0[i] + b * t0[i] * dur + c * t1[i] * dur + d * p1[i];\n      } else {\n        out[i] = frame.value[i];\n      }\n    }\n    return out;\n  }\n\n  /**\n   * @inheritdoc\n   * @override\n   */\n  addKey(key: Keyframe<Float32Array>): void {\n    super.addKey(key);\n\n    const evaluateData = this._evaluateData;\n    if (!evaluateData.value || evaluateData.value.length !== key.value.length) {\n      const size = key.value.length;\n      evaluateData.value = new Float32Array(size);\n    }\n  }\n}\n", "import { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { AnimationCurveOwner } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe } from \"../Keyframe\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\n@StaticInterfaceImplement<IAnimationCurveCalculator<number>>()\nexport class AnimationFloatCurve extends AnimationCurve<number> {\n  /** @internal */\n  static _isReferenceType: boolean = false;\n  /** @internal */\n  static _isInterpolationType: boolean = true;\n\n  /**\n   * @internal\n   */\n  static _initializeOwner(owner: AnimationCurveOwner<number>): void {\n    owner.defaultValue = 0;\n    owner.fixedPoseValue = 0;\n    owner.baseEvaluateData.value = 0;\n    owner.crossEvaluateData.value = 0;\n  }\n\n  /**\n   * @internal\n   */\n  static _lerpValue(srcValue: number, destValue: number, crossWeight: number): number {\n    return srcValue + (destValue - srcValue) * crossWeight;\n  }\n\n  /**\n   * @internal\n   */\n  static _additiveValue(value: number, weight: number, scource: number): number {\n    return (scource += value * weight);\n  }\n\n  /**\n   * @internal\n   */\n  static _subtractValue(src: number, base: number): number {\n    return src - base;\n  }\n\n  /**\n   * @internal\n   */\n  static _getZeroValue(): number {\n    return 0;\n  }\n\n  /**\n   * @internal\n   */\n  static _copyValue(source: number): number {\n    return source;\n  }\n\n  /**\n   * @internal\n   */\n  static _hermiteInterpolationValue(\n    frame: Keyframe<number>,\n    nextFrame: Keyframe<number>,\n    t: number,\n    dur: number\n  ): number {\n    const t0 = frame.outTangent;\n    const t1 = nextFrame.inTangent;\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      const t2 = t * t;\n      const t3 = t2 * t;\n      const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n      const b = t3 - 2.0 * t2 + t;\n      const c = t3 - t2;\n      const d = -2.0 * t3 + 3.0 * t2;\n      return a * frame.value + b * t0 * dur + c * t1 * dur + d * nextFrame.value;\n    } else {\n      return frame.value;\n    }\n  }\n\n  constructor() {\n    super();\n    this._evaluateData.value = 0;\n  }\n}\n", "import { Quaternion } from \"@galacean/engine-math\";\nimport { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { AnimationCurveOwner } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe } from \"../Keyframe\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\n@StaticInterfaceImplement<IAnimationCurveCalculator<Quaternion>>()\nexport class AnimationQuaternionCurve extends AnimationCurve<Quaternion> {\n  /** @internal */\n  static _isInterpolationType: boolean = true;\n  /** @internal */\n  static _isReferenceType: boolean = true;\n\n  /** @internal */\n  private static _tempConjugateQuat = new Quaternion();\n\n  /**\n   * @internal\n   */\n  static _initializeOwner(owner: AnimationCurveOwner<Quaternion>): void {\n    owner.defaultValue = new Quaternion();\n    owner.fixedPoseValue = new Quaternion();\n    owner.baseEvaluateData.value = new Quaternion();\n    owner.crossEvaluateData.value = new Quaternion();\n  }\n\n  /**\n   * @internal\n   */\n  static _lerpValue(src: Quaternion, dest: Quaternion, weight: number, out: Quaternion): Quaternion {\n    Quaternion.slerp(src, dest, weight, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _additiveValue(value: Quaternion, weight: number, out: Quaternion): Quaternion {\n    value.x = value.x * weight;\n    value.y = value.y * weight;\n    value.z = value.z * weight;\n\n    value.normalize();\n    out.multiply(value);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _subtractValue(src: Quaternion, base: Quaternion, out: Quaternion): Quaternion {\n    const { _tempConjugateQuat: conjugate } = AnimationQuaternionCurve;\n    Quaternion.conjugate(base, conjugate);\n    Quaternion.multiply(conjugate, src, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _getZeroValue(out: Quaternion): Quaternion {\n    out.set(0, 0, 0, 1);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _copyValue(source: Quaternion, out: Quaternion): Quaternion {\n    out.copyFrom(source);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _hermiteInterpolationValue(\n    frame: Keyframe<Quaternion>,\n    nextFrame: Keyframe<Quaternion>,\n    t: number,\n    dur: number,\n    out: Quaternion\n  ): Quaternion {\n    const p0 = frame.value;\n    const tan0 = frame.outTangent;\n    const p1 = nextFrame.value;\n    const tan1 = nextFrame.inTangent;\n\n    const t2 = t * t;\n    const t3 = t2 * t;\n    const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n    const b = t3 - 2.0 * t2 + t;\n    const c = t3 - t2;\n    const d = -2.0 * t3 + 3.0 * t2;\n\n    let t0 = tan0.x,\n      t1 = tan1.x;\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n    } else {\n      out.x = p0.x;\n    }\n\n    (t0 = tan0.y), (t1 = tan1.y);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n    } else {\n      out.y = p0.y;\n    }\n\n    (t0 = tan0.z), (t1 = tan1.z);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\n    } else {\n      out.z = p0.z;\n    }\n\n    (t0 = tan0.w), (t1 = tan1.w);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.w = a * p0.w + b * t0 * dur + c * t1 * dur + d * p1.w;\n    } else {\n      out.w = p0.w;\n    }\n    return out;\n  }\n\n  constructor() {\n    super();\n    this._evaluateData.value = new Quaternion();\n  }\n}\n", "import { Vector2 } from \"@galacean/engine-math\";\nimport { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { AnimationCurveOwner } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe } from \"../Keyframe\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\n@StaticInterfaceImplement<IAnimationCurveCalculator<Vector2>>()\nexport class AnimationVector2Curve extends AnimationCurve<Vector2> {\n  /** @internal */\n  static _isReferenceType: boolean = true;\n  /** @internal */\n  static _isInterpolationType: boolean = true;\n\n  /**\n   * @internal\n   */\n  static _initializeOwner(owner: AnimationCurveOwner<Vector2>): void {\n    owner.defaultValue = new Vector2();\n    owner.fixedPoseValue = new Vector2();\n    owner.baseEvaluateData.value = new Vector2();\n    owner.crossEvaluateData.value = new Vector2();\n  }\n\n  /**\n   * @internal\n   */\n  static _lerpValue(srcValue: Vector2, destValue: Vector2, weight: number, out: Vector2): Vector2 {\n    Vector2.lerp(srcValue, destValue, weight, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _additiveValue(value: Vector2, weight: number, out: Vector2): Vector2 {\n    Vector2.scale(value, weight, value);\n    Vector2.add(out, value, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _subtractValue(src: Vector2, base: Vector2, out: Vector2): Vector2 {\n    Vector2.subtract(src, base, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _getZeroValue(out: Vector2): Vector2 {\n    out.set(0, 0);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _copyValue(source: Vector2, out: Vector2): Vector2 {\n    out.copyFrom(source);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _hermiteInterpolationValue(\n    frame: Keyframe<Vector2>,\n    nextFrame: Keyframe<Vector2>,\n    t: number,\n    dur: number,\n    out: Vector2\n  ): Vector2 {\n    const p0 = frame.value;\n    const tan0 = frame.outTangent;\n    const p1 = nextFrame.value;\n    const tan1 = nextFrame.inTangent;\n\n    const t2 = t * t;\n    const t3 = t2 * t;\n    const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n    const b = t3 - 2.0 * t2 + t;\n    const c = t3 - t2;\n    const d = -2.0 * t3 + 3.0 * t2;\n\n    let t0 = tan0.x,\n      t1 = tan1.x;\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n    } else {\n      out.x = p0.x;\n    }\n\n    (t0 = tan0.y), (t1 = tan1.y);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n    } else {\n      out.y = p0.y;\n    }\n\n    return out;\n  }\n\n  constructor() {\n    super();\n    this._evaluateData.value = new Vector2();\n  }\n}\n", "import { Vector3 } from \"@galacean/engine-math\";\nimport { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { AnimationCurveOwner } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe } from \"../Keyframe\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\n@StaticInterfaceImplement<IAnimationCurveCalculator<Vector3>>()\nexport class AnimationVector3Curve extends AnimationCurve<Vector3> {\n  /** @internal */\n  static _isReferenceType: boolean = true;\n  /** @internal */\n  static _isInterpolationType: boolean = true;\n\n  /**\n   * @internal\n   */\n  static _initializeOwner(owner: AnimationCurveOwner<Vector3>): void {\n    owner.defaultValue = new Vector3();\n    owner.fixedPoseValue = new Vector3();\n    owner.baseEvaluateData.value = new Vector3();\n    owner.crossEvaluateData.value = new Vector3();\n  }\n\n  /**\n   * @internal\n   */\n  static _lerpValue(srcValue: Vector3, destValue: Vector3, weight: number, out: Vector3): Vector3 {\n    Vector3.lerp(srcValue, destValue, weight, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _relativeBaseValue(base: Vector3, out: Vector3): Vector3 {\n    Vector3.subtract(out, base, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _additiveValue(value: Vector3, weight: number, out: Vector3): Vector3 {\n    Vector3.scale(value, weight, value);\n    Vector3.add(out, value, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _subtractValue(src: Vector3, base: Vector3, out: Vector3): Vector3 {\n    Vector3.subtract(src, base, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _getZeroValue(out: Vector3): Vector3 {\n    out.set(0, 0, 0);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _copyValue(source: Vector3, out: Vector3): Vector3 {\n    out.copyFrom(source);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _hermiteInterpolationValue(\n    frame: Keyframe<Vector3>,\n    nextFrame: Keyframe<Vector3>,\n    t: number,\n    dur: number,\n    out: Vector3\n  ): Vector3 {\n    const p0 = frame.value;\n    const tan0 = frame.outTangent;\n    const p1 = nextFrame.value;\n    const tan1 = nextFrame.inTangent;\n\n    const t2 = t * t;\n    const t3 = t2 * t;\n    const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n    const b = t3 - 2.0 * t2 + t;\n    const c = t3 - t2;\n    const d = -2.0 * t3 + 3.0 * t2;\n\n    let t0 = tan0.x,\n      t1 = tan1.x;\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n    } else {\n      out.x = p0.x;\n    }\n\n    (t0 = tan0.y), (t1 = tan1.y);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n    } else {\n      out.y = p0.y;\n    }\n\n    (t0 = tan0.z), (t1 = tan1.z);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\n    } else {\n      out.z = p0.z;\n    }\n\n    return out;\n  }\n\n  constructor() {\n    super();\n    this._evaluateData.value = new Vector3();\n  }\n}\n", "import { Vector4 } from \"@galacean/engine-math\";\nimport { StaticInterfaceImplement } from \"../../base/StaticInterfaceImplement\";\nimport { AnimationCurveOwner } from \"../internal/animationCurveOwner/AnimationCurveOwner\";\nimport { Keyframe } from \"../Keyframe\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { IAnimationCurveCalculator } from \"./interfaces/IAnimationCurveCalculator\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\n@StaticInterfaceImplement<IAnimationCurveCalculator<Vector4>>()\nexport class AnimationVector4Curve extends AnimationCurve<Vector4> {\n  /** @internal */\n  static _isReferenceType: boolean = true;\n  /** @internal */\n  static _isInterpolationType: boolean = true;\n\n  /**\n   * @internal\n   */\n  static _initializeOwner(owner: AnimationCurveOwner<Vector4>): void {\n    owner.defaultValue = new Vector4();\n    owner.fixedPoseValue = new Vector4();\n    owner.baseEvaluateData.value = new Vector4();\n    owner.crossEvaluateData.value = new Vector4();\n  }\n\n  /**\n   * @internal\n   */\n  static _lerpValue(srcValue: Vector4, destValue: Vector4, weight: number, out: Vector4): Vector4 {\n    Vector4.lerp(srcValue, destValue, weight, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _additiveValue(value: Vector4, weight: number, out: Vector4): Vector4 {\n    Vector4.scale(value, weight, value);\n    Vector4.add(out, value, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _subtractValue(src: Vector4, base: Vector4, out: Vector4): Vector4 {\n    Vector4.subtract(src, base, out);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _getZeroValue(out: Vector4): Vector4 {\n    out.set(0, 0, 0, 0);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _copyValue(source: Vector4, out: Vector4): Vector4 {\n    out.copyFrom(source);\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  static _hermiteInterpolationValue(\n    frame: Keyframe<Vector4>,\n    nextFrame: Keyframe<Vector4>,\n    t: number,\n    dur: number,\n    out: Vector4\n  ): Vector4 {\n    const p0 = frame.value;\n    const tan0 = frame.outTangent;\n    const p1 = nextFrame.value;\n    const tan1 = nextFrame.inTangent;\n\n    const t2 = t * t;\n    const t3 = t2 * t;\n    const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n    const b = t3 - 2.0 * t2 + t;\n    const c = t3 - t2;\n    const d = -2.0 * t3 + 3.0 * t2;\n\n    let t0 = tan0.x,\n      t1 = tan1.x;\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n    } else {\n      out.x = p0.x;\n    }\n\n    (t0 = tan0.y), (t1 = tan1.y);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n    } else {\n      out.y = p0.y;\n    }\n\n    (t0 = tan0.z), (t1 = tan1.z);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\n    } else {\n      out.z = p0.z;\n    }\n\n    (t0 = tan0.w), (t1 = tan1.w);\n    if (Number.isFinite(t0) && Number.isFinite(t1)) {\n      out.w = a * p0.w + b * t0 * dur + c * t1 * dur + d * p1.w;\n    } else {\n      out.w = p0.w;\n    }\n    return out;\n  }\n\n  constructor() {\n    super();\n    this._evaluateData.value = new Vector4();\n  }\n}\n", "/**\n * Animator culling mode.\n */\nexport enum AnimatorCullingMode {\n  /** Disable Culling. */\n  None,\n  /** Completely disabled when renderers are all culled. */\n  Complete\n}\n", "export enum AnimatorLayerBlendingMode {\n  Override,\n  Additive\n}\n", "/**\n * @internal\n */\nexport enum AnimatorStatePlayState {\n  UnStarted,\n  Playing,\n  Finished\n}\n", "/**\n * Layer state.\n */\nexport enum LayerState {\n  /** Standby state. */\n  Standby, //CM: Standby 优化\n  /** Playing state. */\n  Playing,\n  /** CrossFading state. */\n  CrossFading,\n  /** FixedCrossFading state. */\n  FixedCrossFading\n}\n", "import { AnimationEvent } from \"../AnimationEvent\";\n/**\n * @internal\n */\nexport class AnimationEventHandler {\n  event: AnimationEvent;\n  handlers: Function[] = [];\n}\n", "import { AnimatorState } from \"./AnimatorState\";\n\n/**\n * Transitions define when and how the state machine switch from on state to another. AnimatorTransition always originate from a StateMachine or a StateMachine entry.\n */\nexport class AnimatorStateTransition {\n  /** The duration of the transition. This is represented in normalized time. */\n  duration: number = 0;\n  /** The time at which the destination state will start. This is represented in normalized time. */\n  offset: number = 0;\n  /** ExitTime represents the exact time at which the transition can take effect. This is represented in normalized time. */\n  exitTime: number = 1;\n  /** The destination state of the transition. */\n  destinationState: AnimatorState;\n}\n", "/**\n * Animation wrap mode.\n */\nexport enum WrapMode {\n  /** Play once */\n  Once = 0,\n  /** Loop play */\n  Loop = 1\n}\n", "import { AnimatorState } from \"../AnimatorState\";\nimport { AnimatorStatePlayState } from \"../enums/AnimatorStatePlayState\";\nimport { WrapMode } from \"../enums/WrapMode\";\nimport { AnimatorStateData } from \"./AnimatorStateData\";\n\n/**\n * @internal\n */\nexport class AnimatorStatePlayData {\n  state: AnimatorState;\n  stateData: AnimatorStateData;\n  frameTime: number;\n  playState: AnimatorStatePlayState;\n  clipTime: number;\n  currentEventIndex: number;\n\n  reset(state: AnimatorState, stateData: AnimatorStateData, offsetFrameTime: number): void {\n    this.state = state;\n    this.frameTime = offsetFrameTime;\n    this.stateData = stateData;\n    this.playState = AnimatorStatePlayState.UnStarted;\n    this.clipTime = state.clipStartTime * state.clip.length;\n    this.currentEventIndex = 0;\n  }\n\n  update(isBackwards: boolean): void {\n    const state = this.state;\n    let time = this.frameTime;\n    const duration = state._getDuration();\n    this.playState = AnimatorStatePlayState.Playing;\n    if (state.wrapMode === WrapMode.Loop) {\n      time = duration ? time % duration : 0;\n    } else {\n      if (Math.abs(time) > duration) {\n        time = time < 0 ? -duration : duration;\n        this.playState = AnimatorStatePlayState.Finished;\n      }\n    }\n\n    if (isBackwards && time === 0) {\n      this.clipTime = state.clipEndTime * state.clip.length;\n    } else {\n      time < 0 && (time += duration);\n      this.clipTime = time + state.clipStartTime * state.clip.length;\n    }\n  }\n}\n", "import { AnimatorStateTransition } from \"../AnimatorTransition\";\nimport { LayerState } from \"../enums/LayerState\";\nimport { AnimatorStateData } from \"./AnimatorStateData\";\nimport { AnimatorStatePlayData } from \"./AnimatorStatePlayData\";\n\n/**\n * @internal\n */\nexport class AnimatorLayerData {\n  animatorStateDataMap: Record<string, AnimatorStateData> = {};\n  srcPlayData: AnimatorStatePlayData = new AnimatorStatePlayData();\n  destPlayData: AnimatorStatePlayData = new AnimatorStatePlayData();\n  layerState: LayerState = LayerState.Standby;\n  crossCurveMark: number = 0;\n  manuallyTransition: AnimatorStateTransition = new AnimatorStateTransition();\n  crossFadeTransition: AnimatorStateTransition;\n\n  switchPlayData(): void {\n    const srcPlayData = this.destPlayData;\n    const switchTemp = this.srcPlayData;\n    this.srcPlayData = srcPlayData;\n    this.destPlayData = switchTemp;\n  }\n}\n", "import { KeyframeValueType } from \"../Keyframe\";\nimport { AnimationCurveOwner } from \"./animationCurveOwner/AnimationCurveOwner\";\nimport { AnimationEventHandler } from \"./AnimationEventHandler\";\n\n/**\n * @internal\n */\nexport class AnimatorStateData {\n  curveOwners: AnimationCurveOwner<KeyframeValueType>[] = [];\n  eventHandlers: AnimationEventHandler[] = [];\n}\n", "import { BoolUpdateFlag } from \"../BoolUpdateFlag\";\nimport { assignmentClone, ignoreClone } from \"../clone/CloneManager\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { Renderer } from \"../Renderer\";\nimport { ClassPool } from \"../RenderPipeline/ClassPool\";\nimport { AnimatorController } from \"./AnimatorController\";\nimport { AnimatorState } from \"./AnimatorState\";\nimport { AnimatorStateTransition } from \"./AnimatorTransition\";\nimport { AnimatorCullingMode } from \"./enums/AnimatorCullingMode\";\nimport { AnimatorLayerBlendingMode } from \"./enums/AnimatorLayerBlendingMode\";\nimport { AnimatorStatePlayState } from \"./enums/AnimatorStatePlayState\";\nimport { LayerState } from \"./enums/LayerState\";\nimport { AnimationCurveOwner } from \"./internal/animationCurveOwner/AnimationCurveOwner\";\nimport { AnimationEventHandler } from \"./internal/AnimationEventHandler\";\nimport { AnimatorLayerData } from \"./internal/AnimatorLayerData\";\nimport { AnimatorStateData } from \"./internal/AnimatorStateData\";\nimport { AnimatorStatePlayData } from \"./internal/AnimatorStatePlayData\";\nimport { KeyframeValueType } from \"./Keyframe\";\n\n/**\n * The controller of the animation system.\n */\nexport class Animator extends Component {\n  /** Culling mode of this Animator. */\n  cullingMode: AnimatorCullingMode = AnimatorCullingMode.None;\n  /** The playback speed of the Animator, 1.0 is normal playback speed. */\n  @assignmentClone\n  speed: number = 1.0;\n\n  protected _animatorController: AnimatorController;\n\n  @ignoreClone\n  protected _controllerUpdateFlag: BoolUpdateFlag;\n\n  @ignoreClone\n  private _animatorLayersData: AnimatorLayerData[] = [];\n  @ignoreClone\n  private _crossOwnerCollection: AnimationCurveOwner<KeyframeValueType>[] = [];\n  @ignoreClone\n  private _animationCurveOwners: Record<string, AnimationCurveOwner<KeyframeValueType>>[] = [];\n  @ignoreClone\n  private _animationEventHandlerPool: ClassPool<AnimationEventHandler> = new ClassPool(AnimationEventHandler);\n\n  @ignoreClone\n  private _tempAnimatorStateInfo: IAnimatorStateInfo = { layerIndex: -1, state: null };\n\n  @ignoreClone\n  private _controlledRenderers: Renderer[] = [];\n\n  /**\n   * All layers from the AnimatorController which belongs this Animator.\n   */\n  get animatorController(): AnimatorController {\n    return this._animatorController;\n  }\n\n  set animatorController(animatorController: AnimatorController) {\n    if (animatorController !== this._animatorController) {\n      this._reset();\n      this._controllerUpdateFlag && this._controllerUpdateFlag.destroy();\n      this._controllerUpdateFlag = animatorController && animatorController._registerChangeFlag();\n      this._animatorController = animatorController;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n  }\n\n  /**\n   * Play a state by name.\n   * @param stateName - The state name\n   * @param layerIndex - The layer index(default -1). If layer is -1, play the first state with the given state name\n   * @param normalizedTimeOffset - The time offset between 0 and 1(default 0)\n   */\n  play(stateName: string, layerIndex: number = -1, normalizedTimeOffset: number = 0): void {\n    if (this._controllerUpdateFlag?.flag) {\n      this._reset();\n    }\n\n    const stateInfo = this._getAnimatorStateInfo(stateName, layerIndex);\n    const { state } = stateInfo;\n\n    if (!state) {\n      return;\n    }\n    if (!state.clip) {\n      console.warn(`The state named ${stateName} has no AnimationClip data.`);\n      return;\n    }\n\n    const animatorLayerData = this._getAnimatorLayerData(stateInfo.layerIndex);\n    //TODO CM: Not consider same stateName, but different animation\n    const animatorStateData = this._getAnimatorStateData(stateName, state, animatorLayerData);\n\n    this._preparePlay(animatorLayerData, state, animatorStateData);\n\n    animatorLayerData.layerState = LayerState.Playing;\n    animatorLayerData.srcPlayData.reset(state, animatorStateData, state._getDuration() * normalizedTimeOffset);\n  }\n\n  /**\n   * Create a cross fade from the current state to another state.\n   * @param stateName - The state name\n   * @param normalizedTransitionDuration - The duration of the transition (normalized)\n   * @param layerIndex - The layer index(default -1). If layer is -1, play the first state with the given state name\n   * @param normalizedTimeOffset - The time offset between 0 and 1(default 0)\n   */\n  crossFade(\n    stateName: string,\n    normalizedTransitionDuration: number,\n    layerIndex: number = -1,\n    normalizedTimeOffset: number = 0\n  ): void {\n    if (this._controllerUpdateFlag?.flag) {\n      this._reset();\n    }\n\n    const { state } = this._getAnimatorStateInfo(stateName, layerIndex);\n    const { manuallyTransition } = this._getAnimatorLayerData(layerIndex);\n    manuallyTransition.duration = normalizedTransitionDuration;\n    manuallyTransition.offset = normalizedTimeOffset;\n    manuallyTransition.destinationState = state;\n    this._crossFadeByTransition(manuallyTransition, layerIndex);\n  }\n\n  /**\n   * Evaluates the animator component based on deltaTime.\n   * @param deltaTime - The deltaTime when the animation update\n   */\n  update(deltaTime: number): void {\n    let animationUpdate: boolean;\n    if (this.cullingMode === AnimatorCullingMode.Complete) {\n      animationUpdate = false;\n      const controlledRenderers = this._controlledRenderers;\n      for (let i = 0, n = controlledRenderers.length; i < n; i++) {\n        if (!controlledRenderers[i].isCulled) {\n          animationUpdate = true;\n          break;\n        }\n      }\n    } else {\n      animationUpdate = true;\n    }\n\n    const { _animatorController: animatorController } = this;\n    if (!animatorController) {\n      return;\n    }\n    if (this._controllerUpdateFlag?.flag) {\n      this._checkAutoPlay();\n      return;\n    }\n\n    deltaTime *= this.speed;\n    for (let i = 0, n = animatorController.layers.length; i < n; i++) {\n      const animatorLayerData = this._getAnimatorLayerData(i);\n      if (animatorLayerData.layerState === LayerState.Standby) {\n        continue;\n      }\n\n      this._updateLayer(i, i === 0, deltaTime / 1000, animationUpdate);\n    }\n  }\n\n  /**\n   * Get the playing state from the target layerIndex.\n   * @param layerIndex - The layer index\n   */\n  getCurrentAnimatorState(layerIndex: number): AnimatorState {\n    return this._animatorLayersData[layerIndex]?.srcPlayData?.state;\n  }\n\n  /**\n   * Get the state by name.\n   * @param stateName - The state name\n   * @param layerIndex - The layer index(default -1). If layer is -1, find the first state with the given state name\n   */\n  findAnimatorState(stateName: string, layerIndex: number = -1): AnimatorState {\n    return this._getAnimatorStateInfo(stateName, layerIndex).state;\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onEnable(): void {\n    this.engine._componentsManager.addOnUpdateAnimations(this);\n    this.animatorController && this._checkAutoPlay();\n    this._entity.getComponentsIncludeChildren(Renderer, this._controlledRenderers);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onDisable(): void {\n    this.engine._componentsManager.removeOnUpdateAnimations(this);\n  }\n\n  /**\n   * @internal\n   */\n  _reset(): void {\n    const { _animationCurveOwners: animationCurveOwners } = this;\n    for (let instanceId in animationCurveOwners) {\n      const propertyOwners = animationCurveOwners[instanceId];\n      for (let property in propertyOwners) {\n        const owner = propertyOwners[property];\n        owner.hasSavedDefaultValue && owner.revertDefaultValue();\n      }\n    }\n\n    this._animatorLayersData.length = 0;\n    this._crossOwnerCollection.length = 0;\n    this._animationCurveOwners.length = 0;\n    this._animationEventHandlerPool.resetPool();\n\n    if (this._controllerUpdateFlag) {\n      this._controllerUpdateFlag.flag = false;\n    }\n  }\n\n  private _getAnimatorStateInfo(stateName: string, layerIndex: number): IAnimatorStateInfo {\n    const { _animatorController: animatorController, _tempAnimatorStateInfo: stateInfo } = this;\n    let state: AnimatorState = null;\n    if (animatorController) {\n      const layers = animatorController.layers;\n      if (layerIndex === -1) {\n        for (let i = 0, n = layers.length; i < n; i++) {\n          state = layers[i].stateMachine.findStateByName(stateName);\n          if (state) {\n            layerIndex = i;\n            break;\n          }\n        }\n      } else {\n        state = layers[layerIndex].stateMachine.findStateByName(stateName);\n      }\n    }\n    stateInfo.layerIndex = layerIndex;\n    stateInfo.state = state;\n    return stateInfo;\n  }\n\n  private _saveDefaultValues(stateData: AnimatorStateData): void {\n    const { curveOwners } = stateData;\n    for (let i = curveOwners.length - 1; i >= 0; i--) {\n      curveOwners[i]?.saveDefaultValue();\n    }\n  }\n\n  private _getAnimatorStateData(\n    stateName: string,\n    animatorState: AnimatorState,\n    animatorLayerData: AnimatorLayerData\n  ): AnimatorStateData {\n    const { animatorStateDataMap } = animatorLayerData;\n    let animatorStateData = animatorStateDataMap[stateName];\n    if (!animatorStateData) {\n      animatorStateData = new AnimatorStateData();\n      animatorStateDataMap[stateName] = animatorStateData;\n      this._saveAnimatorStateData(animatorState, animatorStateData);\n      this._saveAnimatorEventHandlers(animatorState, animatorStateData);\n    }\n    return animatorStateData;\n  }\n\n  private _saveAnimatorStateData(animatorState: AnimatorState, animatorStateData: AnimatorStateData): void {\n    const { entity, _animationCurveOwners: animationCureOwners } = this;\n    const { curveOwners } = animatorStateData;\n    const { _curveBindings: curves } = animatorState.clip;\n    for (let i = curves.length - 1; i >= 0; i--) {\n      const curve = curves[i];\n      const targetEntity = curve.relativePath === \"\" ? entity : entity.findByPath(curve.relativePath);\n      if (targetEntity) {\n        const { property } = curve;\n        const { instanceId } = targetEntity;\n        const propertyOwners = animationCureOwners[instanceId] || (animationCureOwners[instanceId] = {});\n        curveOwners[i] = propertyOwners[property] || (propertyOwners[property] = curve._createCurveOwner(targetEntity));\n      } else {\n        curveOwners[i] = null;\n        console.warn(`The entity don\\'t have the child entity which path is ${curve.relativePath}.`);\n      }\n    }\n  }\n\n  private _saveAnimatorEventHandlers(state: AnimatorState, animatorStateData: AnimatorStateData): void {\n    const eventHandlerPool = this._animationEventHandlerPool;\n    const scripts = this._entity._scripts;\n    const scriptCount = scripts.length;\n    const { eventHandlers } = animatorStateData;\n    const { events } = state.clip;\n\n    eventHandlers.length = 0;\n    for (let i = 0, n = events.length; i < n; i++) {\n      const event = events[i];\n      const eventHandler = eventHandlerPool.getFromPool();\n      const funcName = event.functionName;\n      const { handlers } = eventHandler;\n\n      eventHandler.event = event;\n      handlers.length = 0;\n      for (let j = scriptCount - 1; j >= 0; j--) {\n        const handler = <Function>scripts.get(j)[funcName];\n        handler && handlers.push(handler);\n      }\n      eventHandlers.push(eventHandler);\n    }\n  }\n\n  private _clearCrossData(animatorLayerData: AnimatorLayerData): void {\n    animatorLayerData.crossCurveMark++;\n    this._crossOwnerCollection.length = 0;\n  }\n\n  private _addCrossCurveData(\n    crossCurveData: AnimationCurveOwner<KeyframeValueType>[],\n    owner: AnimationCurveOwner<KeyframeValueType>,\n    curCurveIndex: number,\n    nextCurveIndex: number\n  ): void {\n    owner.crossSrcCurveIndex = curCurveIndex;\n    owner.crossDestCurveIndex = nextCurveIndex;\n    crossCurveData.push(owner);\n  }\n\n  private _prepareCrossFading(animatorLayerData: AnimatorLayerData): void {\n    const crossCurveData = this._crossOwnerCollection;\n    const { crossCurveMark } = animatorLayerData;\n\n    // Add src cross curve data.\n    this._prepareSrcCrossData(crossCurveData, animatorLayerData.srcPlayData, crossCurveMark, false);\n    // Add dest cross curve data.\n    this._prepareDestCrossData(crossCurveData, animatorLayerData.destPlayData, crossCurveMark, false);\n  }\n\n  private _prepareStandbyCrossFading(animatorLayerData: AnimatorLayerData): void {\n    const crossOwnerCollection = this._crossOwnerCollection;\n    const { srcPlayData, crossCurveMark } = animatorLayerData;\n\n    // Standby have two sub state, one is never play, one is finished, never play srcPlayData.state is null.\n    srcPlayData.state && this._prepareSrcCrossData(crossOwnerCollection, srcPlayData, crossCurveMark, true);\n    // Add dest cross curve data.\n    this._prepareDestCrossData(crossOwnerCollection, animatorLayerData.destPlayData, crossCurveMark, true);\n  }\n\n  private _prepareFixedPoseCrossFading(animatorLayerData: AnimatorLayerData): void {\n    const crossOwnerCollection = this._crossOwnerCollection;\n\n    // Save current cross curve data owner fixed pose.\n    for (let i = crossOwnerCollection.length - 1; i >= 0; i--) {\n      const item = crossOwnerCollection[i];\n      item.saveFixedPoseValue();\n      // Reset destCurveIndex When fixed pose crossFading again.\n      item.crossDestCurveIndex = -1;\n    }\n    // prepare dest AnimatorState cross data.\n    this._prepareDestCrossData(\n      crossOwnerCollection,\n      animatorLayerData.destPlayData,\n      animatorLayerData.crossCurveMark,\n      true\n    );\n  }\n\n  private _prepareSrcCrossData(\n    crossCurveData: AnimationCurveOwner<KeyframeValueType>[],\n    srcPlayData: AnimatorStatePlayData,\n    crossCurveMark: number,\n    saveFixed: boolean\n  ): void {\n    const { curveOwners } = srcPlayData.stateData;\n    for (let i = curveOwners.length - 1; i >= 0; i--) {\n      const owner = curveOwners[i];\n      if (!owner) continue;\n      owner.crossCurveMark = crossCurveMark;\n      owner.crossCurveDataIndex = crossCurveData.length;\n      saveFixed && owner.saveFixedPoseValue();\n      this._addCrossCurveData(crossCurveData, owner, i, -1);\n    }\n  }\n\n  private _prepareDestCrossData(\n    crossCurveData: AnimationCurveOwner<KeyframeValueType>[],\n    destPlayData: AnimatorStatePlayData,\n    crossCurveMark: number,\n    saveFixed: boolean\n  ): void {\n    const { curveOwners } = destPlayData.stateData;\n    for (let i = curveOwners.length - 1; i >= 0; i--) {\n      const owner = curveOwners[i];\n      if (!owner) continue;\n      if (owner.crossCurveMark === crossCurveMark) {\n        crossCurveData[owner.crossCurveDataIndex].crossDestCurveIndex = i;\n      } else {\n        owner.saveDefaultValue();\n        saveFixed && owner.saveFixedPoseValue();\n        owner.crossCurveMark = crossCurveMark;\n        owner.crossCurveDataIndex = crossCurveData.length;\n        this._addCrossCurveData(crossCurveData, owner, -1, i);\n      }\n    }\n  }\n\n  private _getAnimatorLayerData(layerIndex: number): AnimatorLayerData {\n    let animatorLayerData = this._animatorLayersData[layerIndex];\n    animatorLayerData || (this._animatorLayersData[layerIndex] = animatorLayerData = new AnimatorLayerData());\n    return animatorLayerData;\n  }\n\n  private _updateLayer(layerIndex: number, firstLayer: boolean, deltaTime: number, aniUpdate: boolean): void {\n    let { blendingMode, weight } = this._animatorController.layers[layerIndex];\n    const layerData = this._animatorLayersData[layerIndex];\n    const { srcPlayData, destPlayData, crossFadeTransition: crossFadeTransitionInfo } = layerData;\n    const additive = blendingMode === AnimatorLayerBlendingMode.Additive;\n    firstLayer && (weight = 1.0);\n    //TODO: 任意情况都应该检查，后面要优化\n    layerData.layerState !== LayerState.FixedCrossFading &&\n      this._checkTransition(srcPlayData, crossFadeTransitionInfo, layerIndex);\n\n    switch (layerData.layerState) {\n      case LayerState.Playing:\n        this._updatePlayingState(srcPlayData, layerData, layerIndex, weight, deltaTime, additive, aniUpdate);\n        break;\n      case LayerState.FixedCrossFading:\n        this._updateCrossFadeFromPose(destPlayData, layerData, layerIndex, weight, deltaTime, additive, aniUpdate);\n        break;\n      case LayerState.CrossFading:\n        this._updateCrossFade(srcPlayData, destPlayData, layerData, layerIndex, weight, deltaTime, additive, aniUpdate);\n        break;\n    }\n  }\n\n  private _updatePlayingState(\n    playData: AnimatorStatePlayData,\n    layerData: AnimatorLayerData,\n    layerIndex: number,\n    weight: number,\n    delta: number,\n    additive: boolean,\n    aniUpdate: boolean\n  ): void {\n    const { curveOwners, eventHandlers } = playData.stateData;\n    const { state, playState: lastPlayState, clipTime: lastClipTime } = playData;\n    const { _curveBindings: curveBindings } = state.clip;\n\n    playData.update(this.speed < 0);\n\n    if (!aniUpdate) {\n      return;\n    }\n\n    const { clipTime, playState } = playData;\n    eventHandlers.length && this._fireAnimationEvents(playData, eventHandlers, lastClipTime, clipTime);\n\n    for (let i = curveBindings.length - 1; i >= 0; i--) {\n      const owner = curveOwners[i];\n      owner?.evaluateAndApplyValue(curveBindings[i].curve, clipTime, weight, additive);\n    }\n\n    playData.frameTime += state.speed * delta;\n\n    if (playState === AnimatorStatePlayState.Finished) {\n      layerData.layerState = LayerState.Standby;\n    }\n\n    if (lastPlayState === AnimatorStatePlayState.UnStarted) {\n      this._callAnimatorScriptOnEnter(state, layerIndex);\n    }\n    if (playState === AnimatorStatePlayState.Finished) {\n      this._callAnimatorScriptOnExit(state, layerIndex);\n    } else {\n      this._callAnimatorScriptOnUpdate(state, layerIndex);\n    }\n  }\n\n  private _updateCrossFade(\n    srcPlayData: AnimatorStatePlayData,\n    destPlayData: AnimatorStatePlayData,\n    layerData: AnimatorLayerData,\n    layerIndex,\n    weight: number,\n    delta: number,\n    additive: boolean,\n    aniUpdate: boolean\n  ) {\n    const { _crossOwnerCollection: crossCurveDataCollection } = this;\n    const { _curveBindings: srcCurves } = srcPlayData.state.clip;\n    const { state: srcState, stateData: srcStateData, playState: lastSrcPlayState } = srcPlayData;\n    const { eventHandlers: srcEventHandlers } = srcStateData;\n    const { state: destState, stateData: destStateData, playState: lastDstPlayState } = destPlayData;\n    const { eventHandlers: destEventHandlers } = destStateData;\n    const { _curveBindings: destCurves } = destState.clip;\n    const { clipTime: lastSrcClipTime } = srcPlayData;\n    const { clipTime: lastDestClipTime } = destPlayData;\n\n    let crossWeight =\n      Math.abs(destPlayData.frameTime) / (destState._getDuration() * layerData.crossFadeTransition.duration);\n    crossWeight >= 1.0 && (crossWeight = 1.0);\n\n    srcPlayData.update(this.speed < 0);\n    destPlayData.update(this.speed < 0);\n\n    const { playState: srcPlayState } = srcPlayData;\n    const { playState: destPlayState } = destPlayData;\n\n    this._updateCrossFadeData(layerData, crossWeight, delta, false);\n\n    if (!aniUpdate) {\n      return;\n    }\n\n    const { clipTime: srcClipTime } = srcPlayData;\n    const { clipTime: destClipTime } = destPlayData;\n\n    srcEventHandlers.length && this._fireAnimationEvents(srcPlayData, srcEventHandlers, lastSrcClipTime, srcClipTime);\n    destEventHandlers.length &&\n      this._fireAnimationEvents(destPlayData, destEventHandlers, lastDestClipTime, destClipTime);\n\n    if (lastSrcPlayState === AnimatorStatePlayState.UnStarted) {\n      this._callAnimatorScriptOnEnter(srcState, layerIndex);\n    }\n    if (crossWeight === 1 || srcPlayState === AnimatorStatePlayState.Finished) {\n      this._callAnimatorScriptOnExit(srcState, layerIndex);\n    } else {\n      this._callAnimatorScriptOnUpdate(srcState, layerIndex);\n    }\n\n    if (lastDstPlayState === AnimatorStatePlayState.UnStarted) {\n      this._callAnimatorScriptOnEnter(destState, layerIndex);\n    }\n    if (destPlayState === AnimatorStatePlayState.Finished) {\n      this._callAnimatorScriptOnExit(destState, layerIndex);\n    } else {\n      this._callAnimatorScriptOnUpdate(destState, layerIndex);\n    }\n\n    for (let i = crossCurveDataCollection.length - 1; i >= 0; i--) {\n      const crossCurveData = crossCurveDataCollection[i];\n      const { crossSrcCurveIndex, crossDestCurveIndex } = crossCurveData;\n      crossCurveData.crossFadeAndApplyValue(\n        crossSrcCurveIndex >= 0 ? srcCurves[crossSrcCurveIndex].curve : null,\n        crossDestCurveIndex >= 0 ? destCurves[crossDestCurveIndex].curve : null,\n        srcClipTime,\n        destClipTime,\n        crossWeight,\n        weight,\n        additive\n      );\n    }\n  }\n\n  private _updateCrossFadeFromPose(\n    destPlayData: AnimatorStatePlayData,\n    layerData: AnimatorLayerData,\n    layerIndex: number,\n    layerWeight: number,\n    delta: number,\n    additive: boolean,\n    aniUpdate: boolean\n  ) {\n    const crossCurveDataCollection = this._crossOwnerCollection;\n    const { state, stateData, playState: lastPlayState } = destPlayData;\n    const { eventHandlers } = stateData;\n    const { _curveBindings: curveBindings } = state.clip;\n    const { clipTime: lastDestClipTime } = destPlayData;\n\n    let crossWeight =\n      Math.abs(destPlayData.frameTime) / (state._getDuration() * layerData.crossFadeTransition.duration);\n    crossWeight >= 1.0 && (crossWeight = 1.0);\n\n    destPlayData.update(this.speed < 0);\n\n    const { playState } = destPlayData;\n\n    this._updateCrossFadeData(layerData, crossWeight, delta, true);\n\n    if (!aniUpdate) {\n      return;\n    }\n\n    const { clipTime: destClipTime } = destPlayData;\n    //TODO: srcState 少了最新一段时间的判断\n    eventHandlers.length && this._fireAnimationEvents(destPlayData, eventHandlers, lastDestClipTime, destClipTime);\n\n    if (lastPlayState === AnimatorStatePlayState.UnStarted) {\n      this._callAnimatorScriptOnEnter(state, layerIndex);\n    }\n    if (playState === AnimatorStatePlayState.Finished) {\n      this._callAnimatorScriptOnExit(state, layerIndex);\n    } else {\n      this._callAnimatorScriptOnUpdate(state, layerIndex);\n    }\n\n    for (let i = crossCurveDataCollection.length - 1; i >= 0; i--) {\n      const crossCurveData = crossCurveDataCollection[i];\n      const { crossDestCurveIndex } = crossCurveData;\n      crossCurveData.crossFadeFromPoseAndApplyValue(\n        crossDestCurveIndex >= 0 ? curveBindings[crossDestCurveIndex].curve : null,\n        destClipTime,\n        crossWeight,\n        layerWeight,\n        additive\n      );\n    }\n  }\n\n  private _updateCrossFadeData(layerData: AnimatorLayerData, crossWeight: number, delta: number, fixed: boolean): void {\n    const { destPlayData } = layerData;\n    destPlayData.frameTime += destPlayData.state.speed * delta;\n    if (crossWeight === 1.0) {\n      if (destPlayData.playState === AnimatorStatePlayState.Finished) {\n        layerData.layerState = LayerState.Standby;\n      } else {\n        layerData.layerState = LayerState.Playing;\n      }\n      layerData.switchPlayData();\n      layerData.crossFadeTransition = null;\n    } else {\n      fixed || (layerData.srcPlayData.frameTime += layerData.srcPlayData.state.speed * delta);\n    }\n  }\n\n  private _preparePlay(layerData: AnimatorLayerData, playState: AnimatorState, playStateData: AnimatorStateData): void {\n    if (layerData.layerState === LayerState.Playing) {\n      const srcPlayData = layerData.srcPlayData;\n      if (srcPlayData.state !== playState) {\n        const { curveOwners } = srcPlayData.stateData;\n        for (let i = curveOwners.length - 1; i >= 0; i--) {\n          const owner = curveOwners[i];\n          owner?.hasSavedDefaultValue && owner.revertDefaultValue();\n        }\n        this._saveDefaultValues(playStateData);\n      }\n    } else {\n      // layerState is CrossFading, FixedCrossFading, Standby\n      const crossCurveDataCollection = this._crossOwnerCollection;\n      for (let i = crossCurveDataCollection.length - 1; i >= 0; i--) {\n        const owner = crossCurveDataCollection[i];\n        owner.hasSavedDefaultValue && owner.revertDefaultValue();\n      }\n      this._saveDefaultValues(playStateData);\n    }\n  }\n\n  private _checkTransition(\n    stateData: AnimatorStatePlayData,\n    crossFadeTransition: AnimatorStateTransition,\n    layerIndex: number\n  ) {\n    const { state, clipTime } = stateData;\n    const { transitions } = state;\n    const duration = state._getDuration();\n    for (let i = 0, n = transitions.length; i < n; ++i) {\n      const transition = transitions[i];\n      if (duration * transition.exitTime <= clipTime) {\n        crossFadeTransition !== transition && this._crossFadeByTransition(transition, layerIndex);\n      }\n    }\n  }\n\n  private _crossFadeByTransition(transition: AnimatorStateTransition, layerIndex: number): void {\n    const { name } = transition.destinationState;\n    const stateInfo = this._getAnimatorStateInfo(name, layerIndex);\n    const { state: crossState } = stateInfo;\n    if (!crossState) {\n      return;\n    }\n    if (!crossState.clip) {\n      console.warn(`The state named ${name} has no AnimationClip data.`);\n      return;\n    }\n\n    const animatorLayerData = this._getAnimatorLayerData(stateInfo.layerIndex);\n    const layerState = animatorLayerData.layerState;\n    const { destPlayData } = animatorLayerData;\n\n    const animatorStateData = this._getAnimatorStateData(name, crossState, animatorLayerData);\n    const duration = crossState._getDuration();\n    const offset = duration * transition.offset;\n    destPlayData.reset(crossState, animatorStateData, offset);\n\n    switch (layerState) {\n      // Maybe not play, maybe end.\n      case LayerState.Standby:\n        animatorLayerData.layerState = LayerState.FixedCrossFading;\n        this._clearCrossData(animatorLayerData);\n        this._prepareStandbyCrossFading(animatorLayerData);\n        break;\n      case LayerState.Playing:\n        animatorLayerData.layerState = LayerState.CrossFading;\n        this._clearCrossData(animatorLayerData);\n        this._prepareCrossFading(animatorLayerData);\n        break;\n      case LayerState.CrossFading:\n        animatorLayerData.layerState = LayerState.FixedCrossFading;\n        this._prepareFixedPoseCrossFading(animatorLayerData);\n        break;\n      case LayerState.FixedCrossFading:\n        this._prepareFixedPoseCrossFading(animatorLayerData);\n        break;\n    }\n\n    animatorLayerData.crossFadeTransition = transition;\n  }\n\n  private _fireAnimationEvents(\n    playState: AnimatorStatePlayData,\n    eventHandlers: AnimationEventHandler[],\n    lastClipTime: number,\n    clipTime: number\n  ): void {\n    const { state } = playState;\n    const clipDuration = state.clip.length;\n    if (this.speed >= 0) {\n      if (clipTime < lastClipTime) {\n        this._fireSubAnimationEvents(playState, eventHandlers, lastClipTime, state.clipEndTime * clipDuration);\n        playState.currentEventIndex = 0;\n        this._fireSubAnimationEvents(playState, eventHandlers, state.clipStartTime * clipDuration, clipTime);\n      } else {\n        this._fireSubAnimationEvents(playState, eventHandlers, lastClipTime, clipTime);\n      }\n    } else {\n      if (clipTime > lastClipTime) {\n        this._fireBackwardSubAnimationEvents(\n          playState,\n          eventHandlers,\n          lastClipTime,\n          state.clipStartTime * clipDuration\n        );\n        playState.currentEventIndex = eventHandlers.length - 1;\n        this._fireBackwardSubAnimationEvents(playState, eventHandlers, state.clipEndTime * clipDuration, clipTime);\n      } else {\n        this._fireBackwardSubAnimationEvents(playState, eventHandlers, lastClipTime, clipTime);\n      }\n    }\n  }\n\n  private _fireSubAnimationEvents(\n    playState: AnimatorStatePlayData,\n    eventHandlers: AnimationEventHandler[],\n    lastClipTime: number,\n    curClipTime: number\n  ): void {\n    let eventIndex = playState.currentEventIndex;\n    for (let n = eventHandlers.length; eventIndex < n; eventIndex++) {\n      const eventHandler = eventHandlers[eventIndex];\n      const { time, parameter } = eventHandler.event;\n\n      if (time > curClipTime) {\n        break;\n      }\n\n      const { handlers } = eventHandler;\n      if (time >= lastClipTime) {\n        for (let j = handlers.length - 1; j >= 0; j--) {\n          handlers[j](parameter);\n        }\n        playState.currentEventIndex = Math.min(eventIndex + 1, n - 1);\n      }\n    }\n  }\n\n  private _fireBackwardSubAnimationEvents(\n    playState: AnimatorStatePlayData,\n    eventHandlers: AnimationEventHandler[],\n    lastClipTime: number,\n    curClipTime: number\n  ): void {\n    let eventIndex = playState.currentEventIndex;\n    for (; eventIndex >= 0; eventIndex--) {\n      const eventHandler = eventHandlers[eventIndex];\n      const { time, parameter } = eventHandler.event;\n\n      if (time < curClipTime) {\n        break;\n      }\n\n      if (time <= lastClipTime) {\n        const { handlers } = eventHandler;\n        for (let j = handlers.length - 1; j >= 0; j--) {\n          handlers[j](parameter);\n        }\n        playState.currentEventIndex = Math.max(eventIndex - 1, 0);\n      }\n    }\n  }\n\n  private _callAnimatorScriptOnEnter(state: AnimatorState, layerIndex: number): void {\n    const scripts = state._onStateEnterScripts;\n    for (let i = 0, n = scripts.length; i < n; i++) {\n      scripts[i].onStateEnter(this, state, layerIndex);\n    }\n  }\n\n  private _callAnimatorScriptOnUpdate(state: AnimatorState, layerIndex: number): void {\n    const scripts = state._onStateUpdateScripts;\n    for (let i = 0, n = scripts.length; i < n; i++) {\n      scripts[i].onStateUpdate(this, state, layerIndex);\n    }\n  }\n\n  private _callAnimatorScriptOnExit(state: AnimatorState, layerIndex: number): void {\n    const scripts = state._onStateExitScripts;\n    for (let i = 0, n = scripts.length; i < n; i++) {\n      scripts[i].onStateExit(this, state, layerIndex);\n    }\n  }\n\n  private _checkAutoPlay(): void {\n    const { layers } = this._animatorController;\n    for (let i = 0, n = layers.length; i < n; ++i) {\n      const stateMachine = layers[i].stateMachine;\n      if (stateMachine?.defaultState) {\n        this.play(stateMachine.defaultState.name, i);\n      }\n    }\n  }\n}\n\ninterface IAnimatorStateInfo {\n  layerIndex: number;\n  state: AnimatorState;\n}\n", "import { BoolUpdateFlag } from \"../BoolUpdateFlag\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\nimport { AnimatorControllerLayer } from \"./AnimatorControllerLayer\";\n\n/**\n * Store the data for Animator playback.\n */\nexport class AnimatorController {\n  private _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n  private _layers: AnimatorControllerLayer[] = [];\n  private _layersMap: Record<string, AnimatorControllerLayer> = {};\n\n  /**\n   * The layers in the controller.\n   */\n  get layers(): Readonly<AnimatorControllerLayer[]> {\n    return this._layers;\n  }\n\n  /**\n   * Get the layer by name.\n   * @param name - The layer's name.\n   */\n  findLayerByName(name: string): AnimatorControllerLayer {\n    return this._layersMap[name];\n  }\n\n  /**\n   * Add a layer to the controller.\n   * @param layer - The layer to add\n   */\n  addLayer(layer: AnimatorControllerLayer): void {\n    this._layers.push(layer);\n    this._layersMap[layer.name] = layer;\n    this._updateFlagManager.dispatch();\n  }\n\n  /**\n   * Remove a layer from the controller.\n   * @param layerIndex - The index of the AnimatorLayer\n   */\n  removeLayer(layerIndex: number): void {\n    const theLayer = this.layers[layerIndex];\n    this._layers.splice(layerIndex, 1);\n    delete this._layersMap[theLayer.name];\n    this._updateFlagManager.dispatch();\n  }\n\n  /**\n   * Clear layers.\n   */\n  clearLayers(): void {\n    this._layers.length = 0;\n    for (let name in this._layersMap) {\n      delete this._layersMap[name];\n    }\n    this._updateFlagManager.dispatch();\n  }\n\n  /**\n   * @internal\n   */\n  _registerChangeFlag(): BoolUpdateFlag {\n    return this._updateFlagManager.createFlag(BoolUpdateFlag);\n  }\n}\n", "import { AnimatorStateMachine } from \"./AnimatorStateMachine\";\nimport { AnimatorLayerBlendingMode } from \"./enums/AnimatorLayerBlendingMode\";\n\n/**\n * The Animation Layer contains a state machine that controls animations of a model or part of it.\n */\nexport class AnimatorControllerLayer {\n  /** The blending weight that the layers has. It is not taken into account for the first layer. */\n  weight: number = 1.0;\n  /** The blending mode used by the layer. It is not taken into account for the first layer. */\n  blendingMode: AnimatorLayerBlendingMode = AnimatorLayerBlendingMode.Override;\n  /** The state machine for the layer. */\n  stateMachine: AnimatorStateMachine;\n\n  /**\n   * @param name - The layer's name\n   */\n  constructor(public readonly name: string) {}\n}\n", "import { Animator } from \"../animation/Animator\";\nimport { AnimatorState } from \"../animation/AnimatorState\";\n\n/**\n * StateMachineScript is a component that can be added to a animator state. It's the base class every script on a state derives from.\n */\nexport class StateMachineScript {\n  /** @internal */\n  _destroyed: boolean = false;\n  /** @internal */\n  _state: AnimatorState;\n  /**\n   * onStateEnter is called when a transition starts and the state machine starts to evaluate this state.\n   * @param animator - The animator\n   * @param animatorState - The state be evaluated\n   * @param layerIndex - The index of the layer where the state is located\n   */\n  onStateEnter(animator: Animator, animatorState: AnimatorState, layerIndex: number): void {}\n\n  /**\n   * onStateUpdate is called on each Update frame between onStateEnter and onStateExit callbacks.\n   * @param animator - The animator\n   * @param animatorState - The state be evaluated\n   * @param layerIndex - The index of the layer where the state is located\n   */\n  onStateUpdate(animator: Animator, animatorState: AnimatorState, layerIndex: number): void {}\n\n  /**\n   * onStateExit is called when a transition ends and the state machine finishes evaluating this state.\n   * @param animator - The animator\n   * @param animatorState - The state be evaluated\n   * @param layerIndex - The index of the layer where the state is located\n   */\n  onStateExit(animator: Animator, animatorState: AnimatorState, layerIndex: number): void {}\n\n  /**\n   * Destroy this instance.\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n\n    this._state._removeStateMachineScript(this);\n    this._destroyed = true;\n  }\n}\n", "import { AnimationClip } from \"./AnimationClip\";\nimport { AnimatorStateTransition } from \"./AnimatorTransition\";\nimport { WrapMode } from \"./enums/WrapMode\";\nimport { StateMachineScript } from \"./StateMachineScript\";\n\n/**\n * States are the basic building blocks of a state machine. Each state contains a AnimationClip which will play while the character is in that state.\n */\nexport class AnimatorState {\n  /** The speed of the clip. 1 is normal speed, default 1. */\n  speed: number = 1.0;\n  /** The wrap mode used in the state. */\n  wrapMode: WrapMode = WrapMode.Loop;\n\n  /** @internal */\n  _onStateEnterScripts: StateMachineScript[] = [];\n  /** @internal */\n  _onStateUpdateScripts: StateMachineScript[] = [];\n  /** @internal */\n  _onStateExitScripts: StateMachineScript[] = [];\n\n  private _clipStartTime: number = 0;\n  private _clipEndTime: number = 1;\n  private _clip: AnimationClip;\n  private _transitions: AnimatorStateTransition[] = [];\n\n  /**\n   * The transitions that are going out of the state.\n   */\n  get transitions(): Readonly<AnimatorStateTransition[]> {\n    return this._transitions;\n  }\n\n  /**\n   * The clip that is being played by this animator state.\n   */\n  get clip(): AnimationClip {\n    return this._clip;\n  }\n\n  set clip(clip: AnimationClip) {\n    this._clip = clip;\n    this._clipEndTime = Math.min(this._clipEndTime, 1);\n  }\n\n  /**\n   * The start time of the clip, the range is 0 to 1, default is 0.\n   */\n  get clipStartTime() {\n    return this._clipStartTime;\n  }\n\n  set clipStartTime(time: number) {\n    this._clipStartTime = Math.max(time, 0);\n  }\n\n  /**\n   * The end time of the clip, the range is 0 to 1, default is 1.\n   */\n  get clipEndTime() {\n    return this._clipEndTime;\n  }\n\n  set clipEndTime(time: number) {\n    this._clipEndTime = Math.min(time, 1);\n  }\n\n  /**\n   * @param name - The state's name\n   */\n  constructor(public readonly name: string) {}\n\n  /**\n   * Add an outgoing transition to the destination state.\n   * @param transition - The transition\n   */\n  addTransition(transition: AnimatorStateTransition): void {\n    this._transitions.push(transition);\n  }\n\n  /**\n   * Remove a transition from the state.\n   * @param transition - The transition\n   */\n  removeTransition(transition: AnimatorStateTransition): void {\n    const index = this._transitions.indexOf(transition);\n    index !== -1 && this._transitions.splice(index, 1);\n  }\n\n  /**\n   * Adds a state machine script class of type T to the AnimatorState.\n   * @param scriptType - The state machine script class of type T\n   */\n  addStateMachineScript<T extends StateMachineScript>(scriptType: new () => T): T {\n    const script = new scriptType();\n    script._state = this;\n\n    const { prototype } = StateMachineScript;\n    if (script.onStateEnter !== prototype.onStateEnter) {\n      this._onStateEnterScripts.push(script);\n    }\n    if (script.onStateUpdate !== prototype.onStateUpdate) {\n      this._onStateUpdateScripts.push(script);\n    }\n    if (script.onStateExit !== prototype.onStateExit) {\n      this._onStateExitScripts.push(script);\n    }\n\n    return script;\n  }\n\n  /**\n   * Clears all transitions from the state.\n   */\n  clearTransitions(): void {\n    this._transitions.length = 0;\n  }\n\n  /**\n   * @internal\n   */\n  _getDuration(): number {\n    if (this.clip) {\n      return (this._clipEndTime - this._clipStartTime) * this.clip.length;\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  _removeStateMachineScript(script: StateMachineScript): void {\n    const { prototype } = StateMachineScript;\n    if (script.onStateEnter !== prototype.onStateEnter) {\n      const index = this._onStateEnterScripts.indexOf(script);\n      index !== -1 && this._onStateEnterScripts.splice(index, 1);\n    }\n    if (script.onStateUpdate !== prototype.onStateUpdate) {\n      const index = this._onStateUpdateScripts.indexOf(script);\n      index !== -1 && this._onStateUpdateScripts.splice(index, 1);\n    }\n    if (script.onStateExit !== prototype.onStateExit) {\n      const index = this._onStateExitScripts.indexOf(script);\n      index !== -1 && this._onStateExitScripts.splice(index, 1);\n    }\n  }\n}\n", "import { AnimatorState } from \"./AnimatorState\";\nexport interface AnimatorStateMap {\n  [key: string]: AnimatorState;\n}\n\n/**\n * A graph controlling the interaction of states. Each state references a motion.\n */\nexport class AnimatorStateMachine {\n  /** The list of states. */\n  readonly states: AnimatorState[] = [];\n\n  /**\n   * The state will be played automatically.\n   * @remarks When the Animator's AnimatorController changed or the Animator's onEnable be triggered.\n   */\n  defaultState: AnimatorState;\n\n  /** @internal */\n  _statesMap: AnimatorStateMap = {};\n\n  /**\n   * Add a state to the state machine.\n   * @param name - The name of the new state\n   */\n  addState(name: string): AnimatorState {\n    let state = this.findStateByName(name);\n    if (!state) {\n      state = new AnimatorState(name);\n      this.states.push(state);\n      this._statesMap[name] = state;\n    } else {\n      console.warn(`The state named ${name} has existed.`);\n    }\n    return state;\n  }\n\n  /**\n   * Remove a state from the state machine.\n   * @param state - The state\n   */\n  removeState(state: AnimatorState): void {\n    const { name } = state;\n    const index = this.states.indexOf(state);\n    if (index > -1) {\n      this.states.splice(index, 1);\n    }\n    delete this._statesMap[name];\n  }\n\n  /**\n   * Get the state by name.\n   * @param name - The layer's name\n   */\n  findStateByName(name: string): AnimatorState {\n    return this._statesMap[name];\n  }\n\n  /**\n   * Makes a unique state name in the state machine.\n   * @param name - Desired name for the state.\n   * @returns Unique name.\n   */\n  makeUniqueStateName(name: string): string {\n    const { _statesMap } = this;\n    const originName = name;\n    let index = 0;\n    while (_statesMap[name]) {\n      name = `${originName} ${index}`;\n      index++;\n    }\n    return name;\n  }\n}\n", "export enum AnimatorConditionMode {\n  If,\n  IfNot,\n  Greater,\n  Less,\n  Equals,\n  NotEquals\n}\n", "import { Color, Quaternion, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\n\n/**\n * Keyframe.\n * @typeParam V - Type of Keyframe value\n */\nexport class Keyframe<\n  V extends KeyframeValueType,\n  T = V extends number\n    ? number\n    : V extends Vector2\n    ? Vector2\n    : V extends Vector3\n    ? Vector3\n    : V extends Vector4 | Color | Quaternion\n    ? Vector4\n    : V extends number[] | Float32Array\n    ? number[]\n    : never\n> {\n  /** The time of the Keyframe. */\n  time: number;\n  /** The value of the Keyframe. */\n  value: V;\n  /** Sets the incoming tangent for this key. The incoming tangent affects the slope of the curve from the previous key to this key. */\n  inTangent?: T;\n  /** Sets the outgoing tangent for this key. The outgoing tangent affects the slope of the curve from this key to the next key. */\n  outTangent?: T;\n}\n\n/**\n * Type of Keyframe value.\n */\nexport type KeyframeValueType =\n  | number\n  | Vector2\n  | Vector3\n  | Vector4\n  | number[]\n  | Float32Array\n  | Quaternion\n  | Color\n  | boolean;\n", "import { Vector4 } from \"@galacean/engine-math\";\nimport { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { CompareFunction } from \"../shader/enums/CompareFunction\";\nimport { CullMode } from \"../shader/enums/CullMode\";\nimport { Shader } from \"../shader/Shader\";\nimport { TextureCube } from \"../texture\";\n\n/**\n * SkyboxMaterial\n */\nexport class SkyBoxMaterial extends Material {\n  private _decodeParam: Vector4 = new Vector4(0, 5, 0, 0);\n\n  /**\n   * Whether to decode from texture with RGBM format.\n   */\n  get textureDecodeRGBM(): boolean {\n    return Boolean(this._decodeParam.x);\n  }\n\n  set textureDecodeRGBM(value: boolean) {\n    this._decodeParam.x = Number(value);\n  }\n\n  /**\n   * RGBM decode factor, default 5.0.\n   */\n  get RGBMDecodeFactor(): number {\n    return this._decodeParam.y;\n  }\n\n  set RGBMDecodeFactor(value: number) {\n    this._decodeParam.y = value;\n  }\n\n  /**\n   * Texture cube map of the sky box material.\n   */\n  get textureCubeMap(): TextureCube {\n    return this.shaderData.getTexture(\"u_cube\") as TextureCube;\n  }\n\n  set textureCubeMap(v: TextureCube) {\n    this.shaderData.setTexture(\"u_cube\", v);\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"skybox\"));\n\n    this.renderState.rasterState.cullMode = CullMode.Off;\n    this.renderState.depthState.compareFunction = CompareFunction.LessEqual;\n\n    this.shaderData.setVector4(\"u_cubeDecodeParam\", this._decodeParam);\n  }\n}\n", "import { MathUtil, Vector3, Color } from \"@galacean/engine-math\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { BufferBindFlag } from \"../graphic/enums/BufferBindFlag\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { Material } from \"../material/Material\";\nimport { BlendFactor } from \"../shader/enums/BlendFactor\";\nimport { RenderQueueType } from \"../shader/enums/RenderQueueType\";\nimport { Shader, CullMode } from \"../shader\";\nimport { Texture } from \"../texture\";\nimport { MeshRenderer } from \"../mesh/MeshRenderer\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { BufferMesh } from \"../mesh/BufferMesh\";\nimport { ignoreClone } from \"../clone/CloneManager\";\n\nenum DirtyFlagType {\n  Position = 0x1,\n  Velocity = 0x2,\n  Acceleration = 0x4,\n  Color = 0x8,\n  Alpha = 0x10,\n  Size = 0x20,\n  StartAngle = 0x40,\n  StartTime = 0x80,\n  LifeTime = 0x100,\n  RotateVelocity = 0x200,\n  Scale = 0x400,\n  Everything = 0xffffffff\n}\n\n/**\n * Blend mode enums of the particle renderer's material.\n */\nexport enum ParticleRendererBlendMode {\n  Transparent = 0,\n  Additive = 1\n}\n\n/**\n * Particle Renderer Component.\n */\nexport class ParticleRenderer extends MeshRenderer {\n  /** The max number of indices that Uint16Array can support. */\n  private static _uint16VertexLimit: number = 65535;\n\n  private static _getRandom(): number {\n    return Math.random() - 0.5;\n  }\n\n  private _vertexStride: number;\n  private _vertices: Float32Array;\n  private _vertexBuffer: Buffer;\n  private _maxCount: number = 1000;\n  private _position: Vector3 = new Vector3();\n  private _positionRandomness: Vector3 = new Vector3();\n  private _positionArray: Vector3[];\n  private _velocity: Vector3 = new Vector3();\n  private _velocityRandomness: Vector3 = new Vector3();\n  private _acceleration: Vector3 = new Vector3();\n  private _accelerationRandomness: Vector3 = new Vector3();\n  private _color: Color = new Color(1, 1, 1, 1);\n  private _colorRandomness: number = 0;\n  private _size: number = 1;\n  private _sizeRandomness: number = 0;\n  private _alpha: number = 1;\n  private _alphaRandomness: number = 0;\n  private _startAngle: number = 0;\n  private _startAngleRandomness: number = 0;\n  private _rotateVelocity: number = 0;\n  private _rotateVelocityRandomness: number = 0;\n  private _lifetime: number = 5;\n  private _startTimeRandomness: number = 0;\n  private _scale: number = 1;\n  private _isOnce: boolean = false;\n  private _onceTime: number = 0;\n  private _time: number = 0;\n  private _isInit: boolean = false;\n  private _isStart: boolean = false;\n  private _updateDirtyFlag: number = DirtyFlagType.Everything;\n  private _isRotateToVelocity: boolean = false;\n  private _isUseOriginColor: boolean = false;\n  private _isScaleByLifetime: boolean = false;\n  private _is2d: boolean = true;\n  private _isFadeIn: boolean = false;\n  private _isFadeOut: boolean = false;\n  private _playOnEnable: boolean = true;\n  private _blendMode: ParticleRendererBlendMode = ParticleRendererBlendMode.Transparent;\n\n  /**\n   * Sprite sheet of texture.\n   */\n  public spriteSheet: { x: number; y: number; w: number; h: number }[];\n\n  /**\n   * Texture of particle.\n   */\n  get texture(): Texture {\n    return this.getMaterial().shaderData.getTexture(\"u_texture\");\n  }\n\n  set texture(texture: Texture) {\n    if (texture) {\n      this.shaderData.enableMacro(\"particleTexture\");\n      this.getMaterial().shaderData.setTexture(\"u_texture\", texture);\n    } else {\n      this.shaderData.disableMacro(\"particleTexture\");\n    }\n  }\n\n  /**\n   * Position of particles.\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Position;\n    this._position = value;\n  }\n\n  /**\n   * Random range of positions.\n   */\n  get positionRandomness(): Vector3 {\n    return this._positionRandomness;\n  }\n\n  set positionRandomness(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Position;\n    this._positionRandomness = value;\n  }\n\n  /**\n   * Array of fixed positions.\n   */\n  get positionArray(): Vector3[] {\n    return this._positionArray;\n  }\n\n  set positionArray(value: Vector3[]) {\n    this._updateDirtyFlag |= DirtyFlagType.Position;\n    this._positionArray = value;\n  }\n\n  /**\n   * Velocity of particles.\n   */\n  get velocity(): Vector3 {\n    return this._velocity;\n  }\n\n  set velocity(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Velocity;\n    this._velocity = value;\n  }\n\n  /**\n   * Random range of velocity.\n   */\n  get velocityRandomness(): Vector3 {\n    return this._velocityRandomness;\n  }\n\n  set velocityRandomness(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Velocity;\n    this._velocityRandomness = value;\n  }\n\n  /**\n   * Acceleration of particles.\n   */\n  get acceleration(): Vector3 {\n    return this._acceleration;\n  }\n\n  set acceleration(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Acceleration;\n    this._acceleration = value;\n  }\n\n  /**\n   * Random range of acceleration.\n   */\n  get accelerationRandomness(): Vector3 {\n    return this._accelerationRandomness;\n  }\n\n  set accelerationRandomness(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Acceleration;\n    this._accelerationRandomness = value;\n  }\n\n  /**\n   * Color of particles.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    this._color.copyFrom(value);\n  }\n\n  /**\n   * Random range of color.\n   */\n  get colorRandomness(): number {\n    return this._colorRandomness;\n  }\n\n  set colorRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Color;\n    this._colorRandomness = value;\n  }\n\n  /**\n   * Size of particles.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  set size(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Size;\n    this._size = value;\n  }\n\n  /**\n   * Random range of size.\n   */\n  get sizeRandomness(): number {\n    return this._sizeRandomness;\n  }\n\n  set sizeRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Size;\n    this._sizeRandomness = value;\n  }\n\n  /**\n   * Alpha of particles.\n   */\n  get alpha(): number {\n    return this._alpha;\n  }\n\n  set alpha(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Alpha;\n    this._alpha = value;\n  }\n\n  /**\n   * Random range of alpha.\n   */\n  get alphaRandomness(): number {\n    return this._alphaRandomness;\n  }\n\n  set alphaRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Alpha;\n    this._alphaRandomness = value;\n  }\n\n  /**\n   * Angle of particles.\n   */\n  get angle(): number {\n    return this._startAngle;\n  }\n\n  set angle(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.StartAngle;\n    this._startAngle = value;\n  }\n\n  /**\n   * Random range of angle.\n   */\n  get angleRandomness(): number {\n    return this._startAngleRandomness;\n  }\n\n  set angleRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.StartAngle;\n    this._startAngleRandomness = value;\n  }\n\n  /**\n   * Rotate velocity of particles.\n   */\n  get rotateVelocity(): number {\n    return this._rotateVelocity;\n  }\n\n  set rotateVelocity(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.RotateVelocity;\n    this._rotateVelocity = value;\n  }\n\n  /**\n   * Random range of rotate velocity.\n   */\n  get rotateVelocityRandomness(): number {\n    return this._rotateVelocityRandomness;\n  }\n\n  set rotateVelocityRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.RotateVelocity;\n    this._rotateVelocityRandomness = value;\n  }\n\n  /**\n   * Lifetime of particles.\n   */\n  get lifetime(): number {\n    return this._lifetime;\n  }\n\n  set lifetime(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.LifeTime;\n    this._lifetime = value;\n    this._onceTime = 0;\n  }\n\n  /**\n   * Random range of start time.\n   */\n  get startTimeRandomness(): number {\n    return this._startTimeRandomness;\n  }\n\n  set startTimeRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.StartTime;\n    this._startTimeRandomness = value;\n    this._onceTime = 0;\n  }\n\n  /**\n   * Scale factor of particles.\n   */\n  get scale(): number {\n    return this._scale;\n  }\n\n  set scale(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Scale;\n    this._scale = value;\n  }\n\n  /**\n   * Max count of particles.\n   */\n  get maxCount(): number {\n    return this._maxCount;\n  }\n\n  set maxCount(value: number) {\n    this._isStart = false;\n    this._isInit = false;\n    this._maxCount = value;\n    this._updateDirtyFlag = DirtyFlagType.Everything;\n    this.mesh = this._createMesh();\n\n    this._updateBuffer();\n\n    this._isInit = true;\n    this.shaderData.setFloat(\"u_time\", 0);\n  }\n\n  /**\n   * Whether play once.\n   */\n  get isOnce(): boolean {\n    return this._isOnce;\n  }\n\n  set isOnce(value: boolean) {\n    this._time = 0;\n    this.shaderData.setInt(\"u_once\", value ? 1 : 0);\n    this._isOnce = value;\n  }\n\n  /**\n   * Whether follow the direction of velocity.\n   */\n  get isRotateToVelocity(): boolean {\n    return this._isRotateToVelocity;\n  }\n\n  set isRotateToVelocity(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"rotateToVelocity\");\n    } else {\n      this.shaderData.disableMacro(\"rotateToVelocity\");\n    }\n\n    this._isRotateToVelocity = value;\n  }\n\n  /**\n   * Whether use origin color.\n   */\n  get isUseOriginColor(): boolean {\n    return this._isUseOriginColor;\n  }\n\n  set isUseOriginColor(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"useOriginColor\");\n    } else {\n      this.shaderData.disableMacro(\"useOriginColor\");\n    }\n\n    this._isUseOriginColor = value;\n  }\n\n  /**\n   * Whether scale by lifetime.\n   */\n  get isScaleByLifetime(): boolean {\n    return this._isScaleByLifetime;\n  }\n\n  set isScaleByLifetime(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"isScaleByLifetime\");\n    } else {\n      this.shaderData.disableMacro(\"isScaleByLifetime\");\n    }\n\n    this._isScaleByLifetime = value;\n  }\n\n  /**\n   * Whether 2D rendering.\n   */\n  get is2d(): boolean {\n    return this._is2d;\n  }\n\n  set is2d(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"is2d\");\n    } else {\n      this.shaderData.disableMacro(\"is2d\");\n      this.getMaterial().renderState.rasterState.cullMode = CullMode.Off;\n    }\n\n    this._is2d = value;\n  }\n\n  /**\n   * Whether fade in.\n   */\n  get isFadeIn(): boolean {\n    return this._isFadeIn;\n  }\n\n  set isFadeIn(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"fadeIn\");\n    } else {\n      this.shaderData.disableMacro(\"fadeIn\");\n    }\n\n    this._isFadeIn = value;\n  }\n\n  /**\n   * Whether fade out.\n   */\n  get isFadeOut(): boolean {\n    return this._isFadeOut;\n  }\n\n  set isFadeOut(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"fadeOut\");\n    } else {\n      this.shaderData.disableMacro(\"fadeOut\");\n    }\n\n    this._isFadeOut = value;\n  }\n\n  /**\n   * Whether play on enable.\n   */\n  get playOnEnable(): boolean {\n    return this._playOnEnable;\n  }\n\n  set playOnEnable(value: boolean) {\n    this._playOnEnable = value;\n\n    if (value) {\n      this.start();\n    } else {\n      this.stop();\n    }\n  }\n\n  /**\n   * Blend mode of the particle renderer's material.\n   */\n  get blendMode(): ParticleRendererBlendMode {\n    return this._blendMode;\n  }\n\n  set blendMode(value: ParticleRendererBlendMode) {\n    const blendState = this.getMaterial().renderState.blendState;\n    const target = blendState.targetBlendState;\n\n    if (value === ParticleRendererBlendMode.Transparent) {\n      target.enabled = true;\n      target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n      target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n      target.sourceAlphaBlendFactor = BlendFactor.One;\n      target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    } else if (value === ParticleRendererBlendMode.Additive) {\n      target.enabled = true;\n      target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n      target.destinationColorBlendFactor = BlendFactor.One;\n      target.sourceAlphaBlendFactor = BlendFactor.One;\n      target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    }\n\n    this._blendMode = value;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this._onColorChanged = this._onColorChanged.bind(this);\n    //@ts-ignore\n    this._color._onValueChanged = this._onColorChanged;\n\n    this.setMaterial(this._createMaterial());\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  update(deltaTime: number): void {\n    if (!this._isInit || !this._isStart) {\n      return;\n    }\n\n    // Stop after play once\n    if (this._isOnce && this._time > this._onceTime) {\n      return this.stop();\n    }\n\n    if (this._updateDirtyFlag) {\n      this._updateBuffer();\n      this._updateDirtyFlag = 0;\n    }\n\n    this._time += deltaTime / 1000;\n    this.shaderData.setFloat(\"u_time\", this._time);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onEnable(): void {\n    super._onEnable();\n\n    if (this._playOnEnable) {\n      this.start();\n    }\n  }\n\n  /**\n   * Start emitting.\n   */\n  start(): void {\n    this._isStart = true;\n    this._time = 0;\n  }\n\n  /**\n   * Stop emitting.\n   */\n  stop(): void {\n    this._isStart = false;\n  }\n\n  private _createMaterial(): Material {\n    const material = new Material(this.engine, Shader.find(\"particle-shader\"));\n    const { renderState } = material;\n    const target = renderState.blendState.targetBlendState;\n\n    target.enabled = true;\n    target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n    target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    target.sourceAlphaBlendFactor = BlendFactor.One;\n    target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n\n    renderState.depthState.writeEnabled = false;\n\n    material.renderState.renderQueueType = RenderQueueType.Transparent;\n\n    this.isUseOriginColor = true;\n    this.is2d = true;\n    this.isFadeOut = true;\n\n    return material;\n  }\n\n  private _createMesh(): BufferMesh {\n    const mesh = new BufferMesh(this._entity.engine, \"particleMesh\");\n    const vertexStride = 96;\n    const vertexCount = this._maxCount * 4;\n    const vertexFloatCount = vertexCount * vertexStride;\n    const vertices = new Float32Array(vertexFloatCount);\n    let indices: Uint16Array | Uint32Array = null;\n    let useUint32: boolean = false;\n    if (vertexCount > ParticleRenderer._uint16VertexLimit) {\n      if (this.engine._hardwareRenderer.canIUse(GLCapabilityType.elementIndexUint)) {\n        useUint32 = true;\n        indices = new Uint32Array(6 * this._maxCount);\n      } else {\n        throw Error(\"The vertex count is over limit.\");\n      }\n    } else {\n      indices = new Uint16Array(6 * this._maxCount);\n    }\n\n    for (let i = 0, idx = 0; i < this._maxCount; ++i) {\n      let startIndex = i * 4;\n      indices[idx++] = startIndex;\n      indices[idx++] = startIndex + 1;\n      indices[idx++] = startIndex + 2;\n      indices[idx++] = startIndex;\n      indices[idx++] = startIndex + 2;\n      indices[idx++] = startIndex + 3;\n    }\n\n    const vertexElements = [\n      new VertexElement(\"a_position\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_velocity\", 12, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_acceleration\", 24, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_color\", 36, VertexElementFormat.Vector4, 0),\n      new VertexElement(\"a_lifeAndSize\", 52, VertexElementFormat.Vector4, 0),\n      new VertexElement(\"a_rotation\", 68, VertexElementFormat.Vector2, 0),\n      new VertexElement(\"a_uv\", 76, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_normalizedUv\", 88, VertexElementFormat.Vector2, 0)\n    ];\n\n    const vertexBuffer = new Buffer(\n      this.engine,\n      BufferBindFlag.VertexBuffer,\n      vertexFloatCount * 4,\n      BufferUsage.Dynamic\n    );\n\n    const indexBuffer = new Buffer(this.engine, BufferBindFlag.IndexBuffer, indices, BufferUsage.Dynamic);\n\n    mesh.setVertexBufferBinding(vertexBuffer, vertexStride);\n    mesh.setIndexBufferBinding(indexBuffer, useUint32 ? IndexFormat.UInt32 : IndexFormat.UInt16);\n    mesh.setVertexElements(vertexElements);\n    mesh.addSubMesh(0, indices.length);\n\n    this._vertexBuffer = vertexBuffer;\n    this._vertexStride = vertexStride / 4;\n    this._vertices = vertices;\n\n    const { bounds } = mesh;\n    const minValue = Number.MIN_SAFE_INTEGER;\n    const maxValue = Number.MAX_SAFE_INTEGER;\n    bounds.min.set(minValue, minValue, minValue);\n    bounds.max.set(maxValue, maxValue, maxValue);\n\n    return mesh;\n  }\n\n  private _updateBuffer(): void {\n    for (let x = 0; x < this._maxCount; x++) {\n      this._updateSingleBuffer(x);\n    }\n\n    this._vertexBuffer.setData(this._vertices);\n  }\n\n  private _updateSingleBuffer(i: number): void {\n    const { _updateDirtyFlag, _vertices: vertices, _vertexStride: vertexStride } = this;\n    const { _getRandom: getRandom } = ParticleRenderer;\n    const offset = i * 4;\n\n    const k0 = offset * vertexStride;\n    const k1 = (offset + 1) * vertexStride;\n    const k2 = (offset + 2) * vertexStride;\n    const k3 = (offset + 3) * vertexStride;\n\n    if (_updateDirtyFlag & DirtyFlagType.Position) {\n      let { x, y, z } = this._position;\n      const { _positionArray, _positionRandomness } = this;\n\n      if (_positionArray) {\n        if (_positionArray.length !== this._maxCount) {\n          throw Error(\"The length of positionArray must be equal to maxCount.\");\n        }\n        const pos = _positionArray[i];\n\n        x += pos.x;\n        y += pos.y;\n        z += pos.z;\n      } else {\n        x += getRandom() * _positionRandomness.x;\n        y += getRandom() * _positionRandomness.y;\n        z += getRandom() * _positionRandomness.z;\n      }\n\n      vertices[k0] = vertices[k1] = vertices[k2] = vertices[k3] = x;\n      vertices[k0 + 1] = vertices[k1 + 1] = vertices[k2 + 1] = vertices[k3 + 1] = y;\n      vertices[k0 + 2] = vertices[k1 + 2] = vertices[k2 + 2] = vertices[k3 + 2] = z;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Velocity) {\n      const { _velocity, _velocityRandomness } = this;\n\n      vertices[k0 + 3] =\n        vertices[k1 + 3] =\n        vertices[k2 + 3] =\n        vertices[k3 + 3] =\n          _velocity.x + getRandom() * _velocityRandomness.x;\n      vertices[k0 + 4] =\n        vertices[k1 + 4] =\n        vertices[k2 + 4] =\n        vertices[k3 + 4] =\n          _velocity.y + getRandom() * _velocityRandomness.y;\n      vertices[k0 + 5] =\n        vertices[k1 + 5] =\n        vertices[k2 + 5] =\n        vertices[k3 + 5] =\n          _velocity.z + getRandom() * _velocityRandomness.z;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Acceleration) {\n      const { _acceleration, _accelerationRandomness } = this;\n\n      vertices[k0 + 6] =\n        vertices[k1 + 6] =\n        vertices[k2 + 6] =\n        vertices[k3 + 6] =\n          _acceleration.x + getRandom() * _accelerationRandomness.x;\n      vertices[k0 + 7] =\n        vertices[k1 + 7] =\n        vertices[k2 + 7] =\n        vertices[k3 + 7] =\n          _acceleration.y + getRandom() * _accelerationRandomness.y;\n      vertices[k0 + 8] =\n        vertices[k1 + 8] =\n        vertices[k2 + 8] =\n        vertices[k3 + 8] =\n          _acceleration.z + getRandom() * _accelerationRandomness.z;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Color) {\n      const { _color, _colorRandomness } = this;\n\n      vertices[k0 + 9] =\n        vertices[k1 + 9] =\n        vertices[k2 + 9] =\n        vertices[k3 + 9] =\n          MathUtil.clamp(_color.r + getRandom() * _colorRandomness, 0, 1);\n\n      vertices[k0 + 10] =\n        vertices[k1 + 10] =\n        vertices[k2 + 10] =\n        vertices[k3 + 10] =\n          MathUtil.clamp(_color.g + getRandom() * _colorRandomness, 0, 1);\n      vertices[k0 + 11] =\n        vertices[k1 + 11] =\n        vertices[k2 + 11] =\n        vertices[k3 + 11] =\n          MathUtil.clamp(_color.b + getRandom() * _colorRandomness, 0, 1);\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Alpha) {\n      vertices[k0 + 12] =\n        vertices[k1 + 12] =\n        vertices[k2 + 12] =\n        vertices[k3 + 12] =\n          MathUtil.clamp(this._alpha + getRandom() * this._alphaRandomness, 0, 1);\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.StartTime) {\n      vertices[k0 + 13] =\n        vertices[k1 + 13] =\n        vertices[k2 + 13] =\n        vertices[k3 + 13] =\n          Math.random() * this._startTimeRandomness;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.LifeTime) {\n      const { _lifetime } = this;\n\n      vertices[k0 + 14] =\n        vertices[k1 + 14] =\n        vertices[k2 + 14] =\n        vertices[k3 + 14] =\n          _lifetime + getRandom() * _lifetime;\n    }\n\n    // Update the duration of play once when startTime or lifetime changes.\n    if (_updateDirtyFlag & DirtyFlagType.StartTime || _updateDirtyFlag & DirtyFlagType.LifeTime) {\n      this._onceTime = Math.max(this._onceTime, vertices[k0 + 13] + vertices[k0 + 14]);\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Size) {\n      const { _size } = this;\n\n      vertices[k0 + 15] =\n        vertices[k1 + 15] =\n        vertices[k2 + 15] =\n        vertices[k3 + 15] =\n          Math.max(_size + getRandom() * this._sizeRandomness * _size * 2, 0);\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Scale) {\n      vertices[k0 + 16] = vertices[k1 + 16] = vertices[k2 + 16] = vertices[k3 + 16] = this._scale;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.StartAngle) {\n      vertices[k0 + 17] =\n        vertices[k1 + 17] =\n        vertices[k2 + 17] =\n        vertices[k3 + 17] =\n          this._startAngle + getRandom() * Math.PI * this._startAngleRandomness * 2;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.RotateVelocity) {\n      vertices[k0 + 18] =\n        vertices[k1 + 18] =\n        vertices[k2 + 18] =\n        vertices[k3 + 18] =\n          this._rotateVelocity + getRandom() * this._rotateVelocityRandomness;\n    }\n\n    this._updateSingleUv(i, k0, k1, k2, k3);\n  }\n\n  private _updateSingleUv(i: number, k0: number, k1: number, k2: number, k3: number): void {\n    const { spriteSheet } = this;\n    const texture = this.getMaterial().shaderData.getTexture(\"u_texture\");\n    const vertices = this._vertices;\n\n    if (texture) {\n      const width = texture.width;\n      const height = texture.height;\n\n      if (spriteSheet) {\n        const { x, y, w, h } = spriteSheet[i % spriteSheet.length];\n\n        const u = x / width;\n        const v = y / height;\n        const p = u + w / width;\n        const q = v + h / height;\n        const ratio = h / w;\n\n        // left bottom\n        vertices[k0 + 19] = u;\n        vertices[k0 + 20] = q;\n        vertices[k0 + 21] = ratio;\n\n        // right bottom\n        vertices[k1 + 19] = p;\n        vertices[k1 + 20] = q;\n        vertices[k1 + 21] = ratio;\n\n        // right top\n        vertices[k2 + 19] = p;\n        vertices[k2 + 20] = v;\n        vertices[k2 + 21] = ratio;\n\n        // left top\n        vertices[k3 + 19] = u;\n        vertices[k3 + 20] = v;\n        vertices[k3 + 21] = ratio;\n      } else {\n        const ratio = height / width;\n\n        // left bottom\n        vertices[k0 + 19] = 0;\n        vertices[k0 + 20] = 1;\n        vertices[k0 + 21] = ratio;\n\n        // right bottom\n        vertices[k1 + 19] = 1;\n        vertices[k1 + 20] = 1;\n        vertices[k1 + 21] = ratio;\n\n        // right top\n        vertices[k2 + 19] = 1;\n        vertices[k2 + 20] = 0;\n        vertices[k2 + 21] = ratio;\n\n        // left top\n        vertices[k3 + 19] = 0;\n        vertices[k3 + 20] = 0;\n        vertices[k3 + 21] = ratio;\n      }\n    } else {\n      // left bottom\n      vertices[k0 + 19] = 0;\n      vertices[k0 + 20] = 0;\n      vertices[k0 + 21] = 1;\n\n      // right bottom\n      vertices[k1 + 19] = 1;\n      vertices[k1 + 20] = 0;\n      vertices[k1 + 21] = 1;\n\n      // right top\n      vertices[k2 + 19] = 1;\n      vertices[k2 + 20] = 1;\n      vertices[k2 + 21] = 1;\n\n      // left top\n      vertices[k3 + 19] = 0;\n      vertices[k3 + 20] = 1;\n      vertices[k3 + 21] = 1;\n    }\n\n    vertices[k0 + 22] = -0.5;\n    vertices[k0 + 23] = -0.5;\n    vertices[k1 + 22] = 0.5;\n    vertices[k1 + 23] = -0.5;\n    vertices[k2 + 22] = 0.5;\n    vertices[k2 + 23] = 0.5;\n    vertices[k3 + 22] = -0.5;\n    vertices[k3 + 23] = 0.5;\n  }\n\n  @ignoreClone\n  private _onColorChanged(): void {\n    this._updateDirtyFlag |= DirtyFlagType.Color;\n  }\n}\n", "import { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { BlendFactor, Shader } from \"../shader\";\nimport FRAG_SHADER from \"./trail.fs.glsl\";\nimport VERT_SHADER from \"./trail.vs.glsl\";\n\nShader.create(\"trail\", VERT_SHADER, FRAG_SHADER);\n\nexport class TrailMaterial extends Material {\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"trail\"));\n\n    const target = this.renderState.blendState.targetBlendState;\n    target.enabled = true;\n    target.sourceColorBlendFactor = target.sourceAlphaBlendFactor = BlendFactor.SourceAlpha;\n    target.destinationColorBlendFactor = target.destinationAlphaBlendFactor = BlendFactor.One;\n\n    this.renderState.depthState.writeEnabled = false;\n  }\n}\n", "import { Matrix, Quaternion, Vector3 } from \"@galacean/engine-math\";\nimport { Entity } from \"../Entity\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { MeshTopology } from \"../graphic/enums/MeshTopology\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { BufferMesh } from \"../mesh/BufferMesh\";\nimport { MeshRenderer } from \"../mesh/MeshRenderer\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { Texture2D } from \"../texture\";\nimport { TrailMaterial } from \"./TrailMaterial\";\n\nconst _tempVector3 = new Vector3();\n\n/**\n * @deprecated\n */\nexport class TrailRenderer extends MeshRenderer {\n  private _vertexStride: number;\n  private _vertices: Float32Array;\n  private _vertexBuffer: Buffer;\n  private _stroke;\n  private _minSeg;\n  private _lifetime;\n  private _maxPointNum;\n  private _points: Array<Vector3>;\n  private _pointStates: Array<number>;\n  private _strapPoints: Array<Vector3>;\n  private _curPointNum;\n  private _prePointsNum;\n  /**\n   * @deprecated\n   */\n  constructor(entity: Entity, props: any) {\n    super(entity);\n\n    this._stroke = props.stroke || 0.2;\n    this._minSeg = props.minSeg || 0.02;\n    this._lifetime = props.lifetime || 1000;\n    this._maxPointNum = (this._lifetime / 1000.0) * entity.engine.targetFrameRate;\n\n    this._points = [];\n    this._pointStates = [];\n    this._strapPoints = [];\n    for (let i = 0; i < this._maxPointNum; i++) {\n      this._points.push(new Vector3());\n      this._pointStates.push(this._lifetime);\n\n      this._strapPoints.push(new Vector3());\n      this._strapPoints.push(new Vector3());\n    }\n    this._curPointNum = 0;\n\n    const mtl = props.material || new TrailMaterial(this.engine);\n    this.setMaterial(mtl);\n\n    this.setTexture(props.texture);\n    this._initGeometry();\n  }\n\n  /**\n   * @internal\n   */\n  update(deltaTime: number) {\n    let mov = 0,\n      newIdx = 0;\n    for (let i = 0; i < this._curPointNum; i++) {\n      this._pointStates[i] -= deltaTime;\n      if (this._pointStates[i] < 0) {\n        mov++;\n      } else if (mov > 0) {\n        newIdx = i - mov;\n\n        // Move data\n        this._pointStates[newIdx] = this._pointStates[i];\n\n        // Move point\n        this._points[newIdx].copyFrom(this._points[i]);\n      }\n    }\n    this._curPointNum -= mov;\n\n    let appendNewPoint = true;\n    if (this._curPointNum === this._maxPointNum) {\n      appendNewPoint = false;\n    } else if (this._curPointNum > 0) {\n      const lastPoint = this._points[this._points.length - 1];\n      if (Vector3.distance(this.entity.transform.worldPosition, lastPoint) < this._minSeg) {\n        appendNewPoint = false;\n      } else {\n        // debugger\n      }\n    }\n\n    if (appendNewPoint) {\n      this._pointStates[this._curPointNum] = this._lifetime;\n      this._points[this._curPointNum].copyFrom(this.entity.transform.worldPosition);\n\n      this._curPointNum++;\n    }\n  }\n\n  /**\n   * @deprecated\n   * Set trail texture.\n   * @param texture\n   */\n  setTexture(texture: Texture2D) {\n    if (texture) {\n      this.getMaterial().shaderData.setTexture(\"u_texture\", texture);\n    }\n  }\n\n  /**\n   * @override\n   */\n  protected _render(context: RenderContext): void {\n    this._updateStrapVertices(context.camera, this._points);\n    this._updateStrapCoords();\n    this._vertexBuffer.setData(this._vertices);\n\n    super._render(context);\n  }\n\n  private _initGeometry() {\n    const mesh = new BufferMesh(this._entity.engine);\n\n    const vertexStride = 20;\n    const vertexCount = this._maxPointNum * 2;\n    const vertexFloatCount = vertexCount * vertexStride;\n    const vertices = new Float32Array(vertexFloatCount);\n    const vertexElements = [\n      new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0)\n    ];\n    const vertexBuffer = new Buffer(this.engine, vertexFloatCount * 4, BufferUsage.Dynamic);\n\n    mesh.setVertexBufferBinding(vertexBuffer, vertexStride);\n    mesh.setVertexElements(vertexElements);\n    mesh.addSubMesh(0, vertexCount, MeshTopology.TriangleStrip);\n\n    this._vertexBuffer = vertexBuffer;\n    this._vertexStride = vertexStride;\n    this._vertices = vertices;\n    this.mesh = mesh;\n  }\n\n  private _updateStrapVertices(camera, points: Array<Vector3>) {\n    const m: Matrix = camera.viewMatrix;\n    const e = m.elements;\n    const vx = new Vector3(e[0], e[4], e[8]);\n    const vy = new Vector3(e[1], e[5], e[9]);\n    const vz = new Vector3(e[2], e[6], e[10]);\n    const s = this._stroke;\n\n    vy.scale(s);\n\n    const up = new Vector3();\n    const down = new Vector3();\n\n    const rotation = new Quaternion();\n\n    Vector3.transformByQuat(vx, rotation, vx);\n    Vector3.transformByQuat(vy, rotation, vy);\n\n    const dy = new Vector3();\n    const cross = new Vector3();\n    const perpVector = new Vector3();\n\n    vx.normalize();\n\n    const vertices = this._vertices;\n    //-- quad pos\n    for (let i = 0; i < this._maxPointNum; i++) {\n      //-- center pos\n      if (i < this._curPointNum) {\n        const p = points[i];\n\n        if (i === this._curPointNum - 1 && i !== 0) {\n          Vector3.subtract(p, points[i - 1], perpVector);\n        } else {\n          Vector3.subtract(points[i + 1], p, perpVector);\n        }\n\n        this._projectOnPlane(perpVector, vz, perpVector);\n        perpVector.normalize();\n\n        // Calculate angle between vectors\n        let angle = Math.acos(Vector3.dot(vx, perpVector));\n        Vector3.cross(vx, perpVector, cross);\n        if (Vector3.dot(cross, vz) <= 0) {\n          angle = Math.PI * 2 - angle;\n        }\n        Quaternion.rotationAxisAngle(vz, angle, rotation);\n        Vector3.transformByQuat(vy, rotation, dy);\n\n        Vector3.add(p, dy, up);\n        Vector3.subtract(p, dy, down);\n      }\n\n      const p0 = (i * 2 * this._vertexStride) / 4;\n      const p1 = ((i * 2 + 1) * this._vertexStride) / 4;\n      vertices[p0] = up.x;\n      vertices[p0 + 1] = up.y;\n      vertices[p0 + 2] = up.z;\n\n      vertices[p1] = down.x;\n      vertices[p1 + 1] = down.y;\n      vertices[p1 + 2] = down.z;\n    }\n  }\n\n  private _updateStrapCoords() {\n    if (this._prePointsNum === this._curPointNum) {\n      return;\n    }\n\n    this._prePointsNum = this._curPointNum;\n\n    const count = this._curPointNum;\n    const texDelta = 1.0 / count;\n    const vertices = this._vertices;\n    for (let i = 0; i < count; i++) {\n      const d = 1.0 - i * texDelta;\n      const p0 = (i * 2 * this._vertexStride) / 4;\n      const p1 = ((i * 2 + 1) * this._vertexStride) / 4;\n\n      vertices[p0] = 0;\n      vertices[p0 + 1] = d;\n\n      vertices[p1] = 1.0;\n      vertices[p1 + 1] = d;\n    }\n  }\n\n  private _projectOnVector(a: Vector3, p: Vector3, out: Vector3): void {\n    const n_p = p.clone();\n    Vector3.normalize(n_p, n_p);\n    const cosine = Vector3.dot(a, n_p);\n    out.x = n_p.x * cosine;\n    out.y = n_p.y * cosine;\n    out.z = n_p.z * cosine;\n  }\n\n  private _projectOnPlane(a: Vector3, n: Vector3, out: Vector3) {\n    this._projectOnVector(a, n, _tempVector3);\n    Vector3.subtract(a, _tempVector3, out);\n  }\n}\n", "import { Camera } from \"../Camera\";\nimport { Layer } from \"../Layer\";\nimport { Script } from \"../Script\";\nimport { RenderBufferDepthFormat, Texture, Texture2D, TextureCube, TextureFormat } from \"../texture\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\n\n/**\n * Environmental probes, providing necessary capabilities such as reflection and refraction.\n * @example\n * ```ts\n * const probe = cameraEntity.addComponent( CubeProbe )\n * probe.onTextureChange = cubeTexture => {\n *   envLight.specularTexture = cubeTexture;\n *   skybox.specularTexture = cubeTexture;\n * }\n * ```\n */\nexport abstract class Probe extends Script {\n  /**\n   * Probe's layer, render everything by default.\n   */\n  probeLayer: Layer = Layer.Everything;\n\n  /**\n   * The width of the probe rendering target.\n   */\n  width: number = 1024;\n\n  /**\n   * The height of the probe rendering target.\n   */\n  height: number = 1024;\n\n  /**\n   * When using WebGL2, you can turn on MSAA at the hardware layer.\n   */\n  antiAliasing: number = 1;\n\n  /**\n   * Whether the probe is rendered to the cube color texture.\n   */\n  protected readonly _isCube: boolean = false;\n\n  private _oriCameraRenderTarget: RenderTarget;\n  private _renderTarget: RenderTarget;\n  private _renderTargetSwap: RenderTarget;\n  private _activeRenderTarget: RenderTarget;\n  private _camera: Camera;\n  private _oriCameraCullingMask: Layer;\n\n  private get _texture(): Texture {\n    return this._activeRenderTarget?.getColorTexture();\n  }\n\n  /**\n   * Provide hooks for users to exchange Texture.\n   * @remarks Prevent issue: Feedback Loops Between Textures and the Framebuffer.\n   */\n  onTextureChange(renderColorTexture: Texture) {}\n\n  /**\n   * @override\n   */\n  onBeginRender(camera: Camera): void {\n    if (!this.enabled) return;\n    this._camera = camera;\n    this._oriCameraCullingMask = camera.cullingMask;\n    camera.cullingMask = this.probeLayer;\n    if (\n      !this._activeRenderTarget ||\n      this._activeRenderTarget.width !== this.width ||\n      this._activeRenderTarget.height !== this.height ||\n      this._activeRenderTarget.antiAliasing !== this.antiAliasing\n    ) {\n      this._renderTarget = new RenderTarget(\n        this.engine,\n        this.width,\n        this.height,\n        this._isCube ? new TextureCube(this.engine, this.width) : new Texture2D(this.engine, this.width, this.height),\n        RenderBufferDepthFormat.Depth,\n        this.antiAliasing\n      );\n\n      this._renderTargetSwap = new RenderTarget(\n        this.engine,\n        this.width,\n        this.height,\n        this._isCube ? new TextureCube(this.engine, this.width) : new Texture2D(this.engine, this.width, this.height),\n        RenderBufferDepthFormat.Depth,\n        this.antiAliasing\n      );\n\n      this._activeRenderTarget = this._renderTarget;\n    }\n\n    this._oriCameraRenderTarget = camera.renderTarget;\n    camera.renderTarget = this._activeRenderTarget;\n  }\n\n  /**\n   * @override\n   */\n  onEndRender(camera: Camera): void {\n    if (!this.enabled) return;\n\n    this.onTextureChange && this.onTextureChange(this._texture);\n\n    this._activeRenderTarget =\n      this._activeRenderTarget === this._renderTarget ? this._renderTargetSwap : this._renderTarget;\n  }\n\n  protected _reset(): void {\n    if (!this.enabled) return;\n    this._camera.renderTarget = this._oriCameraRenderTarget;\n    this._camera.cullingMask = this._oriCameraCullingMask;\n  }\n}\n", "import { Matrix, Vector3 } from \"@galacean/engine-math\";\nimport { Camera } from \"../Camera\";\nimport { TextureCubeFace } from \"../texture\";\nimport { Probe } from \"./Probe\";\n\nconst cacheTarget: Vector3 = new Vector3();\nconst cacheUp: Vector3 = new Vector3();\nconst cacheDir: Vector3 = new Vector3();\n\n/**\n * Cube probe, generate cubeTexture, used for dynamic environment reflection and other effects.\n */\nexport class CubeProbe extends Probe {\n  /**\n   * The position of the probe can be set, the default is the origin [0,0,0].\n   */\n  position: Vector3 = new Vector3(0, 0, 0);\n\n  /**\n   * @override\n   */\n  protected readonly _isCube: boolean = true;\n\n  private oriViewMatrix = new Matrix();\n  private _oriFieldOfView: number;\n\n  /**\n   * @override\n   */\n  onBeginRender(camera: Camera): void {\n    if (!this.enabled) return;\n    super.onBeginRender(camera);\n    this._storeCamera(camera);\n\n    // Render 6 faces\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n      // Change camera parameters\n      this._setCamera(faceIndex, camera);\n      camera.render(TextureCubeFace.PositiveX + faceIndex);\n    }\n\n    this._restoreCamera(camera);\n    super._reset();\n  }\n\n  /**\n   * Store original camera parameters.\n   */\n  private _storeCamera(camera: Camera) {\n    this.oriViewMatrix.copyFrom(camera.viewMatrix);\n    this._oriFieldOfView = camera.fieldOfView;\n  }\n\n  /**\n   * Restore camera parameters.\n   */\n  private _restoreCamera(camera: Camera) {\n    camera.viewMatrix.copyFrom(this.oriViewMatrix);\n    camera.fieldOfView = this._oriFieldOfView;\n  }\n\n  /**\n   * Set camera parameters according to the rendering surface.\n   */\n  private _setCamera(faceIndex: number, camera: Camera) {\n    switch (faceIndex) {\n      // positive_x\n      case 0:\n        cacheUp.set(0, -1, 0);\n        cacheDir.set(1, 0, 0);\n        break;\n      // negative_x\n      case 1:\n        cacheUp.set(0, -1, 0);\n        cacheDir.set(-1, 0, 0);\n        break;\n      // positive_y\n      case 2:\n        cacheUp.set(0, 0, 1);\n        cacheDir.set(0, 1, 0);\n        break;\n      // negative_y\n      case 3:\n        cacheUp.set(0, 0, -1);\n        cacheDir.set(0, -1, 0);\n        break;\n      // positive_z\n      case 4:\n        cacheUp.set(0, -1, 0);\n        cacheDir.set(0, 0, 1);\n        break;\n      // negative_z\n      case 5:\n        cacheUp.set(0, -1, 0);\n        cacheDir.set(0, 0, -1);\n        break;\n    }\n\n    Vector3.add(this.position, cacheDir, cacheTarget);\n    Matrix.lookAt(this.position, cacheTarget, cacheUp, camera.viewMatrix);\n    camera.fieldOfView = 90;\n  }\n}\n", "function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n", "import { Logger } from \"@galacean/engine-core\";\n\nexport class DRACOWorker {\n  // Worker instance.\n  private _worker: Worker;\n  // Record byteLength of each task.\n  private _costs: { [taskId: number]: number } = {};\n  // The sum of bytelength that the worker is currently dealing with, in order to sort the workers.\n  private _currentLoad: number = 0;\n  private _callbacks: { [taskId: number]: IResolveReject } = {};\n  get currentLoad(): number {\n    return this._currentLoad;\n  }\n\n  constructor(workerSourceURL: string, decoderWASMBinary?: ArrayBuffer) {\n    this._worker = new Worker(workerSourceURL);\n    this._worker.onmessage = (e) => {\n      const message = e.data;\n      switch (message.type) {\n        case \"decode\":\n          this._callbacks[message.id].resolve(message.geometry);\n          break;\n\n        case \"error\":\n          this._callbacks[message.id].reject(message);\n          break;\n        default:\n          Logger.error('DRACOWorker: Unexpected message, \"' + message.type + '\"');\n      }\n    };\n    if (decoderWASMBinary) {\n      this._worker.postMessage({ type: \"init\", decoderConfig: { wasmBinary: decoderWASMBinary } });\n    } else {\n      this._worker.postMessage({ type: \"init\", decoderConfig: {} });\n    }\n  }\n\n  setCosts(taskId: number, cost: number) {\n    this._costs[taskId] = cost;\n  }\n\n  addCurrentLoad(cost: number) {\n    this._currentLoad += cost;\n  }\n\n  setCallback(taskId: number, resolve: (any) => void, reject: (any) => void) {\n    this._callbacks[taskId] = { resolve, reject };\n  }\n\n  decode(taskId: number, taskConfig: ITaskConfig, buffer: ArrayBuffer) {\n    this._worker.postMessage({ type: \"decode\", id: taskId, taskConfig, buffer }, [buffer]);\n  }\n\n  releaseTask(taskId: number) {\n    this._currentLoad -= this._costs[taskId];\n    delete this._callbacks[taskId];\n    delete this._costs[taskId];\n  }\n}\n\ninterface IResolveReject {\n  resolve: (any) => void;\n  reject: (any) => void;\n}\n\nexport interface ITaskConfig {\n  attributeIDs: { [attribute: string]: number };\n  attributeTypes: { [attribute: string]: string };\n  useUniqueIDs: boolean;\n  indexType: string;\n}\n", "export default `let decoderPending;\nlet decoderConfig;\n\nonmessage = function(e) {\n  const message = e.data;\n\n  switch (message.type) {\n    case \"init\":\n      decoderConfig = message.decoderConfig;\n      decoderPending = new Promise(function(resolve /*, reject*/) {\n        decoderConfig.onModuleLoaded = function(draco) {\n          // Module is Promise-like. Wrap before resolving to avoid loop.\n          resolve({ draco: draco });\n        };\n        DracoDecoderModule(decoderConfig);\n      });\n      break;\n\n    case \"decode\":\n      const buffer = message.buffer;\n      const taskConfig = message.taskConfig;\n      decoderPending.then(module => {\n        const draco = module.draco;\n        const decoder = new draco.Decoder();\n        const decoderBuffer = new draco.DecoderBuffer();\n        decoderBuffer.Init(new Int8Array(buffer), buffer.byteLength);\n        try {\n          const geometry = decodeGeometry(draco, decoder, decoderBuffer, taskConfig);\n          const buffers = geometry.attributes.map(attr => attr.array.buffer);\n          if (geometry.index) buffers.push(geometry.index.array.buffer);\n          self.postMessage({ type: \"decode\", id: message.id, geometry }, buffers);\n        } catch (error) {\n          console.error(error);\n          self.postMessage({ type: \"error\", id: message.id, error: error.message });\n        } finally {\n          draco.destroy(decoderBuffer);\n          draco.destroy(decoder);\n        }\n      });\n      break;\n  }\n};\n\nfunction decodeGeometry(draco, decoder, decoderBuffer, taskConfig) {\n  const attributeIDs = taskConfig.attributeIDs;\n  const attributeTypes = taskConfig.attributeTypes;\n\n  let dracoGeometry;\n  let decodingStatus;\n\n  const geometryType = decoder.GetEncodedGeometryType(decoderBuffer);\n  if (geometryType === draco.TRIANGULAR_MESH) {\n    dracoGeometry = new draco.Mesh();\n    decodingStatus = decoder.DecodeBufferToMesh(decoderBuffer, dracoGeometry);\n  } else {\n    throw new Error(\"DRACODecoder worker: Unexpected geometry type.\");\n  }\n\n  if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {\n    throw new Error(\"DRACODecoder worker: Decoding failed: \" + decodingStatus.error_msg());\n  }\n\n  const geometry = { index: null, attributes: [] };\n\n  // Gather all vertex attributes.\n  for (let attributeName in attributeIDs) {\n    const attributeType = self[attributeTypes[attributeName]];\n\n    let attribute;\n    let attributeID;\n\n    // A Draco file may be created with default vertex attributes, whose attribute IDs\n    // are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n    // a Draco file may contain a custom set of attributes, identified by known unique\n    // IDs. glTF files always do the latter, and .drc files typically do the former.\n    if (taskConfig.useUniqueIDs) {\n      attributeID = attributeIDs[attributeName];\n      attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeID);\n    } else {\n      attributeID = decoder.GetAttributeId(dracoGeometry, draco[attributeIDs[attributeName]]);\n      if (attributeID === -1) continue;\n      attribute = decoder.GetAttribute(dracoGeometry, attributeID);\n    }\n    geometry.attributes.push(decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute));\n  }\n  // Add index.\n  if (geometryType === draco.TRIANGULAR_MESH) {\n    // Generate mesh faces.\n    const numFaces = dracoGeometry.num_faces();\n    const numIndices = numFaces * 3;\n    let dataSize;\n    let ptr;\n    let index;\n    const indexType = self[taskConfig.indexType];\n\n    switch (indexType) {\n      case Uint16Array:\n        dataSize = numIndices * 2;\n        ptr = draco._malloc(dataSize);\n        decoder.GetTrianglesUInt16Array(dracoGeometry, dataSize, ptr);\n        index = new Uint16Array(draco.HEAPU16.buffer, ptr, numIndices).slice();\n        draco._free(ptr);\n        break;\n      case Uint32Array:\n        dataSize = numIndices * 4;\n        ptr = draco._malloc(dataSize);\n        decoder.GetTrianglesUInt32Array(dracoGeometry, dataSize, ptr);\n        index = new Uint32Array(draco.HEAPU32.buffer, ptr, numIndices).slice();\n        draco._free(ptr);\n        break;\n      default:\n        throw new Error(\"DRACODecoder: Unexpected index type.\");\n    }\n    geometry.index = { array: index, itemSize: 1 };\n  }\n  draco.destroy(dracoGeometry);\n  return geometry;\n}\n\nfunction decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {\n  const numComponents = attribute.num_components();\n  const numPoints = dracoGeometry.num_points();\n  const numValues = numPoints * numComponents;\n  let ptr;\n  let array;\n  let dataSize;\n  switch (attributeType) {\n    case Float32Array:\n      dataSize = numValues * 4;\n      ptr = draco._malloc(dataSize);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_FLOAT32, dataSize, ptr);\n      array = new Float32Array(draco.HEAPF32.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Int8Array:\n      ptr = draco._malloc(numValues);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_INT8, numValues, ptr);\n      array = new Int8Array(draco.HEAP8.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Int16Array:\n      dataSize = numValues * 2;\n      ptr = draco._malloc(dataSize);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_INT16, dataSize, ptr);\n      array = new Int16Array(draco.HEAP16.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Int32Array:\n      dataSize = numValues * 4;\n      ptr = draco._malloc(dataSize);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_INT32, dataSize, ptr);\n      array = new Int32Array(draco.HEAP32.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Uint8Array:\n      ptr = draco._malloc(numValues);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_UINT8, numValues, ptr);\n      array = new Uint8Array(draco.HEAPU8.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Uint16Array:\n      dataSize = numValues * 2;\n      ptr = draco._malloc(dataSize);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_UINT16, dataSize, ptr);\n      array = new Uint16Array(draco.HEAPU16.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    case Uint32Array:\n      dataSize = numValues * 4;\n      ptr = draco._malloc(dataSize);\n      decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, draco.DT_UINT32, dataSize, ptr);\n      array = new Uint32Array(draco.HEAPU32.buffer, ptr, numValues).slice();\n      draco._free(ptr);\n      break;\n\n    default:\n      throw new Error(\"DRACODecoder: Unexpected attribute type.\");\n  }\n\n  return {\n    name: attributeName,\n    array: array,\n    itemSize: numComponents\n  };\n}\n`;", "import { Logger, request } from \"@galacean/engine-core\";\n\nimport { DRACOWorker, ITaskConfig } from \"./DRACOWorker\";\n\nimport workerString from \"./worker/worker.js\";\n\nconst LIB_PATH = \"https://gw.alipayobjects.com/os/lib/alipay/draco-javascript/1.3.6/lib/\";\nconst JS_FILE = \"draco_decoder_gltf.js\";\n\nconst WASM_FILE = \"draco_decoder_gltf.r3bin\";\nconst WASM_WRAPPER_FILE = \"draco_wasm_wrapper_gltf.js\";\n\nexport class DRACODecoder {\n  private pool: DRACOWorker[] = [];\n  private workerLimit = Math.min(navigator.hardwareConcurrency || 4, 4);\n  private useJS: boolean;\n  private currentTaskId: number = 1;\n  private taskCache = new WeakMap();\n  private loadLibPromise: Promise<any>;\n\n  constructor(config: IDecoderConfig = { type: \"wasm\", workerLimit: 4 }) {\n    if (config.workerLimit > this.workerLimit) {\n      Logger.warn(\"DRACOWorkerPool: Can not initialize worker pool with limit:\" + config.workerLimit);\n    } else {\n      this.workerLimit = config.workerLimit ?? 4;\n    }\n    this.useJS = typeof WebAssembly !== \"object\" || config.type === \"js\";\n    this.loadLibPromise = this.preloadLib();\n  }\n\n  private preloadLib(): Promise<any> {\n    if (this.loadLibPromise) {\n      return this.loadLibPromise;\n    }\n\n    return new Promise((resolve, reject) => {\n      if (this.useJS) {\n        request(`${LIB_PATH}${JS_FILE}`, { type: \"text\" })\n          .then((jsSource) => {\n            const body = [jsSource, workerString].join(\"\\n\");\n            const workerSourceURL = URL.createObjectURL(new Blob([body]));\n            resolve({ workerSourceURL, decoderWASMBinary: null });\n          })\n          .catch((reason) => {\n            reject(reason);\n          });\n      } else {\n        Promise.all([\n          request(`${LIB_PATH}${WASM_WRAPPER_FILE}`, { type: \"text\" }),\n          request(`${LIB_PATH}${WASM_FILE}`, { type: \"arraybuffer\" })\n        ])\n          .then((resources) => {\n            const [wrapperSource, decoderWASMBinary] = resources;\n            const body = [wrapperSource, workerString].join(\"\\n\");\n            const workerSourceURL = URL.createObjectURL(new Blob([body]));\n            resolve({ workerSourceURL, decoderWASMBinary });\n          })\n          .catch((reason) => {\n            reject(reason);\n          });\n      }\n    });\n  }\n\n  private getWorker(): Promise<DRACOWorker> {\n    return this.preloadLib().then((worderResources) => {\n      if (this.pool.length < this.workerLimit) {\n        const dracoWorker = new DRACOWorker(worderResources.workerSourceURL, worderResources.decoderWASMBinary);\n        this.pool.push(dracoWorker);\n      } else {\n        this.pool.sort(function (a, b) {\n          return a.currentLoad > b.currentLoad ? -1 : 1;\n        });\n      }\n      return this.pool[this.pool.length - 1];\n    });\n  }\n\n  decode(buffer: ArrayBuffer, taskConfig: ITaskConfig): Promise<any> {\n    const taskKey = JSON.stringify(taskConfig);\n\n    // Check for an existing task using this buffer. A transferred buffer cannot be transferred.\n    // again from this thread.\n    if (this.taskCache.has(buffer)) {\n      const cachedTask = this.taskCache.get(buffer);\n      if (cachedTask.key === taskKey) {\n        return cachedTask.promise;\n      } else if (buffer.byteLength === 0) {\n        // After using transferable to transfer data, the data in the original environment will be cleared, so it is judged that byteLength is 0, which means it has been transferred.\n        // Technically, it would be possible to wait for the previous task to complete,\n        // transfer the buffer back, and decode again with the second configuration. That\n        // is complex, and I don't know of any reason to decode a Draco buffer twice in\n        // different ways, so this is left unimplemented.\n        throw new Error(\n          \"DRACODecoder: Unable to re-decode a buffer with different \" +\n            \"settings. Buffer has already been transferred.\"\n        );\n      }\n    }\n\n    const taskId = this.currentTaskId++;\n    const cost = buffer.byteLength;\n    let taskWorker;\n    const task = new Promise((resolve, reject) => {\n      this.getWorker()\n        .then((worker) => {\n          taskWorker = worker;\n          worker.setCosts(taskId, cost);\n          worker.addCurrentLoad(cost);\n\n          worker.setCallback(taskId, resolve, reject);\n          worker.decode(taskId, taskConfig, buffer);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n    task.finally(() => {\n      if (taskWorker && taskId) {\n        taskWorker.releaseTask(taskId);\n      }\n    });\n\n    this.taskCache.set(buffer, {\n      key: taskKey,\n      promise: task\n    });\n    return task;\n  }\n}\n\ninterface IDecoderConfig {\n  type?: \"js\" | \"wasm\";\n  workerLimit?: number;\n}\n", "/**\n * Smoothing plug-in.\n * */\nexport interface WebGLExtension {\n  MAX_DRAW_BUFFERS: GLenum;\n  UNSIGNED_INT_24_8: GLenum;\n  MAX_SAMPLES: GLenum;\n  RGBA8: GLenum;\n  RGBA16F: GLenum;\n  RGBA32F: GLenum;\n  DEPTH_COMPONENT32F: GLenum;\n  READ_FRAMEBUFFER: GLenum;\n  DRAW_FRAMEBUFFER: GLenum;\n\n  createVertexArray(): WebGLVertexArrayObject | null;\n  deleteVertexArray(vertexArray: WebGLVertexArrayObject | null): void;\n  isVertexArray(vertexArray: WebGLVertexArrayObject | null): GLboolean;\n  bindVertexArray(array: WebGLVertexArrayObject | null): void;\n\n  renderbufferStorageMultisample(\n    target: GLenum,\n    samples: GLsizei,\n    internalformat: GLenum,\n    width: GLsizei,\n    height: GLsizei\n  ): void;\n  blitFramebuffer(\n    srcX0: GLint,\n    srcY0: GLint,\n    srcX1: GLint,\n    srcY1: GLint,\n    dstX0: GLint,\n    dstY0: GLint,\n    dstX1: GLint,\n    dstY1: GLint,\n    mask: GLbitfield,\n    filter: GLenum\n  ): void;\n\n  drawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instanceCount: GLsizei): void;\n  drawElementsInstanced(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, instanceCount: GLsizei): void;\n  vertexAttribDivisor(index: GLuint, divisor: GLuint): void;\n  drawBuffers(buffers: Iterable<GLenum>): void;\n}\n\nexport interface TextureFormatDetail {\n  internalFormat: GLint;\n  baseFormat?: GLenum;\n  dataType?: GLenum;\n  isCompressed: boolean;\n  attachment?: GLenum;\n}\n\n/**\n * @deprecated\n */\nexport enum GLCompressedTextureInternalFormat {\n  // astc\n  RGBA_ASTC_4X4_KHR = 0x93b0,\n  RGBA_ASTC_5X4_KHR = 0x93b1,\n  RGBA_ASTC_5X5_KHR = 0x93b2,\n  RGBA_ASTC_6X5_KHR = 0x93b3,\n  RGBA_ASTC_6X6_KHR = 0x93b4,\n  RGBA_ASTC_8X5_KHR = 0x93b5,\n  RGBA_ASTC_8X6_KHR = 0x93b6,\n  RGBA_ASTC_8X8_KHR = 0x93b7,\n  RGBA_ASTC_10X5_KHR = 0x93b8,\n  RGBA_ASTC_10X6_KHR = 0x93b9,\n  RGBA_ASTC_10X8_KHR = 0x93ba,\n  RGBA_ASTC_10X10_KHR = 0x93bb,\n  RGBA_ASTC_12X10_KHR = 0x93bc,\n  RGBA_ASTC_12X12_KHR = 0x93bd,\n  SRGB8_ALPHA8_ASTC_4X4_KHR = 0x93d0,\n  SRGB8_ALPHA8_ASTC_5X4_KHR = 0x93d1,\n  SRGB8_ALPHA8_ASTC_5X5_KHR = 0x93d2,\n  SRGB8_ALPHA8_ASTC_6X5_KHR = 0x93d3,\n  SRGB8_ALPHA8_ASTC_6X6_KHR = 0x93d4,\n  SRGB8_ALPHA8_ASTC_8X5_KHR = 0x93d5,\n  SRGB8_ALPHA8_ASTC_8X6_KHR = 0x93d6,\n  SRGB8_ALPHA8_ASTC_8X8_KHR = 0x93d7,\n  SRGB8_ALPHA8_ASTC_10X5_KHR = 0x93d8,\n  SRGB8_ALPHA8_ASTC_10X6_KHR = 0x93d9,\n  SRGB8_ALPHA8_ASTC_10X8_KHR = 0x93da,\n  SRGB8_ALPHA8_ASTC_10X10_KHR = 0x93db,\n  SRGB8_ALPHA8_ASTC_12X10_KHR = 0x93dc,\n  SRGB8_ALPHA8_ASTC_12X12_KHR = 0x93dd,\n\n  // etc1\n  RGB_ETC1_WEBGL = 0x8d64,\n\n  // etc2\n  R11_EAC = 0x9270,\n  SIGNED_R11_EAC = 0x9271,\n  RG11_EAC = 0x9272,\n  SIGNED_RG11_EAC = 0x9273,\n  RGB8_ETC2 = 0x9274,\n  SRGB8_ETC2 = 0x9275,\n  RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,\n  SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,\n  RGBA8_ETC2_EAC = 0x9278,\n  SRGB8_ALPHA8_ETC2_EAC = 0x9279,\n\n  // pvrtc\n  RGB_PVRTC_4BPPV1_IMG = 0x8c00,\n  RGB_PVRTC_2BPPV1_IMG = 0x8c01,\n  RGBA_PVRTC_4BPPV1_IMG = 0x8c02,\n  RGBA_PVRTC_2BPPV1_IMG = 0x8c03,\n\n  // s3tc\n  RGB_S3TC_DXT1_EXT = 0x83f0,\n  RGBA_S3TC_DXT1_EXT = 0x83f1,\n  RGBA_S3TC_DXT3_EXT = 0x83f2,\n  RGBA_S3TC_DXT5_EXT = 0x83f3\n}\n", "function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n", "export function _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else return left instanceof right;\n}\nexport { _instanceof as _ };\n", "import { Canvas } from \"@galacean/engine-core\";\nimport { Vector2 } from \"@galacean/engine-math\";\n\ntype OffscreenCanvas = any;\n\n/**\n * The canvas used on the web, which can support HTMLCanvasElement and OffscreenCanvas.\n */\nexport class WebCanvas implements Canvas {\n  _webCanvas: HTMLCanvasElement | OffscreenCanvas;\n\n  private _width: number;\n  private _height: number;\n  private _scale: Vector2 = new Vector2();\n\n  /**\n   * @inheritdoc\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  set width(value: number) {\n    if (this._width !== value) {\n      this._webCanvas.width = value;\n      this._width = value;\n    }\n  }\n\n  /**\n   * @inheritdoc\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  set height(value: number) {\n    if (this._height !== value) {\n      this._webCanvas.height = value;\n      this._height = value;\n    }\n  }\n\n  /**\n   * The scale of canvas, the value is visible width/height divide the render width/height.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get scale(): Vector2 {\n    const webCanvas = this._webCanvas;\n    if (typeof OffscreenCanvas === \"undefined\" || !(webCanvas instanceof OffscreenCanvas)) {\n      this._scale.set(\n        (webCanvas.clientWidth * devicePixelRatio) / webCanvas.width,\n        (webCanvas.clientHeight * devicePixelRatio) / webCanvas.height\n      );\n    }\n    return this._scale;\n  }\n\n  set scale(value: Vector2) {\n    const webCanvas = this._webCanvas;\n    if (typeof OffscreenCanvas === \"undefined\" || !(webCanvas instanceof OffscreenCanvas)) {\n      webCanvas.style.transformOrigin = `left top`;\n      webCanvas.style.transform = `scale(${value.x}, ${value.y})`;\n    }\n  }\n\n  /**\n   * Resize the rendering size according to the clientWidth and clientHeight of the canvas.\n   * @param pixelRatio - Pixel ratio\n   */\n  resizeByClientSize(pixelRatio: number = window.devicePixelRatio): void {\n    const webCanvas = this._webCanvas;\n    if (typeof OffscreenCanvas === \"undefined\" || !(webCanvas instanceof OffscreenCanvas)) {\n      this.width = webCanvas.clientWidth * pixelRatio;\n      this.height = webCanvas.clientHeight * pixelRatio;\n    }\n  }\n\n  /**\n   * Create a web canvas.\n   * @param webCanvas - Web native canvas\n   */\n  constructor(webCanvas: HTMLCanvasElement | OffscreenCanvas) {\n    const width = webCanvas.width;\n    const height = webCanvas.height;\n    this._webCanvas = webCanvas;\n    this._width = width;\n    this._height = height;\n  }\n\n  /**\n   * Set scale.\n   * @param x - Scale along the X axis\n   * @param y - Scale along the Y axis\n   */\n  setScale(x: number, y: number): void {\n    this._scale.set(x, y);\n    this.scale = this._scale;\n  }\n}\n", "export function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n", "import { _set_prototype_of } from \"./_set_prototype_of.js\";\n\nexport function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n", "export function _extends() {\n    _extends = Object.assign || function assign(target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];\n            for (var key in source) if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n        }\n\n        return target;\n    };\n\n    return _extends.apply(this, arguments);\n}\nexport { _extends as _ };\n", "import { GLCapabilityType } from \"@galacean/engine-core\";\nimport { GLCompressedTextureInternalFormat } from \"./type\";\nimport { WebGLRenderer } from \"./WebGLRenderer\";\n\ntype extensionKey = string;\n\n/**\n * GL capability.\n */\nexport class GLCapability {\n  private _maxDrawBuffers: number;\n  private _maxAnisoLevel: number;\n  private _maxAntiAliasing: number;\n\n  _rhi: WebGLRenderer;\n  capabilityList: Map<GLCapabilityType, boolean>;\n\n  get maxTextureSize(): boolean {\n    return this.rhi.renderStates.getParameter(this.rhi.gl.MAX_TEXTURE_SIZE);\n  }\n\n  get canUseFloatTextureBlendShape(): boolean {\n    return (\n      this.canIUse(GLCapabilityType.shaderVertexID) &&\n      this.canIUse(GLCapabilityType.textureFloat) &&\n      this.rhi.renderStates.getParameter(this.rhi.gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS) > 0\n    );\n  }\n\n  /**\n   * Whether can use more joints.\n   */\n  get canIUseMoreJoints(): boolean {\n    return (\n      this.canIUse(GLCapabilityType.textureFloat) &&\n      this.rhi.renderStates.getParameter(this.rhi.gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS) > 0\n    );\n  }\n\n  get maxDrawBuffers() {\n    if (!this._maxDrawBuffers) {\n      if (this.canIUse(GLCapabilityType.drawBuffers)) {\n        this._maxDrawBuffers = this._rhi.gl.getParameter(this._rhi.gl.MAX_DRAW_BUFFERS);\n      } else {\n        this._maxDrawBuffers = 1;\n      }\n    }\n    return this._maxDrawBuffers;\n  }\n\n  /**\n   * Max anisoLevel.\n   */\n  get maxAnisoLevel(): number {\n    if (!this._maxAnisoLevel) {\n      const ext = this._rhi.requireExtension(GLCapabilityType.textureFilterAnisotropic);\n      this._maxAnisoLevel = ext ? this._rhi.gl.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1;\n    }\n    return this._maxAnisoLevel;\n  }\n\n  /**\n   * Max MSAA count.\n   */\n  get maxAntiAliasing(): number {\n    if (!this._maxAntiAliasing) {\n      const gl = this._rhi.gl;\n      const canMSAA = this.canIUse(GLCapabilityType.multipleSample);\n\n      this._maxAntiAliasing = canMSAA ? gl.getParameter(gl.MAX_SAMPLES) : 1;\n    }\n    return this._maxAntiAliasing;\n  }\n\n  get rhi() {\n    return this._rhi;\n  }\n\n  constructor(rhi: WebGLRenderer) {\n    this._rhi = rhi;\n    this.capabilityList = new Map();\n\n    this._init();\n    this._compatibleAllInterface();\n  }\n\n  /**\n   * Check device capabilities.\n   */\n  canIUse(capabilityType: GLCapabilityType): boolean {\n    return this.capabilityList.get(capabilityType);\n  }\n\n  /**\n   * Check if can use some compressed texture format.\n   */\n  canIUseCompressedTextureInternalFormat(internalType: GLCompressedTextureInternalFormat): boolean {\n    const {\n      // astc\n      RGBA_ASTC_4X4_KHR,\n      RGBA_ASTC_12X12_KHR,\n      SRGB8_ALPHA8_ASTC_4X4_KHR,\n      SRGB8_ALPHA8_ASTC_12X12_KHR,\n      // etc1\n      RGB_ETC1_WEBGL,\n      // etc\n      R11_EAC,\n      SRGB8_ALPHA8_ETC2_EAC,\n      // pvrtc\n      RGB_PVRTC_4BPPV1_IMG,\n      RGBA_PVRTC_2BPPV1_IMG,\n      // s3tc\n      RGB_S3TC_DXT1_EXT,\n      RGBA_S3TC_DXT5_EXT\n    } = GLCompressedTextureInternalFormat;\n    if (\n      (internalType >= RGBA_ASTC_4X4_KHR && RGBA_ASTC_12X12_KHR <= RGBA_ASTC_12X12_KHR) ||\n      (internalType >= SRGB8_ALPHA8_ASTC_4X4_KHR && internalType <= SRGB8_ALPHA8_ASTC_12X12_KHR)\n    ) {\n      return this.canIUse(GLCapabilityType.astc);\n    } else if (internalType === RGB_ETC1_WEBGL) {\n      return this.canIUse(GLCapabilityType.etc1);\n    } else if (internalType >= R11_EAC && internalType <= SRGB8_ALPHA8_ETC2_EAC) {\n      return this.canIUse(GLCapabilityType.etc);\n    } else if (internalType >= RGB_PVRTC_4BPPV1_IMG && internalType <= RGBA_PVRTC_2BPPV1_IMG) {\n      return this.canIUse(GLCapabilityType.pvrtc);\n    } else if (internalType >= RGB_S3TC_DXT1_EXT && internalType <= RGBA_S3TC_DXT5_EXT) {\n      return this.canIUse(GLCapabilityType.s3tc);\n    }\n    return false;\n  }\n\n  /**\n   *  Init capabilities.\n   */\n  private _init() {\n    const cap = this.capabilityList;\n    const { isWebGL2 } = this.rhi;\n    const requireExtension = this.rhi.requireExtension.bind(this.rhi);\n\n    const {\n      shaderVertexID,\n      standardDerivatives,\n      shaderTextureLod,\n      elementIndexUint,\n      depthTexture,\n      vertexArrayObject,\n      instancedArrays,\n      multipleSample,\n      drawBuffers,\n\n      astc,\n      astc_webkit,\n      etc,\n      etc_webkit,\n      etc1,\n      etc1_webkit,\n      pvrtc,\n      pvrtc_webkit,\n      s3tc,\n      s3tc_webkit,\n\n      textureFloat,\n      textureHalfFloat,\n      textureFloatLinear,\n      textureHalfFloatLinear,\n      WEBGL_colorBufferFloat,\n      colorBufferFloat,\n      colorBufferHalfFloat,\n      textureFilterAnisotropic\n    } = GLCapabilityType;\n    cap.set(shaderVertexID, isWebGL2);\n    cap.set(standardDerivatives, isWebGL2 || !!requireExtension(standardDerivatives));\n    cap.set(shaderTextureLod, isWebGL2 || !!requireExtension(shaderTextureLod));\n    cap.set(elementIndexUint, isWebGL2 || !!requireExtension(elementIndexUint));\n    cap.set(depthTexture, isWebGL2 || !!requireExtension(depthTexture));\n    cap.set(vertexArrayObject, isWebGL2 || !!requireExtension(vertexArrayObject));\n    cap.set(instancedArrays, isWebGL2 || !!requireExtension(instancedArrays));\n    cap.set(multipleSample, isWebGL2);\n    cap.set(drawBuffers, isWebGL2 || !!requireExtension(drawBuffers));\n    cap.set(textureFloat, isWebGL2 || !!requireExtension(textureFloat));\n    cap.set(textureHalfFloat, isWebGL2 || !!requireExtension(textureHalfFloat));\n    cap.set(textureFloatLinear, !!requireExtension(textureFloatLinear));\n    cap.set(textureHalfFloatLinear, isWebGL2 || !!requireExtension(textureHalfFloatLinear));\n    cap.set(\n      colorBufferFloat,\n      (isWebGL2 && !!requireExtension(colorBufferFloat)) || !!requireExtension(WEBGL_colorBufferFloat)\n    );\n    cap.set(\n      colorBufferHalfFloat,\n      (isWebGL2 && !!requireExtension(colorBufferFloat)) || !!requireExtension(colorBufferHalfFloat)\n    );\n    cap.set(textureFilterAnisotropic, !!requireExtension(textureFilterAnisotropic));\n\n    cap.set(astc, !!(requireExtension(astc) || requireExtension(astc_webkit)));\n    cap.set(etc, !!(requireExtension(etc) || requireExtension(etc_webkit)));\n    cap.set(etc1, !!(requireExtension(etc1) || requireExtension(etc1_webkit)));\n    cap.set(pvrtc, !!(requireExtension(pvrtc) || requireExtension(pvrtc_webkit)));\n    cap.set(s3tc, !!(requireExtension(s3tc) || requireExtension(s3tc_webkit)));\n  }\n\n  /**\n   * If there are extensions that can supplement this ability, smooth out the difference.\n   * @example\n   * compatible(GLCapabilityType.depthTexture,{\n   *    UNSIGNED_INT_24_8: \"UNSIGNED_INT_24_8_WEBGL\"\n   * })\n   * gl.UNSIGNED_INT_24_8 = ext.UNSIGNED_INT_24_8_WEBGL\n   */\n  private _compatibleInterface(capabilityType: GLCapabilityType, flatItem: { [glKey: string]: extensionKey }) {\n    const rhi = this.rhi;\n    const gl = rhi.gl;\n    let ext = null;\n\n    if ((ext = rhi.requireExtension(capabilityType))) {\n      for (let glKey in flatItem) {\n        const extensionKey = flatItem[glKey];\n        const extensionVal = ext[extensionKey];\n\n        // Mini game hack the native function,use “.bind” to smooth out if is “Funcion”.\n        if (extensionVal?.bind) {\n          gl[glKey] = extensionVal.bind(ext);\n        } else {\n          gl[glKey] = extensionVal;\n        }\n      }\n    }\n  }\n\n  private _compatibleAllInterface() {\n    const {\n      depthTexture,\n      vertexArrayObject,\n      instancedArrays,\n      drawBuffers,\n      textureFilterAnisotropic,\n      textureHalfFloat,\n      colorBufferHalfFloat,\n      WEBGL_colorBufferFloat\n    } = GLCapabilityType;\n    const { isWebGL2 } = this.rhi;\n\n    if (!isWebGL2) {\n      this._compatibleInterface(depthTexture, {\n        UNSIGNED_INT_24_8: \"UNSIGNED_INT_24_8_WEBGL\"\n      });\n      this._compatibleInterface(vertexArrayObject, {\n        createVertexArray: \"createVertexArrayOES\",\n        deleteVertexArray: \"deleteVertexArrayOES\",\n        isVertexArray: \"isVertexArrayOES\",\n        bindVertexArray: \"bindVertexArrayOES\"\n      });\n      this._compatibleInterface(instancedArrays, {\n        drawArraysInstanced: \"drawArraysInstancedANGLE\",\n        drawElementsInstanced: \"drawElementsInstancedANGLE\",\n        vertexAttribDivisor: \"vertexAttribDivisorANGLE\"\n      });\n      this._compatibleInterface(drawBuffers, {\n        MAX_DRAW_BUFFERS: \"MAX_DRAW_BUFFERS_WEBGL\"\n      });\n      const items = {};\n      if (this.canIUse(GLCapabilityType.drawBuffers)) {\n        const maxDrawBuffers = this.maxDrawBuffers;\n        for (let i = 0; i < maxDrawBuffers; i++) {\n          i != 0 && (items[`COLOR_ATTACHMENT${i}`] = `COLOR_ATTACHMENT${i}_WEBGL`);\n          items[`DRAW_BUFFER${i}`] = `DRAW_BUFFER${i}_WEBGL`;\n        }\n        this._compatibleInterface(drawBuffers, {\n          drawBuffers: \"drawBuffersWEBGL\",\n          ...items\n        });\n      }\n      this._compatibleInterface(textureHalfFloat, {\n        HALF_FLOAT: \"HALF_FLOAT_OES\"\n      });\n      this._compatibleInterface(colorBufferHalfFloat, {\n        RGBA16F: \"RBGA16F_EXT\"\n      });\n      this._compatibleInterface(WEBGL_colorBufferFloat, {\n        RGBA32F: \"RBGA32F_EXT\"\n      });\n    }\n\n    this._compatibleInterface(textureFilterAnisotropic, {\n      TEXTURE_MAX_ANISOTROPY_EXT: \"TEXTURE_MAX_ANISOTROPY_EXT\"\n    });\n  }\n}\n", "import { WebGLRenderer } from \"./WebGLRenderer\";\nimport { GLCapabilityType } from \"@galacean/engine-core\";\n\n/**\n * GLContext extension.\n */\nexport class GLExtensions {\n  private rhi: WebGLRenderer;\n  private _requireResult;\n\n  constructor(rhi: WebGLRenderer) {\n    this.rhi = rhi;\n    this._requireResult = {};\n  }\n\n  /**\n   * Require an extension.\n   */\n  requireExtension(ext: GLCapabilityType) {\n    if (this._requireResult[ext] !== undefined) {\n      return this._requireResult[ext];\n    }\n\n    this._requireResult[ext] = this.rhi.gl.getExtension(ext);\n    return this._requireResult[ext];\n  }\n}\n", "import { GLCapabilityType, Logger, Mesh, SubMesh } from \"@galacean/engine-core\";\nimport { IPlatformPrimitive } from \"@galacean/engine-design\";\nimport { WebGLExtension } from \"./type\";\nimport { WebGLRenderer } from \"./WebGLRenderer\";\n\n/**\n * Improvement of VAO:\n * 1) WebGL2.0 must support VAO, almost all devices support vao extensions in webgl1.0, we can use PollyFill,only keep VAO mode.\n */\n\n/**\n * @internal\n * GL platform primitive.\n */\nexport class GLPrimitive implements IPlatformPrimitive {\n  private _attribLocArray: number[] = [];\n  private readonly _primitive: Mesh;\n  private readonly _canUseInstancedArrays: boolean;\n\n  private _gl: (WebGLRenderingContext & WebGLExtension) | WebGL2RenderingContext;\n  private _vaoMap: Map<number, WebGLVertexArrayObject> = new Map();\n  private readonly _useVao: boolean;\n\n  constructor(rhi: WebGLRenderer, primitive: Mesh) {\n    this._primitive = primitive;\n    this._canUseInstancedArrays = rhi.canIUse(GLCapabilityType.instancedArrays);\n    this._useVao = rhi.canIUse(GLCapabilityType.vertexArrayObject);\n    this._gl = rhi.gl;\n  }\n\n  /**\n   * Draw the primitive.\n   */\n  draw(shaderProgram: any, subMesh: SubMesh): void {\n    const gl = this._gl;\n    const primitive = this._primitive;\n    // @ts-ignore\n    const useVao = this._useVao && primitive._enableVAO;\n\n    if (useVao) {\n      // @ts-ignore\n      if (primitive._bufferStructChanged) {\n        this._clearVAO();\n      }\n      if (!this._vaoMap.has(shaderProgram.id)) {\n        this._registerVAO(shaderProgram);\n      }\n      const vao = this._vaoMap.get(shaderProgram.id);\n      gl.bindVertexArray(vao);\n    } else {\n      this._bindBufferAndAttrib(shaderProgram);\n    }\n\n    // @ts-ignore\n    const { _indexBufferBinding, _instanceCount, _glIndexType, _glIndexByteCount } = primitive;\n    const { topology, start, count } = subMesh;\n\n    if (!_instanceCount) {\n      if (_indexBufferBinding) {\n        if (useVao) {\n          gl.drawElements(topology, count, _glIndexType, start * _glIndexByteCount);\n        } else {\n          const { _nativeBuffer } = _indexBufferBinding.buffer;\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _nativeBuffer);\n          gl.drawElements(topology, count, _glIndexType, start * _glIndexByteCount);\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        }\n      } else {\n        gl.drawArrays(topology, start, count);\n      }\n    } else {\n      if (this._canUseInstancedArrays) {\n        if (_indexBufferBinding) {\n          if (useVao) {\n            gl.drawElementsInstanced(topology, count, _glIndexType, start * _glIndexByteCount, _instanceCount);\n          } else {\n            const { _nativeBuffer } = _indexBufferBinding.buffer;\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _nativeBuffer);\n            gl.drawElementsInstanced(topology, count, _glIndexType, start * _glIndexByteCount, _instanceCount);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n          }\n        } else {\n          gl.drawArraysInstanced(topology, start, count, _instanceCount);\n        }\n      } else {\n        Logger.error(\"ANGLE_instanced_arrays extension is not supported\");\n      }\n    }\n\n    // Unbind\n    if (useVao) {\n      gl.bindVertexArray(null);\n    } else {\n      this._disableAttrib();\n    }\n  }\n\n  destroy(): void {\n    this._useVao && this._clearVAO();\n  }\n\n  /**\n   * Bind buffer and attribute.\n   */\n  private _bindBufferAndAttrib(shaderProgram: any): void {\n    const gl = this._gl;\n    const primitive = this._primitive;\n    // @ts-ignore\n    const vertexBufferBindings = primitive._vertexBufferBindings;\n\n    this._attribLocArray.length = 0;\n    const attributeLocation = shaderProgram.attributeLocation;\n    // @ts-ignore\n    const attributes = primitive._vertexElementMap;\n\n    let vbo: WebGLBuffer;\n    let lastBoundVbo: WebGLBuffer;\n\n    for (const name in attributeLocation) {\n      const loc = attributeLocation[name];\n      if (loc === -1) continue;\n\n      const element = attributes[name];\n      if (element) {\n        const { buffer, stride } = vertexBufferBindings[element.bindingIndex];\n        vbo = buffer._nativeBuffer;\n        // prevent binding the vbo which already bound at the last loop, e.g. a buffer with multiple attributes.\n        if (lastBoundVbo !== vbo) {\n          lastBoundVbo = vbo;\n          gl.bindBuffer(gl.ARRAY_BUFFER, vbo);\n        }\n\n        gl.enableVertexAttribArray(loc);\n        const elementInfo = element._glElementInfo;\n        gl.vertexAttribPointer(loc, elementInfo.size, elementInfo.type, elementInfo.normalized, stride, element.offset);\n        if (this._canUseInstancedArrays) {\n          gl.vertexAttribDivisor(loc, element.instanceStepRate);\n        }\n        this._attribLocArray.push(loc);\n      } else {\n        Logger.warn(\"vertex attribute not found: \" + name);\n      }\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  }\n\n  private _disableAttrib() {\n    const gl = this._gl;\n    for (let i = 0, l = this._attribLocArray.length; i < l; i++) {\n      gl.disableVertexAttribArray(this._attribLocArray[i]);\n    }\n  }\n\n  private _registerVAO(shaderProgram: any): void {\n    const gl = this._gl;\n    const vao = gl.createVertexArray();\n\n    /** register VAO */\n    gl.bindVertexArray(vao);\n\n    // @ts-ignore\n    const { _indexBufferBinding } = this._primitive;\n    if (_indexBufferBinding) {\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _indexBufferBinding.buffer._nativeBuffer);\n    }\n    this._bindBufferAndAttrib(shaderProgram);\n\n    /** unbind */\n    gl.bindVertexArray(null);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    this._disableAttrib();\n\n    this._vaoMap.set(shaderProgram.id, vao);\n  }\n\n  private _clearVAO(): void {\n    const gl = this._gl;\n    this._vaoMap.forEach((vao) => {\n      gl.deleteVertexArray(vao);\n    });\n    this._vaoMap.clear();\n  }\n}\n", "/**\n * @private\n */\nexport class GLRenderStates {\n  private _gl: WebGLRenderingContext;\n  private _parameters = {};\n  /**\n   * @param {WebGLRenderingContext} gl\n   */\n  constructor(gl: WebGLRenderingContext) {\n    this._gl = gl;\n    this._parameters = {}; // current gl state parameters\n\n    /** cache */\n    this._parameters[gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS] = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this._parameters[gl.MAX_VERTEX_UNIFORM_VECTORS] = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n    this._parameters[gl.MAX_VERTEX_ATTRIBS] = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    this._parameters[gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS] = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n    this._parameters[gl.MAX_TEXTURE_SIZE] = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n\n    // init blend state same as BlendState default value.\n    gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);\n    gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n    gl.colorMask(true, true, true, true);\n    gl.blendColor(0, 0, 0, 0);\n    gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n\n    // init depth state same as DepthState default value.\n    gl.enable(gl.DEPTH_TEST);\n    gl.depthFunc(gl.LESS);\n    gl.depthMask(true);\n\n    // init stencil state same as StencilState default value.\n    gl.disable(gl.STENCIL_TEST);\n    gl.stencilFuncSeparate(gl.FRONT, gl.ALWAYS, 0, 0xff);\n    gl.stencilFuncSeparate(gl.BACK, gl.ALWAYS, 0, 0xff);\n    gl.stencilOpSeparate(gl.FRONT, gl.KEEP, gl.KEEP, gl.KEEP);\n    gl.stencilOpSeparate(gl.BACK, gl.KEEP, gl.KEEP, gl.KEEP);\n    gl.stencilMask(0xff);\n\n    // init raster state same as RasterState default value.\n    gl.enable(gl.CULL_FACE);\n    gl.cullFace(gl.BACK);\n    gl.disable(gl.POLYGON_OFFSET_FILL);\n    gl.polygonOffset(0, 0);\n  }\n\n  /**\n   * Get a parameter.\n   */\n  getParameter(pname) {\n    return this._parameters[pname];\n  }\n}\n", "import {\n  GLCapabilityType,\n  IPlatformTexture,\n  Logger,\n  RenderBufferDepthFormat,\n  Texture,\n  TextureCubeFace,\n  TextureDepthCompareFunction,\n  TextureFilterMode,\n  TextureFormat,\n  TextureWrapMode\n} from \"@galacean/engine-core\";\nimport { GLCompressedTextureInternalFormat, TextureFormatDetail } from \"./type\";\nimport { WebGLRenderer } from \"./WebGLRenderer\";\n\n/**\n * Texture in WebGL platform.\n */\nexport class GLTexture implements IPlatformTexture {\n  /** @internal */\n  static _isPowerOf2(v: number): boolean {\n    return (v & (v - 1)) === 0;\n  }\n\n  /**\n   * Get more texture info from TextureFormat.\n   * @internal\n   */\n  static _getFormatDetail(\n    format: TextureFormat,\n    gl: WebGLRenderingContext & WebGL2RenderingContext,\n    isWebGL2: boolean\n  ): TextureFormatDetail {\n    switch (format) {\n      case TextureFormat.R8G8B8:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB8 : gl.RGB,\n          baseFormat: gl.RGB,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case TextureFormat.R8G8B8A8:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA8 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case TextureFormat.R4G4B4A4:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA4 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_SHORT_4_4_4_4,\n          isCompressed: false\n        };\n      case TextureFormat.R5G5B5A1:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB5_A1 : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.UNSIGNED_SHORT_5_5_5_1,\n          isCompressed: false\n        };\n      case TextureFormat.R5G6B5:\n        return {\n          internalFormat: isWebGL2 ? gl.RGB565 : gl.RGB,\n          baseFormat: gl.RGB,\n          dataType: gl.UNSIGNED_SHORT_5_6_5,\n          isCompressed: false\n        };\n      case TextureFormat.Alpha8:\n        return {\n          internalFormat: gl.ALPHA,\n          baseFormat: gl.ALPHA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case TextureFormat.LuminanceAlpha:\n        return {\n          internalFormat: gl.LUMINANCE_ALPHA,\n          baseFormat: gl.LUMINANCE_ALPHA,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false\n        };\n      case TextureFormat.R16G16B16A16:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA16F : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.HALF_FLOAT,\n          isCompressed: false\n        };\n      case TextureFormat.R32G32B32A32:\n        return {\n          internalFormat: isWebGL2 ? gl.RGBA32F : gl.RGBA,\n          baseFormat: gl.RGBA,\n          dataType: gl.FLOAT,\n          isCompressed: false\n        };\n      case TextureFormat.DXT1:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_S3TC_DXT1_EXT,\n          isCompressed: true\n        };\n      case TextureFormat.DXT5:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_S3TC_DXT5_EXT,\n          isCompressed: true\n        };\n      case TextureFormat.ETC1_RGB:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_ETC1_WEBGL,\n          isCompressed: true\n        };\n      case TextureFormat.ETC2_RGB:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB8_ETC2,\n          isCompressed: true\n        };\n      case TextureFormat.ETC2_RGBA5:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n          isCompressed: true\n        };\n      case TextureFormat.ETC2_RGBA8:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA8_ETC2_EAC,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGB2:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_PVRTC_2BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGBA2:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_PVRTC_2BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGB4:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGB_PVRTC_4BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.PVRTC_RGBA4:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_PVRTC_4BPPV1_IMG,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_4x4:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_4X4_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_5x5:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_5X5_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_6x6:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_6X6_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_8x8:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_8X8_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_10x10:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_10X10_KHR,\n          isCompressed: true\n        };\n      case TextureFormat.ASTC_12x12:\n        return {\n          internalFormat: GLCompressedTextureInternalFormat.RGBA_ASTC_12X12_KHR,\n          isCompressed: true\n        };\n\n      case TextureFormat.Depth:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH_COMPONENT32F : gl.DEPTH_COMPONENT,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: isWebGL2 ? gl.FLOAT : gl.UNSIGNED_SHORT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case TextureFormat.DepthStencil:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH32F_STENCIL8 : gl.DEPTH_STENCIL,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: isWebGL2 ? gl.FLOAT_32_UNSIGNED_INT_24_8_REV : gl.UNSIGNED_INT_24_8,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      case TextureFormat.Depth16:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH_COMPONENT16 : gl.DEPTH_COMPONENT,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.UNSIGNED_SHORT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case TextureFormat.Depth24Stencil8:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH24_STENCIL8 : gl.DEPTH_STENCIL,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: gl.UNSIGNED_INT_24_8,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      case TextureFormat.Depth24:\n        return {\n          internalFormat: gl.DEPTH_COMPONENT24,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.UNSIGNED_INT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case TextureFormat.Depth32:\n        return {\n          internalFormat: gl.DEPTH_COMPONENT32F,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.FLOAT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case TextureFormat.Depth32Stencil8:\n        return {\n          internalFormat: gl.DEPTH32F_STENCIL8,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: gl.FLOAT_32_UNSIGNED_INT_24_8_REV,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      default:\n        throw new Error(`this TextureFormat is not supported in Galacean Engine: ${format}`);\n    }\n  }\n\n  /**\n   * In WebGL 1, internalformat must be the same as baseFormat when call texImage2D.\n   * @internal\n   */\n  static _getRenderBufferDepthFormatDetail(\n    format: RenderBufferDepthFormat,\n    gl: WebGLRenderingContext & WebGL2RenderingContext,\n    isWebGL2: boolean\n  ): TextureFormatDetail {\n    switch (format) {\n      case RenderBufferDepthFormat.Depth:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH_COMPONENT32F : gl.DEPTH_COMPONENT16,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: isWebGL2 ? gl.FLOAT : gl.UNSIGNED_SHORT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.DepthStencil:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH32F_STENCIL8 : gl.DEPTH_STENCIL,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: isWebGL2 ? gl.FLOAT_32_UNSIGNED_INT_24_8_REV : gl.UNSIGNED_INT_24_8,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Stencil:\n        return {\n          internalFormat: gl.STENCIL_INDEX8,\n          baseFormat: gl.STENCIL_ATTACHMENT,\n          dataType: gl.UNSIGNED_BYTE,\n          isCompressed: false,\n          attachment: gl.STENCIL_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth16:\n        return {\n          internalFormat: gl.DEPTH_COMPONENT16,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.UNSIGNED_SHORT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth24Stencil8:\n        return {\n          internalFormat: isWebGL2 ? gl.DEPTH24_STENCIL8 : gl.DEPTH_STENCIL,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: gl.UNSIGNED_INT_24_8,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth24:\n        return {\n          internalFormat: gl.DEPTH_COMPONENT24,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.UNSIGNED_INT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n      case RenderBufferDepthFormat.Depth32:\n        return {\n          internalFormat: gl.DEPTH_COMPONENT32F,\n          baseFormat: gl.DEPTH_COMPONENT,\n          dataType: gl.FLOAT,\n          isCompressed: false,\n          attachment: gl.DEPTH_ATTACHMENT\n        };\n\n      case RenderBufferDepthFormat.Depth32Stencil8:\n        return {\n          internalFormat: gl.DEPTH32F_STENCIL8,\n          baseFormat: gl.DEPTH_STENCIL,\n          dataType: gl.FLOAT_32_UNSIGNED_INT_24_8_REV,\n          isCompressed: false,\n          attachment: gl.DEPTH_STENCIL_ATTACHMENT\n        };\n      default:\n        throw new Error(`this TextureFormat is not supported in Galacean Engine: ${format}`);\n    }\n  }\n\n  /**\n   * Check whether the corresponding texture format is supported.\n   * @internal\n   */\n  static _supportTextureFormat(format: TextureFormat, rhi: WebGLRenderer): boolean {\n    switch (format) {\n      case TextureFormat.R16G16B16A16:\n        if (!rhi.canIUse(GLCapabilityType.textureHalfFloat)) {\n          return false;\n        }\n        break;\n      case TextureFormat.R32G32B32A32:\n        if (!rhi.canIUse(GLCapabilityType.textureFloat)) {\n          return false;\n        }\n        break;\n      case TextureFormat.Depth16:\n      case TextureFormat.Depth24Stencil8:\n      case TextureFormat.Depth:\n      case TextureFormat.DepthStencil:\n        if (!rhi.canIUse(GLCapabilityType.depthTexture)) {\n          return false;\n        }\n        break;\n      case TextureFormat.Depth24:\n      case TextureFormat.Depth32:\n      case TextureFormat.Depth32Stencil8:\n        return rhi.isWebGL2;\n    }\n\n    return true;\n  }\n  /**\n   * @internal\n   */\n  static _supportRenderBufferColorFormat(format: TextureFormat, rhi: WebGLRenderer): boolean {\n    let isSupported = true;\n\n    switch (format) {\n      case TextureFormat.R16G16B16A16:\n        {\n          if (!rhi.canIUse(GLCapabilityType.colorBufferHalfFloat) || !rhi.canIUse(GLCapabilityType.textureHalfFloat)) {\n            isSupported = false;\n          }\n        }\n        break;\n      case TextureFormat.R32G32B32A32:\n        {\n          if (!rhi.canIUse(GLCapabilityType.colorBufferFloat) || !rhi.canIUse(GLCapabilityType.textureFloat)) {\n            isSupported = false;\n          }\n        }\n        break;\n    }\n\n    return isSupported;\n  }\n\n  /**\n   * @internal\n   */\n  static _supportRenderBufferDepthFormat(format: RenderBufferDepthFormat, rhi: WebGLRenderer): boolean {\n    if (!rhi.isWebGL2) {\n      switch (format) {\n        case RenderBufferDepthFormat.Depth24:\n        case RenderBufferDepthFormat.Depth32:\n        case RenderBufferDepthFormat.Depth32Stencil8:\n          return false;\n      }\n    }\n\n    return true;\n  }\n\n  /** @internal */\n  _texture: Texture;\n  /** @internal */\n  _glTexture: WebGLTexture;\n  /** @internal */\n  _rhi: WebGLRenderer;\n  /** @internal */\n  _gl: WebGLRenderingContext & WebGL2RenderingContext;\n  /** @internal */\n  _isWebGL2: boolean;\n  /** @internal */\n  _target: GLenum; // gl.TEXTURE_2D | gl.TEXTURE_CUBE_MAP\n  /** @internal */\n  _formatDetail: TextureFormatDetail;\n\n  /**\n   * Wrapping mode for texture coordinate S.\n   */\n  set wrapModeU(value: TextureWrapMode) {\n    this._bind();\n    this._setWrapMode(value, this._gl.TEXTURE_WRAP_S);\n  }\n\n  /**\n   * Wrapping mode for texture coordinate T.\n   */\n  set wrapModeV(value: TextureWrapMode) {\n    this._bind();\n    this._setWrapMode(value, this._gl.TEXTURE_WRAP_T);\n  }\n\n  /**\n   * Filter mode for texture.\n   */\n  set filterMode(value: TextureFilterMode) {\n    const gl = this._gl;\n    const target = this._target;\n    /** @ts-ignore */\n    const { _mipmap } = this._texture;\n\n    this._bind();\n    switch (value) {\n      case TextureFilterMode.Point:\n        gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, _mipmap ? gl.NEAREST_MIPMAP_NEAREST : gl.NEAREST);\n        break;\n      case TextureFilterMode.Bilinear:\n        gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, _mipmap ? gl.LINEAR_MIPMAP_NEAREST : gl.LINEAR);\n        break;\n      case TextureFilterMode.Trilinear:\n        gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, _mipmap ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR);\n        break;\n    }\n  }\n\n  /**\n   * Anisotropic level for texture.\n   */\n  set anisoLevel(value: number) {\n    const gl = this._gl as WebGLRenderingContext & WebGL2RenderingContext & EXT_texture_filter_anisotropic;\n\n    this._bind();\n    gl.texParameterf(this._target, gl.TEXTURE_MAX_ANISOTROPY_EXT, value);\n  }\n\n  set depthCompareFunction(value: TextureDepthCompareFunction) {\n    this._bind();\n\n    const gl = this._gl;\n    switch (value) {\n      case TextureDepthCompareFunction.Never:\n        gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.NEVER);\n        break;\n      case TextureDepthCompareFunction.Less:\n        gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.LESS);\n        break;\n      case TextureDepthCompareFunction.Equal:\n        gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.EQUAL);\n        break;\n      case TextureDepthCompareFunction.LessEqual:\n        gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.LEQUAL);\n        break;\n      case TextureDepthCompareFunction.Greater:\n        gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.GREATER);\n        break;\n      case TextureDepthCompareFunction.NotEqual:\n        gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.NOTEQUAL);\n        break;\n      case TextureDepthCompareFunction.GreaterEqual:\n        gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.GEQUAL);\n        break;\n      case TextureDepthCompareFunction.Always:\n        gl.texParameteri(this._target, gl.TEXTURE_COMPARE_FUNC, gl.ALWAYS);\n        break;\n    }\n  }\n  /**\n   * Create texture in WebGL platform.\n   */\n  constructor(rhi: WebGLRenderer, texture: Texture, target: GLenum) {\n    this._texture = texture;\n    this._rhi = rhi;\n    this._gl = rhi.gl as WebGLRenderingContext & WebGL2RenderingContext;\n    this._isWebGL2 = rhi.isWebGL2;\n    this._target = target;\n    this._glTexture = this._gl.createTexture();\n  }\n\n  /**\n   * Destroy texture.\n   */\n  destroy() {\n    this._gl.deleteTexture(this._glTexture);\n    this._texture = null;\n    this._glTexture = null;\n    this._formatDetail = null;\n  }\n\n  /**\n   * @internal\n   */\n  setUseDepthCompareMode(value: boolean): void {\n    const gl = this._gl;\n    gl.texParameteri(this._target, gl.TEXTURE_COMPARE_MODE, value ? gl.COMPARE_REF_TO_TEXTURE : gl.NONE);\n  }\n\n  /**\n   * Generate multi-level textures based on the 0th level data.\n   */\n  generateMipmaps(): void {\n    // @todo (1x1).generateMipmap() will flash back in uc.\n    if (this._texture.width !== 1 || this._texture.height !== 1) {\n      this._bind();\n      this._gl.generateMipmap(this._target);\n    }\n  }\n\n  protected _bind() {\n    this._rhi.bindTexture(this);\n  }\n\n  /**\n   * Pre-development mipmapping GPU memory.\n   */\n  protected _init(isCube: boolean): void {\n    const gl = this._gl;\n    const isWebGL2 = this._isWebGL2;\n    let { internalFormat, baseFormat, dataType } = this._formatDetail;\n    // @ts-ignore\n    const { mipmapCount, width, height, _isDepthTexture } = this._texture;\n\n    this._bind();\n\n    if (isWebGL2 && !(baseFormat === gl.LUMINANCE_ALPHA || baseFormat === gl.ALPHA)) {\n      gl.texStorage2D(this._target, mipmapCount, internalFormat, width, height);\n    } else {\n      if (!isCube) {\n        if (_isDepthTexture) {\n          gl.texImage2D(this._target, 0, internalFormat, width, height, 0, baseFormat, dataType, null);\n        } else {\n          for (let i = 0; i < mipmapCount; i++) {\n            const mipWidth = Math.max(1, width >> i);\n            const mipHeight = Math.max(1, height >> i);\n            gl.texImage2D(this._target, i, internalFormat, mipWidth, mipHeight, 0, baseFormat, dataType, null);\n          }\n        }\n      } else {\n        for (let i = 0; i < mipmapCount; i++) {\n          const size = Math.max(1, width >> i);\n          for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n            gl.texImage2D(\n              gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex,\n              i,\n              internalFormat,\n              size,\n              size,\n              0,\n              baseFormat,\n              dataType,\n              null\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the pixel color buffer according to the specified cube face and area.\n   * @param face - You can choose which cube face to read\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   * @param mipLevel - Set mip level the data want to get from\n   */\n  protected _getPixelBuffer(\n    face: TextureCubeFace | null,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    mipLevel: number,\n    out: ArrayBufferView\n  ): void {\n    const gl = this._gl;\n    const { baseFormat, dataType } = this._formatDetail;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._getReadFrameBuffer());\n\n    if (mipLevel > 0 && !this._isWebGL2) {\n      mipLevel = 0;\n      Logger.error(\"mipLevel only take effect in WebGL2.0\");\n    }\n\n    if (face != null) {\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n        this._glTexture,\n        mipLevel\n      );\n    } else {\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._glTexture, mipLevel);\n    }\n    gl.readPixels(x, y, width, height, baseFormat, dataType, out);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  }\n\n  private _setWrapMode(value: TextureWrapMode, pname: GLenum): void {\n    const gl = this._gl;\n    const isWebGL2 = this._isWebGL2;\n    const target = this._target;\n    const { width, height } = this._texture;\n\n    if (\n      !isWebGL2 &&\n      value !== TextureWrapMode.Clamp &&\n      (!GLTexture._isPowerOf2(width) || !GLTexture._isPowerOf2(height))\n    ) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for REPEAT or MIRRORED_REPEAT in WebGL1,and has automatically downgraded to CLAMP_TO_EDGE\"\n      );\n      value = TextureWrapMode.Clamp;\n    }\n\n    switch (value) {\n      case TextureWrapMode.Clamp:\n        gl.texParameteri(target, pname, gl.CLAMP_TO_EDGE);\n        break;\n      case TextureWrapMode.Repeat:\n        gl.texParameteri(target, pname, gl.REPEAT);\n        break;\n      case TextureWrapMode.Mirror:\n        gl.texParameteri(target, pname, gl.MIRRORED_REPEAT);\n        break;\n    }\n  }\n\n  protected _getReadFrameBuffer(): WebGLFramebuffer {\n    let frameBuffer = this._rhi._readFrameBuffer;\n    if (!frameBuffer) {\n      this._rhi._readFrameBuffer = frameBuffer = this._gl.createFramebuffer();\n    }\n    return frameBuffer;\n  }\n}\n", "import {\n  GLCapabilityType,\n  IPlatformRenderTarget,\n  Logger,\n  RenderTarget,\n  Texture,\n  TextureCube,\n  TextureCubeFace,\n  TextureFormat\n} from \"@galacean/engine-core\";\nimport { GLTexture } from \"./GLTexture\";\nimport { WebGLRenderer } from \"./WebGLRenderer\";\n\n/**\n * The render target in WebGL platform is used for off-screen rendering.\n */\nexport class GLRenderTarget implements IPlatformRenderTarget {\n  private _gl: WebGLRenderingContext & WebGL2RenderingContext;\n  private _isWebGL2: boolean;\n  private _target: RenderTarget;\n  private _frameBuffer: WebGLFramebuffer;\n  private _MSAAFrameBuffer: WebGLFramebuffer | null;\n  private _depthRenderBuffer: WebGLRenderbuffer | null;\n  private _MSAAColorRenderBuffers: WebGLRenderbuffer[] = [];\n  private _MSAADepthRenderBuffer: WebGLRenderbuffer | null;\n  private _oriDrawBuffers: GLenum[];\n  private _blitDrawBuffers: GLenum[] | null;\n  private _curMipLevel: number = 0;\n\n  /**\n   * Create render target in WebGL platform.\n   */\n  constructor(rhi: WebGLRenderer, target: RenderTarget) {\n    this._gl = rhi.gl as WebGLRenderingContext & WebGL2RenderingContext;\n    this._isWebGL2 = rhi.isWebGL2;\n    this._target = target;\n\n    /** @ts-ignore */\n    const { _colorTextures, _depth, width, height } = target;\n    const isDepthTexture = _depth instanceof Texture;\n\n    /** todo\n     * MRT + Cube + [,MSAA]\n     * MRT + MSAA\n     */\n\n    for (let i = 0, n = _colorTextures.length; i < n; i++) {\n      const format = _colorTextures[i]._format;\n      if (!GLTexture._supportRenderBufferColorFormat(format, rhi)) {\n        throw new Error(`TextureFormat is not supported:${TextureFormat[format]} in RenderTarget`);\n      }\n    }\n\n    if (!isDepthTexture && !GLTexture._supportRenderBufferDepthFormat(_depth, rhi)) {\n      throw new Error(`TextureFormat is not supported:${TextureFormat[_depth]} in RenderTarget`);\n    }\n\n    if (_colorTextures.length > 1 && !rhi.canIUse(GLCapabilityType.drawBuffers)) {\n      throw new Error(\"MRT is not supported\");\n    }\n\n    if (_colorTextures.some((v: Texture) => v.width !== width || v.height !== height)) {\n      throw new Error(\"ColorTexture's size must as same as RenderTarget\");\n    }\n\n    if (isDepthTexture && (_depth.width !== width || _depth.height !== height)) {\n      throw new Error(\"DepthTexture's size must as same as RenderTarget\");\n    }\n\n    // todo: necessary to support MRT + Cube + [,MSAA] ?\n    if (_colorTextures.length > 1 && _colorTextures.some((v: Texture) => v instanceof TextureCube)) {\n      throw new Error(\"MRT+Cube+[,MSAA] is not supported\");\n    }\n\n    const maxAntiAliasing = rhi.capability.maxAntiAliasing;\n    if (target.antiAliasing > maxAntiAliasing) {\n      Logger.warn(`MSAA antiAliasing exceeds the limit and is automatically downgraded to:${maxAntiAliasing}`);\n\n      /** @ts-ignore */\n      target._antiAliasing = maxAntiAliasing;\n    }\n\n    this._frameBuffer = this._gl.createFramebuffer();\n\n    // bind main FBO\n    this._bindMainFBO();\n\n    // bind MSAA FBO\n    if (target.antiAliasing > 1) {\n      this._MSAAFrameBuffer = this._gl.createFramebuffer();\n      this._bindMSAAFBO();\n    }\n  }\n\n  /**\n   * Set which face and mipLevel of the cube texture to render to.\n   * @param faceIndex - Cube texture face\n   * @param mipLevel - Set mip level the data want to write\n   */\n  setRenderTargetInfo(faceIndex: TextureCubeFace, mipLevel: number): void {\n    const { _gl: gl, _target: target } = this;\n    const { depthTexture } = target;\n    const colorTexture = target.getColorTexture(0);\n    const mipChanged = mipLevel !== this._curMipLevel;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\n\n    if (colorTexture) {\n      const isCube = colorTexture instanceof TextureCube;\n      if (mipChanged || isCube) {\n        gl.framebufferTexture2D(\n          gl.FRAMEBUFFER,\n          gl.COLOR_ATTACHMENT0,\n          isCube ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex : gl.TEXTURE_2D,\n          // @ts-ignore\n          (colorTexture._platformTexture as GLTexture)._glTexture,\n          mipLevel\n        );\n      }\n    }\n    if (depthTexture) {\n      const isCube = depthTexture instanceof TextureCube;\n      if (mipChanged || isCube) {\n        // @ts-ignore\n        const platformTexture = <GLTexture>depthTexture._platformTexture;\n        gl.framebufferTexture2D(\n          gl.FRAMEBUFFER,\n          platformTexture._formatDetail.attachment,\n          isCube ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex : gl.TEXTURE_2D,\n          platformTexture._glTexture,\n          mipLevel\n        );\n      }\n    } else {\n      if (mipChanged) {\n        // @ts-ignore\n        const { internalFormat } = GLTexture._getRenderBufferDepthFormatDetail(target._depth, gl, this._isWebGL2);\n        gl.bindRenderbuffer(gl.RENDERBUFFER, this._depthRenderBuffer);\n        gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, target.width >> mipLevel, target.height >> mipLevel);\n      }\n    }\n    this._curMipLevel = mipLevel;\n\n    // revert current activated render target\n    this._activeRenderTarget();\n  }\n\n  /**\n   * Blit FBO.\n   */\n  blitRenderTarget(): void {\n    if (!this._MSAAFrameBuffer) return;\n\n    const gl = this._gl;\n    const mask = gl.COLOR_BUFFER_BIT | (this._target.depthTexture ? gl.DEPTH_BUFFER_BIT : 0);\n    const { colorTextureCount, width, height } = this._target;\n\n    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this._MSAAFrameBuffer);\n    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this._frameBuffer);\n\n    for (let textureIndex = 0; textureIndex < colorTextureCount; textureIndex++) {\n      const attachment = gl.COLOR_ATTACHMENT0 + textureIndex;\n\n      this._blitDrawBuffers[textureIndex] = attachment;\n\n      gl.readBuffer(attachment);\n      gl.drawBuffers(this._blitDrawBuffers);\n      gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, gl.NEAREST);\n\n      this._blitDrawBuffers[textureIndex] = gl.NONE;\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  }\n\n  /**\n   * Destroy render target.\n   */\n  destroy(): void {\n    const gl = this._gl;\n\n    this._frameBuffer && gl.deleteFramebuffer(this._frameBuffer);\n    this._depthRenderBuffer && gl.deleteRenderbuffer(this._depthRenderBuffer);\n    this._MSAAFrameBuffer && gl.deleteFramebuffer(this._MSAAFrameBuffer);\n    this._MSAADepthRenderBuffer && gl.deleteRenderbuffer(this._MSAADepthRenderBuffer);\n\n    for (let i = 0; i < this._MSAAColorRenderBuffers.length; i++) {\n      gl.deleteRenderbuffer(this._MSAAColorRenderBuffers[i]);\n    }\n\n    this._frameBuffer = null;\n    this._depthRenderBuffer = null;\n    this._MSAAFrameBuffer = null;\n    this._MSAAColorRenderBuffers.length = 0;\n    this._MSAADepthRenderBuffer = null;\n  }\n\n  /**\n   * Activate this RenderTarget.\n   * @internal\n   * @remarks\n   * If MSAA is turned on, MSAA FBO is activated, and then this._blitRenderTarget() is performed to exchange FBO.\n   * If MSAA is not turned on, activate the main FBO.\n   */\n  _activeRenderTarget(): void {\n    const gl = this._gl;\n\n    if (this._MSAAFrameBuffer) {\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this._MSAAFrameBuffer);\n    } else {\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\n    }\n  }\n\n  private _bindMainFBO(): void {\n    const gl = this._gl;\n    const isWebGL2: boolean = this._isWebGL2;\n\n    /** @ts-ignore */\n    const { _depth, colorTextureCount, width, height } = this._target;\n    const drawBuffers = new Array(colorTextureCount);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\n\n    /** color render buffer */\n    for (let i = 0; i < colorTextureCount; i++) {\n      const colorTexture = this._target.getColorTexture(i);\n      const attachment = gl.COLOR_ATTACHMENT0 + i;\n\n      drawBuffers[i] = attachment;\n\n      if (!(colorTexture instanceof TextureCube)) {\n        gl.framebufferTexture2D(\n          gl.FRAMEBUFFER,\n          attachment,\n          gl.TEXTURE_2D,\n          /** @ts-ignore */\n          (colorTexture._platformTexture as GLTexture)._glTexture,\n          0\n        );\n      }\n    }\n\n    if (colorTextureCount > 1) {\n      gl.drawBuffers(drawBuffers);\n    }\n    this._oriDrawBuffers = drawBuffers;\n\n    /** depth render buffer */\n    if (_depth !== null) {\n      if (_depth instanceof Texture && !(_depth instanceof TextureCube)) {\n        // @ts-ignore\n        const platformTexture = _depth._platformTexture as GLTexture;\n        gl.framebufferTexture2D(\n          gl.FRAMEBUFFER,\n          platformTexture._formatDetail.attachment,\n          gl.TEXTURE_2D,\n          platformTexture._glTexture,\n          0\n        );\n      } else if (this._target.antiAliasing <= 1) {\n        const { internalFormat, attachment } = GLTexture._getRenderBufferDepthFormatDetail(_depth, gl, isWebGL2);\n        const depthRenderBuffer = gl.createRenderbuffer();\n\n        this._depthRenderBuffer = depthRenderBuffer;\n\n        gl.bindRenderbuffer(gl.RENDERBUFFER, depthRenderBuffer);\n        gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, width, height);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, depthRenderBuffer);\n      }\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  }\n\n  private _bindMSAAFBO(): void {\n    const gl = this._gl;\n    const isWebGL2 = this._isWebGL2;\n    const MSAADepthRenderBuffer = gl.createRenderbuffer();\n\n    /** @ts-ignore */\n    const { _depth, colorTextureCount, antiAliasing, width, height } = this._target;\n\n    this._blitDrawBuffers = new Array(colorTextureCount);\n    this._MSAADepthRenderBuffer = MSAADepthRenderBuffer;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._MSAAFrameBuffer);\n\n    // prepare MRT+MSAA color RBOs\n    for (let i = 0; i < colorTextureCount; i++) {\n      const MSAAColorRenderBuffer = gl.createRenderbuffer();\n\n      this._MSAAColorRenderBuffers[i] = MSAAColorRenderBuffer;\n      this._blitDrawBuffers[i] = gl.NONE;\n\n      gl.bindRenderbuffer(gl.RENDERBUFFER, MSAAColorRenderBuffer);\n      gl.renderbufferStorageMultisample(\n        gl.RENDERBUFFER,\n        antiAliasing,\n        /** @ts-ignore */\n        (this._target.getColorTexture(i)._platformTexture as GLTexture)._formatDetail.internalFormat,\n        width,\n        height\n      );\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.RENDERBUFFER, MSAAColorRenderBuffer);\n    }\n    gl.drawBuffers(this._oriDrawBuffers);\n\n    // prepare MSAA depth RBO\n    if (_depth !== null) {\n      const { internalFormat, attachment } =\n        _depth instanceof Texture\n          ? /** @ts-ignore */\n            (_depth._platformTexture as GLTexture)._formatDetail\n          : GLTexture._getRenderBufferDepthFormatDetail(_depth, gl, isWebGL2);\n\n      gl.bindRenderbuffer(gl.RENDERBUFFER, MSAADepthRenderBuffer);\n      gl.renderbufferStorageMultisample(gl.RENDERBUFFER, antiAliasing, internalFormat, width, height);\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, MSAADepthRenderBuffer);\n    }\n\n    this._checkFrameBuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  }\n\n  private _checkFrameBuffer(): void {\n    const gl = this._gl;\n    const isWebGL2 = this._isWebGL2;\n    const e = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\n    switch (e) {\n      case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n        throw new Error(\n          \"The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete\"\n        );\n      case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n        throw new Error(\"There is no attachment\");\n      case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n        throw new Error(\" Height and width of the attachment are not the same.\");\n      case gl.FRAMEBUFFER_UNSUPPORTED:\n        throw new Error(\n          \"The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer\"\n        );\n    }\n\n    if (isWebGL2 && e === gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE) {\n      throw new Error(\n        \"The values of gl.RENDERBUFFER_SAMPLES are different among attached renderbuffers, or are non-zero if the attached images are a mix of renderbuffers and textures.\"\n      );\n    }\n  }\n}\n", "import { IPlatformTexture2D, Logger, Texture2D, TextureFormat } from \"@galacean/engine-core\";\nimport { GLTexture } from \"./GLTexture\";\nimport { WebGLRenderer } from \"./WebGLRenderer\";\n\n/**\n * Texture 2d in WebGL platform.\n */\nexport class GLTexture2D extends GLTexture implements IPlatformTexture2D {\n  /** Backward compatible with WebGL1.0. */\n  private _compressedMipFilled: number = 0;\n\n  constructor(rhi: WebGLRenderer, texture2D: Texture2D) {\n    super(rhi, texture2D, rhi.gl.TEXTURE_2D);\n\n    /** @ts-ignore */\n    const { format, _mipmap, width, height } = texture2D;\n    const isWebGL2 = this._isWebGL2;\n\n    /** @ts-ignore */\n    if (!GLTexture._supportTextureFormat(format, rhi)) {\n      throw new Error(`Texture format is not supported:${TextureFormat[format]}`);\n    }\n\n    if (_mipmap && !isWebGL2 && (!GLTexture._isPowerOf2(width) || !GLTexture._isPowerOf2(height))) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap\"\n      );\n\n      /** @ts-ignore */\n      texture2D._mipmap = false;\n      /** @ts-ignore */\n      texture2D._mipmapCount = texture2D._getMipmapCount();\n    }\n\n    this._formatDetail = GLTexture._getFormatDetail(format, this._gl, isWebGL2);\n    (this._formatDetail.isCompressed && !isWebGL2) || this._init(false);\n  }\n\n  /**\n   * {@inheritDoc IPlatformTexture2D.setPixelBuffer}\n   */\n  setPixelBuffer(\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x: number,\n    y: number,\n    width?: number,\n    height?: number\n  ): void {\n    const gl = this._gl;\n    const isWebGL2: boolean = this._isWebGL2;\n    const { internalFormat, baseFormat, dataType, isCompressed } = this._formatDetail;\n    const mipWidth = Math.max(1, this._texture.width >> mipLevel);\n    const mipHeight = Math.max(1, this._texture.height >> mipLevel);\n\n    width = width || mipWidth - x;\n    height = height || mipHeight - y;\n\n    this._bind();\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\n\n    if (isCompressed) {\n      const mipBit = 1 << mipLevel;\n      if (isWebGL2 || this._compressedMipFilled & mipBit) {\n        gl.compressedTexSubImage2D(this._target, mipLevel, x, y, width, height, internalFormat, colorBuffer);\n      } else {\n        gl.compressedTexImage2D(this._target, mipLevel, internalFormat, width, height, 0, colorBuffer);\n        this._compressedMipFilled |= mipBit;\n      }\n    } else {\n      gl.texSubImage2D(this._target, mipLevel, x, y, width, height, baseFormat, dataType, colorBuffer);\n    }\n  }\n\n  /**\n   * {@inheritDoc IPlatformTexture2D.setImageSource}\n   */\n  setImageSource(\n    imageSource: TexImageSource,\n    mipLevel: number,\n    flipY: boolean,\n    premultiplyAlpha: boolean,\n    x: number,\n    y: number\n  ): void {\n    const gl = this._gl;\n    const { baseFormat, dataType } = this._formatDetail;\n\n    this._bind();\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, +flipY);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, +premultiplyAlpha);\n    gl.texSubImage2D(this._target, mipLevel, x || 0, y || 0, baseFormat, dataType, imageSource);\n  }\n\n  /**\n   * {@inheritDoc IPlatformTexture2D.getPixelBuffer }\n   */\n  getPixelBuffer(x: number, y: number, width: number, height: number, mipLevel: number, out: ArrayBufferView): void {\n    if (this._formatDetail.isCompressed) {\n      throw new Error(\"Unable to read compressed texture\");\n    }\n    super._getPixelBuffer(null, x, y, width, height, mipLevel, out);\n  }\n}\n", "import { IPlatformTexture2DArray, Texture2DArray, TextureFormat } from \"@galacean/engine-core\";\nimport { GLTexture } from \"./GLTexture\";\nimport { WebGLRenderer } from \"./WebGLRenderer\";\n\n/**\n * Texture 2D array in WebGL platform.\n */\nexport class GLTexture2DArray extends GLTexture implements IPlatformTexture2DArray {\n  constructor(rhi: WebGLRenderer, texture2DArray: Texture2DArray) {\n    super(rhi, texture2DArray, (<WebGL2RenderingContext>rhi.gl).TEXTURE_2D_ARRAY);\n\n    const { format, width, height, length, mipmapCount } = texture2DArray;\n\n    if (!this._isWebGL2) {\n      throw new Error(`Texture2D Array is not supported in WebGL1.0`);\n    }\n\n    /** @ts-ignore */\n    if (!GLTexture._supportTextureFormat(format, rhi)) {\n      throw new Error(`Texture format is not supported:${TextureFormat[format]}`);\n    }\n\n    this._bind();\n    this._formatDetail = GLTexture._getFormatDetail(format, this._gl, true);\n    this._gl.texStorage3D(this._target, mipmapCount, this._formatDetail.internalFormat, width, height, length);\n  }\n\n  /**\n   * {@inheritDoc IPlatformTexture2DArray.setPixelBuffer}\n   */\n  setPixelBuffer(\n    offsetIndex: number,\n    colorBuffer: ArrayBufferView,\n    mipLevel: number,\n    x: number,\n    y: number,\n    width?: number,\n    height?: number,\n    length?: number\n  ): void {\n    const { _target: target, _gl: gl } = this;\n    const { internalFormat, baseFormat, dataType, isCompressed } = this._formatDetail;\n\n    width = width || Math.max(1, this._texture.width >> mipLevel) - x;\n    height = height || Math.max(1, this._texture.height >> mipLevel) - y;\n    length = length || (<Texture2DArray>this._texture).length;\n\n    this._bind();\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\n\n    if (isCompressed) {\n      gl.compressedTexSubImage3D(\n        target,\n        mipLevel,\n        x,\n        y,\n        offsetIndex,\n        width,\n        height,\n        length,\n        internalFormat,\n        colorBuffer\n      );\n    } else {\n      gl.texSubImage3D(target, mipLevel, x, y, offsetIndex, width, height, length, baseFormat, dataType, colorBuffer);\n    }\n  }\n\n  /**\n   * {@inheritDoc IPlatformTexture2DArray.setImageSource}\n   */\n  setImageSource(\n    elementIndex: number,\n    imageSource: TexImageSource,\n    mipLevel: number,\n    flipY: boolean,\n    premultiplyAlpha: boolean,\n    x: number,\n    y: number\n  ): void {\n    const gl = this._gl;\n    const { baseFormat, dataType } = this._formatDetail;\n\n    this._bind();\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, +flipY);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, +premultiplyAlpha);\n    gl.texSubImage3D(\n      this._target,\n      mipLevel,\n      x,\n      y,\n      elementIndex,\n      imageSource.width,\n      imageSource.height,\n      1,\n      baseFormat,\n      dataType,\n      imageSource\n    );\n  }\n\n  /**\n   * {@inheritDoc IPlatformTexture2DArray.getPixelBuffer}\n   */\n  getPixelBuffer(\n    elementIndex: number,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    mipLevel: number,\n    out: ArrayBufferView\n  ): void {\n    const { _gl: gl, _formatDetail: formatDetail } = this;\n\n    if (formatDetail.isCompressed) {\n      throw new Error(\"Unable to read compressed texture\");\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._getReadFrameBuffer());\n    gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, this._glTexture, mipLevel, elementIndex);\n    gl.readPixels(x, y, width, height, formatDetail.baseFormat, formatDetail.dataType, out);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  }\n}\n", "import { IPlatformTextureCube, Logger, TextureCube, TextureCubeFace, TextureFormat } from \"@galacean/engine-core\";\nimport { GLTexture } from \"./GLTexture\";\nimport { WebGLRenderer } from \"./WebGLRenderer\";\n\n/**\n * Cube texture in WebGL platform.\n */\nexport class GLTextureCube extends GLTexture implements IPlatformTextureCube {\n  /** Backward compatible with WebGL1.0. */\n  private _compressedFaceFilled: number[] = [0, 0, 0, 0, 0, 0];\n\n  constructor(rhi: WebGLRenderer, textureCube: TextureCube) {\n    super(rhi, textureCube, rhi.gl.TEXTURE_CUBE_MAP);\n\n    /** @ts-ignore */\n    const { format, _mipmap, width: size } = textureCube;\n    const isWebGL2 = this._isWebGL2;\n\n    /** @ts-ignore */\n    if (!GLTexture._supportTextureFormat(format, rhi)) {\n      throw new Error(`Texture format is not supported:${TextureFormat[format]}`);\n    }\n\n    if (_mipmap && !isWebGL2 && !GLTexture._isPowerOf2(size)) {\n      Logger.warn(\n        \"non-power-2 texture is not supported for mipmap in WebGL1,and has automatically downgraded to non-mipmap\"\n      );\n\n      /** @ts-ignore */\n      textureCube._mipmap = false;\n      /** @ts-ignore */\n      textureCube._mipmapCount = textureCube._getMipmapCount();\n    }\n\n    this._formatDetail = GLTexture._getFormatDetail(format, this._gl, isWebGL2);\n    (this._formatDetail.isCompressed && !isWebGL2) || this._init(true);\n  }\n\n  /**\n   * {@inheritDoc IPlatformTextureCube.setPixelBuffer}\n   */\n  setPixelBuffer(\n    face: TextureCubeFace,\n    colorBuffer: ArrayBufferView,\n    mipLevel: number,\n    x: number,\n    y: number,\n    width?: number,\n    height?: number\n  ): void {\n    const gl = this._gl;\n    const isWebGL2 = this._isWebGL2;\n    const { internalFormat, baseFormat, dataType, isCompressed } = this._formatDetail;\n    const mipSize = Math.max(1, this._texture.width >> mipLevel);\n\n    width = width || mipSize - x;\n    height = height || mipSize - y;\n\n    this._bind();\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\n\n    if (isCompressed) {\n      const mipBit = 1 << mipLevel;\n      if (isWebGL2 || this._compressedFaceFilled[face] & mipBit) {\n        gl.compressedTexSubImage2D(\n          gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n          mipLevel,\n          x,\n          y,\n          width,\n          height,\n          internalFormat,\n          colorBuffer\n        );\n      } else {\n        gl.compressedTexImage2D(\n          gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n          mipLevel,\n          internalFormat,\n          width,\n          height,\n          0,\n          colorBuffer\n        );\n        this._compressedFaceFilled[face] |= mipBit;\n      }\n    } else {\n      gl.texSubImage2D(\n        gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n        mipLevel,\n        x,\n        y,\n        width,\n        height,\n        baseFormat,\n        dataType,\n        colorBuffer\n      );\n    }\n  }\n\n  /**\n   * {@inheritDoc IPlatformTextureCube.setImageSource}\n   */\n  setImageSource(\n    face: TextureCubeFace,\n    imageSource: TexImageSource,\n    mipLevel: number,\n    flipY: boolean,\n    premultiplyAlpha: boolean,\n    x: number,\n    y: number\n  ): void {\n    const gl = this._gl;\n    const { baseFormat, dataType } = this._formatDetail;\n\n    this._bind();\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, +flipY);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, +premultiplyAlpha);\n    gl.texSubImage2D(\n      gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\n      mipLevel,\n      x || 0,\n      y || 0,\n      baseFormat,\n      dataType,\n      imageSource\n    );\n  }\n\n  /**\n   * {@inheritDoc IPlatformTextureCube.getPixelBuffer}\n   */\n  getPixelBuffer(\n    face: TextureCubeFace,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    mipLevel: number,\n    out: ArrayBufferView\n  ): void {\n    if (this._formatDetail.isCompressed) {\n      throw new Error(\"Unable to read compressed texture\");\n    }\n    super._getPixelBuffer(face, x, y, width, height, mipLevel, out);\n  }\n}\n", "import {\n  CameraClearFlags,\n  Canvas,\n  ColorWriteMask,\n  Engine,\n  GLCapabilityType,\n  IHardwareRenderer,\n  IPlatformRenderTarget,\n  IPlatformTexture2D,\n  IPlatformTextureCube,\n  Logger,\n  Mesh,\n  Platform,\n  RenderTarget,\n  SubMesh,\n  SystemInfo,\n  Texture2D,\n  Texture2DArray,\n  TextureCube\n} from \"@galacean/engine-core\";\nimport { IPlatformPrimitive } from \"@galacean/engine-design\";\nimport { Color, Vector4 } from \"@galacean/engine-math\";\nimport { GLCapability } from \"./GLCapability\";\nimport { GLExtensions } from \"./GLExtensions\";\nimport { GLPrimitive } from \"./GLPrimitive\";\nimport { GLRenderStates } from \"./GLRenderStates\";\nimport { GLRenderTarget } from \"./GLRenderTarget\";\nimport { GLTexture } from \"./GLTexture\";\nimport { GLTexture2D } from \"./GLTexture2D\";\nimport { GLTexture2DArray } from \"./GLTexture2DArray\";\nimport { GLTextureCube } from \"./GLTextureCube\";\nimport { WebCanvas } from \"./WebCanvas\";\nimport { WebGLExtension } from \"./type\";\n\n/**\n * WebGL mode.\n */\nexport enum WebGLMode {\n  /** Auto, use WebGL2.0 if support, or will fallback to WebGL1.0. */\n  Auto = 0,\n  /** WebGL2.0. */\n  WebGL2 = 1,\n  /** WebGL1.0, */\n  WebGL1 = 2\n}\n\n/**\n * WebGL renderer options.\n */\nexport interface WebGLRendererOptions extends WebGLContextAttributes {\n  /** WebGL mode.*/\n  webGLMode?: WebGLMode;\n\n  /**\n   * @internal\n   * iOS 15 webgl implement has bug, maybe should force call flush command buffer, for example iPhone13(iOS 15.4.1).\n   */\n  _forceFlush?: boolean;\n\n  /**\n   * @internal\n   * Max allow skin uniform vectors count, default is 256\n   * \n   * @remarks large count maybe cause performance issue.\n   */\n  _maxAllowSkinUniformVectorCount?: number;\n}\n\n/**\n * WebGL renderer, including WebGL1.0 and WebGL2.0.\n */\nexport class WebGLRenderer implements IHardwareRenderer {\n  /** @internal */\n  _readFrameBuffer: WebGLFramebuffer;\n  /** @internal */\n  _enableGlobalDepthBias: boolean = false;\n\n  _currentBind: any;\n\n  private _options: WebGLRendererOptions;\n  private _gl: (WebGLRenderingContext & WebGLExtension) | WebGL2RenderingContext;\n  private _renderStates;\n  private _extensions;\n  private _capability: GLCapability;\n  private _isWebGL2: boolean;\n  private _renderer: string;\n  private _webCanvas: WebCanvas;\n\n  private _activeTextureID: number;\n  private _activeTextures: GLTexture[] = new Array(32);\n\n  // cache value\n  private _lastViewport: Vector4 = new Vector4(null, null, null, null);\n  private _lastScissor: Vector4 = new Vector4(null, null, null, null);\n  private _lastClearColor: Color = new Color(null, null, null, null);\n  private _scissorEnable: boolean = false;\n\n  get isWebGL2(): boolean {\n    return this._isWebGL2;\n  }\n\n  get renderer(): string {\n    return this._renderer;\n  }\n\n  /**\n   * GL Context\n   * @member {WebGLRenderingContext}\n   */\n  get gl() {\n    return this._gl;\n  }\n\n  get renderStates(): GLRenderStates {\n    return this._renderStates;\n  }\n\n  get capability(): GLCapability {\n    return this._capability;\n  }\n\n  get canIUseMoreJoints() {\n    return this.capability.canIUseMoreJoints;\n  }\n\n  constructor(initializeOptions: WebGLRendererOptions = {}) {\n    const options = {\n      webGLMode: WebGLMode.Auto,\n      alpha: false,\n      stencil: true,\n      _forceFlush: false,\n      _maxAllowSkinUniformVectorCount: 256,\n      ...initializeOptions\n    };\n    if (SystemInfo.platform === Platform.IPhone || SystemInfo.platform === Platform.IPad) {\n      const version = SystemInfo.operatingSystem.match(/(\\d+).?(\\d+)?.?(\\d+)?/);\n      if (version) {\n        const majorVersion = parseInt(version[1]);\n        const minorVersion = parseInt(version[2]);\n        if (majorVersion === 15 && minorVersion >= 0 && minorVersion <= 4) {\n          options._forceFlush = true;\n        }\n      }\n    }\n    this._options = options;\n  }\n\n  init(canvas: Canvas): void {\n    const options = this._options;\n    const webCanvas = (this._webCanvas = (canvas as WebCanvas)._webCanvas);\n    const webGLMode = options.webGLMode;\n    let gl: (WebGLRenderingContext & WebGLExtension) | WebGL2RenderingContext;\n\n    if (webGLMode == WebGLMode.Auto || webGLMode == WebGLMode.WebGL2) {\n      gl = webCanvas.getContext(\"webgl2\", options);\n      if (!gl && (typeof OffscreenCanvas === \"undefined\" || !(webCanvas instanceof OffscreenCanvas))) {\n        gl = <WebGL2RenderingContext>webCanvas.getContext(\"experimental-webgl2\", options);\n      }\n      this._isWebGL2 = true;\n\n      // Prevent weird browsers to lie (such as safari!)\n      if (gl && !(<WebGL2RenderingContext>gl).deleteQuery) {\n        this._isWebGL2 = false;\n      }\n    }\n\n    if (!gl) {\n      if (webGLMode == WebGLMode.Auto || webGLMode == WebGLMode.WebGL1) {\n        gl = <WebGLRenderingContext & WebGLExtension>webCanvas.getContext(\"webgl\", options);\n        if (!gl && (typeof OffscreenCanvas === \"undefined\" || !(webCanvas instanceof OffscreenCanvas))) {\n          gl = <WebGLRenderingContext & WebGLExtension>webCanvas.getContext(\"experimental-webgl\", options);\n        }\n        this._isWebGL2 = false;\n      }\n    }\n\n    if (!gl) {\n      throw new Error(\"Get GL Context FAILED.\");\n    }\n\n    this._gl = gl;\n    this._activeTextureID = gl.TEXTURE0;\n    this._renderStates = new GLRenderStates(gl);\n    this._extensions = new GLExtensions(this);\n    this._capability = new GLCapability(this);\n    // Make sure the active texture in gl context is on default, because gl context may be used in other webgl renderer.\n    gl.activeTexture(gl.TEXTURE0);\n\n    const debugRenderInfo = gl.getExtension(\"WEBGL_debug_renderer_info\");\n    if (debugRenderInfo != null) {\n      this._renderer = gl.getParameter(debugRenderInfo.UNMASKED_RENDERER_WEBGL);\n    }\n  }\n\n  createPlatformPrimitive(primitive: Mesh): IPlatformPrimitive {\n    return new GLPrimitive(this, primitive);\n  }\n\n  createPlatformTexture2D(texture2D: Texture2D): IPlatformTexture2D {\n    return new GLTexture2D(this, texture2D);\n  }\n\n  createPlatformTexture2DArray(texture2D: Texture2DArray): GLTexture2DArray {\n    return new GLTexture2DArray(this, texture2D);\n  }\n\n  createPlatformTextureCube(textureCube: TextureCube): IPlatformTextureCube {\n    return new GLTextureCube(this, textureCube);\n  }\n\n  createPlatformRenderTarget(target: RenderTarget): IPlatformRenderTarget {\n    return new GLRenderTarget(this, target);\n  }\n\n  requireExtension(ext) {\n    return this._extensions.requireExtension(ext);\n  }\n\n  canIUse(capabilityType: GLCapabilityType) {\n    return this.capability.canIUse(capabilityType);\n  }\n\n  canIUseCompressedTextureInternalFormat(type: number) {\n    return this.capability.canIUseCompressedTextureInternalFormat(type);\n  }\n\n  viewport(x: number, y: number, width: number, height: number): void {\n    const { _gl: gl, _lastViewport: lastViewport } = this;\n    if (x !== lastViewport.x || y !== lastViewport.y || width !== lastViewport.z || height !== lastViewport.w) {\n      gl.viewport(x, y, width, height);\n      lastViewport.set(x, y, width, height);\n    }\n  }\n\n  scissor(x: number, y: number, width: number, height: number): void {\n    const { _gl: gl, _lastScissor: lastScissor } = this;\n    if (x !== lastScissor.x || y !== lastScissor.y || width !== lastScissor.z || height !== lastScissor.w) {\n      const { _webCanvas: webCanvas } = this;\n      if (x === 0 && y === 0 && width === webCanvas.width && height === webCanvas.height) {\n        if (this._scissorEnable) {\n          gl.disable(gl.SCISSOR_TEST);\n          this._scissorEnable = false;\n        }\n      } else {\n        if (!this._scissorEnable) {\n          gl.enable(gl.SCISSOR_TEST);\n          this._scissorEnable = true;\n        }\n        gl.scissor(x, y, width, height);\n      }\n      lastScissor.set(x, y, width, height);\n    }\n  }\n\n  colorMask(r, g, b, a) {\n    this._gl.colorMask(r, g, b, a);\n  }\n\n  clearRenderTarget(engine: Engine, clearFlags: CameraClearFlags, clearColor: Color) {\n    const gl = this._gl;\n    const {\n      blendState: { targetBlendState },\n      depthState,\n      stencilState\n    } = engine._lastRenderState;\n    let clearFlag = 0;\n    if (clearFlags & CameraClearFlags.Color) {\n      clearFlag |= gl.COLOR_BUFFER_BIT;\n\n      const lc = this._lastClearColor;\n      const { r, g, b, a } = clearColor;\n      if (clearColor && (r !== lc.r || g !== lc.g || b !== lc.b || a !== lc.a)) {\n        gl.clearColor(r, g, b, a);\n        lc.set(r, g, b, a);\n      }\n\n      if (targetBlendState.colorWriteMask !== ColorWriteMask.All) {\n        gl.colorMask(true, true, true, true);\n        targetBlendState.colorWriteMask = ColorWriteMask.All;\n      }\n    }\n    if (clearFlags & CameraClearFlags.Depth) {\n      clearFlag |= gl.DEPTH_BUFFER_BIT;\n      if (depthState.writeEnabled !== true) {\n        gl.depthMask(true);\n        depthState.writeEnabled = true;\n      }\n    }\n    if (clearFlags & CameraClearFlags.Stencil) {\n      clearFlag |= gl.STENCIL_BUFFER_BIT;\n      if (stencilState.writeMask !== 0xff) {\n        gl.stencilMask(0xff);\n        stencilState.writeMask = 0xff;\n      }\n    }\n    gl.clear(clearFlag);\n  }\n\n  drawPrimitive(primitive: Mesh, subPrimitive: SubMesh, shaderProgram: any) {\n    // todo: VAO not support morph animation\n    if (primitive) {\n      //@ts-ignore\n      primitive._draw(shaderProgram, subPrimitive);\n    } else {\n      Logger.error(\"draw primitive failed.\");\n    }\n  }\n\n  activeRenderTarget(renderTarget: RenderTarget, viewport: Vector4, mipLevel: number) {\n    const gl = this._gl;\n    let bufferWidth: number, bufferHeight: number;\n    if (renderTarget) {\n      /** @ts-ignore */\n      (renderTarget._platformRenderTarget as GLRenderTarget)?._activeRenderTarget();\n      bufferWidth = renderTarget.width >> mipLevel;\n      bufferHeight = renderTarget.height >> mipLevel;\n    } else {\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      bufferWidth = gl.drawingBufferWidth;\n      bufferHeight = gl.drawingBufferHeight;\n    }\n    const width = bufferWidth * viewport.z;\n    const height = bufferHeight * viewport.w;\n    const x = viewport.x * bufferWidth;\n    const y = bufferHeight - viewport.y * bufferHeight - height;\n    this.viewport(x, y, width, height);\n    this.scissor(x, y, width, height);\n  }\n\n  activeTexture(textureID: number): void {\n    if (this._activeTextureID !== textureID) {\n      this._gl.activeTexture(textureID);\n      this._activeTextureID = textureID;\n    }\n  }\n\n  bindTexture(texture: GLTexture): void {\n    const index = this._activeTextureID - this._gl.TEXTURE0;\n    if (this._activeTextures[index] !== texture) {\n      this._gl.bindTexture(texture._target, texture._glTexture);\n      this._activeTextures[index] = texture;\n    }\n  }\n\n  setGlobalDepthBias(bias: number, slopeBias: number): void {\n    const gl = this._gl;\n    const enable = bias !== 0 || slopeBias !== 0;\n    if (enable) {\n      gl.enable(gl.POLYGON_OFFSET_FILL);\n      gl.polygonOffset(slopeBias, bias);\n    } else {\n      gl.disable(gl.POLYGON_OFFSET_FILL);\n    }\n    this._enableGlobalDepthBias = enable;\n  }\n\n  flush(): void {\n    this._gl.flush();\n  }\n\n  destroy() {}\n}\n", "import { Engine } from \"@galacean/engine-core\";\nimport { WebCanvas } from \"./WebCanvas\";\nimport { WebGLRenderer, WebGLRendererOptions } from \"./WebGLRenderer\";\n\ntype OffscreenCanvas = any;\n\n/**\n * WebGL platform engine,support includes WebGL1.0 and WebGL2.0.\n */\nexport class WebGLEngine extends Engine {\n  /**\n   * Create an engine suitable for the WebGL platform.\n   * @param canvas - Native web canvas\n   * @param webGLRendererOptions - WebGL renderer options\n   */\n  constructor(canvas: string | HTMLCanvasElement | OffscreenCanvas, webGLRendererOptions?: WebGLRendererOptions) {\n    const webCanvas = new WebCanvas(\n      <HTMLCanvasElement | OffscreenCanvas>(typeof canvas === \"string\" ? document.getElementById(canvas) : canvas)\n    );\n    const hardwareRenderer = new WebGLRenderer(webGLRendererOptions);\n    super(webCanvas, hardwareRenderer);\n  }\n\n  /**\n   * Web canvas.\n   */\n  get canvas(): WebCanvas {\n    return this._canvas as WebCanvas;\n  }\n}\n", "export function _extends() {\n    _extends = Object.assign || function assign(target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];\n            for (var key in source) if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n        }\n\n        return target;\n    };\n\n    return _extends.apply(this, arguments);\n}\nexport { _extends as _ };\n", "export function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n", "import { _set_prototype_of } from \"./_set_prototype_of.js\";\n\nexport function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n", "/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.push(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.push(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n", "import {\n  resourceLoader,\n  Loader,\n  AssetPromise,\n  AssetType,\n  LoadItem,\n  ResourceManager,\n  AnimatorController,\n  AnimatorControllerLayer,\n  AnimatorStateMachine,\n  AnimatorStateTransition\n} from \"@galacean/engine-core\";\n\n@resourceLoader(AssetType.AnimatorController, [\"json\"], false)\nclass AnimatorControllerLoader extends Loader<AnimatorController> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<AnimatorController> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<any>(item.url, {\n        ...item,\n        type: \"json\"\n      })\n        .then((data) => {\n          const animatorController = new AnimatorController();\n          const { layers } = data;\n          const promises = [];\n          layers.forEach((layerData, layerIndex: number) => {\n            const { name, blendingMode, weight, stateMachine: stateMachineData } = layerData;\n            const layer = new AnimatorControllerLayer(name);\n            layer.blendingMode = blendingMode;\n            layer.weight = weight;\n            if (stateMachineData) {\n              const { states } = stateMachineData;\n              const stateMachine = (layer.stateMachine = new AnimatorStateMachine());\n              states.forEach((stateData, stateIndex: number) => {\n                const {\n                  name,\n                  speed,\n                  wrapMode,\n                  clipStartNormalizedTime,\n                  clipEndNormalizedTime,\n                  isDefaultState,\n                  clip: clipData\n                } = stateData;\n                const state = stateMachine.addState(name);\n                isDefaultState && (stateMachine.defaultState = state);\n                state.speed = speed;\n                state.wrapMode = wrapMode;\n                state.clipStartTime = clipStartNormalizedTime;\n                state.clipEndTime = clipEndNormalizedTime;\n                if (clipData) {\n                  promises.push(\n                    new Promise((resolve) => {\n                      //@ts-ignore\n                      resourceManager.getResourceByRef(clipData).then((clip) => {\n                        resolve({\n                          layerIndex,\n                          stateIndex,\n                          clip\n                        });\n                      });\n                    })\n                  );\n                }\n              });\n              states.forEach((stateData) => {\n                const { name, transitions } = stateData;\n                transitions.forEach((transitionData) => {\n                  const { targetStateName, duration, offset, exitTime } = transitionData;\n                  const sourceState = stateMachine.findStateByName(name);\n                  const destState = stateMachine.findStateByName(targetStateName);\n                  const transition = new AnimatorStateTransition();\n                  transition.destinationState = destState;\n                  transition.duration = duration;\n                  transition.exitTime = exitTime;\n                  transition.offset = offset;\n                  sourceState.addTransition(transition);\n                });\n              });\n            }\n            animatorController.addLayer(layer);\n          });\n          Promise.all(promises).then((clipData) => {\n            clipData.forEach((data) => {\n              const { layerIndex, stateIndex, clip } = data;\n              animatorController.layers[layerIndex].stateMachine.states[stateIndex].clip = clip;\n            });\n            resolve(animatorController);\n          });\n        })\n        .catch(reject);\n    });\n  }\n}\n", "import { resourceLoader, Loader, AssetPromise, AssetType, LoadItem } from \"@galacean/engine-core\";\n\nfunction isBase64(url) {\n  return /^data:(.+?);base64,/.test(url);\n}\n@resourceLoader(AssetType.Buffer, [\"bin\", \"r3bin\"], false)\nclass BufferLoader extends Loader<ArrayBuffer> {\n  load(item: LoadItem): AssetPromise<ArrayBuffer> {\n    const url = item.url;\n    if (isBase64(url)) {\n      return new AssetPromise((resolve) => {\n        const base64Str = url.slice(13 + RegExp.$1.length);\n        const result = Uint8Array.from(atob(base64Str), (c) => c.charCodeAt(0));\n        resolve(result.buffer);\n      });\n    }\n    return this.request(url, {\n      ...item,\n      type: \"arraybuffer\"\n    });\n  }\n}\n", "import {\n  AmbientLight,\n  AssetPromise,\n  AssetType,\n  DiffuseMode,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  TextureCube,\n  TextureCubeFace,\n  TextureFilterMode\n} from \"@galacean/engine-core\";\nimport { SphericalHarmonics3 } from \"@galacean/engine-math\";\n\n@resourceLoader(AssetType.Env, [\"env\"])\nclass EnvLoader extends Loader<AmbientLight> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<AmbientLight> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<ArrayBuffer>(item.url, { type: \"arraybuffer\" })\n        .then((arraybuffer) => {\n          const shArray = new Float32Array(arraybuffer, 0, 27);\n          const shByteLength = 27 * 4;\n          const size = new Uint16Array(arraybuffer, shByteLength, 1)?.[0];\n\n          const texture = new TextureCube(resourceManager.engine, size);\n          texture.filterMode = TextureFilterMode.Trilinear;\n          const mipmapCount = texture.mipmapCount;\n          let offset = shByteLength + 2;\n\n          for (let mipLevel = 0; mipLevel < mipmapCount; mipLevel++) {\n            const mipSize = size >> mipLevel;\n\n            for (let face = 0; face < 6; face++) {\n              const dataSize = mipSize * mipSize * 4;\n              const data = new Uint8Array(arraybuffer, offset, dataSize);\n              offset += dataSize;\n              texture.setPixelBuffer(TextureCubeFace.PositiveX + face, data, mipLevel);\n            }\n          }\n\n          const ambientLight = new AmbientLight();\n          const sh = new SphericalHarmonics3();\n\n          ambientLight.diffuseMode = DiffuseMode.SphericalHarmonics;\n          sh.copyFromArray(shArray);\n          ambientLight.diffuseSphericalHarmonics = sh;\n          ambientLight.specularTexture = texture;\n          ambientLight.specularTextureDecodeRGBM = true;\n\n          resolve(ambientLight);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n", "function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) resolve(value);\n    else Promise.resolve(value).then(_next, _throw);\n}\nexport function _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n\n            _next(undefined);\n        });\n    };\n}\nexport { _async_to_generator as _ };\n", "import { AssetPromise, AssetType, Font, Loader, LoadItem, resourceLoader, ResourceManager } from \"@galacean/engine-core\";\n\n@resourceLoader(AssetType.Font, [\"font\"], false)\nclass FontLoader extends Loader<Font> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Font> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<any>(item.url, { type: \"json\" })\n        .then((data) => {\n          const { fontName, fontUrl } = data;\n\n          if (fontUrl) {\n            this._registerFont(fontName, fontUrl)\n              .then(() => {\n                const font = new Font(resourceManager.engine, fontName);\n                resolve(font);\n              })\n              .catch((e) => {\n                reject(`load font ${fontUrl} fail`);\n              });\n          } else {\n            const font = new Font(resourceManager.engine, fontName);\n            resolve(font);\n          }\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n\n  private async _registerFont(fontName: string, fontUrl: string): Promise<void> {\n    const fontFace = new FontFace(fontName, `url(${fontUrl})`);\n    await fontFace.load();\n    document.fonts.add(fontFace);\n  }\n}\n", "import {\n  AnimationClip,\n  AssetPromise,\n  Buffer,\n  Entity,\n  Material,\n  ModelMesh,\n  Texture2D,\n  TypedArray\n} from \"@galacean/engine-core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { IGLTF } from \"../Schema\";\n\n/**\n * @internal\n */\nexport class ParserContext {\n  gltf: IGLTF;\n  buffers: ArrayBuffer[];\n  glTFResource: GLTFResource;\n  keepMeshData: boolean;\n  hasSkinned: boolean = false;\n  /** chain asset promise */\n  chainPromises: AssetPromise<any>[] = [];\n  accessorBufferCache: Record<string, BufferInfo> = {};\n\n  texturesPromiseInfo: PromiseInfo<Texture2D[]> = new PromiseInfo<Texture2D[]>();\n  materialsPromiseInfo: PromiseInfo<Material[]> = new PromiseInfo<Material[]>();\n  meshesPromiseInfo: PromiseInfo<ModelMesh[][]> = new PromiseInfo<ModelMesh[][]>();\n  animationClipsPromiseInfo: PromiseInfo<AnimationClip[]> = new PromiseInfo<AnimationClip[]>();\n  defaultSceneRootPromiseInfo: PromiseInfo<Entity> = new PromiseInfo<Entity>();\n  masterPromiseInfo: PromiseInfo<GLTFResource> = new PromiseInfo<GLTFResource>();\n  promiseMap: Record<string, AssetPromise<any>> = {};\n\n  constructor(url: string) {\n    const promiseMap = this.promiseMap;\n    promiseMap[`${url}?q=textures`] = this._initPromiseInfo(this.texturesPromiseInfo);\n    promiseMap[`${url}?q=materials`] = this._initPromiseInfo(this.materialsPromiseInfo);\n    promiseMap[`${url}?q=meshes`] = this._initPromiseInfo(this.meshesPromiseInfo);\n    promiseMap[`${url}?q=animations`] = this._initPromiseInfo(this.animationClipsPromiseInfo);\n    promiseMap[`${url}?q=defaultSceneRoot`] = this._initPromiseInfo(this.defaultSceneRootPromiseInfo);\n    promiseMap[`${url}`] = this._initPromiseInfo(this.masterPromiseInfo);\n  }\n\n  private _initPromiseInfo(promiseInfo): AssetPromise<any> {\n    const promise = new AssetPromise<any>((resolve, reject, setProgress, onCancel) => {\n      promiseInfo.resolve = resolve;\n      promiseInfo.reject = reject;\n      promiseInfo.setProgress = setProgress;\n      promiseInfo.onCancel = onCancel;\n    });\n    promiseInfo.promise = promise;\n    return promise;\n  }\n}\n\n/**\n * @internal\n */\nexport class BufferInfo {\n  vertexBuffer: Buffer;\n  vertexBindingInfos: Record<number, number> = {};\n  constructor(public data: TypedArray, public interleaved: boolean, public stride: number) {}\n}\n\n/**\n * @internal\n */\nexport class PromiseInfo<T> {\n  public promise: AssetPromise<T>;\n  public resolve: (value?: T | PromiseLike<T>) => void;\n  public reject: (reason?: any) => void;\n  public setProgress: (progress: number) => void;\n  public onCancel: (callback: () => void) => void;\n}\n", "/**\n * Module for glTF 2.0 Interface\n */\n\nimport { MeshTopology } from \"@galacean/engine-core\";\n\n/**\n * The datatype of the components in the attribute\n */\nexport enum AccessorComponentType {\n  /**\n   * Byte\n   */\n  BYTE = 5120,\n  /**\n   * Unsigned Byte\n   */\n  UNSIGNED_BYTE = 5121,\n  /**\n   * Short\n   */\n  SHORT = 5122,\n  /**\n   * Unsigned Short\n   */\n  UNSIGNED_SHORT = 5123,\n  /**\n   * Unsigned Int\n   */\n  UNSIGNED_INT = 5125,\n  /**\n   * Float\n   */\n  FLOAT = 5126\n}\n\n/**\n * Specifies if the attirbute is a scalar, vector, or matrix\n */\nexport enum AccessorType {\n  /**\n   * Scalar\n   */\n  SCALAR = \"SCALAR\",\n  /**\n   * Vector2\n   */\n  VEC2 = \"VEC2\",\n  /**\n   * Vector3\n   */\n  VEC3 = \"VEC3\",\n  /**\n   * Vector4\n   */\n  VEC4 = \"VEC4\",\n  /**\n   * Matrix2x2\n   */\n  MAT2 = \"MAT2\",\n  /**\n   * Matrix3x3\n   */\n  MAT3 = \"MAT3\",\n  /**\n   * Matrix4x4\n   */\n  MAT4 = \"MAT4\"\n}\n\n/**\n * The name of the node's TRS property to modify, or the weights of the Morph Targets it instantiates\n */\nexport enum AnimationChannelTargetPath {\n  /**\n   * Translation\n   */\n  TRANSLATION = \"translation\",\n  /**\n   * Rotation\n   */\n  ROTATION = \"rotation\",\n  /**\n   * Scale\n   */\n  SCALE = \"scale\",\n  /**\n   * Weights\n   */\n  WEIGHTS = \"weights\"\n}\n\n/**\n * Interpolation algorithm\n */\nexport enum AnimationSamplerInterpolation {\n  /**\n   * The animated values are linearly interpolated between keyframes\n   */\n  Linear = \"LINEAR\",\n  /**\n   * The animated values remain constant to the output of the first keyframe, until the next keyframe\n   */\n  Step = \"STEP\",\n  /**\n   * The animation's interpolation is computed using a cubic spline with specified tangents\n   */\n  CubicSpine = \"CUBICSPLINE\"\n}\n\n/**\n * A camera's projection.  A node can reference a camera to apply a transform to place the camera in the scene\n */\nexport enum CameraType {\n  /**\n   * A perspective camera containing properties to create a perspective projection matrix\n   */\n  PERSPECTIVE = \"perspective\",\n  /**\n   * An orthographic camera containing properties to create an orthographic projection matrix\n   */\n  ORTHOGRAPHIC = \"orthographic\"\n}\n\n/**\n * The mime-type of the image\n */\nexport enum ImageMimeType {\n  /**\n   * JPEG Mime-type\n   */\n  JPEG = \"image/jpeg\",\n  /**\n   * PNG Mime-type\n   */\n  PNG = \"image/png\"\n}\n\n/**\n * The alpha rendering mode of the material\n */\nexport enum MaterialAlphaMode {\n  /**\n   * The alpha value is ignored and the rendered output is fully opaque\n   */\n  OPAQUE = \"OPAQUE\",\n  /**\n   * The rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value\n   */\n  MASK = \"MASK\",\n  /**\n   * The alpha value is used to composite the source and destination areas. The rendered output is combined with the background using the normal painting operation (i.e. the Porter and Duff over operator)\n   */\n  BLEND = \"BLEND\"\n}\n\n/**\n * Magnification filter.  Valid values correspond to WebGL enums: 9728 (NEAREST) and 9729 (LINEAR)\n */\nexport enum TextureMagFilter {\n  /**\n   * Nearest\n   */\n  NEAREST = 9728,\n  /**\n   * Linear\n   */\n  LINEAR = 9729\n}\n\n/**\n * Minification filter.  All valid values correspond to WebGL enums\n */\nexport enum TextureMinFilter {\n  /**\n   * Nearest\n   */\n  NEAREST = 9728,\n  /**\n   * Linear\n   */\n  LINEAR = 9729,\n  /**\n   * Nearest Mip-Map Nearest\n   */\n  NEAREST_MIPMAP_NEAREST = 9984,\n  /**\n   * Linear Mipmap Nearest\n   */\n  LINEAR_MIPMAP_NEAREST = 9985,\n  /**\n   * Nearest Mipmap Linear\n   */\n  NEAREST_MIPMAP_LINEAR = 9986,\n  /**\n   * Linear Mipmap Linear\n   */\n  LINEAR_MIPMAP_LINEAR = 9987\n}\n\n/**\n * S (U) wrapping mode.  All valid values correspond to WebGL enums\n */\nexport enum TextureWrapMode {\n  /**\n   * Clamp to Edge\n   */\n  CLAMP_TO_EDGE = 33071,\n  /**\n   * Mirrored Repeat\n   */\n  MIRRORED_REPEAT = 33648,\n  /**\n   * Repeat\n   */\n  REPEAT = 10497\n}\n\n/**\n * glTF Property\n */\nexport interface IProperty {\n  /**\n   * Dictionary object with extension-specific objects\n   */\n  extensions?: {\n    [key: string]: any;\n  };\n  /**\n   * Application-Specific data\n   */\n  extras?: any;\n}\n\n/**\n * glTF Child of Root Property\n */\nexport interface IChildRootProperty extends IProperty {\n  /**\n   * The user-defined name of this object\n   */\n  name?: string;\n}\n\n/**\n * Indices of those attributes that deviate from their initialization value\n */\nexport interface IAccessorSparseIndices extends IProperty {\n  /**\n   * The index of the bufferView with sparse indices. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target\n   */\n  bufferView: number;\n  /**\n   * The offset relative to the start of the bufferView in bytes. Must be aligned\n   */\n  byteOffset?: number;\n  /**\n   * The indices data type.  Valid values correspond to WebGL enums: 5121 (UNSIGNED_BYTE), 5123 (UNSIGNED_SHORT), 5125 (UNSIGNED_INT)\n   */\n  componentType: AccessorComponentType;\n}\n\n/**\n * Array of size accessor.sparse.count times number of components storing the displaced accessor attributes pointed by accessor.sparse.indices\n */\nexport interface IAccessorSparseValues extends IProperty {\n  /**\n   * The index of the bufferView with sparse values. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target\n   */\n  bufferView: number;\n  /**\n   * The offset relative to the start of the bufferView in bytes. Must be aligned\n   */\n  byteOffset?: number;\n}\n\n/**\n * Sparse storage of attributes that deviate from their initialization value\n */\nexport interface IAccessorSparse extends IProperty {\n  /**\n   * The number of attributes encoded in this sparse accessor\n   */\n  count: number;\n  /**\n   * Index array of size count that points to those accessor attributes that deviate from their initialization value. Indices must strictly increase\n   */\n  indices: IAccessorSparseIndices;\n  /**\n   * Array of size count times number of components, storing the displaced accessor attributes pointed by indices. Substituted values must have the same componentType and number of components as the base accessor\n   */\n  values: IAccessorSparseValues;\n}\n\n/**\n * A typed view into a bufferView.  A bufferView contains raw binary data.  An accessor provides a typed view into a bufferView or a subset of a bufferView similar to how WebGL's vertexAttribPointer() defines an attribute in a buffer\n */\nexport interface IAccessor extends IChildRootProperty {\n  /**\n   * The index of the bufferview\n   */\n  bufferView?: number;\n  /**\n   * The offset relative to the start of the bufferView in bytes\n   */\n  byteOffset?: number;\n  /**\n   * The datatype of components in the attribute\n   */\n  componentType: AccessorComponentType;\n  /**\n   * Specifies whether integer data values should be normalized\n   */\n  normalized?: boolean;\n  /**\n   * The number of attributes referenced by this accessor\n   */\n  count: number;\n  /**\n   * Specifies if the attribute is a scalar, vector, or matrix\n   */\n  type: AccessorType;\n  /**\n   * Maximum value of each component in this attribute\n   */\n  max?: number[];\n  /**\n   * Minimum value of each component in this attribute\n   */\n  min?: number[];\n  /**\n   * Sparse storage of attributes that deviate from their initialization value\n   */\n  sparse?: IAccessorSparse;\n}\n\n/**\n * Targets an animation's sampler at a node's property\n */\nexport interface IAnimationChannel extends IProperty {\n  /**\n   * The index of a sampler in this animation used to compute the value for the target\n   */\n  sampler: number;\n  /**\n   * The index of the node and TRS property to target\n   */\n  target: IAnimationChannelTarget;\n}\n\n/**\n * The index of the node and TRS property that an animation channel targets\n */\nexport interface IAnimationChannelTarget extends IProperty {\n  /**\n   * The index of the node to target\n   */\n  node: number;\n  /**\n   * The name of the node's TRS property to modify, or the weights of the Morph Targets it instantiates\n   */\n  path: AnimationChannelTargetPath;\n}\n\n/**\n * Combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target)\n */\nexport interface IAnimationSampler extends IProperty {\n  /**\n   * The index of an accessor containing keyframe input values, e.g., time\n   */\n  input: number;\n  /**\n   * Interpolation algorithm\n   */\n  interpolation?: AnimationSamplerInterpolation;\n  /**\n   * The index of an accessor, containing keyframe output values\n   */\n  output: number;\n}\n\n/**\n * A keyframe animation\n */\nexport interface IAnimation extends IChildRootProperty {\n  /**\n   * An array of channels, each of which targets an animation's sampler at a node's property\n   */\n  channels: IAnimationChannel[];\n  /**\n   * An array of samplers that combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target)\n   */\n  samplers: IAnimationSampler[];\n}\n\n/**\n * Metadata about the glTF asset\n */\nexport interface IAsset extends IChildRootProperty {\n  /**\n   * A copyright message suitable for display to credit the content creator\n   */\n  copyright?: string;\n  /**\n   * Tool that generated this glTF model.  Useful for debugging\n   */\n  generator?: string;\n  /**\n   * The glTF version that this asset targets\n   */\n  version: string;\n  /**\n   * The minimum glTF version that this asset targets\n   */\n  minVersion?: string;\n}\n\n/**\n * A buffer points to binary geometry, animation, or skins\n */\nexport interface IBuffer extends IChildRootProperty {\n  /**\n   * The uri of the buffer.  Relative paths are relative to the .gltf file.  Instead of referencing an external file, the uri can also be a data-uri\n   */\n  uri?: string;\n  /**\n   * The length of the buffer in bytes\n   */\n  byteLength: number;\n}\n\n/**\n * A view into a buffer generally representing a subset of the buffer\n */\nexport interface IBufferView extends IChildRootProperty {\n  /**\n   * The index of the buffer\n   */\n  buffer: number;\n  /**\n   * The offset into the buffer in bytes\n   */\n  byteOffset?: number;\n  /**\n   * The lenth of the bufferView in bytes\n   */\n  byteLength: number;\n  /**\n   * The stride, in bytes\n   */\n  byteStride?: number;\n}\n\n/**\n * An orthographic camera containing properties to create an orthographic projection matrix\n */\nexport interface ICameraOrthographic extends IProperty {\n  /**\n   * The floating-point horizontal magnification of the view. Must not be zero\n   */\n  xmag: number;\n  /**\n   * The floating-point vertical magnification of the view. Must not be zero\n   */\n  ymag: number;\n  /**\n   * The floating-point distance to the far clipping plane. zfar must be greater than znear\n   */\n  zfar: number;\n  /**\n   * The floating-point distance to the near clipping plane\n   */\n  znear: number;\n}\n\n/**\n * A perspective camera containing properties to create a perspective projection matrix\n */\nexport interface ICameraPerspective extends IProperty {\n  /**\n   * The floating-point aspect ratio of the field of view\n   */\n  aspectRatio?: number;\n  /**\n   * The floating-point vertical field of view in radians\n   */\n  yfov: number;\n  /**\n   * The floating-point distance to the far clipping plane\n   */\n  zfar?: number;\n  /**\n   * The floating-point distance to the near clipping plane\n   */\n  znear: number;\n}\n\n/**\n * A camera's projection.  A node can reference a camera to apply a transform to place the camera in the scene\n */\nexport interface ICamera extends IChildRootProperty {\n  /**\n   * An orthographic camera containing properties to create an orthographic projection matrix\n   */\n  orthographic?: ICameraOrthographic;\n  /**\n   * A perspective camera containing properties to create a perspective projection matrix\n   */\n  perspective?: ICameraPerspective;\n  /**\n   * Specifies if the camera uses a perspective or orthographic projection\n   */\n  type: CameraType;\n}\n\n/**\n * Image data used to create a texture. Image can be referenced by URI or bufferView index. mimeType is required in the latter case\n */\nexport interface IImage extends IChildRootProperty {\n  /**\n   * The uri of the image.  Relative paths are relative to the .gltf file.  Instead of referencing an external file, the uri can also be a data-uri.  The image format must be jpg or png\n   */\n  uri?: string;\n  /**\n   * The image's MIME type\n   */\n  mimeType?: ImageMimeType;\n  /**\n   * The index of the bufferView that contains the image. Use this instead of the image's uri property\n   */\n  bufferView?: number;\n}\n\n/**\n * Material Normal Texture Info\n */\nexport interface IMaterialNormalTextureInfo extends ITextureInfo {\n  /**\n   * The scalar multiplier applied to each normal vector of the normal texture\n   */\n  scale?: number;\n}\n\n/**\n * Material Occlusion Texture Info\n */\nexport interface IMaterialOcclusionTextureInfo extends ITextureInfo {\n  /**\n   * A scalar multiplier controlling the amount of occlusion applied\n   */\n  strength?: number;\n}\n\n/**\n * A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology\n */\nexport interface IMaterialPbrMetallicRoughness {\n  /**\n   * The material's base color factor\n   */\n  baseColorFactor?: number[];\n  /**\n   * The base color texture\n   */\n  baseColorTexture?: ITextureInfo;\n  /**\n   * The metalness of the material\n   */\n  metallicFactor?: number;\n  /**\n   * The roughness of the material\n   */\n  roughnessFactor?: number;\n  /**\n   * The metallic-roughness texture\n   */\n  metallicRoughnessTexture?: ITextureInfo;\n}\n\n/**\n * The material appearance of a primitive\n */\nexport interface IMaterial extends IChildRootProperty {\n  /**\n   * A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology. When not specified, all the default values of pbrMetallicRoughness apply\n   */\n  pbrMetallicRoughness?: IMaterialPbrMetallicRoughness;\n  /**\n   * The normal map texture\n   */\n  normalTexture?: IMaterialNormalTextureInfo;\n  /**\n   * The occlusion map texture\n   */\n  occlusionTexture?: IMaterialOcclusionTextureInfo;\n  /**\n   * The emissive map texture\n   */\n  emissiveTexture?: ITextureInfo;\n  /**\n   * The RGB components of the emissive color of the material. These values are linear. If an emissiveTexture is specified, this value is multiplied with the texel values\n   */\n  emissiveFactor?: number[];\n  /**\n   * The alpha rendering mode of the material\n   */\n  alphaMode?: MaterialAlphaMode;\n  /**\n   * The alpha cutoff value of the material\n   */\n  alphaCutoff?: number;\n  /**\n   * Specifies whether the material is double sided\n   */\n  doubleSided?: boolean;\n}\n\n/**\n * Geometry to be rendered with the given material\n */\nexport interface IMeshPrimitive extends IProperty {\n  /**\n   * A dictionary object, where each key corresponds to mesh attribute semantic and each value is the index of the accessor containing attribute's data\n   */\n  attributes: {\n    [name: string]: number;\n  };\n  /**\n   * The index of the accessor that contains the indices\n   */\n  indices?: number;\n  /**\n   * The index of the material to apply to this primitive when rendering\n   */\n  material?: number;\n  /**\n   * The type of primitives to render. All valid values correspond to WebGL enums\n   */\n  mode?: MeshTopology;\n  /**\n   * An array of Morph Targets, each  Morph Target is a dictionary mapping attributes (only POSITION, NORMAL, and TANGENT supported) to their deviations in the Morph Target\n   */\n  targets?: {\n    [name: string]: number;\n  }[];\n}\n\n/**\n * A set of primitives to be rendered.  A node can contain one mesh.  A node's transform places the mesh in the scene\n */\nexport interface IMesh extends IChildRootProperty {\n  /**\n   * An array of primitives, each defining geometry to be rendered with a material\n   */\n  primitives: IMeshPrimitive[];\n  /**\n   * Array of weights to be applied to the Morph Targets\n   */\n  weights?: number[];\n}\n\n/**\n * A node in the node hierarchy\n */\nexport interface INode extends IChildRootProperty {\n  /**\n   * The index of the camera referenced by this node\n   */\n  camera?: number;\n  /**\n   * The indices of this node's children\n   */\n  children?: number[];\n  /**\n   * The index of the skin referenced by this node\n   */\n  skin?: number;\n  /**\n   * A floating-point 4x4 transformation matrix stored in column-major order\n   */\n  matrix?: number[];\n  /**\n   * The index of the mesh in this node\n   */\n  mesh?: number;\n  /**\n   * The node's unit quaternion rotation in the order (x, y, z, w), where w is the scalar\n   */\n  rotation?: number[];\n  /**\n   * The node's non-uniform scale, given as the scaling factors along the x, y, and z axes\n   */\n  scale?: number[];\n  /**\n   * The node's translation along the x, y, and z axes\n   */\n  translation?: number[];\n  /**\n   * The weights of the instantiated Morph Target. Number of elements must match number of Morph Targets of used mesh\n   */\n  weights?: number[];\n}\n\n/**\n * Texture sampler properties for filtering and wrapping modes\n */\nexport interface ISampler extends IChildRootProperty {\n  /**\n   * Magnification filter.  Valid values correspond to WebGL enums: 9728 (NEAREST) and 9729 (LINEAR)\n   */\n  magFilter?: TextureMagFilter;\n  /**\n   * Minification filter.  All valid values correspond to WebGL enums\n   */\n  minFilter?: TextureMinFilter;\n  /**\n   * S (U) wrapping mode.  All valid values correspond to WebGL enums\n   */\n  wrapS?: TextureWrapMode;\n  /**\n   * T (V) wrapping mode.  All valid values correspond to WebGL enums\n   */\n  wrapT?: TextureWrapMode;\n}\n\n/**\n * The root nodes of a scene\n */\nexport interface IScene extends IChildRootProperty {\n  /**\n   * The indices of each root node\n   */\n  nodes: number[];\n}\n\n/**\n * Joints and matrices defining a skin\n */\nexport interface ISkin extends IChildRootProperty {\n  /**\n   * The index of the accessor containing the floating-point 4x4 inverse-bind matrices.  The default is that each matrix is a 4x4 identity matrix, which implies that inverse-bind matrices were pre-applied\n   */\n  inverseBindMatrices?: number;\n  /**\n   * The index of the node used as a skeleton root. When undefined, joints transforms resolve to scene root\n   */\n  skeleton?: number;\n  /**\n   * Indices of skeleton nodes, used as joints in this skin.  The array length must be the same as the count property of the inverseBindMatrices accessor (when defined)\n   */\n  joints: number[];\n}\n\n/**\n * A texture and its sampler\n */\nexport interface ITexture extends IChildRootProperty {\n  /**\n   * The index of the sampler used by this texture. When undefined, a sampler with repeat wrapping and auto filtering should be used\n   */\n  sampler?: number;\n  /**\n   * The index of the image used by this texture\n   */\n  source: number;\n}\n\n/**\n * Reference to a texture\n */\nexport interface ITextureInfo extends IProperty {\n  /**\n   * The index of the texture\n   */\n  index: number;\n  /**\n   * The set index of texture's TEXCOORD attribute used for texture coordinate mapping\n   */\n  texCoord?: number;\n}\n\n/**\n * The root object for a glTF asset\n */\nexport interface IGLTF extends IProperty {\n  /**\n   * An array of accessors. An accessor is a typed view into a bufferView\n   */\n  accessors?: IAccessor[];\n  /**\n   * An array of keyframe animations\n   */\n  animations?: IAnimation[];\n  /**\n   * Metadata about the glTF asset\n   */\n  asset: IAsset;\n  /**\n   * An array of buffers.  A buffer points to binary geometry, animation, or skins\n   */\n  buffers?: IBuffer[];\n  /**\n   * An array of bufferViews.  A bufferView is a view into a buffer generally representing a subset of the buffer\n   */\n  bufferViews?: IBufferView[];\n  /**\n   * An array of cameras\n   */\n  cameras?: ICamera[];\n  /**\n   * Names of glTF extensions used somewhere in this asset\n   */\n  extensionsUsed?: string[];\n  /**\n   * Names of glTF extensions required to properly load this asset\n   */\n  extensionsRequired?: string[];\n  /**\n   * An array of images.  An image defines data used to create a texture\n   */\n  images?: IImage[];\n  /**\n   * An array of materials.  A material defines the appearance of a primitive\n   */\n  materials?: IMaterial[];\n  /**\n   * An array of meshes.  A mesh is a set of primitives to be rendered\n   */\n  meshes?: IMesh[];\n  /**\n   * An array of nodes\n   */\n  nodes?: INode[];\n  /**\n   * An array of samplers.  A sampler contains properties for texture filtering and wrapping modes\n   */\n  samplers?: ISampler[];\n  /**\n   * The index of the default scene\n   */\n  scene?: number;\n  /**\n   * An array of scenes\n   */\n  scenes?: IScene[];\n  /**\n   * An array of skins.  A skin is defined by joints and matrices\n   */\n  skins?: ISkin[];\n  /**\n   * An array of textures\n   */\n  textures?: ITexture[];\n}\n", "import { IndexFormat, TypedArray, VertexElementFormat } from \"@galacean/engine-core\";\nimport { Color, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { BufferInfo, ParserContext } from \"./parser/ParserContext\";\nimport { AccessorComponentType, AccessorType, IAccessor, IBufferView, IGLTF } from \"./Schema\";\n\nconst charCodeOfDot = \".\".charCodeAt(0);\nconst reEscapeChar = /\\\\(\\\\)?/g;\nconst rePropName = RegExp(\n  // Match anything that isn't a dot or bracket.\n  \"[^.[\\\\]]+\" +\n    \"|\" +\n    // Or match property names within brackets.\n    \"\\\\[(?:\" +\n    // Match a non-string expression.\n    \"([^\\\"'][^[]*)\" +\n    \"|\" +\n    // Or match strings (supports escaping characters).\n    \"([\\\"'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2\" +\n    \")\\\\]\" +\n    \"|\" +\n    // Or match \"\" as the space between consecutive dots or empty brackets.\n    \"(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))\",\n  \"g\"\n);\n\n/**\n * @internal\n */\nexport class GLTFUtil {\n  public static floatBufferToVector2Array(buffer: Float32Array): Vector2[] {\n    const bufferLen = buffer.length;\n    const array = new Array<Vector2>(bufferLen / 2);\n    for (let i = 0; i < bufferLen; i += 2) {\n      array[i / 2] = new Vector2(buffer[i], buffer[i + 1]);\n    }\n    return array;\n  }\n\n  public static floatBufferToVector3Array(buffer: Float32Array): Vector3[] {\n    const bufferLen = buffer.length;\n    const array = new Array<Vector3>(bufferLen / 3);\n    for (let i = 0; i < bufferLen; i += 3) {\n      array[i / 3] = new Vector3(buffer[i], buffer[i + 1], buffer[i + 2]);\n    }\n    return array;\n  }\n\n  public static floatBufferToVector4Array(buffer: Float32Array): Vector4[] {\n    const bufferLen = buffer.length;\n    const array = new Array<Vector4>(bufferLen / 4);\n    for (let i = 0; i < bufferLen; i += 4) {\n      array[i / 4] = new Vector4(buffer[i], buffer[i + 1], buffer[i + 2], buffer[i + 3]);\n    }\n    return array;\n  }\n\n  public static floatBufferToColorArray(buffer: Float32Array, isColor3: boolean): Color[] {\n    const bufferLen = buffer.length;\n    const colors = new Array<Color>(bufferLen / (isColor3 ? 3 : 4));\n\n    if (isColor3) {\n      for (let i = 0; i < bufferLen; i += 3) {\n        colors[i / 3] = new Color(buffer[i], buffer[i + 1], buffer[i + 2], 1.0);\n      }\n    } else {\n      for (let i = 0; i < bufferLen; i += 4) {\n        colors[i / 4] = new Color(buffer[i], buffer[i + 1], buffer[i + 2], buffer[i + 3]);\n      }\n    }\n\n    return colors;\n  }\n\n  /**\n   * Parse binary text for glb loader.\n   */\n  static decodeText(array: Uint8Array): string {\n    if (typeof TextDecoder !== \"undefined\") {\n      return new TextDecoder().decode(array);\n    }\n\n    // TextDecoder polyfill\n    let s = \"\";\n\n    for (let i = 0, il = array.length; i < il; i++) {\n      s += String.fromCharCode(array[i]);\n    }\n\n    return decodeURIComponent(encodeURIComponent(s));\n  }\n\n  /**\n   * Get the number of bytes occupied by accessor type.\n   */\n  static getAccessorTypeSize(accessorType: AccessorType): number {\n    switch (accessorType) {\n      case AccessorType.SCALAR:\n        return 1;\n      case AccessorType.VEC2:\n        return 2;\n      case AccessorType.VEC3:\n        return 3;\n      case AccessorType.VEC4:\n        return 4;\n      case AccessorType.MAT2:\n        return 4;\n      case AccessorType.MAT3:\n        return 9;\n      case AccessorType.MAT4:\n        return 16;\n    }\n  }\n\n  /**\n   * Get the TypedArray corresponding to the component type.\n   */\n  static getComponentType(componentType: AccessorComponentType) {\n    switch (componentType) {\n      case AccessorComponentType.BYTE:\n        return Int8Array;\n      case AccessorComponentType.UNSIGNED_BYTE:\n        return Uint8Array;\n      case AccessorComponentType.SHORT:\n        return Int16Array;\n      case AccessorComponentType.UNSIGNED_SHORT:\n        return Uint16Array;\n      case AccessorComponentType.UNSIGNED_INT:\n        return Uint32Array;\n      case AccessorComponentType.FLOAT:\n        return Float32Array;\n    }\n  }\n\n  static getNormalizedComponentScale(componentType: AccessorComponentType) {\n    // Reference: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization#encoding-quantized-data\n    switch (componentType) {\n      case AccessorComponentType.BYTE:\n        return 1 / 127;\n      case AccessorComponentType.UNSIGNED_BYTE:\n        return 1 / 255;\n      case AccessorComponentType.SHORT:\n        return 1 / 32767;\n      case AccessorComponentType.UNSIGNED_SHORT:\n        return 1 / 65535;\n      default:\n        throw new Error(\"Galacean.GLTFLoader: Unsupported normalized accessor component type.\");\n    }\n  }\n\n  static getAccessorBuffer(context: ParserContext, gltf: IGLTF, accessor: IAccessor): BufferInfo {\n    const { buffers } = context;\n    const bufferViews = gltf.bufferViews;\n\n    const componentType = accessor.componentType;\n    const bufferView = bufferViews[accessor.bufferView];\n\n    const buffer = buffers[bufferView.buffer];\n    const bufferByteOffset = bufferView.byteOffset || 0;\n    const byteOffset = accessor.byteOffset || 0;\n\n    const TypedArray = GLTFUtil.getComponentType(componentType);\n    const dataElmentSize = GLTFUtil.getAccessorTypeSize(accessor.type);\n    const dataElementBytes = TypedArray.BYTES_PER_ELEMENT;\n    const elementStride = dataElmentSize * dataElementBytes;\n    const accessorCount = accessor.count;\n    const bufferStride = bufferView.byteStride;\n\n    let bufferInfo: BufferInfo;\n    // According to the glTF official documentation only byteStride not undefined is allowed\n    if (bufferStride !== undefined && bufferStride !== elementStride) {\n      const bufferSlice = Math.floor(byteOffset / bufferStride);\n      const bufferCacheKey = accessor.bufferView + \":\" + componentType + \":\" + bufferSlice + \":\" + accessorCount;\n      const accessorBufferCache = context.accessorBufferCache;\n      bufferInfo = accessorBufferCache[bufferCacheKey];\n      if (!bufferInfo) {\n        const offset = bufferByteOffset + bufferSlice * bufferStride;\n        const count = accessorCount * (bufferStride / dataElementBytes);\n        const data = new TypedArray(buffer, offset, count);\n        accessorBufferCache[bufferCacheKey] = bufferInfo = new BufferInfo(data, true, bufferStride);\n      }\n    } else {\n      const offset = bufferByteOffset + byteOffset;\n      const count = accessorCount * dataElmentSize;\n      const data = new TypedArray(buffer, offset, count);\n      bufferInfo = new BufferInfo(data, false, elementStride);\n    }\n\n    if (accessor.sparse) {\n      const data = GLTFUtil.processingSparseData(gltf, accessor, buffers, bufferInfo.data);\n      bufferInfo = new BufferInfo(data, false, bufferInfo.stride);\n    }\n    return bufferInfo;\n  }\n\n  /**\n   * @deprecated\n   * Get accessor data.\n   */\n  static getAccessorData(gltf: IGLTF, accessor: IAccessor, buffers: ArrayBuffer[]): TypedArray {\n    const bufferViews = gltf.bufferViews;\n    const bufferView = bufferViews[accessor.bufferView];\n    const arrayBuffer = buffers[bufferView.buffer];\n    const accessorByteOffset = accessor.hasOwnProperty(\"byteOffset\") ? accessor.byteOffset : 0;\n    const bufferViewByteOffset = bufferView.hasOwnProperty(\"byteOffset\") ? bufferView.byteOffset : 0;\n    const byteOffset = accessorByteOffset + bufferViewByteOffset;\n    const accessorTypeSize = GLTFUtil.getAccessorTypeSize(accessor.type);\n    const length = accessorTypeSize * accessor.count;\n    const byteStride = bufferView.byteStride ?? 0;\n    const arrayType = GLTFUtil.getComponentType(accessor.componentType);\n    let uint8Array;\n    if (byteStride) {\n      const accessorByteSize = accessorTypeSize * arrayType.BYTES_PER_ELEMENT;\n      uint8Array = new Uint8Array(accessor.count * accessorByteSize);\n      const originalBufferView = new Uint8Array(arrayBuffer, bufferViewByteOffset, bufferView.byteLength);\n      for (let i = 0; i < accessor.count; i++) {\n        for (let j = 0; j < accessorByteSize; j++) {\n          uint8Array[i * accessorByteSize + j] = originalBufferView[i * byteStride + accessorByteOffset + j];\n        }\n      }\n    } else {\n      uint8Array = new Uint8Array(arrayBuffer.slice(byteOffset, byteOffset + length * arrayType.BYTES_PER_ELEMENT));\n    }\n\n    const typedArray = new arrayType(uint8Array.buffer);\n\n    if (accessor.sparse) {\n      const { count, indices, values } = accessor.sparse;\n      const indicesBufferView = bufferViews[indices.bufferView];\n      const valuesBufferView = bufferViews[values.bufferView];\n      const indicesArrayBuffer = buffers[indicesBufferView.buffer];\n      const valuesArrayBuffer = buffers[valuesBufferView.buffer];\n      const indicesByteOffset = (indices.byteOffset ?? 0) + (indicesBufferView.byteOffset ?? 0);\n      const indicesByteLength = indicesBufferView.byteLength;\n      const valuesByteOffset = (values.byteOffset ?? 0) + (valuesBufferView.byteOffset ?? 0);\n      const valuesByteLength = valuesBufferView.byteLength;\n\n      const indicesType = GLTFUtil.getComponentType(indices.componentType);\n      const indicesArray = new indicesType(\n        indicesArrayBuffer,\n        indicesByteOffset,\n        indicesByteLength / indicesType.BYTES_PER_ELEMENT\n      );\n      const valuesArray = new arrayType(\n        valuesArrayBuffer,\n        valuesByteOffset,\n        valuesByteLength / arrayType.BYTES_PER_ELEMENT\n      );\n\n      for (let i = 0; i < count; i++) {\n        const replaceIndex = indicesArray[i];\n        for (let j = 0; j < accessorTypeSize; j++) {\n          typedArray[replaceIndex * accessorTypeSize + j] = valuesArray[i * accessorTypeSize + j];\n        }\n      }\n    }\n\n    return typedArray;\n  }\n\n  static getBufferViewData(bufferView: IBufferView, buffers: ArrayBuffer[]): ArrayBuffer {\n    const { buffer, byteOffset = 0, byteLength } = bufferView;\n    const arrayBuffer = buffers[buffer];\n\n    return arrayBuffer.slice(byteOffset, byteOffset + byteLength);\n  }\n\n  /**\n   * Get accessor data.\n   */\n  static processingSparseData(\n    gltf: IGLTF,\n    accessor: IAccessor,\n    buffers: ArrayBuffer[],\n    originData: TypedArray\n  ): TypedArray {\n    const bufferViews = gltf.bufferViews;\n    const accessorTypeSize = GLTFUtil.getAccessorTypeSize(accessor.type);\n    const TypedArray = GLTFUtil.getComponentType(accessor.componentType);\n    const data = originData.slice();\n\n    const { count, indices, values } = accessor.sparse;\n    const indicesBufferView = bufferViews[indices.bufferView];\n    const valuesBufferView = bufferViews[values.bufferView];\n    const indicesArrayBuffer = buffers[indicesBufferView.buffer];\n    const valuesArrayBuffer = buffers[valuesBufferView.buffer];\n    const indicesByteOffset = (indices.byteOffset ?? 0) + (indicesBufferView.byteOffset ?? 0);\n    const indicesByteLength = indicesBufferView.byteLength;\n    const valuesByteOffset = (values.byteOffset ?? 0) + (valuesBufferView.byteOffset ?? 0);\n    const valuesByteLength = valuesBufferView.byteLength;\n\n    const IndexTypeArray = GLTFUtil.getComponentType(indices.componentType);\n    const indicesArray = new IndexTypeArray(\n      indicesArrayBuffer,\n      indicesByteOffset,\n      indicesByteLength / IndexTypeArray.BYTES_PER_ELEMENT\n    );\n    const valuesArray = new TypedArray(\n      valuesArrayBuffer,\n      valuesByteOffset,\n      valuesByteLength / TypedArray.BYTES_PER_ELEMENT\n    );\n\n    for (let i = 0; i < count; i++) {\n      const replaceIndex = indicesArray[i];\n      for (let j = 0; j < accessorTypeSize; j++) {\n        data[replaceIndex * accessorTypeSize + j] = valuesArray[i * accessorTypeSize + j];\n      }\n    }\n\n    return data;\n  }\n\n  static getIndexFormat(type: AccessorComponentType): IndexFormat {\n    switch (type) {\n      case AccessorComponentType.UNSIGNED_BYTE:\n        return IndexFormat.UInt8;\n      case AccessorComponentType.UNSIGNED_SHORT:\n        return IndexFormat.UInt16;\n      case AccessorComponentType.UNSIGNED_INT:\n        return IndexFormat.UInt32;\n    }\n  }\n\n  static getElementFormat(type: AccessorComponentType, size: number, normalized: boolean = false): VertexElementFormat {\n    if (type == AccessorComponentType.FLOAT) {\n      switch (size) {\n        case 1:\n          return VertexElementFormat.Float;\n        case 2:\n          return VertexElementFormat.Vector2;\n        case 3:\n          return VertexElementFormat.Vector3;\n        case 4:\n          return VertexElementFormat.Vector4;\n      }\n    }\n\n    if (type == AccessorComponentType.SHORT) {\n      switch (size) {\n        case 2:\n          return normalized ? VertexElementFormat.NormalizedShort2 : VertexElementFormat.Short2;\n        case 3:\n        case 4:\n          return normalized ? VertexElementFormat.NormalizedShort4 : VertexElementFormat.Short4;\n      }\n    }\n\n    if (type == AccessorComponentType.UNSIGNED_SHORT) {\n      switch (size) {\n        case 2:\n          return normalized ? VertexElementFormat.NormalizedUShort2 : VertexElementFormat.UShort2;\n        case 3:\n        case 4:\n          return normalized ? VertexElementFormat.NormalizedUShort4 : VertexElementFormat.UShort4;\n      }\n    }\n\n    if (type == AccessorComponentType.BYTE) {\n      switch (size) {\n        case 2:\n        case 3:\n        case 4:\n          return normalized ? VertexElementFormat.NormalizedByte4 : VertexElementFormat.Byte4;\n      }\n    }\n\n    if (type == AccessorComponentType.UNSIGNED_BYTE) {\n      switch (size) {\n        case 2:\n        case 3:\n        case 4:\n          return normalized ? VertexElementFormat.NormalizedUByte4 : VertexElementFormat.UByte4;\n      }\n    }\n  }\n\n  /**\n   * Load image buffer\n   */\n  static loadImageBuffer(imageBuffer: ArrayBuffer, type: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n      const blob = new window.Blob([imageBuffer], { type });\n      const img = new Image();\n      img.onerror = function () {\n        reject(new Error(\"Failed to load image buffer\"));\n      };\n      img.onload = function () {\n        // Call requestAnimationFrame to avoid iOS's bug.\n        requestAnimationFrame(() => {\n          resolve(img);\n          img.onload = null;\n          img.onerror = null;\n          img.onabort = null;\n        });\n      };\n      img.crossOrigin = \"anonymous\";\n      img.src = URL.createObjectURL(blob);\n    });\n  }\n\n  static isAbsoluteUrl(url: string): boolean {\n    return /^(?:http|blob|data:|\\/)/.test(url);\n  }\n\n  static parseRelativeUrl(baseUrl: string, relativeUrl: string): string {\n    if (GLTFUtil.isAbsoluteUrl(relativeUrl)) {\n      return relativeUrl;\n    }\n\n    return baseUrl.substring(0, baseUrl.lastIndexOf(\"/\") + 1) + GLTFUtil._formatRelativePath(relativeUrl);\n  }\n\n  /**\n   * Parse the glb format.\n   */\n  static parseGLB(glb: ArrayBuffer): {\n    gltf: IGLTF;\n    buffers: ArrayBuffer[];\n  } {\n    const UINT32_LENGTH = 4;\n    const GLB_HEADER_MAGIC = 0x46546c67; // 'glTF'\n    const GLB_HEADER_LENGTH = 12;\n    const GLB_CHUNK_TYPES = { JSON: 0x4e4f534a, BIN: 0x004e4942 };\n\n    const dataView = new DataView(glb);\n\n    // read header\n    const header = {\n      magic: dataView.getUint32(0, true),\n      version: dataView.getUint32(UINT32_LENGTH, true),\n      length: dataView.getUint32(2 * UINT32_LENGTH, true)\n    };\n\n    if (header.magic !== GLB_HEADER_MAGIC) {\n      console.error(\"Invalid glb magic number. Expected 0x46546C67, found 0x\" + header.magic.toString(16));\n      return null;\n    }\n\n    // read main data\n    let chunkLength = dataView.getUint32(GLB_HEADER_LENGTH, true);\n    let chunkType = dataView.getUint32(GLB_HEADER_LENGTH + UINT32_LENGTH, true);\n\n    // read glTF json\n    if (chunkType !== GLB_CHUNK_TYPES.JSON) {\n      console.error(\"Invalid glb chunk type. Expected 0x4E4F534A, found 0x\" + chunkType.toString(16));\n      return null;\n    }\n\n    const glTFData = new Uint8Array(glb, GLB_HEADER_LENGTH + 2 * UINT32_LENGTH, chunkLength);\n    const gltf: IGLTF = JSON.parse(GLTFUtil.decodeText(glTFData));\n\n    // read all buffers\n    const buffers: ArrayBuffer[] = [];\n    let byteOffset = GLB_HEADER_LENGTH + 2 * UINT32_LENGTH + chunkLength;\n\n    while (byteOffset < header.length) {\n      chunkLength = dataView.getUint32(byteOffset, true);\n      chunkType = dataView.getUint32(byteOffset + UINT32_LENGTH, true);\n\n      if (chunkType !== GLB_CHUNK_TYPES.BIN) {\n        console.error(\"Invalid glb chunk type. Expected 0x004E4942, found 0x\" + chunkType.toString(16));\n        return null;\n      }\n\n      const currentOffset = byteOffset + 2 * UINT32_LENGTH;\n      const buffer = glb.slice(currentOffset, currentOffset + chunkLength);\n      buffers.push(buffer);\n\n      byteOffset += chunkLength + 2 * UINT32_LENGTH;\n    }\n\n    return {\n      gltf,\n      buffers\n    };\n  }\n\n  private static _formatRelativePath(path: string): string {\n    // For example input is \"a/b\", \"/a/b\", \"./a/b\", \"./a/./b\", \"./a/../a/b\", output is \"a/b\"\n    return path\n      .split(\"/\")\n      .filter(Boolean)\n      .reduce((acc, cur) => {\n        if (cur === \"..\") acc.pop();\n        else if (cur !== \".\") acc.push(cur);\n        return acc;\n      }, [])\n      .join(\"/\");\n  }\n}\n", "export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n", "import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n", "export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n", "export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n", "import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n", "import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n", "import { AnimationClip, AssetPromise, EngineObject, Material, Mesh } from \"@galacean/engine-core\";\nimport { ExtensionParser } from \"../extensions/ExtensionParser\";\nimport { ExtensionSchema } from \"../extensions/Schema\";\nimport { ParserContext } from \"./ParserContext\";\n\nexport abstract class Parser {\n  private static _extensionParsers: Record<string, ExtensionParser[]> = {};\n\n  static parseEngineResource(\n    extensionName: string,\n    extensionSchema: ExtensionSchema,\n    parseResource: EngineObject,\n    context: ParserContext,\n    ...extra\n  ): void {\n    const parsers = Parser._extensionParsers[extensionName];\n\n    if (parsers?.length) {\n      for (let i = 0; i < parsers.length; i++) {\n        parsers[i].parseEngineResource(extensionSchema, parseResource, context, ...extra);\n      }\n    }\n  }\n\n  static createEngineResource<T extends EngineObject>(\n    extensionName: string,\n    extensionSchema: ExtensionSchema,\n    context: ParserContext,\n    ...extra\n  ): T | Promise<T> {\n    const parsers = Parser._extensionParsers[extensionName];\n\n    if (parsers?.length) {\n      return parsers[0].createEngineResource(extensionSchema, context, ...extra) as T;\n    }\n  }\n\n  static hasExtensionParser(extensionName: string): boolean {\n    const parsers = Parser._extensionParsers[extensionName];\n    return !!parsers?.length;\n  }\n\n  static initialize(extensionName: string) {\n    const parsers = Parser._extensionParsers[extensionName];\n\n    if (parsers?.length) {\n      for (let i = 0; i < parsers.length; i++) {\n        parsers[i].initialize();\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _addExtensionParser(extensionName: string, extensionParser: ExtensionParser) {\n    if (!Parser._extensionParsers[extensionName]) {\n      Parser._extensionParsers[extensionName] = [];\n    }\n    Parser._extensionParsers[extensionName].push(extensionParser);\n  }\n\n  abstract parse(context: ParserContext): AssetPromise<any> | void | Material | AnimationClip | Mesh;\n}\n\n/**\n * Declare ExtensionParser's decorator.\n * @param extensionName - Extension name\n */\nexport function registerExtension(extensionName: string) {\n  return (parser: new () => ExtensionParser) => {\n    const extensionParser = new parser();\n\n    Parser._addExtensionParser(extensionName, extensionParser);\n  };\n}\n", "import { EngineObject } from \"@galacean/engine-core\";\nimport { ParserContext } from \"../parser/ParserContext\";\nimport { ExtensionSchema } from \"./Schema\";\n\nexport abstract class ExtensionParser {\n  initialize(): void {}\n\n  parseEngineResource(\n    schema: ExtensionSchema,\n    parseResource: EngineObject,\n    context: ParserContext,\n    ...extra\n  ): void | Promise<void> {}\n\n  createEngineResource(\n    schema: ExtensionSchema,\n    context: ParserContext,\n    ...extra\n  ): EngineObject | Promise<EngineObject> {\n    return null;\n  }\n}\n", "import { DRACODecoder } from \"@galacean/engine-draco\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ParserContext } from \"../parser/ParserContext\";\nimport { IMeshPrimitive } from \"../Schema\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRDracoMeshCompression } from \"./Schema\";\n\n@registerExtension(\"KHR_draco_mesh_compression\")\nclass KHR_draco_mesh_compression extends ExtensionParser {\n  private static _decoder: DRACODecoder;\n\n  initialize(): void {\n    if (!KHR_draco_mesh_compression._decoder) {\n      KHR_draco_mesh_compression._decoder = new DRACODecoder();\n    }\n  }\n\n  createEngineResource(schema: IKHRDracoMeshCompression, context: ParserContext, gltfPrimitive: IMeshPrimitive) {\n    const { gltf, buffers } = context;\n    const { bufferViews, accessors } = gltf;\n    const { bufferView: bufferViewIndex, attributes: gltfAttributeMap } = schema;\n\n    const attributeMap = {};\n    const attributeTypeMap = {};\n    for (let attributeName in gltfAttributeMap) {\n      attributeMap[attributeName] = gltfAttributeMap[attributeName];\n    }\n    for (let attributeName in gltfPrimitive.attributes) {\n      if (gltfAttributeMap[attributeName] !== undefined) {\n        const accessorDef = accessors[gltfPrimitive.attributes[attributeName]];\n        attributeTypeMap[attributeName] = GLTFUtil.getComponentType(accessorDef.componentType).name;\n      }\n    }\n    const indexAccessor = accessors[gltfPrimitive.indices];\n    const indexType = GLTFUtil.getComponentType(indexAccessor.componentType).name;\n    const taskConfig = {\n      attributeIDs: attributeMap,\n      attributeTypes: attributeTypeMap,\n      useUniqueIDs: true,\n      indexType\n    };\n    const buffer = GLTFUtil.getBufferViewData(bufferViews[bufferViewIndex], buffers);\n    return KHR_draco_mesh_compression._decoder.decode(buffer, taskConfig).then((parsedGeometry) => parsedGeometry);\n  }\n}\n", "export function _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else return left instanceof right;\n}\nexport { _instanceof as _ };\n", "import { DirectLight, Entity, PointLight, SpotLight } from \"@galacean/engine-core\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ParserContext } from \"../parser/ParserContext\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRLightsPunctual_Light } from \"./Schema\";\n\n@registerExtension(\"KHR_lights_punctual\")\nclass KHR_lights_punctual extends ExtensionParser {\n  parseEngineResource(schema: IKHRLightsPunctual_Light, entity: Entity, context: ParserContext): void {\n    const { color, intensity = 1, type, range, spot } = schema;\n    const glTFResource = context.glTFResource;\n    let light: DirectLight | PointLight | SpotLight;\n\n    if (type === \"directional\") {\n      light = entity.addComponent(DirectLight);\n    } else if (type === \"point\") {\n      light = entity.addComponent(PointLight);\n    } else if (type === \"spot\") {\n      light = entity.addComponent(SpotLight);\n    }\n\n    if (color) {\n      light.color.set(color[0], color[1], color[2], 1);\n    }\n\n    light.intensity = intensity;\n\n    if (range && !(light instanceof DirectLight)) {\n      light.distance = range;\n    }\n\n    if (spot && light instanceof SpotLight) {\n      const { innerConeAngle = 0, outerConeAngle = Math.PI / 4 } = spot;\n\n      light.angle = innerConeAngle;\n      light.penumbra = outerConeAngle - innerConeAngle;\n    }\n\n    if (!glTFResource.lights) glTFResource.lights = [];\n    glTFResource.lights.push(light);\n  }\n}\n", "import {\n  AssetPromise,\n  Logger,\n  Material,\n  PBRMaterial,\n  PBRSpecularMaterial,\n  RenderFace,\n  TextureCoordinate,\n  UnlitMaterial\n} from \"@galacean/engine-core\";\nimport { Color } from \"@galacean/engine-math\";\nimport { MaterialAlphaMode } from \"../Schema\";\nimport { Parser } from \"./Parser\";\nimport { ParserContext } from \"./ParserContext\";\n\nexport class MaterialParser extends Parser {\n  /** @internal */\n  static _parseTextureTransform(material: Material, extensions: any = {}, context: ParserContext): void {\n    const schema = extensions.KHR_texture_transform;\n    if (schema) {\n      Parser.parseEngineResource(\"KHR_texture_transform\", schema, material, context);\n    }\n  }\n\n  parse(context: ParserContext): AssetPromise<Material[]> {\n    const { gltf, glTFResource } = context;\n\n    const { engine, textures } = glTFResource;\n    if (!gltf.materials) return;\n\n    const materialsPromiseInfo = context.materialsPromiseInfo;\n    const materials: Material[] = [];\n\n    for (let i = 0; i < gltf.materials.length; i++) {\n      const {\n        extensions = {},\n        pbrMetallicRoughness,\n        normalTexture,\n        occlusionTexture,\n        emissiveTexture,\n        emissiveFactor,\n        alphaMode,\n        alphaCutoff,\n        doubleSided,\n        name = \"\"\n      } = gltf.materials[i];\n\n      const {\n        KHR_materials_unlit,\n        KHR_materials_pbrSpecularGlossiness,\n        KHR_materials_clearcoat,\n        KHR_materials_ior,\n        OASIS_materials_remap\n      } = extensions;\n\n      let material: UnlitMaterial | PBRMaterial | PBRSpecularMaterial = null;\n\n      if (KHR_materials_unlit) {\n        material = <UnlitMaterial>Parser.createEngineResource(\"KHR_materials_unlit\", KHR_materials_unlit, context);\n      } else if (KHR_materials_pbrSpecularGlossiness) {\n        material = <PBRSpecularMaterial>(\n          Parser.createEngineResource(\n            \"KHR_materials_pbrSpecularGlossiness\",\n            KHR_materials_pbrSpecularGlossiness,\n            context\n          )\n        );\n      } else {\n        material = new PBRMaterial(engine);\n      }\n\n      material.name = name;\n\n      if (KHR_materials_clearcoat) {\n        Parser.parseEngineResource(\"KHR_materials_clearcoat\", KHR_materials_clearcoat, material, context);\n      }\n\n      if (KHR_materials_ior) {\n        Parser.parseEngineResource(\"KHR_materials_ior\", KHR_materials_ior, material, context);\n      }\n\n      if (pbrMetallicRoughness) {\n        const { baseColorFactor, baseColorTexture, metallicFactor, roughnessFactor, metallicRoughnessTexture } =\n          pbrMetallicRoughness;\n\n        if (baseColorFactor) {\n          material.baseColor = new Color(\n            Color.linearToGammaSpace(baseColorFactor[0]),\n            Color.linearToGammaSpace(baseColorFactor[1]),\n            Color.linearToGammaSpace(baseColorFactor[2]),\n            baseColorFactor[3]\n          );\n        }\n        if (baseColorTexture) {\n          material.baseTexture = textures[baseColorTexture.index];\n          MaterialParser._parseTextureTransform(material, baseColorTexture.extensions, context);\n        }\n\n        if (!KHR_materials_unlit && !KHR_materials_pbrSpecularGlossiness) {\n          const m = material as PBRMaterial;\n          m.metallic = metallicFactor ?? 1;\n          m.roughness = roughnessFactor ?? 1;\n          if (metallicRoughnessTexture) {\n            m.roughnessMetallicTexture = textures[metallicRoughnessTexture.index];\n            MaterialParser._parseTextureTransform(material, metallicRoughnessTexture.extensions, context);\n          }\n        }\n      }\n\n      if (!KHR_materials_unlit) {\n        const m = material as PBRMaterial | PBRSpecularMaterial;\n\n        if (emissiveTexture) {\n          m.emissiveTexture = textures[emissiveTexture.index];\n          MaterialParser._parseTextureTransform(material, emissiveTexture.extensions, context);\n        }\n\n        if (emissiveFactor) {\n          m.emissiveColor = new Color(\n            Color.linearToGammaSpace(emissiveFactor[0]),\n            Color.linearToGammaSpace(emissiveFactor[1]),\n            Color.linearToGammaSpace(emissiveFactor[2])\n          );\n        }\n\n        if (normalTexture) {\n          const { index, scale } = normalTexture;\n          m.normalTexture = textures[index];\n          MaterialParser._parseTextureTransform(material, normalTexture.extensions, context);\n          if (scale !== undefined) {\n            m.normalTextureIntensity = scale;\n          }\n        }\n\n        if (occlusionTexture) {\n          const { index, strength, texCoord } = occlusionTexture;\n          m.occlusionTexture = textures[index];\n          MaterialParser._parseTextureTransform(material, occlusionTexture.extensions, context);\n          if (strength !== undefined) {\n            m.occlusionTextureIntensity = strength;\n          }\n          if (texCoord === TextureCoordinate.UV1) {\n            m.occlusionTextureCoord = TextureCoordinate.UV1;\n          } else if (texCoord > TextureCoordinate.UV1) {\n            Logger.warn(\"Occlusion texture uv coordinate must be UV0 or UV1.\");\n          }\n        }\n      }\n\n      if (OASIS_materials_remap) {\n        gltf.extensions = gltf.extensions ?? {};\n        gltf.extensions[\"OASIS_materials_remap\"] = gltf.extensions[\"OASIS_materials_remap\"] ?? {};\n        gltf.extensions[\"OASIS_materials_remap\"][i] = Parser.createEngineResource(\n          \"OASIS_materials_remap\",\n          OASIS_materials_remap,\n          context\n        );\n      }\n\n      if (doubleSided) {\n        material.renderFace = RenderFace.Double;\n      } else {\n        material.renderFace = RenderFace.Front;\n      }\n\n      switch (alphaMode) {\n        case MaterialAlphaMode.OPAQUE:\n          material.isTransparent = false;\n          break;\n        case MaterialAlphaMode.BLEND:\n          material.isTransparent = true;\n          break;\n        case MaterialAlphaMode.MASK:\n          material.alphaCutoff = alphaCutoff ?? 0.5;\n          break;\n      }\n\n      materials[i] = material;\n    }\n\n    glTFResource.materials = materials;\n    materialsPromiseInfo.resolve(materials);\n    return materialsPromiseInfo.promise;\n  }\n}\n", "import { PBRMaterial } from \"@galacean/engine-core\";\nimport { MaterialParser } from \"../parser/MaterialParser\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ParserContext } from \"../parser/ParserContext\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRMaterialsClearcoat } from \"./Schema\";\n\n@registerExtension(\"KHR_materials_clearcoat\")\nclass KHR_materials_clearcoat extends ExtensionParser {\n  parseEngineResource(schema: IKHRMaterialsClearcoat, material: PBRMaterial, context: ParserContext): void {\n    const { textures } = context.glTFResource;\n    const {\n      clearcoatFactor = 0,\n      clearcoatTexture,\n      clearcoatRoughnessFactor = 0,\n      clearcoatRoughnessTexture,\n      clearcoatNormalTexture\n    } = schema;\n\n    material.clearCoat = clearcoatFactor;\n    material.clearCoatRoughness = clearcoatRoughnessFactor;\n\n    if (clearcoatTexture) {\n      material.clearCoatTexture = textures[clearcoatTexture.index];\n      MaterialParser._parseTextureTransform(material, clearcoatTexture.extensions, context);\n    }\n    if (clearcoatRoughnessTexture) {\n      material.clearCoatRoughnessTexture = textures[clearcoatRoughnessTexture.index];\n      MaterialParser._parseTextureTransform(material, clearcoatRoughnessTexture.extensions, context);\n    }\n    if (clearcoatNormalTexture) {\n      material.clearCoatNormalTexture = textures[clearcoatNormalTexture.index];\n      MaterialParser._parseTextureTransform(material, clearcoatNormalTexture.extensions, context);\n    }\n  }\n}\n", "import { PBRMaterial } from \"@galacean/engine-core\";\nimport { IKHRMaterialsIor } from \"./Schema\";\n\nimport { registerExtension } from \"../parser/Parser\";\nimport { ParserContext } from \"../parser/ParserContext\";\nimport { ExtensionParser } from \"./ExtensionParser\";\n\n@registerExtension(\"KHR_materials_ior\")\nclass KHR_materials_ior extends ExtensionParser {\n  parseEngineResource(schema: IKHRMaterialsIor, material: PBRMaterial, context: ParserContext): void {\n    const { ior = 1.5 } = schema;\n\n    material.ior = ior;\n  }\n}\n", "import { PBRSpecularMaterial } from \"@galacean/engine-core\";\nimport { Color } from \"@galacean/engine-math\";\nimport { MaterialParser } from \"../parser/MaterialParser\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ParserContext } from \"../parser/ParserContext\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRMaterialsPbrSpecularGlossiness } from \"./Schema\";\n\n@registerExtension(\"KHR_materials_pbrSpecularGlossiness\")\nclass KHR_materials_pbrSpecularGlossiness extends ExtensionParser {\n  createEngineResource(schema: IKHRMaterialsPbrSpecularGlossiness, context: ParserContext): PBRSpecularMaterial {\n    const { engine, textures } = context.glTFResource;\n    const material = new PBRSpecularMaterial(engine);\n    const { diffuseFactor, diffuseTexture, specularFactor, glossinessFactor, specularGlossinessTexture } = schema;\n\n    if (diffuseFactor) {\n      material.baseColor = new Color(\n        Color.linearToGammaSpace(diffuseFactor[0]),\n        Color.linearToGammaSpace(diffuseFactor[1]),\n        Color.linearToGammaSpace(diffuseFactor[2]),\n        diffuseFactor[3]\n      );\n    }\n\n    if (diffuseTexture) {\n      material.baseTexture = textures[diffuseTexture.index];\n      MaterialParser._parseTextureTransform(material, diffuseTexture.extensions, context);\n    }\n\n    if (specularFactor) {\n      material.specularColor = new Color(\n        Color.linearToGammaSpace(specularFactor[0]),\n        Color.linearToGammaSpace(specularFactor[1]),\n        Color.linearToGammaSpace(specularFactor[2])\n      );\n    }\n\n    if (glossinessFactor !== undefined) {\n      material.glossiness = glossinessFactor;\n    }\n\n    if (specularGlossinessTexture) {\n      material.specularGlossinessTexture = textures[specularGlossinessTexture.index];\n      MaterialParser._parseTextureTransform(material, specularGlossinessTexture.extensions, context);\n    }\n\n    return material;\n  }\n}\n", "import { UnlitMaterial } from \"@galacean/engine-core\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ParserContext } from \"../parser/ParserContext\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRMaterialsUnlit } from \"./Schema\";\n\n@registerExtension(\"KHR_materials_unlit\")\nclass KHR_materials_unlit extends ExtensionParser {\n  createEngineResource(schema: IKHRMaterialsUnlit, context: ParserContext): UnlitMaterial {\n    const { engine } = context.glTFResource;\n    const material = new UnlitMaterial(engine);\n\n    return material;\n  }\n}\n", "import { Renderer } from \"@galacean/engine-core\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ParserContext } from \"../parser/ParserContext\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRMaterialVariants_Mapping } from \"./Schema\";\n\n@registerExtension(\"KHR_materials_variants\")\nclass KHR_materials_variants extends ExtensionParser {\n  parseEngineResource(schema: IKHRMaterialVariants_Mapping, renderer: Renderer, context: ParserContext): void {\n    const {\n      gltf: {\n        extensions: {\n          KHR_materials_variants: { variants: variantNames }\n        }\n      },\n      glTFResource\n    } = context;\n    const { mappings } = schema;\n\n    for (let i = 0; i < mappings.length; i++) {\n      const { material, variants } = mappings[i];\n      if (!glTFResource.variants) glTFResource.variants = [];\n      glTFResource.variants.push({\n        renderer,\n        material: glTFResource.materials[material],\n        variants: variants.map((index) => variantNames[index].name)\n      });\n    }\n  }\n}\n", "import { registerExtension } from \"../parser/Parser\";\nimport { ExtensionParser } from \"./ExtensionParser\";\n\n@registerExtension(\"KHR_mesh_quantization\")\nclass KHR_mesh_quantization extends ExtensionParser {}\n", "import { Logger, PBRBaseMaterial, UnlitMaterial } from \"@galacean/engine-core\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ParserContext } from \"../parser/ParserContext\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRTextureTransform } from \"./Schema\";\n\n@registerExtension(\"KHR_texture_transform\")\nclass KHR_texture_transform extends ExtensionParser {\n  parseEngineResource(\n    schema: IKHRTextureTransform,\n    material: PBRBaseMaterial | UnlitMaterial,\n    context: ParserContext\n  ): void {\n    const { offset, rotation, scale, texCoord } = schema;\n\n    if (offset) {\n      material.tilingOffset.z = offset[0];\n      material.tilingOffset.w = offset[1];\n    }\n\n    if (scale) {\n      material.tilingOffset.x = scale[0];\n      material.tilingOffset.y = scale[1];\n    }\n\n    if (rotation) {\n      Logger.warn(\"rotation in KHR_texture_transform is not supported now\");\n    }\n\n    if (texCoord) {\n      Logger.warn(\"texCoord in KHR_texture_transform is not supported now\");\n    }\n  }\n}\n", "import { Material } from \"@galacean/engine-core\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ParserContext } from \"../parser/ParserContext\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IGalaceanMaterialRemap } from \"./Schema\";\n\n@registerExtension(\"OASIS_materials_remap\")\nclass GalaceanMaterialsRemap extends ExtensionParser {\n  createEngineResource(schema: IGalaceanMaterialRemap, context: ParserContext): Promise<Material> {\n    const { engine } = context.glTFResource;\n    // @ts-ignore\n    return engine.resourceManager.getResourceByRef<Material>(schema);\n  }\n}\n", "import { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _create_for_of_iterator_helper_loose(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n    if (it) return (it = it.call(o)).next.bind(it);\n    // Fallback for engines without symbol support\n    if (Array.isArray(o) || (it = _unsupported_iterable_to_array(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n\n        var i = 0;\n\n        return function() {\n            if (i >= o.length) return { done: true };\n\n            return { done: false, value: o[i++] };\n        };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _create_for_of_iterator_helper_loose as _ };\n", "import {\n  AnimationClip,\n  AnimationFloatArrayCurve,\n  AnimationQuaternionCurve,\n  AnimationVector3Curve,\n  AssetPromise,\n  Component,\n  Entity,\n  InterpolationType,\n  Keyframe,\n  SkinnedMeshRenderer,\n  Transform,\n  TypedArray\n} from \"@galacean/engine-core\";\nimport { Quaternion, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { AccessorType, AnimationChannelTargetPath, AnimationSamplerInterpolation, IAnimationChannel } from \"../Schema\";\nimport { Parser } from \"./Parser\";\nimport { ParserContext } from \"./ParserContext\";\n\nexport class AnimationParser extends Parser {\n  parse(context: ParserContext): AssetPromise<AnimationClip[]> {\n    const { gltf, buffers, glTFResource } = context;\n    const { entities } = glTFResource;\n    const { animations, accessors } = gltf;\n    if (!animations) {\n      return;\n    }\n    const animationClipsPromiseInfo = context.animationClipsPromiseInfo;\n\n    const animationClipCount = animations.length;\n    const animationClips = new Array<AnimationClip>(animationClipCount);\n    const animationsIndices = new Array<{\n      name: string;\n      index: number;\n    }>(animationClipCount);\n\n    for (let i = 0; i < animationClipCount; i++) {\n      const gltfAnimation = animations[i];\n      const { channels, samplers, name = `AnimationClip${i}` } = gltfAnimation;\n      const animationClip = new AnimationClip(name);\n      const sampleDataCollection = new Array<SampleData>();\n\n      let duration = -1;\n\n      // parse samplers\n      for (let j = 0, m = samplers.length; j < m; j++) {\n        const gltfSampler = samplers[j];\n        const inputAccessor = accessors[gltfSampler.input];\n        const outputAccessor = accessors[gltfSampler.output];\n\n        const input = GLTFUtil.getAccessorBuffer(context, gltf, inputAccessor).data;\n        let output = GLTFUtil.getAccessorBuffer(context, gltf, outputAccessor).data;\n\n        if (outputAccessor.normalized) {\n          const scale = GLTFUtil.getNormalizedComponentScale(outputAccessor.componentType);\n          const scaled = new Float32Array(output.length);\n          for (let k = 0, v = output.length; k < v; k++) {\n            scaled[k] = output[k] * scale;\n          }\n          output = scaled;\n        }\n\n        const outputStride = output.length / input.length;\n\n        const interpolation = gltfSampler.interpolation ?? AnimationSamplerInterpolation.Linear;\n        let samplerInterpolation: InterpolationType;\n        switch (interpolation) {\n          case AnimationSamplerInterpolation.CubicSpine:\n            samplerInterpolation = InterpolationType.CubicSpine;\n            break;\n          case AnimationSamplerInterpolation.Step:\n            samplerInterpolation = InterpolationType.Step;\n            break;\n          case AnimationSamplerInterpolation.Linear:\n            samplerInterpolation = InterpolationType.Linear;\n            break;\n        }\n\n        const maxTime = input[input.length - 1];\n        if (maxTime > duration) {\n          duration = maxTime;\n        }\n\n        sampleDataCollection.push({\n          type: outputAccessor.type,\n          interpolation: samplerInterpolation,\n          input,\n          output,\n          outputSize: outputStride\n        });\n      }\n\n      for (let j = 0, m = channels.length; j < m; j++) {\n        const gltfChannel = channels[j];\n        const { target } = gltfChannel;\n\n        const channelTargetEntity = entities[target.node];\n        let relativePath = \"\";\n        let entity = channelTargetEntity;\n        while (entity.parent) {\n          relativePath = relativePath === \"\" ? `${entity.name}` : `${entity.name}/${relativePath}`;\n          entity = entity.parent;\n        }\n\n        let ComponentType: new (entity: Entity) => Component;\n        let propertyName: string;\n        switch (target.path) {\n          case AnimationChannelTargetPath.TRANSLATION:\n            ComponentType = Transform;\n            propertyName = \"position\";\n            break;\n          case AnimationChannelTargetPath.ROTATION:\n            ComponentType = Transform;\n            propertyName = \"rotationQuaternion\";\n            break;\n          case AnimationChannelTargetPath.SCALE:\n            ComponentType = Transform;\n            propertyName = \"scale\";\n            break;\n          case AnimationChannelTargetPath.WEIGHTS:\n            ComponentType = SkinnedMeshRenderer;\n            propertyName = \"blendShapeWeights\";\n            break;\n          default:\n        }\n\n        const curve = this._addCurve(target.path, gltfChannel, sampleDataCollection);\n        animationClip.addCurveBinding(relativePath, ComponentType, propertyName, curve);\n      }\n\n      animationClips[i] = animationClip;\n      animationsIndices[i] = {\n        name,\n        index: i\n      };\n    }\n\n    glTFResource.animations = animationClips;\n    // @ts-ignore for editor\n    glTFResource._animationsIndices = animationsIndices;\n\n    animationClipsPromiseInfo.resolve(animationClips);\n    return animationClipsPromiseInfo.promise;\n  }\n\n  private _addCurve(\n    animationchannelTargetPath: AnimationChannelTargetPath,\n    gltfChannel: IAnimationChannel,\n    sampleDataCollection: SampleData[]\n  ) {\n    const sampleData = sampleDataCollection[gltfChannel.sampler];\n    const { input, output, outputSize } = sampleData;\n\n    switch (animationchannelTargetPath) {\n      case AnimationChannelTargetPath.TRANSLATION:\n      case AnimationChannelTargetPath.SCALE: {\n        const curve = new AnimationVector3Curve();\n        const interpolation = (curve.interpolation = sampleData.interpolation);\n\n        let offset = 0;\n        for (let i = 0, n = input.length; i < n; i++) {\n          const keyframe = new Keyframe<Vector3>();\n          keyframe.time = input[i];\n          if (interpolation === InterpolationType.CubicSpine) {\n            keyframe.inTangent = new Vector3(output[offset++], output[offset++], output[offset++]);\n            keyframe.value = new Vector3(output[offset++], output[offset++], output[offset++]);\n            keyframe.outTangent = new Vector3(output[offset++], output[offset++], output[offset++]);\n          } else {\n            keyframe.value = new Vector3(output[offset++], output[offset++], output[offset++]);\n          }\n          curve.addKey(keyframe);\n        }\n        return curve;\n      }\n      case AnimationChannelTargetPath.ROTATION: {\n        const curve = new AnimationQuaternionCurve();\n        const interpolation = (curve.interpolation = sampleData.interpolation);\n\n        let offset = 0;\n        for (let i = 0, n = input.length; i < n; i++) {\n          const keyframe = new Keyframe<Quaternion>();\n          keyframe.time = input[i];\n          if (interpolation === InterpolationType.CubicSpine) {\n            keyframe.inTangent = new Vector4(output[offset++], output[offset++], output[offset++], output[offset++]);\n            keyframe.value = new Quaternion(output[offset++], output[offset++], output[offset++], output[offset++]);\n            keyframe.outTangent = new Vector4(output[offset++], output[offset++], output[offset++], output[offset++]);\n          } else {\n            keyframe.value = new Quaternion(output[offset++], output[offset++], output[offset++], output[offset++]);\n          }\n          curve.addKey(keyframe);\n        }\n        return curve;\n      }\n      case AnimationChannelTargetPath.WEIGHTS: {\n        const curve = new AnimationFloatArrayCurve();\n        curve.interpolation = sampleData.interpolation;\n\n        let offset = 0;\n        for (let i = 0, n = input.length; i < n; i++) {\n          const keyframe = new Keyframe<Float32Array>();\n          keyframe.time = input[i];\n          if (curve.interpolation === InterpolationType.CubicSpine) {\n            keyframe.inTangent = Array.from(output.subarray(offset, offset + outputSize));\n            offset += outputSize;\n            keyframe.value = output.subarray(offset, offset + outputSize) as Float32Array;\n            offset += outputSize;\n            keyframe.outTangent = Array.from(output.subarray(offset, offset + outputSize));\n            offset += outputSize;\n          } else {\n            keyframe.value = output.subarray(offset, offset + outputSize) as Float32Array;\n            offset += outputSize;\n          }\n          curve.addKey(keyframe);\n        }\n        return curve;\n      }\n    }\n  }\n}\ninterface SampleData {\n  type: AccessorType;\n  input: TypedArray;\n  output: TypedArray;\n  interpolation: InterpolationType;\n  outputSize: number;\n}\n", "import { AssetPromise, request } from \"@galacean/engine-core\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { IBuffer, IGLTF } from \"../Schema\";\nimport { Parser } from \"./Parser\";\nimport { ParserContext } from \"./ParserContext\";\n\nexport class BufferParser extends Parser {\n  parse(context: ParserContext): AssetPromise<void> {\n    const glTFResource = context.glTFResource;\n    const { url } = glTFResource;\n\n    if (this._isGLB(url)) {\n      return request<ArrayBuffer>(url, { type: \"arraybuffer\" })\n        .then(GLTFUtil.parseGLB)\n        .then(({ gltf, buffers }) => {\n          context.gltf = gltf;\n          context.buffers = buffers;\n        });\n    } else {\n      return request(url, {\n        type: \"json\"\n      }).then((gltf: IGLTF) => {\n        context.gltf = gltf;\n        return Promise.all(\n          gltf.buffers.map((buffer: IBuffer) => {\n            return request<ArrayBuffer>(GLTFUtil.parseRelativeUrl(url, buffer.uri), { type: \"arraybuffer\" });\n          })\n        ).then((buffers: ArrayBuffer[]) => {\n          context.buffers = buffers;\n        });\n      });\n    }\n  }\n\n  private _isGLB(url: string): boolean {\n    const index = url.lastIndexOf(\".\");\n    return url.substring(index + 1, index + 4) === \"glb\";\n  }\n}\n", "import { Entity } from \"@galacean/engine-core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { Parser } from \"./Parser\";\nimport { ParserContext } from \"./ParserContext\";\n\nexport class EntityParser extends Parser {\n  /** @internal */\n  static _defaultName: String = \"_GLTF_ENTITY_\";\n\n  parse(context: ParserContext): void {\n    const {\n      glTFResource,\n      gltf: { nodes }\n    } = context;\n\n    const { engine } = glTFResource;\n\n    if (!nodes) return;\n\n    const entities: Entity[] = [];\n\n    for (let i = 0; i < nodes.length; i++) {\n      const gltfNode = nodes[i];\n      const { matrix, translation, rotation, scale } = gltfNode;\n      const entity = new Entity(engine, gltfNode.name || `${EntityParser._defaultName}${i}`);\n\n      const { transform } = entity;\n      if (matrix) {\n        const localMatrix = transform.localMatrix;\n        localMatrix.copyFromArray(matrix);\n        transform.localMatrix = localMatrix;\n      } else {\n        if (translation) {\n          transform.setPosition(translation[0], translation[1], translation[2]);\n        }\n        if (rotation) {\n          transform.setRotationQuaternion(rotation[0], rotation[1], rotation[2], rotation[3]);\n        }\n        if (scale) {\n          transform.setScale(scale[0], scale[1], scale[2]);\n        }\n      }\n\n      entities[i] = entity;\n    }\n\n    glTFResource.entities = entities;\n    this._buildEntityTree(context, glTFResource);\n    this._createSceneRoots(context, glTFResource);\n  }\n\n  private _buildEntityTree(context: ParserContext, glTFResource: GLTFResource): void {\n    const {\n      gltf: { nodes }\n    } = context;\n    const { entities } = glTFResource;\n\n    for (let i = 0; i < nodes.length; i++) {\n      const { children } = nodes[i];\n      const entity = entities[i];\n\n      if (children) {\n        for (let j = 0; j < children.length; j++) {\n          const childEntity = entities[children[j]];\n\n          entity.addChild(childEntity);\n        }\n      }\n    }\n  }\n\n  private _createSceneRoots(context: ParserContext, glTFResource: GLTFResource): void {\n    const { scene: sceneID = 0, scenes } = context.gltf;\n    const { engine, entities } = glTFResource;\n\n    if (!scenes) return;\n\n    const sceneRoots: Entity[] = [];\n\n    for (let i = 0; i < scenes.length; i++) {\n      const { nodes } = scenes[i];\n\n      if (!nodes) continue;\n\n      if (nodes.length === 1) {\n        sceneRoots[i] = entities[nodes[0]];\n      } else {\n        const rootEntity = new Entity(engine, \"GLTF_ROOT\");\n        for (let j = 0; j < nodes.length; j++) {\n          rootEntity.addChild(entities[nodes[j]]);\n        }\n        sceneRoots[i] = rootEntity;\n      }\n    }\n\n    glTFResource.sceneRoots = sceneRoots;\n    glTFResource.defaultSceneRoot = sceneRoots[sceneID];\n  }\n}\n", "import {\n  AssetPromise,\n  BlendShape,\n  Buffer,\n  BufferBindFlag,\n  BufferUsage,\n  EngineObject,\n  ModelMesh,\n  TypedArray,\n  VertexElement\n} from \"@galacean/engine-core\";\nimport { Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { AccessorType, IGLTF, IMesh, IMeshPrimitive } from \"../Schema\";\nimport { Parser } from \"./Parser\";\nimport { ParserContext } from \"./ParserContext\";\n\nexport class MeshParser extends Parser {\n  private static _tempVector3 = new Vector3();\n\n  parse(context: ParserContext) {\n    const { gltf, buffers, glTFResource } = context;\n    const { engine } = glTFResource;\n    if (!gltf.meshes) return;\n\n    const meshesPromiseInfo = context.meshesPromiseInfo;\n    const meshPromises: Promise<ModelMesh[]>[] = [];\n\n    for (let i = 0; i < gltf.meshes.length; i++) {\n      const gltfMesh = gltf.meshes[i];\n      const primitivePromises: Promise<ModelMesh>[] = [];\n\n      for (let j = 0; j < gltfMesh.primitives.length; j++) {\n        const gltfPrimitive = gltfMesh.primitives[j];\n        const { extensions = {} } = gltfPrimitive;\n        const { KHR_draco_mesh_compression } = extensions;\n\n        primitivePromises[j] = new Promise((resolve) => {\n          const mesh = new ModelMesh(engine, gltfMesh.name || j + \"\");\n\n          if (KHR_draco_mesh_compression) {\n            (<Promise<EngineObject>>(\n              Parser.createEngineResource(\n                \"KHR_draco_mesh_compression\",\n                KHR_draco_mesh_compression,\n                context,\n                gltfPrimitive\n              )\n            ))\n              .then((decodedGeometry: any) => {\n                return this._parseMeshFromGLTFPrimitiveDraco(\n                  mesh,\n                  gltfMesh,\n                  gltfPrimitive,\n                  gltf,\n                  (attributeSemantic) => {\n                    for (let j = 0; j < decodedGeometry.attributes.length; j++) {\n                      if (decodedGeometry.attributes[j].name === attributeSemantic) {\n                        return decodedGeometry.attributes[j].array;\n                      }\n                    }\n                    return null;\n                  },\n                  (attributeSemantic, shapeIndex) => {\n                    throw \"BlendShape animation is not supported when using draco.\";\n                  },\n                  () => {\n                    return decodedGeometry.index.array;\n                  },\n                  context.keepMeshData\n                );\n              })\n              .then(resolve);\n          } else {\n            this._parseMeshFromGLTFPrimitive(\n              context,\n              mesh,\n              gltfMesh,\n              gltfPrimitive,\n              gltf,\n              (attributeSemantic) => {\n                return null;\n              },\n              (attributeName, shapeIndex) => {\n                const shapeAccessorIdx = gltfPrimitive.targets[shapeIndex];\n                const attributeAccessorIdx = shapeAccessorIdx[attributeName];\n                if (attributeAccessorIdx) {\n                  const accessor = gltf.accessors[attributeAccessorIdx];\n                  return GLTFUtil.getAccessorData(gltf, accessor, buffers);\n                } else {\n                  return null;\n                }\n              },\n              () => {\n                const indexAccessor = gltf.accessors[gltfPrimitive.indices];\n                return GLTFUtil.getAccessorData(gltf, indexAccessor, buffers);\n              },\n              context.keepMeshData\n            ).then(resolve);\n          }\n        });\n      }\n\n      meshPromises[i] = Promise.all(primitivePromises);\n    }\n\n    AssetPromise.all(meshPromises)\n      .then((meshes: ModelMesh[][]) => {\n        glTFResource.meshes = meshes;\n        meshesPromiseInfo.resolve(meshes);\n      })\n      .catch(meshesPromiseInfo.reject);\n\n    return meshesPromiseInfo.promise;\n  }\n\n  private _parseMeshFromGLTFPrimitive(\n    context: ParserContext,\n    mesh: ModelMesh,\n    gltfMesh: IMesh,\n    gltfPrimitive: IMeshPrimitive,\n    gltf: IGLTF,\n    getVertexBufferData: (semantic: string) => TypedArray,\n    getBlendShapeData: (semantic: string, shapeIndex: number) => TypedArray,\n    getIndexBufferData: () => TypedArray,\n    keepMeshData: boolean\n  ): Promise<ModelMesh> {\n    const { accessors } = gltf;\n    const { buffers } = context;\n    const { attributes, targets, indices, mode } = gltfPrimitive;\n\n    const engine = mesh.engine;\n    const vertexElements = new Array<VertexElement>();\n\n    let vertexCount: number;\n    let bufferBindIndex = 0;\n    let positions: Vector3[];\n    let boneIndices: Vector4[];\n    let boneWeights: Vector4[];\n    if (keepMeshData) {\n      positions = new Array<Vector3>(vertexCount);\n      boneIndices = new Array<Vector4>(vertexCount);\n      boneWeights = new Array<Vector4>(vertexCount);\n    }\n\n    for (const attribute in attributes) {\n      const accessor = accessors[attributes[attribute]];\n      const accessorBuffer = GLTFUtil.getAccessorBuffer(context, gltf, accessor);\n\n      const dataElementSize = GLTFUtil.getAccessorTypeSize(accessor.type);\n      const accessorCount = accessor.count;\n      const vertices = accessorBuffer.data;\n\n      let vertexElement: VertexElement;\n      const meshId = mesh.instanceId;\n      const vertexBindingInfos = accessorBuffer.vertexBindingInfos;\n      const elementNormalized = accessor.normalized;\n      const elementFormat = GLTFUtil.getElementFormat(accessor.componentType, dataElementSize, elementNormalized);\n\n      let scaleFactor: number;\n      elementNormalized && (scaleFactor = GLTFUtil.getNormalizedComponentScale(accessor.componentType));\n\n      let elementOffset: number;\n      if (accessorBuffer.interleaved) {\n        const byteOffset = accessor.byteOffset || 0;\n        const stride = accessorBuffer.stride;\n        elementOffset = byteOffset % stride;\n        if (vertexBindingInfos[meshId] === undefined) {\n          vertexElement = new VertexElement(attribute, elementOffset, elementFormat, bufferBindIndex);\n\n          let vertexBuffer = accessorBuffer.vertexBuffer;\n          if (!vertexBuffer) {\n            vertexBuffer = new Buffer(engine, BufferBindFlag.VertexBuffer, vertices.byteLength, BufferUsage.Static);\n            vertexBuffer.setData(vertices);\n            accessorBuffer.vertexBuffer = vertexBuffer;\n          }\n          mesh.setVertexBufferBinding(vertexBuffer, stride, bufferBindIndex);\n          vertexBindingInfos[meshId] = bufferBindIndex++;\n        } else {\n          vertexElement = new VertexElement(attribute, elementOffset, elementFormat, vertexBindingInfos[meshId]);\n        }\n      } else {\n        elementOffset = 0;\n        vertexElement = new VertexElement(attribute, elementOffset, elementFormat, bufferBindIndex);\n\n        const vertexBuffer = new Buffer(engine, BufferBindFlag.VertexBuffer, vertices.byteLength, BufferUsage.Static);\n        vertexBuffer.setData(vertices);\n        mesh.setVertexBufferBinding(vertexBuffer, accessorBuffer.stride, bufferBindIndex);\n        vertexBindingInfos[meshId] = bufferBindIndex++;\n      }\n      vertexElements.push(vertexElement);\n\n      if (attribute === \"POSITION\") {\n        vertexCount = accessorCount;\n\n        const { min, max } = mesh.bounds;\n        if (accessor.min && accessor.max) {\n          min.copyFromArray(accessor.min);\n          max.copyFromArray(accessor.max);\n\n          if (keepMeshData) {\n            const baseOffset = elementOffset / vertices.BYTES_PER_ELEMENT;\n            const stride = vertices.length / accessorCount;\n            for (let j = 0; j < accessorCount; j++) {\n              const offset = baseOffset + j * stride;\n              const position = new Vector3(vertices[offset], vertices[offset + 1], vertices[offset + 2]);\n              elementNormalized && position.scale(scaleFactor);\n              positions[j] = position;\n            }\n          }\n        } else {\n          const position = MeshParser._tempVector3;\n          min.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n          max.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n          const baseOffset = elementOffset / vertices.BYTES_PER_ELEMENT;\n          const stride = vertices.length / accessorCount;\n          for (let j = 0; j < accessorCount; j++) {\n            const offset = baseOffset + j * stride;\n            position.copyFromArray(vertices, offset);\n            Vector3.min(min, position, min);\n            Vector3.max(max, position, max);\n\n            if (keepMeshData) {\n              const clonePosition = position.clone();\n              elementNormalized && clonePosition.scale(scaleFactor);\n              positions[j] = clonePosition;\n            }\n          }\n        }\n        if (elementNormalized) {\n          min.scale(scaleFactor);\n          max.scale(scaleFactor);\n        }\n      } else if (attribute === \"JOINTS_0\" && keepMeshData) {\n        const baseOffset = elementOffset / vertices.BYTES_PER_ELEMENT;\n        const stride = vertices.length / accessorCount;\n        for (let j = 0; j < accessorCount; j++) {\n          const offset = baseOffset + j * stride;\n          const boneIndex = new Vector4(\n            vertices[offset],\n            vertices[offset + 1],\n            vertices[offset + 2],\n            vertices[offset + 3]\n          );\n          elementNormalized && boneIndex.scale(scaleFactor);\n          boneIndices[j] = boneIndex;\n        }\n      } else if (attribute === \"WEIGHTS_0\" && keepMeshData) {\n        const baseOffset = elementOffset / vertices.BYTES_PER_ELEMENT;\n        const stride = vertices.length / accessorCount;\n        for (let j = 0; j < accessorCount; j++) {\n          const offset = baseOffset + j * stride;\n          const boneWeight = new Vector4(\n            vertices[offset],\n            vertices[offset + 1],\n            vertices[offset + 2],\n            vertices[offset + 3]\n          );\n          elementNormalized && boneWeight.scale(scaleFactor);\n          boneWeights[j] = boneWeight;\n        }\n      }\n    }\n    mesh.setVertexElements(vertexElements);\n\n    // Indices\n    if (indices !== undefined) {\n      const indexAccessor = gltf.accessors[indices];\n      const indexData = getIndexBufferData();\n      mesh.setIndices(<Uint8Array | Uint16Array | Uint32Array>indexData);\n      mesh.addSubMesh(0, indexAccessor.count, mode);\n    } else {\n      mesh.addSubMesh(0, vertexCount, mode);\n    }\n\n    // BlendShapes\n    targets && this._createBlendShape(mesh, gltfMesh, targets, getBlendShapeData);\n\n    mesh.uploadData(!keepMeshData);\n\n    //@ts-ignore\n    mesh._positions = positions;\n    //@ts-ignore\n    mesh._boneIndices = boneIndices;\n    //@ts-ignore\n    mesh._boneWeights = boneWeights;\n\n    return Promise.resolve(mesh);\n  }\n\n  private _createBlendShape(\n    mesh: ModelMesh,\n    glTFMesh: IMesh,\n    glTFTargets: {\n      [name: string]: number;\n    }[],\n    getBlendShapeData: (semantic: string, shapeIndex: number) => TypedArray\n  ): void {\n    const blendShapeNames = glTFMesh.extras ? glTFMesh.extras.targetNames : null;\n\n    for (let i = 0, n = glTFTargets.length; i < n; i++) {\n      const name = blendShapeNames ? blendShapeNames[i] : `blendShape${i}`;\n      const deltaPosBuffer = getBlendShapeData(\"POSITION\", i);\n      const deltaNorBuffer = getBlendShapeData(\"NORMAL\", i);\n      const deltaTanBuffer = getBlendShapeData(\"TANGENT\", i);\n      const deltaPositions = deltaPosBuffer ? GLTFUtil.floatBufferToVector3Array(<Float32Array>deltaPosBuffer) : null;\n      const deltaNormals = deltaNorBuffer ? GLTFUtil.floatBufferToVector3Array(<Float32Array>deltaNorBuffer) : null;\n      const deltaTangents = deltaTanBuffer ? GLTFUtil.floatBufferToVector3Array(<Float32Array>deltaTanBuffer) : null;\n\n      const blendShape = new BlendShape(name);\n      blendShape.addFrame(1.0, deltaPositions, deltaNormals, deltaTangents);\n      mesh.addBlendShape(blendShape);\n    }\n  }\n\n  /**\n   * @deprecated\n   */\n  private _parseMeshFromGLTFPrimitiveDraco(\n    mesh: ModelMesh,\n    gltfMesh: IMesh,\n    gltfPrimitive: IMeshPrimitive,\n    gltf: IGLTF,\n    getVertexBufferData: (semantic: string) => TypedArray,\n    getBlendShapeData: (semantic: string, shapeIndex: number) => TypedArray,\n    getIndexBufferData: () => TypedArray,\n    keepMeshData: boolean\n  ): Promise<ModelMesh> {\n    const { attributes, targets, indices, mode } = gltfPrimitive;\n    let vertexCount: number;\n\n    const { accessors } = gltf;\n    const accessor = accessors[attributes[\"POSITION\"]];\n    const positionBuffer = <Float32Array>getVertexBufferData(\"POSITION\");\n    const positions = GLTFUtil.floatBufferToVector3Array(positionBuffer);\n    mesh.setPositions(positions);\n\n    const { bounds } = mesh;\n    vertexCount = accessor.count;\n    if (accessor.min && accessor.max) {\n      bounds.min.copyFromArray(accessor.min);\n      bounds.max.copyFromArray(accessor.max);\n    } else {\n      const position = MeshParser._tempVector3;\n      const { min, max } = bounds;\n\n      min.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n      max.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n      const stride = positionBuffer.length / vertexCount;\n      for (let j = 0; j < vertexCount; j++) {\n        const offset = j * stride;\n        position.copyFromArray(positionBuffer, offset);\n        Vector3.min(min, position, min);\n        Vector3.max(max, position, max);\n      }\n    }\n\n    for (const attributeSemantic in attributes) {\n      if (attributeSemantic === \"POSITION\") {\n        continue;\n      }\n      const bufferData = getVertexBufferData(attributeSemantic);\n      switch (attributeSemantic) {\n        case \"NORMAL\":\n          const normals = GLTFUtil.floatBufferToVector3Array(<Float32Array>bufferData);\n          mesh.setNormals(normals);\n          break;\n        case \"TEXCOORD_0\":\n          const texturecoords = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords, 0);\n          break;\n        case \"TEXCOORD_1\":\n          const texturecoords1 = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords1, 1);\n          break;\n        case \"TEXCOORD_2\":\n          const texturecoords2 = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords2, 2);\n          break;\n        case \"TEXCOORD_3\":\n          const texturecoords3 = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords3, 3);\n          break;\n        case \"TEXCOORD_4\":\n          const texturecoords4 = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords4, 4);\n          break;\n        case \"TEXCOORD_5\":\n          const texturecoords5 = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords5, 5);\n          break;\n        case \"TEXCOORD_6\":\n          const texturecoords6 = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords6, 6);\n          break;\n        case \"TEXCOORD_7\":\n          const texturecoords7 = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords7, 7);\n          break;\n        case \"COLOR_0\":\n          const colors = GLTFUtil.floatBufferToColorArray(\n            <Float32Array>bufferData,\n            accessors[attributes[\"COLOR_0\"]].type === AccessorType.VEC3\n          );\n          mesh.setColors(colors);\n          break;\n        case \"TANGENT\":\n          const tangents = GLTFUtil.floatBufferToVector4Array(<Float32Array>bufferData);\n          mesh.setTangents(tangents);\n          break;\n\n        case \"JOINTS_0\":\n          const joints = GLTFUtil.floatBufferToVector4Array(<Float32Array>bufferData);\n          mesh.setBoneIndices(joints);\n          break;\n        case \"WEIGHTS_0\":\n          const weights = GLTFUtil.floatBufferToVector4Array(<Float32Array>bufferData);\n          mesh.setBoneWeights(weights);\n          break;\n        default:\n          // console.warn(`Unsupport attribute semantic ${attributeSemantic}.`);\n          break;\n      }\n    }\n\n    // Indices\n    if (indices !== undefined) {\n      const indexAccessor = gltf.accessors[indices];\n      const indexData = getIndexBufferData();\n      mesh.setIndices(<Uint8Array | Uint16Array | Uint32Array>indexData);\n      mesh.addSubMesh(0, indexAccessor.count, mode);\n    } else {\n      mesh.addSubMesh(0, vertexCount, mode);\n    }\n\n    // BlendShapes\n    targets && this._createBlendShape(mesh, gltfMesh, targets, getBlendShapeData);\n\n    mesh.uploadData(!keepMeshData);\n    return Promise.resolve(mesh);\n  }\n}\n", "import {\n  Animator,\n  AnimatorController,\n  AnimatorControllerLayer,\n  AnimatorStateMachine,\n  AssetPromise,\n  BlinnPhongMaterial,\n  Camera,\n  Engine,\n  Entity,\n  MeshRenderer,\n  SkinnedMeshRenderer\n} from \"@galacean/engine-core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { CameraType, ICamera, INode } from \"../Schema\";\nimport { IKHRLightsPunctual, IKHRLightsPunctual_LightNode } from \"../extensions/Schema\";\nimport { Parser } from \"./Parser\";\nimport { ParserContext } from \"./ParserContext\";\n\nexport class SceneParser extends Parser {\n  private static _defaultMaterial: BlinnPhongMaterial;\n\n  private static _getDefaultMaterial(engine: Engine): BlinnPhongMaterial {\n    if (!SceneParser._defaultMaterial) {\n      SceneParser._defaultMaterial = new BlinnPhongMaterial(engine);\n    }\n\n    return SceneParser._defaultMaterial;\n  }\n\n  parse(context: ParserContext) {\n    const { glTFResource, gltf } = context;\n    const { entities } = glTFResource;\n    const { nodes, cameras: gltfCameras } = gltf;\n\n    if (!nodes) return;\n    const defaultSceneRootPromiseInfo = context.defaultSceneRootPromiseInfo;\n\n    const promises = [];\n\n    for (let i = 0; i < nodes.length; i++) {\n      const gltfNode = nodes[i];\n      const { camera: cameraID, mesh: meshID, extensions = {} } = gltfNode;\n      const KHR_lights_punctual = <IKHRLightsPunctual_LightNode>extensions.KHR_lights_punctual;\n      const entity = entities[i];\n\n      if (cameraID !== undefined) {\n        this._createCamera(glTFResource, gltfCameras[cameraID], entity);\n      }\n\n      if (meshID !== undefined) {\n        promises.push(this._createRenderer(context, gltfNode, entity));\n      }\n\n      if (KHR_lights_punctual) {\n        const lightIndex = KHR_lights_punctual.light;\n        const lights = (gltf.extensions.KHR_lights_punctual as IKHRLightsPunctual).lights;\n\n        Parser.parseEngineResource(\"KHR_lights_punctual\", lights[lightIndex], entity, context);\n      }\n    }\n\n    if (glTFResource.defaultSceneRoot) {\n      this._createAnimator(context);\n    }\n\n    gltf.extensions && delete gltf.extensions[\"OASIS_materials_remap\"];\n\n    AssetPromise.all(promises)\n      .then(() => defaultSceneRootPromiseInfo.resolve(glTFResource.defaultSceneRoot))\n      .catch(defaultSceneRootPromiseInfo.reject);\n\n    return defaultSceneRootPromiseInfo.promise;\n  }\n\n  private _createCamera(context: GLTFResource, cameraSchema: ICamera, entity: Entity): void {\n    const { orthographic, perspective, type } = cameraSchema;\n    const camera = entity.addComponent(Camera);\n\n    if (type === CameraType.ORTHOGRAPHIC) {\n      const { xmag, ymag, zfar, znear } = orthographic;\n\n      camera.isOrthographic = true;\n\n      if (znear !== undefined) {\n        camera.nearClipPlane = znear;\n      }\n      if (zfar !== undefined) {\n        camera.farClipPlane = zfar;\n      }\n\n      camera.orthographicSize = Math.max(ymag ?? 0, xmag ?? 0) / 2;\n    } else if (type === CameraType.PERSPECTIVE) {\n      const { aspectRatio, yfov, zfar, znear } = perspective;\n\n      if (aspectRatio !== undefined) {\n        camera.aspectRatio = aspectRatio;\n      }\n      if (yfov !== undefined) {\n        camera.fieldOfView = (yfov * 180) / Math.PI;\n      }\n      if (zfar !== undefined) {\n        camera.farClipPlane = zfar;\n      }\n      if (znear !== undefined) {\n        camera.nearClipPlane = znear;\n      }\n    }\n\n    if (!context.cameras) context.cameras = [];\n    context.cameras.push(camera);\n    // @todo: use engine camera by default\n    camera.enabled = false;\n  }\n\n  private _createRenderer(context: ParserContext, gltfNode: INode, entity: Entity) {\n    const { glTFResource, gltf } = context;\n    const { meshes: gltfMeshes } = gltf;\n\n    const { engine, meshes, materials, skins } = glTFResource;\n    const { mesh: meshID, skin: skinID } = gltfNode;\n    const glTFMesh = gltfMeshes[meshID];\n    const gltfMeshPrimitives = glTFMesh.primitives;\n    const blendShapeWeights = gltfNode.weights || glTFMesh.weights;\n\n    const promises = [];\n    for (let i = 0; i < gltfMeshPrimitives.length; i++) {\n      const mesh = meshes[meshID][i];\n      let renderer: MeshRenderer | SkinnedMeshRenderer;\n\n      if (skinID !== undefined || blendShapeWeights) {\n        context.hasSkinned = true;\n        const skinRenderer = entity.addComponent(SkinnedMeshRenderer);\n        skinRenderer.mesh = mesh;\n        if (skinID !== undefined) {\n          skinRenderer.skin = skins[skinID];\n        }\n        if (blendShapeWeights) {\n          skinRenderer.blendShapeWeights = new Float32Array(blendShapeWeights);\n        }\n        renderer = skinRenderer;\n      } else {\n        renderer = entity.addComponent(MeshRenderer);\n        renderer.mesh = mesh;\n      }\n\n      const materialIndex = gltfMeshPrimitives[i].material;\n      const remapMaterials = gltf.extensions && gltf.extensions[\"OASIS_materials_remap\"];\n      if (remapMaterials && remapMaterials[materialIndex]) {\n        promises.push(\n          remapMaterials[materialIndex].then((mtl) => {\n            renderer.setMaterial(mtl);\n          })\n        );\n      } else {\n        const material = materials?.[materialIndex] || SceneParser._getDefaultMaterial(engine);\n        renderer.setMaterial(material);\n\n        // Enable vertex color if mesh has COLOR_0 vertex element\n        mesh.vertexElements.forEach((element) => {\n          if (element.semantic === \"COLOR_0\") {\n            renderer.enableVertexColor = true;\n          }\n        });\n      }\n\n      const { extensions = {} } = gltfMeshPrimitives[i];\n      const { KHR_materials_variants } = extensions;\n      if (KHR_materials_variants) {\n        Parser.parseEngineResource(\"KHR_materials_variants\", KHR_materials_variants, renderer, context);\n      }\n    }\n    return Promise.all(promises);\n  }\n\n  private _createAnimator(context: ParserContext): void {\n    if (!context.hasSkinned && !context.glTFResource.animations) {\n      return;\n    }\n\n    const { defaultSceneRoot, animations } = context.glTFResource;\n    const animator = defaultSceneRoot.addComponent(Animator);\n    const animatorController = new AnimatorController();\n    const layer = new AnimatorControllerLayer(\"layer\");\n    const animatorStateMachine = new AnimatorStateMachine();\n    animatorController.addLayer(layer);\n    animator.animatorController = animatorController;\n    layer.stateMachine = animatorStateMachine;\n    if (animations) {\n      for (let i = 0; i < animations.length; i++) {\n        const animationClip = animations[i];\n        const name = animationClip.name;\n        const uniqueName = animatorStateMachine.makeUniqueStateName(name);\n        if (uniqueName !== name) {\n          console.warn(`AnimatorState name is existed, name: ${name} reset to ${uniqueName}`);\n        }\n        const animatorState = animatorStateMachine.addState(uniqueName);\n        animatorState.clip = animationClip;\n      }\n    }\n  }\n}\n", "import { Entity, Skin } from \"@galacean/engine-core\";\nimport { Matrix } from \"@galacean/engine-math\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { Parser } from \"./Parser\";\nimport { ParserContext } from \"./ParserContext\";\n\nexport class SkinParser extends Parser {\n  parse(context: ParserContext): void {\n    const { glTFResource, gltf, buffers } = context;\n    const { entities } = glTFResource;\n    const gltfSkins = gltf.skins;\n\n    if (!gltfSkins) return;\n\n    const count = gltfSkins.length;\n    const skins = new Array<Skin>(count);\n\n    for (let i = 0; i < count; i++) {\n      const { inverseBindMatrices, skeleton, joints, name = `SKIN_${i}` } = gltfSkins[i];\n      const jointCount = joints.length;\n\n      const skin = new Skin(name);\n      skin.inverseBindMatrices.length = jointCount;\n\n      // parse IBM\n      const accessor = gltf.accessors[inverseBindMatrices];\n      const buffer = GLTFUtil.getAccessorBuffer(context, gltf, accessor).data;\n      for (let i = 0; i < jointCount; i++) {\n        const inverseBindMatrix = new Matrix();\n        inverseBindMatrix.copyFromArray(buffer, i * 16);\n        skin.inverseBindMatrices[i] = inverseBindMatrix;\n      }\n\n      // get joints\n      for (let i = 0; i < jointCount; i++) {\n        const jointIndex = joints[i];\n        const jointName = entities[jointIndex].name;\n        skin.joints[i] = jointName;\n        // @todo Temporary solution, but it can alleviate the current BUG, and the skinning data mechanism of SkinnedMeshRenderer will be completely refactored in the future\n        for (let j = entities.length - 1; j >= 0; j--) {\n          if (jointIndex !== j && entities[j].name === jointName) {\n            entities[j].name = `${jointName}_${j}`;\n          }\n        }\n      }\n\n      // get skeleton\n      if (skeleton !== undefined) {\n        skin.skeleton = entities[skeleton].name;\n      } else {\n        const rootBone = this._findSkeletonRootBone(joints, entities);\n        if (rootBone) {\n          skin.skeleton = rootBone.name;\n        } else {\n          throw \"Failed to find skeleton root bone.\";\n        }\n      }\n\n      skins[i] = skin;\n    }\n\n    glTFResource.skins = skins;\n  }\n\n  private _findSkeletonRootBone(joints: number[], entities: Entity[]): Entity {\n    const paths = <Record<number, Entity[]>>{};\n    for (const index of joints) {\n      const path = new Array<Entity>();\n      let entity = entities[index];\n      while (entity) {\n        path.unshift(entity);\n        entity = entity.parent;\n      }\n      paths[index] = path;\n    }\n\n    let rootNode = <Entity>null;\n    for (let i = 0; ; i++) {\n      let path = paths[joints[0]];\n      if (i >= path.length) {\n        return rootNode;\n      }\n\n      const entity = path[i];\n      for (let j = 1, m = joints.length; j < m; j++) {\n        path = paths[joints[j]];\n        if (i >= path.length || entity !== path[i]) {\n          return rootNode;\n        }\n      }\n\n      rootNode = entity;\n    }\n  }\n}\n", "import { AssetPromise, AssetType, Texture2D, TextureFilterMode, TextureWrapMode } from \"@galacean/engine-core\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { ISampler, TextureMagFilter, TextureMinFilter, TextureWrapMode as GLTFTextureWrapMode } from \"../Schema\";\nimport { Parser } from \"./Parser\";\nimport { ParserContext } from \"./ParserContext\";\n\nexport class TextureParser extends Parser {\n  private static _wrapMap = {\n    [GLTFTextureWrapMode.CLAMP_TO_EDGE]: TextureWrapMode.Clamp,\n    [GLTFTextureWrapMode.MIRRORED_REPEAT]: TextureWrapMode.Mirror,\n    [GLTFTextureWrapMode.REPEAT]: TextureWrapMode.Repeat\n  };\n\n  parse(context: ParserContext): AssetPromise<Texture2D[]> {\n    const { glTFResource, gltf, buffers } = context;\n    const { engine, url } = glTFResource;\n\n    if (gltf.textures) {\n      const texturesPromiseInfo = context.texturesPromiseInfo;\n      AssetPromise.all(\n        gltf.textures.map(({ sampler, source = 0, name: textureName }, index) => {\n          const { uri, bufferView: bufferViewIndex, mimeType, name: imageName } = gltf.images[source];\n          if (uri) {\n            // TODO: support ktx extension https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_texture_basisu/README.md\n            const index = uri.lastIndexOf(\".\");\n            const ext = uri.substring(index + 1);\n            const type = ext.startsWith(\"ktx\") ? AssetType.KTX : AssetType.Texture2D;\n            return engine.resourceManager\n              .load<Texture2D>({\n                url: GLTFUtil.parseRelativeUrl(url, uri),\n                type: type\n              })\n              .then((texture) => {\n                if (!texture.name) {\n                  texture.name = textureName || imageName || `texture_${index}`;\n                }\n                if (sampler !== undefined) {\n                  this._parseSampler(texture, gltf.samplers[sampler]);\n                }\n                return texture;\n              });\n          } else {\n            const bufferView = gltf.bufferViews[bufferViewIndex];\n            const bufferViewData = GLTFUtil.getBufferViewData(bufferView, buffers);\n            return GLTFUtil.loadImageBuffer(bufferViewData, mimeType).then((image) => {\n              const texture = new Texture2D(engine, image.width, image.height);\n              texture.setImageSource(image);\n              texture.generateMipmaps();\n              texture.name = textureName || imageName || `texture_${index}`;\n              if (sampler !== undefined) {\n                this._parseSampler(texture, gltf.samplers[sampler]);\n              }\n              return texture;\n            });\n          }\n        })\n      )\n        .then((textures: Texture2D[]) => {\n          glTFResource.textures = textures;\n          texturesPromiseInfo.resolve(textures);\n        })\n        .catch(texturesPromiseInfo.reject);\n      return texturesPromiseInfo.promise;\n    }\n  }\n\n  private _parseSampler(texture: Texture2D, sampler: ISampler): void {\n    const { magFilter, minFilter, wrapS, wrapT } = sampler;\n\n    if (magFilter || minFilter) {\n      if (magFilter === TextureMagFilter.NEAREST) {\n        texture.filterMode = TextureFilterMode.Point;\n      } else if (minFilter <= TextureMinFilter.LINEAR_MIPMAP_NEAREST) {\n        texture.filterMode = TextureFilterMode.Bilinear;\n      } else {\n        texture.filterMode = TextureFilterMode.Trilinear;\n      }\n    }\n\n    if (wrapS) {\n      texture.wrapModeU = TextureParser._wrapMap[wrapS];\n    }\n\n    if (wrapT) {\n      texture.wrapModeV = TextureParser._wrapMap[wrapT];\n    }\n  }\n}\n", "import { Logger } from \"@galacean/engine-core\";\nimport { Parser } from \"./Parser\";\nimport { ParserContext } from \"./ParserContext\";\n\nexport class Validator extends Parser {\n  parse(context: ParserContext): void {\n    const {\n      asset: { version },\n      extensionsUsed,\n      extensionsRequired\n    } = context.gltf;\n\n    const gltfVersion = Number(version);\n    if (!(gltfVersion >= 2 && gltfVersion < 3)) {\n      throw \"Only support gltf 2.x.\";\n    }\n\n    if (extensionsUsed) {\n      Logger.info(\"extensionsUsed: \", extensionsUsed);\n      for (let i = 0; i < extensionsUsed.length; i++) {\n        if (!Parser.hasExtensionParser(extensionsUsed[i])) {\n          Logger.warn(`Extension ${extensionsUsed[i]} is not implemented, you can customize this extension in gltf.`);\n        }\n      }\n    }\n\n    if (extensionsRequired) {\n      Logger.info(`extensionsRequired: ${extensionsRequired}`);\n      for (let i = 0; i < extensionsRequired.length; i++) {\n        const extensionRequired = extensionsRequired[i];\n\n        if (!Parser.hasExtensionParser(extensionRequired)) {\n          Logger.error(`GLTF parser has not supported required extension ${extensionRequired}.`);\n        } else {\n          Parser.initialize(extensionRequired);\n        }\n      }\n    }\n  }\n}\n", "import { AssetPromise } from \"@galacean/engine-core\";\nimport { GLTFResource } from \"./GLTFResource\";\nimport { AnimationParser } from \"./parser/AnimationParser\";\nimport { BufferParser } from \"./parser/BufferParser\";\nimport { EntityParser } from \"./parser/EntityParser\";\nimport { MaterialParser } from \"./parser/MaterialParser\";\nimport { MeshParser } from \"./parser/MeshParser\";\nimport { Parser } from \"./parser/Parser\";\nimport { ParserContext } from \"./parser/ParserContext\";\nimport { SceneParser } from \"./parser/SceneParser\";\nimport { SkinParser } from \"./parser/SkinParser\";\nimport { TextureParser } from \"./parser/TextureParser\";\nimport { Validator } from \"./parser/Validator\";\n\nexport class GLTFParser {\n  static defaultPipeline = new GLTFParser([\n    BufferParser,\n    Validator,\n    TextureParser,\n    MaterialParser,\n    MeshParser,\n    EntityParser,\n    SkinParser,\n    AnimationParser,\n    SceneParser\n  ]);\n\n  private _pipes: Parser[] = [];\n\n  private constructor(pipes: (new () => Parser)[]) {\n    pipes.forEach((pipe: new () => Parser, index: number) => {\n      this._pipes[index] = new pipe();\n    });\n  }\n\n  parse(context: ParserContext): AssetPromise<GLTFResource> {\n    const glTFResource = context.glTFResource;\n    let lastPipe;\n\n    return new AssetPromise<GLTFResource>((resolve, reject) => {\n      this._pipes.forEach((parser: Parser) => {\n        if (lastPipe) {\n          lastPipe = lastPipe.then(() => {\n            return parser.parse(context);\n          });\n          if (lastPipe.cancel) {\n            context.chainPromises.push(lastPipe);\n          }\n        } else {\n          lastPipe = parser.parse(context);\n        }\n      });\n\n      if (lastPipe) {\n        lastPipe\n          .then(() => {\n            resolve(glTFResource);\n          })\n          .catch(reject);\n      }\n    });\n  }\n}\n", "import {\n  AnimationClip,\n  Camera,\n  Engine,\n  EngineObject,\n  Entity,\n  Light,\n  Material,\n  ModelMesh,\n  Renderer,\n  Skin,\n  Texture2D\n} from \"@galacean/engine-core\";\n\n/**\n * Product after GLTF parser, usually, `defaultSceneRoot` is only needed to use.\n */\nexport class GLTFResource extends EngineObject {\n  /** GLTF file url. */\n  url: string;\n  /** Texture2D after TextureParser. */\n  textures?: Texture2D[];\n  /** Material after MaterialParser. */\n  materials?: Material[];\n  /** ModelMesh after MeshParser. */\n  meshes?: ModelMesh[][];\n  /** Skin after SkinParser. */\n  skins?: Skin[];\n  /** AnimationClip after AnimationParser. */\n  animations?: AnimationClip[];\n  /** Entity after EntityParser. */\n  entities: Entity[];\n  /** Camera after SceneParser. */\n  cameras?: Camera[];\n  /** Export lights in extension KHR_lights_punctual */\n  lights?: Light[];\n  /** RootEntities after SceneParser. */\n  sceneRoots: Entity[];\n  /** RootEntity after SceneParser. */\n  defaultSceneRoot: Entity;\n  /** Renderer can replace material by `renderer.setMaterial` if gltf use plugin-in KHR_materials_variants. */\n  variants?: { renderer: Renderer; material: Material; variants: string[] }[];\n\n  constructor(engine: Engine, url: string) {\n    super(engine);\n    this.url = url;\n  }\n\n  /**\n   * @override\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n\n    super.destroy();\n    this.defaultSceneRoot.destroy();\n\n    this.textures = null;\n    this.materials = null;\n    this.meshes = null;\n    this.skins = null;\n    this.animations = null;\n    this.entities = null;\n    this.cameras = null;\n    this.lights = null;\n    this.sceneRoots = null;\n    this.variants = null;\n  }\n}\n", "import { AssetPromise, AssetType, Loader, LoadItem, resourceLoader, ResourceManager } from \"@galacean/engine-core\";\nimport { GLTFParser } from \"./gltf/GLTFParser\";\nimport { GLTFResource } from \"./gltf/GLTFResource\";\nimport { ParserContext } from \"./gltf/parser/ParserContext\";\n\n@resourceLoader(AssetType.Prefab, [\"gltf\", \"glb\"])\nexport class GLTFLoader extends Loader<GLTFResource> {\n  load(item: LoadItem, resourceManager: ResourceManager): Record<string, AssetPromise<any>> {\n    const url = item.url;\n    const context = new ParserContext(url);\n    const glTFResource = new GLTFResource(resourceManager.engine, url);\n    const masterPromiseInfo = context.masterPromiseInfo;\n\n    context.glTFResource = glTFResource;\n    context.keepMeshData = item.params?.keepMeshData ?? false;\n\n    masterPromiseInfo.onCancel(() => {\n      const { chainPromises } = context;\n      for (const promise of chainPromises) {\n        promise.cancel();\n      }\n    });\n\n    GLTFParser.defaultPipeline\n      .parse(context)\n      .then(masterPromiseInfo.resolve)\n      .catch((e) => {\n        console.error(e);\n        masterPromiseInfo.reject(`Error loading glTF model from ${url} .`);\n      });\n\n    return context.promiseMap;\n  }\n}\n\n/**\n * GlTF loader params.\n */\nexport interface GLTFParams {\n  /**\n   * @beta Now only contains vertex information, need to improve.\n   * Keep raw mesh data for glTF parser, default is false.\n   */\n  keepMeshData: boolean;\n}\n", "import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  TextureCube,\n  TextureCubeFace\n} from \"@galacean/engine-core\";\nimport { Color, Vector3 } from \"@galacean/engine-math\";\n\nconst PI = Math.PI;\n\ninterface IHDRHeader {\n  /**\n   * The width of the texture in pixels.\n   */\n  width: number;\n  /**\n   * The height of the texture in pixels.\n   */\n  height: number;\n  /**\n   * The index of the beginning of the data in the binary file.\n   */\n  dataPosition: number;\n}\n\n@resourceLoader(AssetType.HDR, [\"hdr\"])\nclass HDRLoader extends Loader<TextureCube> {\n  private static _rightBottomBack = new Vector3(1.0, -1.0, -1.0);\n  private static _rightBottomFront = new Vector3(1.0, -1.0, 1.0);\n  private static _rightUpBack = new Vector3(1.0, 1.0, -1.0);\n  private static _rightUpFront = new Vector3(1.0, 1.0, 1.0);\n  private static _leftBottomBack = new Vector3(-1.0, -1.0, -1.0);\n  private static _leftBottomFront = new Vector3(-1.0, -1.0, 1.0);\n  private static _leftUpBack = new Vector3(-1.0, 1.0, -1.0);\n  private static _leftUpFront = new Vector3(-1.0, 1.0, 1.0);\n\n  private static _faceRight = [\n    HDRLoader._rightBottomBack,\n    HDRLoader._rightBottomFront,\n    HDRLoader._rightUpBack,\n    HDRLoader._rightUpFront\n  ];\n  private static _faceLeft = [\n    HDRLoader._leftBottomFront,\n    HDRLoader._leftBottomBack,\n    HDRLoader._leftUpFront,\n    HDRLoader._leftUpBack\n  ];\n  private static _faceUp = [\n    HDRLoader._leftBottomFront,\n    HDRLoader._rightBottomFront,\n    HDRLoader._leftBottomBack,\n    HDRLoader._rightBottomBack\n  ];\n  private static _faceBottom = [\n    HDRLoader._leftUpBack,\n    HDRLoader._rightUpBack,\n    HDRLoader._leftUpFront,\n    HDRLoader._rightUpFront\n  ];\n  private static _faceFront = [\n    HDRLoader._leftBottomBack,\n    HDRLoader._rightBottomBack,\n    HDRLoader._leftUpBack,\n    HDRLoader._rightUpBack\n  ];\n  private static _faceBack = [\n    HDRLoader._rightBottomFront,\n    HDRLoader._leftBottomFront,\n    HDRLoader._rightUpFront,\n    HDRLoader._leftUpFront\n  ];\n\n  private static _tempVector3 = new Vector3();\n  private static _temp2Vector3 = new Vector3();\n  private static _temp3Vector3 = new Vector3();\n  private static _temp4Vector3 = new Vector3();\n  private static _temp5Vector3 = new Vector3();\n\n  private static _convertToCubemap(\n    pixels: Uint8Array,\n    inputWidth: number,\n    inputHeight: number,\n    size: number\n  ): Uint8ClampedArray[] {\n    if (!pixels) {\n      throw \"ConvertPanoramaToCubemap: input cannot be null\";\n    }\n\n    if (pixels.length != inputWidth * inputHeight * 4) {\n      throw \"ConvertPanoramaToCubemap: input size is wrong\";\n    }\n\n    const textureRight = this._createCubemapData(size, this._faceRight, pixels, inputWidth, inputHeight);\n    const textureLeft = this._createCubemapData(size, this._faceLeft, pixels, inputWidth, inputHeight);\n    const textureUp = this._createCubemapData(size, this._faceUp, pixels, inputWidth, inputHeight);\n    const textureDown = this._createCubemapData(size, this._faceBottom, pixels, inputWidth, inputHeight);\n    const textureFront = this._createCubemapData(size, this._faceFront, pixels, inputWidth, inputHeight);\n    const textureBack = this._createCubemapData(size, this._faceBack, pixels, inputWidth, inputHeight);\n\n    return [textureRight, textureLeft, textureUp, textureDown, textureFront, textureBack];\n  }\n\n  private static _createCubemapData(\n    texSize: number,\n    faceData: Vector3[],\n    pixels: Uint8Array,\n    inputWidth: number,\n    inputHeight: number\n  ): Uint8ClampedArray {\n    const textureArray = new Uint8ClampedArray(texSize * texSize * 4);\n    const rotDX1 = this._tempVector3\n      .set(0, 0, 0)\n      .add(faceData[1])\n      .subtract(faceData[0])\n      .scale(1 / texSize);\n    const rotDX2 = this._temp2Vector3\n      .set(0, 0, 0)\n      .add(faceData[3])\n      .subtract(faceData[2])\n      .scale(1 / texSize);\n\n    const dy = 1 / texSize;\n    let fy = 0;\n\n    for (let y = 0; y < texSize; y++) {\n      let xv1 = this._temp3Vector3.set(0, 0, 0).add(faceData[0]);\n      let xv2 = this._temp4Vector3.set(0, 0, 0).add(faceData[2]);\n\n      for (let x = 0; x < texSize; x++) {\n        const v = this._temp5Vector3.set(0, 0, 0).add(xv2).subtract(xv1).scale(fy).add(xv1);\n        v.normalize();\n\n        const color = this._calcProjectionSpherical(v, pixels, inputWidth, inputHeight);\n        this._RGBEToLinear(color);\n        this._linearToRGBM(color, 5);\n\n        // 4 channels per pixels\n        const index = y * texSize * 4 + x * 4;\n        textureArray[index] = color.r;\n        textureArray[index + 1] = color.g;\n        textureArray[index + 2] = color.b;\n        textureArray[index + 3] = color.a;\n\n        xv1.add(rotDX1);\n        xv2.add(rotDX2);\n      }\n\n      fy += dy;\n    }\n\n    return textureArray;\n  }\n\n  private static _calcProjectionSpherical(\n    vDir: Vector3,\n    pixels: Uint8Array,\n    inputWidth: number,\n    inputHeight: number\n  ): Color {\n    let theta = Math.atan2(vDir.z, -vDir.x);\n    let phi = Math.acos(vDir.y);\n\n    while (theta < -PI) {\n      theta += 2 * PI;\n    }\n    while (theta > PI) {\n      theta -= 2 * PI;\n    }\n\n    let dx = theta / PI;\n    let dy = phi / PI;\n\n    // recenter.\n    dx = dx * 0.5 + 0.5;\n\n    let px = Math.round(dx * inputWidth);\n    if (px < 0) {\n      px = 0;\n    } else if (px >= inputWidth) {\n      px = inputWidth - 1;\n    }\n\n    let py = Math.round(dy * inputHeight);\n    if (py < 0) {\n      py = 0;\n    } else if (py >= inputHeight) {\n      py = inputHeight - 1;\n    }\n\n    const inputY = inputHeight - py - 1;\n    const index = inputY * inputWidth * 4 + px * 4;\n    const r = pixels[index];\n    const g = pixels[index + 1];\n    const b = pixels[index + 2];\n    const a = pixels[index + 3];\n\n    return new Color(r, g, b, a);\n  }\n\n  private static _readStringLine(uint8array: Uint8Array, startIndex: number): string {\n    let line = \"\";\n    let character = \"\";\n\n    for (let i = startIndex; i < uint8array.length - startIndex; i++) {\n      character = String.fromCharCode(uint8array[i]);\n\n      if (character == \"\\n\") {\n        break;\n      }\n\n      line += character;\n    }\n\n    return line;\n  }\n\n  private static _parseHeader(uint8array: Uint8Array): IHDRHeader {\n    let height: number = 0;\n    let width: number = 0;\n\n    let line = this._readStringLine(uint8array, 0);\n    if (line[0] != \"#\" || line[1] != \"?\") {\n      throw \"Bad HDR Format.\";\n    }\n\n    let endOfHeader = false;\n    let findFormat = false;\n    let lineIndex: number = 0;\n\n    do {\n      lineIndex += line.length + 1;\n      line = this._readStringLine(uint8array, lineIndex);\n\n      if (line == \"FORMAT=32-bit_rle_rgbe\") {\n        findFormat = true;\n      } else if (line.length == 0) {\n        endOfHeader = true;\n      }\n    } while (!endOfHeader);\n\n    if (!findFormat) {\n      throw \"HDR Bad header format, unsupported FORMAT\";\n    }\n\n    lineIndex += line.length + 1;\n    line = this._readStringLine(uint8array, lineIndex);\n\n    const sizeRegexp = /^\\-Y (.*) \\+X (.*)$/g;\n    const match = sizeRegexp.exec(line);\n\n    // TODO. Support +Y and -X if needed.\n    if (!match || match.length < 3) {\n      throw \"HDR Bad header format, no size\";\n    }\n    width = parseInt(match[2]);\n    height = parseInt(match[1]);\n\n    if (width < 8 || width > 0x7fff) {\n      throw \"HDR Bad header format, unsupported size\";\n    }\n\n    lineIndex += line.length + 1;\n\n    return {\n      height: height,\n      width: width,\n      dataPosition: lineIndex\n    };\n  }\n\n  private static _readPixels(buffer: Uint8Array, width: number, height: number): Uint8Array {\n    const scanLineWidth = width;\n    const byteLength = buffer.byteLength;\n\n    const dataRGBA = new Uint8Array(4 * width * height);\n\n    let offset = 0,\n      pos = 0;\n    const ptrEnd = 4 * scanLineWidth;\n    const rgbeStart = new Uint8Array(4);\n    const scanLineBuffer = new Uint8Array(ptrEnd);\n    let numScanLines = height; // read in each successive scanLine\n\n    while (numScanLines > 0 && pos < byteLength) {\n      rgbeStart[0] = buffer[pos++];\n      rgbeStart[1] = buffer[pos++];\n      rgbeStart[2] = buffer[pos++];\n      rgbeStart[3] = buffer[pos++];\n\n      if (2 != rgbeStart[0] || 2 != rgbeStart[1] || ((rgbeStart[2] << 8) | rgbeStart[3]) != scanLineWidth) {\n        throw \"HDR Bad header format, wrong scan line width\";\n      }\n\n      // read each of the four channels for the scanline into the buffer\n      // first red, then green, then blue, then exponent\n\n      let ptr = 0,\n        count;\n\n      while (ptr < ptrEnd && pos < byteLength) {\n        count = buffer[pos++];\n        const isEncodedRun = count > 128;\n        if (isEncodedRun) count -= 128;\n\n        if (0 === count || ptr + count > ptrEnd) {\n          throw \"HDR Bad Format, bad scanline data (run)\";\n        }\n\n        if (isEncodedRun) {\n          // a (encoded) run of the same value\n          const byteValue = buffer[pos++];\n\n          for (let i = 0; i < count; i++) {\n            scanLineBuffer[ptr++] = byteValue;\n          } //ptr += count;\n        } else {\n          // a literal-run\n          scanLineBuffer.set(buffer.subarray(pos, pos + count), ptr);\n          ptr += count;\n          pos += count;\n        }\n      } // now convert data from buffer into rgba\n      // first red, then green, then blue, then exponent (alpha)\n\n      const l = scanLineWidth; //scanLine_buffer.byteLength;\n\n      for (let i = 0; i < l; i++) {\n        let off = 0;\n        dataRGBA[offset] = scanLineBuffer[i + off];\n        off += scanLineWidth;\n\n        dataRGBA[offset + 1] = scanLineBuffer[i + off];\n        off += scanLineWidth;\n\n        dataRGBA[offset + 2] = scanLineBuffer[i + off];\n        off += scanLineWidth;\n\n        dataRGBA[offset + 3] = scanLineBuffer[i + off];\n        offset += 4;\n      }\n\n      numScanLines--;\n    }\n\n    return dataRGBA;\n  }\n\n  private static _RGBEToLinear(color: Color): void {\n    const scaleFactor = Math.pow(2, color.a - 128) / 255;\n    color.r *= scaleFactor;\n    color.g *= scaleFactor;\n    color.b *= scaleFactor;\n    color.a = 1;\n  }\n\n  private static _linearToRGBM(color: Color, maxRange: number): void {\n    const maxRGB = Math.max(color.r, Math.max(color.g, color.b));\n    let M = Math.min(maxRGB / maxRange, 1);\n    M = Math.ceil(M * 255);\n    const scaleFactor = 65025 / (M * maxRange); // 255 * (255 / (M * maxRange) )\n\n    color.r *= scaleFactor;\n    color.g *= scaleFactor;\n    color.b *= scaleFactor;\n    color.a *= M;\n  }\n\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<TextureCube> {\n    return new AssetPromise((resolve, reject) => {\n      const engine = resourceManager.engine;\n\n      this.request<ArrayBuffer>(item.url, { type: \"arraybuffer\" })\n        .then((buffer) => {\n          const uint8Array = new Uint8Array(buffer);\n          const { width, height, dataPosition } = HDRLoader._parseHeader(uint8Array);\n          const pixels = HDRLoader._readPixels(uint8Array.subarray(dataPosition), width, height);\n          const cubeSize = height >> 1;\n\n          const cubeMapData = HDRLoader._convertToCubemap(pixels, width, height, cubeSize);\n          const texture = new TextureCube(engine, cubeSize);\n\n          for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n            texture.setPixelBuffer(TextureCubeFace.PositiveX + faceIndex, cubeMapData[faceIndex], 0);\n          }\n          texture.generateMipmaps();\n          resolve(texture);\n        })\n        .catch(reject);\n    });\n  }\n}\n", "import { resourceLoader, Loader, AssetPromise, AssetType, LoadItem } from \"@galacean/engine-core\";\n\n@resourceLoader(AssetType.JSON, [\"json\"], false)\nclass JSONLoader extends Loader<string> {\n  load(item: LoadItem): AssetPromise<string> {\n    return this.request(item.url, {\n      ...item,\n      type: \"json\"\n    });\n  }\n}\n", "/**\n *\n * ported from https://github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.khronosTextureContainer.ts\n */\n\nimport { TextureFormat } from \"@galacean/engine-core\";\nimport { GLCompressedTextureInternalFormat } from \"@galacean/engine-rhi-webgl\";\nimport { KTXContainer, Mipmap } from \"./type\";\n\nconst HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n\n// load types\nconst COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\nconst COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\nconst TEX_2D = 2; // uses a gl.texImage2D()\nconst TEX_3D = 3; // uses a gl.texImage3D()\n\nfunction getMipmaps(ktxContainer: KTXContainer, loadMipmaps: boolean): Mipmap[] {\n  const mipmaps = [];\n\n  // initialize width & height for level 1\n  var dataOffset = HEADER_LEN + ktxContainer.bytesOfKeyValueData;\n  var width = ktxContainer.pixelWidth;\n  var height = ktxContainer.pixelHeight;\n  var mipmapCount = loadMipmaps ? ktxContainer.numberOfMipmapLevels : 1;\n\n  for (var level = 0; level < mipmapCount; level++) {\n    var imageSize = new Int32Array(ktxContainer.buffer, dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n    dataOffset += 4; // size of the image + 4 for the imageSize field\n\n    for (var face = 0; face < ktxContainer.numberOfFaces; face++) {\n      var byteArray = new Uint8Array(ktxContainer.buffer, dataOffset, imageSize);\n\n      mipmaps.push({ data: byteArray, width: width, height: height });\n\n      dataOffset += imageSize;\n      dataOffset += 3 - ((imageSize + 3) % 4); // add padding for odd sized image\n    }\n    width = Math.max(1.0, width * 0.5);\n    height = Math.max(1.0, height * 0.5);\n  }\n\n  return mipmaps;\n}\n\n/**\n * Checks if the given data starts with a KTX file identifier.\n * @param data the data to check\n * @returns true if the data is a KTX file or false otherwise\n */\nfunction isValid(data: ArrayBuffer): boolean {\n  if (data.byteLength >= 12) {\n    // '«', 'K', 'T', 'X', ' ', '1', '1', '»', '\\r', '\\n', '\\x1A', '\\n'\n    const identifier = new Uint8Array(data, 0, 12);\n    if (\n      identifier[0] === 0xab &&\n      identifier[1] === 0x4b &&\n      identifier[2] === 0x54 &&\n      identifier[3] === 0x58 &&\n      identifier[4] === 0x20 &&\n      identifier[5] === 0x31 &&\n      identifier[6] === 0x31 &&\n      identifier[7] === 0xbb &&\n      identifier[8] === 0x0d &&\n      identifier[9] === 0x0a &&\n      identifier[10] === 0x1a &&\n      identifier[11] === 0x0a\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getEngineFormat(internalFormat: GLint): TextureFormat {\n  switch (internalFormat) {\n    // case GLCompressedTextureInternalFormat.RGBA_S3TC_DXT3_EXT:\n    // case GLCompressedTextureInternalFormat.RGBA_S3TC_DXT5_EXT:\n    // break;\n    case GLCompressedTextureInternalFormat.RGB_S3TC_DXT1_EXT:\n      return TextureFormat.DXT1;\n    case GLCompressedTextureInternalFormat.RGBA_S3TC_DXT5_EXT:\n      return TextureFormat.DXT5;\n    case GLCompressedTextureInternalFormat.RGB_ETC1_WEBGL:\n      return TextureFormat.ETC1_RGB;\n    case GLCompressedTextureInternalFormat.RGB8_ETC2:\n      return TextureFormat.ETC2_RGB;\n    case GLCompressedTextureInternalFormat.RGB8_PUNCHTHROUGH_ALPHA1_ETC2:\n      return TextureFormat.ETC2_RGBA5;\n    case GLCompressedTextureInternalFormat.RGBA8_ETC2_EAC:\n      return TextureFormat.ETC2_RGBA8;\n    case GLCompressedTextureInternalFormat.RGB_PVRTC_2BPPV1_IMG:\n      return TextureFormat.PVRTC_RGB2;\n    case GLCompressedTextureInternalFormat.RGBA_PVRTC_2BPPV1_IMG:\n      return TextureFormat.PVRTC_RGBA2;\n    case GLCompressedTextureInternalFormat.RGB_PVRTC_4BPPV1_IMG:\n      return TextureFormat.PVRTC_RGB4;\n    case GLCompressedTextureInternalFormat.RGBA_PVRTC_4BPPV1_IMG:\n      return TextureFormat.PVRTC_RGBA4;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_4X4_KHR:\n      return TextureFormat.ASTC_4x4;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_5X5_KHR:\n      return TextureFormat.ASTC_5x5;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_6X6_KHR:\n      return TextureFormat.ASTC_6x6;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_8X8_KHR:\n      return TextureFormat.ASTC_8x8;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_10X10_KHR:\n      return TextureFormat.ASTC_10x10;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_12X12_KHR:\n      return TextureFormat.ASTC_12x12;\n    default:\n      const formatName: any = GLCompressedTextureInternalFormat[internalFormat];\n      throw new Error(`this format is not supported in Galacean Engine: ${formatName}`);\n  }\n}\n/**\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n */\nexport const khronosTextureContainerParser = {\n  /**\n   *\n   * @param buffer contents of the KTX container file\n   * @param facesExpected should be either 1 or 6, based whether a cube texture or or\n   * @param threeDExpected provision for indicating that data should be a 3D texture, not implemented\n   * @param textureArrayExpected provision for indicating that data should be a texture array, not implemented\n   * @param mapEngineFormat get Galacean Engine native TextureFormat?\n   */\n  parse(\n    buffer: ArrayBuffer,\n    facesExpected: number,\n    withMipmaps: boolean,\n    mapEngineFormat: boolean = false\n  ): KTXContainer {\n    if (!isValid(buffer)) {\n      throw new Error(\"khronosTextureContainerParser: invalid KTX file, texture missing KTX identifier\");\n    }\n\n    // load the reset of the header in native 32 bit uint\n    const dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    const headerDataView = new DataView(buffer, 12, 13 * dataSize);\n    const endianness = headerDataView.getUint32(0, true);\n    const littleEndian = endianness === 0x04030201;\n\n    const parsedResult: KTXContainer = {\n      buffer: buffer,\n      glType: headerDataView.getUint32(1 * dataSize, littleEndian), // must be 0 for compressed textures\n      glTypeSize: headerDataView.getUint32(2 * dataSize, littleEndian), // must be 1 for compressed textures\n      glFormat: headerDataView.getUint32(3 * dataSize, littleEndian), // must be 0 for compressed textures\n      glInternalFormat: headerDataView.getUint32(4 * dataSize, littleEndian), // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n      glBaseInternalFormat: headerDataView.getUint32(5 * dataSize, littleEndian), // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n      pixelWidth: headerDataView.getUint32(6 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n      pixelHeight: headerDataView.getUint32(7 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n      pixelDepth: headerDataView.getUint32(8 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n      numberOfArrayElements: headerDataView.getUint32(9 * dataSize, littleEndian), // used for texture arrays\n      numberOfFaces: headerDataView.getUint32(10 * dataSize, littleEndian), // used for cubemap textures, should either be 1 or 6\n      numberOfMipmapLevels: headerDataView.getUint32(11 * dataSize, littleEndian), // number of levels; disregard possibility of 0 for compressed textures\n      bytesOfKeyValueData: headerDataView.getUint32(12 * dataSize, littleEndian), // the amount of space after the header for meta-data\n      // would need to make this more elaborate & adjust checks above to support more than one load type\n      loadType: COMPRESSED_2D\n    };\n\n    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n    if (parsedResult.glType !== 0) {\n      throw new Error(\"only compressed formats currently supported\");\n    } else {\n      // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n      parsedResult.numberOfMipmapLevels = Math.max(1, parsedResult.numberOfMipmapLevels);\n    }\n\n    if (parsedResult.pixelHeight === 0 || parsedResult.pixelDepth !== 0) {\n      throw new Error(\"only 2D textures currently supported\");\n    }\n\n    if (parsedResult.numberOfArrayElements !== 0) {\n      throw new Error(\"texture arrays not currently supported\");\n    }\n\n    if (parsedResult.numberOfFaces !== facesExpected) {\n      throw new Error(\"number of faces expected\" + facesExpected + \", but found \" + parsedResult.numberOfFaces);\n    }\n\n    if (withMipmaps) {\n      parsedResult.mipmaps = getMipmaps(parsedResult, true);\n    }\n\n    if (mapEngineFormat) {\n      parsedResult.engineFormat = getEngineFormat(parsedResult.glInternalFormat);\n    }\n    return parsedResult;\n  }\n};\n", "import { CompressedTextureData, CompressedCubeData } from \"./type\";\nimport { khronosTextureContainerParser } from \"./KhronosTextureContainer\";\nimport { TextureFormat } from \"@galacean/engine-core\";\n\nexport function parseSingleKTX(data: ArrayBuffer): CompressedTextureData {\n  const ktx = khronosTextureContainerParser.parse(data, 1, true, true);\n  return {\n    mipmaps: ktx.mipmaps,\n    engineFormat: ktx.engineFormat,\n    internalFormat: ktx.glInternalFormat,\n    width: ktx.pixelWidth,\n    height: ktx.pixelHeight\n  };\n}\n\nexport function parseCubeKTX(dataArray: ArrayBuffer[]): CompressedCubeData {\n  const mipmapsFaces = [];\n  let internalFormat: number;\n  let engineFormat: TextureFormat;\n  let width: number;\n  let height: number;\n  for (let i = 0; i < dataArray.length; i++) {\n    const ktx = khronosTextureContainerParser.parse(dataArray[i], 1, true, true);\n    mipmapsFaces.push(ktx.mipmaps);\n    if (i === 0) {\n      width = ktx.pixelWidth;\n      height = ktx.pixelHeight;\n      internalFormat = ktx.glInternalFormat;\n      engineFormat = ktx.engineFormat;\n    }\n  }\n  return {\n    mipmapsFaces,\n    engineFormat,\n    internalFormat,\n    width,\n    height\n  };\n}\n", "import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  TextureCubeFace,\n  TextureCube\n} from \"@galacean/engine-core\";\nimport { parseCubeKTX } from \"./compressed-texture\";\n\n@resourceLoader(AssetType.KTXCube, [])\nclass KTXCubeLoader extends Loader<TextureCube> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<TextureCube> {\n    return new AssetPromise((resolve, reject) => {\n      Promise.all(\n        item.urls.map((url) =>\n          this.request<ArrayBuffer>(url, {\n            ...item,\n            type: \"arraybuffer\"\n          })\n        )\n      )\n        .then((data) => {\n          const parsedData = parseCubeKTX(data);\n          const { width, mipmapsFaces, engineFormat } = parsedData;\n          const mipmap = mipmapsFaces[0].length > 1;\n          const texture = new TextureCube(resourceManager.engine, width, engineFormat, mipmap);\n\n          for (let face = 0; face < 6; face++) {\n            const length = mipmapsFaces[face].length;\n\n            for (let miplevel = 0; miplevel < length; miplevel++) {\n              const { data, width, height } = mipmapsFaces[face][miplevel];\n\n              texture.setPixelBuffer(TextureCubeFace.PositiveX + face, data, miplevel, 0, 0, width, height);\n            }\n          }\n\n          resolve(texture);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n", "import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  Texture2D\n} from \"@galacean/engine-core\";\nimport { parseSingleKTX } from \"./compressed-texture\";\n\n@resourceLoader(AssetType.KTX, [\"ktx\"])\nexport class KTXLoader extends Loader<Texture2D> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Texture2D> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<ArrayBuffer>(item.url, {\n        ...item,\n        type: \"arraybuffer\"\n      })\n        .then((bin) => {\n          const parsedData = parseSingleKTX(bin);\n          const { width, height, mipmaps, engineFormat } = parsedData;\n          const mipmap = mipmaps.length > 1;\n          const texture = new Texture2D(resourceManager.engine, width, height, engineFormat, mipmap);\n\n          for (let miplevel = 0; miplevel < mipmaps.length; miplevel++) {\n            const { width, height, data } = mipmaps[miplevel];\n            texture.setPixelBuffer(data, miplevel, 0, 0, width, height);\n          }\n\n          resolve(texture);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n", "import {\n  AssetPromise,\n  AssetType,\n  BlinnPhongMaterial,\n  Loader,\n  LoadItem,\n  PBRBaseMaterial,\n  PBRMaterial,\n  PBRSpecularMaterial,\n  resourceLoader,\n  ResourceManager,\n  Shader,\n  Texture2D,\n  UnlitMaterial\n} from \"@galacean/engine-core\";\nimport { Color, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\n\n@resourceLoader(AssetType.Material, [\"json\"])\nclass MaterialLoader extends Loader<string> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<string> {\n    return new AssetPromise((resolve, reject) => {\n      this.request(item.url, {\n        ...item,\n        type: \"json\"\n      })\n        .then((json: { [key: string]: any }) => {\n          const engine = resourceManager.engine;\n          const { name, shader, shaderData, macros, renderState } = json;\n\n          let material;\n          switch (shader) {\n            case \"pbr\":\n              material = new PBRMaterial(engine);\n              break;\n            case \"pbr-specular\":\n              material = new PBRSpecularMaterial(engine);\n              break;\n            case \"unlit\":\n              material = new UnlitMaterial(engine);\n              break;\n            case \"blinn-phong\":\n              material = new BlinnPhongMaterial(engine);\n              break;\n            case \"bake-pbr\":\n              // @todo refactor custom shader later\n              // @ts-ignore\n              material = new PBRBaseMaterial(engine, Shader.find(\"bake-pbr\"));\n              break;\n          }\n          material.name = name;\n\n          const texturePromises = new Array<Promise<Texture2D | void>>();\n          const materialShaderData = material.shaderData;\n          for (let key in shaderData) {\n            const { type, value } = shaderData[key];\n\n            switch (type) {\n              case \"Vector2\":\n                materialShaderData.setVector2(key, new Vector2(value.x, value.y));\n                break;\n              case \"Vector3\":\n                materialShaderData.setVector3(key, new Vector3(value.x, value.y, value.z));\n                break;\n              case \"Vector4\":\n                materialShaderData.setVector4(key, new Vector4(value.x, value.y, value.z, value.w));\n                break;\n              case \"Color\":\n                materialShaderData.setColor(key, new Color(value.r, value.g, value.b, value.a));\n                break;\n              case \"Float\":\n                materialShaderData.setFloat(key, value);\n                break;\n              case \"Texture\":\n                texturePromises.push(\n                  // @ts-ignore\n                  resourceManager.getResourceByRef<Texture2D>(value).then((texture) => {\n                    materialShaderData.setTexture(key, texture);\n                  })\n                );\n                break;\n            }\n          }\n\n          for (let i = 0, length = macros.length; i < length; i++) {\n            const { name, value } = macros[i];\n            if (value == undefined) {\n              materialShaderData.enableMacro(name);\n            } else {\n              materialShaderData.enableMacro(name, value);\n            }\n          }\n\n          for (let key in renderState) {\n            material[key] = renderState[key];\n          }\n\n          return Promise.all(texturePromises).then(() => {\n            resolve(material);\n          });\n        })\n        .catch(reject);\n    });\n  }\n}\n", "function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n", "import { GLTFUtil } from \"../../gltf/GLTFUtil\";\nimport { ab2str } from \"./Utils\";\n\nclass ImageData {\n  type: \"image/png\" | \"image/jpg\" | \"image/webp\" | \"ktx\";\n  buffer: ArrayBuffer;\n}\n\nexport class BufferReader {\n  private _dataView: DataView;\n  private _littleEndian: boolean;\n  private _offset: number;\n\n  public static imageMapping = {\n    0: \"image/png\",\n    1: \"image/jpg\",\n    2: \"image/webp\",\n    3: \"ktx\"\n  };\n\n  constructor(public buffer: ArrayBuffer, byteOffset: number = 0, byteLength?: number, littleEndian: boolean = true) {\n    // byteLength = byteLength ?? _buffer.byteLength;\n    this._dataView = new DataView(buffer);\n    this._littleEndian = littleEndian;\n    this._offset = byteOffset;\n  }\n\n  get offset() {\n    return this._offset;\n  }\n\n  nextUint8() {\n    const value = this._dataView.getUint8(this._offset);\n    this._offset += 1;\n    return value;\n  }\n\n  nextUint16() {\n    const value = this._dataView.getUint16(this._offset, this._littleEndian);\n    this._offset += 2;\n    return value;\n  }\n\n  nextUint32() {\n    const value = this._dataView.getUint32(this._offset, this._littleEndian);\n    this._offset += 4;\n    return value;\n  }\n\n  nextInt32() {\n    const value = this._dataView.getInt32(this._offset, this._littleEndian);\n    this._offset += 4;\n    return value;\n  }\n\n  nextInt32Array(len: number) {\n    const value = new Int32Array(this.buffer, this._offset, len);\n    this._offset += 4 * len;\n    return value;\n  }\n\n  nextFloat32() {\n    const value = this._dataView.getFloat32(this._offset, this._littleEndian);\n    this._offset += 4;\n    return value;\n  }\n\n  nextFloat32Array(len: number) {\n    const value = new Float32Array(this.buffer, this._offset, len);\n    this._offset += 4 * len;\n    return value;\n  }\n\n  nextUint32Array(len: number) {\n    const value = new Uint32Array(this.buffer, this._offset, len);\n    this._offset += 4 * len;\n    return value;\n  }\n\n  nextUint8Array(len: number) {\n    const value = new Uint8Array(this.buffer, this._offset, len);\n    this._offset += len;\n    return value;\n  }\n\n  nextUint64() {\n    const left = this._dataView.getUint32(this._offset, this._littleEndian);\n    const right = this._dataView.getUint32(this._offset + 4, this._littleEndian);\n    const value = left + 2 ** 32 * right;\n    this._offset += 8;\n    return value;\n  }\n\n  nextStr(): string {\n    const strByteLength = this.nextUint16();\n    const uint8Array = new Uint8Array(this.buffer, this._offset, strByteLength);\n    this._offset += strByteLength;\n    return GLTFUtil.decodeText(uint8Array);\n  }\n\n  /**\n   * image data 放在最后\n   */\n  nextImageData(count: number = 0): ArrayBuffer {\n    return this.buffer.slice(this._offset);\n  }\n\n  nextImagesData(count: number): ArrayBuffer[] {\n    const imagesLen = new Array(count);\n    // Start offset of Uint32Array should be a multiple of 4. ref: https://stackoverflow.com/questions/15417310/why-typed-array-constructors-require-offset-to-be-multiple-of-underlying-type-si\n    for (let i = 0; i < count; i++) {\n      const len = this._dataView.getUint32(this._offset, this._littleEndian);\n      imagesLen[i] = len;\n      this._offset += 4;\n    }\n    const imagesData: ArrayBuffer[] = [];\n\n    for (let i = 0; i < count; i++) {\n      const len = imagesLen[i];\n      const buffer = this.buffer.slice(this._offset, this._offset + len);\n      this._offset += len;\n      imagesData.push(buffer);\n    }\n    return imagesData;\n  }\n\n  skip(bytes: number) {\n    this._offset += bytes;\n    return this;\n  }\n\n  scan(maxByteLength: number, term: number = 0x00): Uint8Array {\n    const byteOffset = this._offset;\n    let byteLength = 0;\n    while (this._dataView.getUint8(this._offset) !== term && byteLength < maxByteLength) {\n      byteLength++;\n      this._offset++;\n    }\n\n    if (byteLength < maxByteLength) this._offset++;\n\n    return new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + byteOffset, byteLength);\n  }\n}\n", "import { Engine } from \"@galacean/engine-core\";\nimport type { BufferReader } from \"./BufferReader\";\n\nexport const decoderMap: Record<\n  string,\n  {\n    decode: (engine: Engine, bufferReader: BufferReader) => Promise<any>;\n  }\n> = {};\n\n/**\n * Decoder decorator generator.\n * @param type - resource file type.\n * @returns Decoder decorator\n */\nexport function decoder(type: string): ClassDecorator {\n  return (target: any) => {\n    decoderMap[type] = target;\n  };\n}", "import { GLTFUtil } from \"../../gltf/GLTFUtil\";\n\nexport class FileHeader {\n  totalLength: number = 0;\n  version: number = 0;\n  type: string = \"\";\n  name: string = \"\";\n  headerLength: number = 0;\n\n  static decode(arrayBuffer: ArrayBuffer): FileHeader {\n    const dataView = new DataView(arrayBuffer);\n    const totalLen = dataView.getUint32(0, true);\n    const fileVersion = dataView.getUint8(4);\n    const typeLen = dataView.getUint16(5, true);\n    const typeUint8Array = new Uint8Array(arrayBuffer, 7, typeLen);\n    const nameLen = dataView.getUint16(7 + typeLen, true);\n    const nameUint8Array = new Uint8Array(arrayBuffer, 9 + typeLen, nameLen);\n\n    const name = GLTFUtil.decodeText(nameUint8Array);\n    const type = GLTFUtil.decodeText(typeUint8Array);\n    const header = new FileHeader();\n    header.totalLength = totalLen;\n    header.name = name;\n    header.type = type;\n    header.version = fileVersion;\n    header.headerLength = nameUint8Array.byteLength + typeUint8Array.byteLength + 9;\n    return header;\n  }\n\n  public get dataLength() {\n    return this.totalLength - this.headerLength;\n  }\n}\n", "import { ModelMesh, BlendShape } from \"@galacean/engine-core\";\nimport { decoder } from \"../../utils/Decorator\";\nimport type { Engine } from \"@galacean/engine-core\";\nimport type { BufferReader } from \"../../utils/BufferReader\";\nimport { IEncodedModelMesh } from \"./IModelMesh\";\nimport { Color, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\n\n/**\n * @todo refactor \n */\n@decoder(\"Mesh\")\nexport class MeshDecoder {\n  public static decode(engine: Engine, bufferReader: BufferReader): Promise<ModelMesh> {\n    return new Promise((resolve) => {\n      const modelMesh = new ModelMesh(engine);\n      const jsonDataString = bufferReader.nextStr();\n      const encodedMeshData: IEncodedModelMesh = JSON.parse(jsonDataString);\n\n      // @ts-ignore Vector3 is not compatible with {x: number, y: number, z: number}.\n      encodedMeshData.bounds && modelMesh.bounds.copyFrom(encodedMeshData.bounds);\n\n      const offset = Math.ceil(bufferReader.offset / 4) * 4;\n\n      const float32Array = new Float32Array(\n        bufferReader.buffer,\n        encodedMeshData.positions.start + offset,\n        (encodedMeshData.positions.end - encodedMeshData.positions.start) / 4\n      );\n      const vertexCount = float32Array.length / 3;\n      const positions = float32ArrayToVector3(float32Array, vertexCount);\n      modelMesh.setPositions(positions);\n      if (encodedMeshData.normals) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.normals.start + offset,\n          (encodedMeshData.normals.end - encodedMeshData.normals.start) / 4\n        );\n        const normals = float32ArrayToVector3(float32Array, vertexCount);\n        modelMesh.setNormals(normals);\n      }\n      if (encodedMeshData.uvs) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.uvs.start + offset,\n          (encodedMeshData.uvs.end - encodedMeshData.uvs.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount));\n      }\n      if (encodedMeshData.uv1) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.uv1.start + offset,\n          (encodedMeshData.uv1.end - encodedMeshData.uv1.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount), 1);\n      }\n      if (encodedMeshData.uv2) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.uv2.start + offset,\n          (encodedMeshData.uv2.end - encodedMeshData.uv2.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount), 2);\n      }\n      if (encodedMeshData.uv3) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.uv3.start + offset,\n          (encodedMeshData.uv3.end - encodedMeshData.uv3.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount), 3);\n      }\n      if (encodedMeshData.uv4) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.uv4.start + offset,\n          (encodedMeshData.uv4.end - encodedMeshData.uv4.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount), 4);\n      }\n      if (encodedMeshData.uv5) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.uv5.start + offset,\n          (encodedMeshData.uv5.end - encodedMeshData.uv5.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount), 5);\n      }\n      if (encodedMeshData.uv6) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.uv6.start + offset,\n          (encodedMeshData.uv6.end - encodedMeshData.uv6.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount), 6);\n      }\n      if (encodedMeshData.uv7) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.uv7.start + offset,\n          (encodedMeshData.uv7.end - encodedMeshData.uv7.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount), 7);\n      }\n      if (encodedMeshData.colors) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.colors.start + offset,\n          (encodedMeshData.colors.end - encodedMeshData.colors.start) / 4\n        );\n        modelMesh.setColors(float32ArrayToVColor(float32Array, vertexCount));\n      }\n      if (encodedMeshData.boneWeights) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.boneWeights.start + offset,\n          (encodedMeshData.boneWeights.end - encodedMeshData.boneWeights.start) / 4\n        );\n        modelMesh.setBoneWeights(float32ArrayToVector4(float32Array, vertexCount));\n      }\n      if (encodedMeshData.boneIndices) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.boneIndices.start + offset,\n          (encodedMeshData.boneIndices.end - encodedMeshData.boneIndices.start) / 4\n        );\n        modelMesh.setBoneIndices(float32ArrayToVector4(float32Array, vertexCount));\n      }\n      if (encodedMeshData.blendShapes) {\n        encodedMeshData.blendShapes.forEach((blendShapeData) => {\n          const blendShape = new BlendShape(blendShapeData.name);\n          blendShapeData.frames.forEach((frameData) => {\n            const positionArray = new Float32Array(\n              bufferReader.buffer,\n              frameData.deltaPosition.start + offset,\n              (frameData.deltaPosition.end - frameData.deltaPosition.start) / 4\n            );\n            const count = positionArray.length / 3;\n            const deltaPosition = float32ArrayToVector3(positionArray, count);\n            let deltaNormals: Vector3[] | null = null;\n            if (frameData.deltaNormals) {\n              const normalsArray = new Float32Array(\n                bufferReader.buffer,\n                frameData.deltaNormals.start + offset,\n                (frameData.deltaNormals.end - frameData.deltaNormals.start) / 4\n              );\n              deltaNormals = float32ArrayToVector3(normalsArray, count);\n            }\n            let deltaTangents: Vector4[] | null = null;\n            if (frameData.deltaTangents) {\n              const tangentsArray = new Float32Array(\n                bufferReader.buffer,\n                frameData.deltaTangents.start + offset,\n                (frameData.deltaTangents.end - frameData.deltaTangents.start) / 4\n              );\n              deltaTangents = float32ArrayToVector4(tangentsArray, count);\n            }\n            blendShape.addFrame(frameData.weight, deltaPosition);\n          });\n          modelMesh.addBlendShape(blendShape);\n        });\n      }\n      if (encodedMeshData.indices) {\n        let indices: Uint16Array | Uint32Array = null;\n        if (encodedMeshData.indices.type === 0) {\n          indices = new Uint16Array(\n            bufferReader.buffer,\n            encodedMeshData.indices.start + offset,\n            (encodedMeshData.indices.end - encodedMeshData.indices.start) / 2\n          );\n        } else {\n          indices = new Uint32Array(\n            bufferReader.buffer,\n            encodedMeshData.indices.start + offset,\n            (encodedMeshData.indices.end - encodedMeshData.indices.start) / 4\n          );\n        }\n        modelMesh.setIndices(indices);\n      }\n      \n      encodedMeshData.subMeshes.forEach((subMesh) => modelMesh.addSubMesh(subMesh));\n      modelMesh.uploadData(false);\n      resolve(modelMesh);\n    });\n  }\n}\n\nfunction float32ArrayToVColor(float32Array: Float32Array, vertexCount: number) {\n  const array = new Array(vertexCount);\n  for (let i = 0; i < vertexCount; i++) {\n    array[i] = new Color(\n      float32Array[i * 4],\n      float32Array[i * 4 + 1],\n      float32Array[i * 4 + 2],\n      float32Array[i * 4 + 3]\n    );\n  }\n  return array;\n}\n\nfunction float32ArrayToVector4(float32Array: Float32Array, vertexCount: number) {\n  const array = new Array(vertexCount);\n  for (let i = 0; i < vertexCount; i++) {\n    array[i] = new Vector4(\n      float32Array[i * 4],\n      float32Array[i * 4 + 1],\n      float32Array[i * 4 + 2],\n      float32Array[i * 4 + 3]\n    );\n  }\n  return array;\n}\n\nfunction float32ArrayToVector3(float32Array: Float32Array, vertexCount: number) {\n  const array = new Array(vertexCount);\n  for (let i = 0; i < vertexCount; i++) {\n    array[i] = new Vector3(float32Array[i * 3], float32Array[i * 3 + 1], float32Array[i * 3 + 2]);\n  }\n  return array;\n}\n\nfunction float32ArrayToVector2(float32Array: Float32Array, vertexCount: number) {\n  const array = new Array(vertexCount);\n  for (let i = 0; i < vertexCount; i++) {\n    array[i] = new Vector2(float32Array[i * 2], float32Array[i * 2 + 1]);\n  }\n  return array;\n}\n", "import { Engine, Texture2D } from \"@galacean/engine-core\";\nimport { BufferReader } from \"../../utils/BufferReader\";\nimport { decoder } from \"../../utils/Decorator\";\n\n@decoder(\"Texture2D\")\nexport class Texture2DDecoder {\n  static decode(engine: Engine, bufferReader: BufferReader): Promise<Texture2D> {\n    return new Promise((resolve, reject) => {\n      const objectId = bufferReader.nextStr();\n      const mipmap = !!bufferReader.nextUint8();\n      const filterMode = bufferReader.nextUint8();\n      const anisoLevel = bufferReader.nextUint8();\n      const wrapModeU = bufferReader.nextUint8();\n      const wrapModeV = bufferReader.nextUint8();\n      const format = bufferReader.nextUint8();\n      const width = bufferReader.nextUint16();\n      const height = bufferReader.nextUint16();\n      const isPixelBuffer = bufferReader.nextUint8();\n\n      const mipCount = bufferReader.nextUint8();\n      const imagesData = bufferReader.nextImagesData(mipCount);\n\n      const texture2D = new Texture2D(engine, width, height, format, mipmap);\n      texture2D.filterMode = filterMode;\n      texture2D.anisoLevel = anisoLevel;\n      texture2D.wrapModeU = wrapModeU;\n      texture2D.wrapModeV = wrapModeV;\n\n      if (isPixelBuffer) {\n        const pixelBuffer = new Uint8Array(imagesData[0]);\n        texture2D.setPixelBuffer(pixelBuffer);\n        if (mipmap) {\n          texture2D.generateMipmaps();\n          for (let i = 1; i < mipCount; i++) {\n            const pixelBuffer = new Uint8Array(imagesData[i]);\n            texture2D.setPixelBuffer(pixelBuffer, i);\n          }\n        }\n        // @ts-ignore\n        engine.resourceManager._objectPool[objectId] = texture2D;\n        resolve(texture2D);\n      } else {\n        const blob = new window.Blob([imagesData[0]]);\n        const img = new Image();\n        img.onload = () => {\n          texture2D.setImageSource(img);\n          let completedCount = 0;\n          const onComplete = () => {\n            completedCount++;\n            if (completedCount >= mipCount) {\n              resolve(texture2D);\n            }\n          };\n          onComplete();\n          if (mipmap) {\n            texture2D.generateMipmaps();\n            for (let i = 1; i < mipCount; i++) {\n              const blob = new window.Blob([imagesData[i]]);\n              const img = new Image();\n              img.onload = () => {\n                texture2D.setImageSource(img, i);\n                onComplete();\n              };\n              img.src = URL.createObjectURL(blob);\n            }\n          }\n        };\n        img.src = URL.createObjectURL(blob);\n      }\n    });\n  }\n}\n", "export function _is_native_reflect_construct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nexport { _is_native_reflect_construct as _ };\n", "import { _is_native_reflect_construct } from \"./_is_native_reflect_construct.js\";\nimport { _set_prototype_of } from \"./_set_prototype_of.js\";\nexport function _construct(Parent, args, Class) {\n    if (_is_native_reflect_construct()) _construct = Reflect.construct;\n    else {\n        _construct = function construct(Parent, args, Class) {\n            var a = [null];\n            a.push.apply(a, args);\n            var Constructor = Function.bind.apply(Parent, a);\n            var instance = new Constructor();\n\n            if (Class) _set_prototype_of(instance, Class.prototype);\n\n            return instance;\n        };\n    }\n\n    return _construct.apply(null, arguments);\n}\nexport { _construct as _ };\n", "import { Engine, Entity, Loader } from \"@galacean/engine-core\";\nimport { IBasicType, IClassObject, IEntity, IAssetRef } from \"./PrefabDesign\";\n\nexport class ReflectionParser {\n  static customParseComponentHandles = new Map<string, Function>();\n\n  static registerCustomParseComponent(componentType: string, handle: Function) {\n    this.customParseComponentHandles[componentType] = handle;\n  }\n\n  static parseEntity(entityConfig: IEntity, engine: Engine): Promise<Entity> {\n    return ReflectionParser.getEntityByConfig(entityConfig, engine).then((entity) => {\n      entity.isActive = entityConfig.isActive ?? true;\n      const { position, rotation, scale } = entityConfig;\n      if (position) entity.transform.position.copyFrom(position);\n      if (rotation) entity.transform.rotation.copyFrom(rotation);\n      if (scale) entity.transform.scale.copyFrom(scale);\n      return entity;\n    });\n  }\n\n  private static getEntityByConfig(entityConfig: IEntity, engine: Engine): Promise<Entity> {\n    // @ts-ignore\n    const assetRefId: string = entityConfig.assetRefId;\n    if (assetRefId) {\n      return (\n        engine.resourceManager\n          // @ts-ignore\n          .getResourceByRef<Entity>({ refId: assetRefId, key: entityConfig.key, isClone: entityConfig.isClone })\n          .then((entity) => {\n            entity.name = entityConfig.name;\n            return entity;\n          })\n      );\n    } else {\n      const entity = new Entity(engine, entityConfig.name);\n      return Promise.resolve(entity);\n    }\n  }\n\n  static parseClassObject(\n    item: IClassObject,\n    engine: Engine,\n    resourceManager: any = engine.resourceManager\n  ): Promise<any> {\n    const Class = Loader.getClass(item.class);\n    const params = item.constructParams ?? [];\n    const instance = new Class(...params);\n    return this.parsePropsAndMethods(instance, item, engine, resourceManager);\n  }\n\n  static parseBasicType(\n    value: IBasicType,\n    engine: Engine,\n    resourceManager: any = engine.resourceManager\n  ): Promise<any> {\n    if (Array.isArray(value)) {\n      return Promise.all(value.map((item) => this.parseBasicType(item, engine, resourceManager)));\n    } else if (typeof value === \"object\" && value != null) {\n      if (this._isClass(value)) {\n        // class object\n        return this.parseClassObject(value, engine, resourceManager);\n      } else if (this._isRef(value)) {\n        // reference object\n        return resourceManager.getResourceByRef(value);\n      } else {\n        // basic type\n        return Promise.resolve(value);\n      }\n    } else {\n      return Promise.resolve(value);\n    }\n  }\n\n  static parsePropsAndMethods(\n    instance: any,\n    item: Omit<IClassObject, \"class\">,\n    engine: Engine,\n    resourceManager: any = engine.resourceManager\n  ) {\n    const promises = [];\n    if (item.methods) {\n      for (let methodName in item.methods) {\n        const methodParams = item.methods[methodName];\n        for (let i = 0, count = methodParams.length; i < count; i++) {\n          const params = methodParams[i];\n          const promise = this.parseMethod(instance, methodName, params, engine, resourceManager);\n          promises.push(promise);\n        }\n      }\n    }\n\n    if (item.props) {\n      for (let key in item.props) {\n        const value = item.props[key];\n        const promise = this.parseBasicType(value, engine).then((v) => {\n          return (instance[key] = v);\n        });\n        promises.push(promise);\n      }\n    }\n\n    return Promise.all(promises).then(() => {\n      const handle = this.customParseComponentHandles[instance.constructor.name];\n      if (handle) return handle(instance, item, engine);\n      else return instance;\n    });\n  }\n\n  static parseMethod(\n    instance: any,\n    methodName: string,\n    methodParams: Array<IBasicType>,\n    engine: Engine,\n    resourceManager: any = engine.resourceManager\n  ) {\n    return Promise.all(methodParams.map((param) => this.parseBasicType(param, engine, resourceManager))).then(\n      (result) => {\n        return instance[methodName](...result);\n      }\n    );\n  }\n\n  private static _isClass(value: any): value is IClassObject {\n    return value[\"class\"] != undefined;\n  }\n\n  private static _isRef(value: any): value is IAssetRef {\n    return value[\"refId\"] != undefined;\n  }\n}\n", "import { Engine, Entity } from \"@galacean/engine-core\";\nimport type { IEntity, IPrefabFile } from \"./PrefabDesign\";\nimport { ReflectionParser } from \"./ReflectionParser\";\n\nexport class PrefabParser {\n  static parseChildren(entitiesConfig: Map<string, IEntity>, entities: Map<string, Entity>, parentId: string) {\n    const children = entitiesConfig.get(parentId).children;\n    if (children && children.length > 0) {\n      const parent = entities.get(parentId);\n      for (let i = 0; i < children.length; i++) {\n        const childId = children[i];\n        const entity = entities.get(childId);\n        parent.addChild(entity);\n        this.parseChildren(entitiesConfig, entities, childId);\n      }\n    }\n  }\n}\n", "import {\n  Animator,\n  Camera,\n  Component,\n  DirectLight,\n  Entity,\n  MeshRenderer,\n  ParticleRenderer,\n  Transform,\n  PointLight,\n  SpotLight,\n  Script,\n  SpriteMask,\n  SpriteRenderer,\n  TextRenderer\n} from \"@galacean/engine-core\";\n\nexport const ComponentMap: Record<string, new (entity: Entity) => Component> = {\n  Transform,\n  Animator,\n  DirectLight,\n  Camera,\n  MeshRenderer,\n  ParticleRenderer,\n  PointLight,\n  SpotLight,\n  Script,\n  SpriteMask,\n  SpriteRenderer,\n  TextRenderer\n};\n", "import {\n  AnimationArrayCurve,\n  AnimationClip,\n  AnimationColorCurve,\n  AnimationCurve,\n  AnimationEvent,\n  AnimationFloatArrayCurve,\n  AnimationFloatCurve,\n  AnimationQuaternionCurve,\n  AnimationVector2Curve,\n  AnimationVector3Curve,\n  AnimationVector4Curve,\n  Engine,\n  Keyframe,\n  KeyframeValueType\n} from \"@galacean/engine-core\";\nimport { Color, Quaternion, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport type { BufferReader } from \"../../utils/BufferReader\";\nimport { decoder } from \"../../utils/Decorator\";\nimport { ComponentMap } from \"./ComponentMap\";\n\nexport { ComponentMap } from \"./ComponentMap\";\n\nexport enum InterpolableValueType {\n  Float,\n  FloatArray,\n  Vector2,\n  Vector3,\n  Vector4,\n  Quaternion,\n  Color,\n  Array,\n  Boolean\n}\n\n@decoder(\"AnimationClip\")\nexport class AnimationClipDecoder {\n  public static decode(engine: Engine, bufferReader: BufferReader): Promise<AnimationClip> {\n    return new Promise((resolve) => {\n      const name = bufferReader.nextStr();\n      const clip = new AnimationClip(name);\n      const eventsLen = bufferReader.nextUint16();\n      for (let i = 0; i < eventsLen; ++i) {\n        const event = new AnimationEvent();\n        event.time = bufferReader.nextFloat32();\n        event.functionName = bufferReader.nextStr();\n        event.parameter = JSON.parse(bufferReader.nextStr()).val;\n        clip.addEvent(event);\n      }\n\n      const curveBindingsLen = bufferReader.nextUint16();\n\n      for (let i = 0; i < curveBindingsLen; ++i) {\n        const relativePath = bufferReader.nextStr();\n        const componentStr = bufferReader.nextStr();\n        const componentType = ComponentMap[componentStr];\n        const property = bufferReader.nextStr();\n        let curve: AnimationCurve<KeyframeValueType>;\n        const interpolation = bufferReader.nextUint8();\n        const keysLen = bufferReader.nextUint16();\n        const curveType = bufferReader.nextStr();\n\n        switch (curveType) {\n          case \"AnimationFloatCurve\": {\n            curve = curve || new AnimationFloatCurve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<number>();\n              keyframe.time = bufferReader.nextFloat32();\n              keyframe.value = bufferReader.nextFloat32();\n              keyframe.inTangent = bufferReader.nextFloat32();\n              keyframe.outTangent = bufferReader.nextFloat32();\n              (<AnimationFloatCurve>curve).addKey(keyframe);\n            }\n            break;\n          }\n          case \"AnimationArrayCurve\": {\n            curve = curve || new AnimationArrayCurve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<number[]>();\n              keyframe.time = bufferReader.nextFloat32();\n              const len = bufferReader.nextUint16();\n              keyframe.value = Array.from(bufferReader.nextFloat32Array(len));\n              keyframe.inTangent = Array.from(bufferReader.nextFloat32Array(len));\n              keyframe.outTangent = Array.from(bufferReader.nextFloat32Array(len));\n              (<AnimationArrayCurve>curve).addKey(keyframe);\n            }\n            break;\n          }\n          case \"AnimationFloatArrayCurve\": {\n            curve = curve || new AnimationFloatArrayCurve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<Float32Array>();\n              keyframe.time = bufferReader.nextFloat32();\n              const len = bufferReader.nextUint16();\n              keyframe.value = bufferReader.nextFloat32Array(len);\n              keyframe.inTangent = Array.from(bufferReader.nextFloat32Array(len));\n              keyframe.outTangent = Array.from(bufferReader.nextFloat32Array(len));\n              (<AnimationFloatArrayCurve>curve).addKey(keyframe);\n            }\n            break;\n          }\n          case \"AnimationVector2Curve\": {\n            curve = curve || new AnimationVector2Curve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<Vector2>();\n              keyframe.time = bufferReader.nextFloat32();\n              keyframe.value = new Vector2(bufferReader.nextFloat32(), bufferReader.nextFloat32());\n              keyframe.inTangent = new Vector2(bufferReader.nextFloat32(), bufferReader.nextFloat32());\n              keyframe.outTangent = new Vector2(bufferReader.nextFloat32(), bufferReader.nextFloat32());\n              (<AnimationVector2Curve>curve).addKey(keyframe);\n            }\n            break;\n          }\n          case \"AnimationVector3Curve\": {\n            curve = curve || new AnimationVector3Curve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<Vector3>();\n              keyframe.time = bufferReader.nextFloat32();\n              keyframe.value = new Vector3(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              keyframe.inTangent = new Vector3(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              keyframe.outTangent = new Vector3(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              (<AnimationVector3Curve>curve).addKey(keyframe);\n            }\n            break;\n          }\n          case \"AnimationVector4Curve\": {\n            curve = curve || new AnimationVector4Curve();\n            curve.interpolation = interpolation;\n            const keyframe = new Keyframe<Vector4>();\n            keyframe.time = bufferReader.nextFloat32();\n            keyframe.value = new Vector4(\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32()\n            );\n            keyframe.inTangent = new Vector4(\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32()\n            );\n            keyframe.outTangent = new Vector4(\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32()\n            );\n            (<AnimationVector4Curve>curve).addKey(keyframe);\n            break;\n          }\n          case \"AnimationColorCurve\": {\n            curve = curve || new AnimationColorCurve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<Color>();\n              keyframe.time = bufferReader.nextFloat32();\n              keyframe.value = new Color(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              keyframe.inTangent = new Vector4(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              keyframe.outTangent = new Vector4(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              (<AnimationColorCurve>curve).addKey(keyframe);\n            }\n            break;\n          }\n          case \"AnimationQuaternionCurve\": {\n            curve = curve || new AnimationQuaternionCurve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<Quaternion>();\n              keyframe.time = bufferReader.nextFloat32();\n              keyframe.value = new Quaternion(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              keyframe.inTangent = new Vector4(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              keyframe.outTangent = new Vector4(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              (<AnimationQuaternionCurve>curve).addKey(keyframe);\n            }\n            break;\n          }\n        }\n        clip.addCurveBinding(relativePath, componentType, property, curve);\n      }\n\n      resolve(clip);\n    });\n  }\n}\n", "import { Component, Entity, Scene } from \"@galacean/engine-core\";\nimport { IEntity, IScene } from \"../prefab/PrefabDesign\";\n\nexport class SceneParserContext {\n  entityMap: Map<string, Entity> = new Map();\n  components: Map<string, Component> = new Map();\n  assets: Map<string, any> = new Map();\n  entityConfigMap: Map<string, IEntity> = new Map();\n  rootIds: string[] = [];\n  constructor(public readonly originalData: IScene, public readonly scene: Scene) {}\n\n  destroy() {\n    this.entityMap.clear();\n    this.components.clear();\n    this.assets.clear();\n    this.entityConfigMap.clear();\n    this.rootIds.length = 0;\n  }\n}\n", "import { Engine, Entity, Loader, Scene } from \"@galacean/engine-core\";\nimport { IEntity, IScene } from \"../prefab/PrefabDesign\";\nimport { PrefabParser } from \"../prefab/PrefabParser\";\nimport { ReflectionParser } from \"../prefab/ReflectionParser\";\nimport { SceneParserContext } from \"./SceneParserContext\";\n\n/** @Internal */\nexport class SceneParser {\n  /**\n   * Parse scene data.\n   * @param engine - the engine of the parser context\n   * @param sceneData - scene data which is exported by editor\n   * @returns a promise of scene\n   */\n  static parse(engine: Engine, sceneData: IScene): Promise<Scene> {\n    const scene = new Scene(engine);\n    const context = new SceneParserContext(sceneData, scene);\n    const parser = new SceneParser(context);\n    parser.start();\n    return parser.promise;\n  }\n\n  /**\n   * The promise of parsed scene.\n   */\n  readonly promise: Promise<Scene>;\n\n  private _resolve: (scene: Scene) => void;\n  private _reject: (reason: any) => void;\n  private _engine: Engine;\n\n  constructor(public readonly context: SceneParserContext) {\n    this._engine = this.context.scene.engine;\n    this._organizeEntities = this._organizeEntities.bind(this);\n    this._parseComponents = this._parseComponents.bind(this);\n    this._clearAndResolveScene = this._clearAndResolveScene.bind(this);\n    this.promise = new Promise<Scene>((resolve, reject) => {\n      this._reject = reject;\n      this._resolve = resolve;\n    });\n  }\n\n  /** start parse the scene */\n  start() {\n    this._parseEntities()\n      .then(this._organizeEntities)\n      .then(this._parseComponents)\n      .then(this._clearAndResolveScene)\n      .then(this._resolve)\n      .catch(this._reject);\n  }\n\n  private _parseEntities(): Promise<Entity[]> {\n    const entitiesConfig = this.context.originalData.entities;\n    const entityConfigMap = this.context.entityConfigMap;\n    const entitiesMap = this.context.entityMap;\n    const rootIds = this.context.rootIds;\n    const engine = this._engine;\n    const promises = entitiesConfig.map((entityConfig) => {\n      entityConfigMap.set(entityConfig.id, entityConfig);\n      // record root entities\n      if (!entityConfig.parent) rootIds.push(entityConfig.id);\n      return ReflectionParser.parseEntity(entityConfig, engine);\n    });\n\n    return Promise.all(promises).then((entities) => {\n      for (let i = 0, l = entities.length; i < l; i++) {\n        entitiesMap.set(entitiesConfig[i].id, entities[i]);\n      }\n      return entities;\n    });\n  }\n\n  private _organizeEntities() {\n    const { entityConfigMap, entityMap, scene, rootIds } = this.context;\n    for (const rootId of rootIds) {\n      PrefabParser.parseChildren(entityConfigMap, entityMap, rootId);\n    }\n    const rootEntities = rootIds.map((id) => entityMap.get(id));\n    for (let i = 0; i < rootEntities.length; i++) {\n      scene.addRootEntity(rootEntities[i]);\n    }\n  }\n\n  private _parseComponents(): Promise<any[]> {\n    const entitiesConfig = this.context.originalData.entities;\n    const entityMap = this.context.entityMap;\n\n    const promises = [];\n    for (let i = 0, l = entitiesConfig.length; i < l; i++) {\n      const entityConfig = entitiesConfig[i];\n      const entity = entityMap.get(entityConfig.id);\n      for (let i = 0; i < entityConfig.components.length; i++) {\n        const componentConfig = entityConfig.components[i];\n        const key = !componentConfig.refId ? componentConfig.class : componentConfig.refId;\n        let component;\n        // TODO: remove hack code when support additional edit\n        if (key === \"Animator\") {\n          component = entity.getComponent(Loader.getClass(key));\n        }\n        component = component || entity.addComponent(Loader.getClass(key));\n        const promise = ReflectionParser.parsePropsAndMethods(component, componentConfig, entity.engine);\n        promises.push(promise);\n      }\n    }\n    return Promise.all(promises);\n  }\n\n  private _clearAndResolveScene() {\n    const scene = this.context.scene;\n    this.context.destroy();\n    return scene;\n  }\n}\n", "import {\n  AssetPromise,\n  Loader,\n  LoadItem,\n  Mesh,\n  ModelMesh,\n  resourceLoader,\n  ResourceManager,\n  UnlitMaterial\n} from \"@galacean/engine-core\";\nimport { decode } from \"../..\";\n\n@resourceLoader(\"Mesh\", [\"prefab\"], true)\nexport class MeshLoader extends Loader<ModelMesh> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<ModelMesh> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<ArrayBuffer>(item.url, { type: \"arraybuffer\" }).then((data) => {\n        decode<ModelMesh>(data, resourceManager.engine).then((mesh) => {\n          resolve(mesh);\n        });\n      });\n    });\n  }\n}\n", "import {\n  AssetPromise,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  Texture2D} from \"@galacean/engine-core\";\nimport { decode } from \"../..\";\n\n@resourceLoader(\"EditorTexture2D\", [\"prefab\"], true)\nexport class EditorTextureLoader extends Loader<Texture2D> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Texture2D> {\n    return new AssetPromise((resolve) => {\n      this.request<ArrayBuffer>(item.url, { type: \"arraybuffer\" }).then((data) => {\n        decode<Texture2D>(data, resourceManager.engine).then((texture) => {\n          resolve(texture);\n        });\n      });\n    });\n  }\n}\n", "import { Engine } from \"@galacean/engine-core\";\nimport { BufferReader } from \"./utils/BufferReader\";\nimport { decoderMap, decoder } from \"./utils/Decorator\";\nimport { FileHeader } from \"./utils/FileHeader\";\n\nexport { MeshDecoder } from \"./resources/mesh/MeshDecoder\";\nexport { Texture2DDecoder } from \"./resources/texture2D/TextureDecoder\";\nexport { ReflectionParser } from \"./resources/prefab/ReflectionParser\";\nexport { PrefabParser } from \"./resources/prefab/PrefabParser\";\nexport * from \"./resources/animationClip/AnimationClipDecoder\";\nexport type { IModelMesh } from \"./resources/mesh/IModelMesh\";\n\n/**\n * Decode engine binary resource.\n * @param arrayBuffer - array buffer of decode binary file\n * @param engine - engine\n * @returns\n */\nexport function decode<T>(arrayBuffer: ArrayBuffer, engine: Engine): Promise<T> {\n  const header = FileHeader.decode(arrayBuffer);\n  const bufferReader = new BufferReader(arrayBuffer, header.headerLength, header.dataLength);\n  return decoderMap[header.type].decode(engine, bufferReader).then((object) => {\n    object.name = header.name;\n    return object;\n  });\n}\n\nexport * from \"./resources/prefab/PrefabDesign\";\nexport * from \"./resources/scene/SceneParser\";\nexport * from \"./resources/scene/MeshLoader\";\nexport * from \"./resources/scene/EditorTextureLoader\";\n", "import {\n  resourceLoader,\n  Loader,\n  AssetPromise,\n  AssetType,\n  LoadItem,\n  ResourceManager,\n  ModelMesh\n} from \"@galacean/engine-core\";\nimport { decode } from \"./resource-deserialize\";\n\n@resourceLoader(AssetType.Mesh, [\"mesh\"])\nclass MeshLoader extends Loader<ModelMesh> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<ModelMesh> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<any>(item.url, {\n        ...item,\n        type: \"arraybuffer\"\n      })\n        .then((data) => {\n          return decode<ModelMesh>(data, resourceManager.engine);\n        })\n        .then((mesh) => {\n          resolve(mesh);\n        })\n        .catch(reject);\n    });\n  }\n}\n", "import { AssetPromise, AssetType, Font, Loader, LoadItem, resourceLoader, ResourceManager } from \"@galacean/engine-core\";\n\n@resourceLoader(AssetType.SourceFont, [\"ttf\", \"otf\", \"woff\"], false)\nclass SourceFontLoader extends Loader<Font> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Font> {\n    return new AssetPromise((resolve, reject) => {\n      const { url } = item;\n      this._registerFont(url, url)\n        .then(() => {\n          const font = new Font(resourceManager.engine, url);\n          resolve(font);\n        })\n        .catch((e) => {\n          reject(`load font ${url} fail`);\n        });\n    });\n  }\n\n  private async _registerFont(fontName: string, fontUrl: string): Promise<void> {\n    const fontFace = new FontFace(fontName, `url(${fontUrl})`);\n    await fontFace.load();\n    document.fonts.add(fontFace);\n  }\n}\n", "import {\n  AssetPromise,\n  AssetType,\n  Engine,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  Sprite,\n  SpriteAtlas,\n  Texture2D\n} from \"@galacean/engine-core\";\nimport { AtlasConfig, AtlasSprite } from \"@galacean/engine-core/types/2d/atlas/types\";\nimport { Rect, Vector2, Vector4 } from \"@galacean/engine-math\";\nimport { GLTFUtil } from \"./gltf/GLTFUtil\";\n\n@resourceLoader(AssetType.SpriteAtlas, [\"atlas\"], false)\nclass SpriteAtlasLoader extends Loader<SpriteAtlas> {\n  private _tempRect: Rect = new Rect();\n  private _tempVec2: Vector2 = new Vector2();\n  private _tempVec4: Vector4 = new Vector4();\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<SpriteAtlas> {\n    return new AssetPromise<SpriteAtlas>((resolve, reject, _, onCancel) => {\n      const chainPromises = [];\n      onCancel(() => {\n        for (let i = 0; i < chainPromises.length; i++) {\n          chainPromises[i].cancel();\n        }\n      });\n      const configPromise = this.request<AtlasConfig>(item.url, {\n        ...item,\n        type: \"json\"\n      });\n      chainPromises.push(configPromise);\n      configPromise\n        .then((atlasData) => {\n          const { atlasItems, mipmap, anisoLevel, filterMode, wrapModeU, wrapModeV, format } = atlasData;\n          const atlasItemsLen = atlasItems ? atlasItems.length : 0;\n          const { engine } = resourceManager;\n          const spriteAtlas = new SpriteAtlas(engine);\n          if (atlasItemsLen < 0) {\n            resolve(spriteAtlas);\n            return;\n          }\n          chainPromises.length = 0;\n          for (let i = 0; i < atlasItems.length; i++) {\n            const atlasItem = atlasItems[i];\n            if (atlasItem.img) {\n              chainPromises.push(\n                resourceManager\n                  .load<Texture2D>({\n                    url: GLTFUtil.parseRelativeUrl(item.url, atlasItem.img),\n                    type: AssetType.Texture2D,\n                    params: { format, mipmap }\n                  })\n                  .then((texture: Texture2D) => {\n                    anisoLevel && (texture.anisoLevel = anisoLevel);\n                    filterMode !== undefined && (texture.filterMode = filterMode);\n                    wrapModeU !== undefined && (texture.wrapModeU = wrapModeU);\n                    wrapModeV !== undefined && (texture.wrapModeV = wrapModeV);\n                    for (let i = 0; i < atlasItem.sprites.length; i++) {\n                      // @ts-ignore\n                      spriteAtlas._addSprite(this._makeSprite(engine, atlasItem.sprites[i], texture));\n                    }\n                  })\n                  .catch(reject)\n              );\n            } else {\n              for (let i = 0; i < atlasItem.sprites.length; i++) {\n                // @ts-ignore\n                spriteAtlas._addSprite(this._makeSprite(engine, atlasItem.sprites[i]));\n              }\n            }\n          }\n          AssetPromise.all(chainPromises)\n            .then(() => {\n              resolve(spriteAtlas);\n            })\n            .catch(reject);\n        })\n        .catch(reject);\n    });\n  }\n\n  private _makeSprite(engine: Engine, config: AtlasSprite, texture?: Texture2D): Sprite {\n    // Generate a SpriteAtlas object.\n    const { region, atlasRegionOffset, atlasRegion, pivot, border } = config;\n    const sprite = new Sprite(\n      engine,\n      texture,\n      region ? this._tempRect.set(region.x, region.y, region.w, region.h) : undefined,\n      pivot ? this._tempVec2.set(pivot.x, pivot.y) : undefined,\n      border ? this._tempVec4.set(border.x, border.y, border.z, border.w) : undefined,\n      config.name\n    );\n    if (texture) {\n      const invW = 1 / texture.width;\n      const invH = 1 / texture.height;\n      sprite.atlasRegion.set(atlasRegion.x * invW, atlasRegion.y * invH, atlasRegion.w * invW, atlasRegion.h * invH);\n      if (atlasRegionOffset) {\n        const { x: offsetLeft, y: offsetTop, z: offsetRight, w: offsetBottom } = atlasRegionOffset;\n        sprite.atlasRegionOffset.set(offsetLeft * invW, offsetTop * invH, offsetRight * invW, offsetBottom * invH);\n      }\n      config.atlasRotated && (sprite.atlasRotated = true);\n    }\n    return sprite;\n  }\n}\n", "import {\n  resourceLoader,\n  Loader,\n  AssetPromise,\n  AssetType,\n  LoadItem,\n  Sprite,\n  Texture2D,\n  ResourceManager,\n  SpriteAtlas\n} from \"@galacean/engine-core\";\n\n@resourceLoader(AssetType.Sprite, [\"sprite\"], false)\nclass SpriteLoader extends Loader<Sprite> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Sprite> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<any>(item.url, {\n        ...item,\n        type: \"json\"\n      })\n        .then((data) => {\n          if (data.belongToAtlas) {\n            resourceManager\n              // @ts-ignore\n              .getResourceByRef<SpriteAtlas>(data.belongToAtlas)\n              .then((atlas) => {\n                resolve(atlas.getSprite(data.fullPath));\n              })\n              .catch(reject);\n          } else if (data.texture) {\n            resourceManager\n              // @ts-ignore\n              .getResourceByRef<Texture2D>(data.texture)\n              .then((texture) => {\n                resolve(new Sprite(resourceManager.engine, texture, data.region, data.pivot, data.border));\n              })\n              .catch(reject);\n          } else {\n            resolve(new Sprite(resourceManager.engine, null, data.region, data.pivot, data.border));\n          }\n        })\n        .catch(reject);\n    });\n  }\n}\n", "import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  Texture2D,\n  TextureFormat\n} from \"@galacean/engine-core\";\n\n@resourceLoader(AssetType.Texture2D, [\"png\", \"jpg\", \"webp\", \"jpeg\"])\nclass Texture2DLoader extends Loader<Texture2D> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Texture2D> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<HTMLImageElement>(item.url, {\n        ...item,\n        type: \"image\"\n      })\n        .then((image) => {\n          const params = item.params ?? {};\n          const texture = new Texture2D(\n            resourceManager.engine,\n            image.width,\n            image.height,\n            params.format,\n            params.mipmap\n          );\n          /** @ts-ignore */\n          if (!texture._platformTexture) return;\n          texture.setImageSource(image);\n          texture.generateMipmaps();\n\n          if (item.url.indexOf(\"data:\") !== 0) {\n            const splitPath = item.url.split(\"/\");\n            texture.name = splitPath[splitPath.length - 1];\n          }\n          resolve(texture);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n\n/**\n * Texture2D loader params interface.\n */\nexport interface Texture2DParams {\n  /** Texture format. default  `TextureFormat.R8G8B8A8` */\n  format: TextureFormat;\n  /** Whether to use multi-level texture, default is true. */\n  mipmap: boolean;\n}\n", "import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  TextureCubeFace,\n  TextureCube\n} from \"@galacean/engine-core\";\n\n@resourceLoader(AssetType.TextureCube, [\"\"])\nclass TextureCubeLoader extends Loader<TextureCube> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<TextureCube> {\n    return new AssetPromise((resolve, reject) => {\n      Promise.all(\n        item.urls.map((url) =>\n          this.request<HTMLImageElement>(url, {\n            ...item,\n            type: \"image\"\n          })\n        )\n      )\n        .then((images) => {\n          const { width, height } = images[0];\n\n          if (width !== height) {\n            console.error(\"The cube texture must have the same width and height\");\n            return;\n          }\n\n          const tex = new TextureCube(resourceManager.engine, width);\n\n          /** @ts-ignore */\n          if (!tex._platformTexture) return;\n\n          for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n            tex.setImageSource(TextureCubeFace.PositiveX + faceIndex, images[faceIndex], 0);\n          }\n\n          tex.generateMipmaps();\n          resolve(tex);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n", "import {\n  resourceLoader,\n  Loader,\n  AssetPromise,\n  AssetType,\n  LoadItem,\n  ResourceManager,\n  AnimationClip\n} from \"@galacean/engine-core\";\nimport { decode } from \"./resource-deserialize\";\n\n@resourceLoader(AssetType.AnimationClip, [\"ani\"])\nclass AnimationClipLoader extends Loader<AnimationClip> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<AnimationClip> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<any>(item.url, {\n        ...item,\n        type: \"arraybuffer\"\n      })\n        .then((data) => decode<AnimationClip>(data, resourceManager.engine).then(resolve))\n        .catch(reject);\n    });\n  }\n}\n", "import {\n  AssetPromise,\n  AssetType,\n  BackgroundMode,\n  Engine,\n  Font,\n  Loader,\n  LoadItem,\n  PrimitiveMesh,\n  resourceLoader,\n  ResourceManager,\n  Scene,\n  SkyBoxMaterial\n} from \"@galacean/engine-core\";\nimport { IClassObject, ReflectionParser, SceneParser } from \"./resource-deserialize\";\n\n@resourceLoader(AssetType.Scene, [\"prefab\"], true)\nclass SceneLoader extends Loader<Scene> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Scene> {\n    const { engine } = resourceManager;\n    return new AssetPromise((resolve, reject) => {\n      this.request<any>(item.url, { type: \"json\" })\n        .then((data) => {\n          // @ts-ignore\n          engine.resourceManager.initVirtualResources(data.files);\n          return SceneParser.parse(engine, data).then((scene) => {\n            // parse ambient light\n            const ambient = data.scene.ambient;\n            let ambientLightPromise = Promise.resolve();\n            if (ambient.ambientLight) {\n              ambientLightPromise = resourceManager\n                // @ts-ignore\n                .getResourceByRef<any>(data.scene.ambient.ambientLight)\n                .then((light) => {\n                  scene.ambientLight = light;\n                  scene.ambientLight.diffuseIntensity = ambient.diffuseIntensity;\n                  scene.ambientLight.specularIntensity = ambient.specularIntensity;\n                });\n            } else {\n              scene.ambientLight.diffuseIntensity = ambient.diffuseIntensity;\n              scene.ambientLight.specularIntensity = ambient.specularIntensity;\n              scene.ambientLight.diffuseSolidColor.copyFrom(ambient.diffuseSolidColor);\n            }\n\n            const background = data.scene.background;\n            scene.background.mode = background.mode;\n\n            let backgroundPromise = Promise.resolve();\n\n            switch (scene.background.mode) {\n              case BackgroundMode.SolidColor:\n                scene.background.solidColor.copyFrom(background.color);\n                break;\n              case BackgroundMode.Sky:\n                if (background.sky) {\n                  // @ts-ignore\n                  backgroundPromise = resourceManager.getResourceByRef<any>(background.sky).then((light) => {\n                    const sky = scene.background.sky;\n                    const skyMaterial = new SkyBoxMaterial(engine);\n                    skyMaterial.textureCubeMap = light.specularTexture;\n                    skyMaterial.textureDecodeRGBM = true;\n                    sky.material = skyMaterial;\n                    sky.mesh = PrimitiveMesh.createCuboid(engine, 1, 1, 1);\n                  });\n                }\n                break;\n              case BackgroundMode.Texture:\n                if (background.texture) {\n                  // @ts-ignore\n                  backgroundPromise = resourceManager.getResourceByRef<any>(background.texture).then((texture) => {\n                    scene.background.texture = texture;\n                  });\n                }\n                break;\n            }\n\n            // parse shadow\n            const shadow = data.scene.shadow;\n            if (shadow) {\n              if (shadow.castShadows != undefined) scene.castShadows = shadow.castShadows;\n              if (shadow.shadowResolution != undefined) scene.shadowResolution = shadow.shadowResolution;\n              if (shadow.shadowDistance != undefined) scene.shadowDistance = shadow.shadowDistance;\n              if (shadow.shadowCascades != undefined) scene.shadowCascades = shadow.shadowCascades;\n            }\n\n            const fog = data.scene.fog;\n            if (fog) {\n              if (fog.fogMode != undefined) scene.fogMode = fog.fogMode;\n              if (fog.fogStart != undefined) scene.fogStart = fog.fogStart;\n              if (fog.fogEnd != undefined) scene.fogEnd = fog.fogEnd;\n              if (fog.fogDensity != undefined) scene.fogDensity = fog.fogDensity;\n              if (fog.fogColor != undefined) scene.fogColor.copyFrom(fog.fogColor);\n            }\n\n            return Promise.all([ambientLightPromise, backgroundPromise]).then(() => {\n              resolve(scene);\n            });\n          });\n        })\n        .catch(reject);\n    });\n  }\n}\n\nReflectionParser.registerCustomParseComponent(\n  \"TextRenderer\",\n  async (instance: any, item: Omit<IClassObject, \"class\">, engine: Engine) => {\n    const { props } = item;\n    if (!props.font) {\n      // @ts-ignore\n      instance.font = Font.createFromOS(engine, props.fontFamily || \"Arial\");\n    }\n    return instance;\n  }\n);\n", "import * as CoreObjects from \"@galacean/engine-core\";\nimport { Loader } from \"@galacean/engine-core\";\n//@ts-ignore\nexport const version = `__buildVersion`;\n\nconsole.log(`Galacean engine version: ${version}`);\n\nexport * from \"@galacean/engine-core\";\nexport * from \"@galacean/engine-loader\";\nexport * from \"@galacean/engine-math\";\nexport * from \"@galacean/engine-rhi-webgl\";\n\nfor (let key in CoreObjects) {\n  Loader.registerClass(key, CoreObjects[key]);\n}\n"],
  "mappings": "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",
  "names": ["ContainmentType", "Disjoint", "Contains", "Intersects", "PlaneIntersectionType", "Back", "Front", "Intersecting", "FrustumFace", "Near", "Far", "Left", "Right", "Bottom", "Top", "MathUtil", "clamp", "v", "min", "max", "Math", "equals", "a", "b", "abs", "zeroTolerance", "isPowerOf2", "radianToDegree", "r", "radToDegreeFactor", "degreeToRadian", "d", "degreeToRadFactor", "PI", "Vector3", "x", "y", "z", "_onValueChanged", "_x", "_y", "_z", "set", "add", "right", "subtract", "multiply", "divide", "length", "sqrt", "lengthSquared", "negate", "normalize", "scale", "s", "transformNormal", "m", "transformToVec3", "transformCoordinate", "transformByQuat", "quaternion", "clone", "copyFrom", "source", "copyFromArray", "array", "offset", "copyToArray", "out", "outOffset", "toJSON", "left", "dot", "cross", "ax", "ay", "az", "bx", "by", "bz", "distance", "distanceSquared", "lerp", "start", "end", "t", "len", "e", "elements", "transformToVec4", "_w", "w", "qz", "qw", "ix", "qy", "iy", "qx", "iz", "iw", "value", "_zero", "_one", "BoundingSphere", "center", "radius", "fromPoints", "points", "Error", "_tempVec30", "i", "fromBox", "box", "BoundingBox", "getCenter", "getExtent", "getCorners", "minX", "minY", "minZ", "maxX", "maxY", "maxZ", "l", "transform", "matrix", "fromCenterAndExtent", "extent", "Number", "MAX_VALUE", "point", "fromSphere", "sphere", "_tempVec31", "merge", "box1", "box2", "CollisionUtil", "intersectionPointThreePlanes", "p1", "p2", "p3", "p1Nor", "normal", "p2Nor", "p3Nor", "_tempVec32", "c", "distancePlaneAndPoint", "plane", "intersectsPlaneAndPoint", "intersectsPlaneAndBox", "front", "back", "intersectsPlaneAndSphere", "intersectsRayAndPlane", "ray", "dir", "direction", "position", "origin", "intersectsRayAndBox", "dirX", "dirY", "dirZ", "oriX", "oriY", "oriZ", "tmax", "inverse", "t1", "t2", "temp", "intersectsRayAndSphere", "discriminant", "intersectsBoxAndBox", "boxA", "boxB", "intersectsSphereAndSphere", "sphereA", "sphereB", "radiisum", "intersectsSphereAndBox", "closestPoint", "intersectsFrustumAndBox", "frustum", "p", "getPlane", "frustumContainsBox", "n", "result", "frustumContainsSphere", "intersectionType", "Plane", "factor", "point0", "point1", "point2", "x0", "y0", "z0", "x1", "y1", "z1", "x2", "y2", "z2", "yz", "xz", "xy", "invPyth", "BoundingFrustum", "near", "far", "top", "bottom", "calculateFromMatrix", "face", "me", "m11", "m12", "m13", "m14", "m21", "m22", "m23", "m24", "m31", "m32", "m33", "m34", "m41", "m42", "m43", "m44", "nearNormal", "farNormal", "leftNormal", "rightNormal", "bottomNormal", "topNormal", "intersectsBox", "intersectsSphere", "Matrix3x3", "Float32Array", "determinant", "a11", "a12", "a13", "a21", "a22", "a23", "a31", "a32", "a33", "b12", "b22", "b32", "identity", "invert", "rotate", "translate", "translation", "transpose", "ret", "se", "srce", "copyFromMatrix", "ae", "le", "re", "oe", "l11", "l12", "l13", "l21", "l22", "l23", "l31", "l32", "l33", "r11", "r12", "r13", "r21", "r22", "r23", "r31", "r32", "r33", "ee", "inv", "rotationQuaternion", "xx", "yx", "yy", "zx", "zy", "zz", "wx", "wy", "wz", "scaling", "det", "normalMatrix", "mat4", "a14", "a24", "a34", "a41", "a42", "a43", "a44", "b00", "b01", "b02", "b03", "b04", "b05", "b06", "b07", "b08", "b09", "b10", "b11", "sin", "cos", "Quaternion", "conjugate", "getAxisAngle", "acos", "toEuler", "_toYawPitchRoll", "toYawPitchRoll", "rotateX", "rad", "rotateY", "rotateZ", "rotationAxisAngle", "axis", "quat", "rotateAxisAngle", "_tempQuat1", "sinP", "sign", "asin", "atan2", "aw", "bw", "normalAxis", "_tempVector3", "rotationEuler", "rotationYawPitchRoll", "yaw", "pitch", "roll", "halfRoll", "halfPitch", "halfYaw", "sinRoll", "cosRoll", "sinPitch", "cosPitch", "sinYaw", "cosYaw", "cosYawPitch", "sinYawPitch", "rotationMatrix3x3", "half", "invDot", "slerp", "amount", "opposite", "invSin", "rotationX", "rotationY", "rotationZ", "normalized", "Matrix", "decompose", "rotation", "rm", "_tempMat30", "rme", "xs", "ys", "zs", "sx", "sy", "sz", "invSX", "invSY", "invSZ", "getRotation", "trace", "getScaling", "getTranslation", "l14", "l24", "l34", "l41", "l42", "l43", "l44", "r14", "r24", "r34", "r41", "r42", "r43", "r44", "multiplyScalar", "scalar", "rotationTranslation", "affineTransformation", "lookAt", "eye", "target", "up", "xAxis", "yAxis", "zAxis", "ortho", "lr", "bt", "nf", "perspective", "fovY", "aspect", "f", "tan", "b13", "b21", "b23", "b31", "b33", "_identity", "Ray", "intersectPlane", "intersectSphere", "intersectBox", "getPoint", "Vector2", "Vector4", "q", "Color", "g", "_r", "_g", "_b", "_a", "color", "toLinear", "gammaToLinearSpace", "toGamma", "linearToGammaSpace", "getBrightness", "pow", "Rect", "width", "height", "SphericalHarmonics3", "coefficients", "addLight", "deltaSolidAngle", "coe", "bv0", "bv1", "bv2", "bv3", "bv4", "bv5", "bv6", "bv7", "bv8", "evaluate", "src", "sh", "Platform", "Android", "IPhone", "IPad", "Mac", "Unknown", "_defineProperties", "_create_class", "o", "p", "MathUtil", "clamp", "v", "min", "max", "Math", "equals", "a", "b", "abs", "zeroTolerance", "isPowerOf2", "radianToDegree", "r", "radToDegreeFactor", "degreeToRadian", "d", "degreeToRadFactor", "PI", "Color", "g", "_onValueChanged", "_r", "_g", "_b", "_a", "set", "add", "color", "scale", "s", "clone", "ret", "copyFrom", "source", "toLinear", "out", "gammaToLinearSpace", "toGamma", "linearToGammaSpace", "getBrightness", "toJSON", "value", "pow", "left", "right", "subtract", "lerp", "start", "end", "t", "CloneMode", "Ignore", "Assignment", "Shallow", "Deep", "ignoreClone", "target", "propertyKey", "CloneManager", "registerCloneMode", "assignmentClone", "shallowClone", "deepClone", "mode", "targetMap", "_subCloneModeMap", "get", "constructor", "Object", "create", "getCloneMode", "type", "cloneModes", "_cloneModeMap", "objectType", "_objectType", "cloneModeMap", "subCloneModes", "assign", "getPrototypeOf", "deepCloneObject", "Uint8Array", "Uint16Array", "Uint32Array", "Int8Array", "Int16Array", "Int32Array", "Float32Array", "Float64Array", "Array", "i", "n", "length", "_deepCloneObjectItem", "customSource", "cloneTo", "keys", "k", "sourceItem", "itemType", "sourceTypeArrayItem", "targetTypeArrayItem", "slice", "sourceArrayItem", "targetArrayItem", "sourceCustomItem", "targetCustomItem", "targetItem", "Map", "EngineObject", "engine", "instanceId", "_instanceIdCounter", "_destroyed", "_engine", "destroy", "resourceManager", "_deleteAsset", "destroyed", "RefObject", "isGCIgnored", "_refCount", "_addRefObject", "force", "_deleteRefObject", "refCount", "_getRefCount", "_addRefCount", "_onDestroy", "_addToResourceManager", "path", "_addAsset", "RenderBufferDepthFormat", "Depth", "DepthStencil", "Stencil", "Depth16", "Depth24", "Depth32", "Depth24Stencil8", "Depth32Stencil8", "TextureCubeFace", "PositiveX", "NegativeX", "PositiveY", "NegativeY", "PositiveZ", "NegativeZ", "TextureDepthCompareFunction", "Never", "Less", "Equal", "LessEqual", "Greater", "NotEqual", "GreaterEqual", "Always", "TextureFilterMode", "Point", "Bilinear", "Trilinear", "TextureFormat", "R8G8B8", "R8G8B8A8", "R4G4B4A4", "R5G5B5A1", "R5G6B5", "Alpha8", "LuminanceAlpha", "R16G16B16A16", "R32G32B32A32", "DXT1", "DXT5", "ETC1_RGB", "ETC2_RGB", "ETC2_RGBA5", "ETC2_RGBA8", "PVRTC_RGB2", "PVRTC_RGBA2", "PVRTC_RGB4", "PVRTC_RGBA4", "ASTC_4x4", "ASTC_5x5", "ASTC_6x6", "ASTC_8x8", "ASTC_10x10", "ASTC_12x12", "TextureWrapMode", "Clamp", "Repeat", "Mirror", "Event", "data", "bubbles", "_timeStamp", "Date", "getTime", "_target", "_currentTarget", "_bubbles", "_propagationStopped", "_type", "stopPropagation", "propagationStopped", "timeStamp", "currentTarget", "EventDispatcher", "_events", "_eventCount", "_dispatchingListeners", "hasEvent", "event", "eventNames", "listenerCount", "listeners", "isArray", "dispatch", "count", "dispatchingListeners", "listener", "once", "off", "fn", "on", "addEventListener", "events", "element", "push", "_clearEvent", "splice", "removeEventListener", "removeAllEventListeners", "trigger", "e", "noop", "message", "optionalParams", "debug", "console", "log", "bind", "info", "warn", "error", "Logger", "isEnabled", "enable", "disable", "Time", "_frameCount", "_clock", "performance", "_timeScale", "_deltaTime", "now", "_startTime", "_lastTickTime", "reset", "tick", "nowTime", "frameCount", "deltaTime", "timeScale", "unscaledDeltaTime", "timeSinceStartup", "Util", "toString", "call", "isArrayLike", "x", "obj", "rst", "l", "hasOwnProperty", "downloadBlob", "blob", "fileName", "url", "window", "URL", "createObjectURL", "document", "createElement", "body", "appendChild", "style", "display", "href", "download", "parentElement", "removeChild", "click", "revokeObjectURL", "removeFromArray", "array", "item", "index", "indexOf", "last", "ObjectValues", "map", "key", "DataType", "FLOAT", "FLOAT_VEC2", "FLOAT_VEC3", "FLOAT_VEC4", "INT", "INT_VEC2", "INT_VEC3", "INT_VEC4", "BOOL", "BOOL_VEC2", "BOOL_VEC3", "BOOL_VEC4", "FLOAT_MAT2", "FLOAT_MAT3", "FLOAT_MAT4", "FLOAT_ARRAY", "FLOAT_VEC2_ARRAY", "FLOAT_VEC3_ARRAY", "FLOAT_VEC4_ARRAY", "INT_ARRAY", "INT_VEC2_ARRAY", "INT_VEC3_ARRAY", "INT_VEC4_ARRAY", "FLOAT_MAT2_ARRAY", "FLOAT_MAT3_ARRAY", "FLOAT_MAT4_ARRAY", "SAMPLER_2D_ARRAY", "SAMPLER_CUBE_ARRAY", "SAMPLER_2D", "SAMPLER_CUBE", "BYTE", "UNSIGNED_BYTE", "SHORT", "UNSIGNED_SHORT", "UNSIGNED_INT", "GLCapabilityType", "shaderVertexID", "standardDerivatives", "shaderTextureLod", "elementIndexUint", "depthTexture", "drawBuffers", "vertexArrayObject", "instancedArrays", "multipleSample", "textureFloat", "textureFloatLinear", "textureHalfFloat", "textureHalfFloatLinear", "WEBGL_colorBufferFloat", "colorBufferFloat", "colorBufferHalfFloat", "textureFilterAnisotropic", "blendMinMax", "astc", "astc_webkit", "etc", "etc_webkit", "etc1", "etc1_webkit", "pvrtc", "pvrtc_webkit", "s3tc", "s3tc_webkit", "Texture", "_isDepthTexture", "_anisoLevel", "_useDepthCompareMode", "generateMipmaps", "_mipmap", "_platformTexture", "_setUseDepthCompareMode", "setUseDepthCompareMode", "_getMaxMiplevel", "size", "floor", "log2", "_getMipmapCount", "_width", "_height", "format", "_format", "width", "height", "wrapModeU", "_wrapModeU", "wrapModeV", "_wrapModeV", "mipmapCount", "_mipmapCount", "filterMode", "_filterMode", "anisoLevel", "_hardwareRenderer", "capability", "maxAnisoLevel", "depthCompareFunction", "_depthCompareFunction", "_isWebGL2", "RenderTarget", "renderTexture", "depth", "antiAliasing", "_autoGenerateMipmaps", "_antiAliasing", "_depth", "colorTextures", "_colorTextures", "_depthTexture", "_platformRenderTarget", "createPlatformRenderTarget", "getColorTexture", "colorTexture", "_setRenderTargetInfo", "faceIndex", "mipLevel", "setRenderTargetInfo", "_blitRenderTarget", "blitRenderTarget", "autoGenerateMipmaps", "colorTextureCount", "Texture2D", "mipmap", "createPlatformTexture2D", "setPixelBuffer", "colorBuffer", "y", "setImageSource", "imageSource", "flipY", "premultiplyAlpha", "getPixelBuffer", "xOrMipLevelOrOut", "yOrMipLevel", "mipLevelOrOut", "argsLength", "arguments", "Texture2DArray", "_length", "createPlatformTexture2DArray", "offsetIndex", "elementIndex", "TextureCube", "createPlatformTextureCube", "face", "FontAtlas", "_charInfoMap", "_space", "_curX", "_curY", "_nextY", "_texture", "uploadCharTexture", "charInfo", "w", "h", "space", "texture", "textureSize", "offsetWidth", "offsetHeight", "Error", "endX", "endY", "textureSizeReciprocal", "u0", "u1", "v0", "v1", "uvs", "addCharInfo", "char", "charCodeAt", "getCharInfo", "SubFont", "_fontAtlases", "_lastIndex", "fontAtlases", "_uploadCharTexture", "lastIndex", "_createFontAtlas", "fontAtlas", "_addCharInfo", "_getCharInfo", "_getTextureByIndex", "_getLastIndex", "Font", "name", "_name", "_subFontMap", "_getSubFont", "fontSize", "fontStyle", "subFontMap", "subFont", "_fontMap", "createFromOS", "fontMap", "font", "AssetPromise", "executor", "_state", "_onProgressCallback", "_promise", "Promise", "resolve", "reject", "_reject", "onResolve", "undefined", "onReject", "reason", "onCancel", "callback", "_onCancelHandler", "setProgress", "progress", "forEach", "onProgress", "then", "onfulfilled", "onrejected", "catch", "onRejected", "finally", "onFinally", "cancel", "all", "promises", "onComplete", "resultValue", "completed", "results", "promise", "Symbol", "toStringTag", "PromiseState", "Pending", "Fulfilled", "Rejected", "Canceled", "ResourceManager", "retryCount", "retryInterval", "timeout", "Infinity", "_assetPool", "_assetUrlPool", "_refObjectPool", "_loadingPromises", "_objectPool", "_editorResourceConfig", "_virtualPathMap", "load", "assetInfo", "_loadSingleItem", "getFromCache", "getAssetPath", "cancelNotLoaded", "gc", "_gc", "asset", "id", "_destroy", "_assignDefaultOptions", "_getTypeByUrl", "urls", "join", "itemOrURL", "itemURL", "_parseURL", "assetBaseURL", "queryPath", "paths", "_parseQueryPath", "cacheObject", "_getResolveResource", "assetURL", "shift", "loadingPromises", "loadingPromise", "resource", "loader", "_loaders", "useCache", "subURL", "subPromise", "isMaster", "forceDestroy", "objects", "len", "subResource", "_getParameterByName", "location", "replace", "regex", "RegExp", "exec", "decodeURIComponent", "string", "result", "charCodeOfDot", "rePropName", "match", "expression", "quote", "subString", "reEscapeChar", "trim", "getResourceByRef", "ref", "refId", "isClone", "initVirtualResources", "config", "virtualPath", "_addLoader", "extNames", "_extTypeMapping", "split", "substring", "lastIndexOf", "resourceLoader", "assetType", "extnames", "Target", "DisorderedArray", "_elements", "delete", "deleteByIndex", "elements", "garbageCollection", "ComponentsManager", "_renderers", "_onStartScripts", "_onUpdateScripts", "_onLateUpdateScripts", "_onPhysicsUpdateScripts", "_disableScripts", "_pendingDestroyScripts", "_disposeDestroyScripts", "_onUpdateAnimations", "_onUpdateRenderers", "_componentsContainerPool", "addRenderer", "renderer", "_rendererIndex", "removeRenderer", "replaced", "addOnStartScript", "script", "_onStartIndex", "removeOnStartScript", "addOnUpdateScript", "_onUpdateIndex", "removeOnUpdateScript", "addOnLateUpdateScript", "_onLateUpdateIndex", "removeOnLateUpdateScript", "addOnPhysicsUpdateScript", "_onPhysicsUpdateIndex", "removeOnPhysicsUpdateScript", "addOnUpdateAnimations", "animation", "removeOnUpdateAnimations", "addOnUpdateRenderers", "removeOnUpdateRenderers", "addDisableScript", "component", "addPendingDestroyScript", "callScriptOnStart", "onStartScripts", "_waitHandlingInValid", "_started", "onStart", "callScriptOnUpdate", "onUpdate", "callScriptOnLateUpdate", "onLateUpdate", "callScriptOnPhysicsUpdate", "onPhysicsUpdate", "callAnimationUpdate", "update", "callRendererOnUpdate", "handlingInvalidScripts", "disableScripts", "disableScript", "_handlingInValid", "pendingDestroyScripts", "disposeDestroyScripts", "onDestroy", "callCameraOnBeginRender", "camera", "scripts", "entity", "_scripts", "onBeginRender", "callCameraOnEndRender", "onEndRender", "getActiveChangedTempList", "pop", "putActiveChangedTempList", "componentContainer", "ComponentCloner", "cloneComponent", "cloneMode", "sourcePropS", "tarProp", "sourcePropD", "_cloneTo", "ComponentsDependencies", "_register", "currentComponent", "dependentComponent", "_addDependency", "_dependenciesMap", "_invDependenciesMap", "_addCheck", "dependentComponents", "getComponent", "addComponent", "_removeCheck", "invDependencies", "components", "Layer", "Layer0", "Layer1", "Layer2", "Layer3", "Layer4", "Layer5", "Layer6", "Layer7", "Layer8", "Layer9", "Layer10", "Layer11", "Layer12", "Layer13", "Layer14", "Layer15", "Layer16", "Layer17", "Layer18", "Layer19", "Layer20", "Layer21", "Layer22", "Layer23", "Layer24", "Layer25", "Layer26", "Layer27", "Layer28", "Layer29", "Layer30", "Layer31", "Everything", "Nothing", "UpdateFlag", "_flagManagers", "clearFromManagers", "_removeFromManagers", "flagManagers", "_updateFlags", "BoolUpdateFlag", "flag", "Component", "_awoken", "_phasedActive", "_enabled", "_entity", "_removeComponent", "isActiveInHierarchy", "_onDisable", "_onAwake", "_onEnable", "_setActive", "_isActiveInHierarchy", "enabled", "scene", "UpdateFlagManager", "_listensers", "createFlag", "addFlag", "removeFlag", "success", "addListener", "removeListener", "param", "updateFlags", "Transform", "_position", "Vector3", "_rotation", "_rotationQuaternion", "Quaternion", "_scale", "_worldPosition", "_worldRotation", "_worldRotationQuaternion", "_lossyWorldScale", "_localMatrix", "Matrix", "_worldMatrix", "_isParentDirty", "_parentTransformCache", "_dirtyFlag", "_updateFlagManager", "_onPositionChanged", "_onWorldPositionChanged", "_onRotationChanged", "_onWorldRotationChanged", "_onRotationQuaternionChanged", "_onWorldRotationQuaternionChanged", "_onScaleChanged", "setPosition", "z", "setRotation", "setRotationQuaternion", "setScale", "setWorldPosition", "setWorldRotation", "setWorldRotationQuaternion", "getWorldForward", "forward", "worldMatrix", "normalize", "getWorldRight", "getWorldUp", "up", "translate", "translationOrX", "relativeToLocalOrY", "relativeToLocal", "_tempVec30", "_translate", "rotate", "rotationOrX", "_rotateXYZ", "rotateByAxis", "axis", "angle", "rad", "rotationAxisAngle", "_tempQuat0", "_rotateByQuat", "lookAt", "targetPosition", "worldUp", "zAxis", "worldPosition", "axisLen", "xAxis", "_tempVec31", "cross", "yAxis", "_tempVec32", "rotMat", "_tempMat41", "getRotation", "registerWorldChangeFlag", "_parentChange", "_updateAllWorldFlag", "_isFrontFaceInvert", "lossyWorldScale", "isInvert", "_updateWorldPositionFlag", "_isContainDirtyFlags", "_worldAssociatedChange", "nodeChildren", "_children", "transform", "_updateWorldRotationFlag", "_updateWorldPositionAndRotationFlag", "_updateWorldScaleFlag", "_updateWorldPositionAndScaleFlag", "_getParentTransform", "parentCache", "parent", "_getScaleMatrix", "invRotation", "invRotationMat", "_tempMat30", "worldRotScaMat", "_tempMat31", "scaMat", "_tempMat32", "copyFromMatrix", "invert", "worldRotationQuaternion", "Matrix3x3", "rotationQuaternion", "multiply", "targetDirtyFlags", "_isContainDirtyFlag", "_setDirtyFlagTrue", "_setDirtyFlagFalse", "rotateQuat", "translation", "transformByQuat", "radFactor", "rotQuat", "rotationEuler", "transformCoordinate", "worldRotation", "invParentQuaternion", "position", "getTranslation", "rotation", "toEuler", "normalized", "scaleMat", "localMatrix", "affineTransformation", "decompose", "_tempMat42", "TransformModifyFlags", "LocalEuler", "LocalQuat", "WorldPosition", "WorldEuler", "WorldQuat", "WorldScale", "LocalMatrix", "WorldMatrix", "WmWp", "WmWeWq", "WmWpWeWq", "WmWs", "WmWpWs", "WmWpWeWqWs", "Entity", "layer", "_components", "_isRoot", "_isActive", "_siblingIndex", "_parent", "_invModelMatrix", "_inverseWorldMatFlag", "getComponents", "getComponentsIncludeChildren", "_getComponentsInChildren", "addChild", "indexOrChild", "child", "_scene", "_removeFromEntityList", "_addToChildrenList", "newScene", "_traverseSetOwnerScene", "_processActive", "_processInActive", "_setTransformDirty", "_setParent", "getChild", "findByName", "children", "findByPath", "splits", "_findChildByName", "createChild", "clearChildren", "cloneEntity", "sourceComp", "targetComp", "_removeFromParent", "_addScript", "_entityScriptsIndex", "_removeScript", "oldParent", "oldSibling", "_activeChangedComponents", "_componentsManager", "_setActiveInHierarchy", "_setActiveComponents", "_setInActiveInHierarchy", "childCount", "siblingIndex", "parentScene", "isActive", "activeChangedComponents", "_setSiblingIndex", "sibling", "oldIndex", "getInvModelMatrix", "root", "_isActiveInEngine", "_rootEntities", "ColorSpace", "Linear", "Gamma", "PointerPhase", "Down", "Move", "Stationary", "Up", "Leave", "Pointer", "phase", "Vector2", "deltaPosition", "_upMap", "_downMap", "_upList", "_downList", "_firePointerExitAndEnter", "rayCastEntity", "_currentEnteredEntity", "onPointerExit", "onPointerEnter", "_firePointerDown", "onPointerDown", "_currentPressedEntity", "_firePointerDrag", "onPointerDrag", "_firePointerUpAndClick", "pressedEntity", "sameTarget", "onPointerClick", "onPointerUp", "SystemInfo", "_initialize", "navigator", "userAgent", "test", "platform", "operatingSystem", "devicePixelRatio", "Keys", "Backquote", "Backslash", "Backspace", "BracketLeft", "BracketRight", "Comma", "Digit0", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "IntlBackslash", "IntlRo", "IntlYen", "KeyA", "KeyB", "KeyC", "KeyD", "KeyE", "KeyF", "KeyG", "KeyH", "KeyI", "KeyJ", "KeyK", "KeyL", "KeyM", "KeyN", "KeyO", "KeyP", "KeyQ", "KeyR", "KeyS", "KeyT", "KeyU", "KeyV", "KeyW", "KeyX", "KeyY", "KeyZ", "Minus", "Period", "Quote", "Semicolon", "Slash", "AltLeft", "AltRight", "CapsLock", "ContextMenu", "ControlLeft", "ControlRight", "Enter", "MetaLeft", "MetaRight", "ShiftLeft", "ShiftRight", "Space", "Tab", "Convert", "KanaMode", "Lang1", "Lang2", "Lang3", "Lang4", "Lang5", "NonConvert", "Delete", "End", "Help", "Home", "Insert", "PageDown", "PageUp", "ArrowDown", "ArrowLeft", "ArrowRight", "ArrowUp", "NumLock", "Numpad0", "Numpad1", "Numpad2", "Numpad3", "Numpad4", "Numpad5", "Numpad6", "Numpad7", "Numpad8", "Numpad9", "NumpadAdd", "NumpadBackspace", "NumpadClear", "NumpadClearEntry", "NumpadComma", "NumpadDecimal", "NumpadDivide", "NumpadEnter", "NumpadEqual", "NumpadHash", "NumpadMemoryAdd", "NumpadMemoryClear", "NumpadMemoryRecall", "NumpadMemoryStore", "NumpadMemorySubtract", "NumpadMultiply", "NumpadParenLeft", "NumpadParenRight", "NumpadStar", "NumpadSubtract", "Escape", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "F13", "F14", "F15", "Fn", "FnLock", "PrintScreen", "ScrollLock", "Pause", "BrowserBack", "BrowserFavorites", "BrowserForward", "BrowserHome", "BrowserRefresh", "BrowserSearch", "BrowserStop", "Eject", "LaunchApp1", "LaunchApp2", "LaunchMail", "MediaPlayPause", "MediaSelect", "MediaStop", "MediaTrackNext", "MediaTrackPrevious", "Power", "Sleep", "AudioVolumeDown", "AudioVolumeMute", "AudioVolumeUp", "WakeUp", "Hyper", "Super", "Turbo", "Abort", "Resume", "Suspend", "Again", "Copy", "Cut", "Find", "Open", "Paste", "Props", "Select", "Undo", "Hiragana", "Katakana", "Unidentified", "KeyboardManager", "htmlCanvas", "_curHeldDownKeyToIndexMap", "_upKeyToFrameCountMap", "_downKeyToFrameCountMap", "_curFrameHeldDownList", "_curFrameDownList", "_curFrameUpList", "_nativeEvents", "_hadListener", "_htmlCanvas", "tabIndex", "_onKeyEvent", "_update", "nativeEvents", "curFrameDownList", "curFrameUpList", "curFrameHeldDownList", "upKeyToFrameCountMap", "evt", "codeKey", "code", "curHeldDownKeyToIndexMap", "downKeyToFrameCountMap", "delIndex", "swapCode", "_onFocus", "_onBlur", "CameraClearFlags", "None", "ColorDepth", "ColorStencil", "All", "HitResult", "distance", "point", "normal", "PhysicsManager", "_initialized", "_restTime", "_colliders", "_gravity", "_physicalObjectsMap", "_onContactEnter", "obj1", "obj2", "shape1", "shape2", "collider", "onCollisionEnter", "_onContactExit", "onCollisionExit", "_onContactStay", "onCollisionStay", "_onTriggerEnter", "onTriggerEnter", "_onTriggerExit", "onTriggerExit", "_onTriggerStay", "onTriggerStay", "fixedTimeStep", "maxAllowedTimeStep", "_setGravity", "initialize", "physics", "_nativePhysics", "_nativePhysicsManager", "createPhysicsManager", "raycast", "ray", "distanceOrResult", "layerMaskOrResult", "outHitResult", "hitResult", "Number", "MAX_VALUE", "layerMask", "onRaycast", "shape", "isSceneQuery", "idx", "_collider", "componentsManager", "simulateTime", "step", "_callColliderOnUpdate", "nativePhysicsManager", "_callColliderOnLateUpdate", "_addColliderShape", "colliderShape", "addColliderShape", "_nativeShape", "_removeColliderShape", "removeColliderShape", "_addCollider", "_index", "addCollider", "_nativeCollider", "_addCharacterController", "controller", "addCharacterController", "_removeCollider", "removeCollider", "_removeCharacterController", "removeCharacterController", "_onUpdate", "_onLateUpdate", "setGravity", "gravity", "maxSumTimeStep", "PhysicsMaterialCombineMode", "Average", "Minimum", "Multiply", "Maximum", "PhysicsMaterial", "_bounciness", "_dynamicFriction", "_staticFriction", "_bounceCombine", "_frictionCombine", "_nativeMaterial", "createPhysicsMaterial", "bounciness", "setBounciness", "dynamicFriction", "setDynamicFriction", "staticFriction", "setStaticFriction", "bounceCombine", "setBounceCombine", "frictionCombine", "setFrictionCombine", "Collider", "_shapes", "_updateFlag", "addShape", "oldCollider", "removeShape", "physicsManager", "clearShapes", "shapes", "setWorldTransform", "worldScale", "setWorldScale", "ControllerNonWalkableMode", "PreventClimbing", "PreventClimbingAndForceSliding", "CharacterController", "_stepOffset", "_nonWalkableMode", "_upDirection", "_slopeLimit", "createCharacterController", "_setUpDirection", "move", "disp", "minDist", "elapsedTime", "getWorldPosition", "setUpDirection", "stepOffset", "setStepOffset", "nonWalkableMode", "setNonWalkableMode", "upDirection", "slopeLimit", "setSlopeLimit", "ColliderShape", "_isTrigger", "_contactOffset", "_material", "_id", "_idGenerator", "_setRotation", "_setPosition", "contactOffset", "setContactOffset", "material", "setMaterial", "isTrigger", "setIsTrigger", "BoxColliderShape", "_size", "createBoxColliderShape", "_setSize", "setSize", "SphereColliderShape", "_radius", "createSphereColliderShape", "radius", "setRadius", "PlaneColliderShape", "createPlaneColliderShape", "ColliderShapeUpAxis", "X", "Y", "Z", "CapsuleColliderShape", "_upAxis", "createCapsuleColliderShape", "setHeight", "upAxis", "setUpAxis", "Joint", "_connectedCollider", "JointCollider", "_force", "_torque", "localPosition", "connectedCollider", "_nativeJoint", "setConnectedCollider", "connectedAnchor", "setConnectedAnchor", "connectedMassScale", "massScale", "setConnectedMassScale", "connectedInertiaScale", "inertiaScale", "setConnectedInertiaScale", "setMassScale", "setInertiaScale", "breakForce", "setBreakForce", "breakTorque", "setBreakTorque", "FixedJoint", "createFixedJoint", "HingeJointFlag", "LimitEnabled", "DriveEnabled", "DriveFreeSpin", "HingeJoint", "_axis", "_hingeFlags", "_useSpring", "createHingeJoint", "setAxis", "swingOffset", "setSwingOffset", "getAngle", "velocity", "getVelocity", "useLimits", "setHingeJointFlag", "useMotor", "useSpring", "limits", "_limits", "motor", "_jointMonitor", "setDriveVelocity", "targetVelocity", "setDriveForceLimit", "forceLimit", "setDriveGearRatio", "gearRation", "freeSpin", "setSoftLimit", "stiffness", "damping", "setHardLimit", "contactDistance", "SpringJoint", "_minDistance", "_maxDistance", "_tolerance", "_stiffness", "_damping", "createSpringJoint", "minDistance", "setMinDistance", "maxDistance", "setMaxDistance", "tolerance", "setTolerance", "setStiffness", "setDamping", "JointLimits", "JointMotor", "ControllerCollisionFlag", "Sides", "StaticCollider", "createStaticCollider", "DynamicCollider", "_linearDamping", "_angularDamping", "_linearVelocity", "_angularVelocity", "_mass", "_centerOfMass", "_inertiaTensor", "_maxAngularVelocity", "_maxDepenetrationVelocity", "_solverIterations", "_isKinematic", "_constraints", "_collisionDetectionMode", "Discrete", "_sleepThreshold", "createDynamicCollider", "_setLinearVelocity", "_setAngularVelocity", "_setCenterOfMass", "_setInertiaTensor", "applyForce", "addForce", "applyTorque", "torque", "addTorque", "positionOrRotation", "sleep", "wakeUp", "getWorldTransform", "setLinearVelocity", "setAngularVelocity", "setCenterOfMass", "setInertiaTensor", "linearDamping", "setLinearDamping", "angularDamping", "setAngularDamping", "linearVelocity", "angularVelocity", "mass", "setMass", "centerOfMass", "inertiaTensor", "maxAngularVelocity", "setMaxAngularVelocity", "maxDepenetrationVelocity", "setMaxDepenetrationVelocity", "sleepThreshold", "setSleepThreshold", "solverIterations", "setSolverIterations", "isKinematic", "setIsKinematic", "constraints", "setConstraints", "collisionDetectionMode", "setCollisionDetectionMode", "CollisionDetectionMode", "Continuous", "ContinuousDynamic", "ContinuousSpeculative", "DynamicColliderConstraints", "FreezePositionX", "FreezePositionY", "FreezePositionZ", "FreezeRotationX", "FreezeRotationY", "FreezeRotationZ", "PointerButton", "Primary", "Secondary", "Auxiliary", "XButton1", "XButton2", "XButton3", "XButton4", "XButton5", "XButton6", "XButton7", "XButton8", "_pointerDec2BinMap", "_pointerBin2DecMap", "PointerManager", "_pointers", "_multiPointerEnabled", "_buttons", "_canvas", "canvas", "_onPointerEvent", "_updatePointerWithPhysics", "_updatePointerWithoutPhysics", "_pointerPool", "pointers", "_getPointer", "pointerId", "updatePointer", "clientRect", "getBoundingClientRect", "clientWidth", "clientHeight", "pointer", "pressedButtons", "onPointerEvent", "focus", "_getIndexByPointerID", "_uniqueID", "lastCount", "pointerPool", "_pointerRayCast", "normalizedX", "normalizedY", "_tempPoint", "_tempRay", "_tempHitResult", "sceneManager", "activeScene", "_activeCameras", "cameras", "renderTarget", "viewport", "vpY", "vpH", "vpX", "vpW", "viewportPointToRay", "cullingMask", "clearFlags", "rect", "clientW", "clientH", "canvasW", "canvasH", "latestEvent", "clientX", "clientY", "top", "currX", "currY", "button", "buttons", "Ray", "WheelManager", "_delta", "_onWheelEvent", "delta", "deltaX", "deltaY", "deltaZ", "cancelable", "preventDefault", "InputManager", "_curFrameCount", "_webCanvas", "OffscreenCanvas", "_wheelManager", "_pointerManager", "_keyboardManager", "isKeyHeldDown", "isKeyDown", "isKeyUp", "isPointerHeldDown", "pointerButton", "isPointerDown", "isPointerUp", "multiPointerEnabled", "wheelDelta", "ShadowCascadesMode", "NoCascades", "TwoCascades", "FourCascades", "ShadowResolution", "Low", "Medium", "High", "VeryHigh", "ShadowType", "Hard", "SoftLow", "SoftHigh", "RenderQueueType", "Opaque", "AlphaTest", "Transparent", "BlendFactor", "Zero", "One", "SourceColor", "OneMinusSourceColor", "DestinationColor", "OneMinusDestinationColor", "SourceAlpha", "OneMinusSourceAlpha", "DestinationAlpha", "OneMinusDestinationAlpha", "SourceAlphaSaturate", "BlendColor", "OneMinusBlendColor", "BlendOperation", "Add", "Subtract", "ReverseSubtract", "Min", "Max", "ColorWriteMask", "Red", "Green", "Blue", "Alpha", "CompareFunction", "CullMode", "Off", "Front", "Back", "ShaderPropertyType", "Float", "Int", "Vector4", "FloatArray", "IntArray", "TextureArray", "StencilOperation", "Keep", "Replace", "IncrementSaturate", "DecrementSaturate", "Invert", "IncrementWrap", "DecrementWrap", "ShaderMacro", "maskIndex", "maskValue", "_maskIndex", "_maskValue", "macroNameIDMap", "_macroNameIdMap", "nameID", "_macroNameCounter", "_nameId", "ShaderMacroCollection", "_mask", "macro", "mask", "maskStart", "endIndex", "newValue", "unionCollection", "macroCollection", "addMask", "addSize", "maskSize", "complementaryCollection", "removeMask", "intersectionCollection", "unionMask", "isEnable", "clear", "outMask", "minSize", "maxSize", "minMask", "maxMask", "pbr_frag_define", "pbr_helper", "brdf", "direct_irradiance_frag_define", "ibl_frag_define", "pbr_frag", "ShadowCoord", "ShadowFragmentDeclaration", "shadow_sample_tent", "ShadowVertexDeclaration", "ShadowVertex", "ShaderLib", "common", "common_vert", "transform_declare", "camera_declare", "color_share", "normal_share", "uv_share", "worldpos_share", "FogVertexDeclaration", "FogFragmentDeclaration", "begin_normal_vert", "begin_position_vert", "position_vert", "color_vert", "normal_vert", "skinning_vert", "blendShape_input", "blendShape_vert", "uv_vert", "worldpos_vert", "FogVertex", "light_frag_define", "mobile_material_frag", "FogFragment", "begin_mobile_frag", "begin_viewdir_frag", "mobile_blinnphong_frag", "noise_common", "noise_cellular_2D", "noise_cellular_2x2", "noise_cellular_2x2x2", "noise_cellular_3D", "noise_cellular", "noise_perlin_2D", "noise_perlin_3D", "noise_perlin_4D", "noise_perlin", "noise_psrd_2D", "noise_simplex_2D", "noise_simplex_3D_grad", "noise_simplex_3D", "noise_simplex_4D", "noise_simplex", "ShadowLib", "PBRShaderLib", "normal_get", "ShaderFactory", "parseCustomMacros", "macros", "m", "parseIncludes", "src", "parseExtension", "extensions", "convertTo300", "shader", "isFrag", "isMRT", "_replaceMRTShader", "declaration", "mrtIndexSet", "Set", "res", "ShaderDataGroup", "Scene", "Camera", "Renderer", "Material", "ShaderUniform", "textureUseComporeMode", "rhi", "_rhi", "_gl", "gl", "_colorSpace", "settings", "colorSpace", "upload1f", "shaderUniform", "cacheValue", "uniform1f", "upload1fv", "uniform1fv", "upload2f", "uniform2f", "upload2fv", "uniform2fv", "upload3f", "uniform3f", "upload3fv", "uniform3fv", "upload4f", "uniform4f", "upload4fv", "uniform4fv", "upload1i", "uniform1i", "upload1iv", "uniform1iv", "upload2i", "uniform2i", "upload2iv", "uniform2iv", "upload3i", "uniform3i", "upload3iv", "uniform3iv", "upload4i", "uniform4i", "upload4iv", "uniform4iv", "uploadMat4", "uniformMatrix4fv", "uploadMat4v", "uploadTexture", "activeTexture", "textureIndex", "bindTexture", "uploadTextureArray", "textureIndices", "ShaderUniformBlock", "constUniforms", "textureUniforms", "ShaderProgram", "vertexSource", "fragmentSource", "sceneUniformBlock", "cameraUniformBlock", "rendererUniformBlock", "materialUniformBlock", "otherUniformBlock", "_uploadRenderCount", "attributeLocation", "_activeTextureUint", "_glProgram", "_createProgram", "_isValid", "_recordLocation", "_counter", "uploadAll", "uniformBlock", "shaderData", "uploadUniforms", "uploadTextures", "propertyValueMap", "_propertyValueMap", "uniform", "propertyId", "applyFunc", "textureDefault", "uploadUnGroupTextures", "groupingOtherUniformBlock", "_groupingSubOtherUniforms", "_currentBind", "useProgram", "_vertexShader", "deleteShader", "_fragmentShader", "deleteProgram", "uniforms", "isTexture", "group", "Shader", "_getShaderPropertyGroup", "_groupingUniform", "vertexShader", "_createShader", "VERTEX_SHADER", "fragmentShader", "FRAGMENT_SHADER", "program", "createProgram", "attachShader", "linkProgram", "validateProgram", "isContextLost", "getProgramParameter", "LINK_STATUS", "getProgramInfoLog", "shaderType", "shaderSource", "createShader", "compileShader", "getShaderParameter", "COMPILE_STATUS", "getShaderInfoLog", "_addLineNum", "uniformInfos", "_getUniformInfos", "attributeInfos", "_getAttributeInfos", "substr", "getUniformLocation", "getPropertyByName", "_uniqueId", "SAMPLER_2D_SHADOW", "defaultTexture", "_magentaTexture2D", "_magentaTextureCube", "_magentaTexture2DArray", "_depthTexture2D", "defaultTextures", "glTextureIndices", "TEXTURE0", "glTextureIndex", "getAttribLocation", "uniformCount", "ACTIVE_UNIFORMS", "getActiveUniform", "attributeCount", "ACTIVE_ATTRIBUTES", "getActiveAttrib", "str", "lines", "limitLength", "prefix", "line", "isValid", "ShaderPass", "_shaderPassId", "_shaderPassCounter", "_vertexSource", "_fragmentSource", "_getShaderProgram", "shaderProgramPool", "_getShaderProgramPool", "shaderProgram", "isWebGL2", "macroNameList", "_getNamesByMacros", "macroNameStr", "versionStr", "graphicAPI", "precisionStr", "canIUse", "_shaderExtension", "cache", "ShaderProperty", "_propertyNameCounter", "vertexSourceOrShaderPasses", "_passes", "passCount", "compileVariant", "compileMacros", "_compileMacros", "getMacroByName", "passes", "shaderMap", "_shaderMap", "find", "_macroMap", "maskMap", "_macroMaskMap", "counter", "_macroCounter", "bit", "propertyNameMap", "_propertyNameMap", "property", "_propertyIdMap", "propertyName", "shaderProperty", "_group", "subMaskMap", "subMask", "j", "ShaderData", "_macroCollection", "getFloat", "getPropertyValue", "setFloat", "_setPropertyValue", "getInt", "setInt", "getFloatArray", "setFloatArray", "getIntArray", "setIntArray", "getVector2", "setVector2", "getVector3", "setVector3", "getVector4", "setVector4", "getMatrix", "setMatrix", "getColor", "setColor", "getTexture", "setTexture", "lastValue", "getTextureArray", "setTextureArray", "enableMacro", "lastMacro", "disableMacro", "currentMacro", "getMacros", "macroMap", "values", "getProperties", "properties", "propertyIdMap", "targetPropertyValueMap", "targetProperty", "Light", "intensity", "shadowType", "shadowBias", "shadowNormalBias", "shadowNearPlane", "shadowStrength", "_lightIndex", "_color", "_lightColor", "_getLightColor", "viewMatrix", "_viewMat", "inverseViewMatrix", "_inverseViewMat", "_maxLight", "DirectLight", "_forward", "_reverseDirection", "_appendData", "lightIndex", "cullingMaskStart", "colorStart", "directionStart", "lightColor", "direction", "_combinedData", "_lightManager", "_attachDirectLight", "_detachDirectLight", "_updateShaderData", "_cullingMaskProperty", "_colorProperty", "_directionProperty", "reverseDirection", "_shadowProjectionMatrix", "PointLight", "positionStart", "distanceStart", "lightPosition", "_attachPointLight", "_detachPointLight", "_positionProperty", "_distanceProperty", "SpotLight", "penumbra", "_inverseDirection", "_projectMatrix", "penumbraCosStart", "angleCosStart", "angleCos", "cos", "penumbraCos", "_attachSpotLight", "_detachSpotLight", "_angleCosProperty", "_penumbraCosProperty", "matrix", "fov", "sqrt", "perspective", "LightManager", "_spotLights", "_pointLights", "_directLights", "light", "_getSunLightIndex", "directLights", "sunLightIndex", "maxIntensity", "NEGATIVE_INFINITY", "hasShadowLight", "directLight", "spotLight", "pointLight", "spotLightCount", "pointLightCount", "directLightCount", "RenderTargetBlendState", "colorBlendOperation", "alphaBlendOperation", "sourceColorBlendFactor", "sourceAlphaBlendFactor", "destinationColorBlendFactor", "destinationAlphaBlendFactor", "colorWriteMask", "BlendState", "targetBlendState", "blendColor", "alphaToCoverage", "_apply", "hardwareRenderer", "lastRenderState", "_platformApply", "blendState", "lastState", "lastTargetBlendState", "BLEND", "blendFuncSeparate", "_getGLBlendFactor", "blendEquationSeparate", "_getGLBlendOperation", "colorMask", "SAMPLE_ALPHA_TO_COVERAGE", "blendFactor", "ZERO", "ONE", "SRC_COLOR", "ONE_MINUS_SRC_COLOR", "DST_COLOR", "ONE_MINUS_DST_COLOR", "SRC_ALPHA", "ONE_MINUS_SRC_ALPHA", "DST_ALPHA", "ONE_MINUS_DST_ALPHA", "SRC_ALPHA_SATURATE", "CONSTANT_COLOR", "ONE_MINUS_CONSTANT_COLOR", "blendOperation", "FUNC_ADD", "FUNC_SUBTRACT", "FUNC_REVERSE_SUBTRACT", "MIN", "MAX", "DepthState", "writeEnabled", "compareFunction", "depthState", "DEPTH_TEST", "depthFunc", "_getGLCompareFunction", "depthMask", "NEVER", "LESS", "EQUAL", "LEQUAL", "GREATER", "NOTEQUAL", "GEQUAL", "ALWAYS", "RasterState", "cullMode", "depthBias", "slopeScaledDepthBias", "_cullFaceEnable", "_frontFaceInvert", "frontFaceInvert", "rasterState", "cullFaceEnable", "CULL_FACE", "cullFace", "BACK", "FRONT", "frontFace", "CW", "CCW", "_enableGlobalDepthBias", "POLYGON_OFFSET_FILL", "polygonOffset", "StencilState", "referenceValue", "writeMask", "compareFunctionFront", "compareFunctionBack", "passOperationFront", "passOperationBack", "failOperationFront", "failOperationBack", "zFailOperationFront", "zFailOperationBack", "stencilState", "STENCIL_TEST", "referenceOrMaskChange", "stencilFuncSeparate", "stencilOpSeparate", "_getGLStencilOperation", "stencilMask", "KEEP", "REPLACE", "INCR", "DECR", "INVERT", "INCR_WRAP", "DECR_WRAP", "RenderState", "renderQueueType", "_lastRenderState", "_renderStates", "dest", "renderStates", "_preRender", "renderElement", "_shader", "lastStatesCount", "renderState", "ClassPool", "_elementPoolIndex", "_elementPool", "getFromPool", "pool", "resetPool", "RenderElement", "MeshRenderElement", "setValue", "mesh", "subMesh", "shaderPass", "RenderContext", "applyVirtualCamera", "virtualCamera", "_viewMatrixProperty", "_projectionMatrixProperty", "projectionMatrix", "_vpMatrixProperty", "viewProjectionMatrix", "SpriteElement", "multiRenderData", "renderDate", "renderData", "SpriteMaskElement", "isAdd", "SpriteMaskInteraction", "VisibleInsideMask", "VisibleOutsideMask", "_globalShaderMacro", "_bounds", "BoundingBox", "_overrideUpdate", "_materials", "_dirtyUpdateFlag", "_mvMatrix", "_mvpMatrix", "_mvInvMatrix", "_normalMatrix", "_materialsInstanced", "_priority", "_receiveShadows", "_rendererLayer", "castShadows", "prototype", "_onTransformChanged", "_registerEntityTransformListener", "_receiveShadowMacro", "_rendererLayerProperty", "getInstanceMaterial", "materials", "_createInstanceMaterial", "getMaterial", "indexOrMaterial", "_setMaterial", "getInstanceMaterials", "materialsInstance", "getMaterials", "setMaterials", "internalMaterials", "materialsInstanced", "internalMaterial", "_prepareRender", "context", "cameraPosition", "boundsCenter", "bounds", "getCenter", "_tempVector0", "isOrthographic", "_distanceForSort", "dot", "distanceSquared", "_render", "_updateTransformShaderData", "mvMatrix", "mvpMatrix", "mvInvMatrix", "normalMatrix", "transpose", "_localMatrixProperty", "_worldMatrixProperty", "_mvMatrixProperty", "_mvpMatrixProperty", "_mvInvMatrixProperty", "_normalMatrixProperty", "_updateBounds", "worldBounds", "insMaterial", "isCulled", "_renderFrameCount", "time", "receiveShadows", "materialCount", "priority", "RendererUpdateFlags", "WorldVolume", "StaticInterfaceImplement", "SimpleSpriteAssembler", "resetData", "_renderData", "vertexCount", "positions", "triangles", "_rectangleTriangles", "updatePositions", "sprite", "pivot", "pivotX", "wE", "sx", "flipX", "sy", "pWE", "pivotY", "spritePositions", "_getPositions", "_getBounds", "updateUVs", "spriteUVs", "_getUVs", "renderUVs", "bottom", "RenderData2D", "SpriteMaskLayer", "SpriteModifyFlags", "atlasRotate", "atlasRegion", "atlasRegionOffset", "region", "border", "SpriteMask", "influenceLayers", "_sprite", "_automaticWidth", "_automaticHeight", "_customWidth", "_customHeight", "_flipX", "_flipY", "_alphaCutoff", "_spriteMaskDefaultMaterial", "_alphaCutoffProperty", "_onSpriteChange", "spriteMaskElementPool", "_spriteMaskElementPool", "maskElement", "_renderPipeline", "_allSpriteMasks", "_maskElement", "_calDefaultSize", "_textureProperty", "lastSprite", "alphaCutoff", "SpriteMaskUpdateFlags", "UV", "RenderData", "AutomaticSize", "VertexElementFormat", "Byte4", "UByte4", "NormalizedByte4", "NormalizedUByte4", "Short2", "UShort2", "NormalizedShort2", "NormalizedUShort2", "Short4", "UShort4", "NormalizedShort4", "NormalizedUShort4", "BufferUsage", "Static", "Dynamic", "Stream", "IndexFormat", "UInt8", "UInt16", "UInt32", "BufferUtil", "_getGLBufferUsage", "bufferUsage", "STATIC_DRAW", "DYNAMIC_DRAW", "STREAM_DRAW", "_getGLIndexType", "indexFormat", "_getGLIndexByteCount", "_getElementInfo", "VertexElement", "semantic", "offset", "bindingIndex", "instanceStepRate", "_semantic", "_offset", "_bindingIndex", "_glElementInfo", "_instanceStepRate", "BufferBindFlag", "VertexBuffer", "IndexBuffer", "SetDataOptions", "Discard", "Buffer", "byteLengthOrData", "_bufferUsage", "glBufferUsage", "glBindTarget", "ARRAY_BUFFER", "ELEMENT_ARRAY_BUFFER", "_nativeBuffer", "createBuffer", "_glBufferUsage", "_glBindTarget", "_byteLength", "bufferData", "byteLength", "bindBuffer", "setData", "bufferByteOffset", "dataOffset", "dataLength", "options", "byteSize", "BYTES_PER_ELEMENT", "dataByteLength", "isArrayBufferView", "byteOffset", "bufferSubData", "subData", "buffer", "getData", "getBufferSubData", "deleteBuffer", "resize", "MeshTopology", "Points", "Lines", "LineLoop", "LineStrip", "Triangles", "TriangleStrip", "TriangleFan", "IndexBufferBinding", "_buffer", "SubMesh", "topology", "Mesh", "_vertexElementMap", "_instanceCount", "_vertexBufferBindings", "_indexBufferBinding", "_vertexElements", "_enableVAO", "_subMeshes", "_platformPrimitive", "createPlatformPrimitive", "_onBoundsChanged", "addSubMesh", "startOrSubMesh", "removeSubMesh", "subMeshes", "clearSubMesh", "_clearVertexElements", "vertexElementMap", "_addVertexElement", "_bufferStructChanged", "_insertVertexElement", "_setVertexBufferBinding", "binding", "lastBinding", "_draw", "draw", "vertexBufferBindings", "_setVertexElements", "_setIndexBufferBinding", "_glIndexType", "_glIndexByteCount", "MeshModifyFlags", "Bounds", "VertexElements", "VertexBufferBinding", "stride", "_stride", "BlendShapeManager", "modelMesh", "_blendShapeCount", "_blendShapes", "_subDataDirtyFlags", "_vertexBuffers", "_uniformOccupiesCount", "_useBlendNormal", "_useBlendTangent", "_vertexElementCount", "_storeInVertexBufferInfo", "_maxCountSingleVertexBuffer", "_lastCreateHostInfo", "_canUseTextureStoreData", "_dataTextureInfo", "_modelMesh", "canUseFloatTextureBlendShape", "_updateLayoutChange", "_addBlendShape", "blendShape", "_layoutChangeManager", "_createSubDataDirtyFlag", "_clearBlendShapes", "blendShapes", "subDataDirtyFlags", "skinnedMeshRenderer", "blendShapeCount", "_blendShapeMacro", "_useTextureMode", "_blendShapeTextureMacro", "_blendShapeTextureProperty", "_vertexTexture", "_blendShapeTextureInfoProperty", "_blendShapeWeightsProperty", "blendShapeWeights", "maxBlendCount", "_getVertexBufferModeSupportCount", "condensedBlendShapeWeights", "_condensedBlendShapeWeights", "_filterCondensedBlendShapeWeights", "_blendShapeNormalMacro", "_blendShapeTangentMacro", "_layoutOrCountChange", "_vertexElementsNeedUpdate", "maxSupportCount", "_needUpdateData", "_setAttributeModeOffsetInfo", "vertexElementOffset", "bufferBindingOffset", "_vertexElementOffset", "_bufferBindingOffset", "_addVertexElements", "bindingOffset", "vertexCountChange", "noLongerAccessible", "useTexture", "createHost", "_createTextureArray", "_createVertexBuffers", "_updateTextureArray", "_updateVertexBuffers", "_releaseMemoryCache", "blendShapeNamesMap", "_blendShapeNames", "dataChangedFlags", "_vertices", "vertexBuffers", "vertexFloatCount", "vertexByteCount", "maxCountSingleBuffer", "bufferCount", "ceil", "floatCount", "containCount", "usage", "blendShapeBuffer", "maxTextureSize", "vertexPixelStride", "textureWidth", "textureHeight", "blendShapeDataTexture", "vertices", "storeInfos", "blendShapeFloatStride", "blendShapeByteStride", "bufferOffset", "dataChangedFlag", "frames", "endFrame", "deltaPositions", "bufferIndex", "indexInBuffer", "bufferFloatStride", "storeInfo", "deltaNormals", "deltaNormal", "deltaTangents", "deltaTangent", "vertexTexture", "subDirtyFlag", "subBlendShapeDataStride", "tangent", "notFirst", "vertexElementCount", "useBlendNormal", "_useBlendShapeNormal", "useBlendTangent", "_useBlendShapeTangent", "_attributeModeUpdateVertexElement", "vertexElements", "vertexBufferStoreInfo", "condensedIndex", "elementOffset", "vertexElement", "condensedWeightsCount", "thresholdWeight", "POSITIVE_INFINITY", "thresholdIndex", "weight", "condensedWeight", "VertexAttribute", "Position", "Normal", "Tangent", "BoneWeight", "BoneIndex", "UV1", "UV2", "UV3", "UV4", "UV5", "UV6", "UV7", "ModelMesh", "_vertexCount", "_accessible", "_verticesFloat32", "_verticesUint8", "_indices", "_indicesFormat", "_indicesChangeFlag", "_positions", "_normals", "_colors", "_tangents", "_uv", "_uv1", "_uv2", "_uv3", "_uv4", "_uv5", "_uv6", "_uv7", "_boneWeights", "_boneIndices", "_bufferStrides", "_vertexBufferUpdateFlag", "_vertexDataUpdateFlag", "_vertexElementsUpdate", "_customVertexElements", "_vertexCountChanged", "_blendShapeManager", "setPositions", "newVertexCount", "getPositions", "setNormals", "normals", "getNormals", "setColors", "colors", "getColors", "setBoneWeights", "boneWeights", "getBoneWeights", "setBoneIndices", "boneIndices", "getBoneIndices", "setTangents", "tangents", "getTangents", "setUVs", "uv", "channelIndex", "getUVs", "setIndices", "indices", "getIndices", "setVertexElements", "customVertexElements", "customVertexElementMap", "uv1s", "uv2s", "uv3s", "uv4s", "uv5s", "uv6s", "uv7s", "setVertexBufferBinding", "bufferOrBinding", "strideOrFirstIndex", "isBinding", "bindings", "setVertexBufferBindings", "firstIndex", "needLength", "addBlendShape", "clearBlendShapes", "getBlendShapeName", "uploadData", "_updateVertexElements", "vertexBuffer", "elementCount", "_updateVertices", "newVertexBuffer", "indexBuffer", "newIndexBuffer", "blendShapeManager", "_releaseCache", "calculateTangents", "_tempVec0", "_tempVec1", "_tempVec2", "_tempVec3", "temp", "_tempVec4", "triangleCount", "biTangents", "i0", "i1", "i2", "p0", "p1", "p2", "w0", "w1", "w2", "e1", "e2", "x1", "x2", "y1", "y2", "_supplementaryVertexElements", "_insertVertexAttribute", "bsManager", "bsAttributeUpdate", "_vertexChangeFlag", "_vertexStrideFloat", "joint", "internalStart", "vertexAttribute", "_getAttributeFormat", "needByteLength", "_getAttributeByteLength", "lastOffset", "attribute", "accessible", "positionElement", "positionBufferBinding", "VertexChangedFlags", "Skin", "inverseBindMatrices", "joints", "skeleton", "MeshRenderer", "_enableVertexColor", "_onMeshChanged", "_mesh", "localBounds", "_uvMacro", "_uv1Macro", "_normalMacro", "_tangentMacro", "_vertexColorMacro", "enableVertexColor", "renderPipeline", "renderElementPool", "_renderElementPool", "shaderPasses", "pushPrimitive", "_setMesh", "lastMesh", "MeshRendererUpdateFlags", "VertexElementMacro", "Utils", "_floatMatrixMultiply", "re", "rOffset", "oe", "le", "l11", "l12", "l13", "l14", "l21", "l22", "l23", "l24", "l31", "l32", "l33", "l34", "l41", "l42", "l43", "l44", "r11", "r12", "r13", "r14", "r21", "r22", "r23", "r24", "r31", "r32", "r33", "r34", "r41", "r42", "r43", "r44", "_reflectGet", "pathArr", "_stringToPath", "object", "SkinnedMeshRenderer", "_supportSkinning", "_hasInitSkin", "_jointDataCreateCache", "_localBounds", "_skin", "maxVertexUniformVectors", "getParameter", "MAX_VERTEX_UNIFORM_VECTORS", "_options", "_maxAllowSkinUniformVectorCount", "_maxVertexUniformVectors", "_onLocalBoundsChanged", "_initSkin", "ibms", "worldToLocal", "_rootBone", "_jointEntities", "_jointMatrices", "jointMatrices", "skin", "bsUniformOccupiesCount", "jointCount", "jointDataCreateCache", "jointCountChange", "remainUniformJointCount", "canIUseMoreJoints", "_jointTexture", "_jointSamplerProperty", "_jointMatrixProperty", "_blendShapeWeights", "jointEntities", "_findByEntityName", "lastRootBone", "rootBone", "rootIndex", "approximateBindMatrix", "subRootBoneCount", "_computeApproximateBindMatrix", "multiplyScalar", "_jointCountProperty", "rootEntity", "rootChild", "_checkBlendShapeWeightLength", "newBlendShapeCount", "lastBlendShapeWeights", "lastBlendShapeWeightsCount", "newBlendShapeWeights", "_tempMatrix", "PrimitiveMesh", "createSphere", "segments", "rectangleCount", "_generateIndices", "thetaRange", "alphaRange", "countReciprocal", "segmentsReciprocal", "u", "alphaDelta", "thetaDelta", "sinTheta", "sin", "posX", "posY", "posZ", "c", "createCuboid", "halfWidth", "halfHeight", "halfDepth", "createPlane", "horizontalSegments", "verticalSegments", "horizontalCount", "verticalCount", "gridWidth", "gridHeight", "horizontalCountReciprocal", "horizontalSegmentsReciprocal", "verticalSegmentsReciprocal", "createCylinder", "radiusTop", "radiusBottom", "radialSegments", "heightSegments", "radialCount", "unitHeight", "torsoVertexCount", "torsoRectangleCount", "capTriangleCount", "totalVertexCount", "radialCountReciprocal", "radialSegmentsReciprocal", "heightSegmentsReciprocal", "indicesOffset", "thetaStart", "radiusDiff", "slope", "radiusSlope", "theta", "cosTheta", "diameterTopReciprocal", "diameterBottomReciprocal", "positionStride", "curPosBottom", "curPosX", "curPosZ", "curPosTop", "topCapIndex", "bottomIndiceIndex", "topIndiceIndex", "firstStride", "secondStride", "radiusMax", "createTorus", "tubeRadius", "tubularSegments", "arc", "cosV", "sinV", "cosU", "sinU", "centerX", "centerY", "outerRadius", "createCone", "curRadius", "curPos", "createCapsule", "capVertexCount", "capRectangleCount", "_createCapsuleCap", "indexCount", "capAlphaRange", "posIndex", "BufferMesh", "setIndexBufferBinding", "instanceCount", "indexBufferBinding", "BlendShapeFrame", "BlendShape", "_dataChangeManager", "_frames", "addFrame", "frameOrWeight", "frame", "_addFrame", "clearFrames", "_updateUseNormalAndTangent", "_addDataDirtyFlag", "useNormal", "useTangent", "useBlendShapeNormal", "useBlendShapeTangent", "Basic2DBatcher", "_subMeshPool", "_batchedQueue", "_meshes", "_meshCount", "_indiceBuffers", "_flushId", "_elementCount", "MAX_VERTEX_COUNT", "_createMesh", "drawElement", "replaceMaterial", "charElements", "_drawSubElement", "flush", "batchedQueue", "_updateData", "drawBatches", "_canUploadSameBuffer", "meshes", "indiceBuffers", "vertexStride", "createVertexElements", "vertexIndex", "indiceIndex", "vertexStartIndex", "curIndiceStartIndex", "curMeshIndex", "preElement", "curElement", "updateVertices", "triangleNum", "canBatch", "_getSubMeshFromPool", "SpriteMaskBatcher", "preShaderData", "curShaderData", "textureProperty", "alphaCutoffProperty", "curUV", "sceneData", "cameraData", "spriteMaskElement", "op", "drawPrimitive", "SpriteMaskManager", "_preMaskLayer", "_batcher", "preRender", "maskInteraction", "_processMasksDiff", "postRender", "maskLayer", "preMaskLayer", "curMaskLayer", "allMasks", "commonLayer", "addLayer", "reduceLayer", "allMaskElements", "maskRenderElement", "TextRenderElement", "BackgroundMode", "SolidColor", "Sky", "BackgroundTextureFillMode", "AspectFitWidth", "AspectFitHeight", "Fill", "aspectRatio", "fieldOfView", "cameraShaderData", "_viewProjMatrix", "_projectionMatrix", "materialShaderData", "viewProjMatrix", "f", "tan", "originViewProjMatrix", "_epsilon", "Background", "solidColor", "sky", "_textureFillMode", "_createPlane", "_resizeBackgroundTexture", "_backgroundTextureMesh", "fitWidthScale", "fitHeightScale", "_backgroundTextureMaterial", "textureFillMode", "FogMode", "Exponential", "ExponentialSquared", "DiffuseMode", "SphericalHarmonics", "AmbientLight", "_diffuseSolidColor", "_diffuseIntensity", "_specularIntensity", "_diffuseMode", "_shArray", "_scenes", "_specularTextureDecodeRGBM", "_addToScene", "_diffuseColorProperty", "_diffuseIntensityProperty", "_specularIntensityProperty", "_diffuseSHProperty", "_setDiffuseMode", "_setSpecularTextureDecodeRGBM", "_setSpecularTexture", "_removeFromScene", "scenes", "sceneShaderData", "_shMacro", "_specularTexture", "_specularTextureProperty", "_mipLevelProperty", "_specularMacro", "_decodeRGBMMacro", "_preComputeSH", "sh", "coefficients", "specularTextureDecodeRGBM", "diffuseMode", "diffuseSolidColor", "diffuseSphericalHarmonics", "_diffuseSphericalHarmonics", "diffuseIntensity", "specularTexture", "specularIntensity", "background", "shadowResolution", "shadowTwoCascadeSplits", "shadowFourCascadeSplits", "shadowDistance", "_shadowCascades", "_fogMode", "_fogColor", "_fogStart", "_fogEnd", "_fogDensity", "_fogParams", "ambientLight", "_allScenes", "shadowCascades", "_fogColorProperty", "_fogParamsProperty", "_computeLinearFogParams", "_computeExponentialFogParams", "createRootEntity", "addRootEntity", "isRoot", "oldScene", "_addToRootEntityList", "removeRootEntity", "getRootEntity", "findEntityByName", "rootEntities", "findEntityByPath", "filter", "Boolean", "rootEntitiesCount", "findEntity", "allScenes", "_attachRenderCamera", "_detachRenderCamera", "active", "lightManager", "_sunLight", "rootEntityCount", "fogStart", "fogEnd", "fogRange", "fogParams", "density", "LN2", "_ambientLight", "lastAmbientLight", "fogMode", "fogColor", "fogDensity", "SceneManager", "loadScene", "destroyOldScene", "scenePromise", "_activeScene", "mergeScenes", "sourceScene", "destScene", "oldRootEntities", "_destroyAllScene", "ShaderPool", "init", "blinnPhongVs", "blinnPhongFs", "pbrVs", "pbrFs", "pbrSpecularFs", "unlitVs", "unlitFs", "shadowMapVs", "shadowMapFs", "skyboxVs", "skyboxFs", "particleVs", "particleFs", "spriteMaskVs", "spriteMaskFs", "spriteVs", "spriteFs", "backgroundTextureVs", "backgroundTextureFs", "ShaderProgramPool", "_cacheHierarchy", "_cacheMap", "cacheMap", "maskLength", "_resizeCacheMapHierarchy", "maxEndIndex", "subCacheShaders", "cacheKey", "_lastQueryKey", "_lastQueryMap", "hierarchy", "resizeLength", "subCacheMap", "Engine", "_spriteElementPool", "_textElementPool", "_renderContext", "_renderCount", "_shaderProgramPools", "_canSpriteBatch", "_settings", "_resourceManager", "_sceneManager", "_vSyncCount", "_targetFrameRate", "_time", "_isPaused", "_vSyncCounter", "_targetFrameInterval", "_frameInProcess", "_waittingDestroy", "_animate", "_requestId", "requestAnimationFrame", "_timeoutId", "setTimeout", "_spriteMaskManager", "_spriteDefaultMaterial", "_createSpriteMaterial", "_createSpriteMaskMaterial", "_textDefaultFont", "inputManager", "magentaPixel", "magentaTexture2D", "magentaTextureCube", "_noDepthTextureMacro", "depthTexture2D", "magentaTexture2DArray", "magentaMaterial", "_magentaMaterial", "backgroundTextureMaterial", "innerSettings", "_gammaMacro", "createEntity", "pause", "cancelAnimationFrame", "clearTimeout", "resume", "sort", "camera1", "camera2", "run", "shaderProgramPools", "render", "_forceFlush", "isPaused", "vSyncCount", "targetFrameRate", "_pixelsPerUnit", "Script", "_onPreRenderIndex", "_onPostRenderIndex", "onAwake", "onEnable", "other", "onDisable", "SpriteBatcher", "preRenderer", "curRenderer", "checkBatchWithMask", "leftMaskInteraction", "maskManager", "spriteElement", "RenderQueue", "items", "_spriteBatcher", "customShader", "renderCount", "renderPassFlag", "rendererData", "materialData", "switchProgram", "switchRenderCount", "_uploadScene", "_uploadCamera", "_uploadRenderer", "_uploadMaterial", "compareFunc", "_quickSort", "from", "to", "_insertionSort", "third_index", "v2", "c01", "tmp", "c02", "c12", "low_end", "high_start", "partition", "order", "top_elem", "_compareFromNearToFar", "_compareFromFarToNear", "VirtualCamera", "ShadowSliceData", "cullPlanes", "Plane", "splitBoundSphere", "BoundingSphere", "FrustumCorner", "FarBottomLeft", "FarTopLeft", "FarTopRight", "FarBottomRight", "nearBottomLeft", "nearTopLeft", "nearTopRight", "nearBottomRight", "unknown", "ShadowUtils", "shadowDepthFormat", "supportDepthTexture", "cullingRenderBounds", "cullPlaneCount", "plane", "shadowCullFrustum", "shadowSliceData", "getBoundSphereByFrustum", "near", "far", "centerZ", "k2", "farSNear", "farANear", "center", "sphereCenterZ", "getDirectionLightShadowCullPlanes", "cameraFrustum", "splitDistance", "cameraNear", "frustumCorners", "_frustumCorners", "backPlaneFaces", "_backPlaneFaces", "planeNeighbors", "_frustumPlaneNeighbors", "twoPlaneCorners", "_frustumTwoPlaneCorners", "edgePlanePoint2", "_edgePlanePoint2", "getPlane", "FrustumFace", "Near", "Far", "Left", "Right", "Bottom", "Top", "splitNearDistance", "splitNear", "_adjustNearPlane", "splitFar", "_adjustFarPlane", "CollisionUtil", "intersectionPointThreePlanes", "backIndex", "edgeIndex", "backFace", "neighborFaces", "neighborFace", "notBackFace", "corners", "point0", "point1", "fromPoints", "getDirectionalLightMatrices", "lightUp", "lightSide", "lightForward", "cascadeIndex", "nearPlane", "outShadowMatrices", "boundSphere", "resolution", "halfShadowResolution", "borderRadius", "atlasBorderSize", "borderDiam", "sizeUnit", "radiusUnit", "upLen", "sideLen", "forwardLen", "projectMatrix", "ortho", "_shadowMapCoordMatrix", "getMaxTileResolutionInAtlas", "atlasWidth", "atlasHeight", "tileCount", "currentTileCount", "getShadowBias", "frustumSize", "texelSize", "normalBias", "kernelRadius", "applySliceTransform", "tileSize", "atlasOffset", "sliceMatrix", "_tempMatrix0", "oneOverAtlasWidth", "oneOverAtlasHeight", "scaleX", "scaleY", "offsetX", "offsetY", "CascadedShadowCasterPass", "_shadowMapSize", "_shadowBias", "_shadowSliceData", "_lightUp", "_lightSide", "_existShadowMap", "_splitBoundSpheres", "_maxCascades", "_shadowMatrices", "_shadowInfos", "_viewportOffsets", "_camera", "_supportDepthTexture", "_shadowCasterShader", "_updateShadowSettings", "_renderDirectShadowMap", "_updateReceiversShaderData", "shadowCasterShader", "viewports", "splitBoundSpheres", "shadowMatrices", "_opaqueQueue", "alphaTestQueue", "_alphaTestQueue", "transparentQueue", "_transparentQueue", "_cascadesSplitDistance", "lightWorld", "lightWorldE", "shadowFar", "farClipPlane", "_getCascadesSplitDistance", "_getAvailableRenderTarget", "activeRenderTarget", "_viewport", "clearRenderTarget", "_clearColor", "_tempVector", "shadowTileResolution", "_shadowTileResolution", "_frustum", "nearClipPlane", "shadowMapSize", "_updateSingleShadowCasterShaderData", "opaqueQueue", "renderers", "setGlobalDepthBias", "scissor", "_shadowMatricesProperty", "_shadowInfosProperty", "_shadowMapsProperty", "_shadowSplitSpheresProperty", "cascadesSplitDistance", "range", "tFov", "denominator", "_getFarWithRadius", "_shadowMapFormat", "_renderTargets", "shadowFormat", "_shadowMapResolution", "_shadowCascadeMode", "viewportOffset", "_lightShadowBiasProperty", "_lightDirectionProperty", "passNum", "RenderPass", "renderOverride", "BasicRenderPipeline", "_lastCanvasSize", "_cascadedShadowCaster", "_renderPassArray", "_defaultPass", "addRenderPass", "nameOrPass", "renderPass", "removeRenderPass", "pass", "getRenderPass", "cubeFace", "_virtualCamera", "_callRender", "_drawRenderPass", "clearColor", "_drawBackgroundTexture", "enableFrustumCulling", "intersectsBox", "defaultRenderPass", "_tempVector1", "MathTemp", "tempVec4", "tempVec3", "tempVec2", "BoundingFrustum", "_isProjMatSetting", "_nearClipPlane", "_farClipPlane", "_fieldOfView", "_orthographicSize", "_isProjectionDirty", "_isInvProjMatDirty", "_isFrustumProjectDirty", "_customAspectRatio", "_renderTarget", "_inverseProjectionMatrix", "_lastAspectSize", "_invViewProjMat", "_transform", "_isViewMatrixDirty", "_isInvViewProjDirty", "_frustumViewChangeFlag", "resetProjectionMatrix", "_projMatChange", "resetAspectRatio", "worldToViewportPoint", "cameraPoint", "viewportPoint", "transformToVec4", "viewportToWorldPoint", "nf", "pointZ", "_innerViewportToWorldPoint", "_getInvViewProjMat", "invViewProjMat", "origin", "screenToViewportPoint", "viewportToScreenPoint", "worldToScreenPoint", "screenToWorldPoint", "screenPointToRay", "calculateFromMatrix", "clipPoint", "_inverseViewMatrixProperty", "_cameraPositionProperty", "_getInverseProjectionMatrix", "orthographicSize", "rotationTranslation", "enableHDR", "mimeType", "json", "gltf", "mtl", "prefab", "txt", "bin", "png", "webp", "jpg", "defaultRetryCount", "defaultTimeout", "defaultInterval", "request", "getMimeTypeFromUrl", "realRequest", "requestImage", "requestRes", "lastError", "MultiExecutor", "stop", "err", "img", "Image", "onerror", "onabort", "timeoutId", "onload", "crossOrigin", "xhr", "XMLHttpRequest", "method", "status", "response", "responseText", "ontimeout", "onprogress", "loaded", "total", "open", "withCredentials", "credentials", "responseType", "headers", "setRequestHeader", "send", "extname", "execFunc", "totalCount", "interval", "_currentCount", "done", "Loader", "registerClass", "className", "classDefine", "_engineObjects", "getClass", "AssetType", "Text", "JSON", "AnimationClip", "AnimatorController", "Prefab", "KTX", "KTXCube", "Sprite", "SpriteAtlas", "Env", "HDR", "SourceFont", "BlendMode", "Additive", "RenderFace", "Double", "BaseMaterial", "_renderFace", "_isTransparent", "_blendMode", "_alphaCutoffProp", "setIsTransparent", "passIndex", "isTransparent", "_transparentMacro", "setBlendMode", "blendMode", "setRenderFace", "renderFace", "_alphaCutoffMacro", "_baseColorProp", "_baseTextureProp", "_baseTextureMacro", "_tilingOffsetProp", "_normalTextureProp", "_normalIntensityProp", "_normalTextureMacro", "_emissiveColorProp", "_emissiveTextureProp", "_emissiveTextureMacro", "BlinnPhongMaterial", "_specularColorProp", "_shininessProp", "baseColor", "baseTexture", "specularColor", "_specularTextureProp", "emissiveColor", "emissiveTexture", "normalTexture", "normalIntensity", "shininess", "tilingOffset", "TextureCoordinate", "UV0", "PBRBaseMaterial", "_occlusionTextureIntensityProp", "_occlusionTextureCoordProp", "_clearCoatProp", "_clearCoatRoughnessProp", "normalTextureIntensity", "occlusionTexture", "_occlusionTextureProp", "occlusionTextureIntensity", "occlusionTextureCoord", "clearCoat", "clearCoatTexture", "_clearCoatTextureProp", "clearCoatRoughness", "clearCoatRoughnessTexture", "_clearCoatRoughnessTextureProp", "clearCoatNormalTexture", "_clearCoatNormalTextureProp", "PBRMaterial", "_metallicProp", "_roughnessProp", "_iorProp", "ior", "metallic", "roughness", "roughnessMetallicTexture", "_roughnessMetallicTextureProp", "PBRSpecularMaterial", "_glossinessProp", "glossiness", "specularGlossinessTexture", "_specularGlossinessTextureProp", "_specularGlossinessTextureMacro", "UnlitMaterial", "TextHorizontalAlignment", "Center", "TextVerticalAlignment", "OverflowMode", "Overflow", "Truncate", "FontStyle", "Bold", "Italic", "_sprites", "_spriteNamesToIndex", "getSprite", "getSprites", "outSprites", "_addSprite", "sprites", "SpriteDrawMode", "Simple", "Sliced", "_uvs", "_atlasRotated", "_atlasRegion", "Rect", "_atlasRegionOffset", "_region", "_pivot", "_border", "cloneSprite", "_updatePositions", "_updateUVs", "pixelsPerUnitReciprocal", "blank", "regionX", "regionH", "regionRight", "regionW", "regionBottom", "regionY", "atlasRegionX", "atlasRegionH", "offsetRight", "offsetBottom", "realWidth", "atlasRegionW", "offsetLeft", "realHeight", "offsetTop", "atlasRegionY", "borderLeft", "borderTop", "borderBottom", "borderRight", "_dispatchSpriteChange", "atlasRotated", "SpriteUpdateFlags", "automaticSize", "SlicedSpriteAssembler", "expectHeight", "fixedLeft", "expectWidth", "fixedBottom", "fixedRight", "fixedTop", "row", "column", "widthScale", "heightScale", "localTransX", "localTransY", "realICount", "rowValue", "rowU", "columnValue", "realJCount", "indexOffset", "SpriteRenderer", "_maskLayer", "_maskInteraction", "drawMode", "_drawMode", "_assembler", "_updateStencilState", "compare", "SpriteRendererUpdateFlags", "CharRenderData", "localPositions", "CharRenderDataPool", "put", "TextUtils", "textContext", "_textContext", "getContext", "measureFont", "fontString", "fontSizeInfoCache", "_fontSizeInfoCache", "_measureFontOrChar", "getNativeFontString", "fontName", "_genericFontFamilies", "measureChar", "measureTextWithWrap", "_subFont", "fontSizeInfo", "subTexts", "text", "lineWidths", "lineMaxSizes", "lineHeight", "lineSpacing", "wrapWidth", "subText", "chars", "charsWidth", "maxAscent", "maxDescent", "halfH", "ascent", "descent", "xAdvance", "overflowMode", "measureTextWithoutWrap", "lineCount", "curWidth", "getNativeFontHash", "measureString", "_measureString", "round", "measureText", "baseline", "_measureBaseline", "_heightMultiplier", "_baselineMultiplier", "fillStyle", "clearRect", "textBaseline", "fillText", "colorData", "getImageData", "integerW", "integerWReciprocal", "sizeInfo", "lineIntegerW", "TextRenderer", "_charRenderDatas", "_text", "_font", "_fontSize", "_fontStyle", "_lineSpacing", "_horizontalAlignment", "_verticalAlignment", "_enableWrapping", "_overflowMode", "charRenderDatas", "_charRenderDataPool", "enableWrapping", "_resetSubFont", "_updateLocalData", "_updatePosition", "spriteElementPool", "textElement", "charCount", "charRenderData", "e0", "e4", "e5", "e6", "e12", "e13", "e14", "topLeftY", "worldPosition0", "topLeftX", "worldPosition1", "worldPosition2", "horizontalAlignment", "verticalAlignment", "charFont", "rendererWidth", "halfRendererWidth", "rendererHeight", "textMetrics", "charRenderDataPool", "halfLineHeight", "linesLen", "startY", "topDiff", "bottomDiff", "renderDataCount", "minX", "MAX_SAFE_INTEGER", "minY", "maxX", "MIN_SAFE_INTEGER", "maxY", "lastLineIndex", "lineWidth", "startX", "lastRenderDataCount", "lastFont", "DirtyFlag", "LocalPositionBounds", "WorldBounds", "MaskInteraction", "UniversalAnimationCurveOwnerAssembler", "owner", "mounted", "_mounted", "_propertyName", "getTargetValue", "setTargetValue", "AnimationCurveOwner", "cureType", "crossCurveMark", "hasSavedDefaultValue", "baseEvaluateData", "curKeyframeIndex", "crossEvaluateData", "_cureType", "assemblerType", "getAssemblerType", "_isReferenceType", "referenceTargetValue", "evaluateAndApplyValue", "curve", "layerWeight", "additive", "_evaluateAdditive", "_additiveValue", "assembler", "originValue", "additiveValue", "_evaluate", "_applyValue", "crossFadeAndApplyValue", "srcCurve", "destCurve", "srcTime", "destTime", "crossWeight", "srcValue", "_getZeroValue", "defaultValue", "destValue", "_applyCrossValue", "crossFadeFromPoseAndApplyValue", "_subtractValue", "fixedPoseValue", "revertDefaultValue", "saveDefaultValue", "_copyValue", "saveFixedPoseValue", "targetValue", "_lerpValue", "lerpValue", "registerAssembler", "componentType", "subMap", "_assemblerMap", "PositionAnimationCurveOwnerAssembler", "RotationAnimationCurveOwnerAssembler", "ScaleAnimationCurveOwnerAssembler", "BlendShapeWeightsAnimationCurveOwnerAssembler", "_skinnedMeshRenderer", "AnimationClipCurveBinding", "_tempCurveOwner", "_createCurveOwner", "curveType", "_initializeOwner", "_getTempCurveOwner", "AnimationEvent", "_curveBindings", "addEvent", "parameter", "functionName", "clearEvents", "addCurveBinding", "relativePath", "curveBinding", "clearCurveBindings", "_sampleAnimation", "curveBindings", "curveData", "targetEntity", "curveOwner", "InterpolationType", "CubicSpine", "Step", "Hermite", "AnimationCurve", "_evaluateData", "_interpolation", "_isInterpolationType", "addKey", "evaluate", "removeKey", "newLength", "evaluateData", "interpolation", "curIndex", "nextIndex", "curFrame", "nextFrame", "curFrameTime", "duration", "_hermiteInterpolationValue", "AnimationArrayCurve", "base", "t0", "outTangent", "t1", "inTangent", "t2", "t3", "isFinite", "AnimationBoolCurve", "AnimationColorCurve", "dur", "tan0", "tan1", "AnimationFloatArrayCurve", "AnimationFloatCurve", "scource", "AnimationQuaternionCurve", "slerp", "conjugate", "_tempConjugateQuat", "AnimationVector2Curve", "AnimationVector3Curve", "_relativeBaseValue", "AnimationVector4Curve", "AnimatorCullingMode", "Complete", "AnimatorLayerBlendingMode", "Override", "AnimatorStatePlayState", "UnStarted", "Playing", "Finished", "LayerState", "Standby", "CrossFading", "FixedCrossFading", "AnimationEventHandler", "handlers", "AnimatorStateTransition", "exitTime", "WrapMode", "Once", "Loop", "AnimatorStatePlayData", "state", "stateData", "offsetFrameTime", "frameTime", "playState", "clipTime", "clipStartTime", "clip", "currentEventIndex", "isBackwards", "_getDuration", "wrapMode", "clipEndTime", "AnimatorLayerData", "animatorStateDataMap", "srcPlayData", "destPlayData", "layerState", "manuallyTransition", "switchPlayData", "switchTemp", "AnimatorStateData", "curveOwners", "eventHandlers", "Animator", "cullingMode", "speed", "_animatorLayersData", "_crossOwnerCollection", "_animationCurveOwners", "_animationEventHandlerPool", "_tempAnimatorStateInfo", "layerIndex", "_controlledRenderers", "play", "stateName", "normalizedTimeOffset", "_controllerUpdateFlag", "_reset", "stateInfo", "_getAnimatorStateInfo", "animatorLayerData", "_getAnimatorLayerData", "animatorStateData", "_getAnimatorStateData", "_preparePlay", "crossFade", "normalizedTransitionDuration", "destinationState", "_crossFadeByTransition", "animationUpdate", "controlledRenderers", "animatorController", "_animatorController", "_checkAutoPlay", "layers", "_updateLayer", "getCurrentAnimatorState", "findAnimatorState", "animationCurveOwners", "propertyOwners", "stateMachine", "findStateByName", "_saveDefaultValues", "animatorState", "_saveAnimatorStateData", "_saveAnimatorEventHandlers", "animationCureOwners", "curves", "eventHandlerPool", "scriptCount", "eventHandler", "funcName", "handler", "_clearCrossData", "_addCrossCurveData", "crossCurveData", "curCurveIndex", "nextCurveIndex", "crossSrcCurveIndex", "crossDestCurveIndex", "_prepareCrossFading", "_prepareSrcCrossData", "_prepareDestCrossData", "_prepareStandbyCrossFading", "crossOwnerCollection", "_prepareFixedPoseCrossFading", "saveFixed", "crossCurveDataIndex", "firstLayer", "aniUpdate", "blendingMode", "layerData", "crossFadeTransitionInfo", "crossFadeTransition", "_checkTransition", "_updatePlayingState", "_updateCrossFadeFromPose", "_updateCrossFade", "playData", "lastPlayState", "_fireAnimationEvents", "lastClipTime", "_callAnimatorScriptOnEnter", "_callAnimatorScriptOnExit", "_callAnimatorScriptOnUpdate", "crossCurveDataCollection", "srcCurves", "srcState", "srcStateData", "srcEventHandlers", "destState", "destStateData", "destEventHandlers", "destCurves", "lastSrcClipTime", "lastDestClipTime", "srcPlayState", "destPlayState", "_updateCrossFadeData", "srcClipTime", "destClipTime", "lastSrcPlayState", "lastDstPlayState", "fixed", "playStateData", "transitions", "transition", "crossState", "clipDuration", "_fireSubAnimationEvents", "_fireBackwardSubAnimationEvents", "curClipTime", "eventIndex", "_onStateEnterScripts", "onStateEnter", "_onStateUpdateScripts", "onStateUpdate", "_onStateExitScripts", "onStateExit", "defaultState", "_registerChangeFlag", "_layers", "_layersMap", "findLayerByName", "removeLayer", "theLayer", "clearLayers", "AnimatorControllerLayer", "StateMachineScript", "animator", "_removeStateMachineScript", "AnimatorState", "_clipStartTime", "_clipEndTime", "_transitions", "addTransition", "removeTransition", "addStateMachineScript", "scriptType", "clearTransitions", "_clip", "AnimatorStateMachine", "states", "_statesMap", "addState", "removeState", "makeUniqueStateName", "originName", "AnimatorConditionMode", "If", "IfNot", "Equals", "NotEquals", "Keyframe", "SkyBoxMaterial", "_decodeParam", "textureDecodeRGBM", "RGBMDecodeFactor", "textureCubeMap", "DirtyFlagType", "Velocity", "Acceleration", "Size", "StartAngle", "StartTime", "LifeTime", "RotateVelocity", "Scale", "ParticleRendererBlendMode", "ParticleRenderer", "props", "_maxCount", "_positionRandomness", "_velocity", "_velocityRandomness", "_acceleration", "_accelerationRandomness", "_colorRandomness", "_sizeRandomness", "_alpha", "_alphaRandomness", "_startAngle", "_startAngleRandomness", "_rotateVelocity", "_rotateVelocityRandomness", "_lifetime", "_startTimeRandomness", "_isOnce", "_onceTime", "_isInit", "_isStart", "_updateDirtyFlag", "_isRotateToVelocity", "_isUseOriginColor", "_isScaleByLifetime", "_is2d", "_isFadeIn", "_isFadeOut", "_playOnEnable", "_onColorChanged", "_createMaterial", "_updateBuffer", "isUseOriginColor", "is2d", "isFadeOut", "useUint32", "_uint16VertexLimit", "startIndex", "_vertexBuffer", "_vertexStride", "minValue", "maxValue", "_updateSingleBuffer", "getRandom", "_getRandom", "k0", "k1", "k3", "_positionArray", "pos", "random", "_updateSingleUv", "spriteSheet", "q", "ratio", "positionRandomness", "positionArray", "velocityRandomness", "acceleration", "accelerationRandomness", "colorRandomness", "sizeRandomness", "alpha", "alphaRandomness", "angleRandomness", "rotateVelocity", "rotateVelocityRandomness", "lifetime", "startTimeRandomness", "maxCount", "isOnce", "isRotateToVelocity", "isScaleByLifetime", "isFadeIn", "playOnEnable", "VERT_SHADER", "FRAG_SHADER", "TrailMaterial", "_tempVector3", "TrailRenderer", "_stroke", "stroke", "_minSeg", "minSeg", "_maxPointNum", "_points", "_pointStates", "_strapPoints", "_curPointNum", "_initGeometry", "mov", "newIdx", "appendNewPoint", "lastPoint", "_updateStrapVertices", "_updateStrapCoords", "points", "vx", "vy", "vz", "down", "dy", "perpVector", "_projectOnPlane", "acos", "_prePointsNum", "texDelta", "_projectOnVector", "n_p", "cosine", "Probe", "probeLayer", "_isCube", "onTextureChange", "renderColorTexture", "_oriCameraCullingMask", "_activeRenderTarget", "_renderTargetSwap", "_oriCameraRenderTarget", "cacheTarget", "cacheUp", "cacheDir", "CubeProbe", "oriViewMatrix", "_storeCamera", "_setCamera", "_restoreCamera", "_oriFieldOfView", "_defineProperties", "_create_class", "DRACOWorker", "workerSourceURL", "decoderWASMBinary", "_costs", "_currentLoad", "_callbacks", "_worker", "Worker", "onmessage", "e", "message", "data", "type", "id", "resolve", "geometry", "reject", "Logger", "error", "postMessage", "decoderConfig", "wasmBinary", "setCosts", "taskId", "cost", "addCurrentLoad", "setCallback", "decode", "taskConfig", "buffer", "releaseTask", "currentLoad", "LIB_PATH", "JS_FILE", "WASM_FILE", "WASM_WRAPPER_FILE", "DRACODecoder", "config", "workerLimit", "pool", "Math", "min", "navigator", "hardwareConcurrency", "currentTaskId", "taskCache", "WeakMap", "warn", "useJS", "WebAssembly", "loadLibPromise", "preloadLib", "Promise", "request", "then", "jsSource", "body", "workerString", "join", "URL", "createObjectURL", "Blob", "catch", "reason", "all", "resources", "wrapperSource", "getWorker", "worderResources", "length", "dracoWorker", "push", "sort", "a", "b", "taskKey", "JSON", "stringify", "has", "cachedTask", "get", "key", "promise", "byteLength", "Error", "taskWorker", "task", "worker", "finally", "set", "GLCompressedTextureInternalFormat", "RGBA_ASTC_4X4_KHR", "RGBA_ASTC_5X4_KHR", "RGBA_ASTC_5X5_KHR", "RGBA_ASTC_6X5_KHR", "RGBA_ASTC_6X6_KHR", "RGBA_ASTC_8X5_KHR", "RGBA_ASTC_8X6_KHR", "RGBA_ASTC_8X8_KHR", "RGBA_ASTC_10X5_KHR", "RGBA_ASTC_10X6_KHR", "RGBA_ASTC_10X8_KHR", "RGBA_ASTC_10X10_KHR", "RGBA_ASTC_12X10_KHR", "RGBA_ASTC_12X12_KHR", "SRGB8_ALPHA8_ASTC_4X4_KHR", "SRGB8_ALPHA8_ASTC_5X4_KHR", "SRGB8_ALPHA8_ASTC_5X5_KHR", "SRGB8_ALPHA8_ASTC_6X5_KHR", "SRGB8_ALPHA8_ASTC_6X6_KHR", "SRGB8_ALPHA8_ASTC_8X5_KHR", "SRGB8_ALPHA8_ASTC_8X6_KHR", "SRGB8_ALPHA8_ASTC_8X8_KHR", "SRGB8_ALPHA8_ASTC_10X5_KHR", "SRGB8_ALPHA8_ASTC_10X6_KHR", "SRGB8_ALPHA8_ASTC_10X8_KHR", "SRGB8_ALPHA8_ASTC_10X10_KHR", "SRGB8_ALPHA8_ASTC_12X10_KHR", "SRGB8_ALPHA8_ASTC_12X12_KHR", "RGB_ETC1_WEBGL", "R11_EAC", "SIGNED_R11_EAC", "RG11_EAC", "SIGNED_RG11_EAC", "RGB8_ETC2", "SRGB8_ETC2", "RGB8_PUNCHTHROUGH_ALPHA1_ETC2", "SRGB8_PUNCHTHROUGH_ALPHA1_ETC2", "RGBA8_ETC2_EAC", "SRGB8_ALPHA8_ETC2_EAC", "RGB_PVRTC_4BPPV1_IMG", "RGB_PVRTC_2BPPV1_IMG", "RGBA_PVRTC_4BPPV1_IMG", "RGBA_PVRTC_2BPPV1_IMG", "RGB_S3TC_DXT1_EXT", "RGBA_S3TC_DXT1_EXT", "RGBA_S3TC_DXT3_EXT", "RGBA_S3TC_DXT5_EXT", "_defineProperties", "_create_class", "_instanceof", "WebCanvas", "webCanvas", "_scale", "Vector2", "width", "height", "_webCanvas", "_width", "_height", "resizeByClientSize", "pixelRatio", "window", "devicePixelRatio", "OffscreenCanvas", "clientWidth", "clientHeight", "setScale", "x", "y", "set", "scale", "value", "style", "transformOrigin", "transform", "_set_prototype_of", "o", "p", "_inherits", "_extends", "GLCapability", "rhi", "_rhi", "capabilityList", "Map", "_init", "_compatibleAllInterface", "canIUse", "capabilityType", "get", "canIUseCompressedTextureInternalFormat", "internalType", "GLCapabilityType", "astc", "etc1", "etc", "pvrtc", "s3tc", "cap", "isWebGL2", "requireExtension", "bind", "shaderVertexID", "standardDerivatives", "shaderTextureLod", "elementIndexUint", "depthTexture", "vertexArrayObject", "instancedArrays", "multipleSample", "drawBuffers", "astc_webkit", "etc_webkit", "etc1_webkit", "pvrtc_webkit", "s3tc_webkit", "textureFloat", "textureHalfFloat", "textureFloatLinear", "textureHalfFloatLinear", "WEBGL_colorBufferFloat", "colorBufferFloat", "colorBufferHalfFloat", "textureFilterAnisotropic", "_compatibleInterface", "flatItem", "gl", "ext", "glKey", "extensionKey", "extensionVal", "UNSIGNED_INT_24_8", "createVertexArray", "deleteVertexArray", "isVertexArray", "bindVertexArray", "drawArraysInstanced", "drawElementsInstanced", "vertexAttribDivisor", "MAX_DRAW_BUFFERS", "items", "maxDrawBuffers", "i", "HALF_FLOAT", "RGBA16F", "RGBA32F", "TEXTURE_MAX_ANISOTROPY_EXT", "maxTextureSize", "renderStates", "getParameter", "MAX_TEXTURE_SIZE", "canUseFloatTextureBlendShape", "MAX_VERTEX_TEXTURE_IMAGE_UNITS", "canIUseMoreJoints", "_maxDrawBuffers", "maxAnisoLevel", "_maxAnisoLevel", "MAX_TEXTURE_MAX_ANISOTROPY_EXT", "maxAntiAliasing", "_maxAntiAliasing", "canMSAA", "MAX_SAMPLES", "GLExtensions", "_requireResult", "undefined", "getExtension", "GLPrimitive", "primitive", "_attribLocArray", "_vaoMap", "_primitive", "_canUseInstancedArrays", "_useVao", "_gl", "draw", "shaderProgram", "subMesh", "useVao", "_enableVAO", "_bufferStructChanged", "_clearVAO", "has", "id", "_registerVAO", "vao", "_bindBufferAndAttrib", "_indexBufferBinding", "_instanceCount", "_glIndexType", "_glIndexByteCount", "topology", "start", "count", "drawElements", "buffer", "_nativeBuffer", "bindBuffer", "ELEMENT_ARRAY_BUFFER", "drawArrays", "Logger", "error", "_disableAttrib", "destroy", "vertexBufferBindings", "_vertexBufferBindings", "length", "attributeLocation", "attributes", "_vertexElementMap", "vbo", "lastBoundVbo", "name", "loc", "element", "bindingIndex", "stride", "ARRAY_BUFFER", "enableVertexAttribArray", "elementInfo", "_glElementInfo", "vertexAttribPointer", "size", "type", "normalized", "offset", "instanceStepRate", "push", "warn", "l", "disableVertexAttribArray", "forEach", "clear", "GLRenderStates", "_parameters", "MAX_COMBINED_TEXTURE_IMAGE_UNITS", "MAX_VERTEX_UNIFORM_VECTORS", "MAX_VERTEX_ATTRIBS", "blendFuncSeparate", "ONE", "ZERO", "blendEquationSeparate", "FUNC_ADD", "colorMask", "blendColor", "disable", "SAMPLE_ALPHA_TO_COVERAGE", "enable", "DEPTH_TEST", "depthFunc", "LESS", "depthMask", "STENCIL_TEST", "stencilFuncSeparate", "FRONT", "ALWAYS", "BACK", "stencilOpSeparate", "KEEP", "stencilMask", "CULL_FACE", "cullFace", "POLYGON_OFFSET_FILL", "polygonOffset", "pname", "GLTexture", "texture", "target", "_texture", "_isWebGL2", "_target", "_glTexture", "createTexture", "deleteTexture", "_formatDetail", "setUseDepthCompareMode", "texParameteri", "TEXTURE_COMPARE_MODE", "COMPARE_REF_TO_TEXTURE", "NONE", "generateMipmaps", "_bind", "generateMipmap", "bindTexture", "isCube", "internalFormat", "baseFormat", "dataType", "mipmapCount", "_isDepthTexture", "LUMINANCE_ALPHA", "ALPHA", "texStorage2D", "texImage2D", "mipWidth", "Math", "max", "mipHeight", "faceIndex", "TEXTURE_CUBE_MAP_POSITIVE_X", "_getPixelBuffer", "face", "mipLevel", "out", "bindFramebuffer", "FRAMEBUFFER", "_getReadFrameBuffer", "framebufferTexture2D", "COLOR_ATTACHMENT0", "TEXTURE_2D", "readPixels", "_setWrapMode", "TextureWrapMode", "Clamp", "_isPowerOf2", "CLAMP_TO_EDGE", "Repeat", "REPEAT", "Mirror", "MIRRORED_REPEAT", "frameBuffer", "_readFrameBuffer", "createFramebuffer", "v", "_getFormatDetail", "format", "TextureFormat", "R8G8B8", "RGB8", "RGB", "UNSIGNED_BYTE", "isCompressed", "R8G8B8A8", "RGBA8", "RGBA", "R4G4B4A4", "RGBA4", "UNSIGNED_SHORT_4_4_4_4", "R5G5B5A1", "RGB5_A1", "UNSIGNED_SHORT_5_5_5_1", "R5G6B5", "RGB565", "UNSIGNED_SHORT_5_6_5", "Alpha8", "LuminanceAlpha", "R16G16B16A16", "R32G32B32A32", "FLOAT", "DXT1", "DXT5", "ETC1_RGB", "ETC2_RGB", "ETC2_RGBA5", "ETC2_RGBA8", "PVRTC_RGB2", "PVRTC_RGBA2", "PVRTC_RGB4", "PVRTC_RGBA4", "ASTC_4x4", "ASTC_5x5", "ASTC_6x6", "ASTC_8x8", "ASTC_10x10", "ASTC_12x12", "Depth", "DEPTH_COMPONENT32F", "DEPTH_COMPONENT", "UNSIGNED_SHORT", "attachment", "DEPTH_ATTACHMENT", "DepthStencil", "DEPTH32F_STENCIL8", "DEPTH_STENCIL", "FLOAT_32_UNSIGNED_INT_24_8_REV", "DEPTH_STENCIL_ATTACHMENT", "Depth16", "DEPTH_COMPONENT16", "Depth24Stencil8", "DEPTH24_STENCIL8", "Depth24", "DEPTH_COMPONENT24", "UNSIGNED_INT", "Depth32", "Depth32Stencil8", "Error", "_getRenderBufferDepthFormatDetail", "RenderBufferDepthFormat", "Stencil", "STENCIL_INDEX8", "STENCIL_ATTACHMENT", "_supportTextureFormat", "_supportRenderBufferColorFormat", "isSupported", "_supportRenderBufferDepthFormat", "wrapModeU", "TEXTURE_WRAP_S", "wrapModeV", "TEXTURE_WRAP_T", "filterMode", "_mipmap", "TextureFilterMode", "Point", "TEXTURE_MAG_FILTER", "NEAREST", "TEXTURE_MIN_FILTER", "NEAREST_MIPMAP_NEAREST", "Bilinear", "LINEAR", "LINEAR_MIPMAP_NEAREST", "Trilinear", "LINEAR_MIPMAP_LINEAR", "anisoLevel", "texParameterf", "depthCompareFunction", "TextureDepthCompareFunction", "Never", "TEXTURE_COMPARE_FUNC", "NEVER", "Less", "Equal", "EQUAL", "LessEqual", "LEQUAL", "Greater", "GREATER", "NotEqual", "NOTEQUAL", "GreaterEqual", "GEQUAL", "Always", "GLRenderTarget", "_MSAAColorRenderBuffers", "_curMipLevel", "_colorTextures", "_depth", "isDepthTexture", "Texture", "n", "_format", "some", "TextureCube", "capability", "antiAliasing", "_antiAliasing", "_frameBuffer", "_bindMainFBO", "_MSAAFrameBuffer", "_bindMSAAFBO", "setRenderTargetInfo", "colorTexture", "getColorTexture", "mipChanged", "_platformTexture", "platformTexture", "bindRenderbuffer", "RENDERBUFFER", "_depthRenderBuffer", "renderbufferStorage", "_activeRenderTarget", "blitRenderTarget", "mask", "COLOR_BUFFER_BIT", "DEPTH_BUFFER_BIT", "colorTextureCount", "READ_FRAMEBUFFER", "DRAW_FRAMEBUFFER", "textureIndex", "_blitDrawBuffers", "readBuffer", "blitFramebuffer", "deleteFramebuffer", "deleteRenderbuffer", "_MSAADepthRenderBuffer", "Array", "_oriDrawBuffers", "depthRenderBuffer", "createRenderbuffer", "framebufferRenderbuffer", "MSAADepthRenderBuffer", "MSAAColorRenderBuffer", "renderbufferStorageMultisample", "_checkFrameBuffer", "e", "checkFramebufferStatus", "FRAMEBUFFER_INCOMPLETE_ATTACHMENT", "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT", "FRAMEBUFFER_INCOMPLETE_DIMENSIONS", "FRAMEBUFFER_UNSUPPORTED", "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE", "GLTexture2D", "texture2D", "_compressedMipFilled", "_mipmapCount", "_getMipmapCount", "setPixelBuffer", "colorBuffer", "pixelStorei", "UNPACK_FLIP_Y_WEBGL", "UNPACK_PREMULTIPLY_ALPHA_WEBGL", "mipBit", "compressedTexSubImage2D", "compressedTexImage2D", "texSubImage2D", "setImageSource", "imageSource", "flipY", "premultiplyAlpha", "getPixelBuffer", "GLTexture2DArray", "texture2DArray", "TEXTURE_2D_ARRAY", "texStorage3D", "offsetIndex", "compressedTexSubImage3D", "texSubImage3D", "elementIndex", "formatDetail", "framebufferTextureLayer", "GLTextureCube", "textureCube", "TEXTURE_CUBE_MAP", "_compressedFaceFilled", "mipSize", "WebGLMode", "Auto", "WebGL2", "WebGL1", "WebGLRenderer", "initializeOptions", "_enableGlobalDepthBias", "_activeTextures", "_lastViewport", "Vector4", "_lastScissor", "_lastClearColor", "Color", "_scissorEnable", "options", "webGLMode", "alpha", "stencil", "_forceFlush", "_maxAllowSkinUniformVectorCount", "SystemInfo", "platform", "Platform", "IPhone", "IPad", "version", "operatingSystem", "match", "majorVersion", "parseInt", "minorVersion", "_options", "init", "canvas", "getContext", "deleteQuery", "_activeTextureID", "TEXTURE0", "_renderStates", "_extensions", "_capability", "activeTexture", "debugRenderInfo", "_renderer", "UNMASKED_RENDERER_WEBGL", "createPlatformPrimitive", "createPlatformTexture2D", "createPlatformTexture2DArray", "createPlatformTextureCube", "createPlatformRenderTarget", "viewport", "lastViewport", "z", "w", "scissor", "lastScissor", "SCISSOR_TEST", "r", "g", "b", "a", "clearRenderTarget", "engine", "clearFlags", "clearColor", "_lastRenderState", "blendState", "targetBlendState", "depthState", "stencilState", "clearFlag", "CameraClearFlags", "lc", "colorWriteMask", "ColorWriteMask", "All", "writeEnabled", "STENCIL_BUFFER_BIT", "writeMask", "drawPrimitive", "subPrimitive", "_draw", "activeRenderTarget", "renderTarget", "bufferWidth", "bufferHeight", "_platformRenderTarget", "drawingBufferWidth", "drawingBufferHeight", "textureID", "index", "setGlobalDepthBias", "bias", "slopeBias", "flush", "renderer", "WebGLEngine", "Engine", "webGLRendererOptions", "document", "getElementById", "hardwareRenderer", "_canvas", "_extends", "_set_prototype_of", "o", "p", "_inherits", "__decorate", "AnimatorControllerLoader", "Loader", "load", "item", "resourceManager", "AssetPromise", "resolve", "reject", "request", "url", "type", "then", "data", "animatorController", "AnimatorController", "layers", "promises", "forEach", "layerData", "layerIndex", "name", "blendingMode", "weight", "stateMachine", "layer", "AnimatorControllerLayer", "stateMachineData", "states", "AnimatorStateMachine", "stateData", "stateIndex", "speed", "wrapMode", "clipStartNormalizedTime", "clipEndNormalizedTime", "isDefaultState", "clipData", "clip", "state", "addState", "defaultState", "clipStartTime", "clipEndTime", "push", "Promise", "getResourceByRef", "transitions", "transitionData", "targetStateName", "duration", "offset", "exitTime", "sourceState", "findStateByName", "destState", "transition", "AnimatorStateTransition", "destinationState", "addTransition", "addLayer", "all", "catch", "resourceLoader", "AssetType", "isBase64", "test", "BufferLoader", "base64Str", "slice", "RegExp", "$1", "length", "result", "Uint8Array", "from", "atob", "c", "charCodeAt", "buffer", "Buffer", "EnvLoader", "arraybuffer", "shArray", "Float32Array", "shByteLength", "size", "Uint16Array", "texture", "TextureCube", "engine", "filterMode", "TextureFilterMode", "Trilinear", "mipmapCount", "mipLevel", "mipSize", "face", "dataSize", "setPixelBuffer", "TextureCubeFace", "PositiveX", "ambientLight", "AmbientLight", "sh", "SphericalHarmonics3", "diffuseMode", "DiffuseMode", "SphericalHarmonics", "copyFromArray", "diffuseSphericalHarmonics", "specularTexture", "specularTextureDecodeRGBM", "e", "Env", "info", "error", "FontLoader", "fontName", "fontUrl", "_registerFont", "font", "Font", "fontFace", "FontFace", "document", "fonts", "add", "ParserContext", "hasSkinned", "chainPromises", "accessorBufferCache", "texturesPromiseInfo", "PromiseInfo", "materialsPromiseInfo", "meshesPromiseInfo", "animationClipsPromiseInfo", "defaultSceneRootPromiseInfo", "masterPromiseInfo", "promiseMap", "_initPromiseInfo", "promiseInfo", "promise", "setProgress", "onCancel", "BufferInfo", "interleaved", "stride", "vertexBindingInfos", "AccessorComponentType", "BYTE", "UNSIGNED_BYTE", "SHORT", "UNSIGNED_SHORT", "UNSIGNED_INT", "FLOAT", "AccessorType", "SCALAR", "VEC2", "VEC3", "VEC4", "MAT2", "MAT3", "MAT4", "AnimationChannelTargetPath", "TRANSLATION", "ROTATION", "SCALE", "WEIGHTS", "AnimationSamplerInterpolation", "Linear", "Step", "CubicSpine", "CameraType", "PERSPECTIVE", "ORTHOGRAPHIC", "ImageMimeType", "JPEG", "PNG", "MaterialAlphaMode", "OPAQUE", "MASK", "BLEND", "TextureMagFilter", "NEAREST", "LINEAR", "TextureMinFilter", "NEAREST_MIPMAP_NEAREST", "LINEAR_MIPMAP_NEAREST", "NEAREST_MIPMAP_LINEAR", "LINEAR_MIPMAP_LINEAR", "TextureWrapMode", "CLAMP_TO_EDGE", "MIRRORED_REPEAT", "REPEAT", "GLTFUtil", "floatBufferToVector2Array", "bufferLen", "array", "Array", "i", "Vector2", "floatBufferToVector3Array", "Vector3", "floatBufferToVector4Array", "Vector4", "floatBufferToColorArray", "isColor3", "colors", "Color", "decodeText", "TextDecoder", "decode", "s", "il", "String", "fromCharCode", "decodeURIComponent", "encodeURIComponent", "getAccessorTypeSize", "accessorType", "getComponentType", "componentType", "Int8Array", "Int16Array", "Uint32Array", "getNormalizedComponentScale", "Error", "getAccessorBuffer", "context", "gltf", "accessor", "buffers", "bufferViews", "bufferView", "bufferByteOffset", "byteOffset", "TypedArray", "dataElmentSize", "dataElementBytes", "BYTES_PER_ELEMENT", "elementStride", "accessorCount", "count", "bufferStride", "byteStride", "bufferInfo", "undefined", "bufferSlice", "Math", "floor", "bufferCacheKey", "sparse", "processingSparseData", "getAccessorData", "arrayBuffer", "accessorByteOffset", "hasOwnProperty", "bufferViewByteOffset", "accessorTypeSize", "arrayType", "uint8Array", "accessorByteSize", "originalBufferView", "byteLength", "j", "typedArray", "indices", "values", "indicesBufferView", "valuesBufferView", "indicesArrayBuffer", "valuesArrayBuffer", "indicesByteOffset", "indicesByteLength", "valuesByteOffset", "valuesByteLength", "indicesType", "indicesArray", "valuesArray", "replaceIndex", "getBufferViewData", "originData", "IndexTypeArray", "getIndexFormat", "IndexFormat", "UInt8", "UInt16", "UInt32", "getElementFormat", "normalized", "VertexElementFormat", "Float", "NormalizedShort2", "Short2", "NormalizedShort4", "Short4", "NormalizedUShort2", "UShort2", "NormalizedUShort4", "UShort4", "NormalizedByte4", "Byte4", "NormalizedUByte4", "UByte4", "loadImageBuffer", "imageBuffer", "blob", "window", "Blob", "img", "Image", "onerror", "onload", "requestAnimationFrame", "onabort", "crossOrigin", "src", "URL", "createObjectURL", "isAbsoluteUrl", "parseRelativeUrl", "baseUrl", "relativeUrl", "substring", "lastIndexOf", "_formatRelativePath", "parseGLB", "glb", "UINT32_LENGTH", "GLB_HEADER_MAGIC", "GLB_HEADER_LENGTH", "GLB_CHUNK_TYPES", "JSON", "BIN", "dataView", "DataView", "header", "magic", "getUint32", "version", "console", "toString", "chunkLength", "chunkType", "glTFData", "parse", "currentOffset", "path", "split", "filter", "Boolean", "reduce", "acc", "cur", "pop", "join", "Parser", "parseEngineResource", "extensionName", "extensionSchema", "parseResource", "extra", "parsers", "_extensionParsers", "createEngineResource", "hasExtensionParser", "initialize", "_addExtensionParser", "extensionParser", "registerExtension", "parser", "ExtensionParser", "schema", "KHR_draco_mesh_compression", "_decoder", "DRACODecoder", "gltfPrimitive", "accessors", "gltfAttributeMap", "attributes", "attributeMap", "attributeTypeMap", "attributeName", "accessorDef", "indexAccessor", "indexType", "taskConfig", "attributeIDs", "attributeTypes", "useUniqueIDs", "bufferViewIndex", "parsedGeometry", "_instanceof", "KHR_lights_punctual", "entity", "color", "intensity", "range", "spot", "glTFResource", "light", "addComponent", "DirectLight", "PointLight", "SpotLight", "set", "distance", "innerConeAngle", "outerConeAngle", "PI", "angle", "penumbra", "lights", "MaterialParser", "textures", "materials", "extensions", "pbrMetallicRoughness", "normalTexture", "occlusionTexture", "emissiveTexture", "emissiveFactor", "alphaMode", "alphaCutoff", "doubleSided", "KHR_materials_unlit", "KHR_materials_pbrSpecularGlossiness", "KHR_materials_clearcoat", "KHR_materials_ior", "OASIS_materials_remap", "material", "PBRMaterial", "baseColorFactor", "baseColorTexture", "metallicFactor", "roughnessFactor", "metallicRoughnessTexture", "baseColor", "linearToGammaSpace", "baseTexture", "index", "_parseTextureTransform", "m", "metallic", "roughness", "roughnessMetallicTexture", "emissiveColor", "scale", "normalTextureIntensity", "strength", "texCoord", "occlusionTextureIntensity", "TextureCoordinate", "UV1", "occlusionTextureCoord", "Logger", "warn", "renderFace", "RenderFace", "Double", "Front", "isTransparent", "KHR_texture_transform", "clearcoatFactor", "clearcoatTexture", "clearcoatRoughnessFactor", "clearcoatRoughnessTexture", "clearcoatNormalTexture", "clearCoat", "clearCoatRoughness", "clearCoatTexture", "clearCoatRoughnessTexture", "clearCoatNormalTexture", "ior", "PBRSpecularMaterial", "diffuseFactor", "diffuseTexture", "specularFactor", "glossinessFactor", "specularGlossinessTexture", "specularColor", "glossiness", "UnlitMaterial", "KHR_materials_variants", "renderer", "variants", "mappings", "map", "variantNames", "KHR_mesh_quantization", "rotation", "tilingOffset", "z", "w", "x", "y", "GalaceanMaterialsRemap", "AnimationParser", "entities", "animations", "animationClipCount", "animationClips", "animationsIndices", "gltfAnimation", "channels", "samplers", "animationClip", "AnimationClip", "sampleDataCollection", "gltfSampler", "inputAccessor", "input", "outputAccessor", "output", "scaled", "k", "v", "outputStride", "interpolation", "samplerInterpolation", "InterpolationType", "outputSize", "gltfChannel", "target", "channelTargetEntity", "node", "relativePath", "parent", "ComponentType", "propertyName", "Transform", "SkinnedMeshRenderer", "curve", "_addCurve", "addCurveBinding", "_animationsIndices", "animationchannelTargetPath", "sampleData", "sampler", "AnimationVector3Curve", "n", "keyframe", "Keyframe", "time", "inTangent", "value", "outTangent", "addKey", "AnimationQuaternionCurve", "Quaternion", "AnimationFloatArrayCurve", "subarray", "BufferParser", "_isGLB", "uri", "EntityParser", "nodes", "gltfNode", "matrix", "translation", "Entity", "_defaultName", "transform", "localMatrix", "setPosition", "setRotationQuaternion", "setScale", "_buildEntityTree", "_createSceneRoots", "children", "childEntity", "addChild", "sceneID", "scene", "scenes", "sceneRoots", "rootEntity", "defaultSceneRoot", "MeshParser", "_loop", "gltfMesh", "primitives", "primitivePromises", "mesh", "ModelMesh", "decodedGeometry", "_parseMeshFromGLTFPrimitiveDraco", "attributeSemantic", "shapeIndex", "keepMeshData", "_parseMeshFromGLTFPrimitive", "shapeAccessorIdx", "targets", "attributeAccessorIdx", "meshes", "meshPromises", "getVertexBufferData", "getBlendShapeData", "getIndexBufferData", "mode", "vertexElements", "vertexCount", "bufferBindIndex", "positions", "boneIndices", "boneWeights", "attribute", "accessorBuffer", "dataElementSize", "vertices", "vertexElement", "meshId", "instanceId", "elementNormalized", "elementFormat", "scaleFactor", "elementOffset", "VertexElement", "vertexBuffer", "BufferBindFlag", "VertexBuffer", "BufferUsage", "Static", "setData", "setVertexBufferBinding", "bounds", "min", "max", "baseOffset", "position", "_tempVector3", "Number", "MAX_VALUE", "clonePosition", "clone", "boneIndex", "boneWeight", "setVertexElements", "indexData", "setIndices", "addSubMesh", "_createBlendShape", "uploadData", "_positions", "_boneIndices", "_boneWeights", "glTFMesh", "glTFTargets", "blendShapeNames", "extras", "targetNames", "deltaPosBuffer", "deltaNorBuffer", "deltaTanBuffer", "deltaPositions", "deltaNormals", "deltaTangents", "blendShape", "BlendShape", "addFrame", "addBlendShape", "positionBuffer", "setPositions", "bufferData", "normals", "setNormals", "texturecoords", "setUVs", "texturecoords1", "texturecoords2", "texturecoords3", "texturecoords4", "texturecoords5", "texturecoords6", "texturecoords7", "setColors", "tangents", "setTangents", "joints", "setBoneIndices", "weights", "setBoneWeights", "SceneParser", "gltfCameras", "cameras", "cameraID", "camera", "meshID", "_createCamera", "_createRenderer", "lightIndex", "_createAnimator", "cameraSchema", "orthographic", "perspective", "Camera", "xmag", "ymag", "zfar", "znear", "isOrthographic", "nearClipPlane", "farClipPlane", "orthographicSize", "aspectRatio", "yfov", "fieldOfView", "enabled", "skinID", "blendShapeWeights", "skinRenderer", "skin", "skins", "MeshRenderer", "materialIndex", "gltfMeshPrimitives", "remapMaterials", "mtl", "setMaterial", "_getDefaultMaterial", "element", "semantic", "enableVertexColor", "gltfMeshes", "animator", "Animator", "animatorStateMachine", "uniqueName", "makeUniqueStateName", "animatorState", "_defaultMaterial", "BlinnPhongMaterial", "SkinParser", "gltfSkins", "inverseBindMatrices", "skeleton", "jointCount", "Skin", "inverseBindMatrix", "Matrix", "jointIndex", "jointName", "rootBone", "_findSkeletonRootBone", "paths", "unshift", "rootNode", "TextureParser", "source", "images", "mimeType", "imageName", "ext", "startsWith", "KTX", "Texture2D", "textureName", "_parseSampler", "bufferViewData", "image", "width", "height", "setImageSource", "generateMipmaps", "magFilter", "minFilter", "wrapS", "wrapT", "Point", "Bilinear", "wrapModeU", "_wrapMap", "wrapModeV", "GLTFTextureWrapMode", "Clamp", "Mirror", "Repeat", "Validator", "asset", "extensionsUsed", "extensionsRequired", "gltfVersion", "extensionRequired", "GLTFParser", "pipes", "_pipes", "pipe", "lastPipe", "cancel", "defaultPipeline", "GLTFResource", "EngineObject", "destroy", "_destroyed", "GLTFLoader", "params", "Prefab", "HDRLoader", "_parseHeader", "dataPosition", "pixels", "_readPixels", "cubeSize", "cubeMapData", "_convertToCubemap", "faceIndex", "inputWidth", "inputHeight", "textureRight", "_createCubemapData", "_faceRight", "textureLeft", "_faceLeft", "textureUp", "_faceUp", "textureDown", "_faceBottom", "textureFront", "_faceFront", "textureBack", "_faceBack", "texSize", "faceData", "textureArray", "Uint8ClampedArray", "rotDX1", "subtract", "rotDX2", "_temp2Vector3", "dy", "fy", "xv1", "_temp3Vector3", "xv2", "_temp4Vector3", "_temp5Vector3", "normalize", "_calcProjectionSpherical", "_RGBEToLinear", "_linearToRGBM", "r", "g", "b", "a", "vDir", "theta", "atan2", "phi", "acos", "dx", "px", "round", "py", "inputY", "_readStringLine", "uint8array", "startIndex", "line", "character", "endOfHeader", "findFormat", "lineIndex", "sizeRegexp", "match", "exec", "parseInt", "scanLineWidth", "dataRGBA", "pos", "ptrEnd", "rgbeStart", "scanLineBuffer", "numScanLines", "ptr", "isEncodedRun", "byteValue", "l", "off", "pow", "maxRange", "maxRGB", "M", "ceil", "_rightBottomBack", "_rightBottomFront", "_rightUpBack", "_rightUpFront", "_leftBottomBack", "_leftBottomFront", "_leftUpBack", "_leftUpFront", "HDR", "JSONLoader", "HEADER_LEN", "COMPRESSED_2D", "getMipmaps", "ktxContainer", "loadMipmaps", "mipmaps", "dataOffset", "bytesOfKeyValueData", "pixelWidth", "pixelHeight", "numberOfMipmapLevels", "level", "imageSize", "Int32Array", "numberOfFaces", "byteArray", "isValid", "identifier", "getEngineFormat", "internalFormat", "GLCompressedTextureInternalFormat", "RGB_S3TC_DXT1_EXT", "TextureFormat", "DXT1", "RGBA_S3TC_DXT5_EXT", "DXT5", "RGB_ETC1_WEBGL", "ETC1_RGB", "RGB8_ETC2", "ETC2_RGB", "RGB8_PUNCHTHROUGH_ALPHA1_ETC2", "ETC2_RGBA5", "RGBA8_ETC2_EAC", "ETC2_RGBA8", "RGB_PVRTC_2BPPV1_IMG", "PVRTC_RGB2", "RGBA_PVRTC_2BPPV1_IMG", "PVRTC_RGBA2", "RGB_PVRTC_4BPPV1_IMG", "PVRTC_RGB4", "RGBA_PVRTC_4BPPV1_IMG", "PVRTC_RGBA4", "RGBA_ASTC_4X4_KHR", "ASTC_4x4", "RGBA_ASTC_5X5_KHR", "ASTC_5x5", "RGBA_ASTC_6X6_KHR", "ASTC_6x6", "RGBA_ASTC_8X8_KHR", "ASTC_8x8", "RGBA_ASTC_10X10_KHR", "ASTC_10x10", "RGBA_ASTC_12X12_KHR", "ASTC_12x12", "formatName", "khronosTextureContainerParser", "facesExpected", "withMipmaps", "mapEngineFormat", "headerDataView", "endianness", "littleEndian", "parsedResult", "glType", "glTypeSize", "glFormat", "glInternalFormat", "glBaseInternalFormat", "pixelDepth", "numberOfArrayElements", "loadType", "engineFormat", "parseSingleKTX", "ktx", "parseCubeKTX", "dataArray", "mipmapsFaces", "KTXCubeLoader", "urls", "parsedData", "mipmap", "miplevel", "KTXCube", "KTXLoader", "bin", "MaterialLoader", "json", "key", "shaderData", "materialShaderData", "setVector2", "setVector3", "setVector4", "setColor", "setFloat", "texturePromises", "setTexture", "shader", "macros", "renderState", "PBRBaseMaterial", "Shader", "find", "enableMacro", "Material", "_defineProperties", "_create_class", "BufferReader", "_dataView", "_littleEndian", "_offset", "nextUint8", "getUint8", "nextUint16", "getUint16", "nextUint32", "nextInt32", "getInt32", "nextInt32Array", "len", "nextFloat32", "getFloat32", "nextFloat32Array", "nextUint32Array", "nextUint8Array", "nextUint64", "left", "right", "nextStr", "strByteLength", "nextImageData", "nextImagesData", "imagesLen", "imagesData", "skip", "bytes", "scan", "maxByteLength", "term", "imageMapping", "decoderMap", "decoder", "FileHeader", "totalLength", "headerLength", "totalLen", "fileVersion", "typeLen", "typeUint8Array", "nameLen", "nameUint8Array", "dataLength", "MeshDecoder", "bufferReader", "modelMesh", "jsonDataString", "encodedMeshData", "copyFrom", "float32Array", "start", "end", "float32ArrayToVector3", "uvs", "float32ArrayToVector2", "uv1", "uv2", "uv3", "uv4", "uv5", "uv6", "uv7", "float32ArrayToVColor", "float32ArrayToVector4", "blendShapes", "blendShapeData", "frames", "frameData", "positionArray", "deltaPosition", "normalsArray", "tangentsArray", "subMeshes", "subMesh", "Texture2DDecoder", "objectId", "anisoLevel", "format", "isPixelBuffer", "mipCount", "texture2D", "pixelBuffer", "_objectPool", "completedCount", "onComplete", "Parent", "args", "Class", "ReflectionParser", "registerCustomParseComponent", "handle", "customParseComponentHandles", "parseEntity", "entityConfig", "getEntityByConfig", "isActive", "assetRefId", "refId", "isClone", "parseClassObject", "getClass", "class", "constructParams", "instance", "parsePropsAndMethods", "parseBasicType", "isArray", "_isClass", "_isRef", "methods", "methodName", "methodParams", "parseMethod", "props", "constructor", "param", "Map", "PrefabParser", "parseChildren", "entitiesConfig", "parentId", "get", "childId", "ComponentMap", "ParticleRenderer", "Script", "SpriteMask", "SpriteRenderer", "TextRenderer", "InterpolableValueType", "FloatArray", "AnimationClipDecoder", "eventsLen", "event", "AnimationEvent", "functionName", "parameter", "val", "addEvent", "curveBindingsLen", "componentStr", "property", "keysLen", "curveType", "AnimationFloatCurve", "AnimationArrayCurve", "AnimationVector2Curve", "AnimationVector4Curve", "AnimationColorCurve", "SceneParserContext", "originalData", "entityMap", "components", "assets", "entityConfigMap", "rootIds", "clear", "_engine", "_organizeEntities", "bind", "_parseComponents", "_clearAndResolveScene", "_reject", "_resolve", "_parseEntities", "entitiesMap", "id", "rootId", "rootEntities", "addRootEntity", "componentConfig", "component", "getComponent", "sceneData", "Scene", "MeshLoader", "EditorTextureLoader", "object", "Mesh", "SourceFontLoader", "SourceFont", "SpriteAtlasLoader", "_tempRect", "Rect", "_tempVec2", "_tempVec4", "_", "configPromise", "atlasData", "atlasItem", "atlasItems", "sprites", "spriteAtlas", "_addSprite", "_makeSprite", "atlasItemsLen", "SpriteAtlas", "config", "region", "atlasRegionOffset", "atlasRegion", "pivot", "border", "sprite", "Sprite", "h", "invW", "invH", "offsetRight", "offsetBottom", "offsetLeft", "offsetTop", "atlasRotated", "SpriteLoader", "belongToAtlas", "atlas", "getSprite", "fullPath", "Texture2DLoader", "_platformTexture", "indexOf", "splitPath", "TextureCubeLoader", "tex", "AnimationClipLoader", "SceneLoader", "initVirtualResources", "files", "ambient", "ambientLightPromise", "diffuseIntensity", "specularIntensity", "diffuseSolidColor", "background", "backgroundPromise", "BackgroundMode", "SolidColor", "solidColor", "Sky", "sky", "skyMaterial", "SkyBoxMaterial", "textureCubeMap", "textureDecodeRGBM", "PrimitiveMesh", "createCuboid", "Texture", "shadow", "castShadows", "shadowResolution", "shadowDistance", "shadowCascades", "fog", "fogMode", "fogStart", "fogEnd", "fogDensity", "fogColor", "createFromOS", "fontFamily", "version", "console", "log", "key", "CoreObjects", "Loader", "registerClass"]
}
