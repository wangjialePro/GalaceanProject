import { Matrix, Ray, Vector2, Vector3, Vector4 } from "@galacean/engine-math";
import { Component } from "./Component";
import { CameraClearFlags } from "./enums/CameraClearFlags";
import { Layer } from "./Layer";
import { ShaderData } from "./shader/ShaderData";
import { TextureCubeFace } from "./texture/enums/TextureCubeFace";
import { RenderTarget } from "./texture/RenderTarget";
/**
 * Camera component, as the entrance to the three-dimensional world.
 * @decorator `@dependentComponents(Transform)`
 */
export declare class Camera extends Component {
    /** Shader data. */
    readonly shaderData: ShaderData;
    /** Rendering priority - A Camera with higher priority will be rendered on top of a camera with lower priority. */
    priority: number;
    /** Whether to enable frustum culling, it is enabled by default. */
    enableFrustumCulling: boolean;
    /**
     * Determining what to clear when rendering by a Camera.
     * @defaultValue `CameraClearFlags.All`
     */
    clearFlags: CameraClearFlags;
    /**
     * Culling mask - which layers the camera renders.
     * @remarks Support bit manipulation, corresponding to `Layer`.
     */
    cullingMask: Layer;
    private _isProjMatSetting;
    private _nearClipPlane;
    private _farClipPlane;
    private _fieldOfView;
    private _orthographicSize;
    private _isProjectionDirty;
    private _isInvProjMatDirty;
    private _isFrustumProjectDirty;
    private _customAspectRatio;
    private _renderTarget;
    private _frustumViewChangeFlag;
    private _transform;
    private _isViewMatrixDirty;
    private _isInvViewProjDirty;
    private _viewport;
    private _inverseProjectionMatrix;
    private _lastAspectSize;
    private _invViewProjMat;
    /**
     * Near clip plane - the closest point to the camera when rendering occurs.
     */
    get nearClipPlane(): number;
    set nearClipPlane(value: number);
    /**
     * Far clip plane - the furthest point to the camera when rendering occurs.
     */
    get farClipPlane(): number;
    set farClipPlane(value: number);
    /**
     * The camera's view angle. activating when camera use perspective projection.
     */
    get fieldOfView(): number;
    set fieldOfView(value: number);
    /**
     * Aspect ratio. The default is automatically calculated by the viewport's aspect ratio. If it is manually set,
     * the manual value will be kept. Call resetAspectRatio() to restore it.
     */
    get aspectRatio(): number;
    set aspectRatio(value: number);
    /**
     * Viewport, normalized expression, the upper left corner is (0, 0), and the lower right corner is (1, 1).
     * @remarks Re-assignment is required after modification to ensure that the modification takes effect.
     */
    get viewport(): Vector4;
    set viewport(value: Vector4);
    /**
     * Whether it is orthogonal, the default is false. True will use orthographic projection, false will use perspective projection.
     */
    get isOrthographic(): boolean;
    set isOrthographic(value: boolean);
    /**
     * Half the size of the camera in orthographic mode.
     */
    get orthographicSize(): number;
    set orthographicSize(value: number);
    /**
     * View matrix.
     */
    get viewMatrix(): Readonly<Matrix>;
    /**
     * The projection matrix is ​​calculated by the relevant parameters of the camera by default.
     * If it is manually set, the manual value will be maintained. Call resetProjectionMatrix() to restore it.
     */
    set projectionMatrix(value: Matrix);
    get projectionMatrix(): Matrix;
    /**
     * Whether to enable HDR.
     * @todo When render pipeline modification
     */
    get enableHDR(): boolean;
    set enableHDR(value: boolean);
    /**
     * RenderTarget. After setting, it will be rendered to the renderTarget. If it is empty, it will be rendered to the main canvas.
     */
    get renderTarget(): RenderTarget | null;
    set renderTarget(value: RenderTarget | null);
    /**
     * Restore the automatic calculation of projection matrix through fieldOfView, nearClipPlane and farClipPlane.
     */
    resetProjectionMatrix(): void;
    /**
     * Restore the automatic calculation of the aspect ratio through the viewport aspect ratio.
     */
    resetAspectRatio(): void;
    /**
     * Transform a point from world space to viewport space.
     * @param point - Point in world space
     * @param out - Point in viewport space, X and Y are the camera viewport space coordinates, Z is in world space units from the plane that camera forward is normal to
     * @returns Point in viewport space
     */
    worldToViewportPoint(point: Vector3, out: Vector3): Vector3;
    /**
     * Transform a point from viewport space to world space.
     * @param point - Point in viewport space, X and Y are the camera viewport space coordinates, Z is in world space units from the plane that camera forward is normal to
     * @param out - Point in world space
     * @returns Point in world space
     */
    viewportToWorldPoint(point: Vector3, out: Vector3): Vector3;
    /**
     * Generate a ray by a point in viewport.
     * @param point - Point in viewport space, X and Y are the camera viewport space coordinates
     * @param out - Ray
     * @returns Ray
     */
    viewportPointToRay(point: Vector2, out: Ray): Ray;
    /**
     * Transform the X and Y coordinates of a point from screen space to viewport space
     * @param point - Point in screen space
     * @param out - Point in viewport space
     * @returns Point in viewport space
     */
    screenToViewportPoint<T extends Vector2 | Vector3>(point: Vector3 | Vector2, out: T): T;
    /**
     * Transform the X and Y coordinates of a point from viewport space to screen space.
     * @param point - Point in viewport space
     * @param out - Point in screen space
     * @returns Point in screen space
     */
    viewportToScreenPoint<T extends Vector2 | Vector3 | Vector4>(point: T, out: T): T;
    /**
     * Transform a point from world space to screen space.
     *
     * @remarks
     * Screen space is defined in pixels, the left-top of the screen is (0,0), the right-top is (canvasPixelWidth,canvasPixelHeight).
     *
     * @param point - Point in world space
     * @param out - The result will be stored
     * @returns X and Y are the coordinates of the point in screen space, Z is the distance from the camera in world space
     */
    worldToScreenPoint(point: Vector3, out: Vector3): Vector3;
    /**
     * Transform a point from screen space to world space.
     *
     * @param point - Screen space point, the top-left of the screen is (0,0), the right-bottom is (pixelWidth,pixelHeight), The z position is in world units from the camera
     * @param out - Point in world space
     * @returns Point in world space
     */
    screenToWorldPoint(point: Vector3, out: Vector3): Vector3;
    /**
     * Generate a ray by a point in screen.
     * @param point - Point in screen space, the top-left of the screen is (0,0), the right-bottom is (pixelWidth,pixelHeight)
     * @param out - Ray
     * @returns Ray
     */
    screenPointToRay(point: Vector2, out: Ray): Ray;
    /**
     * Manually call the rendering of the camera.
     * @param cubeFace - Cube rendering surface collection
     * @param mipLevel - Set mip level the data want to write, only take effect in webgl2.0
     */
    render(cubeFace?: TextureCubeFace, mipLevel?: number): void;
    /**
     * @override
     * @inheritdoc
     */
    _onEnable(): void;
    /**
     * @override
     * @inheritdoc
     */
    _onDisable(): void;
    /**
     * @override
     * @inheritdoc
     */
    _onDestroy(): void;
    private _projMatChange;
    private _innerViewportToWorldPoint;
    private _updateShaderData;
    /**
     * The inverse matrix of view projection matrix.
     */
    private _getInvViewProjMat;
    /**
     * The inverse of the projection matrix.
     */
    private _getInverseProjectionMatrix;
}
