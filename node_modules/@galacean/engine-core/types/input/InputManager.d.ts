import { Keys } from "./enums/Keys";
import { Pointer } from "./pointer/Pointer";
import { PointerButton } from "./enums/PointerButton";
import { Vector3 } from "@galacean/engine-math";
/**
 * InputManager manages device input such as mouse, touch, keyboard, etc.
 */
export declare class InputManager {
    /** Sometimes the input module will not be initialized, such as off-screen rendering. */
    private _initialized;
    private _curFrameCount;
    private _wheelManager;
    private _pointerManager;
    private _keyboardManager;
    /**
     * Pointer list.
     */
    get pointers(): Readonly<Pointer[]>;
    /**
     *  Whether to handle multi-pointer.
     */
    get multiPointerEnabled(): boolean;
    set multiPointerEnabled(enabled: boolean);
    /**
     * Get the change of the scroll wheel on the x-axis.
     * @returns Change value
     */
    get wheelDelta(): Readonly<Vector3 | null>;
    /**
     * Whether the key is being held down, if there is no parameter, return whether any key is being held down.
     * @param key - The keys of the keyboard
     * @returns Whether the key is being held down
     */
    isKeyHeldDown(key?: Keys): boolean;
    /**
     * Whether the key starts to be pressed down during the current frame, if there is no parameter, return whether any key starts to be pressed down during the current frame.
     * @param key - The keys of the keyboard
     * @returns Whether the key starts to be pressed down during the current frame
     */
    isKeyDown(key?: Keys): boolean;
    /**
     * Whether the key is released during the current frame, if there is no parameter, return whether any key released during the current frame.
     * @param key - The keys of the keyboard
     * @returns Whether the key is released during the current frame
     */
    isKeyUp(key?: Keys): boolean;
    /**
     * Whether the pointer is being held down, if there is no parameter, return whether any pointer is being held down.
     * @param pointerButton - The pointerButton on a pointer device
     * @returns Whether the pointer is being held down
     */
    isPointerHeldDown(pointerButton?: PointerButton): boolean;
    /**
     * Whether the pointer starts to be pressed down during the current frame, if there is no parameter, return whether any pointer starts to be pressed down during the current frame.
     * @param pointerButton - The pointerButton on a pointer device
     * @returns Whether the pointer starts to be pressed down during the current frame
     */
    isPointerDown(pointerButton?: PointerButton): boolean;
    /**
     * Whether the pointer is released during the current frame, if there is no parameter, return whether any pointer released during the current frame.
     * @param pointerButton - The pointerButtons on a mouse device
     * @returns Whether the pointer is released during the current frame
     */
    isPointerUp(pointerButton?: PointerButton): boolean;
    private _onBlur;
    private _onFocus;
}
