import { InterpolationType } from "../enums/InterpolationType";
import { IEvaluateData } from "../internal/animationCurveOwner/AnimationCurveOwner";
import { Keyframe, KeyframeValueType } from "../Keyframe";
/**
 * Store a collection of Keyframes that can be evaluated over time.
 */
export declare abstract class AnimationCurve<V extends KeyframeValueType> {
    /** All keys defined in the animation curve. */
    keys: Keyframe<V>[];
    protected _evaluateData: IEvaluateData<V>;
    protected _length: number;
    protected _interpolation: InterpolationType;
    private _type;
    /**
     * The interpolationType of the animation curve.
     */
    get interpolation(): InterpolationType;
    set interpolation(value: InterpolationType);
    /**
     * Animation curve length in seconds.
     */
    get length(): number;
    constructor();
    /**
     * Add a new key to the curve.
     * @param key - The keyframe
     */
    addKey(key: Keyframe<V>): void;
    /**
     * Evaluate the curve at time.
     * @param time - The time within the curve you want to evaluate
     */
    evaluate(time: number): V;
    /**
     * Removes a key.
     * @param index - The index of the key to remove
     */
    removeKey(index: number): void;
}
