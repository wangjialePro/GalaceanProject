import { Rect, Vector2, Vector4 } from "@galacean/engine-math";
import { RefObject } from "../../asset/RefObject";
import { Engine } from "../../Engine";
import { Texture2D } from "../../texture/Texture2D";
/**
 * 2D sprite.
 */
export declare class Sprite extends RefObject {
    /** The name of sprite. */
    name: string;
    private _automaticWidth;
    private _automaticHeight;
    private _customWidth;
    private _customHeight;
    private _positions;
    private _uvs;
    private _bounds;
    private _texture;
    private _atlasRotated;
    private _atlasRegion;
    private _atlasRegionOffset;
    private _region;
    private _pivot;
    private _border;
    private _dirtyUpdateFlag;
    /**
     * The reference to the used texture.
     */
    get texture(): Texture2D;
    set texture(value: Texture2D);
    /**
     * The width of the sprite (in world coordinates).
     *
     * @remarks
     * If width is set, return the set value,
     * otherwise return the width calculated according to `Texture.width`, `Sprite.region`, `Sprite.atlasRegion`, `Sprite.atlasRegionOffset` and `Engine._pixelsPerUnit`.
     */
    get width(): number;
    set width(value: number);
    /**
     * The height of the sprite (in world coordinates).
     *
     * @remarks
     * If height is set, return the set value,
     * otherwise return the height calculated according to `Texture.height`, `Sprite.region`, `Sprite.atlasRegion`, `Sprite.atlasRegionOffset` and `Engine._pixelsPerUnit`.
     */
    get height(): number;
    set height(value: number);
    /**
     * Is it rotated 90 degrees clockwise when packing.
     */
    get atlasRotated(): boolean;
    set atlasRotated(value: boolean);
    /**
     * The rectangle region of the original texture on its atlas texture, specified in normalized.
     */
    get atlasRegion(): Rect;
    set atlasRegion(value: Rect);
    /**
     * The rectangle region offset of the original texture on its atlas texture, specified in normalized.
     */
    get atlasRegionOffset(): Vector4;
    set atlasRegionOffset(value: Vector4);
    /**
     * The rectangle region of the sprite, specified in normalized.
     */
    get region(): Rect;
    set region(value: Rect);
    /**
     * Location of the sprite's center point in the rectangle region, specified in normalized.
     * The origin is at the bottom left and the default value is (0.5, 0.5).
     */
    get pivot(): Vector2;
    set pivot(value: Vector2);
    /**
     * Get the border of the sprite.
     *  x      y       z     w
     *  |      |       |     |
     * Left, bottom, right, top.
     * @remarks only use in sliced mode.
     */
    get border(): Vector4;
    set border(value: Vector4);
    /**
     * Constructor a Sprite.
     * @param engine - Engine to which the sprite belongs
     * @param texture - Texture from which to obtain the Sprite
     * @param region - Rectangle region of the texture to use for the Sprite, specified in normalized
     * @param pivot - Sprite's pivot point relative to its graphic rectangle, specified in normalized
     * @param border - Boundaries when using Slice DrawMode, specified in normalized
     * @param name - The name of Sprite
     */
    constructor(engine: Engine, texture?: Texture2D, region?: Rect, pivot?: Vector2, border?: Vector4, name?: string);
    /**
     * Clone.
     * @returns Cloned sprite
     */
    clone(): Sprite;
    /**
     * @override
     */
    _onDestroy(): void;
    private _calDefaultSize;
    private _updatePositions;
    private _updateUVs;
    private _dispatchSpriteChange;
}
