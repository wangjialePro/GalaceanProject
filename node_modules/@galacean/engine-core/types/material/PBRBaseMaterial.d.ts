import { Color, Vector4 } from "@galacean/engine-math";
import { Engine } from "../Engine";
import { Shader } from "../shader/Shader";
import { Texture2D } from "../texture/Texture2D";
import { BaseMaterial } from "./BaseMaterial";
import { TextureCoordinate } from "./enums/TextureCoordinate";
/**
 * PBR (Physically-Based Rendering) Material.
 */
export declare abstract class PBRBaseMaterial extends BaseMaterial {
    private static _occlusionTextureIntensityProp;
    private static _occlusionTextureCoordProp;
    private static _occlusionTextureProp;
    private static _clearCoatProp;
    private static _clearCoatTextureProp;
    private static _clearCoatRoughnessProp;
    private static _clearCoatRoughnessTextureProp;
    private static _clearCoatNormalTextureProp;
    /**
     * Base color.
     */
    get baseColor(): Color;
    set baseColor(value: Color);
    /**
     * Base texture.
     */
    get baseTexture(): Texture2D;
    set baseTexture(value: Texture2D);
    /**
     * Normal texture.
     */
    get normalTexture(): Texture2D;
    set normalTexture(value: Texture2D);
    /**
     * Normal texture intensity.
     */
    get normalTextureIntensity(): number;
    set normalTextureIntensity(value: number);
    /**
     * Emissive color.
     */
    get emissiveColor(): Color;
    set emissiveColor(value: Color);
    /**
     * Emissive texture.
     */
    get emissiveTexture(): Texture2D;
    set emissiveTexture(value: Texture2D);
    /**
     * Occlusion texture.
     */
    get occlusionTexture(): Texture2D;
    set occlusionTexture(value: Texture2D);
    /**
     * Occlusion texture intensity.
     */
    get occlusionTextureIntensity(): number;
    set occlusionTextureIntensity(value: number);
    /**
     * Occlusion texture uv coordinate.
     * @remarks Must be UV0 or UV1.
     */
    get occlusionTextureCoord(): TextureCoordinate;
    set occlusionTextureCoord(value: TextureCoordinate);
    /**
     * Tiling and offset of main textures.
     */
    get tilingOffset(): Vector4;
    set tilingOffset(value: Vector4);
    /**
     * The clearCoat layer intensity, default 0.
     */
    get clearCoat(): number;
    set clearCoat(value: number);
    /**
     * The clearCoat layer intensity texture.
     */
    get clearCoatTexture(): Texture2D;
    set clearCoatTexture(value: Texture2D);
    /**
     * The clearCoat layer roughness, default 0.
     */
    get clearCoatRoughness(): number;
    set clearCoatRoughness(value: number);
    /**
     * The clearCoat layer roughness texture.
     */
    get clearCoatRoughnessTexture(): Texture2D;
    set clearCoatRoughnessTexture(value: Texture2D);
    /**
     * The clearCoat normal map texture.
     */
    get clearCoatNormalTexture(): Texture2D;
    set clearCoatNormalTexture(value: Texture2D);
    /**
     * Create a pbr base material instance.
     * @param engine - Engine to which the material belongs
     * @param shader - Shader used by the material
     */
    protected constructor(engine: Engine, shader: Shader);
}
