import { Color } from "@galacean/engine-math";
import { Camera } from "../Camera";
import { CameraClearFlags } from "../enums/CameraClearFlags";
import { Layer } from "../Layer";
import { Material } from "../material/Material";
import { RenderTarget } from "../texture/RenderTarget";
import { RenderQueue } from "./RenderQueue";
/**
 * RenderPass.
 */
declare class RenderPass {
    name: string;
    enabled: boolean;
    priority: number;
    renderTarget: RenderTarget;
    replaceMaterial: Material;
    mask: Layer;
    renderOverride: boolean;
    clearFlags: CameraClearFlags | undefined;
    clearColor: Color | undefined;
    /**
     * Create a RenderPass.
     * @param name - Pass name
     * @param priority - Priority, less than 0 before the default pass, greater than 0 after the default pass
     * @param renderTarget - The specified Render Target
     * @param replaceMaterial -  Replaced material
     * @param mask - Perform bit and operations with Entity.Layer to filter the objects that this Pass needs to render
     */
    constructor(name?: string, priority?: number, renderTarget?: any, replaceMaterial?: any, mask?: any);
    /**
     * Rendering callback, will be executed if renderOverride is set to true.
     * @param camera - Camera
     * @param opaqueQueue - Opaque queue
     * @param alphaTestQueue - Alpha test queue
     * @param transparentQueue - Transparent queue
     */
    render(camera: Camera, opaqueQueue: RenderQueue, alphaTestQueue: RenderQueue, transparentQueue: RenderQueue): void;
    /**
     * Post rendering callback.
     * @param camera - Camera
     * @param opaqueQueue - Opaque queue
     * @param alphaTestQueue - Alpha test queue
     * @param transparentQueue - Transparent queue
     */
    preRender(camera: Camera, opaqueQueue: RenderQueue, alphaTestQueue: RenderQueue, transparentQueue: RenderQueue): void;
    /**
     * Post rendering callback.
     * @param camera - Camera
     * @param opaqueQueue - Opaque queue
     * @param alphaTestQueue - Alpha test queue
     * @param transparentQueue - Transparent queue
     */
    postRender(camera: Camera, opaqueQueue: RenderQueue, alphaTestQueue: RenderQueue, transparentQueue: RenderQueue): void;
}
export { RenderPass };
