import { IJoint } from "@galacean/engine-design";
import { Vector3 } from "@galacean/engine-math";
import { Component } from "../../Component";
import { Collider } from "../Collider";
import { Entity } from "../../Entity";
/**
 * A base class providing common functionality for joints.
 * @decorator `@dependentComponents(Collider)`
 */
export declare class Joint extends Component {
    protected _connectedCollider: JointCollider;
    protected _collider: JointCollider;
    protected _nativeJoint: IJoint;
    private _force;
    private _torque;
    /**
     * The connected collider.
     */
    get connectedCollider(): Collider;
    set connectedCollider(value: Collider);
    /**
     * The connected anchor position.
     * @remarks If connectedCollider is set, this anchor is relative offset, or the anchor is world position.
     */
    get connectedAnchor(): Vector3;
    set connectedAnchor(value: Vector3);
    /**
     *  The scale to apply to the inverse mass of collider 0 for resolving this constraint.
     */
    get connectedMassScale(): number;
    set connectedMassScale(value: number);
    /**
     * The scale to apply to the inverse inertia of collider0 for resolving this constraint.
     */
    get connectedInertiaScale(): number;
    set connectedInertiaScale(value: number);
    /**
     * The scale to apply to the inverse mass of collider 1 for resolving this constraint.
     */
    get massScale(): number;
    set massScale(value: number);
    /**
     * The scale to apply to the inverse inertia of collider1 for resolving this constraint.
     */
    get inertiaScale(): number;
    set inertiaScale(value: number);
    /**
     * The maximum force the joint can apply before breaking.
     */
    get breakForce(): number;
    set breakForce(value: number);
    /**
     * The maximum torque the joint can apply before breaking.
     */
    get breakTorque(): number;
    set breakTorque(value: number);
    constructor(entity: Entity);
}
