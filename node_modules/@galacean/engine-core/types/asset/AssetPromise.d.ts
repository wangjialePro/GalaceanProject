/**
 * Asset Loading Promise.
 */
export declare class AssetPromise<T> implements PromiseLike<T> {
    /**
     * Return a new resource Promise through the provided asset promise collection.
     * The resolved of the new AssetPromise will be triggered when all the Promises in the provided set are completed.
     * @param - Promise Collection
     * @returns AssetPromise
     */
    static all<T = any>(promises: (PromiseLike<T> | T)[]): AssetPromise<T[]>;
    /** compatible with Promise */
    get [Symbol.toStringTag](): string;
    private _promise;
    private _state;
    private _onProgressCallback;
    private _onCancelHandler;
    private _reject;
    /**
     * Create an asset loading Promise.
     * @param executor - A callback used to initialize the promise. This callback is passed two arguments:
     * a resolve callback used to resolve the promise with a value or the result of another promise,
     * and a reject callback used to reject the promise with a provided reason or error.
     * and a setProgress callback used to set promise progress with a percent.
     */
    constructor(executor: AssetPromiseExecutor<T>);
    /**
     * Progress callback.
     * @param callback
     * @returns AssetPromise
     */
    onProgress(callback: (progress: number) => void): AssetPromise<T>;
    then<TResult1 = T, TResult2 = never>(onfulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): AssetPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onRejected - The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch(onRejected: (reason: any) => any): AssetPromise<T>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onFinally?: () => void): Promise<T>;
    /**
     * Cancel promise request.
     * @returns Asset promise
     */
    cancel(): AssetPromise<T>;
}
interface AssetPromiseExecutor<T> {
    (resolve: (value?: T | PromiseLike<T>) => void, reject?: (reason?: any) => void, setProgress?: (progress: number) => void, onCancel?: (callback: () => void) => void): void;
}
export {};
