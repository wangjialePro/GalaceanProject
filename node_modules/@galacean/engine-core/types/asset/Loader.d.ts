import { AssetPromise } from "./AssetPromise";
import { LoadItem } from "./LoadItem";
import { RequestConfig } from "./request";
import { ResourceManager } from "./ResourceManager";
/**
 * Loader abstract class.
 */
export declare abstract class Loader<T> {
    readonly useCache: boolean;
    /**
     * Register a class with a string name for serialization and deserialization.
     * @param key - class name
     * @param obj - class object
     */
    static registerClass(className: string, classDefine: {
        new (...args: any): any;
    }): void;
    /**
     * Get the class object by class name.
     * @param key - class name
     * @returns class object
     */
    static getClass(className: string): {
        new (...args: any): any;
    };
    private static _engineObjects;
    constructor(useCache: boolean);
    request: <U>(url: string, config: RequestConfig) => AssetPromise<U>;
    abstract load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<T> | Record<string, AssetPromise<any>>;
}
