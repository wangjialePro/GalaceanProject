{"version":3,"file":"module.js","sources":["../src/enums/ControlHandlerType.ts","../src/inputDevice/StaticInterfaceImplement.ts","../src/inputDevice/ControlFreeKeyboard.ts","../src/inputDevice/ControlFreePointer.ts","../src/Spherical.ts","../src/FreeControl.ts","../src/inputDevice/ControlKeyboard.ts","../src/inputDevice/ControlPointer.ts","../src/inputDevice/ControlWheel.ts","../src/OrbitControl.ts","../src/OrthoControl.ts"],"sourcesContent":["export enum ControlHandlerType {\n  None = 0,\n  ROTATE = 1,\n  ZOOM = 2,\n  PAN = 4,\n  All = 7\n}\n","/**\n *  Static interface implement decorator.\n *  https://stackoverflow.com/questions/13955157/how-to-define-static-property-in-typescript-interface\n */\n export function StaticInterfaceImplement<T>() {\n    return <U extends T>(constructor: U) => {\n      constructor;\n    };\n  }\n  ","import { InputManager, Keys, Vector3 } from \"@galacean/engine\";\nimport { ControlHandlerType } from \"../enums/ControlHandlerType\";\nimport { FreeControl } from \"../FreeControl\";\nimport { IControlInput } from \"./IControlInput\";\nimport { StaticInterfaceImplement } from \"./StaticInterfaceImplement\";\n\n@StaticInterfaceImplement<IControlInput>()\nexport class ControlFreeKeyboard {\n  static onUpdateHandler(input: InputManager): ControlHandlerType {\n    if (\n      input.isKeyHeldDown(Keys.ArrowLeft) ||\n      input.isKeyHeldDown(Keys.KeyA) ||\n      input.isKeyHeldDown(Keys.ArrowUp) ||\n      input.isKeyHeldDown(Keys.KeyW) ||\n      input.isKeyHeldDown(Keys.ArrowDown) ||\n      input.isKeyHeldDown(Keys.KeyS) ||\n      input.isKeyHeldDown(Keys.ArrowRight) ||\n      input.isKeyHeldDown(Keys.KeyD)\n    ) {\n      return ControlHandlerType.PAN;\n    } else {\n      return ControlHandlerType.None;\n    }\n  }\n\n  static onUpdateDelta(control: FreeControl, outDelta: Vector3): void {\n    const { movementSpeed, input } = control;\n    outDelta.x = outDelta.y = outDelta.z = 0;\n    if (input.isKeyHeldDown(Keys.ArrowLeft) || input.isKeyHeldDown(Keys.KeyA)) {\n      outDelta.x -= movementSpeed;\n    }\n    if (input.isKeyHeldDown(Keys.ArrowRight) || input.isKeyHeldDown(Keys.KeyD)) {\n      outDelta.x += movementSpeed;\n    }\n    if (input.isKeyHeldDown(Keys.ArrowUp) || input.isKeyHeldDown(Keys.KeyW)) {\n      outDelta.z -= movementSpeed;\n    }\n    if (input.isKeyHeldDown(Keys.ArrowDown) || input.isKeyHeldDown(Keys.KeyS)) {\n      outDelta.z += movementSpeed;\n    }\n  }\n}\n","import { InputManager, PointerButton, Vector3 } from \"@galacean/engine\";\nimport { ControlHandlerType } from \"../enums/ControlHandlerType\";\nimport { OrbitControl } from \"../OrbitControl\";\nimport { IControlInput } from \"./IControlInput\";\nimport { StaticInterfaceImplement } from \"./StaticInterfaceImplement\";\n\nenum DeltaType {\n  Moving,\n  Distance,\n  None\n}\n@StaticInterfaceImplement<IControlInput>()\nexport class ControlFreePointer {\n  private static _deltaType: DeltaType = DeltaType.Moving;\n  private static _handlerType: ControlHandlerType = ControlHandlerType.None;\n  private static _frameIndex: number = 0;\n  private static _lastUsefulFrameIndex: number = -1;\n  static onUpdateHandler(input: InputManager): ControlHandlerType {\n    ++this._frameIndex;\n    if (input.pointers.length === 1) {\n      if (input.isPointerHeldDown(PointerButton.Primary)) {\n        this._updateType(ControlHandlerType.ROTATE, DeltaType.Moving);\n      } else {\n        const { deltaPosition } = input.pointers[0];\n        if ((deltaPosition.x !== 0 || deltaPosition.y !== 0) && input.isPointerUp(PointerButton.Primary)) {\n          this._updateType(ControlHandlerType.ROTATE, DeltaType.Moving);\n        } else {\n          this._updateType(ControlHandlerType.None, DeltaType.None);\n        }\n      }\n    } else {\n      this._updateType(ControlHandlerType.None, DeltaType.None);\n    }\n    return this._handlerType;\n  }\n\n  static onUpdateDelta(control: OrbitControl, outDelta: Vector3): void {\n    const { _frameIndex: frameIndex } = this;\n    switch (this._deltaType) {\n      case DeltaType.Moving:\n        if (this._lastUsefulFrameIndex === frameIndex - 1) {\n          const { deltaPosition } = control.input.pointers[0];\n          outDelta.x = deltaPosition.x;\n          outDelta.y = deltaPosition.y;\n        } else {\n          outDelta.x = 0;\n          outDelta.y = 0;\n        }\n        break;\n      default:\n        break;\n    }\n    this._lastUsefulFrameIndex = frameIndex;\n  }\n\n  private static _updateType(handlerType: ControlHandlerType, deltaType: DeltaType) {\n    if (this._handlerType !== handlerType || this._deltaType !== deltaType) {\n      this._handlerType = handlerType;\n      this._deltaType = deltaType;\n      this._lastUsefulFrameIndex = -1;\n    }\n  }\n}\n","import { MathUtil, Matrix, Vector3 } from \"@galacean/engine\";\n// Prevent gimbal lock.\nconst ESP = MathUtil.zeroTolerance;\n// Spherical.\nexport class Spherical {\n  private static _xAxis: Vector3 = new Vector3();\n  private static _yAxis: Vector3 = new Vector3();\n  private static _zAxis: Vector3 = new Vector3();\n  private _matrix: Matrix = new Matrix();\n  private _matrixInv: Matrix = new Matrix();\n  constructor(public radius?: number, public phi?: number, public theta?: number) {\n    this.radius = radius !== undefined ? radius : 1.0;\n    this.phi = phi !== undefined ? phi : 0;\n    this.theta = theta !== undefined ? theta : 0;\n  }\n\n  makeSafe(): Spherical {\n    const count = Math.floor(this.phi / Math.PI);\n    this.phi = MathUtil.clamp(this.phi, count * Math.PI + ESP, (count + 1) * Math.PI - ESP);\n    return this;\n  }\n\n  set(radius: number, phi: number, theta: number): Spherical {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this;\n  }\n\n  setYAxis(up: Vector3): void {\n    const { _xAxis: xAxis, _yAxis: yAxis, _zAxis: zAxis } = Spherical;\n    if (Vector3.equals(xAxis.set(1, 0, 0), yAxis.copyFrom(up).normalize())) {\n      xAxis.set(0, 1, 0);\n    }\n    Vector3.cross(xAxis, yAxis, zAxis);\n    zAxis.normalize();\n    Vector3.cross(yAxis, zAxis, xAxis);\n    const { elements: es } = this._matrix;\n    (es[0] = xAxis.x), (es[1] = xAxis.y), (es[2] = xAxis.z);\n    (es[4] = yAxis.x), (es[5] = yAxis.y), (es[6] = yAxis.z);\n    (es[8] = zAxis.x), (es[9] = zAxis.y), (es[10] = zAxis.z);\n\n    const { elements: eInv } = this._matrixInv;\n    (eInv[0] = xAxis.x), (eInv[4] = xAxis.y), (eInv[8] = xAxis.z);\n    (eInv[1] = yAxis.x), (eInv[5] = yAxis.y), (eInv[9] = yAxis.z);\n    (eInv[2] = zAxis.x), (eInv[6] = zAxis.y), (eInv[10] = zAxis.z);\n  }\n\n  setFromVec3(value: Vector3, atTheBack: boolean = false): Spherical {\n    value.transformNormal(this._matrixInv);\n    this.radius = value.length();\n    if (this.radius === 0) {\n      this.theta = 0;\n      this.phi = 0;\n    } else {\n      if (atTheBack) {\n        this.phi = 2 * Math.PI - Math.acos(MathUtil.clamp(value.y / this.radius, -1, 1));\n        this.theta = Math.atan2(-value.x, -value.z);\n      } else {\n        this.phi = Math.acos(MathUtil.clamp(value.y / this.radius, -1, 1));\n        this.theta = Math.atan2(value.x, value.z);\n      }\n    }\n    return this;\n  }\n\n  setToVec3(value: Vector3): boolean {\n    const { radius, phi, theta } = this;\n    const sinPhiRadius = Math.sin(phi) * radius;\n    this.phi -= Math.floor(this.phi / Math.PI / 2) * Math.PI * 2;\n    value.set(sinPhiRadius * Math.sin(theta), radius * Math.cos(phi), sinPhiRadius * Math.cos(theta));\n    value.transformNormal(this._matrix);\n    return this.phi > Math.PI;\n  }\n}\n","import { Entity, InputManager, MathUtil, Script, Transform, Vector3 } from \"@galacean/engine\";\nimport { ControlHandlerType } from \"./enums/ControlHandlerType\";\nimport { ControlFreeKeyboard } from \"./inputDevice/ControlFreeKeyboard\";\nimport { ControlFreePointer } from \"./inputDevice/ControlFreePointer\";\nimport { IControlInput } from \"./inputDevice/IControlInput\";\nimport { Spherical } from \"./Spherical\";\n\n/**\n * The camera's roaming controller, can move up and down, left and right, and rotate the viewing angle.\n */\nexport class FreeControl extends Script {\n  input: InputManager;\n  inputDevices: IControlInput[] = [ControlFreeKeyboard, ControlFreePointer];\n\n  /** Movement distance per second, the unit is the unit before MVP conversion. */\n  movementSpeed: number = 1.0;\n  /** Rotate speed. */\n  rotateSpeed: number = 1.0;\n  /** Simulate a ground. */\n  floorMock: boolean = true;\n  /** Simulated ground height. */\n  floorY: number = 0;\n\n  private _cameraTransform: Transform;\n  private _spherical: Spherical = new Spherical();\n  private _tempVec: Vector3 = new Vector3();\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.input = this.engine.inputManager;\n    const transform = (this._cameraTransform = entity.transform);\n    /** Init spherical. */\n    const { _tempVec: tempVec, _spherical: spherical } = this;\n    Vector3.transformByQuat(tempVec.set(0, 0, -1), transform.rotationQuaternion, tempVec);\n    spherical.setFromVec3(tempVec);\n  }\n\n  onUpdate(deltaTime: number): void {\n    if (this.enabled === false) return;\n    let curHandlerType = ControlHandlerType.None;\n    const { _tempVec: delta } = this;\n    const { inputDevices, input } = this;\n    for (let i = inputDevices.length - 1; i >= 0; i--) {\n      const handler = inputDevices[i];\n      const handlerType = handler.onUpdateHandler(input);\n      if (handlerType) {\n        curHandlerType |= handlerType;\n        handler.onUpdateDelta(this, delta);\n        switch (handlerType) {\n          case ControlHandlerType.ROTATE:\n            this._rotate(delta);\n            break;\n          case ControlHandlerType.PAN:\n            this._pan(delta, deltaTime);\n            break;\n          default:\n            break;\n        }\n      }\n    }\n    if (this.floorMock) {\n      const position = this._cameraTransform.position;\n      if (position.y !== this.floorY) {\n        this._cameraTransform.setPosition(position.x, this.floorY, position.z);\n      }\n    }\n  }\n\n  private _pan(moveDelta: Vector3, delta: number): void {\n    const actualMoveSpeed = (delta / 1000) * this.movementSpeed;\n    moveDelta.normalize().scale(actualMoveSpeed);\n    this._cameraTransform.translate(moveDelta, true);\n  }\n\n  private _rotate(moveDelta: Vector3): void {\n    if (moveDelta.x !== 0 || moveDelta.y !== 0) {\n      const canvas = this.engine.canvas;\n      const deltaAlpha = (-moveDelta.x * 180) / canvas.width;\n      const deltaPhi = (moveDelta.y * 180) / canvas.height;\n      this._spherical.theta += MathUtil.degreeToRadian(deltaAlpha);\n      this._spherical.phi += MathUtil.degreeToRadian(deltaPhi);\n      this._spherical.makeSafe();\n      this._spherical.setToVec3(this._tempVec);\n      Vector3.add(this._cameraTransform.position, this._tempVec, this._tempVec);\n      this._cameraTransform.lookAt(this._tempVec, new Vector3(0, 1, 0));\n    }\n  }\n}\n","import { InputManager, Keys, Vector3 } from \"@galacean/engine\";\nimport { ControlHandlerType } from \"../enums/ControlHandlerType\";\nimport { OrbitControl } from \"../OrbitControl\";\nimport { IControlInput } from \"./IControlInput\";\nimport { StaticInterfaceImplement } from \"./StaticInterfaceImplement\";\n\n@StaticInterfaceImplement<IControlInput>()\nexport class ControlKeyboard {\n  static onUpdateHandler(input: InputManager): ControlHandlerType {\n    if (\n      input.isKeyHeldDown(Keys.ArrowLeft) ||\n      input.isKeyHeldDown(Keys.ArrowRight) ||\n      input.isKeyHeldDown(Keys.ArrowUp) ||\n      input.isKeyHeldDown(Keys.ArrowDown)\n    ) {\n      return ControlHandlerType.PAN;\n    } else {\n      return ControlHandlerType.None;\n    }\n  }\n\n  static onUpdateDelta(control: OrbitControl, outDelta: Vector3): void {\n    const { keyPanSpeed, input } = control;\n    outDelta.x = outDelta.y = 0;\n    if (input.isKeyHeldDown(Keys.ArrowLeft)) {\n      outDelta.x += keyPanSpeed;\n    }\n    if (input.isKeyHeldDown(Keys.ArrowRight)) {\n      outDelta.x -= keyPanSpeed;\n    }\n    if (input.isKeyHeldDown(Keys.ArrowUp)) {\n      outDelta.y += keyPanSpeed;\n    }\n    if (input.isKeyHeldDown(Keys.ArrowDown)) {\n      outDelta.y -= keyPanSpeed;\n    }\n  }\n}\n","import { InputManager, PointerButton, Vector3, Vector2 } from \"@galacean/engine\";\nimport { ControlHandlerType } from \"../enums/ControlHandlerType\";\nimport { OrbitControl } from \"../OrbitControl\";\nimport { IControlInput } from \"./IControlInput\";\nimport { StaticInterfaceImplement } from \"./StaticInterfaceImplement\";\n\nenum DeltaType {\n  Moving,\n  Distance,\n  None\n}\n@StaticInterfaceImplement<IControlInput>()\nexport class ControlPointer {\n  private static _deltaType: DeltaType = DeltaType.None;\n  private static _handlerType: ControlHandlerType = ControlHandlerType.None;\n  private static _frameIndex: number = 0;\n  private static _lastUsefulFrameIndex: number = -1;\n  private static _distanceOfPointers: number = 0;\n  static onUpdateHandler(input: InputManager): ControlHandlerType {\n    ++this._frameIndex;\n    const { pointers } = input;\n    switch (pointers.length) {\n      case 1:\n        if (input.isPointerHeldDown(PointerButton.Secondary)) {\n          this._updateType(ControlHandlerType.PAN, DeltaType.Moving);\n        } else if (input.isPointerHeldDown(PointerButton.Auxiliary)) {\n          this._updateType(ControlHandlerType.ZOOM, DeltaType.Moving);\n        } else if (input.isPointerHeldDown(PointerButton.Primary)) {\n          this._updateType(ControlHandlerType.ROTATE, DeltaType.Moving);\n        } else {\n          // When `onPointerMove` happens on the same frame as `onPointerUp`\n          // Need to record the movement of this frame\n          const { deltaPosition } = input.pointers[0];\n          if (deltaPosition.x !== 0 && deltaPosition.y !== 0) {\n            if (input.isPointerUp(PointerButton.Secondary)) {\n              this._updateType(ControlHandlerType.PAN, DeltaType.Moving);\n            } else if (input.isPointerUp(PointerButton.Auxiliary)) {\n              this._updateType(ControlHandlerType.ZOOM, DeltaType.Moving);\n            } else if (input.isPointerUp(PointerButton.Primary)) {\n              this._updateType(ControlHandlerType.ROTATE, DeltaType.Moving);\n            } else {\n              this._updateType(ControlHandlerType.None, DeltaType.None);\n            }\n          } else {\n            this._updateType(ControlHandlerType.None, DeltaType.None);\n          }\n        }\n        break;\n      case 2:\n        this._updateType(ControlHandlerType.ZOOM, DeltaType.Distance);\n        break;\n      case 3:\n        this._updateType(ControlHandlerType.PAN, DeltaType.Moving);\n        break;\n      default:\n        this._updateType(ControlHandlerType.None, DeltaType.None);\n        break;\n    }\n    return this._handlerType;\n  }\n\n  static onUpdateDelta(control: OrbitControl, outDelta: Vector3): void {\n    const { _frameIndex: frameIndex } = this;\n    switch (this._deltaType) {\n      case DeltaType.Moving:\n        outDelta.x = 0;\n        outDelta.y = 0;\n        if (this._lastUsefulFrameIndex === frameIndex - 1) {\n          const { pointers } = control.input;\n          const length = pointers.length;\n          for (let i = length - 1; i >= 0; i--) {\n            const { deltaPosition } = pointers[i];\n            outDelta.x += deltaPosition.x;\n            outDelta.y += deltaPosition.y;\n          }\n          outDelta.x /= length;\n          outDelta.y /= length;\n        }\n        break;\n      case DeltaType.Distance:\n        const { pointers } = control.input;\n        const pointer1 = pointers[0];\n        const pointer2 = pointers[1];\n        const curDistance = Vector2.distance(pointer1.position, pointer2.position);\n        if (this._lastUsefulFrameIndex === frameIndex - 1) {\n          outDelta.set(0, this._distanceOfPointers - curDistance, 0);\n        } else {\n          outDelta.set(0, 0, 0);\n        }\n        this._distanceOfPointers = curDistance;\n        break;\n      default:\n        break;\n    }\n    this._lastUsefulFrameIndex = frameIndex;\n  }\n\n  private static _updateType(handlerType: ControlHandlerType, deltaType: DeltaType) {\n    if (this._handlerType !== handlerType || this._deltaType !== deltaType) {\n      this._handlerType = handlerType;\n      this._deltaType = deltaType;\n      this._lastUsefulFrameIndex = -1;\n    }\n  }\n}\n","import { InputManager, Vector3 } from \"@galacean/engine\";\nimport { ControlHandlerType } from \"../enums/ControlHandlerType\";\nimport { OrbitControl } from \"../OrbitControl\";\nimport { IControlInput } from \"./IControlInput\";\nimport { StaticInterfaceImplement } from \"./StaticInterfaceImplement\";\n\n@StaticInterfaceImplement<IControlInput>()\nexport class ControlWheel {\n  static onUpdateHandler(input: InputManager): ControlHandlerType {\n    const { wheelDelta } = input;\n    if (wheelDelta.x === 0 && wheelDelta.y === 0 && wheelDelta.z === 0) {\n      return ControlHandlerType.None;\n    } else {\n      return ControlHandlerType.ZOOM;\n    }\n  }\n\n  static onUpdateDelta(control: OrbitControl, outDelta: Vector3): void {\n    outDelta.copyFrom(control.input.wheelDelta);\n  }\n}\n","import { Camera, Canvas, InputManager, Script, Transform, Vector3 } from \"@galacean/engine\";\nimport { ControlHandlerType } from \"./enums/ControlHandlerType\";\nimport { IControlInput } from \"./inputDevice/IControlInput\";\nimport { ControlKeyboard } from \"./inputDevice/ControlKeyboard\";\nimport { ControlPointer } from \"./inputDevice/ControlPointer\";\nimport { ControlWheel } from \"./inputDevice/ControlWheel\";\nimport { Spherical } from \"./Spherical\";\n\n/**\n * The camera's track controller, can rotate, zoom, pan, support mouse and touch events.\n */\nexport class OrbitControl extends Script {\n  canvas: Canvas;\n  input: InputManager;\n  inputDevices: IControlInput[] = [ControlKeyboard, ControlPointer, ControlWheel];\n  camera: Camera;\n  cameraTransform: Transform;\n\n  /** Whether to automatically rotate the camera, the default is false. */\n  autoRotate: boolean = false;\n  /** The radian of automatic rotation per second. */\n  autoRotateSpeed: number = Math.PI;\n  /** Whether to enable camera damping, the default is true. */\n  enableDamping: boolean = true;\n  /** Rotation speed, default is 1.0 . */\n  rotateSpeed: number = 1.0;\n  /** Camera zoom speed, the default is 1.0. */\n  zoomSpeed: number = 1.0;\n  /** Keyboard translation speed, the default is 7.0 . */\n  keyPanSpeed: number = 7.0;\n  /** Rotation damping parameter, default is 0.1 . */\n  dampingFactor: number = 0.1;\n  /** Zoom damping parameter, default is 0.2 . */\n  zoomFactor: number = 0.2;\n  /**  The minimum distance, the default is 0.1, should be greater than 0. */\n  minDistance: number = 0.1;\n  /** The maximum distance, the default is infinite, should be greater than the minimum distance. */\n  maxDistance: number = Infinity;\n  /** Minimum zoom speed, the default is 0.0. */\n  minZoom: number = 0.0;\n  /** Maximum zoom speed, the default is positive infinity. */\n  maxZoom: number = Infinity;\n  /** The minimum radian in the vertical direction, the default is 1 degree. */\n  minPolarAngle: number = 1;\n  /** The maximum radian in the vertical direction,  the default is 179 degree.  */\n  maxPolarAngle: number = (179 / 180) * Math.PI;\n  /** The minimum radian in the horizontal direction, the default is negative infinity. */\n  minAzimuthAngle: number = -Infinity;\n  /** The maximum radian in the horizontal direction, the default is positive infinity.  */\n  maxAzimuthAngle: number = Infinity;\n\n  private _enableKeys: boolean = true;\n  private _up: Vector3 = new Vector3(0, 1, 0);\n  private _target: Vector3 = new Vector3();\n  private _atTheBack: boolean = false;\n  private _spherical: Spherical = new Spherical();\n  private _sphericalDelta: Spherical = new Spherical();\n  private _sphericalDump: Spherical = new Spherical();\n  private _zoomFrag: number = 0;\n  private _scale: number = 1;\n  private _panOffset: Vector3 = new Vector3();\n  private _tempVec3: Vector3 = new Vector3();\n  private _enableHandler: number = ControlHandlerType.All;\n\n  /**\n   * Return whether to enable keyboard.\n   */\n  get enableKeys(): boolean {\n    return this._enableKeys;\n  }\n\n  set enableKeys(value: boolean) {\n    if (this._enableKeys !== value) {\n      this._enableKeys = value;\n      const { inputDevices } = this;\n      if (value) {\n        inputDevices.push(ControlKeyboard);\n      } else {\n        for (let i = inputDevices.length - 1; i >= 0; i--) {\n          if (inputDevices[i] === ControlKeyboard) {\n            inputDevices.splice(i, 1);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  /*\n   * Return up vector.\n   */\n  get up(): Vector3 {\n    return this._up;\n  }\n\n  set up(value: Vector3) {\n    this._up.copyFrom(value);\n    this._spherical.setYAxis(value);\n    this._atTheBack = false;\n  }\n\n  /**\n   * Return target position.\n   * */\n  get target(): Vector3 {\n    return this._target;\n  }\n\n  set target(value: Vector3) {\n    this._target.copyFrom(value);\n    this._atTheBack = false;\n  }\n\n  /**\n   *  Return Whether to enable rotation, the default is true.\n   */\n  get enableRotate(): boolean {\n    return (this._enableHandler & ControlHandlerType.ROTATE) !== 0;\n  }\n\n  set enableRotate(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.ROTATE;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.ROTATE;\n    }\n  }\n\n  /**\n   *  Whether to enable camera damping, the default is true.\n   */\n  get enableZoom(): boolean {\n    return (this._enableHandler & ControlHandlerType.ZOOM) !== 0;\n  }\n\n  set enableZoom(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.ZOOM;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.ZOOM;\n    }\n  }\n\n  /**\n   *  Whether to enable translation, the default is true.\n   */\n  get enablePan(): boolean {\n    return (this._enableHandler & ControlHandlerType.PAN) !== 0;\n  }\n\n  set enablePan(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.PAN;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.PAN;\n    }\n  }\n\n  onAwake(): void {\n    const { engine, entity } = this;\n    this.canvas = engine.canvas;\n    this.input = engine.inputManager;\n    this.camera = entity.getComponent(Camera);\n    this.cameraTransform = entity.transform;\n    this._spherical.setYAxis(this._up);\n    this._atTheBack = false;\n  }\n\n  onUpdate(deltaTime: number): void {\n    /** Update this._sphericalDelta, this._scale and this._panOffset. */\n    this._updateInputDelta(deltaTime);\n    /** Update camera's transform. */\n    this._updateTransform();\n  }\n\n  private _updateInputDelta(deltaTime: number): void {\n    let curHandlerType = ControlHandlerType.None;\n    const { _tempVec3: delta, _enableHandler: enableHandler } = this;\n    const { inputDevices, input } = this;\n    for (let i = inputDevices.length - 1; i >= 0; i--) {\n      const handler = inputDevices[i];\n      const handlerType = handler.onUpdateHandler(input);\n      if (handlerType & enableHandler) {\n        curHandlerType |= handlerType;\n        handler.onUpdateDelta(this, delta);\n        switch (handlerType) {\n          case ControlHandlerType.ROTATE:\n            this._rotate(delta);\n            break;\n          case ControlHandlerType.ZOOM:\n            this._zoom(delta);\n            break;\n          case ControlHandlerType.PAN:\n            this._pan(delta);\n            break;\n          default:\n            break;\n        }\n      }\n    }\n    const { _sphericalDump, _sphericalDelta } = this;\n    if (this.enableDamping) {\n      if (enableHandler & ControlHandlerType.ZOOM && curHandlerType ^ ControlHandlerType.ZOOM) {\n        this._zoomFrag *= 1 - this.zoomFactor;\n      }\n      if (enableHandler & ControlHandlerType.ROTATE && curHandlerType ^ ControlHandlerType.ROTATE) {\n        _sphericalDelta.theta = _sphericalDump.theta *= 1 - this.dampingFactor;\n        _sphericalDelta.phi = _sphericalDump.phi *= 1 - this.dampingFactor;\n      }\n    }\n    if (curHandlerType === ControlHandlerType.None && this.autoRotate) {\n      const rotateAngle = (this.autoRotateSpeed / 1000) * deltaTime;\n      _sphericalDelta.theta -= rotateAngle;\n    }\n  }\n\n  private _rotate(delta: Vector3): void {\n    const radianLeft = ((2 * Math.PI * delta.x) / this.canvas.width) * this.rotateSpeed;\n    this._sphericalDelta.theta -= radianLeft;\n    const radianUp = ((2 * Math.PI * delta.y) / this.canvas.height) * this.rotateSpeed;\n    this._sphericalDelta.phi -= radianUp;\n    if (this.enableDamping) {\n      this._sphericalDump.theta = -radianLeft;\n      this._sphericalDump.phi = -radianUp;\n    }\n  }\n\n  private _zoom(delta: Vector3): void {\n    if (delta.y > 0) {\n      this._scale /= Math.pow(0.95, this.zoomSpeed);\n    } else if (delta.y < 0) {\n      this._scale *= Math.pow(0.95, this.zoomSpeed);\n    }\n  }\n\n  private _pan(delta: Vector3): void {\n    const { cameraTransform } = this;\n    const { elements } = cameraTransform.worldMatrix;\n    const { height } = this.canvas;\n    const targetDistance =\n      Vector3.distance(cameraTransform.position, this.target) * (this.camera.fieldOfView / 2) * (Math.PI / 180);\n    const distanceLeft = -2 * delta.x * (targetDistance / height);\n    const distanceUp = 2 * delta.y * (targetDistance / height);\n    this._panOffset.x += elements[0] * distanceLeft + elements[4] * distanceUp;\n    this._panOffset.y += elements[1] * distanceLeft + elements[5] * distanceUp;\n    this._panOffset.z += elements[2] * distanceLeft + elements[6] * distanceUp;\n  }\n\n  private _updateTransform(): void {\n    const { cameraTransform, target, _tempVec3, _spherical, _sphericalDelta, _panOffset } = this;\n    Vector3.subtract(cameraTransform.position, target, _tempVec3);\n    _spherical.setFromVec3(_tempVec3, this._atTheBack);\n    _spherical.theta += _sphericalDelta.theta;\n    _spherical.phi += _sphericalDelta.phi;\n    _spherical.theta = Math.max(this.minAzimuthAngle, Math.min(this.maxAzimuthAngle, _spherical.theta));\n    _spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, _spherical.phi));\n    _spherical.makeSafe();\n    if (this._scale !== 1) {\n      this._zoomFrag = _spherical.radius * (this._scale - 1);\n    }\n    _spherical.radius += this._zoomFrag;\n    _spherical.radius = Math.max(this.minDistance, Math.min(this.maxDistance, _spherical.radius));\n    this._atTheBack = _spherical.setToVec3(_tempVec3);\n    Vector3.add(target.add(_panOffset), _tempVec3, cameraTransform.worldPosition);\n    cameraTransform.lookAt(target, _tempVec3.copyFrom(this.up).scale(this._atTheBack ? -1 : 1));\n    /** Reset cache value. */\n    this._zoomFrag = 0;\n    this._scale = 1;\n    _sphericalDelta.set(0, 0, 0);\n    _panOffset.set(0, 0, 0);\n  }\n}\n","import { Camera, Canvas, Entity, InputManager, Script, Transform, Vector3 } from \"@galacean/engine\";\nimport { ControlHandlerType } from \"./enums/ControlHandlerType\";\nimport { IControlInput } from \"./inputDevice/IControlInput\";\nimport { ControlKeyboard } from \"./inputDevice/ControlKeyboard\";\nimport { ControlPointer } from \"./inputDevice/ControlPointer\";\nimport { ControlWheel } from \"./inputDevice/ControlWheel\";\n\n/**\n * The camera's track controller, can rotate, zoom, pan, support mouse and touch events.\n */\nexport class OrthoControl extends Script {\n  canvas: Canvas;\n  input: InputManager;\n  inputDevices: IControlInput[] = [ControlKeyboard, ControlPointer, ControlWheel];\n  camera: Camera;\n  cameraTransform: Transform;\n\n  /** Target position. */\n  target: Vector3 = new Vector3();\n  /** Up vector */\n  up: Vector3 = new Vector3(0, 1, 0);\n  /** Whether to automatically rotate the camera, the default is false. */\n  autoRotate: boolean = false;\n  /** The radian of automatic rotation per second. */\n  autoRotateSpeed: number = Math.PI;\n  /** Whether to enable keyboard. */\n  enableKeys: boolean = false;\n  /** Whether to enable camera damping, the default is true. */\n  enableDamping: boolean = true;\n  /** Rotation speed, default is 1.0 . */\n  rotateSpeed: number = 1.0;\n  /** Camera zoom speed, the default is 1.0. */\n  zoomSpeed: number = 1.0;\n  /** Keyboard translation speed, the default is 7.0 . */\n  keyPanSpeed: number = 7.0;\n  /** Rotation damping parameter, default is 0.1 . */\n  dampingFactor: number = 0.1;\n  /** Zoom damping parameter, default is 0.2 . */\n  zoomFactor: number = 0.2;\n  /**  The minimum distance, the default is 0.1, should be greater than 0. */\n  minDistance: number = 0.1;\n  /** The maximum distance, the default is infinite, should be greater than the minimum distance. */\n  maxDistance: number = Infinity;\n  /** Minimum zoom speed, the default is 0.0. */\n  minZoom: number = 0.0;\n  /** Maximum zoom speed, the default is positive infinity. */\n  maxZoom: number = Infinity;\n  /** The minimum radian in the vertical direction, the default is 0 radian, the value range is 0 - Math.PI. */\n  minPolarAngle: number = 0.0;\n  /** The maximum radian in the vertical direction, the default is Math.PI, and the value range is 0 - Math.PI. */\n  maxPolarAngle: number = Math.PI;\n  /** The minimum radian in the horizontal direction, the default is negative infinity. */\n  minAzimuthAngle: number = -Infinity;\n  /** The maximum radian in the horizontal direction, the default is positive infinity.  */\n  maxAzimuthAngle: number = Infinity;\n\n  private _zoomScaleUnit: number = 25;\n  private _scale: number = 1;\n  private _panOffset: Vector3 = new Vector3();\n  private _tempVec3: Vector3 = new Vector3();\n  private _enableHandler: number = ControlHandlerType.All;\n\n  /**\n   *  Return Whether to enable rotation, the default is true.\n   */\n  get enableRotate(): boolean {\n    return (this._enableHandler & ControlHandlerType.ROTATE) !== 0;\n  }\n\n  set enableRotate(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.ROTATE;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.ROTATE;\n    }\n  }\n\n  /**\n   *  Whether to enable camera damping, the default is true.\n   */\n  get enableZoom(): boolean {\n    return (this._enableHandler & ControlHandlerType.ZOOM) !== 0;\n  }\n\n  set enableZoom(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.ZOOM;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.ZOOM;\n    }\n  }\n\n  /**\n   *  Whether to enable translation, the default is true.\n   */\n  get enablePan(): boolean {\n    return (this._enableHandler & ControlHandlerType.PAN) !== 0;\n  }\n\n  set enablePan(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.PAN;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.PAN;\n    }\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.enableRotate = false;\n  }\n\n  onAwake(): void {\n    const { engine, entity } = this;\n    this.canvas = engine.canvas;\n    this.input = engine.inputManager;\n    this.camera = entity.getComponent(Camera);\n    this.cameraTransform = entity.transform;\n  }\n\n  onUpdate(deltaTime: number): void {\n    /** Update this._sphericalDelta, this._scale and this._panOffset. */\n    this._updateInputDelta(deltaTime);\n    /** Update camera's transform. */\n    this._updateCamera();\n  }\n\n  private _updateInputDelta(deltaTime: number): void {\n    let curHandlerType = ControlHandlerType.None;\n    const { _tempVec3: delta, _enableHandler: enableHandler } = this;\n    const { inputDevices, input } = this;\n    for (let i = inputDevices.length - 1; i >= 0; i--) {\n      const handler = inputDevices[i];\n      const handlerType = handler.onUpdateHandler(input);\n      if (handlerType & enableHandler) {\n        curHandlerType |= handlerType;\n        handler.onUpdateDelta(this, delta);\n        switch (handlerType) {\n          case ControlHandlerType.ZOOM:\n            this._zoom(delta);\n            break;\n          case ControlHandlerType.PAN:\n            this._pan(delta);\n            break;\n          default:\n            break;\n        }\n      }\n    }\n  }\n\n  private _zoom(delta: Vector3): void {\n    if (delta.y > 0) {\n      this._scale /= Math.pow(0.95, this.zoomSpeed);\n    } else if (delta.y < 0) {\n      this._scale *= Math.pow(0.95, this.zoomSpeed);\n    }\n  }\n\n  private _pan(delta: Vector3): void {\n    this._panOffset.copyFrom(delta);\n  }\n\n  private _updateCamera(): void {\n    const { cameraTransform, camera, _panOffset } = this;\n\n    // Update Zoom\n    const sizeDiff = this._zoomScaleUnit * (this._scale - 1);\n    const size = camera.orthographicSize + sizeDiff;\n    camera.orthographicSize = Math.max(this.minZoom, Math.min(this.maxZoom, size));\n    \n    // Update X and Y\n    const { width, height } = this.canvas;\n    const { x, y } = _panOffset;\n    const doubleOrthographicSize = camera.orthographicSize * 2;\n    const width3D = doubleOrthographicSize * camera.aspectRatio;\n    const height3D = doubleOrthographicSize;\n    const cameraPosition = cameraTransform.position;\n    const curPosition = this._tempVec3;\n    curPosition.x = cameraPosition.x - (x * width3D) / width;\n    curPosition.y = cameraPosition.y + (y * height3D) / height;\n    curPosition.z = cameraPosition.z;\n    \n    // Update camera transform\n    cameraTransform.position = curPosition;\n    /** Reset cache value. */\n    this._scale = 1;\n    _panOffset.set(0, 0, 0);\n  }\n}\n"],"names":["ControlHandlerType","StaticInterfaceImplement","constructor","ControlFreeKeyboard","_dec","_class","onUpdateHandler","input","isKeyHeldDown","Keys","ArrowLeft","KeyA","ArrowUp","KeyW","ArrowDown","KeyS","ArrowRight","KeyD","PAN","None","onUpdateDelta","control","outDelta","movementSpeed","x","y","z","DeltaType","ControlFreePointer","_class2","_frameIndex","pointers","length","isPointerHeldDown","PointerButton","Primary","_updateType","ROTATE","Moving","deltaPosition","isPointerUp","_handlerType","frameIndex","_deltaType","_lastUsefulFrameIndex","handlerType","deltaType","ESP","MathUtil","zeroTolerance","Spherical","radius","phi","theta","_matrix","Matrix","_matrixInv","undefined","makeSafe","count","Math","floor","PI","clamp","set","setYAxis","up","_xAxis","xAxis","_yAxis","yAxis","_zAxis","zAxis","Vector3","equals","copyFrom","normalize","cross","elements","es","eInv","setFromVec3","value","atTheBack","transformNormal","acos","atan2","setToVec3","sinPhiRadius","sin","cos","FreeControl","Script","entity","inputDevices","rotateSpeed","floorMock","floorY","_cameraTransform","_spherical","_tempVec","engine","inputManager","transform","tempVec","spherical","transformByQuat","rotationQuaternion","onUpdate","deltaTime","enabled","delta","i","handler","_rotate","_pan","position","setPosition","moveDelta","actualMoveSpeed","scale","translate","canvas","deltaAlpha","width","deltaPhi","height","degreeToRadian","add","lookAt","ControlKeyboard","keyPanSpeed","ControlPointer","Secondary","Auxiliary","ZOOM","Distance","pointer1","pointer2","curDistance","Vector2","distance","_distanceOfPointers","ControlWheel","wheelDelta","OrbitControl","args","camera","cameraTransform","autoRotate","autoRotateSpeed","enableDamping","zoomSpeed","dampingFactor","zoomFactor","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","_enableKeys","_up","_target","_atTheBack","_sphericalDelta","_sphericalDump","_zoomFrag","_scale","_panOffset","_tempVec3","_enableHandler","All","enableKeys","push","splice","target","enableRotate","enableZoom","enablePan","onAwake","getComponent","Camera","_updateInputDelta","_updateTransform","curHandlerType","enableHandler","_zoom","rotateAngle","radianLeft","radianUp","pow","worldMatrix","targetDistance","fieldOfView","distanceLeft","distanceUp","subtract","max","min","worldPosition","OrthoControl","_zoomScaleUnit","_updateCamera","sizeDiff","size","orthographicSize","doubleOrthographicSize","width3D","aspectRatio","height3D","cameraPosition","curPosition"],"mappings":"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"}