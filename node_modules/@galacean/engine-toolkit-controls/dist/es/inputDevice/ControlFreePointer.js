import { PointerButton } from '@galacean/engine';
import { ControlHandlerType } from '../enums/ControlHandlerType.js';
import { StaticInterfaceImplement } from './StaticInterfaceImplement.js';
import { _ as __decorate } from '../tslib.es6-2e0713a3.js';

var _ControlFreePointer;
var DeltaType;
(function(DeltaType) {
    DeltaType[DeltaType["Moving"] = 0] = "Moving";
    DeltaType[DeltaType["Distance"] = 1] = "Distance";
    DeltaType[DeltaType["None"] = 2] = "None";
})(DeltaType || (DeltaType = {}));
var ControlFreePointer = (_ControlFreePointer = /*#__PURE__*/ function() {
    function ControlFreePointer() {}
    ControlFreePointer.onUpdateHandler = function onUpdateHandler(input) {
        ++this._frameIndex;
        if (input.pointers.length === 1) {
            if (input.isPointerHeldDown(PointerButton.Primary)) {
                this._updateType(ControlHandlerType.ROTATE, 0);
            } else {
                var deltaPosition = input.pointers[0].deltaPosition;
                if ((deltaPosition.x !== 0 || deltaPosition.y !== 0) && input.isPointerUp(PointerButton.Primary)) {
                    this._updateType(ControlHandlerType.ROTATE, 0);
                } else {
                    this._updateType(ControlHandlerType.None, 2);
                }
            }
        } else {
            this._updateType(ControlHandlerType.None, 2);
        }
        return this._handlerType;
    };
    ControlFreePointer.onUpdateDelta = function onUpdateDelta(control, outDelta) {
        var _this = this, frameIndex = _this._frameIndex;
        switch(this._deltaType){
            case 0:
                if (this._lastUsefulFrameIndex === frameIndex - 1) {
                    var deltaPosition = control.input.pointers[0].deltaPosition;
                    outDelta.x = deltaPosition.x;
                    outDelta.y = deltaPosition.y;
                } else {
                    outDelta.x = 0;
                    outDelta.y = 0;
                }
                break;
        }
        this._lastUsefulFrameIndex = frameIndex;
    };
    ControlFreePointer._updateType = function _updateType(handlerType, deltaType) {
        if (this._handlerType !== handlerType || this._deltaType !== deltaType) {
            this._handlerType = handlerType;
            this._deltaType = deltaType;
            this._lastUsefulFrameIndex = -1;
        }
    };
    return ControlFreePointer;
}(), function() {
    _ControlFreePointer._deltaType = 0;
}(), function() {
    _ControlFreePointer._handlerType = ControlHandlerType.None;
}(), function() {
    _ControlFreePointer._frameIndex = 0;
}(), function() {
    _ControlFreePointer._lastUsefulFrameIndex = -1;
}(), _ControlFreePointer);
ControlFreePointer = __decorate([
    StaticInterfaceImplement()
], ControlFreePointer);

export { ControlFreePointer };
//# sourceMappingURL=ControlFreePointer.js.map
