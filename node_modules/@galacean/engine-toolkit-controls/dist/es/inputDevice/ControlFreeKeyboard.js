import { Keys } from '@galacean/engine';
import { ControlHandlerType } from '../enums/ControlHandlerType.js';
import { StaticInterfaceImplement } from './StaticInterfaceImplement.js';
import { _ as __decorate } from '../tslib.es6-2e0713a3.js';

var ControlFreeKeyboard = /*#__PURE__*/ function() {
    function ControlFreeKeyboard() {}
    ControlFreeKeyboard.onUpdateHandler = function onUpdateHandler(input) {
        if (input.isKeyHeldDown(Keys.ArrowLeft) || input.isKeyHeldDown(Keys.KeyA) || input.isKeyHeldDown(Keys.ArrowUp) || input.isKeyHeldDown(Keys.KeyW) || input.isKeyHeldDown(Keys.ArrowDown) || input.isKeyHeldDown(Keys.KeyS) || input.isKeyHeldDown(Keys.ArrowRight) || input.isKeyHeldDown(Keys.KeyD)) {
            return ControlHandlerType.PAN;
        } else {
            return ControlHandlerType.None;
        }
    };
    ControlFreeKeyboard.onUpdateDelta = function onUpdateDelta(control, outDelta) {
        var movementSpeed = control.movementSpeed, input = control.input;
        outDelta.x = outDelta.y = outDelta.z = 0;
        if (input.isKeyHeldDown(Keys.ArrowLeft) || input.isKeyHeldDown(Keys.KeyA)) {
            outDelta.x -= movementSpeed;
        }
        if (input.isKeyHeldDown(Keys.ArrowRight) || input.isKeyHeldDown(Keys.KeyD)) {
            outDelta.x += movementSpeed;
        }
        if (input.isKeyHeldDown(Keys.ArrowUp) || input.isKeyHeldDown(Keys.KeyW)) {
            outDelta.z -= movementSpeed;
        }
        if (input.isKeyHeldDown(Keys.ArrowDown) || input.isKeyHeldDown(Keys.KeyS)) {
            outDelta.z += movementSpeed;
        }
    };
    return ControlFreeKeyboard;
}();
ControlFreeKeyboard = __decorate([
    StaticInterfaceImplement()
], ControlFreeKeyboard);

export { ControlFreeKeyboard };
//# sourceMappingURL=ControlFreeKeyboard.js.map
