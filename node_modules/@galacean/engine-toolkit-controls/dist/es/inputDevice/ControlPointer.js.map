{"version":3,"file":"ControlPointer.js","sources":["../../../src/inputDevice/ControlPointer.ts"],"sourcesContent":["import { InputManager, PointerButton, Vector3, Vector2 } from \"@galacean/engine\";\nimport { ControlHandlerType } from \"../enums/ControlHandlerType\";\nimport { OrbitControl } from \"../OrbitControl\";\nimport { IControlInput } from \"./IControlInput\";\nimport { StaticInterfaceImplement } from \"./StaticInterfaceImplement\";\n\nenum DeltaType {\n  Moving,\n  Distance,\n  None\n}\n@StaticInterfaceImplement<IControlInput>()\nexport class ControlPointer {\n  private static _deltaType: DeltaType = DeltaType.None;\n  private static _handlerType: ControlHandlerType = ControlHandlerType.None;\n  private static _frameIndex: number = 0;\n  private static _lastUsefulFrameIndex: number = -1;\n  private static _distanceOfPointers: number = 0;\n  static onUpdateHandler(input: InputManager): ControlHandlerType {\n    ++this._frameIndex;\n    const { pointers } = input;\n    switch (pointers.length) {\n      case 1:\n        if (input.isPointerHeldDown(PointerButton.Secondary)) {\n          this._updateType(ControlHandlerType.PAN, DeltaType.Moving);\n        } else if (input.isPointerHeldDown(PointerButton.Auxiliary)) {\n          this._updateType(ControlHandlerType.ZOOM, DeltaType.Moving);\n        } else if (input.isPointerHeldDown(PointerButton.Primary)) {\n          this._updateType(ControlHandlerType.ROTATE, DeltaType.Moving);\n        } else {\n          // When `onPointerMove` happens on the same frame as `onPointerUp`\n          // Need to record the movement of this frame\n          const { deltaPosition } = input.pointers[0];\n          if (deltaPosition.x !== 0 && deltaPosition.y !== 0) {\n            if (input.isPointerUp(PointerButton.Secondary)) {\n              this._updateType(ControlHandlerType.PAN, DeltaType.Moving);\n            } else if (input.isPointerUp(PointerButton.Auxiliary)) {\n              this._updateType(ControlHandlerType.ZOOM, DeltaType.Moving);\n            } else if (input.isPointerUp(PointerButton.Primary)) {\n              this._updateType(ControlHandlerType.ROTATE, DeltaType.Moving);\n            } else {\n              this._updateType(ControlHandlerType.None, DeltaType.None);\n            }\n          } else {\n            this._updateType(ControlHandlerType.None, DeltaType.None);\n          }\n        }\n        break;\n      case 2:\n        this._updateType(ControlHandlerType.ZOOM, DeltaType.Distance);\n        break;\n      case 3:\n        this._updateType(ControlHandlerType.PAN, DeltaType.Moving);\n        break;\n      default:\n        this._updateType(ControlHandlerType.None, DeltaType.None);\n        break;\n    }\n    return this._handlerType;\n  }\n\n  static onUpdateDelta(control: OrbitControl, outDelta: Vector3): void {\n    const { _frameIndex: frameIndex } = this;\n    switch (this._deltaType) {\n      case DeltaType.Moving:\n        outDelta.x = 0;\n        outDelta.y = 0;\n        if (this._lastUsefulFrameIndex === frameIndex - 1) {\n          const { pointers } = control.input;\n          const length = pointers.length;\n          for (let i = length - 1; i >= 0; i--) {\n            const { deltaPosition } = pointers[i];\n            outDelta.x += deltaPosition.x;\n            outDelta.y += deltaPosition.y;\n          }\n          outDelta.x /= length;\n          outDelta.y /= length;\n        }\n        break;\n      case DeltaType.Distance:\n        const { pointers } = control.input;\n        const pointer1 = pointers[0];\n        const pointer2 = pointers[1];\n        const curDistance = Vector2.distance(pointer1.position, pointer2.position);\n        if (this._lastUsefulFrameIndex === frameIndex - 1) {\n          outDelta.set(0, this._distanceOfPointers - curDistance, 0);\n        } else {\n          outDelta.set(0, 0, 0);\n        }\n        this._distanceOfPointers = curDistance;\n        break;\n      default:\n        break;\n    }\n    this._lastUsefulFrameIndex = frameIndex;\n  }\n\n  private static _updateType(handlerType: ControlHandlerType, deltaType: DeltaType) {\n    if (this._handlerType !== handlerType || this._deltaType !== deltaType) {\n      this._handlerType = handlerType;\n      this._deltaType = deltaType;\n      this._lastUsefulFrameIndex = -1;\n    }\n  }\n}\n"],"names":["DeltaType","Moving","Distance","None","ControlPointer","onUpdateHandler","input","_frameIndex","pointers","length","isPointerHeldDown","PointerButton","Secondary","_updateType","ControlHandlerType","PAN","Auxiliary","ZOOM","Primary","ROTATE","deltaPosition","x","y","isPointerUp","_handlerType","onUpdateDelta","control","outDelta","frameIndex","_deltaType","_lastUsefulFrameIndex","i","pointer1","pointer2","curDistance","Vector2","distance","position","set","_distanceOfPointers","handlerType","deltaType","StaticInterfaceImplement"],"mappings":"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"}