import { PointerButton, Vector2 } from '@galacean/engine';
import { ControlHandlerType } from '../enums/ControlHandlerType.js';
import { StaticInterfaceImplement } from './StaticInterfaceImplement.js';
import { _ as __decorate } from '../tslib.es6-2e0713a3.js';

var _ControlPointer;
var DeltaType;
(function(DeltaType) {
    DeltaType[DeltaType["Moving"] = 0] = "Moving";
    DeltaType[DeltaType["Distance"] = 1] = "Distance";
    DeltaType[DeltaType["None"] = 2] = "None";
})(DeltaType || (DeltaType = {}));
var ControlPointer = (_ControlPointer = /*#__PURE__*/ function() {
    function ControlPointer() {}
    ControlPointer.onUpdateHandler = function onUpdateHandler(input) {
        ++this._frameIndex;
        var pointers = input.pointers;
        switch(pointers.length){
            case 1:
                if (input.isPointerHeldDown(PointerButton.Secondary)) {
                    this._updateType(ControlHandlerType.PAN, 0);
                } else if (input.isPointerHeldDown(PointerButton.Auxiliary)) {
                    this._updateType(ControlHandlerType.ZOOM, 0);
                } else if (input.isPointerHeldDown(PointerButton.Primary)) {
                    this._updateType(ControlHandlerType.ROTATE, 0);
                } else {
                    // When `onPointerMove` happens on the same frame as `onPointerUp`
                    // Need to record the movement of this frame
                    var deltaPosition = input.pointers[0].deltaPosition;
                    if (deltaPosition.x !== 0 && deltaPosition.y !== 0) {
                        if (input.isPointerUp(PointerButton.Secondary)) {
                            this._updateType(ControlHandlerType.PAN, 0);
                        } else if (input.isPointerUp(PointerButton.Auxiliary)) {
                            this._updateType(ControlHandlerType.ZOOM, 0);
                        } else if (input.isPointerUp(PointerButton.Primary)) {
                            this._updateType(ControlHandlerType.ROTATE, 0);
                        } else {
                            this._updateType(ControlHandlerType.None, 2);
                        }
                    } else {
                        this._updateType(ControlHandlerType.None, 2);
                    }
                }
                break;
            case 2:
                this._updateType(ControlHandlerType.ZOOM, 1);
                break;
            case 3:
                this._updateType(ControlHandlerType.PAN, 0);
                break;
            default:
                this._updateType(ControlHandlerType.None, 2);
                break;
        }
        return this._handlerType;
    };
    ControlPointer.onUpdateDelta = function onUpdateDelta(control, outDelta) {
        var _this = this, frameIndex = _this._frameIndex;
        switch(this._deltaType){
            case 0:
                outDelta.x = 0;
                outDelta.y = 0;
                if (this._lastUsefulFrameIndex === frameIndex - 1) {
                    var pointers = control.input.pointers;
                    var length = pointers.length;
                    for(var i = length - 1; i >= 0; i--){
                        var deltaPosition = pointers[i].deltaPosition;
                        outDelta.x += deltaPosition.x;
                        outDelta.y += deltaPosition.y;
                    }
                    outDelta.x /= length;
                    outDelta.y /= length;
                }
                break;
            case 1:
                var pointers1 = control.input.pointers;
                var pointer1 = pointers1[0];
                var pointer2 = pointers1[1];
                var curDistance = Vector2.distance(pointer1.position, pointer2.position);
                if (this._lastUsefulFrameIndex === frameIndex - 1) {
                    outDelta.set(0, this._distanceOfPointers - curDistance, 0);
                } else {
                    outDelta.set(0, 0, 0);
                }
                this._distanceOfPointers = curDistance;
                break;
        }
        this._lastUsefulFrameIndex = frameIndex;
    };
    ControlPointer._updateType = function _updateType(handlerType, deltaType) {
        if (this._handlerType !== handlerType || this._deltaType !== deltaType) {
            this._handlerType = handlerType;
            this._deltaType = deltaType;
            this._lastUsefulFrameIndex = -1;
        }
    };
    return ControlPointer;
}(), function() {
    _ControlPointer._deltaType = 2;
}(), function() {
    _ControlPointer._handlerType = ControlHandlerType.None;
}(), function() {
    _ControlPointer._frameIndex = 0;
}(), function() {
    _ControlPointer._lastUsefulFrameIndex = -1;
}(), function() {
    _ControlPointer._distanceOfPointers = 0;
}(), _ControlPointer);
ControlPointer = __decorate([
    StaticInterfaceImplement()
], ControlPointer);

export { ControlPointer };
//# sourceMappingURL=ControlPointer.js.map
