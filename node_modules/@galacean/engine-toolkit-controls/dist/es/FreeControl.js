import { _ as _inherits } from './_inherits-5a51c3d0.js';
import { MathUtil, Vector3, Script } from '@galacean/engine';
import { ControlHandlerType } from './enums/ControlHandlerType.js';
import { ControlFreeKeyboard } from './inputDevice/ControlFreeKeyboard.js';
import { ControlFreePointer } from './inputDevice/ControlFreePointer.js';
import { Spherical } from './Spherical.js';
import './inputDevice/StaticInterfaceImplement.js';
import './tslib.es6-2e0713a3.js';

function _assert_this_initialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");

    return self;
}

/**
 * The camera's roaming controller, can move up and down, left and right, and rotate the viewing angle.
 */ var FreeControl = /*#__PURE__*/ function(Script) {
    _inherits(FreeControl, Script);
    function FreeControl(entity) {
        var _this;
        _this = Script.call(this, entity) || this;
        _this.inputDevices = [
            ControlFreeKeyboard,
            ControlFreePointer
        ];
        /** Movement distance per second, the unit is the unit before MVP conversion. */ _this.movementSpeed = 1.0;
        /** Rotate speed. */ _this.rotateSpeed = 1.0;
        /** Simulate a ground. */ _this.floorMock = true;
        /** Simulated ground height. */ _this.floorY = 0;
        _this._spherical = new Spherical();
        _this._tempVec = new Vector3();
        _this._atTheBack = false;
        _this._topVec = new Vector3(0, 1, 0);
        _this._bottomVec = new Vector3(0, -1, 0);
        _this.input = _this.engine.inputManager;
        var transform = _this._cameraTransform = entity.transform;
        /** Init spherical. */ var _$_assert_this_initialized = _assert_this_initialized(_this), tempVec = _$_assert_this_initialized._tempVec, spherical = _$_assert_this_initialized._spherical;
        Vector3.transformByQuat(tempVec.set(0, 0, -1), transform.rotationQuaternion, tempVec);
        spherical.setFromVec3(tempVec, _this._atTheBack);
        return _this;
    }
    var _proto = FreeControl.prototype;
    _proto.onUpdate = function onUpdate(deltaTime) {
        if (this.enabled === false) return;
        ControlHandlerType.None;
        var _this = this, delta = _this._tempVec;
        var _this1 = this, inputDevices = _this1.inputDevices, input = _this1.input;
        for(var i = inputDevices.length - 1; i >= 0; i--){
            var handler = inputDevices[i];
            var handlerType = handler.onUpdateHandler(input);
            if (handlerType) {
                handler.onUpdateDelta(this, delta);
                switch(handlerType){
                    case ControlHandlerType.ROTATE:
                        this._rotate(delta);
                        break;
                    case ControlHandlerType.PAN:
                        this._pan(delta, deltaTime);
                        break;
                }
            }
        }
        if (this.floorMock) {
            var position = this._cameraTransform.position;
            if (position.y !== this.floorY) {
                this._cameraTransform.setPosition(position.x, this.floorY, position.z);
            }
        }
    };
    _proto._pan = function _pan(moveDelta, delta) {
        var actualMoveSpeed = delta / 1000 * this.movementSpeed;
        moveDelta.normalize().scale(actualMoveSpeed);
        this._cameraTransform.translate(moveDelta, true);
    };
    _proto._rotate = function _rotate(moveDelta) {
        if (moveDelta.x !== 0 || moveDelta.y !== 0) {
            var canvas = this.engine.canvas;
            var deltaAlpha = -moveDelta.x * 180 / canvas.width;
            var deltaPhi = moveDelta.y * 180 / canvas.height;
            this._spherical.theta += MathUtil.degreeToRadian(deltaAlpha);
            this._spherical.phi += MathUtil.degreeToRadian(deltaPhi);
            this._spherical.makeSafe();
            this._atTheBack = this._spherical.setToVec3(this._tempVec);
            Vector3.add(this._cameraTransform.position, this._tempVec, this._tempVec);
            this._atTheBack ? this._cameraTransform.lookAt(this._tempVec, this._bottomVec) : this._cameraTransform.lookAt(this._tempVec, this._topVec);
        }
    };
    return FreeControl;
}(Script);

export { FreeControl };
//# sourceMappingURL=FreeControl.js.map
