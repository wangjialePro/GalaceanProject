import { _ as _create_class } from './_create_class-8d4b456b.js';
import { _ as _inherits } from './_inherits-5a51c3d0.js';
import { Camera, Vector3, Script } from '@galacean/engine';
import { ControlHandlerType } from './enums/ControlHandlerType.js';
import { ControlKeyboard } from './inputDevice/ControlKeyboard.js';
import { ControlPointer } from './inputDevice/ControlPointer.js';
import { ControlWheel } from './inputDevice/ControlWheel.js';
import './inputDevice/StaticInterfaceImplement.js';
import './tslib.es6-2e0713a3.js';

/**
 * The camera's track controller, can rotate, zoom, pan, support mouse and touch events.
 */ var OrthoControl = /*#__PURE__*/ function(Script) {
    _inherits(OrthoControl, Script);
    function OrthoControl(entity) {
        var _this;
        _this = Script.call(this, entity) || this;
        _this.inputDevices = [
            ControlKeyboard,
            ControlPointer,
            ControlWheel
        ];
        /** Target position. */ _this.target = new Vector3();
        /** Up vector */ _this.up = new Vector3(0, 1, 0);
        /** Whether to automatically rotate the camera, the default is false. */ _this.autoRotate = false;
        /** The radian of automatic rotation per second. */ _this.autoRotateSpeed = Math.PI;
        /** Whether to enable keyboard. */ _this.enableKeys = false;
        /** Whether to enable camera damping, the default is true. */ _this.enableDamping = true;
        /** Rotation speed, default is 1.0 . */ _this.rotateSpeed = 1.0;
        /** Camera zoom speed, the default is 1.0. */ _this.zoomSpeed = 1.0;
        /** Keyboard translation speed, the default is 7.0 . */ _this.keyPanSpeed = 7.0;
        /** Rotation damping parameter, default is 0.1 . */ _this.dampingFactor = 0.1;
        /** Zoom damping parameter, default is 0.2 . */ _this.zoomFactor = 0.2;
        /**  The minimum distance, the default is 0.1, should be greater than 0. */ _this.minDistance = 0.1;
        /** The maximum distance, the default is infinite, should be greater than the minimum distance. */ _this.maxDistance = Infinity;
        /** Minimum zoom speed, the default is 0.0. */ _this.minZoom = 0.0;
        /** Maximum zoom speed, the default is positive infinity. */ _this.maxZoom = Infinity;
        /** The minimum radian in the vertical direction, the default is 0 radian, the value range is 0 - Math.PI. */ _this.minPolarAngle = 0.0;
        /** The maximum radian in the vertical direction, the default is Math.PI, and the value range is 0 - Math.PI. */ _this.maxPolarAngle = Math.PI;
        /** The minimum radian in the horizontal direction, the default is negative infinity. */ _this.minAzimuthAngle = -Infinity;
        /** The maximum radian in the horizontal direction, the default is positive infinity.  */ _this.maxAzimuthAngle = Infinity;
        _this._zoomScaleUnit = 2;
        _this._scale = 1;
        _this._panOffset = new Vector3();
        _this._tempVec3 = new Vector3();
        _this._enableHandler = ControlHandlerType.All;
        _this.enableRotate = false;
        return _this;
    }
    var _proto = OrthoControl.prototype;
    _proto.onAwake = function onAwake() {
        var _this = this, engine = _this.engine, entity = _this.entity;
        this.canvas = engine.canvas;
        this.input = engine.inputManager;
        this.camera = entity.getComponent(Camera);
        this.cameraTransform = entity.transform;
    };
    _proto.onUpdate = function onUpdate(deltaTime) {
        /** Update this._sphericalDelta, this._scale and this._panOffset. */ this._updateInputDelta(deltaTime);
        /** Update camera's transform. */ this._updateCamera();
    };
    _proto._updateInputDelta = function _updateInputDelta(deltaTime) {
        ControlHandlerType.None;
        var _this = this, delta = _this._tempVec3, enableHandler = _this._enableHandler;
        var _this1 = this, inputDevices = _this1.inputDevices, input = _this1.input;
        for(var i = inputDevices.length - 1; i >= 0; i--){
            var handler = inputDevices[i];
            var handlerType = handler.onUpdateHandler(input);
            if (handlerType & enableHandler) {
                handler.onUpdateDelta(this, delta);
                switch(handlerType){
                    case ControlHandlerType.ZOOM:
                        this._zoom(delta);
                        break;
                    case ControlHandlerType.PAN:
                        this._pan(delta);
                        break;
                }
            }
        }
    };
    _proto._zoom = function _zoom(delta) {
        if (delta.y > 0) {
            this._scale /= Math.pow(0.95, this.zoomSpeed);
        } else if (delta.y < 0) {
            this._scale *= Math.pow(0.95, this.zoomSpeed);
        }
    };
    _proto._pan = function _pan(delta) {
        this._panOffset.copyFrom(delta);
    };
    _proto._updateCamera = function _updateCamera() {
        var _this = this, cameraTransform = _this.cameraTransform, camera = _this.camera, _panOffset = _this._panOffset;
        // Update Zoom
        var sizeDiff = this._zoomScaleUnit * Math.log1p(camera.orthographicSize) * (this._scale - 1);
        var size = camera.orthographicSize + sizeDiff;
        camera.orthographicSize = Math.max(this.minZoom, Math.min(this.maxZoom, size));
        // Update X and Y
        var _this_canvas = this.canvas, width = _this_canvas.width, height = _this_canvas.height;
        var x = _panOffset.x, y = _panOffset.y;
        var doubleOrthographicSize = camera.orthographicSize * 2;
        var width3D = doubleOrthographicSize * camera.aspectRatio;
        var height3D = doubleOrthographicSize;
        var cameraPosition = cameraTransform.position;
        var curPosition = this._tempVec3;
        curPosition.x = cameraPosition.x - x * width3D / width;
        curPosition.y = cameraPosition.y + y * height3D / height;
        curPosition.z = cameraPosition.z;
        // Update camera transform
        cameraTransform.position = curPosition;
        /** Reset cache value. */ this._scale = 1;
        _panOffset.set(0, 0, 0);
    };
    _create_class(OrthoControl, [
        {
            key: "enableRotate",
            get: /**
   *  Return Whether to enable rotation, the default is true.
   */ function get() {
                return (this._enableHandler & ControlHandlerType.ROTATE) !== 0;
            },
            set: function set(value) {
                if (value) {
                    this._enableHandler |= ControlHandlerType.ROTATE;
                } else {
                    this._enableHandler &= ~ControlHandlerType.ROTATE;
                }
            }
        },
        {
            key: "enableZoom",
            get: /**
   *  Whether to enable camera damping, the default is true.
   */ function get() {
                return (this._enableHandler & ControlHandlerType.ZOOM) !== 0;
            },
            set: function set(value) {
                if (value) {
                    this._enableHandler |= ControlHandlerType.ZOOM;
                } else {
                    this._enableHandler &= ~ControlHandlerType.ZOOM;
                }
            }
        },
        {
            key: "enablePan",
            get: /**
   *  Whether to enable translation, the default is true.
   */ function get() {
                return (this._enableHandler & ControlHandlerType.PAN) !== 0;
            },
            set: function set(value) {
                if (value) {
                    this._enableHandler |= ControlHandlerType.PAN;
                } else {
                    this._enableHandler &= ~ControlHandlerType.PAN;
                }
            }
        }
    ]);
    return OrthoControl;
}(Script);

export { OrthoControl };
//# sourceMappingURL=OrthoControl.js.map
