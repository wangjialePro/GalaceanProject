{"version":3,"file":"OrbitControl.js","sources":["../../src/OrbitControl.ts"],"sourcesContent":["import { Camera, Canvas, InputManager, Script, Transform, Vector3 } from \"@galacean/engine\";\nimport { ControlHandlerType } from \"./enums/ControlHandlerType\";\nimport { IControlInput } from \"./inputDevice/IControlInput\";\nimport { ControlKeyboard } from \"./inputDevice/ControlKeyboard\";\nimport { ControlPointer } from \"./inputDevice/ControlPointer\";\nimport { ControlWheel } from \"./inputDevice/ControlWheel\";\nimport { Spherical } from \"./Spherical\";\n\n/**\n * The camera's track controller, can rotate, zoom, pan, support mouse and touch events.\n */\nexport class OrbitControl extends Script {\n  canvas: Canvas;\n  input: InputManager;\n  inputDevices: IControlInput[] = [ControlKeyboard, ControlPointer, ControlWheel];\n  camera: Camera;\n  cameraTransform: Transform;\n\n  /** Whether to automatically rotate the camera, the default is false. */\n  autoRotate: boolean = false;\n  /** The radian of automatic rotation per second. */\n  autoRotateSpeed: number = Math.PI;\n  /** Whether to enable camera damping, the default is true. */\n  enableDamping: boolean = true;\n  /** Rotation speed, default is 1.0 . */\n  rotateSpeed: number = 1.0;\n  /** Camera zoom speed, the default is 1.0. */\n  zoomSpeed: number = 1.0;\n  /** Keyboard translation speed, the default is 7.0 . */\n  keyPanSpeed: number = 7.0;\n  /** Rotation damping parameter, default is 0.1 . */\n  dampingFactor: number = 0.1;\n  /** Zoom damping parameter, default is 0.2 . */\n  zoomFactor: number = 0.2;\n  /**  The minimum distance, the default is 0.1, should be greater than 0. */\n  minDistance: number = 0.1;\n  /** The maximum distance, the default is infinite, should be greater than the minimum distance. */\n  maxDistance: number = Infinity;\n  /** Minimum zoom speed, the default is 0.0. */\n  minZoom: number = 0.0;\n  /** Maximum zoom speed, the default is positive infinity. */\n  maxZoom: number = Infinity;\n  /** The minimum radian in the vertical direction, the default is 1 degree. */\n  minPolarAngle: number = 1;\n  /** The maximum radian in the vertical direction,  the default is 179 degree.  */\n  maxPolarAngle: number = (179 / 180) * Math.PI;\n  /** The minimum radian in the horizontal direction, the default is negative infinity. */\n  minAzimuthAngle: number = -Infinity;\n  /** The maximum radian in the horizontal direction, the default is positive infinity.  */\n  maxAzimuthAngle: number = Infinity;\n\n  private _enableKeys: boolean = true;\n  private _up: Vector3 = new Vector3(0, 1, 0);\n  private _target: Vector3 = new Vector3();\n  private _atTheBack: boolean = false;\n  private _spherical: Spherical = new Spherical();\n  private _sphericalDelta: Spherical = new Spherical();\n  private _sphericalDump: Spherical = new Spherical();\n  private _zoomFrag: number = 0;\n  private _scale: number = 1;\n  private _panOffset: Vector3 = new Vector3();\n  private _tempVec3: Vector3 = new Vector3();\n  private _enableHandler: number = ControlHandlerType.All;\n\n  /**\n   * Return whether to enable keyboard.\n   */\n  get enableKeys(): boolean {\n    return this._enableKeys;\n  }\n\n  set enableKeys(value: boolean) {\n    if (this._enableKeys !== value) {\n      this._enableKeys = value;\n      const { inputDevices } = this;\n      if (value) {\n        inputDevices.push(ControlKeyboard);\n      } else {\n        for (let i = inputDevices.length - 1; i >= 0; i--) {\n          if (inputDevices[i] === ControlKeyboard) {\n            inputDevices.splice(i, 1);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  /*\n   * Return up vector.\n   */\n  get up(): Vector3 {\n    return this._up;\n  }\n\n  set up(value: Vector3) {\n    this._up.copyFrom(value);\n    this._spherical.setYAxis(value);\n    this._atTheBack = false;\n  }\n\n  /**\n   * Return target position.\n   * */\n  get target(): Vector3 {\n    return this._target;\n  }\n\n  set target(value: Vector3) {\n    this._target.copyFrom(value);\n    this._atTheBack = false;\n  }\n\n  /**\n   *  Return Whether to enable rotation, the default is true.\n   */\n  get enableRotate(): boolean {\n    return (this._enableHandler & ControlHandlerType.ROTATE) !== 0;\n  }\n\n  set enableRotate(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.ROTATE;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.ROTATE;\n    }\n  }\n\n  /**\n   *  Whether to enable camera damping, the default is true.\n   */\n  get enableZoom(): boolean {\n    return (this._enableHandler & ControlHandlerType.ZOOM) !== 0;\n  }\n\n  set enableZoom(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.ZOOM;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.ZOOM;\n    }\n  }\n\n  /**\n   *  Whether to enable translation, the default is true.\n   */\n  get enablePan(): boolean {\n    return (this._enableHandler & ControlHandlerType.PAN) !== 0;\n  }\n\n  set enablePan(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.PAN;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.PAN;\n    }\n  }\n\n  override onAwake(): void {\n    const { engine, entity } = this;\n    this.canvas = engine.canvas;\n    this.input = engine.inputManager;\n    this.camera = entity.getComponent(Camera);\n    this.cameraTransform = entity.transform;\n    this._spherical.setYAxis(this._up);\n    this._atTheBack = false;\n  }\n\n  override onUpdate(deltaTime: number): void {\n    /** Update this._sphericalDelta, this._scale and this._panOffset. */\n    this._updateInputDelta(deltaTime);\n    /** Update camera's transform. */\n    this._updateTransform();\n  }\n\n  private _updateInputDelta(deltaTime: number): void {\n    let curHandlerType = ControlHandlerType.None;\n    const { _tempVec3: delta, _enableHandler: enableHandler } = this;\n    const { inputDevices, input } = this;\n    for (let i = inputDevices.length - 1; i >= 0; i--) {\n      const handler = inputDevices[i];\n      const handlerType = handler.onUpdateHandler(input);\n      if (handlerType & enableHandler) {\n        curHandlerType |= handlerType;\n        handler.onUpdateDelta(this, delta);\n        switch (handlerType) {\n          case ControlHandlerType.ROTATE:\n            this._rotate(delta);\n            break;\n          case ControlHandlerType.ZOOM:\n            this._zoom(delta);\n            break;\n          case ControlHandlerType.PAN:\n            this._pan(delta);\n            break;\n          default:\n            break;\n        }\n      }\n    }\n    const { _sphericalDump, _sphericalDelta } = this;\n    if (this.enableDamping) {\n      if (enableHandler & ControlHandlerType.ZOOM && curHandlerType ^ ControlHandlerType.ZOOM) {\n        this._zoomFrag *= 1 - this.zoomFactor;\n      }\n      if (enableHandler & ControlHandlerType.ROTATE && curHandlerType ^ ControlHandlerType.ROTATE) {\n        _sphericalDelta.theta = _sphericalDump.theta *= 1 - this.dampingFactor;\n        _sphericalDelta.phi = _sphericalDump.phi *= 1 - this.dampingFactor;\n      }\n    }\n    if (curHandlerType === ControlHandlerType.None && this.autoRotate) {\n      const rotateAngle = (this.autoRotateSpeed / 1000) * deltaTime;\n      _sphericalDelta.theta -= rotateAngle;\n    }\n  }\n\n  private _rotate(delta: Vector3): void {\n    const radianLeft = ((2 * Math.PI * delta.x) / this.canvas.width) * this.rotateSpeed;\n    this._sphericalDelta.theta -= radianLeft;\n    const radianUp = ((2 * Math.PI * delta.y) / this.canvas.height) * this.rotateSpeed;\n    this._sphericalDelta.phi -= radianUp;\n    if (this.enableDamping) {\n      this._sphericalDump.theta = -radianLeft;\n      this._sphericalDump.phi = -radianUp;\n    }\n  }\n\n  private _zoom(delta: Vector3): void {\n    if (delta.y > 0) {\n      this._scale /= Math.pow(0.95, this.zoomSpeed);\n    } else if (delta.y < 0) {\n      this._scale *= Math.pow(0.95, this.zoomSpeed);\n    }\n  }\n\n  private _pan(delta: Vector3): void {\n    const { cameraTransform } = this;\n    const { elements } = cameraTransform.worldMatrix;\n    const { height } = this.canvas;\n    const targetDistance =\n      Vector3.distance(cameraTransform.position, this.target) * (this.camera.fieldOfView / 2) * (Math.PI / 180);\n    const distanceLeft = -2 * delta.x * (targetDistance / height);\n    const distanceUp = 2 * delta.y * (targetDistance / height);\n    this._panOffset.x += elements[0] * distanceLeft + elements[4] * distanceUp;\n    this._panOffset.y += elements[1] * distanceLeft + elements[5] * distanceUp;\n    this._panOffset.z += elements[2] * distanceLeft + elements[6] * distanceUp;\n  }\n\n  private _updateTransform(): void {\n    const { cameraTransform, target, _tempVec3, _spherical, _sphericalDelta, _panOffset } = this;\n    _tempVec3.copyFrom(cameraTransform.worldUp);\n    this._atTheBack = _tempVec3.y <= 0;\n    Vector3.subtract(cameraTransform.position, target, _tempVec3);\n    _spherical.setFromVec3(_tempVec3, this._atTheBack);\n    _spherical.theta += _sphericalDelta.theta;\n    _spherical.phi += _sphericalDelta.phi;\n    _spherical.theta = Math.max(this.minAzimuthAngle, Math.min(this.maxAzimuthAngle, _spherical.theta));\n    _spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, _spherical.phi));\n    _spherical.makeSafe();\n    if (this._scale !== 1) {\n      this._zoomFrag = _spherical.radius * (this._scale - 1);\n    }\n    _spherical.radius += this._zoomFrag;\n    _spherical.radius = Math.max(this.minDistance, Math.min(this.maxDistance, _spherical.radius));\n    this._atTheBack = _spherical.setToVec3(_tempVec3);\n    Vector3.add(target.add(_panOffset), _tempVec3, cameraTransform.worldPosition);\n    cameraTransform.lookAt(target, _tempVec3.copyFrom(this.up).scale(this._atTheBack ? -1 : 1));\n    /** Reset cache value. */\n    this._zoomFrag = 0;\n    this._scale = 1;\n    _sphericalDelta.set(0, 0, 0);\n    _panOffset.set(0, 0, 0);\n  }\n}\n"],"names":["OrbitControl","inputDevices","ControlKeyboard","ControlPointer","ControlWheel","autoRotate","autoRotateSpeed","Math","PI","enableDamping","rotateSpeed","zoomSpeed","keyPanSpeed","dampingFactor","zoomFactor","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","_enableKeys","_up","Vector3","_target","_atTheBack","_spherical","Spherical","_sphericalDelta","_sphericalDump","_zoomFrag","_scale","_panOffset","_tempVec3","_enableHandler","ControlHandlerType","All","onAwake","engine","entity","canvas","input","inputManager","camera","getComponent","Camera","cameraTransform","transform","setYAxis","onUpdate","deltaTime","_updateInputDelta","_updateTransform","curHandlerType","None","delta","enableHandler","i","length","handler","handlerType","onUpdateHandler","onUpdateDelta","ROTATE","_rotate","ZOOM","_zoom","PAN","_pan","theta","phi","rotateAngle","radianLeft","x","width","radianUp","y","height","pow","elements","worldMatrix","targetDistance","distance","position","target","fieldOfView","distanceLeft","distanceUp","z","copyFrom","worldUp","subtract","setFromVec3","max","min","makeSafe","radius","setToVec3","add","worldPosition","lookAt","up","scale","set","enableKeys","value","push","splice","enableRotate","enableZoom","enablePan","Script"],"mappings":"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"}