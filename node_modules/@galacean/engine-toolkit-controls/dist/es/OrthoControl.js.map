{"version":3,"file":"OrthoControl.js","sources":["../../src/OrthoControl.ts"],"sourcesContent":["import { Camera, Canvas, Entity, InputManager, Script, Transform, Vector3 } from \"@galacean/engine\";\nimport { ControlHandlerType } from \"./enums/ControlHandlerType\";\nimport { IControlInput } from \"./inputDevice/IControlInput\";\nimport { ControlKeyboard } from \"./inputDevice/ControlKeyboard\";\nimport { ControlPointer } from \"./inputDevice/ControlPointer\";\nimport { ControlWheel } from \"./inputDevice/ControlWheel\";\n\n/**\n * The camera's track controller, can rotate, zoom, pan, support mouse and touch events.\n */\nexport class OrthoControl extends Script {\n  canvas: Canvas;\n  input: InputManager;\n  inputDevices: IControlInput[] = [ControlKeyboard, ControlPointer, ControlWheel];\n  camera: Camera;\n  cameraTransform: Transform;\n\n  /** Target position. */\n  target: Vector3 = new Vector3();\n  /** Up vector */\n  up: Vector3 = new Vector3(0, 1, 0);\n  /** Whether to automatically rotate the camera, the default is false. */\n  autoRotate: boolean = false;\n  /** The radian of automatic rotation per second. */\n  autoRotateSpeed: number = Math.PI;\n  /** Whether to enable keyboard. */\n  enableKeys: boolean = false;\n  /** Whether to enable camera damping, the default is true. */\n  enableDamping: boolean = true;\n  /** Rotation speed, default is 1.0 . */\n  rotateSpeed: number = 1.0;\n  /** Camera zoom speed, the default is 1.0. */\n  zoomSpeed: number = 1.0;\n  /** Keyboard translation speed, the default is 7.0 . */\n  keyPanSpeed: number = 7.0;\n  /** Rotation damping parameter, default is 0.1 . */\n  dampingFactor: number = 0.1;\n  /** Zoom damping parameter, default is 0.2 . */\n  zoomFactor: number = 0.2;\n  /**  The minimum distance, the default is 0.1, should be greater than 0. */\n  minDistance: number = 0.1;\n  /** The maximum distance, the default is infinite, should be greater than the minimum distance. */\n  maxDistance: number = Infinity;\n  /** Minimum zoom speed, the default is 0.0. */\n  minZoom: number = 0.0;\n  /** Maximum zoom speed, the default is positive infinity. */\n  maxZoom: number = Infinity;\n  /** The minimum radian in the vertical direction, the default is 0 radian, the value range is 0 - Math.PI. */\n  minPolarAngle: number = 0.0;\n  /** The maximum radian in the vertical direction, the default is Math.PI, and the value range is 0 - Math.PI. */\n  maxPolarAngle: number = Math.PI;\n  /** The minimum radian in the horizontal direction, the default is negative infinity. */\n  minAzimuthAngle: number = -Infinity;\n  /** The maximum radian in the horizontal direction, the default is positive infinity.  */\n  maxAzimuthAngle: number = Infinity;\n\n  private _zoomScaleUnit: number = 2;\n  private _scale: number = 1;\n  private _panOffset: Vector3 = new Vector3();\n  private _tempVec3: Vector3 = new Vector3();\n  private _enableHandler: number = ControlHandlerType.All;\n\n  /**\n   *  Return Whether to enable rotation, the default is true.\n   */\n  get enableRotate(): boolean {\n    return (this._enableHandler & ControlHandlerType.ROTATE) !== 0;\n  }\n\n  set enableRotate(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.ROTATE;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.ROTATE;\n    }\n  }\n\n  /**\n   *  Whether to enable camera damping, the default is true.\n   */\n  get enableZoom(): boolean {\n    return (this._enableHandler & ControlHandlerType.ZOOM) !== 0;\n  }\n\n  set enableZoom(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.ZOOM;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.ZOOM;\n    }\n  }\n\n  /**\n   *  Whether to enable translation, the default is true.\n   */\n  get enablePan(): boolean {\n    return (this._enableHandler & ControlHandlerType.PAN) !== 0;\n  }\n\n  set enablePan(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.PAN;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.PAN;\n    }\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.enableRotate = false;\n  }\n\n  override onAwake(): void {\n    const { engine, entity } = this;\n    this.canvas = engine.canvas;\n    this.input = engine.inputManager;\n    this.camera = entity.getComponent(Camera);\n    this.cameraTransform = entity.transform;\n  }\n\n  override onUpdate(deltaTime: number): void {\n    /** Update this._sphericalDelta, this._scale and this._panOffset. */\n    this._updateInputDelta(deltaTime);\n    /** Update camera's transform. */\n    this._updateCamera();\n  }\n\n  private _updateInputDelta(deltaTime: number): void {\n    let curHandlerType = ControlHandlerType.None;\n    const { _tempVec3: delta, _enableHandler: enableHandler } = this;\n    const { inputDevices, input } = this;\n    for (let i = inputDevices.length - 1; i >= 0; i--) {\n      const handler = inputDevices[i];\n      const handlerType = handler.onUpdateHandler(input);\n      if (handlerType & enableHandler) {\n        curHandlerType |= handlerType;\n        handler.onUpdateDelta(this, delta);\n        switch (handlerType) {\n          case ControlHandlerType.ZOOM:\n            this._zoom(delta);\n            break;\n          case ControlHandlerType.PAN:\n            this._pan(delta);\n            break;\n          default:\n            break;\n        }\n      }\n    }\n  }\n\n  private _zoom(delta: Vector3): void {\n    if (delta.y > 0) {\n      this._scale /= Math.pow(0.95, this.zoomSpeed);\n    } else if (delta.y < 0) {\n      this._scale *= Math.pow(0.95, this.zoomSpeed);\n    }\n  }\n\n  private _pan(delta: Vector3): void {\n    this._panOffset.copyFrom(delta);\n  }\n\n  private _updateCamera(): void {\n    const { cameraTransform, camera, _panOffset } = this;\n\n    // Update Zoom\n    const sizeDiff = this._zoomScaleUnit * Math.log1p(camera.orthographicSize) * (this._scale - 1);\n    const size = camera.orthographicSize + sizeDiff;\n    camera.orthographicSize = Math.max(this.minZoom, Math.min(this.maxZoom, size));\n\n    // Update X and Y\n    const { width, height } = this.canvas;\n    const { x, y } = _panOffset;\n    const doubleOrthographicSize = camera.orthographicSize * 2;\n    const width3D = doubleOrthographicSize * camera.aspectRatio;\n    const height3D = doubleOrthographicSize;\n    const cameraPosition = cameraTransform.position;\n    const curPosition = this._tempVec3;\n    curPosition.x = cameraPosition.x - (x * width3D) / width;\n    curPosition.y = cameraPosition.y + (y * height3D) / height;\n    curPosition.z = cameraPosition.z;\n\n    // Update camera transform\n    cameraTransform.position = curPosition;\n    /** Reset cache value. */\n    this._scale = 1;\n    _panOffset.set(0, 0, 0);\n  }\n}\n"],"names":["OrthoControl","entity","inputDevices","ControlKeyboard","ControlPointer","ControlWheel","target","Vector3","up","autoRotate","autoRotateSpeed","Math","PI","enableKeys","enableDamping","rotateSpeed","zoomSpeed","keyPanSpeed","dampingFactor","zoomFactor","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","_zoomScaleUnit","_scale","_panOffset","_tempVec3","_enableHandler","ControlHandlerType","All","enableRotate","onAwake","engine","canvas","input","inputManager","camera","getComponent","Camera","cameraTransform","transform","onUpdate","deltaTime","_updateInputDelta","_updateCamera","None","delta","enableHandler","i","length","handler","handlerType","onUpdateHandler","onUpdateDelta","ZOOM","_zoom","PAN","_pan","y","pow","copyFrom","sizeDiff","log1p","orthographicSize","size","max","min","width","height","x","doubleOrthographicSize","width3D","aspectRatio","height3D","cameraPosition","position","curPosition","z","set","ROTATE","value","enableZoom","enablePan","Script"],"mappings":"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"}