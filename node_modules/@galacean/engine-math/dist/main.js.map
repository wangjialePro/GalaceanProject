{"version":3,"file":"main.js","sources":["../src/enums/ContainmentType.ts","../src/enums/PlaneIntersectionType.ts","../src/enums/FrustumFace.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_create_class.js","../src/MathUtil.ts","../src/Vector3.ts","../src/BoundingSphere.ts","../src/BoundingBox.ts","../src/CollisionUtil.ts","../src/Plane.ts","../src/BoundingFrustum.ts","../src/Matrix3x3.ts","../src/Quaternion.ts","../src/Matrix.ts","../src/Ray.ts","../src/Vector2.ts","../src/Vector4.ts","../src/Color.ts","../src/Rect.ts","../src/SphericalHarmonics3.ts"],"sourcesContent":["/**\n * Defines how the bounding volumes intersects or contain one another.\n */\nexport enum ContainmentType {\n  /** Indicates that there is no overlap between two bounding volumes. */\n  Disjoint,\n  /** Indicates that one bounding volume completely contains another volume. */\n  Contains,\n  /** Indicates that bounding volumes partially overlap one another. */\n  Intersects\n}\n","/**\n * Defines the intersection between a plane and a bounding volume.\n */\nexport enum PlaneIntersectionType {\n  /** There is no intersection, the bounding volume is in the back of the plane. */\n  Back,\n  /** There is no intersection, the bounding volume is in the front of the plane. */\n  Front,\n  /** The plane is intersected. */\n  Intersecting\n}\n","/**\n * Frustum face\n */\nexport enum FrustumFace {\n  /** Near face */\n  Near,\n  /** Far face */\n  Far,\n  /** Left face */\n  Left,\n  /** Right face */\n  Right,\n  /** Bottom face */\n  Bottom,\n  /** Top face */\n  Top\n}\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","/**\n * Common utility methods for math operations.\n */\nexport class MathUtil {\n  /** The value for which all absolute numbers smaller than are considered equal to zero. */\n  static readonly zeroTolerance: number = 1e-6;\n  /** The conversion factor that radian to degree. */\n  static readonly radToDegreeFactor: number = 180 / Math.PI;\n  /** The conversion factor that degree to radian. */\n  static readonly degreeToRadFactor: number = Math.PI / 180;\n\n  /**\n   * Clamps the specified value.\n   * @param v - The specified value\n   * @param min - The min value\n   * @param max - The max value\n   * @returns The result of clamping a value between min and max\n   */\n  static clamp(v: number, min: number, max: number): number {\n    return Math.max(min, Math.min(max, v));\n  }\n\n  /**\n   * Checks if a and b are almost equals.\n   * The absolute value of the difference between a and b is close to zero.\n   * @param a - The left value to compare\n   * @param b - The right value to compare\n   * @returns True if a almost equal to b, false otherwise\n   */\n  static equals(a: number, b: number): boolean {\n    return Math.abs(a - b) <= MathUtil.zeroTolerance;\n  }\n\n  /**\n   * Determines whether the specified v is pow2.\n   * @param v - The specified v\n   * @returns True if the specified v is pow2, false otherwise\n   */\n  static isPowerOf2(v: number): boolean {\n    return (v & (v - 1)) === 0;\n  }\n\n  /**\n   * Modify the specified r from radian to degree.\n   * @param r - The specified r\n   * @returns The degree value\n   */\n  static radianToDegree(r: number): number {\n    return r * MathUtil.radToDegreeFactor;\n  }\n\n  /**\n   * Modify the specified d from degree to radian.\n   * @param d - The specified d\n   * @returns The radian value\n   */\n  static degreeToRadian(d: number): number {\n    return d * MathUtil.degreeToRadFactor;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector4 } from \"./Vector4\";\n\n/**\n * Describes a 3D-vector.\n */\nexport class Vector3 implements IClone<Vector3>, ICopy<Vector3Like, Vector3> {\n  /** @internal */\n  static readonly _zero = new Vector3(0.0, 0.0, 0.0);\n  /** @internal */\n  static readonly _one = new Vector3(1.0, 1.0, 1.0);\n\n  /**\n   * Determines the sum of two vectors.\n   * @param left - The first vector to add\n   * @param right - The second vector to add\n   * @param out - The sum of two vectors\n   */\n  static add(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = left._x + right._x;\n    out._y = left._y + right._y;\n    out._z = left._z + right._z;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the difference between two vectors.\n   * @param left - The first vector to subtract\n   * @param right - The second vector to subtract\n   * @param out - The difference between two vectors\n   */\n  static subtract(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = left._x - right._x;\n    out._y = left._y - right._y;\n    out._z = left._z - right._z;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the product of two vectors.\n   * @param left - The first vector to multiply\n   * @param right - The second vector to multiply\n   * @param out - The product of two vectors\n   */\n  static multiply(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = left._x * right._x;\n    out._y = left._y * right._y;\n    out._z = left._z * right._z;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the divisor of two vectors.\n   * @param left - The first vector to divide\n   * @param right - The second vector to divide\n   * @param out - The divisor of two vectors\n   */\n  static divide(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = left._x / right._x;\n    out._y = left._y / right._y;\n    out._z = left._z / right._z;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the dot product of two vectors.\n   * @param left - The first vector to dot\n   * @param right - The second vector to dot\n   * @returns The dot product of two vectors\n   */\n  static dot(left: Vector3, right: Vector3): number {\n    return left._x * right._x + left._y * right._y + left._z * right._z;\n  }\n\n  /**\n   * Determines the cross product of two vectors.\n   * @param left - The first vector to cross\n   * @param right - The second vector to cross\n   * @param out - The cross product of two vectors\n   */\n  static cross(left: Vector3, right: Vector3, out: Vector3): void {\n    const ax = left._x;\n    const ay = left._y;\n    const az = left._z;\n    const bx = right._x;\n    const by = right._y;\n    const bz = right._z;\n\n    out.set(ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx);\n  }\n\n  /**\n   * Determines the distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The distance of two vectors\n   */\n  static distance(a: Vector3, b: Vector3): number {\n    const x = b._x - a._x;\n    const y = b._y - a._y;\n    const z = b._z - a._z;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n\n  /**\n   * Determines the squared distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The squared distance of two vectors\n   */\n  static distanceSquared(a: Vector3, b: Vector3): number {\n    const x = b._x - a._x;\n    const y = b._y - a._y;\n    const z = b._z - a._z;\n    return x * x + y * y + z * z;\n  }\n\n  /**\n   * Determines whether the specified vectors are equals.\n   * @param left - The first vector to compare\n   * @param right - The second vector to compare\n   * @returns True if the specified vectors are equals, false otherwise\n   */\n  static equals(left: Vector3, right: Vector3): boolean {\n    return (\n      MathUtil.equals(left._x, right._x) && MathUtil.equals(left._y, right._y) && MathUtil.equals(left._z, right._z)\n    );\n  }\n\n  /**\n   * Performs a linear interpolation between two vectors.\n   * @param start - The first vector\n   * @param end - The second vector\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two vectors\n   */\n  static lerp(start: Vector3, end: Vector3, t: number, out: Vector3): void {\n    const { _x, _y, _z } = start;\n    out._x = _x + (end._x - _x) * t;\n    out._y = _y + (end._y - _y) * t;\n    out._z = _z + (end._z - _z) * t;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the largest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the largest components of the specified vectors\n   */\n  static max(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = Math.max(left._x, right._x);\n    out._y = Math.max(left._y, right._y);\n    out._z = Math.max(left._z, right._z);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the smallest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the smallest components of the specified vectors\n   */\n  static min(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = Math.min(left._x, right._x);\n    out._y = Math.min(left._y, right._y);\n    out._z = Math.min(left._z, right._z);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Reverses the direction of a given vector.\n   * @param a - The vector to negate\n   * @param out - The vector facing in the opposite direction\n   */\n  static negate(a: Vector3, out: Vector3): void {\n    out._x = -a._x;\n    out._y = -a._y;\n    out._z = -a._z;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Converts the vector into a unit vector.\n   * @param a - The vector to normalize\n   * @param out - The normalized vector\n   */\n  static normalize(a: Vector3, out: Vector3): void {\n    const { _x, _y, _z } = a;\n    let len = Math.sqrt(_x * _x + _y * _y + _z * _z);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out.set(_x * len, _y * len, _z * len);\n    }\n  }\n\n  /**\n   * Scale a vector by the given value.\n   * @param a - The vector to scale\n   * @param s - The amount by which to scale the vector\n   * @param out - The scaled vector\n   */\n  static scale(a: Vector3, s: number, out: Vector3): void {\n    out._x = a._x * s;\n    out._y = a._y * s;\n    out._z = a._z * s;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a normal transformation using the given 4x4 matrix.\n   * @remarks\n   * A normal transform performs the transformation with the assumption that the w component\n   * is zero. This causes the fourth row and fourth column of the matrix to be unused. The\n   * end result is a vector that is not translated, but all other transformation properties\n   * apply. This is often preferred for normal vectors as normals purely represent direction\n   * rather than location because normal vectors should not be translated.\n   * @param v - The normal vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed normal\n   */\n  static transformNormal(v: Vector3, m: Matrix, out: Vector3): void {\n    const { _x, _y, _z } = v;\n    const e = m.elements;\n    out._x = _x * e[0] + _y * e[4] + _z * e[8];\n    out._y = _x * e[1] + _y * e[5] + _z * e[9];\n    out._z = _x * e[2] + _y * e[6] + _z * e[10];\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a transformation using the given 4x4 matrix.\n   * @param v - The vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed vector3\n   */\n  static transformToVec3(v: Vector3, m: Matrix, out: Vector3): void {\n    const { _x, _y, _z } = v;\n    const e = m.elements;\n\n    out._x = _x * e[0] + _y * e[4] + _z * e[8] + e[12];\n    out._y = _x * e[1] + _y * e[5] + _z * e[9] + e[13];\n    out._z = _x * e[2] + _y * e[6] + _z * e[10] + e[14];\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a transformation from vector3 to vector4 using the given 4x4 matrix.\n   * @param v - The vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed vector4\n   */\n  static transformToVec4(v: Vector3, m: Matrix, out: Vector4): void {\n    const { _x, _y, _z } = v;\n    const e = m.elements;\n    out._x = _x * e[0] + _y * e[4] + _z * e[8] + e[12];\n    out._y = _x * e[1] + _y * e[5] + _z * e[9] + e[13];\n    out._z = _x * e[2] + _y * e[6] + _z * e[10] + e[14];\n    out._w = _x * e[3] + _y * e[7] + _z * e[11] + e[15];\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a coordinate transformation using the given 4x4 matrix.\n   *\n   * @remarks\n   * A coordinate transform performs the transformation with the assumption that the w component\n   * is one. The four dimensional vector obtained from the transformation operation has each\n   * component in the vector divided by the w component. This forces the w-component to be one and\n   * therefore makes the vector homogeneous. The homogeneous vector is often preferred when working\n   * with coordinates as the w component can safely be ignored.\n   * @param v - The coordinate vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed coordinates\n   */\n  static transformCoordinate(v: Vector3, m: Matrix, out: Vector3): void {\n    const { _x, _y, _z } = v;\n    const e = m.elements;\n    let w = _x * e[3] + _y * e[7] + _z * e[11] + e[15];\n    w = 1.0 / w;\n\n    out._x = (_x * e[0] + _y * e[4] + _z * e[8] + e[12]) * w;\n    out._y = (_x * e[1] + _y * e[5] + _z * e[9] + e[13]) * w;\n    out._z = (_x * e[2] + _y * e[6] + _z * e[10] + e[14]) * w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a transformation using the given quaternion.\n   * @param v - The vector to transform\n   * @param quaternion - The transform quaternion\n   * @param out - The transformed vector\n   */\n  static transformByQuat(v: Vector3, quaternion: Quaternion, out: Vector3): void {\n    const { _x, _y, _z } = v;\n    const { _x: qx, _y: qy, _z: qz, _w: qw } = quaternion;\n\n    // calculate quat * vec\n    const ix = qw * _x + qy * _z - qz * _y;\n    const iy = qw * _y + qz * _x - qx * _z;\n    const iz = qw * _z + qx * _y - qy * _x;\n    const iw = -qx * _x - qy * _y - qz * _z;\n\n    // calculate result * inverse quat\n    out._x = ix * qw - iw * qx - iy * qz + iz * qy;\n    out._y = iy * qw - iw * qy - iz * qx + ix * qz;\n    out._z = iz * qw - iw * qz - ix * qy + iy * qx;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /** @internal */\n  _x: number;\n  /** @internal */\n  _y: number;\n  /** @internal */\n  _z: number;\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  /**\n   * The x component of the vector.\n   */\n  public get x(): number {\n    return this._x;\n  }\n\n  public set x(value: number) {\n    this._x = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The y component of the vector.\n   */\n  public get y(): number {\n    return this._y;\n  }\n\n  public set y(value: number) {\n    this._y = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The z component of the vector.\n   */\n  public get z(): number {\n    return this._z;\n  }\n\n  public set z(value: number) {\n    this._z = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of Vector3.\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   * @param z - The z component of the vector, default 0\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n  }\n\n  /**\n   * Set the value of this vector.\n   * @param x - The x component of the vector\n   * @param y - The y component of the vector\n   * @param z - The z component of the vector\n   * @returns This vector\n   */\n  set(x: number, y: number, z: number): Vector3 {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the sum of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  add(right: Vector3): Vector3 {\n    this._x += right._x;\n    this._y += right._y;\n    this._z += right._z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the difference of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  subtract(right: Vector3): Vector3 {\n    this._x -= right._x;\n    this._y -= right._y;\n    this._z -= right._z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the product of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  multiply(right: Vector3): Vector3 {\n    this._x *= right._x;\n    this._y *= right._y;\n    this._z *= right._z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the divisor of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  divide(right: Vector3): Vector3 {\n    this._x /= right._x;\n    this._y /= right._y;\n    this._z /= right._z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Calculate the length of this vector.\n   * @returns The length of this vector\n   */\n  length(): number {\n    const { _x, _y, _z } = this;\n    return Math.sqrt(_x * _x + _y * _y + _z * _z);\n  }\n\n  /**\n   * Calculate the squared length of this vector.\n   * @returns The squared length of this vector\n   */\n  lengthSquared(): number {\n    const { _x, _y, _z } = this;\n    return _x * _x + _y * _y + _z * _z;\n  }\n\n  /**\n   * Reverses the direction of this vector.\n   * @returns This vector\n   */\n  negate(): Vector3 {\n    this._x = -this._x;\n    this._y = -this._y;\n    this._z = -this._z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Converts this vector into a unit vector.\n   * @returns This vector\n   */\n  normalize(): Vector3 {\n    Vector3.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Scale this vector by the given value.\n   * @param s - The amount by which to scale the vector\n   * @returns This vector\n   */\n  scale(s: number): Vector3 {\n    this._x *= s;\n    this._y *= s;\n    this._z *= s;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * This vector performs a normal transformation using the given 4x4 matrix.\n   * @remarks\n   * A normal transform performs the transformation with the assumption that the w component\n   * is zero. This causes the fourth row and fourth column of the matrix to be unused. The\n   * end result is a vector that is not translated, but all other transformation properties\n   * apply. This is often preferred for normal vectors as normals purely represent direction\n   * rather than location because normal vectors should not be translated.\n   * @param m - The transform matrix\n   * @returns This vector\n   */\n  transformNormal(m: Matrix): Vector3 {\n    Vector3.transformNormal(this, m, this);\n    return this;\n  }\n\n  /**\n   * This vector performs a transformation using the given 4x4 matrix.\n   * @param m - The transform matrix\n   * @returns This vector\n   */\n  transformToVec3(m: Matrix): Vector3 {\n    Vector3.transformToVec3(this, m, this);\n    return this;\n  }\n\n  /**\n   * This vector performs a coordinate transformation using the given 4x4 matrix.\n   * @remarks\n   * A coordinate transform performs the transformation with the assumption that the w component\n   * is one. The four dimensional vector obtained from the transformation operation has each\n   * component in the vector divided by the w component. This forces the w-component to be one and\n   * therefore makes the vector homogeneous. The homogeneous vector is often preferred when working\n   * with coordinates as the w component can safely be ignored.\n   * @param m - The transform matrix\n   * @returns This vector\n   */\n  transformCoordinate(m: Matrix): Vector3 {\n    Vector3.transformCoordinate(this, m, this);\n    return this;\n  }\n\n  /**\n   * This vector performs a transformation using the given quaternion.\n   * @param quaternion - The transform quaternion\n   * @returns This vector\n   */\n  transformByQuat(quaternion: Quaternion): Vector3 {\n    Vector3.transformByQuat(this, quaternion, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this vector.\n   * @returns A clone of this vector\n   */\n  clone(): Vector3 {\n    return new Vector3(this._x, this._y, this._z);\n  }\n\n  /**\n   * Copy from vector3 like object.\n   * @param source - Vector3 like object.\n   * @returns This vector\n   */\n  copyFrom(source: Vector3Like): Vector3 {\n    this._x = source.x;\n    this._y = source.y;\n    this._z = source.z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this vector from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This vector\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Vector3 {\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this vector to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this._x;\n    out[outOffset + 1] = this._y;\n    out[outOffset + 2] = this._z;\n  }\n\n  /**\n   * Serialize this vector to a JSON representation.\n   * @returns A JSON representation of this vector\n   */\n  toJSON(): Vector3Like {\n    return {\n      x: this._x,\n      y: this._y,\n      z: this._z\n    };\n  }\n}\n\ninterface Vector3Like {\n  /** {@inheritDoc Vector3.x} */\n  x: number;\n  /** {@inheritDoc Vector3.y} */\n  y: number;\n  /** {@inheritDoc Vector3.z} */\n  z: number;\n}\n","import { BoundingBox } from \"./BoundingBox\";\nimport { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * A bounding sphere.\n * */\nexport class BoundingSphere implements IClone<BoundingSphere>, ICopy<BoundingSphere, BoundingSphere> {\n  private static _tempVec30: Vector3 = new Vector3();\n\n  /**\n   * Calculate a bounding sphere that fully contains the given points.\n   * @param points - The given points\n   * @param out - The calculated bounding sphere\n   */\n  static fromPoints(points: Vector3[], out: BoundingSphere): void {\n    if (!points || points.length === 0) {\n      throw new Error(\"points must be array and length must > 0\");\n    }\n\n    const len = points.length;\n    const center = BoundingSphere._tempVec30;\n    center.x = center.y = center.z = 0;\n\n    // Calculate the center of the sphere.\n    for (let i = 0; i < len; ++i) {\n      Vector3.add(points[i], center, center);\n    }\n\n    // The center of the sphere.\n    Vector3.scale(center, 1 / len, out.center);\n\n    // Calculate the radius of the sphere.\n    let radius = 0.0;\n    for (let i = 0; i < len; ++i) {\n      const distance = Vector3.distanceSquared(center, points[i]);\n      distance > radius && (radius = distance);\n    }\n    // The radius of the sphere.\n    out.radius = Math.sqrt(radius);\n  }\n\n  /**\n   * Calculate a bounding sphere from a given box.\n   * @param box - The given box\n   * @param out - The calculated bounding sphere\n   */\n  static fromBox(box: BoundingBox, out: BoundingSphere): void {\n    const { center } = out;\n    const { min, max } = box;\n\n    center.x = (min.x + max.x) * 0.5;\n    center.y = (min.y + max.y) * 0.5;\n    center.z = (min.z + max.z) * 0.5;\n    out.radius = Vector3.distance(center, max);\n  }\n\n  /** The center point of the sphere. */\n  public readonly center: Vector3 = new Vector3();\n  /** The radius of the sphere. */\n  public radius: number = 0;\n\n  /**\n   * Constructor of BoundingSphere.\n   * @param center - The center point of the sphere\n   * @param radius - The radius of the sphere\n   */\n  constructor(center: Vector3 = null, radius: number = 0) {\n    center && this.center.copyFrom(center);\n    this.radius = radius;\n  }\n\n  /**\n   * Creates a clone of this sphere.\n   * @returns A clone of this sphere\n   */\n  clone(): BoundingSphere {\n    return new BoundingSphere(this.center, this.radius);\n  }\n\n  /**\n   * Copy this sphere from the specified sphere.\n   * @param source - The specified sphere\n   * @returns This sphere\n   */\n  copyFrom(source: BoundingSphere): BoundingSphere {\n    this.center.copyFrom(source.center);\n    this.radius = source.radius;\n    return this;\n  }\n}\n","import { BoundingSphere } from \"./BoundingSphere\";\nimport { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { Matrix } from \"./Matrix\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Axis Aligned Bound Box (AABB).\n */\nexport class BoundingBox implements IClone<BoundingBox>, ICopy<BoundingBox, BoundingBox> {\n  private static _tempVec30: Vector3 = new Vector3();\n  private static _tempVec31: Vector3 = new Vector3();\n\n  /**\n   * Calculate a bounding box from the center point and the extent of the bounding box.\n   * @param center - The center point\n   * @param extent - The extent of the bounding box\n   * @param out - The calculated bounding box\n   */\n  static fromCenterAndExtent(center: Vector3, extent: Vector3, out: BoundingBox): void {\n    Vector3.subtract(center, extent, out.min);\n    Vector3.add(center, extent, out.max);\n  }\n\n  /**\n   * Calculate a bounding box that fully contains the given points.\n   * @param points - The given points\n   * @param out - The calculated bounding box\n   */\n  static fromPoints(points: Vector3[], out: BoundingBox): void {\n    if (!points || points.length === 0) {\n      throw new Error(\"points must be array and length must > 0\");\n    }\n\n    const { min, max } = out;\n    min.x = min.y = min.z = Number.MAX_VALUE;\n    max.x = max.y = max.z = -Number.MAX_VALUE;\n\n    for (let i = 0, l = points.length; i < l; ++i) {\n      const point = points[i];\n      Vector3.min(min, point, min);\n      Vector3.max(max, point, max);\n    }\n  }\n\n  /**\n   * Calculate a bounding box from a given sphere.\n   * @param sphere - The given sphere\n   * @param out - The calculated bounding box\n   */\n  static fromSphere(sphere: BoundingSphere, out: BoundingBox): void {\n    const { center, radius } = sphere;\n    const { min, max } = out;\n\n    min.x = center.x - radius;\n    min.y = center.y - radius;\n    min.z = center.z - radius;\n    max.x = center.x + radius;\n    max.y = center.y + radius;\n    max.z = center.z + radius;\n  }\n\n  /**\n   * Transform a bounding box.\n   * @param source - The original bounding box\n   * @param matrix - The transform to apply to the bounding box\n   * @param out - The transformed bounding box\n   */\n  static transform(source: BoundingBox, matrix: Matrix, out: BoundingBox): void {\n    // https://zeux.io/2010/10/17/aabb-from-obb-with-component-wise-abs/\n    const center = BoundingBox._tempVec30;\n    const extent = BoundingBox._tempVec31;\n    source.getCenter(center);\n    source.getExtent(extent);\n    Vector3.transformCoordinate(center, matrix, center);\n\n    const { x, y, z } = extent;\n    const e = matrix.elements;\n    extent.x = Math.abs(x * e[0]) + Math.abs(y * e[4]) + Math.abs(z * e[8]);\n    extent.y = Math.abs(x * e[1]) + Math.abs(y * e[5]) + Math.abs(z * e[9]);\n    extent.z = Math.abs(x * e[2]) + Math.abs(y * e[6]) + Math.abs(z * e[10]);\n\n    // set min、max\n    Vector3.subtract(center, extent, out.min);\n    Vector3.add(center, extent, out.max);\n  }\n\n  /**\n   * Calculate a bounding box that is as large as the total combined area of the two specified boxes.\n   * @param box1 - The first box to merge\n   * @param box2 - The second box to merge\n   * @param out - The merged bounding box\n   * @returns The merged bounding box\n   */\n  static merge(box1: BoundingBox, box2: BoundingBox, out: BoundingBox): BoundingBox {\n    Vector3.min(box1.min, box2.min, out.min);\n    Vector3.max(box1.max, box2.max, out.max);\n    return out;\n  }\n\n  /** The minimum point of the box. */\n  public readonly min: Vector3 = new Vector3();\n  /** The maximum point of the box. */\n  public readonly max: Vector3 = new Vector3();\n\n  /**\n   * Constructor of BoundingBox.\n   * @param min - The minimum point of the box\n   * @param max - The maximum point of the box\n   */\n  constructor(min: Vector3 = null, max: Vector3 = null) {\n    min && this.min.copyFrom(min);\n    max && this.max.copyFrom(max);\n  }\n\n  /**\n   * Get the center point of this bounding box.\n   * @param out - The center point of this bounding box\n   * @returns The center point of this bounding box\n   */\n  getCenter(out: Vector3): Vector3 {\n    Vector3.add(this.min, this.max, out);\n    Vector3.scale(out, 0.5, out);\n    return out;\n  }\n\n  /**\n   * Get the extent of this bounding box.\n   * @param out - The extent of this bounding box\n   * @returns The extent of this bounding box\n   */\n  getExtent(out: Vector3): Vector3 {\n    Vector3.subtract(this.max, this.min, out);\n    Vector3.scale(out, 0.5, out);\n    return out;\n  }\n\n  /**\n   * Get the eight corners of this bounding box.\n   * @param out - An array of points representing the eight corners of this bounding box\n   * @returns An array of points representing the eight corners of this bounding box\n   */\n  getCorners(out: Vector3[] = []): Vector3[] {\n    const { min, max } = this;\n    const minX = min.x;\n    const minY = min.y;\n    const minZ = min.z;\n    const maxX = max.x;\n    const maxY = max.y;\n    const maxZ = max.z;\n    const len = out.length;\n\n    // The array length is less than 8 to make up\n    if (len < 8) {\n      for (let i = 0, l = 8 - len; i < l; ++i) {\n        out[len + i] = new Vector3();\n      }\n    }\n\n    out[0].set(minX, maxY, maxZ);\n    out[1].set(maxX, maxY, maxZ);\n    out[2].set(maxX, minY, maxZ);\n    out[3].set(minX, minY, maxZ);\n    out[4].set(minX, maxY, minZ);\n    out[5].set(maxX, maxY, minZ);\n    out[6].set(maxX, minY, minZ);\n    out[7].set(minX, minY, minZ);\n\n    return out;\n  }\n\n  /**\n   * Transform a bounding box.\n   * @param matrix - The transform to apply to the bounding box\n   * @returns The transformed bounding box\n   */\n  public transform(matrix: Matrix): BoundingBox {\n    BoundingBox.transform(this, matrix, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this box.\n   * @returns A clone of this box\n   */\n  clone(): BoundingBox {\n    return new BoundingBox(this.min, this.max);\n  }\n\n  /**\n   * Copy this bounding box from the specified box.\n   * @param source - The specified box\n   * @returns This bounding box\n   */\n  copyFrom(source: BoundingBox): BoundingBox {\n    this.min.copyFrom(source.min);\n    this.max.copyFrom(source.max);\n    return this;\n  }\n}\n","import { BoundingBox } from \"./BoundingBox\";\nimport { BoundingFrustum } from \"./BoundingFrustum\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { ContainmentType } from \"./enums/ContainmentType\";\nimport { PlaneIntersectionType } from \"./enums/PlaneIntersectionType\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Plane } from \"./Plane\";\nimport { Ray } from \"./Ray\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Contains static methods to help in determining intersections, containment, etc.\n */\nexport class CollisionUtil {\n  private static _tempVec30: Vector3 = new Vector3();\n  private static _tempVec31: Vector3 = new Vector3();\n  private static _tempVec32: Vector3 = new Vector3();\n\n  /**\n   * Calculate the intersection point of three plane.\n   * @param  p1 - Plane 1\n   * @param  p2 - Plane 2\n   * @param  p3 - Plane 3\n   * @param out - intersection point\n   */\n  static intersectionPointThreePlanes(p1: Plane, p2: Plane, p3: Plane, out: Vector3): void {\n    const p1Nor = p1.normal;\n    const p2Nor = p2.normal;\n    const p3Nor = p3.normal;\n\n    Vector3.cross(p2Nor, p3Nor, CollisionUtil._tempVec30);\n    Vector3.cross(p3Nor, p1Nor, CollisionUtil._tempVec31);\n    Vector3.cross(p1Nor, p2Nor, CollisionUtil._tempVec32);\n\n    const a = -Vector3.dot(p1Nor, CollisionUtil._tempVec30);\n    const b = -Vector3.dot(p2Nor, CollisionUtil._tempVec31);\n    const c = -Vector3.dot(p3Nor, CollisionUtil._tempVec32);\n\n    Vector3.scale(CollisionUtil._tempVec30, p1.distance / a, CollisionUtil._tempVec30);\n    Vector3.scale(CollisionUtil._tempVec31, p2.distance / b, CollisionUtil._tempVec31);\n    Vector3.scale(CollisionUtil._tempVec32, p3.distance / c, CollisionUtil._tempVec32);\n\n    Vector3.add(CollisionUtil._tempVec30, CollisionUtil._tempVec31, out);\n    Vector3.add(out, CollisionUtil._tempVec32, out);\n  }\n\n  /**\n   * Calculate the distance from a point to a plane.\n   * @param plane - The plane\n   * @param point - The point\n   * @returns The distance from a point to a plane\n   */\n  static distancePlaneAndPoint(plane: Plane, point: Vector3): number {\n    return Vector3.dot(plane.normal, point) + plane.distance;\n  }\n\n  /**\n   * Get the intersection type between a plane and a point.\n   * @param plane - The plane\n   * @param point - The point\n   * @returns The intersection type\n   */\n  static intersectsPlaneAndPoint(plane: Plane, point: Vector3): PlaneIntersectionType {\n    const distance = CollisionUtil.distancePlaneAndPoint(plane, point);\n    if (distance > 0) {\n      return PlaneIntersectionType.Front;\n    }\n    if (distance < 0) {\n      return PlaneIntersectionType.Back;\n    }\n    return PlaneIntersectionType.Intersecting;\n  }\n\n  /**\n   * Get the intersection type between a plane and a box (AABB).\n   * @param plane - The plane\n   * @param box - The box\n   * @returns The intersection type\n   */\n  static intersectsPlaneAndBox(plane: Plane, box: BoundingBox): PlaneIntersectionType {\n    const { min, max } = box;\n    const { normal } = plane;\n    const front = CollisionUtil._tempVec30;\n    const back = CollisionUtil._tempVec31;\n\n    if (normal.x >= 0) {\n      front.x = max.x;\n      back.x = min.x;\n    } else {\n      front.x = min.x;\n      back.x = max.x;\n    }\n    if (normal.y >= 0) {\n      front.y = max.y;\n      back.y = min.y;\n    } else {\n      front.y = min.y;\n      back.y = max.y;\n    }\n    if (normal.z >= 0) {\n      front.z = max.z;\n      back.z = min.z;\n    } else {\n      front.z = min.z;\n      back.z = max.z;\n    }\n\n    if (CollisionUtil.distancePlaneAndPoint(plane, front) < 0) {\n      return PlaneIntersectionType.Back;\n    }\n\n    if (CollisionUtil.distancePlaneAndPoint(plane, back) > 0) {\n      return PlaneIntersectionType.Front;\n    }\n\n    return PlaneIntersectionType.Intersecting;\n  }\n\n  /**\n   * Get the intersection type between a plane and a sphere.\n   * @param plane - The plane\n   * @param sphere - The sphere\n   * @returns The intersection type\n   */\n  static intersectsPlaneAndSphere(plane: Plane, sphere: BoundingSphere): PlaneIntersectionType {\n    const { center, radius } = sphere;\n    const distance = CollisionUtil.distancePlaneAndPoint(plane, center);\n    if (distance > radius) {\n      return PlaneIntersectionType.Front;\n    }\n    if (distance < -radius) {\n      return PlaneIntersectionType.Back;\n    }\n    return PlaneIntersectionType.Intersecting;\n  }\n\n  /**\n   * Get the intersection type between a ray and a plane.\n   * @param ray - The ray\n   * @param plane - The plane\n   * @returns The distance from ray to plane if intersecting, -1 otherwise\n   */\n  static intersectsRayAndPlane(ray: Ray, plane: Plane): number {\n    const { normal } = plane;\n    const { zeroTolerance } = MathUtil;\n\n    const dir = Vector3.dot(normal, ray.direction);\n    // Parallel\n    if (Math.abs(dir) < zeroTolerance) {\n      return -1;\n    }\n\n    const position = Vector3.dot(normal, ray.origin);\n    let distance = (-plane.distance - position) / dir;\n\n    if (distance < 0) {\n      if (distance < -zeroTolerance) {\n        return -1;\n      }\n\n      distance = 0;\n    }\n\n    return distance;\n  }\n\n  /**\n   * Get the intersection type between a ray and a box (AABB).\n   * @param ray - The ray\n   * @param box - The box\n   * @returns The distance from ray to box if intersecting, -1 otherwise\n   */\n  static intersectsRayAndBox(ray: Ray, box: BoundingBox): number {\n    const { zeroTolerance } = MathUtil;\n    const { origin, direction } = ray;\n    const { min, max } = box;\n    const dirX = direction.x;\n    const dirY = direction.y;\n    const dirZ = direction.z;\n    const oriX = origin.x;\n    const oriY = origin.y;\n    const oriZ = origin.z;\n    let distance = 0;\n    let tmax = Number.MAX_VALUE;\n\n    if (Math.abs(dirX) < zeroTolerance) {\n      if (oriX < min.x || oriX > max.x) {\n        return -1;\n      }\n    } else {\n      const inverse = 1.0 / dirX;\n      let t1 = (min.x - oriX) * inverse;\n      let t2 = (max.x - oriX) * inverse;\n\n      if (t1 > t2) {\n        const temp = t1;\n        t1 = t2;\n        t2 = temp;\n      }\n\n      distance = Math.max(t1, distance);\n      tmax = Math.min(t2, tmax);\n\n      if (distance > tmax) {\n        return -1;\n      }\n    }\n\n    if (Math.abs(dirY) < zeroTolerance) {\n      if (oriY < min.y || oriY > max.y) {\n        return -1;\n      }\n    } else {\n      const inverse = 1.0 / dirY;\n      let t1 = (min.y - oriY) * inverse;\n      let t2 = (max.y - oriY) * inverse;\n\n      if (t1 > t2) {\n        const temp = t1;\n        t1 = t2;\n        t2 = temp;\n      }\n\n      distance = Math.max(t1, distance);\n      tmax = Math.min(t2, tmax);\n\n      if (distance > tmax) {\n        return -1;\n      }\n    }\n\n    if (Math.abs(dirZ) < zeroTolerance) {\n      if (oriZ < min.z || oriZ > max.z) {\n        return -1;\n      }\n    } else {\n      const inverse = 1.0 / dirZ;\n      let t1 = (min.z - oriZ) * inverse;\n      let t2 = (max.z - oriZ) * inverse;\n\n      if (t1 > t2) {\n        const temp = t1;\n        t1 = t2;\n        t2 = temp;\n      }\n\n      distance = Math.max(t1, distance);\n      tmax = Math.min(t2, tmax);\n\n      if (distance > tmax) {\n        return -1;\n      }\n    }\n\n    return distance;\n  }\n\n  /**\n   * Get the intersection type between a ray and a sphere.\n   * @param ray - The ray\n   * @param sphere - The sphere\n   * @returns The distance from ray to sphere if intersecting, -1 otherwise\n   */\n  static intersectsRayAndSphere(ray: Ray, sphere: BoundingSphere): number {\n    const { origin, direction } = ray;\n    const { center, radius } = sphere;\n\n    const m = CollisionUtil._tempVec30;\n    Vector3.subtract(origin, center, m);\n    const b = Vector3.dot(m, direction);\n    const c = Vector3.dot(m, m) - radius * radius;\n\n    if (b > 0 && c > 0) {\n      return -1;\n    }\n\n    let discriminant = b * b - c;\n    if (discriminant < 0) {\n      return -1;\n    }\n\n    let distance = -b - Math.sqrt(discriminant);\n    if (distance < 0) {\n      distance = 0;\n    }\n\n    return distance;\n  }\n\n  /**\n   * Check whether the boxes intersect.\n   * @param boxA - The first box to check\n   * @param boxB - The second box to check\n   * @returns True if the boxes intersect, false otherwise\n   */\n  static intersectsBoxAndBox(boxA: BoundingBox, boxB: BoundingBox): boolean {\n    if (boxA.min.x > boxB.max.x || boxB.min.x > boxA.max.x) {\n      return false;\n    }\n\n    if (boxA.min.y > boxB.max.y || boxB.min.y > boxA.max.y) {\n      return false;\n    }\n\n    return !(boxA.min.z > boxB.max.z || boxB.min.z > boxA.max.z);\n  }\n\n  /**\n   * Check whether the spheres intersect.\n   * @param sphereA - The first sphere to check\n   * @param sphereB - The second sphere to check\n   * @returns True if the spheres intersect, false otherwise\n   */\n  static intersectsSphereAndSphere(sphereA: BoundingSphere, sphereB: BoundingSphere): boolean {\n    const radiisum = sphereA.radius + sphereB.radius;\n    return Vector3.distanceSquared(sphereA.center, sphereB.center) < radiisum * radiisum;\n  }\n\n  /**\n   * Check whether the sphere and the box intersect.\n   * @param sphere - The sphere to check\n   * @param box - The box to check\n   * @returns True if the sphere and the box intersect, false otherwise\n   */\n  static intersectsSphereAndBox(sphere: BoundingSphere, box: BoundingBox): boolean {\n    const center = sphere.center;\n    const max = box.max;\n    const min = box.min;\n\n    const closestPoint = CollisionUtil._tempVec30;\n    closestPoint.set(\n      Math.max(min.x, Math.min(center.x, max.x)),\n      Math.max(min.y, Math.min(center.y, max.y)),\n      Math.max(min.z, Math.min(center.z, max.z))\n    );\n\n    const distance = Vector3.distanceSquared(center, closestPoint);\n    return distance <= sphere.radius * sphere.radius;\n  }\n\n  /**\n   * Get whether or not a specified bounding box intersects with this frustum (Contains or Intersects).\n   * @param frustum - The frustum\n   * @param box - The box\n   * @returns True if bounding box intersects with this frustum, false otherwise\n   */\n  static intersectsFrustumAndBox(frustum: BoundingFrustum, box: BoundingBox): boolean {\n    const { min, max } = box;\n    const p = CollisionUtil._tempVec30;\n\n    for (let i = 0; i < 6; ++i) {\n      const plane = frustum.getPlane(i);\n      const normal = plane.normal;\n\n      p.set(normal.x >= 0 ? max.x : min.x, normal.y >= 0 ? max.y : min.y, normal.z >= 0 ? max.z : min.z);\n      if (Vector3.dot(normal, p) < -plane.distance) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Get the containment type between a frustum and a box (AABB).\n   * @param frustum - The frustum\n   * @param box - The box\n   * @returns The containment type\n   */\n  static frustumContainsBox(frustum: BoundingFrustum, box: BoundingBox): ContainmentType {\n    const { min, max } = box;\n    const p = CollisionUtil._tempVec30;\n    const n = CollisionUtil._tempVec31;\n    let result = ContainmentType.Contains;\n\n    for (let i = 0; i < 6; ++i) {\n      const plane = frustum.getPlane(i);\n      const normal = plane.normal;\n\n      if (normal.x >= 0) {\n        p.x = max.x;\n        n.x = min.x;\n      } else {\n        p.x = min.x;\n        n.x = max.x;\n      }\n      if (normal.y >= 0) {\n        p.y = max.y;\n        n.y = min.y;\n      } else {\n        p.y = min.y;\n        n.y = max.y;\n      }\n      if (normal.z >= 0) {\n        p.z = max.z;\n        n.z = min.z;\n      } else {\n        p.z = min.z;\n        n.z = max.z;\n      }\n\n      if (CollisionUtil.intersectsPlaneAndPoint(plane, p) === PlaneIntersectionType.Back) {\n        return ContainmentType.Disjoint;\n      }\n\n      if (CollisionUtil.intersectsPlaneAndPoint(plane, n) === PlaneIntersectionType.Back) {\n        result = ContainmentType.Intersects;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get the containment type between a frustum and a sphere.\n   * @param frustum - The frustum\n   * @param sphere - The sphere\n   * @returns The containment type\n   */\n  static frustumContainsSphere(frustum: BoundingFrustum, sphere: BoundingSphere): ContainmentType {\n    let result = ContainmentType.Contains;\n\n    for (let i = 0; i < 6; ++i) {\n      const plane = frustum.getPlane(i);\n      const intersectionType = CollisionUtil.intersectsPlaneAndSphere(plane, sphere);\n      if (intersectionType === PlaneIntersectionType.Back) {\n        return ContainmentType.Disjoint;\n      } else if (intersectionType === PlaneIntersectionType.Intersecting) {\n        result = ContainmentType.Intersects;\n        break;\n      }\n    }\n\n    return result;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a plane in three-dimensional space.\n */\nexport class Plane implements IClone<Plane>, ICopy<Plane, Plane> {\n  /**\n   * Normalize the normal vector of the specified plane.\n   * @param p - The specified plane\n   * @param out - A normalized version of the specified plane\n   */\n  static normalize(p: Plane, out: Plane): void {\n    const { normal } = p;\n\n    const factor = 1.0 / normal.length();\n    Vector3.scale(normal, factor, out.normal);\n    out.distance = p.distance * factor;\n  }\n\n  /**\n   * Calculate the plane that contains the three specified points.\n   * @param point0 - The first point\n   * @param point1 - The second point\n   * @param point2 - The third point\n   * @param out - The calculated plane\n   */\n  static fromPoints(point0: Vector3, point1: Vector3, point2: Vector3, out: Plane): void {\n    const x0 = point0.x;\n    const y0 = point0.y;\n    const z0 = point0.z;\n    const x1 = point1.x - x0;\n    const y1 = point1.y - y0;\n    const z1 = point1.z - z0;\n    const x2 = point2.x - x0;\n    const y2 = point2.y - y0;\n    const z2 = point2.z - z0;\n    const yz = y1 * z2 - z1 * y2;\n    const xz = z1 * x2 - x1 * z2;\n    const xy = x1 * y2 - y1 * x2;\n    const invPyth = 1.0 / Math.sqrt(yz * yz + xz * xz + xy * xy);\n\n    const x = yz * invPyth;\n    const y = xz * invPyth;\n    const z = xy * invPyth;\n\n    const { normal } = out;\n    normal.x = x;\n    normal.y = y;\n    normal.z = z;\n\n    out.distance = -(x * x0 + y * y0 + z * z0);\n  }\n\n  /** The normal of the plane. */\n  public readonly normal: Vector3 = new Vector3();\n  /** The distance of the plane along its normal to the origin. */\n  public distance: number = 0;\n\n  /**\n   * Constructor of Plane.\n   * @param normal - The normal vector\n   * @param distance - The distance of the plane along its normal to the origin\n   */\n  constructor(normal: Vector3 = null, distance: number = 0) {\n    normal && this.normal.copyFrom(normal);\n    this.distance = distance;\n  }\n\n  /**\n   * Normalize the normal vector of this plane.\n   * @returns The plane after normalize\n   */\n  normalize(): Plane {\n    Plane.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this plane.\n   * @returns A clone of this plane\n   */\n  clone(): Plane {\n    const out = new Plane();\n    out.copyFrom(this);\n    return out;\n  }\n\n  /**\n   * Copy this plane from the specified plane.\n   * @param source - The specified plane\n   * @returns This plane\n   */\n  copyFrom(source: Plane): Plane {\n    this.normal.copyFrom(source.normal);\n    this.distance = source.distance;\n    return this;\n  }\n}\n","import { BoundingBox } from \"./BoundingBox\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { CollisionUtil } from \"./CollisionUtil\";\nimport { ContainmentType } from \"./enums/ContainmentType\";\nimport { FrustumFace } from \"./enums/FrustumFace\";\nimport { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { Matrix } from \"./Matrix\";\nimport { Plane } from \"./Plane\";\n\n/**\n * A bounding frustum.\n */\nexport class BoundingFrustum implements IClone<BoundingFrustum>, ICopy<BoundingFrustum, BoundingFrustum> {\n  /** The near plane of this frustum. */\n  public near: Plane;\n  /** The far plane of this frustum. */\n  public far: Plane;\n  /** The left plane of this frustum. */\n  public left: Plane;\n  /** The right plane of this frustum. */\n  public right: Plane;\n  /** The bottom plane of this frustum. */\n  public bottom: Plane;\n  /** The top plane of this frustum. */\n  public top: Plane;\n\n  /**\n   * Constructor of BoundingFrustum.\n   * @param matrix - The view-projection matrix\n   */\n  constructor(matrix: Matrix = null) {\n    this.near = new Plane();\n    this.far = new Plane();\n    this.left = new Plane();\n    this.right = new Plane();\n    this.top = new Plane();\n    this.bottom = new Plane();\n\n    matrix && this.calculateFromMatrix(matrix);\n  }\n\n  /**\n   * Get the plane by the given frustum face.\n   * @param face - The frustum face\n   * @returns The plane get\n   */\n  getPlane(face: FrustumFace): Plane {\n    switch (face) {\n      case FrustumFace.Near:\n        return this.near;\n      case FrustumFace.Far:\n        return this.far;\n      case FrustumFace.Left:\n        return this.left;\n      case FrustumFace.Right:\n        return this.right;\n      case FrustumFace.Bottom:\n        return this.bottom;\n      case FrustumFace.Top:\n        return this.top;\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Update all planes from the given matrix.\n   * @param matrix - The given view-projection matrix\n   */\n  public calculateFromMatrix(matrix: Matrix): void {\n    const me = matrix.elements;\n    const m11 = me[0];\n    const m12 = me[1];\n    const m13 = me[2];\n    const m14 = me[3];\n    const m21 = me[4];\n    const m22 = me[5];\n    const m23 = me[6];\n    const m24 = me[7];\n    const m31 = me[8];\n    const m32 = me[9];\n    const m33 = me[10];\n    const m34 = me[11];\n    const m41 = me[12];\n    const m42 = me[13];\n    const m43 = me[14];\n    const m44 = me[15];\n\n    // near\n    const nearNormal = this.near.normal;\n    nearNormal.set(m14 + m13, m24 + m23, m34 + m33);\n    this.near.distance = m44 + m43;\n    this.near.normalize();\n\n    // far\n    const farNormal = this.far.normal;\n    farNormal.set(m14 - m13, m24 - m23, m34 - m33);\n    this.far.distance = m44 - m43;\n\n    this.far.normalize();\n\n    // left\n    const leftNormal = this.left.normal;\n    leftNormal.set(m14 + m11, m24 + m21, m34 + m31);\n    this.left.distance = m44 + m41;\n    this.left.normalize();\n\n    // right\n    const rightNormal = this.right.normal;\n    rightNormal.set(m14 - m11, m24 - m21, m34 - m31);\n    this.right.distance = m44 - m41;\n    this.right.normalize();\n\n    // bottom\n    const bottomNormal = this.bottom.normal;\n    bottomNormal.set(m14 + m12, m24 + m22, m34 + m32);\n    this.bottom.distance = m44 + m42;\n    this.bottom.normalize();\n\n    // top\n    const topNormal = this.top.normal;\n    topNormal.set(m14 - m12, m24 - m22, m34 - m32);\n    this.top.distance = m44 - m42;\n    this.top.normalize();\n  }\n\n  /**\n   * Get whether or not a specified bounding box intersects with this frustum (Contains or Intersects).\n   * @param box - The box for testing\n   * @returns True if bounding box intersects with this frustum, false otherwise\n   */\n  public intersectsBox(box: BoundingBox): boolean {\n    return CollisionUtil.intersectsFrustumAndBox(this, box);\n  }\n\n  /**\n   * Get whether or not a specified bounding sphere intersects with this frustum (Contains or Intersects).\n   * @param sphere - The sphere for testing\n   * @returns True if bounding sphere intersects with this frustum, false otherwise\n   */\n  public intersectsSphere(sphere: BoundingSphere): boolean {\n    return CollisionUtil.frustumContainsSphere(this, sphere) !== ContainmentType.Disjoint;\n  }\n\n  /**\n   * Creates a clone of this frustum.\n   * @returns A clone of this frustum\n   */\n  clone(): BoundingFrustum {\n    const out = new BoundingFrustum();\n    out.copyFrom(this);\n    return out;\n  }\n\n  /**\n   * Copy this frustum from the specified frustum.\n   * @param source - The specified frustum\n   * @returns This frustum\n   */\n  copyFrom(source: BoundingFrustum): BoundingFrustum {\n    this.near.copyFrom(source.near);\n    this.far.copyFrom(source.far);\n    this.left.copyFrom(source.left);\n    this.right.copyFrom(source.right);\n    this.bottom.copyFrom(source.bottom);\n    this.top.copyFrom(source.top);\n    return this;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector2 } from \"./Vector2\";\n\n/**\n * Represents a 3x3 mathematical matrix.\n */\nexport class Matrix3x3 implements IClone<Matrix3x3>, ICopy<Matrix3x3, Matrix3x3> {\n  /**\n   * Determines the sum of two matrices.\n   * @param left - The first matrix to add\n   * @param right - The second matrix to add\n   * @param out - The sum of two matrices\n   */\n  static add(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    oe[0] = le[0] + re[0];\n    oe[1] = le[1] + re[1];\n    oe[2] = le[2] + re[2];\n\n    oe[3] = le[3] + re[3];\n    oe[4] = le[4] + re[4];\n    oe[5] = le[5] + re[5];\n\n    oe[6] = le[6] + re[6];\n    oe[7] = le[7] + re[7];\n    oe[8] = le[8] + re[8];\n  }\n\n  /**\n   * Determines the difference between two matrices.\n   * @param left - The first matrix to subtract\n   * @param right - The second matrix to subtract\n   * @param out - The difference between two matrices\n   */\n  static subtract(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    oe[0] = le[0] - re[0];\n    oe[1] = le[1] - re[1];\n    oe[2] = le[2] - re[2];\n\n    oe[3] = le[3] - re[3];\n    oe[4] = le[4] - re[4];\n    oe[5] = le[5] - re[5];\n\n    oe[6] = le[6] - re[6];\n    oe[7] = le[7] - re[7];\n    oe[8] = le[8] - re[8];\n  }\n\n  /**\n   * Determines the product of two matrices.\n   * @param left - The first matrix to multiply\n   * @param right - The second matrix to multiply\n   * @param out - The product of two matrices\n   */\n  static multiply(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    const l11 = le[0],\n      l12 = le[1],\n      l13 = le[2];\n    const l21 = le[3],\n      l22 = le[4],\n      l23 = le[5];\n    const l31 = le[6],\n      l32 = le[7],\n      l33 = le[8];\n\n    const r11 = re[0],\n      r12 = re[1],\n      r13 = re[2];\n    const r21 = re[3],\n      r22 = re[4],\n      r23 = re[5];\n    const r31 = re[6],\n      r32 = re[7],\n      r33 = re[8];\n\n    oe[0] = l11 * r11 + l21 * r12 + l31 * r13;\n    oe[1] = l12 * r11 + l22 * r12 + l32 * r13;\n    oe[2] = l13 * r11 + l23 * r12 + l33 * r13;\n\n    oe[3] = l11 * r21 + l21 * r22 + l31 * r23;\n    oe[4] = l12 * r21 + l22 * r22 + l32 * r23;\n    oe[5] = l13 * r21 + l23 * r22 + l33 * r23;\n\n    oe[6] = l11 * r31 + l21 * r32 + l31 * r33;\n    oe[7] = l12 * r31 + l22 * r32 + l32 * r33;\n    oe[8] = l13 * r31 + l23 * r32 + l33 * r33;\n  }\n\n  /**\n   * Determines whether the specified matrices are equals.\n   * @param left - The first matrix to compare\n   * @param right - The second matrix to compare\n   * @returns True if the specified matrices are equals, false otherwise\n   */\n  static equals(left: Matrix3x3, right: Matrix3x3): boolean {\n    const le = left.elements;\n    const re = right.elements;\n\n    return (\n      MathUtil.equals(le[0], re[0]) &&\n      MathUtil.equals(le[1], re[1]) &&\n      MathUtil.equals(le[2], re[2]) &&\n      MathUtil.equals(le[3], re[3]) &&\n      MathUtil.equals(le[4], re[4]) &&\n      MathUtil.equals(le[5], re[5]) &&\n      MathUtil.equals(le[6], re[6]) &&\n      MathUtil.equals(le[7], re[7]) &&\n      MathUtil.equals(le[8], re[8])\n    );\n  }\n\n  /**\n   * Performs a linear interpolation between two matrices.\n   * @param start - The first matrix\n   * @param end - The second matrix\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two matrices\n   */\n  static lerp(start: Matrix3x3, end: Matrix3x3, t: number, out: Matrix3x3): void {\n    const se = start.elements;\n    const ee = end.elements;\n    const oe = out.elements;\n    const inv = 1.0 - t;\n\n    oe[0] = se[0] * inv + ee[0] * t;\n    oe[1] = se[1] * inv + ee[1] * t;\n    oe[2] = se[2] * inv + ee[2] * t;\n\n    oe[3] = se[3] * inv + ee[3] * t;\n    oe[4] = se[4] * inv + ee[4] * t;\n    oe[5] = se[5] * inv + ee[5] * t;\n\n    oe[6] = se[6] * inv + ee[6] * t;\n    oe[7] = se[7] * inv + ee[7] * t;\n    oe[8] = se[8] * inv + ee[8] * t;\n  }\n\n  /**\n   * Calculate a rotation matrix from a quaternion.\n   * @param quaternion - The quaternion used to calculate the matrix\n   * @param out - The calculated rotation matrix\n   */\n  static rotationQuaternion(quaternion: Quaternion, out: Matrix3x3): void {\n    const oe = out.elements;\n    const { _x: x, _y: y, _z: z, _w: w } = quaternion;\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n    const xx = x * x2;\n    const yx = y * x2;\n    const yy = y * y2;\n    const zx = z * x2;\n    const zy = z * y2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n\n    oe[0] = 1 - yy - zz;\n    oe[3] = yx - wz;\n    oe[6] = zx + wy;\n\n    oe[1] = yx + wz;\n    oe[4] = 1 - xx - zz;\n    oe[7] = zy - wx;\n\n    oe[2] = zx - wy;\n    oe[5] = zy + wx;\n    oe[8] = 1 - xx - yy;\n  }\n\n  /**\n   * Calculate a matrix from scale vector.\n   * @param s - The scale vector\n   * @param out - The calculated matrix\n   */\n  static scaling(s: Vector2, out: Matrix3x3): void {\n    const oe = out.elements;\n\n    oe[0] = s._x;\n    oe[1] = 0;\n    oe[2] = 0;\n\n    oe[3] = 0;\n    oe[4] = s._y;\n    oe[5] = 0;\n\n    oe[6] = 0;\n    oe[7] = 0;\n    oe[8] = 1;\n  }\n\n  /**\n   * Calculate a matrix from translation vector.\n   * @param translation - The translation vector\n   * @param out - The calculated matrix\n   */\n  static translation(translation: Vector2, out: Matrix3x3): void {\n    const oe = out.elements;\n\n    oe[0] = 1;\n    oe[1] = 0;\n    oe[2] = 0;\n\n    oe[3] = 0;\n    oe[4] = 1;\n    oe[5] = 0;\n\n    oe[6] = translation._x;\n    oe[7] = translation._y;\n    oe[8] = 1;\n  }\n\n  /**\n   * Calculate the inverse of the specified matrix.\n   * @param a - The matrix whose inverse is to be calculated\n   * @param out - The inverse of the specified matrix\n   */\n  static invert(a: Matrix3x3, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    const b12 = a33 * a22 - a23 * a32;\n    const b22 = -a33 * a21 + a23 * a31;\n    const b32 = a32 * a21 - a22 * a31;\n\n    let det = a11 * b12 + a12 * b22 + a13 * b32;\n    if (!det) {\n      return;\n    }\n    det = 1.0 / det;\n\n    oe[0] = b12 * det;\n    oe[1] = (-a33 * a12 + a13 * a32) * det;\n    oe[2] = (a23 * a12 - a13 * a22) * det;\n\n    oe[3] = b22 * det;\n    oe[4] = (a33 * a11 - a13 * a31) * det;\n    oe[5] = (-a23 * a11 + a13 * a21) * det;\n\n    oe[6] = b32 * det;\n    oe[7] = (-a32 * a11 + a12 * a31) * det;\n    oe[8] = (a22 * a11 - a12 * a21) * det;\n  }\n\n  /**\n   * Calculate a 3x3 normal matrix from a 4x4 matrix.\n   * @remarks The calculation process is the transpose matrix of the inverse matrix.\n   * @param mat4 - The 4x4 matrix\n   * @param out - THe 3x3 normal matrix\n   */\n  static normalMatrix(mat4: Matrix, out: Matrix3x3): void {\n    const ae = mat4.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2],\n      a14 = ae[3];\n    const a21 = ae[4],\n      a22 = ae[5],\n      a23 = ae[6],\n      a24 = ae[7];\n    const a31 = ae[8],\n      a32 = ae[9],\n      a33 = ae[10],\n      a34 = ae[11];\n    const a41 = ae[12],\n      a42 = ae[13],\n      a43 = ae[14],\n      a44 = ae[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;\n    oe[1] = (a23 * b08 - a21 * b11 - a24 * b07) * det;\n    oe[2] = (a21 * b10 - a22 * b08 + a24 * b06) * det;\n\n    oe[3] = (a13 * b10 - a12 * b11 - a14 * b09) * det;\n    oe[4] = (a11 * b11 - a13 * b08 + a14 * b07) * det;\n    oe[5] = (a12 * b08 - a11 * b10 - a14 * b06) * det;\n\n    oe[6] = (a42 * b05 - a43 * b04 + a44 * b03) * det;\n    oe[7] = (a43 * b02 - a41 * b05 - a44 * b01) * det;\n    oe[8] = (a41 * b04 - a42 * b02 + a44 * b00) * det;\n  }\n\n  /**\n   * The specified matrix rotates around an angle.\n   * @param a - The specified matrix\n   * @param r - The rotation angle in radians\n   * @param out - The rotated matrix\n   */\n  static rotate(a: Matrix3x3, r: number, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n    const s = Math.sin(r);\n    const c = Math.cos(r);\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    oe[0] = c * a11 + s * a21;\n    oe[1] = c * a12 + s * a22;\n    oe[2] = c * a13 + s * a23;\n\n    oe[3] = c * a21 - s * a11;\n    oe[4] = c * a22 - s * a12;\n    oe[5] = c * a23 - s * a13;\n\n    oe[6] = a31;\n    oe[7] = a32;\n    oe[8] = a33;\n  }\n\n  /**\n   * Scale a matrix by a given vector.\n   * @param m - The matrix\n   * @param s - The given vector\n   * @param out - The scaled matrix\n   */\n  static scale(m: Matrix3x3, s: Vector2, out: Matrix3x3): void {\n    const { _x: x, _y: y } = s;\n    const ae = m.elements;\n    const oe = out.elements;\n\n    oe[0] = x * ae[0];\n    oe[1] = x * ae[1];\n    oe[2] = x * ae[2];\n\n    oe[3] = y * ae[3];\n    oe[4] = y * ae[4];\n    oe[5] = y * ae[5];\n\n    oe[6] = ae[6];\n    oe[7] = ae[7];\n    oe[8] = ae[8];\n  }\n\n  /**\n   * Translate a matrix by a given vector.\n   * @param m - The matrix\n   * @param translation - The given vector\n   * @param out - The translated matrix\n   */\n  static translate(m: Matrix3x3, translation: Vector2, out: Matrix3x3): void {\n    const { _x: x, _y: y } = translation;\n    const ae = m.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    oe[0] = a11;\n    oe[1] = a12;\n    oe[2] = a13;\n\n    oe[3] = a21;\n    oe[4] = a22;\n    oe[5] = a23;\n\n    oe[6] = x * a11 + y * a21 + a31;\n    oe[7] = x * a12 + y * a22 + a32;\n    oe[8] = x * a13 + y * a23 + a33;\n  }\n\n  /**\n   * Calculate the transpose of the specified matrix.\n   * @param a - The specified matrix\n   * @param out - The transpose of the specified matrix\n   */\n  static transpose(a: Matrix3x3, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    if (out === a) {\n      const a12 = ae[1];\n      const a13 = ae[2];\n      const a23 = ae[5];\n      oe[1] = ae[3];\n      oe[2] = ae[6];\n      oe[3] = a12;\n      oe[5] = ae[7];\n      oe[6] = a13;\n      oe[7] = a23;\n    } else {\n      oe[0] = ae[0];\n      oe[1] = ae[3];\n      oe[2] = ae[6];\n\n      oe[3] = ae[1];\n      oe[4] = ae[4];\n      oe[5] = ae[7];\n\n      oe[6] = ae[2];\n      oe[7] = ae[5];\n      oe[8] = ae[8];\n    }\n  }\n\n  /**\n   * An array containing the elements of the matrix (column matrix).\n   * @remarks\n   * elements[0] first column and first row value m11\n   * elements[1] first column and second row value m12\n   * elements[2] first column and third row value m13\n   * elements[3] second column and first row value m21\n   * and so on\n   */\n  elements: Float32Array = new Float32Array(9);\n\n  /**\n   * Constructor of 3*3 matrix.\n   * @param m11 - Default 1 column 1, row 1\n   * @param m12 - Default 0 column 1, row 2\n   * @param m13 - Default 0 column 1, row 3\n   * @param m21 - Default 0 column 2, row 1\n   * @param m22 - Default 1 column 2, row 2\n   * @param m23 - Default 0 column 2, row 3\n   * @param m31 - Default 0 column 3, row 1\n   * @param m32 - Default 0 column 3, row 2\n   * @param m33 - Default 1 column 3, row 3\n   */\n  constructor(\n    m11: number = 1,\n    m12: number = 0,\n    m13: number = 0,\n    m21: number = 0,\n    m22: number = 1,\n    m23: number = 0,\n    m31: number = 0,\n    m32: number = 0,\n    m33: number = 1\n  ) {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n\n    e[3] = m21;\n    e[4] = m22;\n    e[5] = m23;\n\n    e[6] = m31;\n    e[7] = m32;\n    e[8] = m33;\n  }\n\n  /**\n   * Set the value of this matrix, and return this matrix.\n   * @param m11\n   * @param m12\n   * @param m13\n   * @param m21\n   * @param m22\n   * @param m23\n   * @param m31\n   * @param m32\n   * @param m33\n   * @returns This matrix\n   */\n  set(\n    m11: number,\n    m12: number,\n    m13: number,\n    m21: number,\n    m22: number,\n    m23: number,\n    m31: number,\n    m32: number,\n    m33: number\n  ): Matrix3x3 {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n\n    e[3] = m21;\n    e[4] = m22;\n    e[5] = m23;\n\n    e[6] = m31;\n    e[7] = m32;\n    e[8] = m33;\n\n    return this;\n  }\n\n  /**\n   * Determines the sum of this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the sum of the two matrices\n   */\n  add(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.add(this, right, this);\n    return this;\n  }\n\n  /**\n   * Determines the difference between this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the difference between the two matrices\n   */\n  subtract(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.subtract(this, right, this);\n    return this;\n  }\n\n  /**\n   * Determines the product of this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the product of the two matrices\n   */\n  multiply(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.multiply(this, right, this);\n    return this;\n  }\n\n  /**\n   * Calculate a determinant of this matrix.\n   * @returns The determinant of this matrix\n   */\n  determinant(): number {\n    const e = this.elements;\n\n    const a11 = e[0],\n      a12 = e[1],\n      a13 = e[2];\n    const a21 = e[3],\n      a22 = e[4],\n      a23 = e[5];\n    const a31 = e[6],\n      a32 = e[7],\n      a33 = e[8];\n\n    const b12 = a33 * a22 - a23 * a32;\n    const b22 = -a33 * a21 + a23 * a31;\n    const b32 = a32 * a21 - a22 * a31;\n\n    return a11 * b12 + a12 * b22 + a13 * b32;\n  }\n\n  /**\n   * Identity this matrix.\n   * @returns This matrix after identity\n   */\n  identity(): Matrix3x3 {\n    const e = this.elements;\n\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n\n    return this;\n  }\n\n  /**\n   * Invert the matrix.\n   * @returns The matrix after invert\n   */\n  invert(): Matrix3x3 {\n    Matrix3x3.invert(this, this);\n    return this;\n  }\n\n  /**\n   * This matrix rotates around an angle.\n   * @param r - The rotation angle in radians\n   * @returns This matrix after rotate\n   */\n  rotate(r: number): Matrix3x3 {\n    Matrix3x3.rotate(this, r, this);\n    return this;\n  }\n\n  /**\n   * Scale this matrix by a given vector.\n   * @param s - The given vector\n   * @returns This matrix after scale\n   */\n  scale(s: Vector2): Matrix3x3 {\n    Matrix3x3.scale(this, s, this);\n    return this;\n  }\n\n  /**\n   * Translate this matrix by a given vector.\n   * @param translation - The given vector\n   * @returns This matrix after translate\n   */\n  translate(translation: Vector2): Matrix3x3 {\n    Matrix3x3.translate(this, translation, this);\n    return this;\n  }\n\n  /**\n   * Calculate the transpose of this matrix.\n   * @returns This matrix after transpose\n   */\n  transpose(): Matrix3x3 {\n    Matrix3x3.transpose(this, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this matrix.\n   * @returns A clone of this matrix\n   */\n  clone(): Matrix3x3 {\n    const e = this.elements;\n    let ret = new Matrix3x3(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8]);\n    return ret;\n  }\n\n  /**\n   * Copy this matrix from the specified matrix.\n   * @param source - The specified matrix\n   * @returns This matrix\n   */\n  copyFrom(source: Matrix3x3): Matrix3x3 {\n    const e = this.elements;\n    const se = source.elements;\n\n    e[0] = se[0];\n    e[1] = se[1];\n    e[2] = se[2];\n\n    e[3] = se[3];\n    e[4] = se[4];\n    e[5] = se[5];\n\n    e[6] = se[6];\n    e[7] = se[7];\n    e[8] = se[8];\n\n    return this;\n  }\n\n  /**\n   * Copy the value of this matrix from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This matrix\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Matrix3x3 {\n    const srce = this.elements;\n    for (let i = 0; i < 12; i++) {\n      srce[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * Copy the value of this matrix to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0): void {\n    const e = this.elements;\n\n    out[outOffset] = e[0];\n    out[outOffset + 1] = e[1];\n    out[outOffset + 2] = e[2];\n    out[outOffset + 3] = e[3];\n    out[outOffset + 4] = e[4];\n    out[outOffset + 5] = e[5];\n    out[outOffset + 6] = e[6];\n    out[outOffset + 7] = e[7];\n    out[outOffset + 8] = e[8];\n  }\n\n  /**\n   * Copy the value of this 3x3 matrix from the specified 4x4 matrix.\n   * upper-left principle\n   * @param source - The specified 4x4 matrix\n   * @returns This 3x3 matrix\n   */\n  copyFromMatrix(source: Matrix): Matrix3x3 {\n    const ae = source.elements;\n    const e = this.elements;\n\n    e[0] = ae[0];\n    e[1] = ae[1];\n    e[2] = ae[2];\n\n    e[3] = ae[4];\n    e[4] = ae[5];\n    e[5] = ae[6];\n\n    e[6] = ae[8];\n    e[7] = ae[9];\n    e[8] = ae[10];\n\n    return this;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix3x3 } from \"./Matrix3x3\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a four dimensional mathematical quaternion.\n */\nexport class Quaternion implements IClone<Quaternion>, ICopy<QuaternionLike, Quaternion> {\n  /** @internal */\n  static readonly _tempVector3 = new Vector3();\n  /** @internal */\n  static readonly _tempQuat1 = new Quaternion();\n\n  /**\n   * Determines the sum of two quaternions.\n   * @param left - The first quaternion to add\n   * @param right - The second quaternion to add\n   * @param out - The sum of two quaternions\n   */\n  static add(left: Quaternion, right: Quaternion, out: Quaternion): void {\n    out._x = left._x + right._x;\n    out._y = left._y + right._y;\n    out._z = left._z + right._z;\n    out._w = left._w + right._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the product of two quaternions.\n   * @param left - The first quaternion to multiply\n   * @param right - The second quaternion to multiply\n   * @param out - The product of two quaternions\n   */\n  static multiply(left: Quaternion, right: Quaternion, out: Quaternion): void {\n    const ax = left._x,\n      ay = left._y,\n      az = left._z,\n      aw = left._w;\n    const bx = right._x,\n      by = right._y,\n      bz = right._z,\n      bw = right._w;\n\n    out._x = ax * bw + aw * bx + ay * bz - az * by;\n    out._y = ay * bw + aw * by + az * bx - ax * bz;\n    out._z = az * bw + aw * bz + ax * by - ay * bx;\n    out._w = aw * bw - ax * bx - ay * by - az * bz;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate quaternion that contains conjugated version of the specified quaternion.\n   * @param a - The specified quaternion\n   * @param out - The conjugate version of the specified quaternion\n   */\n  static conjugate(a: Quaternion, out: Quaternion): void {\n    out._x = -a._x;\n    out._y = -a._y;\n    out._z = -a._z;\n    out._w = a._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the dot product of two quaternions.\n   * @param left - The first quaternion to dot\n   * @param right - The second quaternion to dot\n   * @returns The dot product of two quaternions\n   */\n  static dot(left: Quaternion, right: Quaternion): number {\n    return left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;\n  }\n\n  /**\n   * Determines whether the specified quaternions are equals.\n   * @param left - The first quaternion to compare\n   * @param right - The second quaternion to compare\n   * @returns True if the specified quaternions are equals, false otherwise\n   */\n  static equals(left: Quaternion, right: Quaternion): boolean {\n    return (\n      MathUtil.equals(left._x, right._x) &&\n      MathUtil.equals(left._y, right._y) &&\n      MathUtil.equals(left._z, right._z) &&\n      MathUtil.equals(left._w, right._w)\n    );\n  }\n\n  /**\n   * Calculate a quaternion rotates around an arbitrary axis.\n   * @param axis - The axis\n   * @param rad - The rotation angle in radians\n   * @param out - The quaternion after rotate\n   */\n  static rotationAxisAngle(axis: Vector3, rad: number, out: Quaternion): void {\n    const normalAxis = Quaternion._tempVector3;\n    Vector3.normalize(axis, normalAxis);\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    out._x = normalAxis._x * s;\n    out._y = normalAxis._y * s;\n    out._z = normalAxis._z * s;\n    out._w = Math.cos(rad);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion rotates around x, y, z axis (pitch/yaw/roll).\n   * @param x - The radian of rotation around X (pitch)\n   * @param y - The radian of rotation around Y (yaw)\n   * @param z - The radian of rotation around Z (roll)\n   * @param out - The calculated quaternion\n   */\n  static rotationEuler(x: number, y: number, z: number, out: Quaternion): void {\n    Quaternion.rotationYawPitchRoll(y, x, z, out);\n  }\n\n  /**\n   * Calculate a quaternion from the specified yaw, pitch and roll angles.\n   * @param yaw - Yaw around the y axis in radians\n   * @param pitch - Pitch around the x axis in radians\n   * @param roll - Roll around the z axis in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationYawPitchRoll(yaw: number, pitch: number, roll: number, out: Quaternion): void {\n    const halfRoll = roll * 0.5;\n    const halfPitch = pitch * 0.5;\n    const halfYaw = yaw * 0.5;\n\n    const sinRoll = Math.sin(halfRoll);\n    const cosRoll = Math.cos(halfRoll);\n    const sinPitch = Math.sin(halfPitch);\n    const cosPitch = Math.cos(halfPitch);\n    const sinYaw = Math.sin(halfYaw);\n    const cosYaw = Math.cos(halfYaw);\n\n    const cosYawPitch = cosYaw * cosPitch;\n    const sinYawPitch = sinYaw * sinPitch;\n\n    out._x = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;\n    out._y = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;\n    out._z = cosYawPitch * sinRoll - sinYawPitch * cosRoll;\n    out._w = cosYawPitch * cosRoll + sinYawPitch * sinRoll;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion from the specified 3x3 matrix.\n   * @param m - The specified 3x3 matrix\n   * @param out - The calculated quaternion\n   */\n  static rotationMatrix3x3(m: Matrix3x3, out: Quaternion): void {\n    const me = m.elements;\n    const m11 = me[0],\n      m12 = me[1],\n      m13 = me[2];\n    const m21 = me[3],\n      m22 = me[4],\n      m23 = me[5];\n    const m31 = me[6],\n      m32 = me[7],\n      m33 = me[8];\n    const scale = m11 + m22 + m33;\n    let sqrt, half;\n\n    if (scale > 0) {\n      sqrt = Math.sqrt(scale + 1.0);\n      out._w = sqrt * 0.5;\n      sqrt = 0.5 / sqrt;\n\n      out._x = (m23 - m32) * sqrt;\n      out._y = (m31 - m13) * sqrt;\n      out._z = (m12 - m21) * sqrt;\n    } else if (m11 >= m22 && m11 >= m33) {\n      sqrt = Math.sqrt(1.0 + m11 - m22 - m33);\n      half = 0.5 / sqrt;\n\n      out._x = 0.5 * sqrt;\n      out._y = (m12 + m21) * half;\n      out._z = (m13 + m31) * half;\n      out._w = (m23 - m32) * half;\n    } else if (m22 > m33) {\n      sqrt = Math.sqrt(1.0 + m22 - m11 - m33);\n      half = 0.5 / sqrt;\n\n      out._x = (m21 + m12) * half;\n      out._y = 0.5 * sqrt;\n      out._z = (m32 + m23) * half;\n      out._w = (m31 - m13) * half;\n    } else {\n      sqrt = Math.sqrt(1.0 + m33 - m11 - m22);\n      half = 0.5 / sqrt;\n\n      out._x = (m13 + m31) * half;\n      out._y = (m23 + m32) * half;\n      out._z = 0.5 * sqrt;\n      out._w = (m12 - m21) * half;\n    }\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate the inverse of the specified quaternion.\n   * @param a - The quaternion whose inverse is to be calculated\n   * @param out - The inverse of the specified quaternion\n   */\n  static invert(a: Quaternion, out: Quaternion): void {\n    const { _x: x, _y: y, _z: z, _w: w } = a;\n    const dot = x * x + y * y + z * z + w * w;\n    if (dot > MathUtil.zeroTolerance) {\n      const invDot = 1.0 / dot;\n      out._x = -x * invDot;\n      out._y = -y * invDot;\n      out._z = -z * invDot;\n      out._w = w * invDot;\n      out._onValueChanged && out._onValueChanged();\n    }\n  }\n\n  /**\n   * Performs a linear blend between two quaternions.\n   * @param start - The first quaternion\n   * @param end - The second quaternion\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two quaternions\n   */\n  static lerp(start: Quaternion, end: Quaternion, t: number, out: Quaternion): void {\n    const inv = 1.0 - t;\n    if (Quaternion.dot(start, end) >= 0) {\n      out._x = start._x * inv + end._x * t;\n      out._y = start._y * inv + end._y * t;\n      out._z = start._z * inv + end._z * t;\n      out._w = start._w * inv + end._w * t;\n    } else {\n      out._x = start._x * inv - end._x * t;\n      out._y = start._y * inv - end._y * t;\n      out._z = start._z * inv - end._z * t;\n      out._w = start._w * inv - end._w * t;\n    }\n\n    out.normalize();\n  }\n\n  /**\n   * Performs a spherical linear blend between two quaternions.\n   * @param start - The first quaternion\n   * @param end - The second quaternion\n   * @param amount - The blend amount where 0 returns start and 1 end\n   * @param out - The result of spherical linear blending between two quaternions\n   */\n  static slerp(start: Quaternion, end: Quaternion, amount: number, out: Quaternion): void {\n    let opposite: number;\n    let inverse: number;\n    const dot = Quaternion.dot(start, end);\n\n    if (Math.abs(dot) > 1.0 - MathUtil.zeroTolerance) {\n      inverse = 1.0 - amount;\n      opposite = amount * Math.sign(dot);\n    } else {\n      const acos = Math.acos(Math.abs(dot));\n      const invSin = 1.0 / Math.sin(acos);\n\n      inverse = Math.sin((1.0 - amount) * acos) * invSin;\n      opposite = Math.sin(amount * acos) * invSin * Math.sign(dot);\n    }\n\n    out.x = inverse * start.x + opposite * end.x;\n    out.y = inverse * start.y + opposite * end.y;\n    out.z = inverse * start.z + opposite * end.z;\n    out.w = inverse * start.w + opposite * end.w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Scales the specified quaternion magnitude to unit length.\n   * @param a - The specified quaternion\n   * @param out - The normalized quaternion\n   */\n  static normalize(a: Quaternion, out: Quaternion): void {\n    const { _x, _y, _z, _w } = a;\n    let len = Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out._x = _x * len;\n      out._y = _y * len;\n      out._z = _z * len;\n      out._w = _w * len;\n      out._onValueChanged && out._onValueChanged();\n    }\n  }\n\n  /**\n   * Calculate a quaternion rotate around X axis.\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationX(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out._x = s;\n    out._y = 0;\n    out._z = 0;\n    out._w = c;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion rotate around Y axis.\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationY(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out._x = 0;\n    out._y = s;\n    out._z = 0;\n    out._w = c;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion rotate around Z axis.\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationZ(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out._x = 0;\n    out._y = 0;\n    out._z = s;\n    out._w = c;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion that the specified quaternion rotate around X axis.\n   * @param quaternion - The specified quaternion\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotateX(quaternion: Quaternion, rad: number, out: Quaternion): void {\n    const { _x, _y, _z, _w } = quaternion;\n    rad *= 0.5;\n    const bx = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out._x = _x * bw + _w * bx;\n    out._y = _y * bw + _z * bx;\n    out._z = _z * bw - _y * bx;\n    out._w = _w * bw - _x * bx;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion that the specified quaternion rotate around Y axis.\n   * @param quaternion - The specified quaternion\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotateY(quaternion: Quaternion, rad: number, out: Quaternion): void {\n    const { _x, _y, _z, _w } = quaternion;\n    rad *= 0.5;\n    const by = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out._x = _x * bw - _z * by;\n    out._y = _y * bw + _w * by;\n    out._z = _z * bw + _x * by;\n    out._w = _w * bw - _y * by;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion that the specified quaternion rotate around Z axis.\n   * @param quaternion - The specified quaternion\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotateZ(quaternion: Quaternion, rad: number, out: Quaternion): void {\n    const { _x, _y, _z, _w } = quaternion;\n    rad *= 0.5;\n    const bz = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out._x = _x * bw + _y * bz;\n    out._y = _y * bw - _x * bz;\n    out._z = _z * bw + _w * bz;\n    out._w = _w * bw - _z * bz;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Scale a quaternion by a given number.\n   * @param a - The quaternion\n   * @param s - The given number\n   * @param out - The scaled quaternion\n   */\n  static scale(a: Quaternion, s: number, out: Quaternion): void {\n    out._x = a._x * s;\n    out._y = a._y * s;\n    out._z = a._z * s;\n    out._w = a._w * s;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /** @internal */\n  _x: number;\n  /** @internal */\n  _y: number;\n  /** @internal */\n  _z: number;\n  /** @internal */\n  _w: number;\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  /**\n   * The x component of the quaternion.\n   */\n  public get x(): number {\n    return this._x;\n  }\n\n  public set x(value: number) {\n    this._x = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The y component of the quaternion.\n   */\n  public get y(): number {\n    return this._y;\n  }\n\n  public set y(value: number) {\n    this._y = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The z component of the quaternion.\n   */\n  public get z(): number {\n    return this._z;\n  }\n\n  public set z(value: number) {\n    this._z = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Indicting whether this instance is normalized.\n   */\n  public get normalized(): boolean {\n    return (\n      Math.abs(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w - 1) <\n      MathUtil.zeroTolerance\n    );\n  }\n\n  /**\n   * The w component of the quaternion.\n   */\n  public get w() {\n    return this._w;\n  }\n\n  public set w(value: number) {\n    this._w = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of Quaternion.\n   * @param x - The x component of the quaternion, default 0\n   * @param y - The y component of the quaternion, default 0\n   * @param z - The z component of the quaternion, default 0\n   * @param w - The w component of the quaternion, default 1\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 1) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n  }\n\n  /**\n   * Set the value of this quaternion, and return this quaternion.\n   * @param x - The x component of the quaternion\n   * @param y - The y component of the quaternion\n   * @param z - The z component of the quaternion\n   * @param w - The w component of the quaternion\n   * @returns This quaternion\n   */\n  set(x: number, y: number, z: number, w: number): Quaternion {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Transforms this quaternion into its conjugated version.\n   * @returns This quaternion\n   */\n  conjugate(): Quaternion {\n    this._x *= -1;\n    this._y *= -1;\n    this._z *= -1;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Get the rotation axis and rotation angle of the quaternion (unit: radians).\n   * @param out - The axis as an output parameter\n   * @returns The rotation angle (unit: radians)\n   */\n  getAxisAngle(out: Vector3): number {\n    const { _x, _y, _z } = this;\n    const length = _x * _x + _y * _y + _z * _z;\n\n    if (length < MathUtil.zeroTolerance) {\n      out._x = 1;\n      out._y = 0;\n      out._z = 0;\n\n      return 0;\n    } else {\n      const inv = 1.0 / length;\n      out._x = this._x * inv;\n      out._y = this._y * inv;\n      out._z = this._z * inv;\n\n      return Math.acos(this._w) * 2.0;\n    }\n  }\n\n  /**\n   * Identity this quaternion.\n   * @returns This quaternion after identity\n   */\n  identity(): Quaternion {\n    this._x = 0;\n    this._y = 0;\n    this._z = 0;\n    this._w = 1;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Calculate the length of this quaternion.\n   * @returns The length of this quaternion\n   */\n  length(): number {\n    const { _x, _y, _z, _w } = this;\n    return Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);\n  }\n\n  /**\n   * Calculates the squared length of this quaternion.\n   * @returns The squared length of this quaternion\n   */\n  lengthSquared(): number {\n    const { _x, _y, _z, _w } = this;\n    return _x * _x + _y * _y + _z * _z + _w * _w;\n  }\n\n  /**\n   * Converts this quaternion into a unit quaternion.\n   * @returns This quaternion\n   */\n  normalize(): Quaternion {\n    Quaternion.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Get the euler of this quaternion.\n   * @param out - The euler (in radians) as an output parameter\n   * @returns Euler x->pitch y->yaw z->roll\n   */\n  toEuler(out: Vector3): Vector3 {\n    this._toYawPitchRoll(out);\n\n    const t = out._x;\n    out._x = out._y;\n    out._y = t;\n    out._onValueChanged && out._onValueChanged();\n    return out;\n  }\n\n  /**\n   * Get the euler of this quaternion.\n   * @param out - The euler (in radians) as an output parameter\n   * @returns Euler x->yaw y->pitch z->roll\n   */\n  toYawPitchRoll(out: Vector3): Vector3 {\n    this._toYawPitchRoll(out);\n    out._onValueChanged && out._onValueChanged();\n    return out;\n  }\n\n  /**\n   * Calculate this quaternion rotate around X axis.\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateX(rad: number): Quaternion {\n    Quaternion.rotateX(this, rad, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotate around Y axis.\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateY(rad: number): Quaternion {\n    Quaternion.rotateY(this, rad, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotate around Z axis.\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateZ(rad: number): Quaternion {\n    Quaternion.rotateZ(this, rad, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotates around an arbitrary axis.\n   * @param axis - The axis\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotationAxisAngle(axis: Vector3, rad: number): Quaternion {\n    Quaternion.rotationAxisAngle(axis, rad, this);\n    return this;\n  }\n\n  /**\n   * Determines the product of this quaternion and the specified quaternion.\n   * @param quat - The specified quaternion\n   * @returns The product of the two quaternions\n   */\n  multiply(quat: Quaternion): Quaternion {\n    Quaternion.multiply(this, quat, this);\n    return this;\n  }\n\n  /**\n   * Invert this quaternion.\n   * @returns This quaternion after invert\n   */\n  invert(): Quaternion {\n    Quaternion.invert(this, this);\n    return this;\n  }\n\n  /**\n   * Determines the dot product of this quaternion and the specified quaternion.\n   * @param quat - The specified quaternion\n   * @returns The dot product of two quaternions\n   */\n  dot(quat: Quaternion): number {\n    return Quaternion.dot(this, quat);\n  }\n\n  /**\n   * Performs a linear blend between this quaternion and the specified quaternion.\n   * @param quat - The specified quaternion\n   * @param t - The blend amount where 0 returns this and 1 quat\n   * @returns - The result of linear blending between two quaternions\n   */\n  lerp(quat: Quaternion, t: number): Quaternion {\n    Quaternion.lerp(this, quat, t, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotation around an arbitrary axis.\n   * @param axis - The axis\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateAxisAngle(axis: Vector3, rad: number): Quaternion {\n    Quaternion._tempQuat1.rotationAxisAngle(axis, rad);\n    this.multiply(Quaternion._tempQuat1);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this quaternion.\n   * @returns A clone of this quaternion\n   */\n  clone(): Quaternion {\n    return new Quaternion(this._x, this._y, this._z, this._w);\n  }\n\n  /**\n   * Copy this quaternion from the specified quaternion.\n   * @param source - The specified quaternion\n   * @returns This quaternion\n   */\n  copyFrom(source: QuaternionLike): Quaternion {\n    this._x = source.x;\n    this._y = source.y;\n    this._z = source.z;\n    this._w = source.w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this quaternion from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This quaternion\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Quaternion {\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._w = array[offset + 3];\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this quaternion to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this._x;\n    out[outOffset + 1] = this._y;\n    out[outOffset + 2] = this._z;\n    out[outOffset + 3] = this._w;\n  }\n\n  /**\n   * Serialize this quaternion to a JSON representation.\n   * @returns A JSON Object representation of this quaternion\n   */\n  toJSON(): QuaternionLike {\n    return {\n      x: this._x,\n      y: this._y,\n      z: this._z,\n      w: this._w\n    };\n  }\n\n  private _toYawPitchRoll(out: Vector3): void {\n    // https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles\n    const { _x: x, _y: y, _z: z, _w: w } = this;\n    const xx = x * x;\n    const sinP = 2.0 * (x * w - y * z);\n\n    // use 90 degrees if out of range\n    out._y = Math.abs(sinP) >= 1 ? Math.sign(sinP) * (Math.PI / 2) : Math.asin(sinP);\n    out._x = Math.atan2(2.0 * (z * x + y * w), 1.0 - 2.0 * (y * y + xx));\n    out._z = Math.atan2(2.0 * (x * y + z * w), 1.0 - 2.0 * (z * z + xx));\n  }\n\n  // @todo: this is yaw roll pitch, we need to waw pitch roll order, this version has better performance\n  // private _toYawRollPitch(out: Vector3): Vector3 {\n  //   // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/\n  //   const { _x: x, _y: y, _z: z, _w: w } = this;\n  //   const sqw = w * w;\n  //   const sqx = x * x;\n  //   const sqy = y * y;\n  //   const sqz = z * z;\n  //   const unit = sqx + sqy + sqz + sqw; // if normalised is one, otherwise is correction factor\n  //   const test = x * y + z * w;\n  //   if (test > (0.5 - MathUtil.zeroTolerance) * unit) {\n  //     // singularity at north pole\n  //     out._x = 2 * Math.atan2(x, w);\n  //     out._y = Math.PI / 2;\n  //     out._z = 0;\n  //     return;\n  //   }\n  //   if (test < -(0.5 - MathUtil.zeroTolerance) * unit) {\n  //     // singularity at south pole\n  //     out._x = -2 * Math.atan2(x, w);\n  //     out._y = -Math.PI / 2;\n  //     out._z = 0;\n  //     return;\n  //   }\n  //   out._x = Math.atan2(2 * y * w - 2 * x * z, sqx - sqy - sqz + sqw);\n  //   out._y = Math.asin((2 * test) / unit);\n  //   out._z = Math.atan2(2 * x * w - 2 * y * z, -sqx + sqy - sqz + sqw);\n  // }\n}\n\ninterface QuaternionLike {\n  /** {@inheritDoc Quaternion.x} */\n  x: number;\n  /** {@inheritDoc Quaternion.y} */\n  y: number;\n  /** {@inheritDoc Quaternion.z} */\n  z: number;\n  /** {@inheritDoc Quaternion.w} */\n  w: number;\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix3x3 } from \"./Matrix3x3\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a 4x4 mathematical matrix.\n */\nexport class Matrix implements IClone<Matrix>, ICopy<Matrix, Matrix> {\n  private static readonly _tempVec30: Vector3 = new Vector3();\n  private static readonly _tempVec31: Vector3 = new Vector3();\n  private static readonly _tempVec32: Vector3 = new Vector3();\n  private static readonly _tempMat30: Matrix3x3 = new Matrix3x3();\n\n  /** @internal Identity matrix. */\n  static readonly _identity: Matrix = new Matrix(\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0\n  );\n\n  /**\n   * Determines the product of two matrices.\n   * @param left - The first matrix to multiply\n   * @param right - The second matrix to multiply\n   * @param out - The product of the two matrices\n   */\n  static multiply(left: Matrix, right: Matrix, out: Matrix): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    // prettier-ignore\n    const l11 = le[0], l12 = le[1], l13 = le[2], l14 = le[3],\n    l21 = le[4], l22 = le[5], l23 = le[6], l24 = le[7],\n    l31 = le[8], l32 = le[9], l33 = le[10], l34 = le[11],\n    l41 = le[12], l42 = le[13], l43 = le[14], l44 = le[15];\n\n    // prettier-ignore\n    const r11 = re[0], r12 = re[1], r13 = re[2], r14 = re[3],\n    r21 = re[4], r22 = re[5], r23 = re[6], r24 = re[7],\n    r31 = re[8], r32 = re[9], r33 = re[10], r34 = re[11],\n    r41 = re[12], r42 = re[13], r43 = re[14], r44 = re[15];\n\n    oe[0] = l11 * r11 + l21 * r12 + l31 * r13 + l41 * r14;\n    oe[1] = l12 * r11 + l22 * r12 + l32 * r13 + l42 * r14;\n    oe[2] = l13 * r11 + l23 * r12 + l33 * r13 + l43 * r14;\n    oe[3] = l14 * r11 + l24 * r12 + l34 * r13 + l44 * r14;\n\n    oe[4] = l11 * r21 + l21 * r22 + l31 * r23 + l41 * r24;\n    oe[5] = l12 * r21 + l22 * r22 + l32 * r23 + l42 * r24;\n    oe[6] = l13 * r21 + l23 * r22 + l33 * r23 + l43 * r24;\n    oe[7] = l14 * r21 + l24 * r22 + l34 * r23 + l44 * r24;\n\n    oe[8] = l11 * r31 + l21 * r32 + l31 * r33 + l41 * r34;\n    oe[9] = l12 * r31 + l22 * r32 + l32 * r33 + l42 * r34;\n    oe[10] = l13 * r31 + l23 * r32 + l33 * r33 + l43 * r34;\n    oe[11] = l14 * r31 + l24 * r32 + l34 * r33 + l44 * r34;\n\n    oe[12] = l11 * r41 + l21 * r42 + l31 * r43 + l41 * r44;\n    oe[13] = l12 * r41 + l22 * r42 + l32 * r43 + l42 * r44;\n    oe[14] = l13 * r41 + l23 * r42 + l33 * r43 + l43 * r44;\n    oe[15] = l14 * r41 + l24 * r42 + l34 * r43 + l44 * r44;\n  }\n\n  /**\n   * Determines whether the specified matrices are equals.\n   * @param left - The first matrix to compare\n   * @param right - The second matrix to compare\n   * @returns True if the specified matrices are equals, false otherwise\n   */\n  static equals(left: Matrix, right: Matrix): boolean {\n    const le = left.elements;\n    const re = right.elements;\n\n    return (\n      MathUtil.equals(le[0], re[0]) &&\n      MathUtil.equals(le[1], re[1]) &&\n      MathUtil.equals(le[2], re[2]) &&\n      MathUtil.equals(le[3], re[3]) &&\n      MathUtil.equals(le[4], re[4]) &&\n      MathUtil.equals(le[5], re[5]) &&\n      MathUtil.equals(le[6], re[6]) &&\n      MathUtil.equals(le[7], re[7]) &&\n      MathUtil.equals(le[8], re[8]) &&\n      MathUtil.equals(le[9], re[9]) &&\n      MathUtil.equals(le[10], re[10]) &&\n      MathUtil.equals(le[11], re[11]) &&\n      MathUtil.equals(le[12], re[12]) &&\n      MathUtil.equals(le[13], re[13]) &&\n      MathUtil.equals(le[14], re[14]) &&\n      MathUtil.equals(le[15], re[15])\n    );\n  }\n\n  /**\n   * Performs a linear interpolation between two matrices.\n   * @param start - The first matrix\n   * @param end - The second matrix\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two matrices\n   */\n  static lerp(start: Matrix, end: Matrix, t: number, out: Matrix): void {\n    const se = start.elements;\n    const ee = end.elements;\n    const oe = out.elements;\n    const inv = 1.0 - t;\n\n    oe[0] = se[0] * inv + ee[0] * t;\n    oe[1] = se[1] * inv + ee[1] * t;\n    oe[2] = se[2] * inv + ee[2] * t;\n    oe[3] = se[3] * inv + ee[3] * t;\n\n    oe[4] = se[4] * inv + ee[4] * t;\n    oe[5] = se[5] * inv + ee[5] * t;\n    oe[6] = se[6] * inv + ee[6] * t;\n    oe[7] = se[7] * inv + ee[7] * t;\n\n    oe[8] = se[8] * inv + ee[8] * t;\n    oe[9] = se[9] * inv + ee[9] * t;\n    oe[10] = se[10] * inv + ee[10] * t;\n    oe[11] = se[11] * inv + ee[11] * t;\n\n    oe[12] = se[12] * inv + ee[12] * t;\n    oe[13] = se[13] * inv + ee[13] * t;\n    oe[14] = se[14] * inv + ee[14] * t;\n    oe[15] = se[15] * inv + ee[15] * t;\n  }\n\n  /**\n   * Determines the sum of two matrices.\n   * @param left - The first matrix to add\n   * @param right - The second matrix to add\n   * @param out - The sum of two matrices\n   */\n  static add(left: Matrix, right: Matrix, out: Matrix): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n    oe[0] = le[0] + re[0];\n    oe[1] = le[1] + re[1];\n    oe[2] = le[2] + re[2];\n    oe[3] = le[3] + re[3];\n    oe[4] = le[4] + re[4];\n    oe[5] = le[5] + re[5];\n    oe[6] = le[6] + re[6];\n    oe[7] = le[7] + re[7];\n    oe[8] = le[8] + re[8];\n    oe[9] = le[9] + re[9];\n    oe[10] = le[10] + re[10];\n    oe[11] = le[11] + re[11];\n    oe[12] = le[12] + re[12];\n    oe[13] = le[13] + re[13];\n    oe[14] = le[14] + re[14];\n    oe[15] = le[15] + re[15];\n  }\n\n  /**\n   * Multiplies a matrix by a scalar.\n   * @param source - The matrix to multiply\n   * @param scalar - The scalar to multiply\n   * @param out - The result of multiplying a matrix by a scalar\n   */\n  static multiplyScalar(source: Matrix, scalar: number, out: Matrix): void {\n    const se = source.elements;\n    const oe = out.elements;\n\n    oe[0] = se[0] * scalar;\n    oe[1] = se[1] * scalar;\n    oe[2] = se[2] * scalar;\n    oe[3] = se[3] * scalar;\n    oe[4] = se[4] * scalar;\n    oe[5] = se[5] * scalar;\n    oe[6] = se[6] * scalar;\n    oe[7] = se[7] * scalar;\n    oe[8] = se[8] * scalar;\n    oe[9] = se[9] * scalar;\n    oe[10] = se[10] * scalar;\n    oe[11] = se[11] * scalar;\n    oe[12] = se[12] * scalar;\n    oe[13] = se[13] * scalar;\n    oe[14] = se[14] * scalar;\n    oe[15] = se[15] * scalar;\n  }\n\n  /**\n   * Calculate a rotation matrix from a quaternion.\n   * @param quaternion - The quaternion used to calculate the matrix\n   * @param out - The calculated rotation matrix\n   */\n  static rotationQuaternion(quaternion: Quaternion, out: Matrix): void {\n    const oe = out.elements;\n    const { _x: x, _y: y, _z: z, _w: w } = quaternion;\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    oe[0] = 1 - yy - zz;\n    oe[1] = yx + wz;\n    oe[2] = zx - wy;\n    oe[3] = 0;\n\n    oe[4] = yx - wz;\n    oe[5] = 1 - xx - zz;\n    oe[6] = zy + wx;\n    oe[7] = 0;\n\n    oe[8] = zx + wy;\n    oe[9] = zy - wx;\n    oe[10] = 1 - xx - yy;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix rotates around an arbitrary axis.\n   * @param axis - The axis\n   * @param r - The rotation angle in radians\n   * @param out - The matrix after rotate\n   */\n  static rotationAxisAngle(axis: Vector3, r: number, out: Matrix): void {\n    const oe = out.elements;\n    let { _x: x, _y: y, _z: z } = axis;\n    let len = Math.sqrt(x * x + y * y + z * z);\n    let s, c, t;\n\n    if (Math.abs(len) < MathUtil.zeroTolerance) {\n      return;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(r);\n    c = Math.cos(r);\n    t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    oe[0] = x * x * t + c;\n    oe[1] = y * x * t + z * s;\n    oe[2] = z * x * t - y * s;\n    oe[3] = 0;\n\n    oe[4] = x * y * t - z * s;\n    oe[5] = y * y * t + c;\n    oe[6] = z * y * t + x * s;\n    oe[7] = 0;\n\n    oe[8] = x * z * t + y * s;\n    oe[9] = y * z * t - x * s;\n    oe[10] = z * z * t + c;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix from a quaternion and a translation.\n   * @param quaternion - The quaternion used to calculate the matrix\n   * @param translation - The translation used to calculate the matrix\n   * @param out - The calculated matrix\n   */\n  static rotationTranslation(quaternion: Quaternion, translation: Vector3, out: Matrix): void {\n    Matrix.rotationQuaternion(quaternion, out);\n\n    const oe = out.elements;\n    oe[12] = translation._x;\n    oe[13] = translation._y;\n    oe[14] = translation._z;\n  }\n\n  /**\n   * Calculate an affine matrix.\n   * @param scale - The scale used to calculate matrix\n   * @param rotation - The rotation used to calculate matrix\n   * @param translation - The translation used to calculate matrix\n   * @param out - The calculated matrix\n   */\n  static affineTransformation(scale: Vector3, rotation: Quaternion, translation: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    const { _x: x, _y: y, _z: z, _w: w } = rotation;\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = scale._x;\n    let sy = scale._y;\n    let sz = scale._z;\n\n    oe[0] = (1 - (yy + zz)) * sx;\n    oe[1] = (xy + wz) * sx;\n    oe[2] = (xz - wy) * sx;\n    oe[3] = 0;\n\n    oe[4] = (xy - wz) * sy;\n    oe[5] = (1 - (xx + zz)) * sy;\n    oe[6] = (yz + wx) * sy;\n    oe[7] = 0;\n\n    oe[8] = (xz + wy) * sz;\n    oe[9] = (yz - wx) * sz;\n    oe[10] = (1 - (xx + yy)) * sz;\n    oe[11] = 0;\n\n    oe[12] = translation._x;\n    oe[13] = translation._y;\n    oe[14] = translation._z;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix from scale vector.\n   * @param s - The scale vector\n   * @param out - The calculated matrix\n   */\n  static scaling(s: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    oe[0] = s._x;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = s._y;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = s._z;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix from translation vector.\n   * @param translation - The translation vector\n   * @param out - The calculated matrix\n   */\n  static translation(translation: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    oe[0] = 1;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = 1;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = 1;\n    oe[11] = 0;\n\n    oe[12] = translation._x;\n    oe[13] = translation._y;\n    oe[14] = translation._z;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate the inverse of the specified matrix.\n   * @param a - The matrix whose inverse is to be calculated\n   * @param out - The inverse of the specified matrix\n   */\n  static invert(a: Matrix, out: Matrix): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2],\n      a14 = ae[3];\n    const a21 = ae[4],\n      a22 = ae[5],\n      a23 = ae[6],\n      a24 = ae[7];\n    const a31 = ae[8],\n      a32 = ae[9],\n      a33 = ae[10],\n      a34 = ae[11];\n    const a41 = ae[12],\n      a42 = ae[13],\n      a43 = ae[14],\n      a44 = ae[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;\n    oe[1] = (a13 * b10 - a12 * b11 - a14 * b09) * det;\n    oe[2] = (a42 * b05 - a43 * b04 + a44 * b03) * det;\n    oe[3] = (a33 * b04 - a32 * b05 - a34 * b03) * det;\n\n    oe[4] = (a23 * b08 - a21 * b11 - a24 * b07) * det;\n    oe[5] = (a11 * b11 - a13 * b08 + a14 * b07) * det;\n    oe[6] = (a43 * b02 - a41 * b05 - a44 * b01) * det;\n    oe[7] = (a31 * b05 - a33 * b02 + a34 * b01) * det;\n\n    oe[8] = (a21 * b10 - a22 * b08 + a24 * b06) * det;\n    oe[9] = (a12 * b08 - a11 * b10 - a14 * b06) * det;\n    oe[10] = (a41 * b04 - a42 * b02 + a44 * b00) * det;\n    oe[11] = (a32 * b02 - a31 * b04 - a34 * b00) * det;\n\n    oe[12] = (a22 * b07 - a21 * b09 - a23 * b06) * det;\n    oe[13] = (a11 * b09 - a12 * b07 + a13 * b06) * det;\n    oe[14] = (a42 * b01 - a41 * b03 - a43 * b00) * det;\n    oe[15] = (a31 * b03 - a32 * b01 + a33 * b00) * det;\n  }\n\n  /**\n   * Calculate a right-handed look-at matrix.\n   * @param eye - The position of the viewer's eye\n   * @param target - The camera look-at target\n   * @param up - The camera's up vector\n   * @param out - The calculated look-at matrix\n   */\n  static lookAt(eye: Vector3, target: Vector3, up: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    const xAxis: Vector3 = Matrix._tempVec30;\n    const yAxis: Vector3 = Matrix._tempVec31;\n    const zAxis: Vector3 = Matrix._tempVec32;\n\n    Vector3.subtract(eye, target, zAxis);\n    zAxis.normalize();\n    Vector3.cross(up, zAxis, xAxis);\n    xAxis.normalize();\n    Vector3.cross(zAxis, xAxis, yAxis);\n\n    oe[0] = xAxis._x;\n    oe[1] = yAxis._x;\n    oe[2] = zAxis._x;\n    oe[3] = 0;\n\n    oe[4] = xAxis._y;\n    oe[5] = yAxis._y;\n    oe[6] = zAxis._y;\n    oe[7] = 0;\n\n    oe[8] = xAxis._z;\n    oe[9] = yAxis._z;\n    oe[10] = zAxis._z;\n    oe[11] = 0;\n\n    oe[12] = -Vector3.dot(xAxis, eye);\n    oe[13] = -Vector3.dot(yAxis, eye);\n    oe[14] = -Vector3.dot(zAxis, eye);\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate an orthographic projection matrix.\n   * @param left - The left edge of the viewing\n   * @param right - The right edge of the viewing\n   * @param bottom - The bottom edge of the viewing\n   * @param top - The top edge of the viewing\n   * @param near - The depth of the near plane\n   * @param far - The depth of the far plane\n   * @param out - The calculated orthographic projection matrix\n   */\n  static ortho(left: number, right: number, bottom: number, top: number, near: number, far: number, out: Matrix): void {\n    const oe = out.elements;\n    const lr = 1 / (left - right);\n    const bt = 1 / (bottom - top);\n    const nf = 1 / (near - far);\n\n    oe[0] = -2 * lr;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = -2 * bt;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = 2 * nf;\n    oe[11] = 0;\n\n    oe[12] = (left + right) * lr;\n    oe[13] = (top + bottom) * bt;\n    oe[14] = (far + near) * nf;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a perspective projection matrix.\n   * @param fovY - Field of view in the y direction, in radians\n   * @param aspect - Aspect ratio, defined as view space width divided by height\n   * @param near - The depth of the near plane\n   * @param far - The depth of the far plane\n   * @param out - The calculated perspective projection matrix\n   */\n  static perspective(fovY: number, aspect: number, near: number, far: number, out: Matrix): void {\n    const oe = out.elements;\n    const f = 1.0 / Math.tan(fovY / 2);\n    const nf = 1 / (near - far);\n\n    oe[0] = f / aspect;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = f;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = (far + near) * nf;\n    oe[11] = -1;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 2 * far * near * nf;\n    oe[15] = 0;\n  }\n\n  /**\n   * The specified matrix rotates around an arbitrary axis.\n   * @param m - The specified matrix\n   * @param axis - The axis\n   * @param r - The rotation angle in radians\n   * @param out - The rotated matrix\n   */\n  static rotateAxisAngle(m: Matrix, axis: Vector3, r: number, out: Matrix): void {\n    let { _x: x, _y: y, _z: z } = axis;\n    let len = Math.sqrt(x * x + y * y + z * z);\n\n    if (Math.abs(len) < MathUtil.zeroTolerance) {\n      return;\n    }\n\n    const me = m.elements;\n    const oe = out.elements;\n    let s, c, t;\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(r);\n    c = Math.cos(r);\n    t = 1 - c;\n\n    let a11 = me[0],\n      a12 = me[1],\n      a13 = me[2],\n      a14 = me[3];\n    let a21 = me[4],\n      a22 = me[5],\n      a23 = me[6],\n      a24 = me[7];\n    let a31 = me[8],\n      a32 = me[9],\n      a33 = me[10],\n      a34 = me[11];\n\n    // Construct the elements of the rotation matrix\n    let b11 = x * x * t + c;\n    let b12 = y * x * t + z * s;\n    let b13 = z * x * t - y * s;\n    let b21 = x * y * t - z * s;\n    let b22 = y * y * t + c;\n    let b23 = z * y * t + x * s;\n    let b31 = x * z * t + y * s;\n    let b32 = y * z * t - x * s;\n    let b33 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    oe[0] = a11 * b11 + a21 * b12 + a31 * b13;\n    oe[1] = a12 * b11 + a22 * b12 + a32 * b13;\n    oe[2] = a13 * b11 + a23 * b12 + a33 * b13;\n    oe[3] = a14 * b11 + a24 * b12 + a34 * b13;\n\n    oe[4] = a11 * b21 + a21 * b22 + a31 * b23;\n    oe[5] = a12 * b21 + a22 * b22 + a32 * b23;\n    oe[6] = a13 * b21 + a23 * b22 + a33 * b23;\n    oe[7] = a14 * b21 + a24 * b22 + a34 * b23;\n\n    oe[8] = a11 * b31 + a21 * b32 + a31 * b33;\n    oe[9] = a12 * b31 + a22 * b32 + a32 * b33;\n    oe[10] = a13 * b31 + a23 * b32 + a33 * b33;\n    oe[11] = a14 * b31 + a24 * b32 + a34 * b33;\n\n    if (m !== out) {\n      // If the source and destination differ, copy the unchanged last row\n      oe[12] = me[12];\n      oe[13] = me[13];\n      oe[14] = me[14];\n      oe[15] = me[15];\n    }\n  }\n\n  /**\n   * Scale a matrix by a given vector.\n   * @param m - The matrix\n   * @param s - The given vector\n   * @param out - The scaled matrix\n   */\n  static scale(m: Matrix, s: Vector3, out: Matrix): void {\n    const me = m.elements;\n    const oe = out.elements;\n    const { _x: x, _y: y, _z: z } = s;\n\n    oe[0] = me[0] * x;\n    oe[1] = me[1] * x;\n    oe[2] = me[2] * x;\n    oe[3] = me[3] * x;\n\n    oe[4] = me[4] * y;\n    oe[5] = me[5] * y;\n    oe[6] = me[6] * y;\n    oe[7] = me[7] * y;\n\n    oe[8] = me[8] * z;\n    oe[9] = me[9] * z;\n    oe[10] = me[10] * z;\n    oe[11] = me[11] * z;\n\n    oe[12] = me[12];\n    oe[13] = me[13];\n    oe[14] = me[14];\n    oe[15] = me[15];\n  }\n\n  /**\n   * Translate a matrix by a given vector.\n   * @param m - The matrix\n   * @param v - The given vector\n   * @param out - The translated matrix\n   */\n  static translate(m: Matrix, v: Vector3, out: Matrix): void {\n    const me = m.elements;\n    const oe = out.elements;\n    const { _x: x, _y: y, _z: z } = v;\n\n    if (m === out) {\n      oe[12] = me[0] * x + me[4] * y + me[8] * z + me[12];\n      oe[13] = me[1] * x + me[5] * y + me[9] * z + me[13];\n      oe[14] = me[2] * x + me[6] * y + me[10] * z + me[14];\n      oe[15] = me[3] * x + me[7] * y + me[11] * z + me[15];\n    } else {\n      const a11 = me[0],\n        a12 = me[1],\n        a13 = me[2],\n        a14 = me[3];\n      const a21 = me[4],\n        a22 = me[5],\n        a23 = me[6],\n        a24 = me[7];\n      const a31 = me[8],\n        a32 = me[9],\n        a33 = me[10],\n        a34 = me[11];\n\n      (oe[0] = a11), (oe[1] = a12), (oe[2] = a13), (oe[3] = a14);\n      (oe[4] = a21), (oe[5] = a22), (oe[6] = a23), (oe[7] = a24);\n      (oe[8] = a31), (oe[9] = a32), (oe[10] = a33), (oe[11] = a34);\n\n      oe[12] = a11 * x + a21 * y + a31 * z + me[12];\n      oe[13] = a12 * x + a22 * y + a32 * z + me[13];\n      oe[14] = a13 * x + a23 * y + a33 * z + me[14];\n      oe[15] = a14 * x + a24 * y + a34 * z + me[15];\n    }\n  }\n\n  /**\n   * Calculate the transpose of the specified matrix.\n   * @param a - The specified matrix\n   * @param out - The transpose of the specified matrix\n   */\n  static transpose(a: Matrix, out: Matrix): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    if (out === a) {\n      const a12 = ae[1];\n      const a13 = ae[2];\n      const a14 = ae[3];\n      const a23 = ae[6];\n      const a24 = ae[7];\n      const a34 = ae[11];\n\n      oe[1] = ae[4];\n      oe[2] = ae[8];\n      oe[3] = ae[12];\n\n      oe[4] = a12;\n      oe[6] = ae[9];\n      oe[7] = ae[13];\n\n      oe[8] = a13;\n      oe[9] = a23;\n      oe[11] = ae[14];\n\n      oe[12] = a14;\n      oe[13] = a24;\n      oe[14] = a34;\n    } else {\n      oe[0] = ae[0];\n      oe[1] = ae[4];\n      oe[2] = ae[8];\n      oe[3] = ae[12];\n\n      oe[4] = ae[1];\n      oe[5] = ae[5];\n      oe[6] = ae[9];\n      oe[7] = ae[13];\n\n      oe[8] = ae[2];\n      oe[9] = ae[6];\n      oe[10] = ae[10];\n      oe[11] = ae[14];\n\n      oe[12] = ae[3];\n      oe[13] = ae[7];\n      oe[14] = ae[11];\n      oe[15] = ae[15];\n    }\n  }\n\n  /**\n   * An array containing the elements of the matrix (column matrix).\n   * @remarks\n   * elements[0] first column and first row value m11\n   * elements[1] first column and second row value m12\n   * elements[2] first column and third row value m13\n   * elements[3] first column and fourth row value m14\n   * elements[4] second column and first row value m21\n   * and so on\n   */\n  elements: Float32Array = new Float32Array(16);\n\n  /**\n   * Constructor of 4x4 Matrix.\n   * @param m11 - default 1, column 1, row 1\n   * @param m12 - default 0, column 1, row 2\n   * @param m13 - default 0, column 1, row 3\n   * @param m14 - default 0, column 1, row 4\n   * @param m21 - default 0, column 2, row 1\n   * @param m22 - default 1, column 2, row 2\n   * @param m23 - default 0, column 2, row 3\n   * @param m24 - default 0, column 2, row 4\n   * @param m31 - default 0, column 3, row 1\n   * @param m32 - default 0, column 3, row 2\n   * @param m33 - default 1, column 3, row 3\n   * @param m34 - default 0, column 3, row 4\n   * @param m41 - default 0, column 4, row 1\n   * @param m42 - default 0, column 4, row 2\n   * @param m43 - default 0, column 4, row 3\n   * @param m44 - default 1, column 4, row 4\n   */\n  constructor(\n    m11: number = 1,\n    m12: number = 0,\n    m13: number = 0,\n    m14: number = 0,\n    m21: number = 0,\n    m22: number = 1,\n    m23: number = 0,\n    m24: number = 0,\n    m31: number = 0,\n    m32: number = 0,\n    m33: number = 1,\n    m34: number = 0,\n    m41: number = 0,\n    m42: number = 0,\n    m43: number = 0,\n    m44: number = 1\n  ) {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n    e[3] = m14;\n\n    e[4] = m21;\n    e[5] = m22;\n    e[6] = m23;\n    e[7] = m24;\n\n    e[8] = m31;\n    e[9] = m32;\n    e[10] = m33;\n    e[11] = m34;\n\n    e[12] = m41;\n    e[13] = m42;\n    e[14] = m43;\n    e[15] = m44;\n  }\n\n  /**\n   * Set the value of this matrix, and return this matrix.\n   * @param m11 - column 1, row 1\n   * @param m12 - column 1, row 2\n   * @param m13 - column 1, row 3\n   * @param m14 - column 1, row 4\n   * @param m21 - column 2, row 1\n   * @param m22 - column 2, row 2\n   * @param m23 - column 2, row 3\n   * @param m24 - column 2, row 4\n   * @param m31 - column 3, row 1\n   * @param m32 - column 3, row 2\n   * @param m33 - column 3, row 3\n   * @param m34 - column 3, row 4\n   * @param m41 - column 4, row 1\n   * @param m42 - column 4, row 2\n   * @param m43 - column 4, row 3\n   * @param m44 - column 4, row 4\n   * @returns This matrix\n   */\n  set(\n    m11: number,\n    m12: number,\n    m13: number,\n    m14: number,\n    m21: number,\n    m22: number,\n    m23: number,\n    m24: number,\n    m31: number,\n    m32: number,\n    m33: number,\n    m34: number,\n    m41: number,\n    m42: number,\n    m43: number,\n    m44: number\n  ): Matrix {\n    const e = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n    e[3] = m14;\n\n    e[4] = m21;\n    e[5] = m22;\n    e[6] = m23;\n    e[7] = m24;\n\n    e[8] = m31;\n    e[9] = m32;\n    e[10] = m33;\n    e[11] = m34;\n\n    e[12] = m41;\n    e[13] = m42;\n    e[14] = m43;\n    e[15] = m44;\n\n    return this;\n  }\n\n  /**\n   * Determines the product of this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the product of the two matrices\n   */\n  multiply(right: Matrix): Matrix {\n    Matrix.multiply(this, right, this);\n    return this;\n  }\n\n  /**\n   * Calculate a determinant of this matrix.\n   * @returns The determinant of this matrix\n   */\n  determinant(): number {\n    const e = this.elements;\n\n    const a11 = e[0],\n      a12 = e[1],\n      a13 = e[2],\n      a14 = e[3];\n    const a21 = e[4],\n      a22 = e[5],\n      a23 = e[6],\n      a24 = e[7];\n    const a31 = e[8],\n      a32 = e[9],\n      a33 = e[10],\n      a34 = e[11];\n    const a41 = e[12],\n      a42 = e[13],\n      a43 = e[14],\n      a44 = e[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n  }\n\n  /**\n   * Decompose this matrix to translation, rotation and scale elements.\n   * @param translation - Translation vector as an output parameter\n   * @param rotation - Rotation quaternion as an output parameter\n   * @param scale - Scale vector as an output parameter\n   * @returns True if this matrix can be decomposed, false otherwise\n   */\n  decompose(translation: Vector3, rotation: Quaternion, scale: Vector3): boolean {\n    const rm: Matrix3x3 = Matrix._tempMat30;\n\n    const e = this.elements;\n    const rme = rm.elements;\n\n    const m11 = e[0];\n    const m12 = e[1];\n    const m13 = e[2];\n    const m14 = e[3];\n    const m21 = e[4];\n    const m22 = e[5];\n    const m23 = e[6];\n    const m24 = e[7];\n    const m31 = e[8];\n    const m32 = e[9];\n    const m33 = e[10];\n    const m34 = e[11];\n    translation.set(e[12], e[13], e[14]);\n\n    const xs = Math.sign(m11 * m12 * m13 * m14) < 0 ? -1 : 1;\n    const ys = Math.sign(m21 * m22 * m23 * m24) < 0 ? -1 : 1;\n    const zs = Math.sign(m31 * m32 * m33 * m34) < 0 ? -1 : 1;\n\n    const sx = xs * Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n    const sy = ys * Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n    const sz = zs * Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n    scale.set(sx, sy, sz);\n\n    if (\n      Math.abs(sx) < MathUtil.zeroTolerance ||\n      Math.abs(sy) < MathUtil.zeroTolerance ||\n      Math.abs(sz) < MathUtil.zeroTolerance\n    ) {\n      rotation.identity();\n      return false;\n    } else {\n      const invSX = 1 / sx;\n      const invSY = 1 / sy;\n      const invSZ = 1 / sz;\n\n      rme[0] = m11 * invSX;\n      rme[1] = m12 * invSX;\n      rme[2] = m13 * invSX;\n      rme[3] = m21 * invSY;\n      rme[4] = m22 * invSY;\n      rme[5] = m23 * invSY;\n      rme[6] = m31 * invSZ;\n      rme[7] = m32 * invSZ;\n      rme[8] = m33 * invSZ;\n      Quaternion.rotationMatrix3x3(rm, rotation);\n      return true;\n    }\n  }\n\n  /**\n   * Get rotation from this matrix.\n   * @param out - Rotation quaternion as an output parameter\n   * @returns The out\n   */\n  getRotation(out: Quaternion): Quaternion {\n    const e = this.elements;\n    let trace = e[0] + e[5] + e[10];\n\n    if (trace > MathUtil.zeroTolerance) {\n      let s = Math.sqrt(trace + 1.0) * 2;\n      out._w = 0.25 * s;\n      out._x = (e[6] - e[9]) / s;\n      out._y = (e[8] - e[2]) / s;\n      out._z = (e[1] - e[4]) / s;\n    } else if (e[0] > e[5] && e[0] > e[10]) {\n      let s = Math.sqrt(1.0 + e[0] - e[5] - e[10]) * 2;\n      out._w = (e[6] - e[9]) / s;\n      out._x = 0.25 * s;\n      out._y = (e[1] + e[4]) / s;\n      out._z = (e[8] + e[2]) / s;\n    } else if (e[5] > e[10]) {\n      let s = Math.sqrt(1.0 + e[5] - e[0] - e[10]) * 2;\n      out._w = (e[8] - e[2]) / s;\n      out._x = (e[1] + e[4]) / s;\n      out._y = 0.25 * s;\n      out._z = (e[6] + e[9]) / s;\n    } else {\n      let s = Math.sqrt(1.0 + e[10] - e[0] - e[5]) * 2;\n      out._w = (e[1] - e[4]) / s;\n      out._x = (e[8] + e[2]) / s;\n      out._y = (e[6] + e[9]) / s;\n      out._z = 0.25 * s;\n    }\n\n    out._onValueChanged && out._onValueChanged();\n    return out;\n  }\n\n  /**\n   * Get scale from this matrix.\n   * @param out - Scale vector as an output parameter\n   * @returns The out\n   */\n  getScaling(out: Vector3): Vector3 {\n    //getScale()\n    const e = this.elements;\n    const m11 = e[0],\n      m12 = e[1],\n      m13 = e[2];\n    const m21 = e[4],\n      m22 = e[5],\n      m23 = e[6];\n    const m31 = e[8],\n      m32 = e[9],\n      m33 = e[10];\n\n    out.set(\n      Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13),\n      Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23),\n      Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33)\n    );\n\n    return out;\n  }\n\n  /**\n   * Get translation from this matrix.\n   * @param out - Translation vector as an output parameter\n   * @returns The out\n   */\n  getTranslation(out: Vector3): Vector3 {\n    const e = this.elements;\n    out.set(e[12], e[13], e[14]);\n    return out;\n  }\n\n  /**\n   * Identity this matrix.\n   * @returns This matrix after identity\n   */\n  identity(): Matrix {\n    const e = this.elements;\n\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n\n    e[4] = 0;\n    e[5] = 1;\n    e[6] = 0;\n    e[7] = 0;\n\n    e[8] = 0;\n    e[9] = 0;\n    e[10] = 1;\n    e[11] = 0;\n\n    e[12] = 0;\n    e[13] = 0;\n    e[14] = 0;\n    e[15] = 1;\n\n    return this;\n  }\n\n  /**\n   * Invert the matrix.\n   * @returns The matrix after invert\n   */\n  invert(): Matrix {\n    Matrix.invert(this, this);\n    return this;\n  }\n\n  /**\n   * This matrix rotates around an arbitrary axis.\n   * @param axis - The axis\n   * @param r - The rotation angle in radians\n   * @returns This matrix after rotate\n   */\n  rotateAxisAngle(axis: Vector3, r: number): Matrix {\n    Matrix.rotateAxisAngle(this, axis, r, this);\n    return this;\n  }\n\n  /**\n   * Scale this matrix by a given vector.\n   * @param s - The given vector\n   * @returns This matrix after scale\n   */\n  scale(s: Vector3): Matrix {\n    Matrix.scale(this, s, this);\n    return this;\n  }\n\n  /**\n   * Translate this matrix by a given vector.\n   * @param v - The given vector\n   * @returns This matrix after translate\n   */\n  translate(v: Vector3): Matrix {\n    Matrix.translate(this, v, this);\n    return this;\n  }\n\n  /**\n   * Calculate the transpose of this matrix.\n   * @returns This matrix after transpose\n   */\n  transpose(): Matrix {\n    Matrix.transpose(this, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this matrix.\n   * @returns A clone of this matrix\n   */\n  clone(): Matrix {\n    const e = this.elements;\n    let ret = new Matrix(\n      e[0],\n      e[1],\n      e[2],\n      e[3],\n      e[4],\n      e[5],\n      e[6],\n      e[7],\n      e[8],\n      e[9],\n      e[10],\n      e[11],\n      e[12],\n      e[13],\n      e[14],\n      e[15]\n    );\n    return ret;\n  }\n\n  /**\n   * Copy this matrix from the specified matrix.\n   * @param source - The specified matrix\n   * @returns This matrix\n   */\n  copyFrom(source: Matrix): Matrix {\n    const e = this.elements;\n    const se = source.elements;\n\n    e[0] = se[0];\n    e[1] = se[1];\n    e[2] = se[2];\n    e[3] = se[3];\n\n    e[4] = se[4];\n    e[5] = se[5];\n    e[6] = se[6];\n    e[7] = se[7];\n\n    e[8] = se[8];\n    e[9] = se[9];\n    e[10] = se[10];\n    e[11] = se[11];\n\n    e[12] = se[12];\n    e[13] = se[13];\n    e[14] = se[14];\n    e[15] = se[15];\n\n    return this;\n  }\n\n  /**\n   * Copy the value of this matrix from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This matrix\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Matrix {\n    const srce = this.elements;\n    for (let i = 0; i < 16; i++) {\n      srce[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * Copy the value of this matrix to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0): void {\n    const e = this.elements;\n\n    out[outOffset] = e[0];\n    out[outOffset + 1] = e[1];\n    out[outOffset + 2] = e[2];\n    out[outOffset + 3] = e[3];\n    out[outOffset + 4] = e[4];\n    out[outOffset + 5] = e[5];\n    out[outOffset + 6] = e[6];\n    out[outOffset + 7] = e[7];\n    out[outOffset + 8] = e[8];\n    out[outOffset + 9] = e[9];\n    out[outOffset + 10] = e[10];\n    out[outOffset + 11] = e[11];\n    out[outOffset + 12] = e[12];\n    out[outOffset + 13] = e[13];\n    out[outOffset + 14] = e[14];\n    out[outOffset + 15] = e[15];\n  }\n}\n","import { BoundingBox } from \"./BoundingBox\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { CollisionUtil } from \"./CollisionUtil\";\nimport { Plane } from \"./Plane\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a ray with an origin and a direction in 3D space.\n */\nexport class Ray {\n  /** The origin of the ray. */\n  readonly origin: Vector3 = new Vector3();\n  /** The normalized direction of the ray. */\n  readonly direction: Vector3 = new Vector3();\n\n  /**\n   * Constructor of Ray.\n   * @param origin - The origin vector\n   * @param direction - The direction vector\n   */\n  constructor(origin: Vector3 = null, direction: Vector3 = null) {\n    origin && this.origin.copyFrom(origin);\n    direction && this.direction.copyFrom(direction);\n  }\n\n  /**\n   * Check if this ray intersects the specified plane.\n   * @param plane - The specified plane\n   * @returns The distance from this ray to the specified plane if intersecting, -1 otherwise\n   */\n  intersectPlane(plane: Plane): number {\n    return CollisionUtil.intersectsRayAndPlane(this, plane);\n  }\n\n  /**\n   * Check if this ray intersects the specified sphere.\n   * @param sphere - The specified sphere\n   * @returns The distance from this ray to the specified sphere if intersecting, -1 otherwise\n   */\n  intersectSphere(sphere: BoundingSphere): number {\n    return CollisionUtil.intersectsRayAndSphere(this, sphere);\n  }\n\n  /**\n   * Check if this ray intersects the specified box (AABB).\n   * @param box - The specified box\n   * @returns The distance from this ray to the specified box if intersecting, -1 otherwise\n   */\n  intersectBox(box: BoundingBox): number {\n    return CollisionUtil.intersectsRayAndBox(this, box);\n  }\n\n  /**\n   * The coordinates of the specified distance from the origin in the ray direction.\n   * @param distance - The specified distance\n   * @param out - The coordinates as an output parameter\n   * @returns The out\n   */\n  getPoint(distance: number, out: Vector3): Vector3 {\n    Vector3.scale(this.direction, distance, out);\n    return out.add(this.origin);\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\n\n/**\n * Describes a 2D-vector.\n */\nexport class Vector2 implements IClone<Vector2>, ICopy<Vector2Like, Vector2> {\n  /** @internal */\n  static readonly _zero = new Vector2(0.0, 0.0);\n  /** @internal */\n  static readonly _one = new Vector2(1.0, 1.0);\n\n  /**\n   * Determines the sum of two vectors.\n   * @param left - The first vector to add\n   * @param right - The second vector to add\n   * @param out - The sum of two vectors\n   */\n  static add(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = left._x + right._x;\n    out._y = left._y + right._y;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the difference between two vectors.\n   * @param left - The first vector to subtract\n   * @param right - The second vector to subtract\n   * @param out - The difference between two vectors\n   */\n  static subtract(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = left._x - right._x;\n    out._y = left._y - right._y;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the product of two vectors.\n   * @param left - The first vector to multiply\n   * @param right - The second vector to multiply\n   * @param out - The product of two vectors\n   */\n  static multiply(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = left._x * right._x;\n    out._y = left._y * right._y;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the divisor of two vectors.\n   * @param left - The first vector to divide\n   * @param right - The second vector to divide\n   * @param out - The divisor of two vectors\n   */\n  static divide(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = left._x / right._x;\n    out._y = left._y / right._y;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the dot product of two vectors.\n   * @param left - The first vector to dot\n   * @param right - The second vector to dot\n   * @returns The dot product of two vectors\n   */\n  static dot(left: Vector2, right: Vector2): number {\n    return left._x * right._x + left._y * right._y;\n  }\n\n  /**\n   * Determines the distance of two vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @returns The distance of two vectors\n   */\n  static distance(left: Vector2, right: Vector2): number {\n    const x = right._x - left._x;\n    const y = right._y - left._y;\n    return Math.sqrt(x * x + y * y);\n  }\n\n  /**\n   * Determines the squared distance of two vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @returns The squared distance of two vectors\n   */\n  static distanceSquared(left: Vector2, right: Vector2): number {\n    const x = right._x - left._x;\n    const y = right._y - left._y;\n    return x * x + y * y;\n  }\n\n  /**\n   * Determines whether the specified vectors are equals.\n   * @param left - The first vector to compare\n   * @param right - The second vector to compare\n   * @returns True if the specified vectors are equals, false otherwise\n   */\n  static equals(left: Vector2, right: Vector2): boolean {\n    return MathUtil.equals(left._x, right._x) && MathUtil.equals(left._y, right._y);\n  }\n\n  /**\n   * Performs a linear interpolation between two vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param t - The blend amount where 0 returns left and 1 right\n   * @param out - The result of linear blending between two vectors\n   */\n  static lerp(left: Vector2, right: Vector2, t: number, out: Vector2): void {\n    const { _x, _y } = left;\n    out._x = _x + (right._x - _x) * t;\n    out._y = _y + (right._y - _y) * t;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the largest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the largest components of the specified vectors\n   */\n  static max(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = Math.max(left._x, right._x);\n    out._y = Math.max(left._y, right._y);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the smallest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the smallest components of the specified vectors\n   */\n  static min(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = Math.min(left._x, right._x);\n    out._y = Math.min(left._y, right._y);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Reverses the direction of a given vector.\n   * @param left - The vector to negate\n   * @param out - The vector facing in the opposite direction\n   */\n  static negate(left: Vector2, out: Vector2): void {\n    out._x = -left._x;\n    out._y = -left._y;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Converts the vector into a unit vector.\n   * @param left - The vector to normalize\n   * @param out - The normalized vector\n   */\n  static normalize(left: Vector2, out: Vector2): void {\n    const { _x, _y } = left;\n    let len = Math.sqrt(_x * _x + _y * _y);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out._x = _x * len;\n      out._y = _y * len;\n      out._onValueChanged && out._onValueChanged();\n    }\n  }\n\n  /**\n   * Scale a vector by the given value.\n   * @param left - The vector to scale\n   * @param s - The amount by which to scale the vector\n   * @param out - The scaled vector\n   */\n  static scale(left: Vector2, s: number, out: Vector2): void {\n    out._x = left._x * s;\n    out._y = left._y * s;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /** @internal */\n  _x: number;\n  /** @internal */\n  _y: number;\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  /**\n   * The x component of the vector.\n   */\n  public get x(): number {\n    return this._x;\n  }\n\n  public set x(value: number) {\n    this._x = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The y component of the vector.\n   */\n  public get y(): number {\n    return this._y;\n  }\n\n  public set y(value: number) {\n    this._y = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of Vector2.\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   */\n  constructor(x: number = 0, y: number = 0) {\n    this._x = x;\n    this._y = y;\n  }\n\n  /**\n   * Set the value of this vector.\n   * @param x - The x component of the vector\n   * @param y - The y component of the vector\n   * @returns This vector\n   */\n  set(x: number, y: number): Vector2 {\n    this._x = x;\n    this._y = y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the sum of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  add(right: Vector2): Vector2 {\n    this._x += right._x;\n    this._y += right._y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the difference of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  subtract(right: Vector2): Vector2 {\n    this._x -= right._x;\n    this._y -= right._y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the product of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  multiply(right: Vector2): Vector2 {\n    this._x *= right._x;\n    this._y *= right._y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the divisor of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  divide(right: Vector2): Vector2 {\n    this._x /= right._x;\n    this._y /= right._y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Calculate the length of this vector.\n   * @returns The length of this vector\n   */\n  length(): number {\n    const { _x, _y } = this;\n    return Math.sqrt(_x * _x + _y * _y);\n  }\n\n  /**\n   * Calculate the squared length of this vector.\n   * @returns The squared length of this vector\n   */\n  lengthSquared(): number {\n    const { _x, _y } = this;\n    return _x * _x + _y * _y;\n  }\n\n  /**\n   * Reverses the direction of this vector.\n   * @returns This vector\n   */\n  negate(): Vector2 {\n    this._x = -this._x;\n    this._y = -this._y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Converts this vector into a unit vector.\n   * @returns This vector\n   */\n  normalize(): Vector2 {\n    Vector2.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Scale this vector by the given value.\n   * @param s - The amount by which to scale the vector\n   * @returns This vector\n   */\n  scale(s: number): Vector2 {\n    this._x *= s;\n    this._y *= s;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Creates a clone of this vector.\n   * @returns A clone of this vector\n   */\n  clone(): Vector2 {\n    return new Vector2(this._x, this._y);\n  }\n\n  /**\n   * Copy from vector2 like object.\n   * @param source - Vector2 like object\n   * @returns This vector\n   */\n  copyFrom(source: Vector2Like): Vector2 {\n    this._x = source.x;\n    this._y = source.y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this vector from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This vector\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Vector2 {\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this vector to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this._x;\n    out[outOffset + 1] = this._y;\n  }\n\n  /**\n   * Serialize this vector to a JSON representation.\n   * @returns A JSON representation of this vector\n   */\n  toJSON(): Vector2Like {\n    return {\n      x: this._x,\n      y: this._y\n    };\n  }\n}\n\ninterface Vector2Like {\n  /** {@inheritDoc Vector2.x} */\n  x: number;\n  /** {@inheritDoc Vector2.y} */\n  y: number;\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\n\n/**\n * Describes a 4D-vector.\n */\nexport class Vector4 implements IClone<Vector4>, ICopy<Vector4Like, Vector4> {\n  /** @internal */\n  static readonly _zero = new Vector4(0.0, 0.0, 0.0, 0.0);\n  /** @internal */\n  static readonly _one = new Vector4(1.0, 1.0, 1.0, 1.0);\n\n  /**\n   * Determines the sum of two vectors.\n   * @param left - The first vector to add\n   * @param right - The second vector to add\n   * @param out - The sum of two vectors\n   */\n  static add(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = left._x + right._x;\n    out._y = left._y + right._y;\n    out._z = left._z + right._z;\n    out._w = left._w + right._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the difference between two vectors.\n   * @param left - The first vector to subtract\n   * @param right - The second vector to subtract\n   * @param out - The difference between two vectors\n   */\n  static subtract(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = left._x - right._x;\n    out._y = left._y - right._y;\n    out._z = left._z - right._z;\n    out._w = left._w - right._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the product of two vectors.\n   * @param left - The first vector to multiply\n   * @param right - The second vector to multiply\n   * @param out - The product of two vectors\n   */\n  static multiply(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = left._x * right._x;\n    out._y = left._y * right._y;\n    out._z = left._z * right._z;\n    out._w = left._w * right._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the divisor of two vectors.\n   * @param left - The first vector to divide\n   * @param right - The second vector to divide\n   * @param out - The divisor of two vectors\n   */\n  static divide(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = left._x / right._x;\n    out._y = left._y / right._y;\n    out._z = left._z / right._z;\n    out._w = left._w / right._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the dot product of two vectors.\n   * @param left - The first vector to dot\n   * @param right - The second vector to dot\n   * @returns The dot product of two vectors\n   */\n  static dot(left: Vector4, right: Vector4): number {\n    return left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;\n  }\n\n  /**\n   * Determines the distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The distance of two vectors\n   */\n  static distance(a: Vector4, b: Vector4): number {\n    const x = b._x - a._x;\n    const y = b._y - a._y;\n    const z = b._z - a._z;\n    const w = b._w - a._w;\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * Determines the squared distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The squared distance of two vectors\n   */\n  static distanceSquared(a: Vector4, b: Vector4): number {\n    const x = b._x - a._x;\n    const y = b._y - a._y;\n    const z = b._z - a._z;\n    const w = b._w - a._w;\n    return x * x + y * y + z * z + w * w;\n  }\n\n  /**\n   * Determines whether the specified vectors are equals.\n   * @param left - The first vector to compare\n   * @param right - The second vector to compare\n   * @returns True if the specified vectors are equals, false otherwise\n   */\n  static equals(left: Vector4, right: Vector4): boolean {\n    return (\n      MathUtil.equals(left._x, right._x) &&\n      MathUtil.equals(left._y, right._y) &&\n      MathUtil.equals(left._z, right._z) &&\n      MathUtil.equals(left._w, right._w)\n    );\n  }\n\n  /**\n   * Performs a linear interpolation between two vectors.\n   * @param start - The first vector\n   * @param end - The second vector\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two vectors\n   */\n  static lerp(start: Vector4, end: Vector4, t: number, out: Vector4): void {\n    const { _x, _y, _z, _w } = start;\n    out._x = _x + (end._x - _x) * t;\n    out._y = _y + (end._y - _y) * t;\n    out._z = _z + (end._z - _z) * t;\n    out._w = _w + (end._w - _w) * t;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the largest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the largest components of the specified vectors\n   */\n  static max(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = Math.max(left._x, right._x);\n    out._y = Math.max(left._y, right._y);\n    out._z = Math.max(left._z, right._z);\n    out._w = Math.max(left._w, right._w);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the smallest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the smallest components of the specified vectors\n   */\n  static min(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = Math.min(left._x, right._x);\n    out._y = Math.min(left._y, right._y);\n    out._z = Math.min(left._z, right._z);\n    out._w = Math.min(left._w, right._w);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Reverses the direction of a given vector.\n   * @param a - The vector to negate\n   * @param out - The vector facing in the opposite direction\n   */\n  static negate(a: Vector4, out: Vector4): void {\n    out._x = -a._x;\n    out._y = -a._y;\n    out._z = -a._z;\n    out._w = -a._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Converts the vector into a unit vector.\n   * @param a - The vector to normalize\n   * @param out - The normalized vector\n   */\n  static normalize(a: Vector4, out: Vector4): void {\n    const { _x, _y, _z, _w } = a;\n    let len = Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out._x = _x * len;\n      out._y = _y * len;\n      out._z = _z * len;\n      out._w = _w * len;\n      out._onValueChanged && out._onValueChanged();\n    }\n  }\n\n  /**\n   * Scale a vector by the given value.\n   * @param a - The vector to scale\n   * @param s - The amount by which to scale the vector\n   * @param out - The scaled vector\n   */\n  static scale(a: Vector4, s: number, out: Vector4): void {\n    out._x = a._x * s;\n    out._y = a._y * s;\n    out._z = a._z * s;\n    out._w = a._w * s;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a transformation using the given 4x4 matrix.\n   * @param v - The vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed vector3\n   */\n  static transform(v: Vector4, m: Matrix, out: Vector4): void {\n    const { _x, _y, _z, _w } = v;\n    const e = m.elements;\n    out._x = _x * e[0] + _y * e[4] + _z * e[8] + _w * e[12];\n    out._y = _x * e[1] + _y * e[5] + _z * e[9] + _w * e[13];\n    out._z = _x * e[2] + _y * e[6] + _z * e[10] + _w * e[14];\n    out._w = _x * e[3] + _y * e[7] + _z * e[11] + _w * e[15];\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a transformation using the given quaternion.\n   * @param v - The vector to transform\n   * @param q - The transform quaternion\n   * @param out - The transformed vector\n   */\n  static transformByQuat(v: Vector4, q: Quaternion, out: Vector4): void {\n    const { _x: x, _y: y, _z: z, _w: w } = v;\n    const qx = q._x;\n    const qy = q._y;\n    const qz = q._z;\n    const qw = q._w;\n\n    // calculate quat * vec\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out._x = ix * qw - iw * qx - iy * qz + iz * qy;\n    out._y = iy * qw - iw * qy - iz * qx + ix * qz;\n    out._z = iz * qw - iw * qz - ix * qy + iy * qx;\n    out._w = w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /** @internal */\n  _x: number;\n  /** @internal */\n  _y: number;\n  /** @internal */\n  _z: number;\n  /** @internal */\n  _w: number;\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  /**\n   * The x component of the vector.\n   */\n  public get x(): number {\n    return this._x;\n  }\n\n  public set x(value: number) {\n    this._x = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The y component of the vector.\n   */\n  public get y(): number {\n    return this._y;\n  }\n\n  public set y(value: number) {\n    this._y = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The z component of the vector.\n   */\n  public get z(): number {\n    return this._z;\n  }\n\n  public set z(value: number) {\n    this._z = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The w component of the vector.\n   */\n  public get w(): number {\n    return this._w;\n  }\n\n  public set w(value: number) {\n    this._w = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of Vector4.\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   * @param z - The z component of the vector, default 0\n   * @param w - The w component of the vector, default 0\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n  }\n\n  /**\n   * Set the value of this vector.\n   * @param x - The x component of the vector\n   * @param y - The y component of the vector\n   * @param z - The z component of the vector\n   * @param w - The w component of the vector\n   * @returns This vector\n   */\n  set(x: number, y: number, z: number, w: number): Vector4 {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the sum of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  add(right: Vector4): Vector4 {\n    this._x += right._x;\n    this._y += right._y;\n    this._z += right._z;\n    this._w += right._w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the difference of this vector and the specified vector.\n   * @param right - the specified vector\n   * @returns This vector\n   */\n  subtract(right: Vector4): Vector4 {\n    this._x -= right._x;\n    this._y -= right._y;\n    this._z -= right._z;\n    this._w -= right._w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the product of this vector and the specified vector.\n   * @param right - the specified vector\n   * @returns This vector\n   */\n  multiply(right: Vector4): Vector4 {\n    this._x *= right._x;\n    this._y *= right._y;\n    this._z *= right._z;\n    this._w *= right._w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the divisor of this vector and the specified vector.\n   * @param right - the specified vector\n   * @returns This vector\n   */\n  divide(right: Vector4): Vector4 {\n    this._x /= right._x;\n    this._y /= right._y;\n    this._z /= right._z;\n    this._w /= right._w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Calculate the length of this vector.\n   * @returns The length of this vector\n   */\n  length(): number {\n    const { _x, _y, _z, _w } = this;\n    return Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);\n  }\n\n  /**\n   * Calculate the squared length of this vector.\n   * @returns The squared length of this vector\n   */\n  lengthSquared(): number {\n    const { _x, _y, _z, _w } = this;\n    return _x * _x + _y * _y + _z * _z + _w * _w;\n  }\n\n  /**\n   * Reverses the direction of this vector.\n   * @returns This vector\n   */\n  negate(): Vector4 {\n    this._x = -this._x;\n    this._y = -this._y;\n    this._z = -this._z;\n    this._w = -this._w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Converts this vector into a unit vector.\n   * @returns This vector\n   */\n  normalize(): Vector4 {\n    Vector4.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Scale this vector by the given value.\n   * @param s - The amount by which to scale the vector\n   * @returns This vector\n   */\n  scale(s: number): Vector4 {\n    this._x *= s;\n    this._y *= s;\n    this._z *= s;\n    this._w *= s;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Creates a clone of this vector.\n   * @returns A clone of this vector\n   */\n  clone(): Vector4 {\n    let ret = new Vector4(this._x, this._y, this._z, this._w);\n    return ret;\n  }\n\n  /**\n   * Copy from vector3 like object.\n   * @param source - Vector3 like object.\n   * @returns This vector\n   */\n  copyFrom(source: Vector4Like): Vector4 {\n    this._x = source.x;\n    this._y = source.y;\n    this._z = source.z;\n    this._w = source.w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this vector by an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This vector\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Vector4 {\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._w = array[offset + 3];\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this vector to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this._x;\n    out[outOffset + 1] = this._y;\n    out[outOffset + 2] = this._z;\n    out[outOffset + 3] = this._w;\n  }\n\n  /**\n   * Serialize this vector to a JSON representation.\n   * @returns A JSON representation of this vector\n   */\n  toJSON(): Vector4Like {\n    return {\n      x: this._x,\n      y: this._y,\n      z: this._z,\n      w: this._w\n    };\n  }\n}\n\ninterface Vector4Like {\n  /** {@inheritDoc Vector4.x} */\n  x: number;\n  /** {@inheritDoc Vector4.y} */\n  y: number;\n  /** {@inheritDoc Vector4.z} */\n  z: number;\n  /** {@inheritDoc Vector4.w} */\n  w: number;\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\n\n/**\n * Describes a color in the from of RGBA (in order: R, G, B, A).\n */\nexport class Color implements IClone<Color>, ICopy<ColorLike, Color> {\n  /**\n   * Modify a value from the gamma space to the linear space.\n   * @param value - The value in gamma space\n   * @returns The value in linear space\n   */\n  static gammaToLinearSpace(value: number): number {\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_sRGB.txt\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_decode.txt\n\n    if (value <= 0.0) return 0.0;\n    else if (value <= 0.04045) return value / 12.92;\n    else if (value < 1.0) return Math.pow((value + 0.055) / 1.055, 2.4);\n    else return Math.pow(value, 2.4);\n  }\n\n  /**\n   * Modify a value from the linear space to the gamma space.\n   * @param value - The value in linear space\n   * @returns The value in gamma space\n   */\n  static linearToGammaSpace(value: number): number {\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_sRGB.txt\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_decode.txt\n\n    if (value <= 0.0) return 0.0;\n    else if (value < 0.0031308) return 12.92 * value;\n    else if (value < 1.0) return 1.055 * Math.pow(value, 0.41666) - 0.055;\n    else return Math.pow(value, 0.41666);\n  }\n\n  /**\n   * Determines whether the specified colors are equals.\n   * @param left - The first color to compare\n   * @param right - The second color to compare\n   * @returns True if the specified colors are equals, false otherwise\n   */\n  static equals(left: Color, right: Color): boolean {\n    return (\n      MathUtil.equals(left._r, right._r) &&\n      MathUtil.equals(left._g, right._g) &&\n      MathUtil.equals(left._b, right._b) &&\n      MathUtil.equals(left._a, right._a)\n    );\n  }\n\n  /**\n   * Determines the sum of two colors.\n   * @param left - The first color to add\n   * @param right - The second color to add\n   * @param out - The sum of two colors\n   * @returns The added color\n   */\n  static add(left: Color, right: Color, out: Color): Color {\n    out._r = left._r + right._r;\n    out._g = left._g + right._g;\n    out._b = left._b + right._b;\n    out._a = left._a + right._a;\n    out._onValueChanged && out._onValueChanged();\n\n    return out;\n  }\n\n  /**\n   * Determines the difference between two colors.\n   * @param left - The first color to subtract\n   * @param right - The second color to subtract\n   * @param out - The difference between two colors\n   */\n  static subtract(left: Color, right: Color, out: Color): void {\n    out._r = left._r - right._r;\n    out._g = left._g - right._g;\n    out._b = left._b - right._b;\n    out._a = left._a - right._a;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Scale a color by the given value.\n   * @param left - The color to scale\n   * @param s - The amount by which to scale the color\n   * @param out - The scaled color\n   * @returns The scaled color\n   */\n  static scale(left: Color, s: number, out: Color): Color {\n    out._r = left._r * s;\n    out._g = left._g * s;\n    out._b = left._b * s;\n    out._a = left._a * s;\n    out._onValueChanged && out._onValueChanged();\n\n    return out;\n  }\n\n  /**\n   * Performs a linear interpolation between two color.\n   * @param start - The first color\n   * @param end - The second color\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two color\n   */\n  static lerp(start: Color, end: Color, t: number, out: Color): Color {\n    const { _r, _g, _b, _a } = start;\n    out._r = _r + (end._r - _r) * t;\n    out._g = _g + (end._g - _g) * t;\n    out._b = _b + (end._b - _b) * t;\n    out._a = _a + (end._a - _a) * t;\n    out._onValueChanged && out._onValueChanged();\n\n    return out;\n  }\n\n  /** @internal */\n  _r: number;\n  /** @internal */\n  _g: number;\n  /** @internal */\n  _b: number;\n  /** @internal */\n  _a: number;\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  /**\n   * The red component of the color, 0~1.\n   */\n  public get r(): number {\n    return this._r;\n  }\n\n  public set r(value: number) {\n    this._r = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The green component of the color, 0~1.\n   */\n  public get g(): number {\n    return this._g;\n  }\n\n  public set g(value: number) {\n    this._g = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The blue component of the color, 0~1.\n   */\n  public get b(): number {\n    return this._b;\n  }\n\n  public set b(value: number) {\n    this._b = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The alpha component of the color, 0~1.\n   */\n  public get a(): number {\n    return this._a;\n  }\n\n  public set a(value: number) {\n    this._a = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of Color.\n   * @param r - The red component of the color\n   * @param g - The green component of the color\n   * @param b - The blue component of the color\n   * @param a - The alpha component of the color\n   */\n  constructor(r: number = 1, g: number = 1, b: number = 1, a: number = 1) {\n    this._r = r;\n    this._g = g;\n    this._b = b;\n    this._a = a;\n  }\n\n  /**\n   * Set the value of this color.\n   * @param r - The red component of the color\n   * @param g - The green component of the color\n   * @param b - The blue component of the color\n   * @param a - The alpha component of the color\n   * @returns This color.\n   */\n  set(r: number, g: number, b: number, a: number): Color {\n    this._r = r;\n    this._g = g;\n    this._b = b;\n    this._a = a;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the sum of this color and the specified color.\n   * @param color - The specified color\n   * @returns The added color\n   */\n  add(color: Color): Color {\n    this._r += color._r;\n    this._g += color._g;\n    this._b += color._b;\n    this._a += color._a;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Scale this color by the given value.\n   * @param s - The amount by which to scale the color\n   * @returns The scaled color\n   */\n  scale(s: number): Color {\n    this._r *= s;\n    this._g *= s;\n    this._b *= s;\n    this._a *= s;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Creates a clone of this color.\n   * @returns A clone of this color\n   */\n  clone(): Color {\n    const ret = new Color(this._r, this._g, this._b, this._a);\n    return ret;\n  }\n\n  /**\n   * Copy from color like object.\n   * @param source - Color like object.\n   * @returns This vector\n   */\n  copyFrom(source: ColorLike): Color {\n    this._r = source.r;\n    this._g = source.g;\n    this._b = source.b;\n    this._a = source.a;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Modify components (r, g, b) of this color from gamma space to linear space.\n   * @param out - The color in linear space\n   * @returns The color in linear space\n   */\n  toLinear(out: Color): Color {\n    out._r = Color.gammaToLinearSpace(this._r);\n    out._g = Color.gammaToLinearSpace(this._g);\n    out._b = Color.gammaToLinearSpace(this._b);\n    this._onValueChanged && this._onValueChanged();\n    return out;\n  }\n\n  /**\n   * Modify components (r, g, b) of this color from linear space to gamma space.\n   * @param out - The color in gamma space\n   * @returns The color in gamma space\n   */\n  toGamma(out: Color): Color {\n    out._r = Color.linearToGammaSpace(this._r);\n    out._g = Color.linearToGammaSpace(this._g);\n    out._b = Color.linearToGammaSpace(this._b);\n    this._onValueChanged && this._onValueChanged();\n    return out;\n  }\n\n  /**\n   * Gets the brightness.\n   * @returns The Hue-Saturation-Brightness (HSB) saturation for this\n   */\n  getBrightness(): number {\n    const r = this.r;\n    const g = this.g;\n    const b = this.b;\n\n    let max = r;\n    let min = r;\n    if (g > max) max = g;\n    if (b > max) max = b;\n\n    if (g < min) min = g;\n    if (b < min) min = b;\n\n    return (max + min) / 2;\n  }\n\n  /**\n   * Serialize this color to a JSON representation.\n   * @return A JSON representation of this color\n   */\n  toJSON(): ColorLike {\n    return {\n      r: this._r,\n      g: this._g,\n      b: this._b,\n      a: this._a\n    };\n  }\n}\n\ninterface ColorLike {\n  /** {@inheritDoc Color._r} */\n  r: number;\n  /** {@inheritDoc Color._g} */\n  g: number;\n  /** {@inheritDoc Color._b} */\n  b: number;\n  /** {@inheritDoc Color._a} */\n  a: number;\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\n\n// A 2d rectangle defined by x and y position, width and height.\nexport class Rect implements IClone<Rect>, ICopy<Rect, Rect> {\n  /** The x coordinate of the rectangle. */\n  public x: number;\n  /** The y coordinate of the rectangle. */\n  public y: number;\n  /** The width of the rectangle, measured from the x position. */\n  public width: number;\n  /** The height of the rectangle, measured from the y position. */\n  public height: number;\n\n  /**\n   * Constructor of Rect.\n   * @param x - The x coordinate of the rectangle, default 0\n   * @param y - The y coordinate of the rectangle, default 0\n   * @param width - The width of the rectangle, measured from the x position, default 0\n   * @param height - The height of the rectangle, measured from the y position, default 0\n   */\n  constructor(x: number = 0, y: number = 0, width: number = 0, height: number = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Set the value of this rectangle.\n   * @param x - The x coordinate of the rectangle\n   * @param y - The y coordinate of the rectangle\n   * @param width - The width of the rectangle, measured from the x position\n   * @param height - The height of the rectangle, measured from the y position\n   * @returns This rectangle\n   */\n  set(x: number, y: number, width: number, height: number): Rect {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  /**\n   * Creates a clone of this rect.\n   * @returns A clone of this rect\n   */\n  clone(): Rect {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n\n  /**\n   * Copy this rect from the specified rect.\n   * @param source - The specified rect\n   * @returns This rect\n   */\n  copyFrom(source: Rect): Rect {\n    this.x = source.x;\n    this.y = source.y;\n    this.width = source.width;\n    this.height = source.height;\n    return this;\n  }\n}\n","import { Color } from \"./Color\";\nimport { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Use SH3 to represent irradiance environment maps efficiently, allowing for interactive rendering of diffuse objects under distant illumination.\n * @remarks\n * https://graphics.stanford.edu/papers/envmap/envmap.pdf\n * http://www.ppsloan.org/publications/StupidSH36.pdf\n * https://google.github.io/filament/Filament.md.html#annex/sphericalharmonics\n */\nexport class SphericalHarmonics3\n  implements IClone<SphericalHarmonics3>, ICopy<SphericalHarmonics3, SphericalHarmonics3>\n{\n  /** The coefficients of SphericalHarmonics3. */\n  coefficients: Float32Array = new Float32Array(27);\n\n  /**\n   * Add light to SphericalHarmonics3.\n   * @param direction - Light direction\n   * @param color - Light color\n   * @param deltaSolidAngle - The delta solid angle of the light\n   */\n  addLight(direction: Vector3, color: Color, deltaSolidAngle: number): void {\n    /**\n     * Implements `EvalSHBasis` from [Projection from Cube maps] in http://www.ppsloan.org/publications/StupidSH36.pdf.\n     *\n     * Basis constants\n     * 0: Math.sqrt(1/(4 * Math.PI))\n     *\n     * 1: -Math.sqrt(3 / (4 * Math.PI))\n     * 2: Math.sqrt(3 / (4 * Math.PI))\n     * 3: -Math.sqrt(3 / (4 * Math.PI))\n     *\n     * 4: Math.sqrt(15 / (4 * Math.PI))\n     * 5: -Math.sqrt(15 / (4 * Math.PI))\n     * 6: Math.sqrt(5 / (16 * Math.PI))\n     * 7: -Math.sqrt(15 / (4 * Math.PI)）\n     * 8: Math.sqrt(15 / (16 * Math.PI))\n     */\n\n    color.scale(deltaSolidAngle);\n\n    const coe = this.coefficients;\n\n    const { _x: x, _y: y, _z: z } = direction;\n    const { r, g, b } = color;\n\n    const bv0 = 0.282095; // basis0 = 0.886227\n    const bv1 = -0.488603 * y; // basis1 = -0.488603\n    const bv2 = 0.488603 * z; // basis2 = 0.488603\n    const bv3 = -0.488603 * x; // basis3 = -0.488603\n    const bv4 = 1.092548 * (x * y); // basis4 = 1.092548\n    const bv5 = -1.092548 * (y * z); // basis5 = -1.092548\n    const bv6 = 0.315392 * (3 * z * z - 1); // basis6 = 0.315392\n    const bv7 = -1.092548 * (x * z); // basis7 = -1.092548\n    const bv8 = 0.546274 * (x * x - y * y); // basis8 = 0.546274\n\n    (coe[0] += r * bv0), (coe[1] += g * bv0), (coe[2] += b * bv0);\n\n    (coe[3] += r * bv1), (coe[4] += g * bv1), (coe[5] += b * bv1);\n    (coe[6] += r * bv2), (coe[7] += g * bv2), (coe[8] += b * bv2);\n    (coe[9] += r * bv3), (coe[10] += g * bv3), (coe[11] += b * bv3);\n\n    (coe[12] += r * bv4), (coe[13] += g * bv4), (coe[14] += b * bv4);\n    (coe[15] += r * bv5), (coe[16] += g * bv5), (coe[17] += b * bv5);\n    (coe[18] += r * bv6), (coe[19] += g * bv6), (coe[20] += b * bv6);\n    (coe[21] += r * bv7), (coe[22] += g * bv7), (coe[23] += b * bv7);\n    (coe[24] += r * bv8), (coe[25] += g * bv8), (coe[26] += b * bv8);\n  }\n\n  /**\n   * Evaluates the color for the specified direction.\n   * @param direction - Specified direction\n   * @param out - Out color\n   */\n  evaluate(direction: Vector3, out: Color): Color {\n    /**\n     * Equations based on data from: http://ppsloan.org/publications/StupidSH36.pdf\n     *\n     *\n     * Basis constants\n     * 0: Math.sqrt(1/(4 * Math.PI))\n     *\n     * 1: -Math.sqrt(3 / (4 * Math.PI))\n     * 2: Math.sqrt(3 / (4 * Math.PI))\n     * 3: -Math.sqrt(3 / (4 * Math.PI))\n     *\n     * 4: Math.sqrt(15 / (4 * Math.PI)）\n     * 5: -Math.sqrt(15 / (4 * Math.PI))\n     * 6: Math.sqrt(5 / (16 * Math.PI)）\n     * 7: -Math.sqrt(15 / (4 * Math.PI)）\n     * 8: Math.sqrt(15 / (16 * Math.PI)）\n     *\n     *\n     * Convolution kernel\n     * 0: Math.PI\n     * 1: (2 * Math.PI) / 3\n     * 2: Math.PI / 4\n     */\n\n    const coe = this.coefficients;\n    const { _x: x, _y: y, _z: z } = direction;\n\n    const bv0 = 0.886227; // kernel0 * basis0 = 0.886227\n    const bv1 = -1.023327 * y; // kernel1 * basis1 = -1.023327\n    const bv2 = 1.023327 * z; // kernel1 * basis2 = 1.023327\n    const bv3 = -1.023327 * x; // kernel1 * basis3 = -1.023327\n    const bv4 = 0.858086 * y * x; // kernel2 * basis4 = 0.858086\n    const bv5 = -0.858086 * y * z; // kernel2 * basis5 = -0.858086\n    const bv6 = 0.247708 * (3 * z * z - 1); // kernel2 * basis6 = 0.247708\n    const bv7 = -0.858086 * z * x; // kernel2 * basis7 = -0.858086\n    const bv8 = 0.429042 * (x * x - y * y); // kernel2 * basis8 = 0.429042\n\n    // l0\n    let r = coe[0] * bv0;\n    let g = coe[1] * bv0;\n    let b = coe[2] * bv0;\n\n    // l1\n    r += coe[3] * bv1 + coe[6] * bv2 + coe[9] * bv3;\n    g += coe[4] * bv1 + coe[7] * bv2 + coe[10] * bv3;\n    b += coe[5] * bv1 + coe[8] * bv2 + coe[11] * bv3;\n\n    // l2\n    r += coe[12] * bv4 + coe[15] * bv5 + coe[18] * bv6 + coe[21] * bv7 + coe[24] * bv8;\n    g += coe[13] * bv4 + coe[16] * bv5 + coe[19] * bv6 + coe[22] * bv7 + coe[25] * bv8;\n    b += coe[14] * bv4 + coe[17] * bv5 + coe[20] * bv6 + coe[23] * bv7 + coe[26] * bv8;\n\n    out.set(r, g, b, 1.0);\n    return out;\n  }\n\n  /**\n   * Scale the coefficients.\n   * @param s - The amount by which to scale the SphericalHarmonics3\n   */\n  scale(s: number): void {\n    const src = this.coefficients;\n\n    (src[0] *= s), (src[1] *= s), (src[2] *= s);\n    (src[3] *= s), (src[4] *= s), (src[5] *= s);\n    (src[6] *= s), (src[7] *= s), (src[8] *= s);\n    (src[9] *= s), (src[10] *= s), (src[11] *= s);\n    (src[12] *= s), (src[13] *= s), (src[14] *= s);\n    (src[15] *= s), (src[16] *= s), (src[17] *= s);\n    (src[18] *= s), (src[19] *= s), (src[20] *= s);\n    (src[21] *= s), (src[22] *= s), (src[23] *= s);\n    (src[24] *= s), (src[25] *= s), (src[26] *= s);\n  }\n\n  /**\n   * Creates a clone of this SphericalHarmonics3.\n   * @returns A clone of this SphericalHarmonics3\n   */\n  clone(): SphericalHarmonics3 {\n    const sh = new SphericalHarmonics3();\n    sh.copyFrom(this);\n    return sh;\n  }\n\n  /**\n   * Copy this SphericalHarmonics3 from the specified SphericalHarmonics3.\n   * @param source - The specified SphericalHarmonics3\n   * @returns This SphericalHarmonics3\n   */\n  copyFrom(source: SphericalHarmonics3): SphericalHarmonics3 {\n    source.copyToArray(this.coefficients);\n    return this;\n  }\n\n  /**\n   * Copy the value of this spherical harmonics from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): void {\n    const s = this.coefficients;\n\n    (s[0] = array[offset]), (s[1] = array[1 + offset]), (s[2] = array[2 + offset]);\n    (s[3] = array[3 + offset]), (s[4] = array[4 + offset]), (s[5] = array[5 + offset]);\n    (s[6] = array[6 + offset]), (s[7] = array[7 + offset]), (s[8] = array[8 + offset]);\n    (s[9] = array[9 + offset]), (s[10] = array[10 + offset]), (s[11] = array[11 + offset]);\n    (s[12] = array[12 + offset]), (s[13] = array[13 + offset]), (s[14] = array[14 + offset]);\n    (s[15] = array[15 + offset]), (s[16] = array[16 + offset]), (s[17] = array[17 + offset]);\n    (s[18] = array[18 + offset]), (s[19] = array[19 + offset]), (s[20] = array[20 + offset]);\n    (s[21] = array[21 + offset]), (s[22] = array[22 + offset]), (s[23] = array[23 + offset]);\n    (s[24] = array[24 + offset]), (s[25] = array[25 + offset]), (s[26] = array[26 + offset]);\n  }\n\n  /**\n   * Copy the value of this spherical harmonics to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0): void {\n    const s = this.coefficients;\n\n    (out[0 + outOffset] = s[0]), (out[1 + outOffset] = s[1]), (out[2 + outOffset] = s[2]);\n\n    (out[3 + outOffset] = s[3]), (out[4 + outOffset] = s[4]), (out[5 + outOffset] = s[5]);\n    (out[6 + outOffset] = s[6]), (out[7 + outOffset] = s[7]), (out[8 + outOffset] = s[8]);\n    (out[9 + outOffset] = s[9]), (out[10 + outOffset] = s[10]), (out[11 + outOffset] = s[11]);\n\n    (out[12 + outOffset] = s[12]), (out[13 + outOffset] = s[13]), (out[14 + outOffset] = s[14]);\n    (out[15 + outOffset] = s[15]), (out[16 + outOffset] = s[16]), (out[17 + outOffset] = s[17]);\n    (out[18 + outOffset] = s[18]), (out[19 + outOffset] = s[19]), (out[20 + outOffset] = s[20]);\n    (out[21 + outOffset] = s[21]), (out[22 + outOffset] = s[22]), (out[23 + outOffset] = s[23]);\n    (out[24 + outOffset] = s[24]), (out[25 + outOffset] = s[25]), (out[26 + outOffset] = s[26]);\n  }\n}\n"],"names":["ContainmentType","Disjoint","Contains","Intersects","PlaneIntersectionType","Back","Front","Intersecting","FrustumFace","Near","Far","Left","Right","Bottom","Top","MathUtil","clamp","v","min","max","Math","equals","a","b","abs","zeroTolerance","isPowerOf2","radianToDegree","r","radToDegreeFactor","degreeToRadian","d","degreeToRadFactor","PI","Vector3","x","y","z","_onValueChanged","_x","_y","_z","set","add","right","subtract","multiply","divide","length","sqrt","lengthSquared","negate","normalize","scale","s","transformNormal","m","transformToVec3","transformCoordinate","transformByQuat","quaternion","clone","copyFrom","source","copyFromArray","array","offset","copyToArray","out","outOffset","toJSON","left","dot","cross","ax","ay","az","bx","by","bz","distance","distanceSquared","lerp","start","end","t","len","e","elements","transformToVec4","_w","w","qx","qz","qw","ix","qy","iy","iz","iw","value","_zero","_one","BoundingSphere","center","radius","fromPoints","points","Error","_tempVec30","i","fromBox","box","BoundingBox","getCenter","getExtent","getCorners","minX","minY","minZ","maxX","maxY","maxZ","l","transform","matrix","fromCenterAndExtent","extent","Number","MAX_VALUE","point","fromSphere","sphere","_tempVec31","merge","box1","box2","CollisionUtil","intersectionPointThreePlanes","p1","p2","p3","p1Nor","normal","p2Nor","p3Nor","_tempVec32","c","distancePlaneAndPoint","plane","intersectsPlaneAndPoint","intersectsPlaneAndBox","front","back","intersectsPlaneAndSphere","intersectsRayAndPlane","ray","dir","direction","position","origin","intersectsRayAndBox","dirX","dirY","dirZ","oriX","oriY","oriZ","tmax","inverse","t1","t2","temp","intersectsRayAndSphere","discriminant","intersectsBoxAndBox","boxA","boxB","intersectsSphereAndSphere","sphereA","sphereB","radiisum","intersectsSphereAndBox","closestPoint","intersectsFrustumAndBox","frustum","p","getPlane","frustumContainsBox","n","result","frustumContainsSphere","intersectionType","Plane","factor","point0","point1","point2","x0","y0","z0","x1","y1","z1","x2","y2","z2","yz","xz","xy","invPyth","BoundingFrustum","near","far","top","bottom","calculateFromMatrix","face","me","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","nearNormal","farNormal","leftNormal","rightNormal","bottomNormal","topNormal","intersectsBox","intersectsSphere","Matrix3x3","Float32Array","determinant","a11","a12","a13","a21","a22","a23","a31","a32","a33","b12","b22","b32","identity","invert","rotate","translate","translation","transpose","ret","se","srce","copyFromMatrix","ae","le","re","oe","l11","l12","l13","l21","l22","l23","l31","l32","l33","r11","r12","r13","r21","r22","r23","r31","r32","r33","ee","inv","rotationQuaternion","xx","yx","yy","zx","zy","zz","wx","wy","wz","scaling","det","normalMatrix","mat4","a14","a24","a34","a41","a42","a43","a44","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","sin","cos","Quaternion","conjugate","getAxisAngle","acos","toEuler","_toYawPitchRoll","toYawPitchRoll","rotateX","rad","rotateY","rotateZ","rotationAxisAngle","axis","quat","rotateAxisAngle","_tempQuat1","sinP","sign","asin","atan2","aw","bw","normalAxis","_tempVector3","rotationEuler","rotationYawPitchRoll","yaw","pitch","roll","halfRoll","halfPitch","halfYaw","sinRoll","cosRoll","sinPitch","cosPitch","sinYaw","cosYaw","cosYawPitch","sinYawPitch","rotationMatrix3x3","half","invDot","slerp","amount","opposite","invSin","rotationX","rotationY","rotationZ","normalized","Matrix","decompose","rotation","rm","_tempMat30","rme","xs","ys","zs","sx","sy","sz","invSX","invSY","invSZ","getRotation","trace","getScaling","getTranslation","l14","l24","l34","l41","l42","l43","l44","r14","r24","r34","r41","r42","r43","r44","multiplyScalar","scalar","rotationTranslation","affineTransformation","lookAt","eye","target","up","xAxis","yAxis","zAxis","ortho","lr","bt","nf","perspective","fovY","aspect","f","tan","b13","b21","b23","b31","b33","_identity","Ray","intersectPlane","intersectSphere","intersectBox","getPoint","Vector2","Vector4","q","Color","g","_r","_g","_b","_a","color","toLinear","gammaToLinearSpace","toGamma","linearToGammaSpace","getBrightness","pow","Rect","width","height","SphericalHarmonics3","coefficients","addLight","deltaSolidAngle","coe","bv0","bv1","bv2","bv3","bv4","bv5","bv6","bv7","bv8","evaluate","src","sh"],"mappings":";;;;AAAA;;IAGOA,iCAAA;UAAKA,eAAe,EAAA;AAAfA,IAAAA,eAAAA,CAAAA,eACV,yEACAC,UAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,UAAAA,CAAAA;AAFUD,IAAAA,eAAAA,CAAAA,eAGV,+EACAE,UAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,UAAAA,CAAAA;AAJUF,IAAAA,eAAAA,CAAAA,eAKV,uEACAG,YAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,YAAAA,CAAAA;GANUH,uBAAAA,KAAAA,uBAAAA,GAAAA,EAAAA,CAAAA,CAAAA;;ACHZ;;IAGOI,uCAAA;UAAKA,qBAAqB,EAAA;AAArBA,IAAAA,qBAAAA,CAAAA,qBACV,mFACAC,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA;AAFUD,IAAAA,qBAAAA,CAAAA,qBAGV,oFACAE,OAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,OAAAA,CAAAA;AAJUF,IAAAA,qBAAAA,CAAAA,qBAKV,kCACAG,cAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,cAAAA,CAAAA;GANUH,6BAAAA,KAAAA,6BAAAA,GAAAA,EAAAA,CAAAA,CAAAA;;ACHZ;;IAGOI,6BAAA;UAAKA,WAAW,EAAA;AAAXA,IAAAA,WAAAA,CAAAA,WACV,kBACAC,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA;AAFUD,IAAAA,WAAAA,CAAAA,WAGV,iBACAE,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,KAAAA,CAAAA;AAJUF,IAAAA,WAAAA,CAAAA,WAKV,kBACAG,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA;AANUH,IAAAA,WAAAA,CAAAA,WAOV,mBACAI,OAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,OAAAA,CAAAA;AARUJ,IAAAA,WAAAA,CAAAA,WASV,oBACAK,QAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,QAAAA,CAAAA;AAVUL,IAAAA,WAAAA,CAAAA,WAWV,iBACAM,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,KAAAA,CAAAA;GAZUN,mBAAAA,KAAAA,mBAAAA,GAAAA,EAAAA,CAAAA,CAAAA;;ACHZ,SAAS,iBAAiB,CAAC,MAAM,EAAE,KAAK,EAAE;AAC1C,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC3C,QAAQ,IAAI,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAClC,QAAQ,UAAU,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,IAAI,KAAK,CAAC;AAC/D,QAAQ,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC;AACvC;AACA,QAAQ,IAAI,OAAO,IAAI,UAAU,EAAE,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC9D;AACA,QAAQ,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;AAClE,KAAK;AACL,CAAC;AACM,SAAS,aAAa,CAAC,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE;AACpE,IAAI,IAAI,UAAU,EAAE,iBAAiB,CAAC,WAAW,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;AACzE,IAAI,IAAI,WAAW,EAAE,iBAAiB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;AACjE;AACA,IAAI,OAAO,WAAW,CAAC;AACvB;;AChBA;;AAEC,IACM,IAAA,QAAMO,4BAAN;AAAMA,IAAAA,SAAAA,QAAAA,GAAAA,EAAAA;AAQX;;;;;;MARWA,QAeJC,CAAAA,KAEN,GAFD,SAAOA,KAAMC,CAAAA,CAAS,EAAEC,GAAW,EAAEC,GAAW,EAAU;AACxD,QAAA,OAAOC,KAAKD,GAAG,CAACD,KAAKE,IAAKF,CAAAA,GAAG,CAACC,GAAKF,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AACrC,KAAA,CAAA;AAEA;;;;;;MAnBWF,SA0BJM,MAEN,GAFD,SAAOA,MAAOC,CAAAA,CAAS,EAAEC,CAAS,EAAW;AAC3C,QAAA,OAAOH,KAAKI,GAAG,CAACF,IAAIC,CAAMR,CAAAA,IA3BjBA,SA2B0BU,aAAa,CAAA;AAClD,KAAA,CAAA;AAEA;;;;AAIC,MACD,QAAOC,CAAAA,UAEN,GAFD,SAAOA,UAAAA,CAAWT,CAAS,EAAW;AACpC,QAAA,OAAO,CAACA,CAAKA,GAAAA,CAAAA,GAAI,CAAC,MAAO,CAAA,CAAA;AAC3B,KAAA,CAAA;AAEA;;;;AAIC,MACD,QAAOU,CAAAA,cAEN,GAFD,SAAOA,cAAAA,CAAeC,CAAS,EAAU;QACvC,OAAOA,CAAAA,GAAIb,QA7CFA,CA6CWc,iBAAiB,CAAA;AACvC,KAAA,CAAA;AAEA;;;;AAIC,MACD,QAAOC,CAAAA,cAEN,GAFD,SAAOA,cAAAA,CAAeC,CAAS,EAAU;QACvC,OAAOA,CAAAA,GAAIhB,QAtDFA,CAsDWiB,iBAAiB,CAAA;AACvC,KAAA,CAAA;AAvDWjB,IAAAA,OAAAA,QAAAA,CAAAA;AAwDZ,CAAA,GAAA;;+FAxDYA,SAEKU,aAAwB,GAAA,IAAA,CAAA;;;AACxC,wDAHWV,QAAAA,CAIKc,iBAA4B,GAAA,GAAA,GAAMT,KAAKa,EAAE,CAAA;;;AACzD,wDALWlB,QAAAA,CAMKiB,iBAA4BZ,GAAAA,IAAAA,CAAKa,EAAE,GAAG,GAAA,CAAA;;;ACFxD;;AAEC,IACM,IAAA,OAAMC,iBA+kBV,WA/kBI;AAAMA,IAAAA,SAAAA,OAAAA,CAmWCC,CAAa,EAAEC,CAAa,EAAEC,CAAa,EAAA;AAA3CF,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;AAAGC,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;AAAGC,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;yBA7CxC,IAAA,CACdC,kBAA8B,IAAI,CAAA;QA6ChC,IAAI,CAACC,EAAE,GAAGJ,CAAAA,CAAAA;QACV,IAAI,CAACK,EAAE,GAAGJ,CAAAA,CAAAA;QACV,IAAI,CAACK,EAAE,GAAGJ,CAAAA,CAAAA;;AAtWDH,IAAAA,IAAAA,MAAAA,GAAAA,OAAAA,CAAAA,SAAAA,CAAAA;AAyWX;;;;;;MAOAQ,MAAAA,CAAAA,GAMC,GANDA,SAAAA,GAAAA,CAAIP,CAAS,EAAEC,CAAS,EAAEC,CAAS,EAAW;QAC5C,IAAI,CAACE,EAAE,GAAGJ,CAAAA,CAAAA;QACV,IAAI,CAACK,EAAE,GAAGJ,CAAAA,CAAAA;QACV,IAAI,CAACK,EAAE,GAAGJ,CAAAA,CAAAA;AACV,QAAA,IAAI,CAACC,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDK,OAAAA,GAMC,GANDA,SAAAA,GAAAA,CAAIC,KAAc,EAAW;AAC3B,QAAA,IAAI,CAACL,EAAE,IAAIK,KAAAA,CAAML,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAII,KAAAA,CAAMJ,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAIG,KAAAA,CAAMH,EAAE,CAAA;AACnB,QAAA,IAAI,CAACH,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDO,OAAAA,QAMC,GANDA,SAAAA,QAAAA,CAASD,KAAc,EAAW;AAChC,QAAA,IAAI,CAACL,EAAE,IAAIK,KAAAA,CAAML,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAII,KAAAA,CAAMJ,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAIG,KAAAA,CAAMH,EAAE,CAAA;AACnB,QAAA,IAAI,CAACH,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDQ,OAAAA,QAMC,GANDA,SAAAA,QAAAA,CAASF,KAAc,EAAW;AAChC,QAAA,IAAI,CAACL,EAAE,IAAIK,KAAAA,CAAML,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAII,KAAAA,CAAMJ,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAIG,KAAAA,CAAMH,EAAE,CAAA;AACnB,QAAA,IAAI,CAACH,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDS,OAAAA,MAMC,GANDA,SAAAA,MAAAA,CAAOH,KAAc,EAAW;AAC9B,QAAA,IAAI,CAACL,EAAE,IAAIK,KAAAA,CAAML,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAII,KAAAA,CAAMJ,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAIG,KAAAA,CAAMH,EAAE,CAAA;AACnB,QAAA,IAAI,CAACH,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACDU,MAAAA,CAAAA,MAGC,GAHDA,SAAAA,MAAiB,GAAA;QACf,IAAuB,KAAA,GAAA,IAAI,EAAnBT,EAAe,GAAA,KAAA,CAAfA,IAAIC,EAAW,GAAA,KAAA,CAAXA,EAAIC,EAAAA,EAAAA,GAAO,KAAPA,CAAAA,EAAAA,CAAAA;AAChB,QAAA,OAAOrB,KAAK6B,IAAI,CAACV,KAAKA,EAAKC,GAAAA,EAAAA,GAAKA,KAAKC,EAAKA,GAAAA,EAAAA,CAAAA,CAAAA;AAC5C,KAAA,CAAA;AAEA;;;AAGC,MACDS,MAAAA,CAAAA,aAGC,GAHDA,SAAAA,aAAwB,GAAA;QACtB,IAAuB,KAAA,GAAA,IAAI,EAAnBX,EAAe,GAAA,KAAA,CAAfA,IAAIC,EAAW,GAAA,KAAA,CAAXA,EAAIC,EAAAA,EAAAA,GAAO,KAAPA,CAAAA,EAAAA,CAAAA;AAChB,QAAA,OAAOF,EAAKA,GAAAA,EAAAA,GAAKC,EAAKA,GAAAA,EAAAA,GAAKC,EAAKA,GAAAA,EAAAA,CAAAA;AAClC,KAAA,CAAA;AAEA;;;AAGC,MACDU,MAAAA,CAAAA,MAMC,GANDA,SAAAA,MAAkB,GAAA;AAChB,QAAA,IAAI,CAACZ,EAAE,GAAG,CAAC,IAAI,CAACA,EAAE,CAAA;AAClB,QAAA,IAAI,CAACC,EAAE,GAAG,CAAC,IAAI,CAACA,EAAE,CAAA;AAClB,QAAA,IAAI,CAACC,EAAE,GAAG,CAAC,IAAI,CAACA,EAAE,CAAA;AAClB,QAAA,IAAI,CAACH,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACDc,MAAAA,CAAAA,SAGC,GAHDA,SAAAA,SAAqB,GAAA;AA9cVlB,QAAAA,OAAAA,CA+cDkB,SAAS,CAAC,IAAI,EAAE,IAAI,CAAA,CAAA;AAC5B,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDC,OAAAA,KAMC,GANDA,SAAAA,KAAAA,CAAMC,CAAS,EAAW;QACxB,IAAI,CAACf,EAAE,IAAIe,CAAAA,CAAAA;QACX,IAAI,CAACd,EAAE,IAAIc,CAAAA,CAAAA;QACX,IAAI,CAACb,EAAE,IAAIa,CAAAA,CAAAA;AACX,QAAA,IAAI,CAAChB,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;;;;;;;AAUC,MACDiB,OAAAA,eAGC,GAHDA,SAAAA,eAAAA,CAAgBC,CAAS,EAAW;AA3ezBtB,QAAAA,OAAAA,CA4eDqB,eAAe,CAAC,IAAI,EAAEC,GAAG,IAAI,CAAA,CAAA;AACrC,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDC,OAAAA,eAGC,GAHDA,SAAAA,eAAAA,CAAgBD,CAAS,EAAW;AArfzBtB,QAAAA,OAAAA,CAsfDuB,eAAe,CAAC,IAAI,EAAED,GAAG,IAAI,CAAA,CAAA;AACrC,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;;;;;;;AAUC,MACDE,OAAAA,mBAGC,GAHDA,SAAAA,mBAAAA,CAAoBF,CAAS,EAAW;AArgB7BtB,QAAAA,OAAAA,CAsgBDwB,mBAAmB,CAAC,IAAI,EAAEF,GAAG,IAAI,CAAA,CAAA;AACzC,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDG,OAAAA,eAGC,GAHDA,SAAAA,eAAAA,CAAgBC,UAAsB,EAAW;AA/gBtC1B,QAAAA,OAAAA,CAghBDyB,eAAe,CAAC,IAAI,EAAEC,YAAY,IAAI,CAAA,CAAA;AAC9C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACDC,MAAAA,CAAAA,KAEC,GAFDA,SAAAA,KAAiB,GAAA;AACf,QAAA,OAAO,IAzhBE3B,OAAAA,CAyhBU,IAAI,CAACK,EAAE,EAAE,IAAI,CAACC,EAAE,EAAE,IAAI,CAACC,EAAE,CAAA,CAAA;AAC9C,KAAA,CAAA;AAEA;;;;AAIC,MACDqB,OAAAA,QAMC,GANDA,SAAAA,QAAAA,CAASC,MAAmB,EAAW;AACrC,QAAA,IAAI,CAACxB,EAAE,GAAGwB,MAAAA,CAAO5B,CAAC,CAAA;AAClB,QAAA,IAAI,CAACK,EAAE,GAAGuB,MAAAA,CAAO3B,CAAC,CAAA;AAClB,QAAA,IAAI,CAACK,EAAE,GAAGsB,MAAAA,CAAO1B,CAAC,CAAA;AAClB,QAAA,IAAI,CAACC,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;;MAMA0B,MAAAA,CAAAA,aAMC,GANDA,SAAAA,cAAcC,KAAwB,EAAEC,MAAkB,EAAW;AAA7BA,QAAAA,IAAAA,mBAAAA,MAAiB,GAAA,CAAA,CAAA;AACvD,QAAA,IAAI,CAAC3B,EAAE,GAAG0B,KAAK,CAACC,MAAO,CAAA,CAAA;AACvB,QAAA,IAAI,CAAC1B,EAAE,GAAGyB,KAAK,CAACC,SAAS,CAAE,CAAA,CAAA;AAC3B,QAAA,IAAI,CAACzB,EAAE,GAAGwB,KAAK,CAACC,SAAS,CAAE,CAAA,CAAA;AAC3B,QAAA,IAAI,CAAC5B,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;MAKA6B,MAAAA,CAAAA,WAIC,GAJDA,SAAAA,YAAYC,GAA2C,EAAEC,SAAqB,EAAE;AAAvBA,QAAAA,IAAAA,sBAAAA,SAAoB,GAAA,CAAA,CAAA;AAC3ED,QAAAA,GAAG,CAACC,SAAAA,CAAU,GAAG,IAAI,CAAC9B,EAAE,CAAA;AACxB6B,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAG,IAAI,CAAC7B,EAAE,CAAA;AAC5B4B,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAG,IAAI,CAAC5B,EAAE,CAAA;AAC9B,KAAA,CAAA;AAEA;;;AAGC,MACD6B,MAAAA,CAAAA,MAMC,GANDA,SAAAA,MAAsB,GAAA;QACpB,OAAO;YACLnC,CAAG,EAAA,IAAI,CAACI,EAAE;YACVH,CAAG,EAAA,IAAI,CAACI,EAAE;YACVH,CAAG,EAAA,IAAI,CAACI,EAAE;AACZ,SAAA,CAAA;AACF,KAAA,CAAA;AAtkBA;;;;;MANWP,OAYJS,CAAAA,GAKN,GALD,SAAOA,GAAI4B,CAAAA,IAAa,EAAE3B,KAAc,EAAEwB,GAAY,EAAQ;AAC5DA,QAAAA,GAAAA,CAAI7B,EAAE,GAAGgC,IAAAA,CAAKhC,EAAE,GAAGK,MAAML,EAAE,CAAA;AAC3B6B,QAAAA,GAAAA,CAAI5B,EAAE,GAAG+B,IAAAA,CAAK/B,EAAE,GAAGI,MAAMJ,EAAE,CAAA;AAC3B4B,QAAAA,GAAAA,CAAI3B,EAAE,GAAG8B,IAAAA,CAAK9B,EAAE,GAAGG,MAAMH,EAAE,CAAA;QAC3B2B,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MAnBWJ,OAyBJW,CAAAA,QAKN,GALD,SAAOA,QAAS0B,CAAAA,IAAa,EAAE3B,KAAc,EAAEwB,GAAY,EAAQ;AACjEA,QAAAA,GAAAA,CAAI7B,EAAE,GAAGgC,IAAAA,CAAKhC,EAAE,GAAGK,MAAML,EAAE,CAAA;AAC3B6B,QAAAA,GAAAA,CAAI5B,EAAE,GAAG+B,IAAAA,CAAK/B,EAAE,GAAGI,MAAMJ,EAAE,CAAA;AAC3B4B,QAAAA,GAAAA,CAAI3B,EAAE,GAAG8B,IAAAA,CAAK9B,EAAE,GAAGG,MAAMH,EAAE,CAAA;QAC3B2B,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MAhCWJ,OAsCJY,CAAAA,QAKN,GALD,SAAOA,QAASyB,CAAAA,IAAa,EAAE3B,KAAc,EAAEwB,GAAY,EAAQ;AACjEA,QAAAA,GAAAA,CAAI7B,EAAE,GAAGgC,IAAAA,CAAKhC,EAAE,GAAGK,MAAML,EAAE,CAAA;AAC3B6B,QAAAA,GAAAA,CAAI5B,EAAE,GAAG+B,IAAAA,CAAK/B,EAAE,GAAGI,MAAMJ,EAAE,CAAA;AAC3B4B,QAAAA,GAAAA,CAAI3B,EAAE,GAAG8B,IAAAA,CAAK9B,EAAE,GAAGG,MAAMH,EAAE,CAAA;QAC3B2B,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MA7CWJ,OAmDJa,CAAAA,MAKN,GALD,SAAOA,MAAOwB,CAAAA,IAAa,EAAE3B,KAAc,EAAEwB,GAAY,EAAQ;AAC/DA,QAAAA,GAAAA,CAAI7B,EAAE,GAAGgC,IAAAA,CAAKhC,EAAE,GAAGK,MAAML,EAAE,CAAA;AAC3B6B,QAAAA,GAAAA,CAAI5B,EAAE,GAAG+B,IAAAA,CAAK/B,EAAE,GAAGI,MAAMJ,EAAE,CAAA;AAC3B4B,QAAAA,GAAAA,CAAI3B,EAAE,GAAG8B,IAAAA,CAAK9B,EAAE,GAAGG,MAAMH,EAAE,CAAA;QAC3B2B,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MA1DWJ,QAgEJsC,GAEN,GAFD,SAAOA,GAAID,CAAAA,IAAa,EAAE3B,KAAc,EAAU;AAChD,QAAA,OAAO2B,KAAKhC,EAAE,GAAGK,KAAML,CAAAA,EAAE,GAAGgC,IAAK/B,CAAAA,EAAE,GAAGI,KAAAA,CAAMJ,EAAE,GAAG+B,IAAAA,CAAK9B,EAAE,GAAGG,MAAMH,EAAE,CAAA;AACrE,KAAA,CAAA;AAEA;;;;;MApEWP,OA0EJuC,CAAAA,KASN,GATD,SAAOA,KAAMF,CAAAA,IAAa,EAAE3B,KAAc,EAAEwB,GAAY,EAAQ;QAC9D,IAAMM,EAAAA,GAAKH,KAAKhC,EAAE,CAAA;QAClB,IAAMoC,EAAAA,GAAKJ,KAAK/B,EAAE,CAAA;QAClB,IAAMoC,EAAAA,GAAKL,KAAK9B,EAAE,CAAA;QAClB,IAAMoC,EAAAA,GAAKjC,MAAML,EAAE,CAAA;QACnB,IAAMuC,EAAAA,GAAKlC,MAAMJ,EAAE,CAAA;QACnB,IAAMuC,EAAAA,GAAKnC,MAAMH,EAAE,CAAA;AAEnB2B,QAAAA,GAAAA,CAAI1B,GAAG,CAACiC,EAAKI,GAAAA,EAAAA,GAAKH,EAAKE,GAAAA,EAAAA,EAAIF,EAAKC,GAAAA,EAAAA,GAAKH,EAAKK,GAAAA,EAAAA,EAAIL,EAAKI,GAAAA,EAAAA,GAAKH,EAAKE,GAAAA,EAAAA,CAAAA,CAAAA;AAC/D,KAAA,CAAA;AAEA;;;;;MArFW3C,QA2FJ8C,QAKN,GALD,SAAOA,QAAS1D,CAAAA,CAAU,EAAEC,CAAU,EAAU;AAC9C,QAAA,IAAMY,CAAIZ,GAAAA,CAAAA,CAAEgB,EAAE,GAAGjB,EAAEiB,EAAE,CAAA;AACrB,QAAA,IAAMH,CAAIb,GAAAA,CAAAA,CAAEiB,EAAE,GAAGlB,EAAEkB,EAAE,CAAA;AACrB,QAAA,IAAMH,CAAId,GAAAA,CAAAA,CAAEkB,EAAE,GAAGnB,EAAEmB,EAAE,CAAA;AACrB,QAAA,OAAOrB,KAAK6B,IAAI,CAACd,IAAIA,CAAIC,GAAAA,CAAAA,GAAIA,IAAIC,CAAIA,GAAAA,CAAAA,CAAAA,CAAAA;AACvC,KAAA,CAAA;AAEA;;;;;MAlGWH,QAwGJ+C,eAKN,GALD,SAAOA,eAAgB3D,CAAAA,CAAU,EAAEC,CAAU,EAAU;AACrD,QAAA,IAAMY,CAAIZ,GAAAA,CAAAA,CAAEgB,EAAE,GAAGjB,EAAEiB,EAAE,CAAA;AACrB,QAAA,IAAMH,CAAIb,GAAAA,CAAAA,CAAEiB,EAAE,GAAGlB,EAAEkB,EAAE,CAAA;AACrB,QAAA,IAAMH,CAAId,GAAAA,CAAAA,CAAEkB,EAAE,GAAGnB,EAAEmB,EAAE,CAAA;AACrB,QAAA,OAAON,CAAIA,GAAAA,CAAAA,GAAIC,CAAIA,GAAAA,CAAAA,GAAIC,CAAIA,GAAAA,CAAAA,CAAAA;AAC7B,KAAA,CAAA;AAEA;;;;;MA/GWH,QAqHJb,MAIN,GAJD,SAAOA,MAAOkD,CAAAA,IAAa,EAAE3B,KAAc,EAAW;QACpD,OACE7B,QAAAA,CAASM,MAAM,CAACkD,IAAKhC,CAAAA,EAAE,EAAEK,KAAML,CAAAA,EAAE,CAAKxB,IAAAA,QAAAA,CAASM,MAAM,CAACkD,KAAK/B,EAAE,EAAEI,KAAMJ,CAAAA,EAAE,CAAKzB,IAAAA,QAAAA,CAASM,MAAM,CAACkD,IAAK9B,CAAAA,EAAE,EAAEG,KAAAA,CAAMH,EAAE,CAAA,CAAA;AAEjH,KAAA,CAAA;AAEA;;;;;;AAMC,MACD,OAlIWP,CAkIJgD,IAMN,GAND,SAAOA,IAAAA,CAAKC,KAAc,EAAEC,GAAY,EAAEC,CAAS,EAAEjB,GAAY,EAAQ;AACvE,QAAA,IAAQ7B,KAAe4C,KAAf5C,CAAAA,EAAAA,EAAIC,KAAW2C,KAAX3C,CAAAA,EAAAA,EAAIC,KAAO0C,KAAP1C,CAAAA,EAAAA,CAAAA;QAChB2B,GAAI7B,CAAAA,EAAE,GAAGA,EAAK,GAAC6C,CAAAA,GAAI7C,CAAAA,EAAE,GAAGA,EAAC,IAAK8C,CAAAA,CAAAA;QAC9BjB,GAAI5B,CAAAA,EAAE,GAAGA,EAAK,GAAC4C,CAAAA,GAAI5C,CAAAA,EAAE,GAAGA,EAAC,IAAK6C,CAAAA,CAAAA;QAC9BjB,GAAI3B,CAAAA,EAAE,GAAGA,EAAK,GAAC2C,CAAAA,GAAI3C,CAAAA,EAAE,GAAGA,EAAC,IAAK4C,CAAAA,CAAAA;QAC9BjB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MA1IWJ,OAgJJf,CAAAA,GAKN,GALD,SAAOA,GAAIoD,CAAAA,IAAa,EAAE3B,KAAc,EAAEwB,GAAY,EAAQ;QAC5DA,GAAI7B,CAAAA,EAAE,GAAGnB,IAAKD,CAAAA,GAAG,CAACoD,IAAKhC,CAAAA,EAAE,EAAEK,KAAAA,CAAML,EAAE,CAAA,CAAA;QACnC6B,GAAI5B,CAAAA,EAAE,GAAGpB,IAAKD,CAAAA,GAAG,CAACoD,IAAK/B,CAAAA,EAAE,EAAEI,KAAAA,CAAMJ,EAAE,CAAA,CAAA;QACnC4B,GAAI3B,CAAAA,EAAE,GAAGrB,IAAKD,CAAAA,GAAG,CAACoD,IAAK9B,CAAAA,EAAE,EAAEG,KAAAA,CAAMH,EAAE,CAAA,CAAA;QACnC2B,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MAvJWJ,OA6JJhB,CAAAA,GAKN,GALD,SAAOA,GAAIqD,CAAAA,IAAa,EAAE3B,KAAc,EAAEwB,GAAY,EAAQ;QAC5DA,GAAI7B,CAAAA,EAAE,GAAGnB,IAAKF,CAAAA,GAAG,CAACqD,IAAKhC,CAAAA,EAAE,EAAEK,KAAAA,CAAML,EAAE,CAAA,CAAA;QACnC6B,GAAI5B,CAAAA,EAAE,GAAGpB,IAAKF,CAAAA,GAAG,CAACqD,IAAK/B,CAAAA,EAAE,EAAEI,KAAAA,CAAMJ,EAAE,CAAA,CAAA;QACnC4B,GAAI3B,CAAAA,EAAE,GAAGrB,IAAKF,CAAAA,GAAG,CAACqD,IAAK9B,CAAAA,EAAE,EAAEG,KAAAA,CAAMH,EAAE,CAAA,CAAA;QACnC2B,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;MApKWJ,QAyKJiB,MAKN,GALD,SAAOA,MAAO7B,CAAAA,CAAU,EAAE8C,GAAY,EAAQ;AAC5CA,QAAAA,GAAAA,CAAI7B,EAAE,GAAG,CAACjB,CAAAA,CAAEiB,EAAE,CAAA;AACd6B,QAAAA,GAAAA,CAAI5B,EAAE,GAAG,CAAClB,CAAAA,CAAEkB,EAAE,CAAA;AACd4B,QAAAA,GAAAA,CAAI3B,EAAE,GAAG,CAACnB,CAAAA,CAAEmB,EAAE,CAAA;QACd2B,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;MAhLWJ,QAqLJkB,SAON,GAPD,SAAOA,SAAU9B,CAAAA,CAAU,EAAE8C,GAAY,EAAQ;AAC/C,QAAA,IAAQ7B,KAAejB,CAAfiB,CAAAA,EAAAA,EAAIC,KAAWlB,CAAXkB,CAAAA,EAAAA,EAAIC,KAAOnB,CAAPmB,CAAAA,EAAAA,CAAAA;QAChB,IAAI6C,GAAAA,GAAMlE,KAAK6B,IAAI,CAACV,KAAKA,EAAKC,GAAAA,EAAAA,GAAKA,KAAKC,EAAKA,GAAAA,EAAAA,CAAAA,CAAAA;QAC7C,IAAI6C,GAAAA,GAAMvE,QAASU,CAAAA,aAAa,EAAE;AAChC6D,YAAAA,GAAAA,GAAM,CAAIA,GAAAA,GAAAA,CAAAA;AACVlB,YAAAA,GAAAA,CAAI1B,GAAG,CAACH,EAAAA,GAAK+C,GAAK9C,EAAAA,EAAAA,GAAK8C,KAAK7C,EAAK6C,GAAAA,GAAAA,CAAAA,CAAAA;SAClC;AACH,KAAA,CAAA;AAEA;;;;;MA9LWpD,OAoMJmB,CAAAA,KAKN,GALD,SAAOA,KAAM/B,CAAAA,CAAU,EAAEgC,CAAS,EAAEc,GAAY,EAAQ;AACtDA,QAAAA,GAAAA,CAAI7B,EAAE,GAAGjB,CAAEiB,CAAAA,EAAE,GAAGe,CAAAA,CAAAA;AAChBc,QAAAA,GAAAA,CAAI5B,EAAE,GAAGlB,CAAEkB,CAAAA,EAAE,GAAGc,CAAAA,CAAAA;AAChBc,QAAAA,GAAAA,CAAI3B,EAAE,GAAGnB,CAAEmB,CAAAA,EAAE,GAAGa,CAAAA,CAAAA;QAChBc,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;;;;;;;MA3MWJ,OAuNJqB,CAAAA,eAON,GAPD,SAAOA,eAAgBtC,CAAAA,CAAU,EAAEuC,CAAS,EAAEY,GAAY,EAAQ;AAChE,QAAA,IAAQ7B,KAAetB,CAAfsB,CAAAA,EAAAA,EAAIC,KAAWvB,CAAXuB,CAAAA,EAAAA,EAAIC,KAAOxB,CAAPwB,CAAAA,EAAAA,CAAAA;QAChB,IAAM8C,CAAAA,GAAI/B,EAAEgC,QAAQ,CAAA;AACpBpB,QAAAA,GAAAA,CAAI7B,EAAE,GAAGA,EAAKgD,GAAAA,CAAC,CAAC,CAAE,CAAA,GAAG/C,EAAK+C,GAAAA,CAAC,CAAC,CAAE,CAAA,GAAG9C,EAAK8C,GAAAA,CAAC,CAAC,CAAE,CAAA,CAAA;AAC1CnB,QAAAA,GAAAA,CAAI5B,EAAE,GAAGD,EAAKgD,GAAAA,CAAC,CAAC,CAAE,CAAA,GAAG/C,EAAK+C,GAAAA,CAAC,CAAC,CAAE,CAAA,GAAG9C,EAAK8C,GAAAA,CAAC,CAAC,CAAE,CAAA,CAAA;AAC1CnB,QAAAA,GAAAA,CAAI3B,EAAE,GAAGF,EAAKgD,GAAAA,CAAC,CAAC,CAAE,CAAA,GAAG/C,EAAK+C,GAAAA,CAAC,CAAC,CAAE,CAAA,GAAG9C,EAAK8C,GAAAA,CAAC,CAAC,EAAG,CAAA,CAAA;QAC3CnB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MAhOWJ,OAsOJuB,CAAAA,eAQN,GARD,SAAOA,eAAgBxC,CAAAA,CAAU,EAAEuC,CAAS,EAAEY,GAAY,EAAQ;AAChE,QAAA,IAAQ7B,KAAetB,CAAfsB,CAAAA,EAAAA,EAAIC,KAAWvB,CAAXuB,CAAAA,EAAAA,EAAIC,KAAOxB,CAAPwB,CAAAA,EAAAA,CAAAA;QAChB,IAAM8C,CAAAA,GAAI/B,EAAEgC,QAAQ,CAAA;AAEpBpB,QAAAA,GAAAA,CAAI7B,EAAE,GAAGA,EAAAA,GAAKgD,CAAC,CAAC,CAAA,CAAE,GAAG/C,EAAK+C,GAAAA,CAAC,CAAC,CAAE,CAAA,GAAG9C,KAAK8C,CAAC,CAAC,EAAE,GAAGA,CAAC,CAAC,EAAG,CAAA,CAAA;AAClDnB,QAAAA,GAAAA,CAAI5B,EAAE,GAAGD,EAAAA,GAAKgD,CAAC,CAAC,CAAA,CAAE,GAAG/C,EAAK+C,GAAAA,CAAC,CAAC,CAAE,CAAA,GAAG9C,KAAK8C,CAAC,CAAC,EAAE,GAAGA,CAAC,CAAC,EAAG,CAAA,CAAA;AAClDnB,QAAAA,GAAAA,CAAI3B,EAAE,GAAGF,EAAAA,GAAKgD,CAAC,CAAC,CAAA,CAAE,GAAG/C,EAAK+C,GAAAA,CAAC,CAAC,CAAE,CAAA,GAAG9C,KAAK8C,CAAC,CAAC,GAAG,GAAGA,CAAC,CAAC,EAAG,CAAA,CAAA;QACnDnB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MAhPWJ,OAsPJuD,CAAAA,eAQN,GARD,SAAOA,eAAgBxE,CAAAA,CAAU,EAAEuC,CAAS,EAAEY,GAAY,EAAQ;AAChE,QAAA,IAAQ7B,KAAetB,CAAfsB,CAAAA,EAAAA,EAAIC,KAAWvB,CAAXuB,CAAAA,EAAAA,EAAIC,KAAOxB,CAAPwB,CAAAA,EAAAA,CAAAA;QAChB,IAAM8C,CAAAA,GAAI/B,EAAEgC,QAAQ,CAAA;AACpBpB,QAAAA,GAAAA,CAAI7B,EAAE,GAAGA,EAAAA,GAAKgD,CAAC,CAAC,CAAA,CAAE,GAAG/C,EAAK+C,GAAAA,CAAC,CAAC,CAAE,CAAA,GAAG9C,KAAK8C,CAAC,CAAC,EAAE,GAAGA,CAAC,CAAC,EAAG,CAAA,CAAA;AAClDnB,QAAAA,GAAAA,CAAI5B,EAAE,GAAGD,EAAAA,GAAKgD,CAAC,CAAC,CAAA,CAAE,GAAG/C,EAAK+C,GAAAA,CAAC,CAAC,CAAE,CAAA,GAAG9C,KAAK8C,CAAC,CAAC,EAAE,GAAGA,CAAC,CAAC,EAAG,CAAA,CAAA;AAClDnB,QAAAA,GAAAA,CAAI3B,EAAE,GAAGF,EAAAA,GAAKgD,CAAC,CAAC,CAAA,CAAE,GAAG/C,EAAK+C,GAAAA,CAAC,CAAC,CAAE,CAAA,GAAG9C,KAAK8C,CAAC,CAAC,GAAG,GAAGA,CAAC,CAAC,EAAG,CAAA,CAAA;AACnDnB,QAAAA,GAAAA,CAAIsB,EAAE,GAAGnD,EAAAA,GAAKgD,CAAC,CAAC,CAAA,CAAE,GAAG/C,EAAK+C,GAAAA,CAAC,CAAC,CAAE,CAAA,GAAG9C,KAAK8C,CAAC,CAAC,GAAG,GAAGA,CAAC,CAAC,EAAG,CAAA,CAAA;QACnDnB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;;;;;;;;MAhQWJ,OA6QJwB,CAAAA,mBAUN,GAVD,SAAOA,mBAAoBzC,CAAAA,CAAU,EAAEuC,CAAS,EAAEY,GAAY,EAAQ;AACpE,QAAA,IAAQ7B,KAAetB,CAAfsB,CAAAA,EAAAA,EAAIC,KAAWvB,CAAXuB,CAAAA,EAAAA,EAAIC,KAAOxB,CAAPwB,CAAAA,EAAAA,CAAAA;QAChB,IAAM8C,CAAAA,GAAI/B,EAAEgC,QAAQ,CAAA;AACpB,QAAA,IAAIG,IAAIpD,EAAKgD,GAAAA,CAAC,CAAC,CAAE,CAAA,GAAG/C,KAAK+C,CAAC,CAAC,CAAE,CAAA,GAAG9C,KAAK8C,CAAC,CAAC,GAAG,GAAGA,CAAC,CAAC,EAAG,CAAA,CAAA;AAClDI,QAAAA,CAAAA,GAAI,GAAMA,GAAAA,CAAAA,CAAAA;QAEVvB,GAAI7B,CAAAA,EAAE,GAAG,CAACA,KAAKgD,CAAC,CAAC,CAAE,CAAA,GAAG/C,EAAK+C,GAAAA,CAAC,CAAC,CAAE,CAAA,GAAG9C,EAAK8C,GAAAA,CAAC,CAAC,CAAA,CAAE,GAAGA,CAAC,CAAC,EAAG,CAAD,IAAKI,CAAAA,CAAAA;QACvDvB,GAAI5B,CAAAA,EAAE,GAAG,CAACD,KAAKgD,CAAC,CAAC,CAAE,CAAA,GAAG/C,EAAK+C,GAAAA,CAAC,CAAC,CAAE,CAAA,GAAG9C,EAAK8C,GAAAA,CAAC,CAAC,CAAA,CAAE,GAAGA,CAAC,CAAC,EAAG,CAAD,IAAKI,CAAAA,CAAAA;QACvDvB,GAAI3B,CAAAA,EAAE,GAAG,CAACF,KAAKgD,CAAC,CAAC,CAAE,CAAA,GAAG/C,EAAK+C,GAAAA,CAAC,CAAC,CAAE,CAAA,GAAG9C,EAAK8C,GAAAA,CAAC,CAAC,EAAA,CAAG,GAAGA,CAAC,CAAC,EAAG,CAAD,IAAKI,CAAAA,CAAAA;QACxDvB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MAzRWJ,OA+RJyB,CAAAA,eAeN,GAfD,SAAOA,eAAgB1C,CAAAA,CAAU,EAAE2C,UAAsB,EAAEQ,GAAY,EAAQ;AAC7E,QAAA,IAAQ7B,KAAetB,CAAfsB,CAAAA,EAAAA,EAAIC,KAAWvB,CAAXuB,CAAAA,EAAAA,EAAIC,KAAOxB,CAAPwB,CAAAA,EAAAA,CAAAA;AAChB,QAAA,IAAQF,EAAIqD,GAA+BhC,UAAnCrB,CAAAA,EAAAA,EAAQC,EAA2BoB,GAAAA,UAAAA,CAA3BpB,EAAQC,EAAIoD,EAAejC,GAAAA,UAAAA,CAAnBnB,EAAQiD,EAAII,KAAOlC,UAAX8B,CAAAA,EAAAA,CAAAA;;AAGhC,QAAA,IAAMK,EAAKD,GAAAA,EAAAA,GAAKvD,EAAKyD,GAAAA,EAAAA,GAAKvD,KAAKoD,EAAKrD,GAAAA,EAAAA,CAAAA;AACpC,QAAA,IAAMyD,EAAKH,GAAAA,EAAAA,GAAKtD,EAAKqD,GAAAA,EAAAA,GAAKtD,KAAKqD,EAAKnD,GAAAA,EAAAA,CAAAA;AACpC,QAAA,IAAMyD,EAAKJ,GAAAA,EAAAA,GAAKrD,EAAKmD,GAAAA,EAAAA,GAAKpD,KAAKwD,EAAKzD,GAAAA,EAAAA,CAAAA;AACpC,QAAA,IAAM4D,KAAK,CAACP,EAAAA,GAAKrD,EAAKyD,GAAAA,EAAAA,GAAKxD,KAAKqD,EAAKpD,GAAAA,EAAAA,CAAAA;;QAGrC2B,GAAI7B,CAAAA,EAAE,GAAGwD,EAAKD,GAAAA,EAAAA,GAAKK,KAAKP,EAAKK,GAAAA,EAAAA,GAAKJ,KAAKK,EAAKF,GAAAA,EAAAA,CAAAA;QAC5C5B,GAAI5B,CAAAA,EAAE,GAAGyD,EAAKH,GAAAA,EAAAA,GAAKK,KAAKH,EAAKE,GAAAA,EAAAA,GAAKN,KAAKG,EAAKF,GAAAA,EAAAA,CAAAA;QAC5CzB,GAAI3B,CAAAA,EAAE,GAAGyD,EAAKJ,GAAAA,EAAAA,GAAKK,KAAKN,EAAKE,GAAAA,EAAAA,GAAKC,KAAKC,EAAKL,GAAAA,EAAAA,CAAAA;QAC5CxB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AA9SWJ,IAAAA,aAAAA,CAAAA,OAAAA,EAAAA;;YA4TAC,GAAAA,EAAAA,GAAAA;;;AADV,MACD,SAAuB,GAAA,GAAA;gBACrB,OAAO,IAAI,CAACI,EAAE,CAAA;AAChB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa6D,KAAa,EAAE;gBAC1B,IAAI,CAAC7D,EAAE,GAAG6D,KAAAA,CAAAA;AACV,gBAAA,IAAI,CAAC9D,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC9C,aAAA;;;YAKWF,GAAAA,EAAAA,GAAAA;;;AADV,MACD,SAAuB,GAAA,GAAA;gBACrB,OAAO,IAAI,CAACI,EAAE,CAAA;AAChB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa4D,KAAa,EAAE;gBAC1B,IAAI,CAAC5D,EAAE,GAAG4D,KAAAA,CAAAA;AACV,gBAAA,IAAI,CAAC9D,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC9C,aAAA;;;YAKWD,GAAAA,EAAAA,GAAAA;;;AADV,MACD,SAAuB,GAAA,GAAA;gBACrB,OAAO,IAAI,CAACI,EAAE,CAAA;AAChB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa2D,KAAa,EAAE;gBAC1B,IAAI,CAAC3D,EAAE,GAAG2D,KAAAA,CAAAA;AACV,gBAAA,IAAI,CAAC9D,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC9C,aAAA;;;AA3VWJ,IAAAA,OAAAA,OAAAA,CAAAA;AA6kBZ,CAAA,GAAA;;AA5kBC,qBADWA,OAEKmE,CAAAA,KAAAA,GAAQ,IAAInE,OAAAA,CAAQ,KAAK,GAAK,EAAA,GAAA,CAAA,CAAA;;;AAC9C,qBAHWA,OAIKoE,CAAAA,IAAAA,GAAO,IAAIpE,OAAAA,CAAQ,KAAK,GAAK,EAAA,GAAA,CAAA,CAAA;;;ACT/C;;MAGO,IAAMqE,cAAN,iBAAA,WAAA;aAAMA,cA4DCC,CAAAA,MAAsB,EAAEC,MAAkB,EAAA;QAA1CD,IAAAA,MAAAA,KAAAA,KAAAA,CAAAA,EAAAA,SAAkB,IAAI,CAAA;AAAEC,QAAAA,IAAAA,mBAAAA,MAAiB,GAAA,CAAA,CAAA;+CAVjB,IAAA,CACpBD,SAAkB,IAAItE,OAAAA,EAAAA,CAAAA;AACtC,8CACOuE,MAAiB,GAAA,CAAA,CAAA;AAQtBD,QAAAA,MAAAA,IAAU,IAAI,CAACA,MAAM,CAAC1C,QAAQ,CAAC0C,MAAAA,CAAAA,CAAAA;QAC/B,IAAI,CAACC,MAAM,GAAGA,MAAAA,CAAAA;;AA9DLF,IAAAA,IAAAA,MAAAA,GAAAA,cAAAA,CAAAA,SAAAA,CAAAA;AAiEX;;;AAGC,MACD1C,MAAAA,CAAAA,KAEC,GAFDA,SAAAA,KAAwB,GAAA;QACtB,OAAO,IAtEE0C,eAsEiB,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,MAAM,CAAA,CAAA;AACpD,KAAA,CAAA;AAEA;;;;AAIC,MACD3C,OAAAA,QAIC,GAJDA,SAAAA,QAAAA,CAASC,MAAsB,EAAkB;AAC/C,QAAA,IAAI,CAACyC,MAAM,CAAC1C,QAAQ,CAACC,OAAOyC,MAAM,CAAA,CAAA;AAClC,QAAA,IAAI,CAACC,MAAM,GAAG1C,MAAAA,CAAO0C,MAAM,CAAA;AAC3B,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AA/EA;;;;MAHWF,eAQJG,UAyBN,GAzBD,SAAOA,UAAWC,CAAAA,MAAiB,EAAEvC,GAAmB,EAAQ;AAC9D,QAAA,IAAI,CAACuC,MAAAA,IAAUA,MAAO3D,CAAAA,MAAM,KAAK,CAAG,EAAA;YAClC,MAAM,IAAI4D,MAAM,0CAA4C,CAAA,CAAA;SAC7D;QAED,IAAMtB,GAAAA,GAAMqB,OAAO3D,MAAM,CAAA;QACzB,IAAMwD,MAAAA,GAASD,cAdNA,CAcqBM,UAAU,CAAA;AACxCL,QAAAA,MAAAA,CAAOrE,CAAC,GAAGqE,MAAAA,CAAOpE,CAAC,GAAGoE,MAAAA,CAAOnE,CAAC,GAAG,CAAA,CAAA;;AAGjC,QAAA,IAAK,IAAIyE,CAAI,GAAA,CAAA,EAAGA,CAAIxB,GAAAA,GAAAA,EAAK,EAAEwB,CAAG,CAAA;AAC5B5E,YAAAA,OAAAA,CAAQS,GAAG,CAACgE,MAAM,CAACG,CAAAA,CAAE,EAAEN,MAAQA,EAAAA,MAAAA,CAAAA,CAAAA;AACjC,SAAA;;AAGAtE,QAAAA,OAAAA,CAAQmB,KAAK,CAACmD,MAAAA,EAAQ,CAAIlB,GAAAA,GAAAA,EAAKlB,IAAIoC,MAAM,CAAA,CAAA;;AAGzC,QAAA,IAAIC,MAAS,GAAA,GAAA,CAAA;AACb,QAAA,IAAK,IAAIK,EAAI,GAAA,CAAA,EAAGA,EAAIxB,GAAAA,GAAAA,EAAK,EAAEwB,EAAG,CAAA;AAC5B,YAAA,IAAM9B,WAAW9C,OAAQ+C,CAAAA,eAAe,CAACuB,MAAQG,EAAAA,MAAM,CAACG,EAAE,CAAA,CAAA,CAAA;YAC1D9B,QAAWyB,GAAAA,MAAAA,KAAWA,MAAAA,GAASzB,QAAO,CAAA,CAAA;AACxC,SAAA;;AAEAZ,QAAAA,GAAAA,CAAIqC,MAAM,GAAGrF,IAAK6B,CAAAA,IAAI,CAACwD,MAAAA,CAAAA,CAAAA;AACzB,KAAA,CAAA;AAEA;;;;MAnCWF,eAwCJQ,OAQN,GARD,SAAOA,OAAQC,CAAAA,GAAgB,EAAE5C,GAAmB,EAAQ;QAC1D,IAAQoC,SAAWpC,GAAXoC,CAAAA,MAAAA,CAAAA;AACR,QAAA,IAAQtF,GAAa8F,GAAAA,GAAAA,CAAb9F,GAAKC,EAAAA,GAAAA,GAAQ6F,GAAR7F,CAAAA,GAAAA,CAAAA;QAEbqF,MAAOrE,CAAAA,CAAC,GAAIjB,CAAAA,GAAAA,CAAIiB,CAAC,GAAGhB,GAAAA,CAAIgB,CAAAA,IAAK,GAAA,CAAA;QAC7BqE,MAAOpE,CAAAA,CAAC,GAAIlB,CAAAA,GAAAA,CAAIkB,CAAC,GAAGjB,GAAAA,CAAIiB,CAAAA,IAAK,GAAA,CAAA;QAC7BoE,MAAOnE,CAAAA,CAAC,GAAInB,CAAAA,GAAAA,CAAImB,CAAC,GAAGlB,GAAAA,CAAIkB,CAAAA,IAAK,GAAA,CAAA;AAC7B+B,QAAAA,GAAAA,CAAIqC,MAAM,GAAGvE,OAAQ8C,CAAAA,QAAQ,CAACwB,MAAQrF,EAAAA,GAAAA,CAAAA,CAAAA;AACxC,KAAA,CAAA;AAhDWoF,IAAAA,OAAAA,cAAAA,CAAAA;AAmFZ,CAAA,GAAA;;AAnFYA,IAAAA,cAAAA,CACIM,aAAsB,IAAI3E,OAAAA,EAAAA,CAAAA;;;ACH3C;;IAGO,IAAM+E,WAAN,iBAAA,WAAA;aAAMA,WAqGC/F,CAAAA,GAAmB,EAAEC,GAAmB,EAAA;QAAxCD,IAAAA,GAAAA,KAAAA,KAAAA,CAAAA,EAAAA,MAAe,IAAI,CAAA;QAAEC,IAAAA,GAAAA,KAAAA,KAAAA,CAAAA,EAAAA,MAAe,IAAI,CAAA;6CAVlB,IAAA,CAClBD,MAAe,IAAIgB,OAAAA,EAAAA,CAAAA;6CACD,IAAA,CAClBf,MAAe,IAAIe,OAAAA,EAAAA,CAAAA;AAQjChB,QAAAA,GAAAA,IAAO,IAAI,CAACA,GAAG,CAAC4C,QAAQ,CAAC5C,GAAAA,CAAAA,CAAAA;AACzBC,QAAAA,GAAAA,IAAO,IAAI,CAACA,GAAG,CAAC2C,QAAQ,CAAC3C,GAAAA,CAAAA,CAAAA;;AAvGhB8F,IAAAA,IAAAA,MAAAA,GAAAA,WAAAA,CAAAA,SAAAA,CAAAA;AA0GX;;;;AAIC,MACDC,OAAAA,SAIC,GAJDA,SAAAA,SAAAA,CAAU9C,GAAY,EAAW;QAC/BlC,OAAQS,CAAAA,GAAG,CAAC,IAAI,CAACzB,GAAG,EAAE,IAAI,CAACC,GAAG,EAAEiD,GAAAA,CAAAA,CAAAA;QAChClC,OAAQmB,CAAAA,KAAK,CAACe,GAAAA,EAAK,GAAKA,EAAAA,GAAAA,CAAAA,CAAAA;QACxB,OAAOA,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACD+C,OAAAA,SAIC,GAJDA,SAAAA,SAAAA,CAAU/C,GAAY,EAAW;QAC/BlC,OAAQW,CAAAA,QAAQ,CAAC,IAAI,CAAC1B,GAAG,EAAE,IAAI,CAACD,GAAG,EAAEkD,GAAAA,CAAAA,CAAAA;QACrClC,OAAQmB,CAAAA,KAAK,CAACe,GAAAA,EAAK,GAAKA,EAAAA,GAAAA,CAAAA,CAAAA;QACxB,OAAOA,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACDgD,OAAAA,UA2BC,GA3BDA,SAAAA,UAAAA,CAAWhD,GAAmB,EAAa;QAAhCA,IAAAA,GAAAA,KAAAA,KAAAA,CAAAA,EAAAA,MAAiB,EAAE,CAAA;AAC5B,QAAA,IAAqB,QAAA,IAAI,EAAjBlD,MAAa,KAAbA,CAAAA,GAAAA,EAAKC,MAAQ,KAARA,CAAAA,GAAAA,CAAAA;QACb,IAAMkG,IAAAA,GAAOnG,IAAIiB,CAAC,CAAA;QAClB,IAAMmF,IAAAA,GAAOpG,IAAIkB,CAAC,CAAA;QAClB,IAAMmF,IAAAA,GAAOrG,IAAImB,CAAC,CAAA;QAClB,IAAMmF,IAAAA,GAAOrG,IAAIgB,CAAC,CAAA;QAClB,IAAMsF,IAAAA,GAAOtG,IAAIiB,CAAC,CAAA;QAClB,IAAMsF,IAAAA,GAAOvG,IAAIkB,CAAC,CAAA;QAClB,IAAMiD,GAAAA,GAAMlB,IAAIpB,MAAM,CAAA;;AAGtB,QAAA,IAAIsC,MAAM,CAAG,EAAA;YACX,IAAK,IAAIwB,IAAI,CAAGa,EAAAA,CAAAA,GAAI,IAAIrC,GAAKwB,EAAAA,CAAAA,GAAIa,CAAG,EAAA,EAAEb,CAAG,CAAA;AACvC1C,gBAAAA,GAAG,CAACkB,GAAAA,GAAMwB,CAAE,CAAA,GAAG,IAAI5E,OAAAA,EAAAA,CAAAA;AACrB,aAAA;SACD;AAEDkC,QAAAA,GAAG,CAAC,CAAE,CAAA,CAAC1B,GAAG,CAAC2E,MAAMI,IAAMC,EAAAA,IAAAA,CAAAA,CAAAA;AACvBtD,QAAAA,GAAG,CAAC,CAAE,CAAA,CAAC1B,GAAG,CAAC8E,MAAMC,IAAMC,EAAAA,IAAAA,CAAAA,CAAAA;AACvBtD,QAAAA,GAAG,CAAC,CAAE,CAAA,CAAC1B,GAAG,CAAC8E,MAAMF,IAAMI,EAAAA,IAAAA,CAAAA,CAAAA;AACvBtD,QAAAA,GAAG,CAAC,CAAE,CAAA,CAAC1B,GAAG,CAAC2E,MAAMC,IAAMI,EAAAA,IAAAA,CAAAA,CAAAA;AACvBtD,QAAAA,GAAG,CAAC,CAAE,CAAA,CAAC1B,GAAG,CAAC2E,MAAMI,IAAMF,EAAAA,IAAAA,CAAAA,CAAAA;AACvBnD,QAAAA,GAAG,CAAC,CAAE,CAAA,CAAC1B,GAAG,CAAC8E,MAAMC,IAAMF,EAAAA,IAAAA,CAAAA,CAAAA;AACvBnD,QAAAA,GAAG,CAAC,CAAE,CAAA,CAAC1B,GAAG,CAAC8E,MAAMF,IAAMC,EAAAA,IAAAA,CAAAA,CAAAA;AACvBnD,QAAAA,GAAG,CAAC,CAAE,CAAA,CAAC1B,GAAG,CAAC2E,MAAMC,IAAMC,EAAAA,IAAAA,CAAAA,CAAAA;QAEvB,OAAOnD,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACD,OAAOwD,SAGN,GAHD,SAAOA,SAAAA,CAAUC,MAAc,EAAe;AAvKnCZ,QAAAA,WAAAA,CAwKGW,SAAS,CAAC,IAAI,EAAEC,QAAQ,IAAI,CAAA,CAAA;AACxC,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACDhE,MAAAA,CAAAA,KAEC,GAFDA,SAAAA,KAAqB,GAAA;QACnB,OAAO,IAjLEoD,YAiLc,IAAI,CAAC/F,GAAG,EAAE,IAAI,CAACC,GAAG,CAAA,CAAA;AAC3C,KAAA,CAAA;AAEA;;;;AAIC,MACD2C,OAAAA,QAIC,GAJDA,SAAAA,QAAAA,CAASC,MAAmB,EAAe;AACzC,QAAA,IAAI,CAAC7C,GAAG,CAAC4C,QAAQ,CAACC,OAAO7C,GAAG,CAAA,CAAA;AAC5B,QAAA,IAAI,CAACC,GAAG,CAAC2C,QAAQ,CAACC,OAAO5C,GAAG,CAAA,CAAA;AAC5B,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAzLA;;;;;MAJW8F,WAUJa,CAAAA,mBAGN,GAHD,SAAOA,mBAAoBtB,CAAAA,MAAe,EAAEuB,MAAe,EAAE3D,GAAgB,EAAQ;AACnFlC,QAAAA,OAAAA,CAAQW,QAAQ,CAAC2D,MAAQuB,EAAAA,MAAAA,EAAQ3D,IAAIlD,GAAG,CAAA,CAAA;AACxCgB,QAAAA,OAAAA,CAAQS,GAAG,CAAC6D,MAAQuB,EAAAA,MAAAA,EAAQ3D,IAAIjD,GAAG,CAAA,CAAA;AACrC,KAAA,CAAA;AAEA;;;;MAfW8F,YAoBJP,UAcN,GAdD,SAAOA,UAAWC,CAAAA,MAAiB,EAAEvC,GAAgB,EAAQ;AAC3D,QAAA,IAAI,CAACuC,MAAAA,IAAUA,MAAO3D,CAAAA,MAAM,KAAK,CAAG,EAAA;YAClC,MAAM,IAAI4D,MAAM,0CAA4C,CAAA,CAAA;SAC7D;AAED,QAAA,IAAQ1F,GAAakD,GAAAA,GAAAA,CAAblD,GAAKC,EAAAA,GAAAA,GAAQiD,GAARjD,CAAAA,GAAAA,CAAAA;QACbD,GAAIiB,CAAAA,CAAC,GAAGjB,GAAIkB,CAAAA,CAAC,GAAGlB,GAAImB,CAAAA,CAAC,GAAG2F,MAAAA,CAAOC,SAAS,CAAA;QACxC9G,GAAIgB,CAAAA,CAAC,GAAGhB,GAAAA,CAAIiB,CAAC,GAAGjB,IAAIkB,CAAC,GAAG,CAAC2F,MAAAA,CAAOC,SAAS,CAAA;QAEzC,IAAK,IAAInB,CAAI,GAAA,CAAA,EAAGa,CAAIhB,GAAAA,MAAAA,CAAO3D,MAAM,EAAE8D,CAAAA,GAAIa,CAAG,EAAA,EAAEb,CAAG,CAAA;YAC7C,IAAMoB,KAAAA,GAAQvB,MAAM,CAACG,CAAE,CAAA,CAAA;YACvB5E,OAAQhB,CAAAA,GAAG,CAACA,GAAAA,EAAKgH,KAAOhH,EAAAA,GAAAA,CAAAA,CAAAA;YACxBgB,OAAQf,CAAAA,GAAG,CAACA,GAAAA,EAAK+G,KAAO/G,EAAAA,GAAAA,CAAAA,CAAAA;AAC1B,SAAA;AACF,KAAA,CAAA;AAEA;;;;MApCW8F,YAyCJkB,UAUN,GAVD,SAAOA,UAAWC,CAAAA,MAAsB,EAAEhE,GAAgB,EAAQ;AAChE,QAAA,IAAQoC,MAAmB4B,GAAAA,MAAAA,CAAnB5B,MAAQC,EAAAA,MAAAA,GAAW2B,MAAX3B,CAAAA,MAAAA,CAAAA;AAChB,QAAA,IAAQvF,GAAakD,GAAAA,GAAAA,CAAblD,GAAKC,EAAAA,GAAAA,GAAQiD,GAARjD,CAAAA,GAAAA,CAAAA;AAEbD,QAAAA,GAAAA,CAAIiB,CAAC,GAAGqE,MAAOrE,CAAAA,CAAC,GAAGsE,MAAAA,CAAAA;AACnBvF,QAAAA,GAAAA,CAAIkB,CAAC,GAAGoE,MAAOpE,CAAAA,CAAC,GAAGqE,MAAAA,CAAAA;AACnBvF,QAAAA,GAAAA,CAAImB,CAAC,GAAGmE,MAAOnE,CAAAA,CAAC,GAAGoE,MAAAA,CAAAA;AACnBtF,QAAAA,GAAAA,CAAIgB,CAAC,GAAGqE,MAAOrE,CAAAA,CAAC,GAAGsE,MAAAA,CAAAA;AACnBtF,QAAAA,GAAAA,CAAIiB,CAAC,GAAGoE,MAAOpE,CAAAA,CAAC,GAAGqE,MAAAA,CAAAA;AACnBtF,QAAAA,GAAAA,CAAIkB,CAAC,GAAGmE,MAAOnE,CAAAA,CAAC,GAAGoE,MAAAA,CAAAA;AACrB,KAAA,CAAA;AAEA;;;;;MArDWQ,WA2DJW,CAAAA,SAiBN,GAjBD,SAAOA,SAAU7D,CAAAA,MAAmB,EAAE8D,MAAc,EAAEzD,GAAgB,EAAQ;;QAE5E,IAAMoC,MAAAA,GAASS,WA7DNA,CA6DkBJ,UAAU,CAAA;QACrC,IAAMkB,MAAAA,GAASd,WA9DNA,CA8DkBoB,UAAU,CAAA;AACrCtE,QAAAA,MAAAA,CAAOmD,SAAS,CAACV,MAAAA,CAAAA,CAAAA;AACjBzC,QAAAA,MAAAA,CAAOoD,SAAS,CAACY,MAAAA,CAAAA,CAAAA;QACjB7F,OAAQwB,CAAAA,mBAAmB,CAAC8C,MAAAA,EAAQqB,MAAQrB,EAAAA,MAAAA,CAAAA,CAAAA;AAE5C,QAAA,IAAQrE,IAAY4F,MAAZ5F,CAAAA,CAAAA,EAAGC,IAAS2F,MAAT3F,CAAAA,CAAAA,EAAGC,IAAM0F,MAAN1F,CAAAA,CAAAA,CAAAA;QACd,IAAMkD,CAAAA,GAAIsC,OAAOrC,QAAQ,CAAA;QACzBuC,MAAO5F,CAAAA,CAAC,GAAGf,IAAAA,CAAKI,GAAG,CAACW,IAAIoD,CAAC,CAAC,CAAE,CAAA,CAAA,GAAInE,IAAKI,CAAAA,GAAG,CAACY,CAAImD,GAAAA,CAAC,CAAC,CAAA,CAAE,CAAInE,GAAAA,IAAAA,CAAKI,GAAG,CAACa,CAAAA,GAAIkD,CAAC,CAAC,CAAE,CAAA,CAAA,CAAA;QACtEwC,MAAO3F,CAAAA,CAAC,GAAGhB,IAAAA,CAAKI,GAAG,CAACW,IAAIoD,CAAC,CAAC,CAAE,CAAA,CAAA,GAAInE,IAAKI,CAAAA,GAAG,CAACY,CAAImD,GAAAA,CAAC,CAAC,CAAA,CAAE,CAAInE,GAAAA,IAAAA,CAAKI,GAAG,CAACa,CAAAA,GAAIkD,CAAC,CAAC,CAAE,CAAA,CAAA,CAAA;QACtEwC,MAAO1F,CAAAA,CAAC,GAAGjB,IAAAA,CAAKI,GAAG,CAACW,IAAIoD,CAAC,CAAC,CAAE,CAAA,CAAA,GAAInE,IAAKI,CAAAA,GAAG,CAACY,CAAImD,GAAAA,CAAC,CAAC,CAAA,CAAE,CAAInE,GAAAA,IAAAA,CAAKI,GAAG,CAACa,CAAAA,GAAIkD,CAAC,CAAC,EAAG,CAAA,CAAA,CAAA;;AAGvErD,QAAAA,OAAAA,CAAQW,QAAQ,CAAC2D,MAAQuB,EAAAA,MAAAA,EAAQ3D,IAAIlD,GAAG,CAAA,CAAA;AACxCgB,QAAAA,OAAAA,CAAQS,GAAG,CAAC6D,MAAQuB,EAAAA,MAAAA,EAAQ3D,IAAIjD,GAAG,CAAA,CAAA;AACrC,KAAA,CAAA;AAEA;;;;;;MA9EW8F,WAqFJqB,CAAAA,KAIN,GAJD,SAAOA,KAAMC,CAAAA,IAAiB,EAAEC,IAAiB,EAAEpE,GAAgB,EAAe;QAChFlC,OAAQhB,CAAAA,GAAG,CAACqH,IAAKrH,CAAAA,GAAG,EAAEsH,IAAKtH,CAAAA,GAAG,EAAEkD,GAAAA,CAAIlD,GAAG,CAAA,CAAA;QACvCgB,OAAQf,CAAAA,GAAG,CAACoH,IAAKpH,CAAAA,GAAG,EAAEqH,IAAKrH,CAAAA,GAAG,EAAEiD,GAAAA,CAAIjD,GAAG,CAAA,CAAA;QACvC,OAAOiD,GAAAA,CAAAA;AACT,KAAA,CAAA;AAzFW6C,IAAAA,OAAAA,WAAAA,CAAAA;AA8LZ,CAAA,GAAA;;AA9LYA,IAAAA,WAAAA,CACIJ,aAAsB,IAAI3E,OAAAA,EAAAA,CAAAA;;;AAD9B+E,IAAAA,WAAAA,CAEIoB,aAAsB,IAAInG,OAAAA,EAAAA,CAAAA;;;ACD3C;;IAGO,IAAMuG,aAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,aAAAA,GAAAA,EAAAA;AAKX;;;;;;AAMC,MACD,aAZWA,CAYJC,4BAmBN,GAnBD,SAAOA,4BAAAA,CAA6BC,EAAS,EAAEC,EAAS,EAAEC,EAAS,EAAEzE,GAAY,EAAQ;QACvF,IAAM0E,KAAAA,GAAQH,GAAGI,MAAM,CAAA;QACvB,IAAMC,KAAAA,GAAQJ,GAAGG,MAAM,CAAA;QACvB,IAAME,KAAAA,GAAQJ,GAAGE,MAAM,CAAA;AAEvB7G,QAAAA,OAAAA,CAAQuC,KAAK,CAACuE,KAAAA,EAAOC,KAAOR,EAjBnBA,cAiBiC5B,UAAU,CAAA,CAAA;AACpD3E,QAAAA,OAAAA,CAAQuC,KAAK,CAACwE,KAAAA,EAAOH,KAAOL,EAlBnBA,cAkBiCJ,UAAU,CAAA,CAAA;AACpDnG,QAAAA,OAAAA,CAAQuC,KAAK,CAACqE,KAAAA,EAAOE,KAAOP,EAnBnBA,cAmBiCS,UAAU,CAAA,CAAA;QAEpD,IAAM5H,CAAAA,GAAI,CAACY,OAAQsC,CAAAA,GAAG,CAACsE,KAAOL,EArBrBA,cAqBmC5B,UAAU,CAAA,CAAA;QACtD,IAAMtF,CAAAA,GAAI,CAACW,OAAQsC,CAAAA,GAAG,CAACwE,KAAOP,EAtBrBA,cAsBmCJ,UAAU,CAAA,CAAA;QACtD,IAAMc,CAAAA,GAAI,CAACjH,OAAQsC,CAAAA,GAAG,CAACyE,KAAOR,EAvBrBA,cAuBmCS,UAAU,CAAA,CAAA;AAEtDhH,QAAAA,OAAAA,CAAQmB,KAAK,CAACoF,aAzBLA,CAyBmB5B,UAAU,EAAE8B,EAAG3D,CAAAA,QAAQ,GAAG1D,CAAAA,EAAGmH,aAzBhDA,CAyB8D5B,UAAU,CAAA,CAAA;AACjF3E,QAAAA,OAAAA,CAAQmB,KAAK,CAACoF,aA1BLA,CA0BmBJ,UAAU,EAAEO,EAAG5D,CAAAA,QAAQ,GAAGzD,CAAAA,EAAGkH,aA1BhDA,CA0B8DJ,UAAU,CAAA,CAAA;AACjFnG,QAAAA,OAAAA,CAAQmB,KAAK,CAACoF,aA3BLA,CA2BmBS,UAAU,EAAEL,EAAG7D,CAAAA,QAAQ,GAAGmE,CAAAA,EAAGV,aA3BhDA,CA2B8DS,UAAU,CAAA,CAAA;QAEjFhH,OAAQS,CAAAA,GAAG,CAAC8F,aA7BHA,CA6BiB5B,UAAU,EA7B3B4B,aA6B2CJ,CAAAA,UAAU,EAAEjE,GAAAA,CAAAA,CAAAA;AAChElC,QAAAA,OAAAA,CAAQS,GAAG,CAACyB,GAAAA,EAAKqE,aA9BRA,CA8BsBS,UAAU,EAAE9E,GAAAA,CAAAA,CAAAA;AAC7C,KAAA,CAAA;AAEA;;;;;MAjCWqE,cAuCJW,qBAEN,GAFD,SAAOA,qBAAsBC,CAAAA,KAAY,EAAEnB,KAAc,EAAU;QACjE,OAAOhG,OAAAA,CAAQsC,GAAG,CAAC6E,KAAAA,CAAMN,MAAM,EAAEb,KAAAA,CAAAA,GAASmB,MAAMrE,QAAQ,CAAA;AAC1D,KAAA,CAAA;AAEA;;;;;MA3CWyD,cAiDJa,uBASN,GATD,SAAOA,uBAAwBD,CAAAA,KAAY,EAAEnB,KAAc,EAAyB;AAClF,QAAA,IAAMlD,QAAWyD,GAlDRA,aAkDsBW,CAAAA,qBAAqB,CAACC,KAAOnB,EAAAA,KAAAA,CAAAA,CAAAA;AAC5D,QAAA,IAAIlD,WAAW,CAAG,EAAA;AAChB,YAAA,OAAO5E,8BAAsBE,KAAK,CAAA;SACnC;AACD,QAAA,IAAI0E,WAAW,CAAG,EAAA;AAChB,YAAA,OAAO5E,8BAAsBC,IAAI,CAAA;SAClC;AACD,QAAA,OAAOD,8BAAsBG,YAAY,CAAA;AAC3C,KAAA,CAAA;AAEA;;;;;MA5DWkI,cAkEJc,qBAqCN,GArCD,SAAOA,qBAAsBF,CAAAA,KAAY,EAAErC,GAAgB,EAAyB;AAClF,QAAA,IAAQ9F,GAAa8F,GAAAA,GAAAA,CAAb9F,GAAKC,EAAAA,GAAAA,GAAQ6F,GAAR7F,CAAAA,GAAAA,CAAAA;QACb,IAAQ4H,SAAWM,KAAXN,CAAAA,MAAAA,CAAAA;QACR,IAAMS,KAAAA,GAAQf,aArELA,CAqEmB5B,UAAU,CAAA;QACtC,IAAM4C,IAAAA,GAAOhB,aAtEJA,CAsEkBJ,UAAU,CAAA;QAErC,IAAIU,MAAAA,CAAO5G,CAAC,IAAI,CAAG,EAAA;YACjBqH,KAAMrH,CAAAA,CAAC,GAAGhB,GAAAA,CAAIgB,CAAC,CAAA;YACfsH,IAAKtH,CAAAA,CAAC,GAAGjB,GAAAA,CAAIiB,CAAC,CAAA;SACT,MAAA;YACLqH,KAAMrH,CAAAA,CAAC,GAAGjB,GAAAA,CAAIiB,CAAC,CAAA;YACfsH,IAAKtH,CAAAA,CAAC,GAAGhB,GAAAA,CAAIgB,CAAC,CAAA;SACf;QACD,IAAI4G,MAAAA,CAAO3G,CAAC,IAAI,CAAG,EAAA;YACjBoH,KAAMpH,CAAAA,CAAC,GAAGjB,GAAAA,CAAIiB,CAAC,CAAA;YACfqH,IAAKrH,CAAAA,CAAC,GAAGlB,GAAAA,CAAIkB,CAAC,CAAA;SACT,MAAA;YACLoH,KAAMpH,CAAAA,CAAC,GAAGlB,GAAAA,CAAIkB,CAAC,CAAA;YACfqH,IAAKrH,CAAAA,CAAC,GAAGjB,GAAAA,CAAIiB,CAAC,CAAA;SACf;QACD,IAAI2G,MAAAA,CAAO1G,CAAC,IAAI,CAAG,EAAA;YACjBmH,KAAMnH,CAAAA,CAAC,GAAGlB,GAAAA,CAAIkB,CAAC,CAAA;YACfoH,IAAKpH,CAAAA,CAAC,GAAGnB,GAAAA,CAAImB,CAAC,CAAA;SACT,MAAA;YACLmH,KAAMnH,CAAAA,CAAC,GAAGnB,GAAAA,CAAImB,CAAC,CAAA;YACfoH,IAAKpH,CAAAA,CAAC,GAAGlB,GAAAA,CAAIkB,CAAC,CAAA;SACf;AAED,QAAA,IAAIoG,aAAcW,CAAAA,qBAAqB,CAACC,KAAAA,EAAOG,SAAS,CAAG,EAAA;AACzD,YAAA,OAAOpJ,8BAAsBC,IAAI,CAAA;SAClC;AAED,QAAA,IAAIoI,aAAcW,CAAAA,qBAAqB,CAACC,KAAAA,EAAOI,QAAQ,CAAG,EAAA;AACxD,YAAA,OAAOrJ,8BAAsBE,KAAK,CAAA;SACnC;AAED,QAAA,OAAOF,8BAAsBG,YAAY,CAAA;AAC3C,KAAA,CAAA;AAEA;;;;;MAzGWkI,cA+GJiB,wBAUN,GAVD,SAAOA,wBAAyBL,CAAAA,KAAY,EAAEjB,MAAsB,EAAyB;AAC3F,QAAA,IAAQ5B,MAAmB4B,GAAAA,MAAAA,CAAnB5B,MAAQC,EAAAA,MAAAA,GAAW2B,MAAX3B,CAAAA,MAAAA,CAAAA;AAChB,QAAA,IAAMzB,QAAWyD,GAjHRA,aAiHsBW,CAAAA,qBAAqB,CAACC,KAAO7C,EAAAA,MAAAA,CAAAA,CAAAA;AAC5D,QAAA,IAAIxB,WAAWyB,MAAQ,EAAA;AACrB,YAAA,OAAOrG,8BAAsBE,KAAK,CAAA;SACnC;QACD,IAAI0E,QAAAA,GAAW,CAACyB,MAAQ,EAAA;AACtB,YAAA,OAAOrG,8BAAsBC,IAAI,CAAA;SAClC;AACD,QAAA,OAAOD,8BAAsBG,YAAY,CAAA;AAC3C,KAAA,CAAA;AAEA;;;;;MA3HWkI,cAiIJkB,qBAsBN,GAtBD,SAAOA,qBAAsBC,CAAAA,GAAQ,EAAEP,KAAY,EAAU;QAC3D,IAAQN,SAAWM,KAAXN,CAAAA,MAAAA,CAAAA;QACR,IAAQtH,gBAAkBV,QAAlBU,CAAAA,aAAAA,CAAAA;AAER,QAAA,IAAMoI,MAAM3H,OAAQsC,CAAAA,GAAG,CAACuE,MAAAA,EAAQa,IAAIE,SAAS,CAAA,CAAA;;AAE7C,QAAA,IAAI1I,IAAKI,CAAAA,GAAG,CAACqI,GAAAA,CAAAA,GAAOpI,aAAe,EAAA;AACjC,YAAA,OAAO,CAAC,CAAA,CAAA;SACT;AAED,QAAA,IAAMsI,WAAW7H,OAAQsC,CAAAA,GAAG,CAACuE,MAAAA,EAAQa,IAAII,MAAM,CAAA,CAAA;QAC/C,IAAIhF,QAAAA,GAAW,CAAC,CAACqE,MAAMrE,QAAQ,GAAG+E,QAAO,IAAKF,GAAAA,CAAAA;AAE9C,QAAA,IAAI7E,WAAW,CAAG,EAAA;YAChB,IAAIA,QAAAA,GAAW,CAACvD,aAAe,EAAA;AAC7B,gBAAA,OAAO,CAAC,CAAA,CAAA;aACT;YAEDuD,QAAW,GAAA,CAAA,CAAA;SACZ;QAED,OAAOA,QAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;MAzJWyD,cA+JJwB,mBAmFN,GAnFD,SAAOA,mBAAoBL,CAAAA,GAAQ,EAAE5C,GAAgB,EAAU;QAC7D,IAAQvF,gBAAkBV,QAAlBU,CAAAA,aAAAA,CAAAA;AACR,QAAA,IAAQuI,MAAsBJ,GAAAA,GAAAA,CAAtBI,MAAQF,EAAAA,SAAAA,GAAcF,GAAdE,CAAAA,SAAAA,CAAAA;AAChB,QAAA,IAAQ5I,GAAa8F,GAAAA,GAAAA,CAAb9F,GAAKC,EAAAA,GAAAA,GAAQ6F,GAAR7F,CAAAA,GAAAA,CAAAA;QACb,IAAM+I,IAAAA,GAAOJ,UAAU3H,CAAC,CAAA;QACxB,IAAMgI,IAAAA,GAAOL,UAAU1H,CAAC,CAAA;QACxB,IAAMgI,IAAAA,GAAON,UAAUzH,CAAC,CAAA;QACxB,IAAMgI,IAAAA,GAAOL,OAAO7H,CAAC,CAAA;QACrB,IAAMmI,IAAAA,GAAON,OAAO5H,CAAC,CAAA;QACrB,IAAMmI,IAAAA,GAAOP,OAAO3H,CAAC,CAAA;AACrB,QAAA,IAAI2C,QAAW,GAAA,CAAA,CAAA;QACf,IAAIwF,IAAAA,GAAOxC,OAAOC,SAAS,CAAA;AAE3B,QAAA,IAAI7G,IAAKI,CAAAA,GAAG,CAAC0I,IAAAA,CAAAA,GAAQzI,aAAe,EAAA;AAClC,YAAA,IAAI4I,OAAOnJ,GAAIiB,CAAAA,CAAC,IAAIkI,IAAOlJ,GAAAA,GAAAA,CAAIgB,CAAC,EAAE;AAChC,gBAAA,OAAO,CAAC,CAAA,CAAA;aACT;SACI,MAAA;AACL,YAAA,IAAMsI,UAAU,GAAMP,GAAAA,IAAAA,CAAAA;AACtB,YAAA,IAAIQ,KAAK,CAACxJ,IAAIiB,CAAC,GAAGkI,IAAG,IAAKI,OAAAA,CAAAA;AAC1B,YAAA,IAAIE,KAAK,CAACxJ,IAAIgB,CAAC,GAAGkI,IAAG,IAAKI,OAAAA,CAAAA;AAE1B,YAAA,IAAIC,KAAKC,EAAI,EAAA;AACX,gBAAA,IAAMC,IAAOF,GAAAA,EAAAA,CAAAA;gBACbA,EAAKC,GAAAA,EAAAA,CAAAA;gBACLA,EAAKC,GAAAA,IAAAA,CAAAA;aACN;YAED5F,QAAW5D,GAAAA,IAAAA,CAAKD,GAAG,CAACuJ,EAAI1F,EAAAA,QAAAA,CAAAA,CAAAA;YACxBwF,IAAOpJ,GAAAA,IAAAA,CAAKF,GAAG,CAACyJ,EAAIH,EAAAA,IAAAA,CAAAA,CAAAA;AAEpB,YAAA,IAAIxF,WAAWwF,IAAM,EAAA;AACnB,gBAAA,OAAO,CAAC,CAAA,CAAA;aACT;SACF;AAED,QAAA,IAAIpJ,IAAKI,CAAAA,GAAG,CAAC2I,IAAAA,CAAAA,GAAQ1I,aAAe,EAAA;AAClC,YAAA,IAAI6I,OAAOpJ,GAAIkB,CAAAA,CAAC,IAAIkI,IAAOnJ,GAAAA,GAAAA,CAAIiB,CAAC,EAAE;AAChC,gBAAA,OAAO,CAAC,CAAA,CAAA;aACT;SACI,MAAA;AACL,YAAA,IAAMqI,WAAU,GAAMN,GAAAA,IAAAA,CAAAA;AACtB,YAAA,IAAIO,MAAK,CAACxJ,IAAIkB,CAAC,GAAGkI,IAAG,IAAKG,QAAAA,CAAAA;AAC1B,YAAA,IAAIE,MAAK,CAACxJ,IAAIiB,CAAC,GAAGkI,IAAG,IAAKG,QAAAA,CAAAA;AAE1B,YAAA,IAAIC,MAAKC,GAAI,EAAA;AACX,gBAAA,IAAMC,KAAOF,GAAAA,GAAAA,CAAAA;gBACbA,GAAKC,GAAAA,GAAAA,CAAAA;gBACLA,GAAKC,GAAAA,KAAAA,CAAAA;aACN;YAED5F,QAAW5D,GAAAA,IAAAA,CAAKD,GAAG,CAACuJ,GAAI1F,EAAAA,QAAAA,CAAAA,CAAAA;YACxBwF,IAAOpJ,GAAAA,IAAAA,CAAKF,GAAG,CAACyJ,GAAIH,EAAAA,IAAAA,CAAAA,CAAAA;AAEpB,YAAA,IAAIxF,WAAWwF,IAAM,EAAA;AACnB,gBAAA,OAAO,CAAC,CAAA,CAAA;aACT;SACF;AAED,QAAA,IAAIpJ,IAAKI,CAAAA,GAAG,CAAC4I,IAAAA,CAAAA,GAAQ3I,aAAe,EAAA;AAClC,YAAA,IAAI8I,OAAOrJ,GAAImB,CAAAA,CAAC,IAAIkI,IAAOpJ,GAAAA,GAAAA,CAAIkB,CAAC,EAAE;AAChC,gBAAA,OAAO,CAAC,CAAA,CAAA;aACT;SACI,MAAA;AACL,YAAA,IAAMoI,WAAU,GAAML,GAAAA,IAAAA,CAAAA;AACtB,YAAA,IAAIM,MAAK,CAACxJ,IAAImB,CAAC,GAAGkI,IAAG,IAAKE,QAAAA,CAAAA;AAC1B,YAAA,IAAIE,MAAK,CAACxJ,IAAIkB,CAAC,GAAGkI,IAAG,IAAKE,QAAAA,CAAAA;AAE1B,YAAA,IAAIC,MAAKC,GAAI,EAAA;AACX,gBAAA,IAAMC,KAAOF,GAAAA,GAAAA,CAAAA;gBACbA,GAAKC,GAAAA,GAAAA,CAAAA;gBACLA,GAAKC,GAAAA,KAAAA,CAAAA;aACN;YAED5F,QAAW5D,GAAAA,IAAAA,CAAKD,GAAG,CAACuJ,GAAI1F,EAAAA,QAAAA,CAAAA,CAAAA;YACxBwF,IAAOpJ,GAAAA,IAAAA,CAAKF,GAAG,CAACyJ,GAAIH,EAAAA,IAAAA,CAAAA,CAAAA;AAEpB,YAAA,IAAIxF,WAAWwF,IAAM,EAAA;AACnB,gBAAA,OAAO,CAAC,CAAA,CAAA;aACT;SACF;QAED,OAAOxF,QAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;MApPWyD,cA0PJoC,sBAwBN,GAxBD,SAAOA,sBAAuBjB,CAAAA,GAAQ,EAAExB,MAAsB,EAAU;AACtE,QAAA,IAAQ4B,MAAsBJ,GAAAA,GAAAA,CAAtBI,MAAQF,EAAAA,SAAAA,GAAcF,GAAdE,CAAAA,SAAAA,CAAAA;AAChB,QAAA,IAAQtD,MAAmB4B,GAAAA,MAAAA,CAAnB5B,MAAQC,EAAAA,MAAAA,GAAW2B,MAAX3B,CAAAA,MAAAA,CAAAA;QAEhB,IAAMjD,CAAAA,GAAIiF,aA9PDA,CA8Pe5B,UAAU,CAAA;QAClC3E,OAAQW,CAAAA,QAAQ,CAACmH,MAAAA,EAAQxD,MAAQhD,EAAAA,CAAAA,CAAAA,CAAAA;AACjC,QAAA,IAAMjC,CAAIW,GAAAA,OAAAA,CAAQsC,GAAG,CAAChB,CAAGsG,EAAAA,SAAAA,CAAAA,CAAAA;AACzB,QAAA,IAAMX,IAAIjH,OAAQsC,CAAAA,GAAG,CAAChB,CAAAA,EAAGA,KAAKiD,MAASA,GAAAA,MAAAA,CAAAA;QAEvC,IAAIlF,CAAAA,GAAI,CAAK4H,IAAAA,CAAAA,GAAI,CAAG,EAAA;AAClB,YAAA,OAAO,CAAC,CAAA,CAAA;SACT;QAED,IAAI2B,YAAAA,GAAevJ,IAAIA,CAAI4H,GAAAA,CAAAA,CAAAA;AAC3B,QAAA,IAAI2B,eAAe,CAAG,EAAA;AACpB,YAAA,OAAO,CAAC,CAAA,CAAA;SACT;AAED,QAAA,IAAI9F,QAAW,GAAA,CAACzD,CAAIH,GAAAA,IAAAA,CAAK6B,IAAI,CAAC6H,YAAAA,CAAAA,CAAAA;AAC9B,QAAA,IAAI9F,WAAW,CAAG,EAAA;YAChBA,QAAW,GAAA,CAAA,CAAA;SACZ;QAED,OAAOA,QAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;MApRWyD,cA0RJsC,mBAUN,GAVD,SAAOA,mBAAoBC,CAAAA,IAAiB,EAAEC,IAAiB,EAAW;AACxE,QAAA,IAAID,KAAK9J,GAAG,CAACiB,CAAC,GAAG8I,IAAAA,CAAK9J,GAAG,CAACgB,CAAC,IAAI8I,IAAK/J,CAAAA,GAAG,CAACiB,CAAC,GAAG6I,KAAK7J,GAAG,CAACgB,CAAC,EAAE;AACtD,YAAA,OAAO,KAAK,CAAA;SACb;AAED,QAAA,IAAI6I,KAAK9J,GAAG,CAACkB,CAAC,GAAG6I,IAAAA,CAAK9J,GAAG,CAACiB,CAAC,IAAI6I,IAAK/J,CAAAA,GAAG,CAACkB,CAAC,GAAG4I,KAAK7J,GAAG,CAACiB,CAAC,EAAE;AACtD,YAAA,OAAO,KAAK,CAAA;SACb;QAED,OAAO,EAAE4I,IAAK9J,CAAAA,GAAG,CAACmB,CAAC,GAAG4I,KAAK9J,GAAG,CAACkB,CAAC,IAAI4I,IAAAA,CAAK/J,GAAG,CAACmB,CAAC,GAAG2I,IAAK7J,CAAAA,GAAG,CAACkB,CAAC,CAADA,CAAAA;AAC5D,KAAA,CAAA;AAEA;;;;;MAtSWoG,cA4SJyC,yBAGN,GAHD,SAAOA,yBAA0BC,CAAAA,OAAuB,EAAEC,OAAuB,EAAW;AAC1F,QAAA,IAAMC,QAAWF,GAAAA,OAAAA,CAAQ1E,MAAM,GAAG2E,QAAQ3E,MAAM,CAAA;QAChD,OAAOvE,OAAAA,CAAQ+C,eAAe,CAACkG,OAAAA,CAAQ3E,MAAM,EAAE4E,OAAAA,CAAQ5E,MAAM,CAAA,GAAI6E,QAAWA,GAAAA,QAAAA,CAAAA;AAC9E,KAAA,CAAA;AAEA;;;;;MAjTW5C,cAuTJ6C,sBAcN,GAdD,SAAOA,sBAAuBlD,CAAAA,MAAsB,EAAEpB,GAAgB,EAAW;QAC/E,IAAMR,MAAAA,GAAS4B,OAAO5B,MAAM,CAAA;QAC5B,IAAMrF,GAAAA,GAAM6F,IAAI7F,GAAG,CAAA;QACnB,IAAMD,GAAAA,GAAM8F,IAAI9F,GAAG,CAAA;QAEnB,IAAMqK,YAAAA,GAAe9C,aA5TZA,CA4T0B5B,UAAU,CAAA;QAC7C0E,YAAa7I,CAAAA,GAAG,CACdtB,IAAKD,CAAAA,GAAG,CAACD,GAAIiB,CAAAA,CAAC,EAAEf,IAAKF,CAAAA,GAAG,CAACsF,MAAOrE,CAAAA,CAAC,EAAEhB,GAAIgB,CAAAA,CAAC,IACxCf,IAAKD,CAAAA,GAAG,CAACD,GAAIkB,CAAAA,CAAC,EAAEhB,IAAKF,CAAAA,GAAG,CAACsF,MAAOpE,CAAAA,CAAC,EAAEjB,GAAIiB,CAAAA,CAAC,IACxChB,IAAKD,CAAAA,GAAG,CAACD,GAAImB,CAAAA,CAAC,EAAEjB,IAAKF,CAAAA,GAAG,CAACsF,MAAOnE,CAAAA,CAAC,EAAElB,GAAAA,CAAIkB,CAAC,CAAA,CAAA,CAAA,CAAA;AAG1C,QAAA,IAAM2C,QAAW9C,GAAAA,OAAAA,CAAQ+C,eAAe,CAACuB,MAAQ+E,EAAAA,YAAAA,CAAAA,CAAAA;AACjD,QAAA,OAAOvG,QAAYoD,IAAAA,MAAAA,CAAO3B,MAAM,GAAG2B,OAAO3B,MAAM,CAAA;AAClD,KAAA,CAAA;AAEA;;;;;MAvUWgC,cA6UJ+C,uBAeN,GAfD,SAAOA,uBAAwBC,CAAAA,OAAwB,EAAEzE,GAAgB,EAAW;AAClF,QAAA,IAAQ9F,GAAa8F,GAAAA,GAAAA,CAAb9F,GAAKC,EAAAA,GAAAA,GAAQ6F,GAAR7F,CAAAA,GAAAA,CAAAA;QACb,IAAMuK,CAAAA,GAAIjD,aA/UDA,CA+Ue5B,UAAU,CAAA;AAElC,QAAA,IAAK,IAAIC,CAAI,GAAA,CAAA,EAAGA,CAAI,GAAA,CAAA,EAAG,EAAEA,CAAG,CAAA;YAC1B,IAAMuC,KAAAA,GAAQoC,OAAQE,CAAAA,QAAQ,CAAC7E,CAAAA,CAAAA,CAAAA;YAC/B,IAAMiC,MAAAA,GAASM,MAAMN,MAAM,CAAA;AAE3B2C,YAAAA,CAAAA,CAAEhJ,GAAG,CAACqG,MAAO5G,CAAAA,CAAC,IAAI,CAAA,GAAIhB,GAAIgB,CAAAA,CAAC,GAAGjB,GAAAA,CAAIiB,CAAC,EAAE4G,OAAO3G,CAAC,IAAI,CAAIjB,GAAAA,GAAAA,CAAIiB,CAAC,GAAGlB,GAAIkB,CAAAA,CAAC,EAAE2G,MAAAA,CAAO1G,CAAC,IAAI,CAAIlB,GAAAA,GAAAA,CAAIkB,CAAC,GAAGnB,IAAImB,CAAC,CAAA,CAAA;YACjG,IAAIH,OAAAA,CAAQsC,GAAG,CAACuE,MAAAA,EAAQ2C,KAAK,CAACrC,KAAAA,CAAMrE,QAAQ,EAAE;AAC5C,gBAAA,OAAO,KAAK,CAAA;aACb;AACH,SAAA;AAEA,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;;MA9VWyD,cAoWJmD,kBA0CN,GA1CD,SAAOA,kBAAmBH,CAAAA,OAAwB,EAAEzE,GAAgB,EAAmB;AACrF,QAAA,IAAQ9F,GAAa8F,GAAAA,GAAAA,CAAb9F,GAAKC,EAAAA,GAAAA,GAAQ6F,GAAR7F,CAAAA,GAAAA,CAAAA;QACb,IAAMuK,CAAAA,GAAIjD,aAtWDA,CAsWe5B,UAAU,CAAA;QAClC,IAAMgF,CAAAA,GAAIpD,aAvWDA,CAuWeJ,UAAU,CAAA;QAClC,IAAIyD,MAAAA,GAAS9L,wBAAgBE,QAAQ,CAAA;AAErC,QAAA,IAAK,IAAI4G,CAAI,GAAA,CAAA,EAAGA,CAAI,GAAA,CAAA,EAAG,EAAEA,CAAG,CAAA;YAC1B,IAAMuC,KAAAA,GAAQoC,OAAQE,CAAAA,QAAQ,CAAC7E,CAAAA,CAAAA,CAAAA;YAC/B,IAAMiC,MAAAA,GAASM,MAAMN,MAAM,CAAA;YAE3B,IAAIA,MAAAA,CAAO5G,CAAC,IAAI,CAAG,EAAA;gBACjBuJ,CAAEvJ,CAAAA,CAAC,GAAGhB,GAAAA,CAAIgB,CAAC,CAAA;gBACX0J,CAAE1J,CAAAA,CAAC,GAAGjB,GAAAA,CAAIiB,CAAC,CAAA;aACN,MAAA;gBACLuJ,CAAEvJ,CAAAA,CAAC,GAAGjB,GAAAA,CAAIiB,CAAC,CAAA;gBACX0J,CAAE1J,CAAAA,CAAC,GAAGhB,GAAAA,CAAIgB,CAAC,CAAA;aACZ;YACD,IAAI4G,MAAAA,CAAO3G,CAAC,IAAI,CAAG,EAAA;gBACjBsJ,CAAEtJ,CAAAA,CAAC,GAAGjB,GAAAA,CAAIiB,CAAC,CAAA;gBACXyJ,CAAEzJ,CAAAA,CAAC,GAAGlB,GAAAA,CAAIkB,CAAC,CAAA;aACN,MAAA;gBACLsJ,CAAEtJ,CAAAA,CAAC,GAAGlB,GAAAA,CAAIkB,CAAC,CAAA;gBACXyJ,CAAEzJ,CAAAA,CAAC,GAAGjB,GAAAA,CAAIiB,CAAC,CAAA;aACZ;YACD,IAAI2G,MAAAA,CAAO1G,CAAC,IAAI,CAAG,EAAA;gBACjBqJ,CAAErJ,CAAAA,CAAC,GAAGlB,GAAAA,CAAIkB,CAAC,CAAA;gBACXwJ,CAAExJ,CAAAA,CAAC,GAAGnB,GAAAA,CAAImB,CAAC,CAAA;aACN,MAAA;gBACLqJ,CAAErJ,CAAAA,CAAC,GAAGnB,GAAAA,CAAImB,CAAC,CAAA;gBACXwJ,CAAExJ,CAAAA,CAAC,GAAGlB,GAAAA,CAAIkB,CAAC,CAAA;aACZ;YAED,IApYOoG,cAoYWa,uBAAuB,CAACD,OAAOqC,CAAOtL,CAAAA,KAAAA,6BAAAA,CAAsBC,IAAI,EAAE;AAClF,gBAAA,OAAOL,wBAAgBC,QAAQ,CAAA;aAChC;YAED,IAxYOwI,cAwYWa,uBAAuB,CAACD,OAAOwC,CAAOzL,CAAAA,KAAAA,6BAAAA,CAAsBC,IAAI,EAAE;AAClFyL,gBAAAA,MAAAA,GAAS9L,wBAAgBG,UAAU,CAAA;aACpC;AACH,SAAA;QAEA,OAAO2L,MAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;MAhZWrD,cAsZJsD,qBAeN,GAfD,SAAOA,qBAAsBN,CAAAA,OAAwB,EAAErD,MAAsB,EAAmB;QAC9F,IAAI0D,MAAAA,GAAS9L,wBAAgBE,QAAQ,CAAA;AAErC,QAAA,IAAK,IAAI4G,CAAI,GAAA,CAAA,EAAGA,CAAI,GAAA,CAAA,EAAG,EAAEA,CAAG,CAAA;YAC1B,IAAMuC,KAAAA,GAAQoC,OAAQE,CAAAA,QAAQ,CAAC7E,CAAAA,CAAAA,CAAAA;AAC/B,YAAA,IAAMkF,gBAAmBvD,GA3ZlBA,aA2ZgCiB,CAAAA,wBAAwB,CAACL,KAAOjB,EAAAA,MAAAA,CAAAA,CAAAA;YACvE,IAAI4D,gBAAAA,KAAqB5L,6BAAsBC,CAAAA,IAAI,EAAE;AACnD,gBAAA,OAAOL,wBAAgBC,QAAQ,CAAA;AACjC,aAAA,MAAO,IAAI+L,gBAAAA,KAAqB5L,6BAAsBG,CAAAA,YAAY,EAAE;AAClEuL,gBAAAA,MAAAA,GAAS9L,wBAAgBG,UAAU,CAAA;gBACnC,MAAM;aACP;AACH,SAAA;QAEA,OAAO2L,MAAAA,CAAAA;AACT,KAAA,CAAA;AAraWrD,IAAAA,OAAAA,aAAAA,CAAAA;AAsaZ,CAAA,GAAA;;AAtaYA,IAAAA,aAAAA,CACI5B,aAAsB,IAAI3E,OAAAA,EAAAA,CAAAA;;;AAD9BuG,IAAAA,aAAAA,CAEIJ,aAAsB,IAAInG,OAAAA,EAAAA,CAAAA;;;AAF9BuG,IAAAA,aAAAA,CAGIS,aAAsB,IAAIhH,OAAAA,EAAAA,CAAAA;;;ACZ3C;;IAGO,IAAM+J,KAAN,iBAAA,WAAA;aAAMA,KA0DClD,CAAAA,MAAsB,EAAE/D,QAAoB,EAAA;QAA5C+D,IAAAA,MAAAA,KAAAA,KAAAA,CAAAA,EAAAA,SAAkB,IAAI,CAAA;AAAE/D,QAAAA,IAAAA,qBAAAA,QAAmB,GAAA,CAAA,CAAA;wCAV1B,IAAA,CACb+D,SAAkB,IAAI7G,OAAAA,EAAAA,CAAAA;AACtC,8EACO8C,QAAmB,GAAA,CAAA,CAAA;AAQxB+D,QAAAA,MAAAA,IAAU,IAAI,CAACA,MAAM,CAACjF,QAAQ,CAACiF,MAAAA,CAAAA,CAAAA;QAC/B,IAAI,CAAC/D,QAAQ,GAAGA,QAAAA,CAAAA;;AA5DPiH,IAAAA,IAAAA,MAAAA,GAAAA,KAAAA,CAAAA,SAAAA,CAAAA;AA+DX;;;AAGC,MACD7I,MAAAA,CAAAA,SAGC,GAHDA,SAAAA,SAAmB,GAAA;AAnER6I,QAAAA,KAAAA,CAoEH7I,SAAS,CAAC,IAAI,EAAE,IAAI,CAAA,CAAA;AAC1B,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACDS,MAAAA,CAAAA,KAIC,GAJDA,SAAAA,KAAe,GAAA;AACb,QAAA,IAAMO,MAAM,IA7EH6H,KAAAA,EAAAA,CAAAA;QA8ET7H,GAAIN,CAAAA,QAAQ,CAAC,IAAI,CAAA,CAAA;QACjB,OAAOM,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACDN,OAAAA,QAIC,GAJDA,SAAAA,QAAAA,CAASC,MAAa,EAAS;AAC7B,QAAA,IAAI,CAACgF,MAAM,CAACjF,QAAQ,CAACC,OAAOgF,MAAM,CAAA,CAAA;AAClC,QAAA,IAAI,CAAC/D,QAAQ,GAAGjB,MAAAA,CAAOiB,QAAQ,CAAA;AAC/B,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AA1FA;;;;MADWiH,MAMJ7I,SAMN,GAND,SAAOA,SAAUsI,CAAAA,CAAQ,EAAEtH,GAAU,EAAQ;QAC3C,IAAQ2E,SAAW2C,CAAX3C,CAAAA,MAAAA,CAAAA;QAER,IAAMmD,MAAAA,GAAS,GAAMnD,GAAAA,MAAAA,CAAO/F,MAAM,EAAA,CAAA;AAClCd,QAAAA,OAAAA,CAAQmB,KAAK,CAAC0F,MAAQmD,EAAAA,MAAAA,EAAQ9H,IAAI2E,MAAM,CAAA,CAAA;AACxC3E,QAAAA,GAAAA,CAAIY,QAAQ,GAAG0G,CAAE1G,CAAAA,QAAQ,GAAGkH,MAAAA,CAAAA;AAC9B,KAAA,CAAA;AAEA;;;;;;AAMC,MACD,KArBWD,CAqBJvF,UAyBN,GAzBD,SAAOA,UAAAA,CAAWyF,MAAe,EAAEC,MAAe,EAAEC,MAAe,EAAEjI,GAAU,EAAQ;QACrF,IAAMkI,EAAAA,GAAKH,OAAOhK,CAAC,CAAA;QACnB,IAAMoK,EAAAA,GAAKJ,OAAO/J,CAAC,CAAA;QACnB,IAAMoK,EAAAA,GAAKL,OAAO9J,CAAC,CAAA;QACnB,IAAMoK,EAAAA,GAAKL,MAAOjK,CAAAA,CAAC,GAAGmK,EAAAA,CAAAA;QACtB,IAAMI,EAAAA,GAAKN,MAAOhK,CAAAA,CAAC,GAAGmK,EAAAA,CAAAA;QACtB,IAAMI,EAAAA,GAAKP,MAAO/J,CAAAA,CAAC,GAAGmK,EAAAA,CAAAA;QACtB,IAAMI,EAAAA,GAAKP,MAAOlK,CAAAA,CAAC,GAAGmK,EAAAA,CAAAA;QACtB,IAAMO,EAAAA,GAAKR,MAAOjK,CAAAA,CAAC,GAAGmK,EAAAA,CAAAA;QACtB,IAAMO,EAAAA,GAAKT,MAAOhK,CAAAA,CAAC,GAAGmK,EAAAA,CAAAA;QACtB,IAAMO,EAAAA,GAAKL,EAAKI,GAAAA,EAAAA,GAAKH,EAAKE,GAAAA,EAAAA,CAAAA;QAC1B,IAAMG,EAAAA,GAAKL,EAAKC,GAAAA,EAAAA,GAAKH,EAAKK,GAAAA,EAAAA,CAAAA;QAC1B,IAAMG,EAAAA,GAAKR,EAAKI,GAAAA,EAAAA,GAAKH,EAAKE,GAAAA,EAAAA,CAAAA;QAC1B,IAAMM,OAAAA,GAAU,MAAM9L,IAAK6B,CAAAA,IAAI,CAAC8J,EAAKA,GAAAA,EAAAA,GAAKC,EAAKA,GAAAA,EAAAA,GAAKC,EAAKA,GAAAA,EAAAA,CAAAA,CAAAA;AAEzD,QAAA,IAAM9K,IAAI4K,EAAKG,GAAAA,OAAAA,CAAAA;AACf,QAAA,IAAM9K,IAAI4K,EAAKE,GAAAA,OAAAA,CAAAA;AACf,QAAA,IAAM7K,IAAI4K,EAAKC,GAAAA,OAAAA,CAAAA;QAEf,IAAQnE,SAAW3E,GAAX2E,CAAAA,MAAAA,CAAAA;AACRA,QAAAA,MAAAA,CAAO5G,CAAC,GAAGA,CAAAA,CAAAA;AACX4G,QAAAA,MAAAA,CAAO3G,CAAC,GAAGA,CAAAA,CAAAA;AACX2G,QAAAA,MAAAA,CAAO1G,CAAC,GAAGA,CAAAA,CAAAA;QAEX+B,GAAIY,CAAAA,QAAQ,GAAG,EAAE7C,IAAImK,EAAKlK,GAAAA,CAAAA,GAAImK,EAAKlK,GAAAA,CAAAA,GAAImK,EAAC,CAAA,CAAA;AAC1C,KAAA,CAAA;AA9CWP,IAAAA,OAAAA,KAAAA,CAAAA;AA4FZ,CAAA;;ACzFD;;AAEC,IACM,IAAA,eAAMkB,4BAAN;AAAMA,IAAAA,SAAAA,eAAAA,CAkBCtF,MAAqB,EAAA;QAArBA,IAAAA,MAAAA,KAAAA,KAAAA,CAAAA,EAAAA,SAAiB,IAAI,CAAA;QAC/B,IAAI,CAACuF,IAAI,GAAG,IAAInB,KAAAA,EAAAA,CAAAA;QAChB,IAAI,CAACoB,GAAG,GAAG,IAAIpB,KAAAA,EAAAA,CAAAA;QACf,IAAI,CAAC1H,IAAI,GAAG,IAAI0H,KAAAA,EAAAA,CAAAA;QAChB,IAAI,CAACrJ,KAAK,GAAG,IAAIqJ,KAAAA,EAAAA,CAAAA;QACjB,IAAI,CAACqB,GAAG,GAAG,IAAIrB,KAAAA,EAAAA,CAAAA;QACf,IAAI,CAACsB,MAAM,GAAG,IAAItB,KAAAA,EAAAA,CAAAA;QAElBpE,MAAU,IAAA,IAAI,CAAC2F,mBAAmB,CAAC3F,MAAAA,CAAAA,CAAAA;;AA1B1BsF,IAAAA,IAAAA,MAAAA,GAAAA,eAAAA,CAAAA,SAAAA,CAAAA;AA6BX;;;;AAIC,MACDxB,OAAAA,QAiBC,GAjBDA,SAAAA,QAAAA,CAAS8B,IAAiB,EAAS;QACjC,OAAQA,IAAAA;AACN,YAAA,KAAKjN,oBAAYC,IAAI;gBACnB,OAAO,IAAI,CAAC2M,IAAI,CAAA;AAClB,YAAA,KAAK5M,oBAAYE,GAAG;gBAClB,OAAO,IAAI,CAAC2M,GAAG,CAAA;AACjB,YAAA,KAAK7M,oBAAYG,IAAI;gBACnB,OAAO,IAAI,CAAC4D,IAAI,CAAA;AAClB,YAAA,KAAK/D,oBAAYI,KAAK;gBACpB,OAAO,IAAI,CAACgC,KAAK,CAAA;AACnB,YAAA,KAAKpC,oBAAYK,MAAM;gBACrB,OAAO,IAAI,CAAC0M,MAAM,CAAA;AACpB,YAAA,KAAK/M,oBAAYM,GAAG;gBAClB,OAAO,IAAI,CAACwM,GAAG,CAAA;AACjB,YAAA;AACE,gBAAA,OAAO,IAAI,CAAA;AACf,SAAA;AACF,KAAA,CAAA;AAEA;;;AAGC,MACD,OAAOE,mBAuDN,GAvDD,SAAOA,mBAAAA,CAAoB3F,MAAc,EAAQ;QAC/C,IAAM6F,EAAAA,GAAK7F,OAAOrC,QAAQ,CAAA;QAC1B,IAAMmI,GAAAA,GAAMD,EAAE,CAAC,CAAE,CAAA,CAAA;QACjB,IAAME,GAAAA,GAAMF,EAAE,CAAC,CAAE,CAAA,CAAA;QACjB,IAAMG,GAAAA,GAAMH,EAAE,CAAC,CAAE,CAAA,CAAA;QACjB,IAAMI,GAAAA,GAAMJ,EAAE,CAAC,CAAE,CAAA,CAAA;QACjB,IAAMK,GAAAA,GAAML,EAAE,CAAC,CAAE,CAAA,CAAA;QACjB,IAAMM,GAAAA,GAAMN,EAAE,CAAC,CAAE,CAAA,CAAA;QACjB,IAAMO,GAAAA,GAAMP,EAAE,CAAC,CAAE,CAAA,CAAA;QACjB,IAAMQ,GAAAA,GAAMR,EAAE,CAAC,CAAE,CAAA,CAAA;QACjB,IAAMS,GAAAA,GAAMT,EAAE,CAAC,CAAE,CAAA,CAAA;QACjB,IAAMU,GAAAA,GAAMV,EAAE,CAAC,CAAE,CAAA,CAAA;QACjB,IAAMW,GAAAA,GAAMX,EAAE,CAAC,EAAG,CAAA,CAAA;QAClB,IAAMY,GAAAA,GAAMZ,EAAE,CAAC,EAAG,CAAA,CAAA;QAClB,IAAMa,GAAAA,GAAMb,EAAE,CAAC,EAAG,CAAA,CAAA;QAClB,IAAMc,GAAAA,GAAMd,EAAE,CAAC,EAAG,CAAA,CAAA;QAClB,IAAMe,GAAAA,GAAMf,EAAE,CAAC,EAAG,CAAA,CAAA;QAClB,IAAMgB,GAAAA,GAAMhB,EAAE,CAAC,EAAG,CAAA,CAAA;;AAGlB,QAAA,IAAMiB,UAAa,GAAA,IAAI,CAACvB,IAAI,CAACrE,MAAM,CAAA;AACnC4F,QAAAA,UAAAA,CAAWjM,GAAG,CAACoL,GAAAA,GAAMD,GAAKK,EAAAA,GAAAA,GAAMD,KAAKK,GAAMD,GAAAA,GAAAA,CAAAA,CAAAA;AAC3C,QAAA,IAAI,CAACjB,IAAI,CAACpI,QAAQ,GAAG0J,GAAMD,GAAAA,GAAAA,CAAAA;QAC3B,IAAI,CAACrB,IAAI,CAAChK,SAAS,EAAA,CAAA;;AAGnB,QAAA,IAAMwL,SAAY,GAAA,IAAI,CAACvB,GAAG,CAACtE,MAAM,CAAA;AACjC6F,QAAAA,SAAAA,CAAUlM,GAAG,CAACoL,GAAAA,GAAMD,GAAKK,EAAAA,GAAAA,GAAMD,KAAKK,GAAMD,GAAAA,GAAAA,CAAAA,CAAAA;AAC1C,QAAA,IAAI,CAAChB,GAAG,CAACrI,QAAQ,GAAG0J,GAAMD,GAAAA,GAAAA,CAAAA;QAE1B,IAAI,CAACpB,GAAG,CAACjK,SAAS,EAAA,CAAA;;AAGlB,QAAA,IAAMyL,UAAa,GAAA,IAAI,CAACtK,IAAI,CAACwE,MAAM,CAAA;AACnC8F,QAAAA,UAAAA,CAAWnM,GAAG,CAACoL,GAAAA,GAAMH,GAAKO,EAAAA,GAAAA,GAAMH,KAAKO,GAAMH,GAAAA,GAAAA,CAAAA,CAAAA;AAC3C,QAAA,IAAI,CAAC5J,IAAI,CAACS,QAAQ,GAAG0J,GAAMH,GAAAA,GAAAA,CAAAA;QAC3B,IAAI,CAAChK,IAAI,CAACnB,SAAS,EAAA,CAAA;;AAGnB,QAAA,IAAM0L,WAAc,GAAA,IAAI,CAAClM,KAAK,CAACmG,MAAM,CAAA;AACrC+F,QAAAA,WAAAA,CAAYpM,GAAG,CAACoL,GAAAA,GAAMH,GAAKO,EAAAA,GAAAA,GAAMH,KAAKO,GAAMH,GAAAA,GAAAA,CAAAA,CAAAA;AAC5C,QAAA,IAAI,CAACvL,KAAK,CAACoC,QAAQ,GAAG0J,GAAMH,GAAAA,GAAAA,CAAAA;QAC5B,IAAI,CAAC3L,KAAK,CAACQ,SAAS,EAAA,CAAA;;AAGpB,QAAA,IAAM2L,YAAe,GAAA,IAAI,CAACxB,MAAM,CAACxE,MAAM,CAAA;AACvCgG,QAAAA,YAAAA,CAAarM,GAAG,CAACoL,GAAAA,GAAMF,GAAKM,EAAAA,GAAAA,GAAMF,KAAKM,GAAMF,GAAAA,GAAAA,CAAAA,CAAAA;AAC7C,QAAA,IAAI,CAACb,MAAM,CAACvI,QAAQ,GAAG0J,GAAMF,GAAAA,GAAAA,CAAAA;QAC7B,IAAI,CAACjB,MAAM,CAACnK,SAAS,EAAA,CAAA;;AAGrB,QAAA,IAAM4L,SAAY,GAAA,IAAI,CAAC1B,GAAG,CAACvE,MAAM,CAAA;AACjCiG,QAAAA,SAAAA,CAAUtM,GAAG,CAACoL,GAAAA,GAAMF,GAAKM,EAAAA,GAAAA,GAAMF,KAAKM,GAAMF,GAAAA,GAAAA,CAAAA,CAAAA;AAC1C,QAAA,IAAI,CAACd,GAAG,CAACtI,QAAQ,GAAG0J,GAAMF,GAAAA,GAAAA,CAAAA;QAC1B,IAAI,CAAClB,GAAG,CAAClK,SAAS,EAAA,CAAA;AACpB,KAAA,CAAA;AAEA;;;;AAIC,MACD,OAAO6L,aAEN,GAFD,SAAOA,aAAAA,CAAcjI,GAAgB,EAAW;AAC9C,QAAA,OAAOyB,aAAc+C,CAAAA,uBAAuB,CAAC,IAAI,EAAExE,GAAAA,CAAAA,CAAAA;AACrD,KAAA,CAAA;AAEA;;;;AAIC,MACD,OAAOkI,gBAEN,GAFD,SAAOA,gBAAAA,CAAiB9G,MAAsB,EAAW;AACvD,QAAA,OAAOK,cAAcsD,qBAAqB,CAAC,IAAI,EAAE3D,MAAAA,CAAAA,KAAYpI,wBAAgBC,QAAQ,CAAA;AACvF,KAAA,CAAA;AAEA;;;AAGC,MACD4D,MAAAA,CAAAA,KAIC,GAJDA,SAAAA,KAAyB,GAAA;AACvB,QAAA,IAAMO,MAAM,IAzIH+I,eAAAA,EAAAA,CAAAA;QA0IT/I,GAAIN,CAAAA,QAAQ,CAAC,IAAI,CAAA,CAAA;QACjB,OAAOM,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACDN,OAAAA,QAQC,GARDA,SAAAA,QAAAA,CAASC,MAAuB,EAAmB;AACjD,QAAA,IAAI,CAACqJ,IAAI,CAACtJ,QAAQ,CAACC,OAAOqJ,IAAI,CAAA,CAAA;AAC9B,QAAA,IAAI,CAACC,GAAG,CAACvJ,QAAQ,CAACC,OAAOsJ,GAAG,CAAA,CAAA;AAC5B,QAAA,IAAI,CAAC9I,IAAI,CAACT,QAAQ,CAACC,OAAOQ,IAAI,CAAA,CAAA;AAC9B,QAAA,IAAI,CAAC3B,KAAK,CAACkB,QAAQ,CAACC,OAAOnB,KAAK,CAAA,CAAA;AAChC,QAAA,IAAI,CAAC2K,MAAM,CAACzJ,QAAQ,CAACC,OAAOwJ,MAAM,CAAA,CAAA;AAClC,QAAA,IAAI,CAACD,GAAG,CAACxJ,QAAQ,CAACC,OAAOuJ,GAAG,CAAA,CAAA;AAC5B,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AA3JWH,IAAAA,OAAAA,eAAAA,CAAAA;AA4JZ,CAAA;;AClKD;;IAGO,IAAMgC,SAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,SAAAA,CAsdTxB,GAAe,EACfC,GAAe,EACfC,GAAe,EACfE,GAAe,EACfC,GAAe,EACfC,GAAe,EACfE,GAAe,EACfC,GAAe,EACfC,GAAe,EAAA;AARfV,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdE,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdE,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AAhChB;;;;;;;;MASA7I,IAAAA,CAAAA,QAAAA,GAAyB,IAAI4J,YAAa,CAAA,CAAA,CAAA,CAAA;QAyBxC,IAAM7J,CAAAA,GAAkB,IAAI,CAACC,QAAQ,CAAA;QAErCD,CAAC,CAAC,EAAE,GAAGoI,GAAAA,CAAAA;QACPpI,CAAC,CAAC,EAAE,GAAGqI,GAAAA,CAAAA;QACPrI,CAAC,CAAC,EAAE,GAAGsI,GAAAA,CAAAA;QAEPtI,CAAC,CAAC,EAAE,GAAGwI,GAAAA,CAAAA;QACPxI,CAAC,CAAC,EAAE,GAAGyI,GAAAA,CAAAA;QACPzI,CAAC,CAAC,EAAE,GAAG0I,GAAAA,CAAAA;QAEP1I,CAAC,CAAC,EAAE,GAAG4I,GAAAA,CAAAA;QACP5I,CAAC,CAAC,EAAE,GAAG6I,GAAAA,CAAAA;QACP7I,CAAC,CAAC,EAAE,GAAG8I,GAAAA,CAAAA;;AA5eEc,IAAAA,IAAAA,MAAAA,GAAAA,SAAAA,CAAAA,SAAAA,CAAAA;AA+eX;;;;;;;;;;;;MAaAzM,MAAAA,CAAAA,GA0BC,GA1BDA,SAAAA,IACEiL,GAAW,EACXC,GAAW,EACXC,GAAW,EACXE,GAAW,EACXC,GAAW,EACXC,GAAW,EACXE,GAAW,EACXC,GAAW,EACXC,GAAW,EACA;QACX,IAAM9I,CAAAA,GAAkB,IAAI,CAACC,QAAQ,CAAA;QAErCD,CAAC,CAAC,EAAE,GAAGoI,GAAAA,CAAAA;QACPpI,CAAC,CAAC,EAAE,GAAGqI,GAAAA,CAAAA;QACPrI,CAAC,CAAC,EAAE,GAAGsI,GAAAA,CAAAA;QAEPtI,CAAC,CAAC,EAAE,GAAGwI,GAAAA,CAAAA;QACPxI,CAAC,CAAC,EAAE,GAAGyI,GAAAA,CAAAA;QACPzI,CAAC,CAAC,EAAE,GAAG0I,GAAAA,CAAAA;QAEP1I,CAAC,CAAC,EAAE,GAAG4I,GAAAA,CAAAA;QACP5I,CAAC,CAAC,EAAE,GAAG6I,GAAAA,CAAAA;QACP7I,CAAC,CAAC,EAAE,GAAG8I,GAAAA,CAAAA;AAEP,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACD1L,OAAAA,GAGC,GAHDA,SAAAA,GAAAA,CAAIC,KAAgB,EAAa;AA7hBtBuM,QAAAA,SAAAA,CA8hBCxM,GAAG,CAAC,IAAI,EAAEC,OAAO,IAAI,CAAA,CAAA;AAC/B,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDC,OAAAA,QAGC,GAHDA,SAAAA,QAAAA,CAASD,KAAgB,EAAa;AAviB3BuM,QAAAA,SAAAA,CAwiBCtM,QAAQ,CAAC,IAAI,EAAED,OAAO,IAAI,CAAA,CAAA;AACpC,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDE,OAAAA,QAGC,GAHDA,SAAAA,QAAAA,CAASF,KAAgB,EAAa;AAjjB3BuM,QAAAA,SAAAA,CAkjBCrM,QAAQ,CAAC,IAAI,EAAEF,OAAO,IAAI,CAAA,CAAA;AACpC,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACDyM,MAAAA,CAAAA,WAkBC,GAlBDA,SAAAA,WAAsB,GAAA;QACpB,IAAM9J,CAAAA,GAAI,IAAI,CAACC,QAAQ,CAAA;AAEvB,QAAA,IAAM8J,GAAM/J,GAAAA,CAAC,CAAC,CAAA,CAAE,EACdgK,GAAAA,GAAMhK,CAAC,CAAC,CAAE,CAAA,EACViK,GAAMjK,GAAAA,CAAC,CAAC,CAAE,CAAA,CAAA;AACZ,QAAA,IAAMkK,GAAMlK,GAAAA,CAAC,CAAC,CAAA,CAAE,EACdmK,GAAAA,GAAMnK,CAAC,CAAC,CAAE,CAAA,EACVoK,GAAMpK,GAAAA,CAAC,CAAC,CAAE,CAAA,CAAA;AACZ,QAAA,IAAMqK,GAAMrK,GAAAA,CAAC,CAAC,CAAA,CAAE,EACdsK,GAAAA,GAAMtK,CAAC,CAAC,CAAE,CAAA,EACVuK,GAAMvK,GAAAA,CAAC,CAAC,CAAE,CAAA,CAAA;QAEZ,IAAMwK,GAAAA,GAAMD,GAAMJ,GAAAA,GAAAA,GAAMC,GAAME,GAAAA,GAAAA,CAAAA;AAC9B,QAAA,IAAMG,GAAM,GAAA,CAACF,GAAML,GAAAA,GAAAA,GAAME,GAAMC,GAAAA,GAAAA,CAAAA;QAC/B,IAAMK,GAAAA,GAAMJ,GAAMJ,GAAAA,GAAAA,GAAMC,GAAME,GAAAA,GAAAA,CAAAA;AAE9B,QAAA,OAAON,GAAMS,GAAAA,GAAAA,GAAMR,GAAMS,GAAAA,GAAAA,GAAMR,GAAMS,GAAAA,GAAAA,CAAAA;AACvC,KAAA,CAAA;AAEA;;;AAGC,MACDC,MAAAA,CAAAA,QAgBC,GAhBDA,SAAAA,QAAsB,GAAA;QACpB,IAAM3K,CAAAA,GAAI,IAAI,CAACC,QAAQ,CAAA;QAEvBD,CAAC,CAAC,EAAE,GAAG,CAAA,CAAA;QACPA,CAAC,CAAC,EAAE,GAAG,CAAA,CAAA;QACPA,CAAC,CAAC,EAAE,GAAG,CAAA,CAAA;QAEPA,CAAC,CAAC,EAAE,GAAG,CAAA,CAAA;QACPA,CAAC,CAAC,EAAE,GAAG,CAAA,CAAA;QACPA,CAAC,CAAC,EAAE,GAAG,CAAA,CAAA;QAEPA,CAAC,CAAC,EAAE,GAAG,CAAA,CAAA;QACPA,CAAC,CAAC,EAAE,GAAG,CAAA,CAAA;QACPA,CAAC,CAAC,EAAE,GAAG,CAAA,CAAA;AAEP,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACD4K,MAAAA,CAAAA,MAGC,GAHDA,SAAAA,MAAoB,GAAA;AAxmBThB,QAAAA,SAAAA,CAymBCgB,MAAM,CAAC,IAAI,EAAE,IAAI,CAAA,CAAA;AAC3B,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDC,OAAAA,MAGC,GAHDA,SAAAA,MAAAA,CAAOxO,CAAS,EAAa;AAlnBlBuN,QAAAA,SAAAA,CAmnBCiB,MAAM,CAAC,IAAI,EAAExO,GAAG,IAAI,CAAA,CAAA;AAC9B,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDyB,OAAAA,KAGC,GAHDA,SAAAA,KAAAA,CAAMC,CAAU,EAAa;AA5nBlB6L,QAAAA,SAAAA,CA6nBC9L,KAAK,CAAC,IAAI,EAAEC,GAAG,IAAI,CAAA,CAAA;AAC7B,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACD+M,OAAAA,SAGC,GAHDA,SAAAA,SAAAA,CAAUC,WAAoB,EAAa;AAtoBhCnB,QAAAA,SAAAA,CAuoBCkB,SAAS,CAAC,IAAI,EAAEC,aAAa,IAAI,CAAA,CAAA;AAC3C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACDC,MAAAA,CAAAA,SAGC,GAHDA,SAAAA,SAAuB,GAAA;AA/oBZpB,QAAAA,SAAAA,CAgpBCoB,SAAS,CAAC,IAAI,EAAE,IAAI,CAAA,CAAA;AAC9B,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACD1M,MAAAA,CAAAA,KAIC,GAJDA,SAAAA,KAAmB,GAAA;QACjB,IAAM0B,CAAAA,GAAI,IAAI,CAACC,QAAQ,CAAA;AACvB,QAAA,IAAIgL,MAAM,IA1pBDrB,SAAAA,CA0pBe5J,CAAC,CAAC,EAAE,EAAEA,CAAC,CAAC,CAAA,CAAE,EAAEA,CAAC,CAAC,CAAE,CAAA,EAAEA,CAAC,CAAC,CAAA,CAAE,EAAEA,CAAC,CAAC,CAAE,CAAA,EAAEA,CAAC,CAAC,EAAE,EAAEA,CAAC,CAAC,CAAA,CAAE,EAAEA,CAAC,CAAC,EAAE,EAAEA,CAAC,CAAC,CAAE,CAAA,CAAA,CAAA;QAC5E,OAAOiL,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACD1M,OAAAA,QAiBC,GAjBDA,SAAAA,QAAAA,CAASC,MAAiB,EAAa;QACrC,IAAMwB,CAAAA,GAAI,IAAI,CAACC,QAAQ,CAAA;QACvB,IAAMiL,EAAAA,GAAK1M,OAAOyB,QAAQ,CAAA;AAE1BD,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGkL,EAAE,CAAC,CAAE,CAAA,CAAA;AACZlL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGkL,EAAE,CAAC,CAAE,CAAA,CAAA;AACZlL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGkL,EAAE,CAAC,CAAE,CAAA,CAAA;AAEZlL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGkL,EAAE,CAAC,CAAE,CAAA,CAAA;AACZlL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGkL,EAAE,CAAC,CAAE,CAAA,CAAA;AACZlL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGkL,EAAE,CAAC,CAAE,CAAA,CAAA;AAEZlL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGkL,EAAE,CAAC,CAAE,CAAA,CAAA;AACZlL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGkL,EAAE,CAAC,CAAE,CAAA,CAAA;AACZlL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGkL,EAAE,CAAC,CAAE,CAAA,CAAA;AAEZ,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;;MAMAzM,MAAAA,CAAAA,aAMC,GANDA,SAAAA,cAAcC,KAAwB,EAAEC,MAAkB,EAAa;AAA/BA,QAAAA,IAAAA,mBAAAA,MAAiB,GAAA,CAAA,CAAA;QACvD,IAAMwM,IAAAA,GAAO,IAAI,CAAClL,QAAQ,CAAA;AAC1B,QAAA,IAAK,IAAIsB,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAI,IAAIA,CAAK,EAAA,CAAA;AAC3B4J,YAAAA,IAAI,CAAC5J,CAAE,CAAA,GAAG7C,KAAK,CAAC6C,IAAI5C,MAAO,CAAA,CAAA;AAC7B,SAAA;AACA,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;MAKAC,MAAAA,CAAAA,WAYC,GAZDA,SAAAA,YAAYC,GAA2C,EAAEC,SAAqB,EAAQ;AAA7BA,QAAAA,IAAAA,sBAAAA,SAAoB,GAAA,CAAA,CAAA;QAC3E,IAAMkB,CAAAA,GAAI,IAAI,CAACC,QAAQ,CAAA;AAEvBpB,QAAAA,GAAG,CAACC,SAAAA,CAAU,GAAGkB,CAAC,CAAC,CAAE,CAAA,CAAA;AACrBnB,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAGkB,CAAC,CAAC,CAAE,CAAA,CAAA;AACzBnB,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAGkB,CAAC,CAAC,CAAE,CAAA,CAAA;AACzBnB,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAGkB,CAAC,CAAC,CAAE,CAAA,CAAA;AACzBnB,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAGkB,CAAC,CAAC,CAAE,CAAA,CAAA;AACzBnB,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAGkB,CAAC,CAAC,CAAE,CAAA,CAAA;AACzBnB,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAGkB,CAAC,CAAC,CAAE,CAAA,CAAA;AACzBnB,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAGkB,CAAC,CAAC,CAAE,CAAA,CAAA;AACzBnB,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAGkB,CAAC,CAAC,CAAE,CAAA,CAAA;AAC3B,KAAA,CAAA;AAEA;;;;;AAKC,MACDoL,OAAAA,cAiBC,GAjBDA,SAAAA,cAAAA,CAAe5M,MAAc,EAAa;QACxC,IAAM6M,EAAAA,GAAK7M,OAAOyB,QAAQ,CAAA;QAC1B,IAAMD,CAAAA,GAAI,IAAI,CAACC,QAAQ,CAAA;AAEvBD,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGqL,EAAE,CAAC,CAAE,CAAA,CAAA;AACZrL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGqL,EAAE,CAAC,CAAE,CAAA,CAAA;AACZrL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGqL,EAAE,CAAC,CAAE,CAAA,CAAA;AAEZrL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGqL,EAAE,CAAC,CAAE,CAAA,CAAA;AACZrL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGqL,EAAE,CAAC,CAAE,CAAA,CAAA;AACZrL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGqL,EAAE,CAAC,CAAE,CAAA,CAAA;AAEZrL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGqL,EAAE,CAAC,CAAE,CAAA,CAAA;AACZrL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGqL,EAAE,CAAC,CAAE,CAAA,CAAA;AACZrL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGqL,EAAE,CAAC,EAAG,CAAA,CAAA;AAEb,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AA7uBA;;;;;MADWzB,SAOJxM,CAAAA,GAgBN,GAhBD,SAAOA,GAAI4B,CAAAA,IAAe,EAAE3B,KAAgB,EAAEwB,GAAc,EAAQ;QAClE,IAAMyM,EAAAA,GAAKtM,KAAKiB,QAAQ,CAAA;QACxB,IAAMsL,EAAAA,GAAKlO,MAAM4C,QAAQ,CAAA;QACzB,IAAMuL,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;QAEvBuL,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QAErBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QAErBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;AACvB,KAAA,CAAA;AAEA;;;;;MAzBW3B,SA+BJtM,CAAAA,QAgBN,GAhBD,SAAOA,QAAS0B,CAAAA,IAAe,EAAE3B,KAAgB,EAAEwB,GAAc,EAAQ;QACvE,IAAMyM,EAAAA,GAAKtM,KAAKiB,QAAQ,CAAA;QACxB,IAAMsL,EAAAA,GAAKlO,MAAM4C,QAAQ,CAAA;QACzB,IAAMuL,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;QAEvBuL,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QAErBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QAErBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;AACvB,KAAA,CAAA;AAEA;;;;;MAjDW3B,SAuDJrM,CAAAA,QAoCN,GApCD,SAAOA,QAASyB,CAAAA,IAAe,EAAE3B,KAAgB,EAAEwB,GAAc,EAAQ;QACvE,IAAMyM,EAAAA,GAAKtM,KAAKiB,QAAQ,CAAA;QACxB,IAAMsL,EAAAA,GAAKlO,MAAM4C,QAAQ,CAAA;QACzB,IAAMuL,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;AAEvB,QAAA,IAAMwL,GAAMH,GAAAA,EAAE,CAAC,CAAA,CAAE,EACfI,GAAAA,GAAMJ,EAAE,CAAC,CAAE,CAAA,EACXK,GAAML,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACb,QAAA,IAAMM,GAAMN,GAAAA,EAAE,CAAC,CAAA,CAAE,EACfO,GAAAA,GAAMP,EAAE,CAAC,CAAE,CAAA,EACXQ,GAAMR,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACb,QAAA,IAAMS,GAAMT,GAAAA,EAAE,CAAC,CAAA,CAAE,EACfU,GAAAA,GAAMV,EAAE,CAAC,CAAE,CAAA,EACXW,GAAMX,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AAEb,QAAA,IAAMY,GAAMX,GAAAA,EAAE,CAAC,CAAA,CAAE,EACfY,GAAAA,GAAMZ,EAAE,CAAC,CAAE,CAAA,EACXa,GAAMb,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACb,QAAA,IAAMc,GAAMd,GAAAA,EAAE,CAAC,CAAA,CAAE,EACfe,GAAAA,GAAMf,EAAE,CAAC,CAAE,CAAA,EACXgB,GAAMhB,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACb,QAAA,IAAMiB,GAAMjB,GAAAA,EAAE,CAAC,CAAA,CAAE,EACfkB,GAAAA,GAAMlB,EAAE,CAAC,CAAE,CAAA,EACXmB,GAAMnB,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AAEbC,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGC,MAAMS,GAAMN,GAAAA,GAAAA,GAAMO,MAAMJ,GAAMK,GAAAA,GAAAA,CAAAA;AACtCZ,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGE,MAAMQ,GAAML,GAAAA,GAAAA,GAAMM,MAAMH,GAAMI,GAAAA,GAAAA,CAAAA;AACtCZ,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGG,MAAMO,GAAMJ,GAAAA,GAAAA,GAAMK,MAAMF,GAAMG,GAAAA,GAAAA,CAAAA;AAEtCZ,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGC,MAAMY,GAAMT,GAAAA,GAAAA,GAAMU,MAAMP,GAAMQ,GAAAA,GAAAA,CAAAA;AACtCf,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGE,MAAMW,GAAMR,GAAAA,GAAAA,GAAMS,MAAMN,GAAMO,GAAAA,GAAAA,CAAAA;AACtCf,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGG,MAAMU,GAAMP,GAAAA,GAAAA,GAAMQ,MAAML,GAAMM,GAAAA,GAAAA,CAAAA;AAEtCf,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGC,MAAMe,GAAMZ,GAAAA,GAAAA,GAAMa,MAAMV,GAAMW,GAAAA,GAAAA,CAAAA;AACtClB,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGE,MAAMc,GAAMX,GAAAA,GAAAA,GAAMY,MAAMT,GAAMU,GAAAA,GAAAA,CAAAA;AACtClB,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGG,MAAMa,GAAMV,GAAAA,GAAAA,GAAMW,MAAMR,GAAMS,GAAAA,GAAAA,CAAAA;AACxC,KAAA,CAAA;AAEA;;;;;MA7FW9C,UAmGJ9N,MAeN,GAfD,SAAOA,MAAOkD,CAAAA,IAAe,EAAE3B,KAAgB,EAAW;QACxD,IAAMiO,EAAAA,GAAKtM,KAAKiB,QAAQ,CAAA;QACxB,IAAMsL,EAAAA,GAAKlO,MAAM4C,QAAQ,CAAA;QAEzB,OACEzE,QAAAA,CAASM,MAAM,CAACwP,EAAE,CAAC,CAAE,CAAA,EAAEC,EAAE,CAAC,CAAA,CAAE,KAC5B/P,QAASM,CAAAA,MAAM,CAACwP,EAAE,CAAC,EAAE,EAAEC,EAAE,CAAC,CAAA,CAAE,CAC5B/P,IAAAA,QAAAA,CAASM,MAAM,CAACwP,EAAE,CAAC,CAAE,CAAA,EAAEC,EAAE,CAAC,CAAA,CAAE,KAC5B/P,QAASM,CAAAA,MAAM,CAACwP,EAAE,CAAC,EAAE,EAAEC,EAAE,CAAC,CAAE,CAAA,CAAA,IAC5B/P,QAASM,CAAAA,MAAM,CAACwP,EAAE,CAAC,CAAE,CAAA,EAAEC,EAAE,CAAC,CAAA,CAAE,KAC5B/P,QAASM,CAAAA,MAAM,CAACwP,EAAE,CAAC,EAAE,EAAEC,EAAE,CAAC,CAAE,CAAA,CAAA,IAC5B/P,SAASM,MAAM,CAACwP,EAAE,CAAC,CAAE,CAAA,EAAEC,EAAE,CAAC,CAAA,CAAE,KAC5B/P,QAASM,CAAAA,MAAM,CAACwP,EAAE,CAAC,CAAE,CAAA,EAAEC,EAAE,CAAC,EAAE,CAC5B/P,IAAAA,QAAAA,CAASM,MAAM,CAACwP,EAAE,CAAC,CAAE,CAAA,EAAEC,EAAE,CAAC,CAAE,CAAA,CAAA,CAAA;AAEhC,KAAA,CAAA;AAEA;;;;;;AAMC,MACD,SA3HW3B,CA2HJjK,IAiBN,GAjBD,SAAOA,IAAAA,CAAKC,KAAgB,EAAEC,GAAc,EAAEC,CAAS,EAAEjB,GAAc,EAAQ;QAC7E,IAAMqM,EAAAA,GAAKtL,MAAMK,QAAQ,CAAA;QACzB,IAAM0M,EAAAA,GAAK9M,IAAII,QAAQ,CAAA;QACvB,IAAMuL,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;AACvB,QAAA,IAAM2M,MAAM,GAAM9M,GAAAA,CAAAA,CAAAA;QAElB0L,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,CAAE,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAG7M,CAAAA,CAAAA;QAC9B0L,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,CAAE,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAG7M,CAAAA,CAAAA;QAC9B0L,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,CAAE,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAG7M,CAAAA,CAAAA;QAE9B0L,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,CAAE,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAG7M,CAAAA,CAAAA;QAC9B0L,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,CAAE,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAG7M,CAAAA,CAAAA;QAC9B0L,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,CAAE,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAG7M,CAAAA,CAAAA;QAE9B0L,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,CAAE,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAG7M,CAAAA,CAAAA;QAC9B0L,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,CAAE,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAG7M,CAAAA,CAAAA;QAC9B0L,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,CAAE,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAG7M,CAAAA,CAAAA;AAChC,KAAA,CAAA;AAEA;;;;MA9IW8J,UAmJJiD,kBA2BN,GA3BD,SAAOA,kBAAmBxO,CAAAA,UAAsB,EAAEQ,GAAc,EAAQ;QACtE,IAAM2M,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;AACvB,QAAA,IAAQjD,CAAIJ,GAA2ByB,UAA/BrB,CAAAA,EAAAA,EAAOC,CAAwBoB,GAAAA,UAAAA,CAAxBpB,EAAOC,EAAIJ,CAAauB,GAAAA,UAAAA,CAAjBnB,EAAOiD,EAAIC,IAAM/B,UAAV8B,CAAAA,EAAAA,CAAAA;AAC7B,QAAA,IAAMkH,KAAKzK,CAAIA,GAAAA,CAAAA,CAAAA;AACf,QAAA,IAAM0K,KAAKzK,CAAIA,GAAAA,CAAAA,CAAAA;AACf,QAAA,IAAM0K,KAAKzK,CAAIA,GAAAA,CAAAA,CAAAA;AACf,QAAA,IAAMgQ,KAAKlQ,CAAIyK,GAAAA,EAAAA,CAAAA;AACf,QAAA,IAAM0F,KAAKlQ,CAAIwK,GAAAA,EAAAA,CAAAA;AACf,QAAA,IAAM2F,KAAKnQ,CAAIyK,GAAAA,EAAAA,CAAAA;AACf,QAAA,IAAM2F,KAAKnQ,CAAIuK,GAAAA,EAAAA,CAAAA;AACf,QAAA,IAAM6F,KAAKpQ,CAAIwK,GAAAA,EAAAA,CAAAA;AACf,QAAA,IAAM6F,KAAKrQ,CAAIyK,GAAAA,EAAAA,CAAAA;AACf,QAAA,IAAM6F,KAAKhN,CAAIiH,GAAAA,EAAAA,CAAAA;AACf,QAAA,IAAMgG,KAAKjN,CAAIkH,GAAAA,EAAAA,CAAAA;AACf,QAAA,IAAMgG,KAAKlN,CAAImH,GAAAA,EAAAA,CAAAA;AAEfiE,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAG,CAAA,GAAIwB,EAAKG,GAAAA,EAAAA,CAAAA;QACjB3B,EAAE,CAAC,CAAE,CAAA,GAAGuB,EAAKO,GAAAA,EAAAA,CAAAA;QACb9B,EAAE,CAAC,CAAE,CAAA,GAAGyB,EAAKI,GAAAA,EAAAA,CAAAA;QAEb7B,EAAE,CAAC,CAAE,CAAA,GAAGuB,EAAKO,GAAAA,EAAAA,CAAAA;AACb9B,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAG,CAAA,GAAIsB,EAAKK,GAAAA,EAAAA,CAAAA;QACjB3B,EAAE,CAAC,CAAE,CAAA,GAAG0B,EAAKE,GAAAA,EAAAA,CAAAA;QAEb5B,EAAE,CAAC,CAAE,CAAA,GAAGyB,EAAKI,GAAAA,EAAAA,CAAAA;QACb7B,EAAE,CAAC,CAAE,CAAA,GAAG0B,EAAKE,GAAAA,EAAAA,CAAAA;AACb5B,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAG,CAAA,GAAIsB,EAAKE,GAAAA,EAAAA,CAAAA;AACnB,KAAA,CAAA;AAEA;;;;MAhLWpD,UAqLJ2D,OAcN,GAdD,SAAOA,OAAQxP,CAAAA,CAAU,EAAEc,GAAc,EAAQ;QAC/C,IAAM2M,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;AAEvBuL,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAGzN,CAAAA,CAAEf,EAAE,CAAA;QACZwO,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QAERA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;AACRA,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAGzN,CAAAA,CAAEd,EAAE,CAAA;QACZuO,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QAERA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;AACV,KAAA,CAAA;AAEA;;;;MArMW5B,UA0MJmB,WAcN,GAdD,SAAOA,WAAYA,CAAAA,WAAoB,EAAElM,GAAc,EAAQ;QAC7D,IAAM2M,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;QAEvBuL,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QAERA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;AAERA,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAGT,WAAAA,CAAY/N,EAAE,CAAA;AACtBwO,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAGT,WAAAA,CAAY9N,EAAE,CAAA;QACtBuO,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;AACV,KAAA,CAAA;AAEA;;;;MA1NW5B,UA+NJgB,MAmCN,GAnCD,SAAOA,MAAO7O,CAAAA,CAAY,EAAE8C,GAAc,EAAQ;QAChD,IAAMwM,EAAAA,GAAKtP,EAAEkE,QAAQ,CAAA;QACrB,IAAMuL,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;AAEvB,QAAA,IAAM8J,GAAMsB,GAAAA,EAAE,CAAC,CAAA,CAAE,EACfrB,GAAAA,GAAMqB,EAAE,CAAC,CAAE,CAAA,EACXpB,GAAMoB,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACb,QAAA,IAAMnB,GAAMmB,GAAAA,EAAE,CAAC,CAAA,CAAE,EACflB,GAAAA,GAAMkB,EAAE,CAAC,CAAE,CAAA,EACXjB,GAAMiB,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACb,QAAA,IAAMhB,GAAMgB,GAAAA,EAAE,CAAC,CAAA,CAAE,EACff,GAAAA,GAAMe,EAAE,CAAC,CAAE,CAAA,EACXd,GAAMc,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;QAEb,IAAMb,GAAAA,GAAMD,GAAMJ,GAAAA,GAAAA,GAAMC,GAAME,GAAAA,GAAAA,CAAAA;AAC9B,QAAA,IAAMG,GAAM,GAAA,CAACF,GAAML,GAAAA,GAAAA,GAAME,GAAMC,GAAAA,GAAAA,CAAAA;QAC/B,IAAMK,GAAAA,GAAMJ,GAAMJ,GAAAA,GAAAA,GAAMC,GAAME,GAAAA,GAAAA,CAAAA;AAE9B,QAAA,IAAImD,GAAMzD,GAAAA,GAAAA,GAAMS,GAAMR,GAAAA,GAAAA,GAAMS,MAAMR,GAAMS,GAAAA,GAAAA,CAAAA;AACxC,QAAA,IAAI,CAAC8C,GAAK,EAAA;AACR,YAAA,OAAA;SACD;AACDA,QAAAA,GAAAA,GAAM,GAAMA,GAAAA,GAAAA,CAAAA;QAEZhC,EAAE,CAAC,CAAE,CAAA,GAAGhB,GAAMgD,GAAAA,GAAAA,CAAAA;QACdhC,EAAE,CAAC,CAAE,CAAA,GAAG,CAAC,CAACjB,GAAMP,GAAAA,GAAAA,GAAMC,GAAMK,GAAAA,GAAE,IAAKkD,GAAAA,CAAAA;QACnChC,EAAE,CAAC,EAAE,GAAIpB,CAAAA,GAAMJ,GAAAA,GAAAA,GAAMC,GAAME,GAAAA,GAAE,IAAKqD,GAAAA,CAAAA;QAElChC,EAAE,CAAC,CAAE,CAAA,GAAGf,GAAM+C,GAAAA,GAAAA,CAAAA;QACdhC,EAAE,CAAC,EAAE,GAAIjB,CAAAA,GAAMR,GAAAA,GAAAA,GAAME,GAAMI,GAAAA,GAAE,IAAKmD,GAAAA,CAAAA;QAClChC,EAAE,CAAC,CAAE,CAAA,GAAG,CAAC,CAACpB,GAAML,GAAAA,GAAAA,GAAME,GAAMC,GAAAA,GAAE,IAAKsD,GAAAA,CAAAA;QAEnChC,EAAE,CAAC,CAAE,CAAA,GAAGd,GAAM8C,GAAAA,GAAAA,CAAAA;QACdhC,EAAE,CAAC,CAAE,CAAA,GAAG,CAAC,CAAClB,GAAMP,GAAAA,GAAAA,GAAMC,GAAMK,GAAAA,GAAE,IAAKmD,GAAAA,CAAAA;QACnChC,EAAE,CAAC,EAAE,GAAIrB,CAAAA,GAAMJ,GAAAA,GAAAA,GAAMC,GAAME,GAAAA,GAAE,IAAKsD,GAAAA,CAAAA;AACpC,KAAA,CAAA;AAEA;;;;;MApQW5D,UA0QJ6D,YAmDN,GAnDD,SAAOA,YAAaC,CAAAA,IAAY,EAAE7O,GAAc,EAAQ;QACtD,IAAMwM,EAAAA,GAAKqC,KAAKzN,QAAQ,CAAA;QACxB,IAAMuL,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;AAEvB,QAAA,IAAM8J,MAAMsB,EAAE,CAAC,EAAE,EACfrB,GAAAA,GAAMqB,EAAE,CAAC,CAAA,CAAE,EACXpB,GAAAA,GAAMoB,EAAE,CAAC,CAAA,CAAE,EACXsC,GAAMtC,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACb,QAAA,IAAMnB,MAAMmB,EAAE,CAAC,EAAE,EACflB,GAAAA,GAAMkB,EAAE,CAAC,CAAA,CAAE,EACXjB,GAAAA,GAAMiB,EAAE,CAAC,CAAA,CAAE,EACXuC,GAAMvC,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACb,QAAA,IAAMhB,MAAMgB,EAAE,CAAC,EAAE,EACff,GAAAA,GAAMe,EAAE,CAAC,CAAA,CAAE,EACXd,GAAAA,GAAMc,EAAE,CAAC,EAAA,CAAG,EACZwC,GAAMxC,GAAAA,EAAE,CAAC,EAAG,CAAA,CAAA;AACd,QAAA,IAAMyC,MAAMzC,EAAE,CAAC,GAAG,EAChB0C,GAAAA,GAAM1C,EAAE,CAAC,EAAA,CAAG,EACZ2C,GAAAA,GAAM3C,EAAE,CAAC,EAAA,CAAG,EACZ4C,GAAM5C,GAAAA,EAAE,CAAC,EAAG,CAAA,CAAA;QAEd,IAAM6C,GAAAA,GAAMnE,GAAMI,GAAAA,GAAAA,GAAMH,GAAME,GAAAA,GAAAA,CAAAA;QAC9B,IAAMiE,GAAAA,GAAMpE,GAAMK,GAAAA,GAAAA,GAAMH,GAAMC,GAAAA,GAAAA,CAAAA;QAC9B,IAAMkE,GAAAA,GAAMrE,GAAM6D,GAAAA,GAAAA,GAAMD,GAAMzD,GAAAA,GAAAA,CAAAA;QAC9B,IAAMmE,GAAAA,GAAMrE,GAAMI,GAAAA,GAAAA,GAAMH,GAAME,GAAAA,GAAAA,CAAAA;QAC9B,IAAMmE,GAAAA,GAAMtE,GAAM4D,GAAAA,GAAAA,GAAMD,GAAMxD,GAAAA,GAAAA,CAAAA;QAC9B,IAAMoE,GAAAA,GAAMtE,GAAM2D,GAAAA,GAAAA,GAAMD,GAAMvD,GAAAA,GAAAA,CAAAA;QAC9B,IAAMoE,GAAAA,GAAMnE,GAAM0D,GAAAA,GAAAA,GAAMzD,GAAMwD,GAAAA,GAAAA,CAAAA;QAC9B,IAAMW,GAAAA,GAAMpE,GAAM2D,GAAAA,GAAAA,GAAMzD,GAAMuD,GAAAA,GAAAA,CAAAA;QAC9B,IAAMY,GAAAA,GAAMrE,GAAM4D,GAAAA,GAAAA,GAAMJ,GAAMC,GAAAA,GAAAA,CAAAA;QAC9B,IAAMa,GAAAA,GAAMrE,GAAM0D,GAAAA,GAAAA,GAAMzD,GAAMwD,GAAAA,GAAAA,CAAAA;QAC9B,IAAMa,GAAAA,GAAMtE,GAAM2D,GAAAA,GAAAA,GAAMJ,GAAME,GAAAA,GAAAA,CAAAA;QAC9B,IAAMc,GAAAA,GAAMtE,GAAM0D,GAAAA,GAAAA,GAAMJ,GAAMG,GAAAA,GAAAA,CAAAA;QAE9B,IAAIR,GAAAA,GAAMU,GAAMW,GAAAA,GAAAA,GAAMV,GAAMS,GAAAA,GAAAA,GAAMR,GAAMO,GAAAA,GAAAA,GAAMN,GAAMK,GAAAA,GAAAA,GAAMJ,GAAMG,GAAAA,GAAAA,GAAMF,GAAMC,GAAAA,GAAAA,CAAAA;AAC5E,QAAA,IAAI,CAAChB,GAAK,EAAA;AACR,YAAA,OAAO,IAAI,CAAA;SACZ;AACDA,QAAAA,GAAAA,GAAM,GAAMA,GAAAA,GAAAA,CAAAA;QAEZhC,EAAE,CAAC,CAAE,CAAA,GAAG,CAACrB,GAAM0E,GAAAA,GAAAA,GAAMzE,GAAMwE,GAAAA,GAAAA,GAAMhB,GAAMe,GAAAA,GAAE,IAAKnB,GAAAA,CAAAA;QAC9ChC,EAAE,CAAC,CAAE,CAAA,GAAG,CAACpB,GAAMsE,GAAAA,GAAAA,GAAMxE,GAAM2E,GAAAA,GAAAA,GAAMjB,GAAMa,GAAAA,GAAE,IAAKjB,GAAAA,CAAAA;QAC9ChC,EAAE,CAAC,CAAE,CAAA,GAAG,CAACtB,GAAM0E,GAAAA,GAAAA,GAAMzE,GAAMuE,GAAAA,GAAAA,GAAMd,GAAMY,GAAAA,GAAE,IAAKhB,GAAAA,CAAAA;QAE9ChC,EAAE,CAAC,CAAE,CAAA,GAAG,CAACvB,GAAM2E,GAAAA,GAAAA,GAAM5E,GAAM6E,GAAAA,GAAAA,GAAMlB,GAAMgB,GAAAA,GAAE,IAAKnB,GAAAA,CAAAA;QAC9ChC,EAAE,CAAC,CAAE,CAAA,GAAG,CAACzB,GAAM8E,GAAAA,GAAAA,GAAM5E,GAAMyE,GAAAA,GAAAA,GAAMf,GAAMc,GAAAA,GAAE,IAAKjB,GAAAA,CAAAA;QAC9ChC,EAAE,CAAC,CAAE,CAAA,GAAG,CAACxB,GAAM0E,GAAAA,GAAAA,GAAM3E,GAAM6E,GAAAA,GAAAA,GAAMjB,GAAMa,GAAAA,GAAE,IAAKhB,GAAAA,CAAAA;QAE9ChC,EAAE,CAAC,CAAE,CAAA,GAAG,CAACuC,GAAMQ,GAAAA,GAAAA,GAAMP,GAAMM,GAAAA,GAAAA,GAAML,GAAMI,GAAAA,GAAE,IAAKb,GAAAA,CAAAA;QAC9ChC,EAAE,CAAC,CAAE,CAAA,GAAG,CAACwC,GAAMI,GAAAA,GAAAA,GAAMN,GAAMS,GAAAA,GAAAA,GAAMN,GAAME,GAAAA,GAAE,IAAKX,GAAAA,CAAAA;QAC9ChC,EAAE,CAAC,CAAE,CAAA,GAAG,CAACsC,GAAMQ,GAAAA,GAAAA,GAAMP,GAAMK,GAAAA,GAAAA,GAAMH,GAAMC,GAAAA,GAAE,IAAKV,GAAAA,CAAAA;AAChD,KAAA,CAAA;AAEA;;;;;MA/TW5D,SAqUJiB,CAAAA,MA2BN,GA3BD,SAAOA,MAAO9O,CAAAA,CAAY,EAAEM,CAAS,EAAEwC,GAAc,EAAQ;QAC3D,IAAMwM,EAAAA,GAAKtP,EAAEkE,QAAQ,CAAA;QACrB,IAAMuL,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;QACvB,IAAMlC,CAAAA,GAAIlC,IAAKiT,CAAAA,GAAG,CAACzS,CAAAA,CAAAA,CAAAA;QACnB,IAAMuH,CAAAA,GAAI/H,IAAKkT,CAAAA,GAAG,CAAC1S,CAAAA,CAAAA,CAAAA;AAEnB,QAAA,IAAM0N,GAAMsB,GAAAA,EAAE,CAAC,CAAA,CAAE,EACfrB,GAAAA,GAAMqB,EAAE,CAAC,CAAE,CAAA,EACXpB,GAAMoB,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACb,QAAA,IAAMnB,GAAMmB,GAAAA,EAAE,CAAC,CAAA,CAAE,EACflB,GAAAA,GAAMkB,EAAE,CAAC,CAAE,CAAA,EACXjB,GAAMiB,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACb,QAAA,IAAMhB,GAAMgB,GAAAA,EAAE,CAAC,CAAA,CAAE,EACff,GAAAA,GAAMe,EAAE,CAAC,CAAE,CAAA,EACXd,GAAMc,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AAEbG,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAG5H,CAAAA,GAAImG,MAAMhM,CAAImM,GAAAA,GAAAA,CAAAA;AACtBsB,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAG5H,CAAAA,GAAIoG,MAAMjM,CAAIoM,GAAAA,GAAAA,CAAAA;AACtBqB,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAG5H,CAAAA,GAAIqG,MAAMlM,CAAIqM,GAAAA,GAAAA,CAAAA;AAEtBoB,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAG5H,CAAAA,GAAIsG,MAAMnM,CAAIgM,GAAAA,GAAAA,CAAAA;AACtByB,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAG5H,CAAAA,GAAIuG,MAAMpM,CAAIiM,GAAAA,GAAAA,CAAAA;AACtBwB,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAG5H,CAAAA,GAAIwG,MAAMrM,CAAIkM,GAAAA,GAAAA,CAAAA;QAEtBuB,EAAE,CAAC,EAAE,GAAGnB,GAAAA,CAAAA;QACRmB,EAAE,CAAC,EAAE,GAAGlB,GAAAA,CAAAA;QACRkB,EAAE,CAAC,EAAE,GAAGjB,GAAAA,CAAAA;AACV,KAAA,CAAA;AAEA;;;;;MAlWWX,SAwWJ9L,CAAAA,KAgBN,GAhBD,SAAOA,KAAMG,CAAAA,CAAY,EAAEF,CAAU,EAAEc,GAAc,EAAQ;AAC3D,QAAA,IAAQ7B,CAAiBe,GAAAA,CAAAA,CAAjBf,EAAOC,EAAIJ,IAAMkB,CAAVd,CAAAA,EAAAA,CAAAA;QACf,IAAMoO,EAAAA,GAAKpN,EAAEgC,QAAQ,CAAA;QACrB,IAAMuL,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;AAEvBuL,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAG5O,CAAIyO,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACjBG,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAG5O,CAAIyO,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACjBG,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAG5O,CAAIyO,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AAEjBG,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAG3O,CAAIwO,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACjBG,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAG3O,CAAIwO,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACjBG,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAG3O,CAAIwO,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AAEjBG,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACbG,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACbG,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACf,KAAA,CAAA;AAEA;;;;;MA1XWzB,SAgYJkB,CAAAA,SA0BN,GA1BD,SAAOA,SAAU7M,CAAAA,CAAY,EAAE8M,WAAoB,EAAElM,GAAc,EAAQ;AACzE,QAAA,IAAQ7B,CAAiB+N,GAAAA,WAAAA,CAAjB/N,EAAOC,EAAIJ,IAAMkO,WAAV9N,CAAAA,EAAAA,CAAAA;QACf,IAAMoO,EAAAA,GAAKpN,EAAEgC,QAAQ,CAAA;QACrB,IAAMuL,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;AAEvB,QAAA,IAAM8J,GAAMsB,GAAAA,EAAE,CAAC,CAAA,CAAE,EACfrB,GAAAA,GAAMqB,EAAE,CAAC,CAAE,CAAA,EACXpB,GAAMoB,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACb,QAAA,IAAMnB,GAAMmB,GAAAA,EAAE,CAAC,CAAA,CAAE,EACflB,GAAAA,GAAMkB,EAAE,CAAC,CAAE,CAAA,EACXjB,GAAMiB,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACb,QAAA,IAAMhB,GAAMgB,GAAAA,EAAE,CAAC,CAAA,CAAE,EACff,GAAAA,GAAMe,EAAE,CAAC,CAAE,CAAA,EACXd,GAAMc,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;QAEbG,EAAE,CAAC,EAAE,GAAGzB,GAAAA,CAAAA;QACRyB,EAAE,CAAC,EAAE,GAAGxB,GAAAA,CAAAA;QACRwB,EAAE,CAAC,EAAE,GAAGvB,GAAAA,CAAAA;QAERuB,EAAE,CAAC,EAAE,GAAGtB,GAAAA,CAAAA;QACRsB,EAAE,CAAC,EAAE,GAAGrB,GAAAA,CAAAA;QACRqB,EAAE,CAAC,EAAE,GAAGpB,GAAAA,CAAAA;AAERoB,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAG5O,CAAImN,GAAAA,GAAAA,GAAMlN,IAAIqN,GAAMG,GAAAA,GAAAA,CAAAA;AAC5BmB,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAG5O,CAAIoN,GAAAA,GAAAA,GAAMnN,IAAIsN,GAAMG,GAAAA,GAAAA,CAAAA;AAC5BkB,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAG5O,CAAIqN,GAAAA,GAAAA,GAAMpN,IAAIuN,GAAMG,GAAAA,GAAAA,CAAAA;AAC9B,KAAA,CAAA;AAEA;;;;MA5ZWX,UAiaJoB,SA2BN,GA3BD,SAAOA,SAAUjP,CAAAA,CAAY,EAAE8C,GAAc,EAAQ;QACnD,IAAMwM,EAAAA,GAAKtP,EAAEkE,QAAQ,CAAA;QACrB,IAAMuL,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;AAEvB,QAAA,IAAIpB,QAAQ9C,CAAG,EAAA;YACb,IAAMiO,GAAAA,GAAMqB,EAAE,CAAC,CAAE,CAAA,CAAA;YACjB,IAAMpB,GAAAA,GAAMoB,EAAE,CAAC,CAAE,CAAA,CAAA;YACjB,IAAMjB,GAAAA,GAAMiB,EAAE,CAAC,CAAE,CAAA,CAAA;AACjBG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACbG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;YACbG,EAAE,CAAC,EAAE,GAAGxB,GAAAA,CAAAA;AACRwB,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;YACbG,EAAE,CAAC,EAAE,GAAGvB,GAAAA,CAAAA;YACRuB,EAAE,CAAC,EAAE,GAAGpB,GAAAA,CAAAA;SACH,MAAA;AACLoB,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACbG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACbG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AAEbG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACbG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACbG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AAEbG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACbG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACbG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;SACd;AACH,KAAA,CAAA;AA5bWzB,IAAAA,OAAAA,SAAAA,CAAAA;AA+uBZ,CAAA;;ACnvBD;;AAEC,IACM,IAAA,UAAMoF,iBAqyBV,WAryBI;AAAMA,IAAAA,SAAAA,UAAAA,CAkeCpS,CAAa,EAAEC,CAAa,EAAEC,CAAa,EAAEsD,CAAa,EAAA;AAA1DxD,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;AAAGC,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;AAAGC,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;AAAGsD,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;yBApEvD,IAAA,CACdrD,kBAA8B,IAAI,CAAA;QAoEhC,IAAI,CAACC,EAAE,GAAGJ,CAAAA,CAAAA;QACV,IAAI,CAACK,EAAE,GAAGJ,CAAAA,CAAAA;QACV,IAAI,CAACK,EAAE,GAAGJ,CAAAA,CAAAA;QACV,IAAI,CAACqD,EAAE,GAAGC,CAAAA,CAAAA;;AAteD4O,IAAAA,IAAAA,MAAAA,GAAAA,UAAAA,CAAAA,SAAAA,CAAAA;AAyeX;;;;;;;AAOC,MACD7R,MAAAA,CAAAA,GAOC,GAPDA,SAAAA,GAAIP,CAAAA,CAAS,EAAEC,CAAS,EAAEC,CAAS,EAAEsD,CAAS,EAAc;QAC1D,IAAI,CAACpD,EAAE,GAAGJ,CAAAA,CAAAA;QACV,IAAI,CAACK,EAAE,GAAGJ,CAAAA,CAAAA;QACV,IAAI,CAACK,EAAE,GAAGJ,CAAAA,CAAAA;QACV,IAAI,CAACqD,EAAE,GAAGC,CAAAA,CAAAA;AACV,QAAA,IAAI,CAACrD,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACDkS,MAAAA,CAAAA,SAMC,GANDA,SAAAA,SAAwB,GAAA;QACtB,IAAI,CAACjS,EAAE,IAAI,CAAC,CAAA,CAAA;QACZ,IAAI,CAACC,EAAE,IAAI,CAAC,CAAA,CAAA;QACZ,IAAI,CAACC,EAAE,IAAI,CAAC,CAAA,CAAA;AACZ,QAAA,IAAI,CAACH,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDmS,OAAAA,YAkBC,GAlBDA,SAAAA,YAAAA,CAAarQ,GAAY,EAAU;QACjC,IAAuB,KAAA,GAAA,IAAI,EAAnB7B,EAAe,GAAA,KAAA,CAAfA,IAAIC,EAAW,GAAA,KAAA,CAAXA,EAAIC,EAAAA,EAAAA,GAAO,KAAPA,CAAAA,EAAAA,CAAAA;AAChB,QAAA,IAAMO,MAAST,GAAAA,EAAAA,GAAKA,EAAKC,GAAAA,EAAAA,GAAKA,KAAKC,EAAKA,GAAAA,EAAAA,CAAAA;QAExC,IAAIO,MAAAA,GAASjC,QAASU,CAAAA,aAAa,EAAE;AACnC2C,YAAAA,GAAAA,CAAI7B,EAAE,GAAG,CAAA,CAAA;AACT6B,YAAAA,GAAAA,CAAI5B,EAAE,GAAG,CAAA,CAAA;AACT4B,YAAAA,GAAAA,CAAI3B,EAAE,GAAG,CAAA,CAAA;YAET,OAAO,CAAA,CAAA;SACF,MAAA;AACL,YAAA,IAAM0P,MAAM,GAAMnP,GAAAA,MAAAA,CAAAA;AAClBoB,YAAAA,GAAAA,CAAI7B,EAAE,GAAG,IAAI,CAACA,EAAE,GAAG4P,GAAAA,CAAAA;AACnB/N,YAAAA,GAAAA,CAAI5B,EAAE,GAAG,IAAI,CAACA,EAAE,GAAG2P,GAAAA,CAAAA;AACnB/N,YAAAA,GAAAA,CAAI3B,EAAE,GAAG,IAAI,CAACA,EAAE,GAAG0P,GAAAA,CAAAA;AAEnB,YAAA,OAAO/Q,KAAKsT,IAAI,CAAC,IAAI,CAAChP,EAAE,CAAI,GAAA,GAAA,CAAA;SAC7B;AACH,KAAA,CAAA;AAEA;;;AAGC,MACDwK,MAAAA,CAAAA,QAOC,GAPDA,SAAAA,QAAuB,GAAA;QACrB,IAAI,CAAC3N,EAAE,GAAG,CAAA,CAAA;QACV,IAAI,CAACC,EAAE,GAAG,CAAA,CAAA;QACV,IAAI,CAACC,EAAE,GAAG,CAAA,CAAA;QACV,IAAI,CAACiD,EAAE,GAAG,CAAA,CAAA;AACV,QAAA,IAAI,CAACpD,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACDU,MAAAA,CAAAA,MAGC,GAHDA,SAAAA,MAAiB,GAAA;AACf,QAAA,IAA2B,KAAA,GAAA,IAAI,EAAvBT,EAAAA,GAAmB,KAAnBA,CAAAA,EAAAA,EAAIC,EAAe,GAAA,KAAA,CAAfA,EAAIC,EAAAA,EAAAA,GAAW,KAAXA,CAAAA,EAAAA,EAAIiD,KAAO,KAAPA,CAAAA,EAAAA,CAAAA;QACpB,OAAOtE,IAAAA,CAAK6B,IAAI,CAACV,EAAAA,GAAKA,KAAKC,EAAKA,GAAAA,EAAAA,GAAKC,EAAKA,GAAAA,EAAAA,GAAKiD,EAAKA,GAAAA,EAAAA,CAAAA,CAAAA;AACtD,KAAA,CAAA;AAEA;;;AAGC,MACDxC,MAAAA,CAAAA,aAGC,GAHDA,SAAAA,aAAwB,GAAA;AACtB,QAAA,IAA2B,KAAA,GAAA,IAAI,EAAvBX,EAAAA,GAAmB,KAAnBA,CAAAA,EAAAA,EAAIC,EAAe,GAAA,KAAA,CAAfA,EAAIC,EAAAA,EAAAA,GAAW,KAAXA,CAAAA,EAAAA,EAAIiD,KAAO,KAAPA,CAAAA,EAAAA,CAAAA;AACpB,QAAA,OAAOnD,KAAKA,EAAKC,GAAAA,EAAAA,GAAKA,EAAKC,GAAAA,EAAAA,GAAKA,KAAKiD,EAAKA,GAAAA,EAAAA,CAAAA;AAC5C,KAAA,CAAA;AAEA;;;AAGC,MACDtC,MAAAA,CAAAA,SAGC,GAHDA,SAAAA,SAAwB,GAAA;AAlkBbmR,QAAAA,UAAAA,CAmkBEnR,SAAS,CAAC,IAAI,EAAE,IAAI,CAAA,CAAA;AAC/B,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDuR,OAAAA,OAQC,GARDA,SAAAA,OAAAA,CAAQvQ,GAAY,EAAW;QAC7B,IAAI,CAACwQ,eAAe,CAACxQ,GAAAA,CAAAA,CAAAA;QAErB,IAAMiB,CAAAA,GAAIjB,IAAI7B,EAAE,CAAA;QAChB6B,GAAI7B,CAAAA,EAAE,GAAG6B,GAAAA,CAAI5B,EAAE,CAAA;AACf4B,QAAAA,GAAAA,CAAI5B,EAAE,GAAG6C,CAAAA,CAAAA;QACTjB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;QAC1C,OAAO8B,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACDyQ,OAAAA,cAIC,GAJDA,SAAAA,cAAAA,CAAezQ,GAAY,EAAW;QACpC,IAAI,CAACwQ,eAAe,CAACxQ,GAAAA,CAAAA,CAAAA;QACrBA,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;QAC1C,OAAO8B,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACD0Q,OAAAA,OAGC,GAHDA,SAAAA,OAAAA,CAAQC,GAAW,EAAc;AAtmBtBR,QAAAA,UAAAA,CAumBEO,OAAO,CAAC,IAAI,EAAEC,KAAK,IAAI,CAAA,CAAA;AAClC,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDC,OAAAA,OAGC,GAHDA,SAAAA,OAAAA,CAAQD,GAAW,EAAc;AAhnBtBR,QAAAA,UAAAA,CAinBES,OAAO,CAAC,IAAI,EAAED,KAAK,IAAI,CAAA,CAAA;AAClC,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDE,OAAAA,OAGC,GAHDA,SAAAA,OAAAA,CAAQF,GAAW,EAAc;AA1nBtBR,QAAAA,UAAAA,CA2nBEU,OAAO,CAAC,IAAI,EAAEF,KAAK,IAAI,CAAA,CAAA;AAClC,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;;MAMAG,MAAAA,CAAAA,iBAGC,GAHDA,SAAAA,kBAAkBC,IAAa,EAAEJ,GAAW,EAAc;AAroB/CR,QAAAA,UAAAA,CAsoBEW,iBAAiB,CAACC,IAAMJ,EAAAA,GAAAA,EAAK,IAAI,CAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDjS,OAAAA,QAGC,GAHDA,SAAAA,QAAAA,CAASsS,IAAgB,EAAc;AA/oB5Bb,QAAAA,UAAAA,CAgpBEzR,QAAQ,CAAC,IAAI,EAAEsS,MAAM,IAAI,CAAA,CAAA;AACpC,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACDjF,MAAAA,CAAAA,MAGC,GAHDA,SAAAA,MAAqB,GAAA;AAxpBVoE,QAAAA,UAAAA,CAypBEpE,MAAM,CAAC,IAAI,EAAE,IAAI,CAAA,CAAA;AAC5B,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACD3L,OAAAA,GAEC,GAFDA,SAAAA,GAAAA,CAAI4Q,IAAgB,EAAU;AAC5B,QAAA,OAAOb,UAnqBEA,CAmqBS/P,GAAG,CAAC,IAAI,EAAE4Q,IAAAA,CAAAA,CAAAA;AAC9B,KAAA,CAAA;AAEA;;;;;MAMAlQ,MAAAA,CAAAA,IAGC,GAHDA,SAAAA,KAAKkQ,IAAgB,EAAE/P,CAAS,EAAc;AA5qBnCkP,QAAAA,UAAAA,CA6qBErP,IAAI,CAAC,IAAI,EAAEkQ,IAAAA,EAAM/P,GAAG,IAAI,CAAA,CAAA;AACnC,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;;MAMAgQ,MAAAA,CAAAA,eAIC,GAJDA,SAAAA,gBAAgBF,IAAa,EAAEJ,GAAW,EAAc;AAvrB7CR,QAAAA,UAAAA,CAwrBEe,UAAU,CAACJ,iBAAiB,CAACC,IAAMJ,EAAAA,GAAAA,CAAAA,CAAAA;AAC9C,QAAA,IAAI,CAACjS,QAAQ,CAzrBJyR,WAyrBgBe,UAAU,CAAA,CAAA;AACnC,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACDzR,MAAAA,CAAAA,KAEC,GAFDA,SAAAA,KAAoB,GAAA;AAClB,QAAA,OAAO,IAlsBE0Q,UAksBa,CAAA,IAAI,CAAChS,EAAE,EAAE,IAAI,CAACC,EAAE,EAAE,IAAI,CAACC,EAAE,EAAE,IAAI,CAACiD,EAAE,CAAA,CAAA;AAC1D,KAAA,CAAA;AAEA;;;;AAIC,MACD5B,OAAAA,QAOC,GAPDA,SAAAA,QAAAA,CAASC,MAAsB,EAAc;AAC3C,QAAA,IAAI,CAACxB,EAAE,GAAGwB,MAAAA,CAAO5B,CAAC,CAAA;AAClB,QAAA,IAAI,CAACK,EAAE,GAAGuB,MAAAA,CAAO3B,CAAC,CAAA;AAClB,QAAA,IAAI,CAACK,EAAE,GAAGsB,MAAAA,CAAO1B,CAAC,CAAA;AAClB,QAAA,IAAI,CAACqD,EAAE,GAAG3B,MAAAA,CAAO4B,CAAC,CAAA;AAClB,QAAA,IAAI,CAACrD,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;;MAMA0B,MAAAA,CAAAA,aAOC,GAPDA,SAAAA,cAAcC,KAAwB,EAAEC,MAAkB,EAAc;AAAhCA,QAAAA,IAAAA,mBAAAA,MAAiB,GAAA,CAAA,CAAA;AACvD,QAAA,IAAI,CAAC3B,EAAE,GAAG0B,KAAK,CAACC,MAAO,CAAA,CAAA;AACvB,QAAA,IAAI,CAAC1B,EAAE,GAAGyB,KAAK,CAACC,SAAS,CAAE,CAAA,CAAA;AAC3B,QAAA,IAAI,CAACzB,EAAE,GAAGwB,KAAK,CAACC,SAAS,CAAE,CAAA,CAAA;AAC3B,QAAA,IAAI,CAACwB,EAAE,GAAGzB,KAAK,CAACC,SAAS,CAAE,CAAA,CAAA;AAC3B,QAAA,IAAI,CAAC5B,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;MAKA6B,MAAAA,CAAAA,WAKC,GALDA,SAAAA,YAAYC,GAA2C,EAAEC,SAAqB,EAAE;AAAvBA,QAAAA,IAAAA,sBAAAA,SAAoB,GAAA,CAAA,CAAA;AAC3ED,QAAAA,GAAG,CAACC,SAAAA,CAAU,GAAG,IAAI,CAAC9B,EAAE,CAAA;AACxB6B,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAG,IAAI,CAAC7B,EAAE,CAAA;AAC5B4B,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAG,IAAI,CAAC5B,EAAE,CAAA;AAC5B2B,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAG,IAAI,CAACqB,EAAE,CAAA;AAC9B,KAAA,CAAA;AAEA;;;AAGC,MACDpB,MAAAA,CAAAA,MAOC,GAPDA,SAAAA,MAAyB,GAAA;QACvB,OAAO;YACLnC,CAAG,EAAA,IAAI,CAACI,EAAE;YACVH,CAAG,EAAA,IAAI,CAACI,EAAE;YACVH,CAAG,EAAA,IAAI,CAACI,EAAE;YACVkD,CAAG,EAAA,IAAI,CAACD,EAAE;AACZ,SAAA,CAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQkP,eAUP,GAVD,SAAQA,eAAAA,CAAgBxQ,GAAY,EAAQ;;AAE1C,QAAA,IAAuC,QAAA,IAAI,EAAnC7B,CAAIJ,GAA2B,MAA/BI,EAAOC,EAAIJ,CAAoB,GAAA,KAAA,CAAxBI,IAAOC,CAAIJ,GAAa,MAAjBI,EAAOiD,EAAIC,IAAM,KAAVD,CAAAA,EAAAA,CAAAA;AAC7B,QAAA,IAAM2M,KAAKlQ,CAAIA,GAAAA,CAAAA,CAAAA;AACf,QAAA,IAAMoT,OAAO,GAAOpT,IAAAA,CAAIwD,GAAAA,CAAAA,GAAIvD,IAAIC,CAAAA,CAAAA,CAAAA;;QAGhC+B,GAAI5B,CAAAA,EAAE,GAAGpB,IAAKI,CAAAA,GAAG,CAAC+T,IAAS,CAAA,IAAA,CAAA,GAAInU,KAAKoU,IAAI,CAACD,SAASnU,IAAAA,CAAKa,EAAE,GAAG,CAAA,IAAKb,IAAKqU,CAAAA,IAAI,CAACF,IAAK,CAAA,CAAA;AAChFnR,QAAAA,GAAAA,CAAI7B,EAAE,GAAGnB,IAAAA,CAAKsU,KAAK,CAAC,OAAOrT,CAAAA,GAAIF,CAAIC,GAAAA,CAAAA,GAAIuD,CAAAA,CAAI,EAAA,GAAA,GAAM,OAAOvD,CAAAA,GAAIA,IAAIiQ,EAAC,CAAA,CAAA,CAAA;AACjEjO,QAAAA,GAAAA,CAAI3B,EAAE,GAAGrB,IAAAA,CAAKsU,KAAK,CAAC,OAAOvT,CAAAA,GAAIC,CAAIC,GAAAA,CAAAA,GAAIsD,CAAAA,CAAI,EAAA,GAAA,GAAM,OAAOtD,CAAAA,GAAIA,IAAIgQ,EAAC,CAAA,CAAA,CAAA;AACnE,KAAA,CAAA;AA/vBA;;;;;MANWkC,UAYJ5R,CAAAA,GAMN,GAND,SAAOA,GAAI4B,CAAAA,IAAgB,EAAE3B,KAAiB,EAAEwB,GAAe,EAAQ;AACrEA,QAAAA,GAAAA,CAAI7B,EAAE,GAAGgC,IAAAA,CAAKhC,EAAE,GAAGK,MAAML,EAAE,CAAA;AAC3B6B,QAAAA,GAAAA,CAAI5B,EAAE,GAAG+B,IAAAA,CAAK/B,EAAE,GAAGI,MAAMJ,EAAE,CAAA;AAC3B4B,QAAAA,GAAAA,CAAI3B,EAAE,GAAG8B,IAAAA,CAAK9B,EAAE,GAAGG,MAAMH,EAAE,CAAA;AAC3B2B,QAAAA,GAAAA,CAAIsB,EAAE,GAAGnB,IAAAA,CAAKmB,EAAE,GAAG9C,MAAM8C,EAAE,CAAA;QAC3BtB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MApBWiS,UA0BJzR,CAAAA,QAeN,GAfD,SAAOA,QAASyB,CAAAA,IAAgB,EAAE3B,KAAiB,EAAEwB,GAAe,EAAQ;AAC1E,QAAA,IAAMM,EAAKH,GAAAA,IAAAA,CAAKhC,EAAE,EAChBoC,KAAKJ,IAAK/B,CAAAA,EAAE,EACZoC,EAAAA,GAAKL,IAAK9B,CAAAA,EAAE,EACZkT,EAAAA,GAAKpR,KAAKmB,EAAE,CAAA;AACd,QAAA,IAAMb,EAAKjC,GAAAA,KAAAA,CAAML,EAAE,EACjBuC,KAAKlC,KAAMJ,CAAAA,EAAE,EACbuC,EAAAA,GAAKnC,KAAMH,CAAAA,EAAE,EACbmT,EAAAA,GAAKhT,MAAM8C,EAAE,CAAA;QAEftB,GAAI7B,CAAAA,EAAE,GAAGmC,EAAKkR,GAAAA,EAAAA,GAAKD,KAAK9Q,EAAKF,GAAAA,EAAAA,GAAKI,KAAKH,EAAKE,GAAAA,EAAAA,CAAAA;QAC5CV,GAAI5B,CAAAA,EAAE,GAAGmC,EAAKiR,GAAAA,EAAAA,GAAKD,KAAK7Q,EAAKF,GAAAA,EAAAA,GAAKC,KAAKH,EAAKK,GAAAA,EAAAA,CAAAA;QAC5CX,GAAI3B,CAAAA,EAAE,GAAGmC,EAAKgR,GAAAA,EAAAA,GAAKD,KAAK5Q,EAAKL,GAAAA,EAAAA,GAAKI,KAAKH,EAAKE,GAAAA,EAAAA,CAAAA;QAC5CT,GAAIsB,CAAAA,EAAE,GAAGiQ,EAAKC,GAAAA,EAAAA,GAAKlR,KAAKG,EAAKF,GAAAA,EAAAA,GAAKG,KAAKF,EAAKG,GAAAA,EAAAA,CAAAA;QAC5CX,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;MA3CWiS,WAgDJC,SAMN,GAND,SAAOA,SAAUlT,CAAAA,CAAa,EAAE8C,GAAe,EAAQ;AACrDA,QAAAA,GAAAA,CAAI7B,EAAE,GAAG,CAACjB,CAAAA,CAAEiB,EAAE,CAAA;AACd6B,QAAAA,GAAAA,CAAI5B,EAAE,GAAG,CAAClB,CAAAA,CAAEkB,EAAE,CAAA;AACd4B,QAAAA,GAAAA,CAAI3B,EAAE,GAAG,CAACnB,CAAAA,CAAEmB,EAAE,CAAA;QACd2B,GAAIsB,CAAAA,EAAE,GAAGpE,CAAAA,CAAEoE,EAAE,CAAA;QACbtB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MAxDWiS,WA8DJ/P,GAEN,GAFD,SAAOA,GAAID,CAAAA,IAAgB,EAAE3B,KAAiB,EAAU;QACtD,OAAO2B,IAAAA,CAAKhC,EAAE,GAAGK,KAAAA,CAAML,EAAE,GAAGgC,IAAAA,CAAK/B,EAAE,GAAGI,KAAMJ,CAAAA,EAAE,GAAG+B,IAAK9B,CAAAA,EAAE,GAAGG,KAAMH,CAAAA,EAAE,GAAG8B,IAAKmB,CAAAA,EAAE,GAAG9C,KAAAA,CAAM8C,EAAE,CAAA;AAC1F,KAAA,CAAA;AAEA;;;;;MAlEW6O,WAwEJlT,MAON,GAPD,SAAOA,MAAOkD,CAAAA,IAAgB,EAAE3B,KAAiB,EAAW;AAC1D,QAAA,OACE7B,QAASM,CAAAA,MAAM,CAACkD,IAAAA,CAAKhC,EAAE,EAAEK,KAAAA,CAAML,EAAE,CAAA,IACjCxB,SAASM,MAAM,CAACkD,IAAK/B,CAAAA,EAAE,EAAEI,KAAMJ,CAAAA,EAAE,CACjCzB,IAAAA,QAAAA,CAASM,MAAM,CAACkD,IAAK9B,CAAAA,EAAE,EAAEG,KAAMH,CAAAA,EAAE,CACjC1B,IAAAA,QAAAA,CAASM,MAAM,CAACkD,IAAAA,CAAKmB,EAAE,EAAE9C,MAAM8C,EAAE,CAAA,CAAA;AAErC,KAAA,CAAA;AAEA;;;;;MAjFW6O,UAuFJW,CAAAA,iBAUN,GAVD,SAAOA,iBAAkBC,CAAAA,IAAa,EAAEJ,GAAW,EAAE3Q,GAAe,EAAQ;QAC1E,IAAMyR,UAAAA,GAAatB,UAxFVA,CAwFqBuB,YAAY,CAAA;QAC1C5T,OAAQkB,CAAAA,SAAS,CAAC+R,IAAMU,EAAAA,UAAAA,CAAAA,CAAAA;QACxBd,GAAO,IAAA,GAAA,CAAA;QACP,IAAMzR,CAAAA,GAAIlC,IAAKiT,CAAAA,GAAG,CAACU,GAAAA,CAAAA,CAAAA;AACnB3Q,QAAAA,GAAAA,CAAI7B,EAAE,GAAGsT,UAAWtT,CAAAA,EAAE,GAAGe,CAAAA,CAAAA;AACzBc,QAAAA,GAAAA,CAAI5B,EAAE,GAAGqT,UAAWrT,CAAAA,EAAE,GAAGc,CAAAA,CAAAA;AACzBc,QAAAA,GAAAA,CAAI3B,EAAE,GAAGoT,UAAWpT,CAAAA,EAAE,GAAGa,CAAAA,CAAAA;AACzBc,QAAAA,GAAAA,CAAIsB,EAAE,GAAGtE,IAAKkT,CAAAA,GAAG,CAACS,GAAAA,CAAAA,CAAAA;QAClB3Q,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;;AAMC,MACD,UA1GWiS,CA0GJwB,aAEN,GAFD,SAAOA,aAAAA,CAAc5T,CAAS,EAAEC,CAAS,EAAEC,CAAS,EAAE+B,GAAe,EAAQ;AA1GlEmQ,QAAAA,UAAAA,CA2GEyB,oBAAoB,CAAC5T,CAAGD,EAAAA,CAAAA,EAAGE,CAAG+B,EAAAA,GAAAA,CAAAA,CAAAA;AAC3C,KAAA,CAAA;AAEA;;;;;;AAMC,MACD,UArHWmQ,CAqHJyB,oBAoBN,GApBD,SAAOA,oBAAAA,CAAqBC,GAAW,EAAEC,KAAa,EAAEC,IAAY,EAAE/R,GAAe,EAAQ;AAC3F,QAAA,IAAMgS,WAAWD,IAAO,GAAA,GAAA,CAAA;AACxB,QAAA,IAAME,YAAYH,KAAQ,GAAA,GAAA,CAAA;AAC1B,QAAA,IAAMI,UAAUL,GAAM,GAAA,GAAA,CAAA;QAEtB,IAAMM,OAAAA,GAAUnV,IAAKiT,CAAAA,GAAG,CAAC+B,QAAAA,CAAAA,CAAAA;QACzB,IAAMI,OAAAA,GAAUpV,IAAKkT,CAAAA,GAAG,CAAC8B,QAAAA,CAAAA,CAAAA;QACzB,IAAMK,QAAAA,GAAWrV,IAAKiT,CAAAA,GAAG,CAACgC,SAAAA,CAAAA,CAAAA;QAC1B,IAAMK,QAAAA,GAAWtV,IAAKkT,CAAAA,GAAG,CAAC+B,SAAAA,CAAAA,CAAAA;QAC1B,IAAMM,MAAAA,GAASvV,IAAKiT,CAAAA,GAAG,CAACiC,OAAAA,CAAAA,CAAAA;QACxB,IAAMM,MAAAA,GAASxV,IAAKkT,CAAAA,GAAG,CAACgC,OAAAA,CAAAA,CAAAA;AAExB,QAAA,IAAMO,cAAcD,MAASF,GAAAA,QAAAA,CAAAA;AAC7B,QAAA,IAAMI,cAAcH,MAASF,GAAAA,QAAAA,CAAAA;AAE7BrS,QAAAA,GAAAA,CAAI7B,EAAE,GAAGqU,MAAAA,GAASH,QAAWD,GAAAA,OAAAA,GAAUG,SAASD,QAAWH,GAAAA,OAAAA,CAAAA;AAC3DnS,QAAAA,GAAAA,CAAI5B,EAAE,GAAGmU,MAAAA,GAASD,QAAWF,GAAAA,OAAAA,GAAUI,SAASH,QAAWF,GAAAA,OAAAA,CAAAA;AAC3DnS,QAAAA,GAAAA,CAAI3B,EAAE,GAAGoU,WAAcN,GAAAA,OAAAA,GAAUO,WAAcN,GAAAA,OAAAA,CAAAA;AAC/CpS,QAAAA,GAAAA,CAAIsB,EAAE,GAAGmR,WAAcL,GAAAA,OAAAA,GAAUM,WAAcP,GAAAA,OAAAA,CAAAA;QAC/CnS,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;MA3IWiS,WAgJJwC,iBAgDN,GAhDD,SAAOA,iBAAkBvT,CAAAA,CAAY,EAAEY,GAAe,EAAQ;QAC5D,IAAMsJ,EAAAA,GAAKlK,EAAEgC,QAAQ,CAAA;AACrB,QAAA,IAAMmI,GAAMD,GAAAA,EAAE,CAAC,CAAA,CAAE,EACfE,GAAAA,GAAMF,EAAE,CAAC,CAAE,CAAA,EACXG,GAAMH,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACb,QAAA,IAAMK,GAAML,GAAAA,EAAE,CAAC,CAAA,CAAE,EACfM,GAAAA,GAAMN,EAAE,CAAC,CAAE,CAAA,EACXO,GAAMP,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACb,QAAA,IAAMS,GAAMT,GAAAA,EAAE,CAAC,CAAA,CAAE,EACfU,GAAAA,GAAMV,EAAE,CAAC,CAAE,CAAA,EACXW,GAAMX,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;QACb,IAAMrK,KAAAA,GAAQsK,MAAMK,GAAMK,GAAAA,GAAAA,CAAAA;AAC1B,QAAA,IAAIpL,IAAM+T,EAAAA,IAAAA,CAAAA;AAEV,QAAA,IAAI3T,QAAQ,CAAG,EAAA;YACbJ,IAAO7B,GAAAA,IAAAA,CAAK6B,IAAI,CAACI,KAAQ,GAAA,GAAA,CAAA,CAAA;YACzBe,GAAIsB,CAAAA,EAAE,GAAGzC,IAAO,GAAA,GAAA,CAAA;AAChBA,YAAAA,IAAAA,GAAO,GAAMA,GAAAA,IAAAA,CAAAA;AAEbmB,YAAAA,GAAAA,CAAI7B,EAAE,GAAI0L,CAAAA,GAAAA,GAAMG,GAAE,IAAKnL,IAAAA,CAAAA;AACvBmB,YAAAA,GAAAA,CAAI5B,EAAE,GAAI2L,CAAAA,GAAAA,GAAMN,GAAE,IAAK5K,IAAAA,CAAAA;AACvBmB,YAAAA,GAAAA,CAAI3B,EAAE,GAAImL,CAAAA,GAAAA,GAAMG,GAAE,IAAK9K,IAAAA,CAAAA;AACzB,SAAA,MAAO,IAAI0K,GAAAA,IAAOK,GAAOL,IAAAA,GAAAA,IAAOU,GAAK,EAAA;AACnCpL,YAAAA,IAAAA,GAAO7B,IAAK6B,CAAAA,IAAI,CAAC,GAAA,GAAM0K,MAAMK,GAAMK,GAAAA,GAAAA,CAAAA,CAAAA;AACnC2I,YAAAA,IAAAA,GAAO,GAAM/T,GAAAA,IAAAA,CAAAA;YAEbmB,GAAI7B,CAAAA,EAAE,GAAG,GAAMU,GAAAA,IAAAA,CAAAA;AACfmB,YAAAA,GAAAA,CAAI5B,EAAE,GAAIoL,CAAAA,GAAAA,GAAMG,GAAE,IAAKiJ,IAAAA,CAAAA;AACvB5S,YAAAA,GAAAA,CAAI3B,EAAE,GAAIoL,CAAAA,GAAAA,GAAMM,GAAE,IAAK6I,IAAAA,CAAAA;AACvB5S,YAAAA,GAAAA,CAAIsB,EAAE,GAAIuI,CAAAA,GAAAA,GAAMG,GAAE,IAAK4I,IAAAA,CAAAA;SAClB,MAAA,IAAIhJ,MAAMK,GAAK,EAAA;AACpBpL,YAAAA,IAAAA,GAAO7B,IAAK6B,CAAAA,IAAI,CAAC,GAAA,GAAM+K,MAAML,GAAMU,GAAAA,GAAAA,CAAAA,CAAAA;AACnC2I,YAAAA,IAAAA,GAAO,GAAM/T,GAAAA,IAAAA,CAAAA;AAEbmB,YAAAA,GAAAA,CAAI7B,EAAE,GAAIwL,CAAAA,GAAAA,GAAMH,GAAE,IAAKoJ,IAAAA,CAAAA;YACvB5S,GAAI5B,CAAAA,EAAE,GAAG,GAAMS,GAAAA,IAAAA,CAAAA;AACfmB,YAAAA,GAAAA,CAAI3B,EAAE,GAAI2L,CAAAA,GAAAA,GAAMH,GAAE,IAAK+I,IAAAA,CAAAA;AACvB5S,YAAAA,GAAAA,CAAIsB,EAAE,GAAIyI,CAAAA,GAAAA,GAAMN,GAAE,IAAKmJ,IAAAA,CAAAA;SAClB,MAAA;AACL/T,YAAAA,IAAAA,GAAO7B,IAAK6B,CAAAA,IAAI,CAAC,GAAA,GAAMoL,MAAMV,GAAMK,GAAAA,GAAAA,CAAAA,CAAAA;AACnCgJ,YAAAA,IAAAA,GAAO,GAAM/T,GAAAA,IAAAA,CAAAA;AAEbmB,YAAAA,GAAAA,CAAI7B,EAAE,GAAIsL,CAAAA,GAAAA,GAAMM,GAAE,IAAK6I,IAAAA,CAAAA;AACvB5S,YAAAA,GAAAA,CAAI5B,EAAE,GAAIyL,CAAAA,GAAAA,GAAMG,GAAE,IAAK4I,IAAAA,CAAAA;YACvB5S,GAAI3B,CAAAA,EAAE,GAAG,GAAMQ,GAAAA,IAAAA,CAAAA;AACfmB,YAAAA,GAAAA,CAAIsB,EAAE,GAAIkI,CAAAA,GAAAA,GAAMG,GAAE,IAAKiJ,IAAAA,CAAAA;SACxB;QACD5S,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;MAlMWiS,WAuMJpE,MAWN,GAXD,SAAOA,MAAO7O,CAAAA,CAAa,EAAE8C,GAAe,EAAQ;AAClD,QAAA,IAAQ7B,CAAIJ,GAA2Bb,CAA/BiB,CAAAA,EAAAA,EAAOC,CAAwBlB,GAAAA,CAAAA,CAAxBkB,EAAOC,EAAIJ,CAAaf,GAAAA,CAAAA,CAAjBmB,EAAOiD,EAAIC,IAAMrE,CAAVoE,CAAAA,EAAAA,CAAAA;AAC7B,QAAA,IAAMlB,MAAMrC,CAAIA,GAAAA,CAAAA,GAAIC,IAAIA,CAAIC,GAAAA,CAAAA,GAAIA,IAAIsD,CAAIA,GAAAA,CAAAA,CAAAA;QACxC,IAAInB,GAAAA,GAAMzD,QAASU,CAAAA,aAAa,EAAE;AAChC,YAAA,IAAMwV,SAAS,GAAMzS,GAAAA,GAAAA,CAAAA;YACrBJ,GAAI7B,CAAAA,EAAE,GAAG,CAACJ,CAAI8U,GAAAA,MAAAA,CAAAA;YACd7S,GAAI5B,CAAAA,EAAE,GAAG,CAACJ,CAAI6U,GAAAA,MAAAA,CAAAA;YACd7S,GAAI3B,CAAAA,EAAE,GAAG,CAACJ,CAAI4U,GAAAA,MAAAA,CAAAA;YACd7S,GAAIsB,CAAAA,EAAE,GAAGC,CAAIsR,GAAAA,MAAAA,CAAAA;YACb7S,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;SAC3C;AACH,KAAA,CAAA;AAEA;;;;;;AAMC,MACD,UA3NWiS,CA2NJrP,IAeN,GAfD,SAAOA,IAAAA,CAAKC,KAAiB,EAAEC,GAAe,EAAEC,CAAS,EAAEjB,GAAe,EAAQ;AAChF,QAAA,IAAM+N,MAAM,GAAM9M,GAAAA,CAAAA,CAAAA;AAClB,QAAA,IAAIkP,UAAW/P,CAAAA,GAAG,CAACW,KAAAA,EAAOC,QAAQ,CAAG,EAAA;YACnChB,GAAI7B,CAAAA,EAAE,GAAG4C,KAAM5C,CAAAA,EAAE,GAAG4P,GAAM/M,GAAAA,GAAAA,CAAI7C,EAAE,GAAG8C,CAAAA,CAAAA;YACnCjB,GAAI5B,CAAAA,EAAE,GAAG2C,KAAM3C,CAAAA,EAAE,GAAG2P,GAAM/M,GAAAA,GAAAA,CAAI5C,EAAE,GAAG6C,CAAAA,CAAAA;YACnCjB,GAAI3B,CAAAA,EAAE,GAAG0C,KAAM1C,CAAAA,EAAE,GAAG0P,GAAM/M,GAAAA,GAAAA,CAAI3C,EAAE,GAAG4C,CAAAA,CAAAA;YACnCjB,GAAIsB,CAAAA,EAAE,GAAGP,KAAMO,CAAAA,EAAE,GAAGyM,GAAM/M,GAAAA,GAAAA,CAAIM,EAAE,GAAGL,CAAAA,CAAAA;SAC9B,MAAA;YACLjB,GAAI7B,CAAAA,EAAE,GAAG4C,KAAM5C,CAAAA,EAAE,GAAG4P,GAAM/M,GAAAA,GAAAA,CAAI7C,EAAE,GAAG8C,CAAAA,CAAAA;YACnCjB,GAAI5B,CAAAA,EAAE,GAAG2C,KAAM3C,CAAAA,EAAE,GAAG2P,GAAM/M,GAAAA,GAAAA,CAAI5C,EAAE,GAAG6C,CAAAA,CAAAA;YACnCjB,GAAI3B,CAAAA,EAAE,GAAG0C,KAAM1C,CAAAA,EAAE,GAAG0P,GAAM/M,GAAAA,GAAAA,CAAI3C,EAAE,GAAG4C,CAAAA,CAAAA;YACnCjB,GAAIsB,CAAAA,EAAE,GAAGP,KAAMO,CAAAA,EAAE,GAAGyM,GAAM/M,GAAAA,GAAAA,CAAIM,EAAE,GAAGL,CAAAA,CAAAA;SACpC;AAEDjB,QAAAA,GAAAA,CAAIhB,SAAS,EAAA,CAAA;AACf,KAAA,CAAA;AAEA;;;;;;AAMC,MACD,UAnPWmR,CAmPJ2C,KAqBN,GArBD,SAAOA,KAAAA,CAAM/R,KAAiB,EAAEC,GAAe,EAAE+R,MAAc,EAAE/S,GAAe,EAAQ;QACtF,IAAIgT,QAAAA,CAAAA;QACJ,IAAI3M,OAAAA,CAAAA;AACJ,QAAA,IAAMjG,GAAM+P,GAtPHA,UAsPc/P,CAAAA,GAAG,CAACW,KAAOC,EAAAA,GAAAA,CAAAA,CAAAA;AAElC,QAAA,IAAIhE,KAAKI,GAAG,CAACgD,OAAO,GAAMzD,GAAAA,QAAAA,CAASU,aAAa,EAAE;AAChDgJ,YAAAA,OAAAA,GAAU,GAAM0M,GAAAA,MAAAA,CAAAA;YAChBC,QAAWD,GAAAA,MAAAA,GAAS/V,IAAKoU,CAAAA,IAAI,CAAChR,GAAAA,CAAAA,CAAAA;SACzB,MAAA;AACL,YAAA,IAAMkQ,OAAOtT,IAAKsT,CAAAA,IAAI,CAACtT,IAAAA,CAAKI,GAAG,CAACgD,GAAAA,CAAAA,CAAAA,CAAAA;AAChC,YAAA,IAAM6S,MAAS,GAAA,GAAA,GAAMjW,IAAKiT,CAAAA,GAAG,CAACK,IAAAA,CAAAA,CAAAA;YAE9BjK,OAAUrJ,GAAAA,IAAAA,CAAKiT,GAAG,CAAE,CAAA,GAAM8C,GAAAA,MAAK,IAAKzC,IAAQ2C,CAAAA,GAAAA,MAAAA,CAAAA;YAC5CD,QAAWhW,GAAAA,IAAAA,CAAKiT,GAAG,CAAC8C,MAAAA,GAASzC,QAAQ2C,MAASjW,GAAAA,IAAAA,CAAKoU,IAAI,CAAChR,GAAAA,CAAAA,CAAAA;SACzD;QAEDJ,GAAIjC,CAAAA,CAAC,GAAGsI,OAAUtF,GAAAA,KAAAA,CAAMhD,CAAC,GAAGiV,QAAAA,GAAWhS,IAAIjD,CAAC,CAAA;QAC5CiC,GAAIhC,CAAAA,CAAC,GAAGqI,OAAUtF,GAAAA,KAAAA,CAAM/C,CAAC,GAAGgV,QAAAA,GAAWhS,IAAIhD,CAAC,CAAA;QAC5CgC,GAAI/B,CAAAA,CAAC,GAAGoI,OAAUtF,GAAAA,KAAAA,CAAM9C,CAAC,GAAG+U,QAAAA,GAAWhS,IAAI/C,CAAC,CAAA;QAC5C+B,GAAIuB,CAAAA,CAAC,GAAG8E,OAAUtF,GAAAA,KAAAA,CAAMQ,CAAC,GAAGyR,QAAAA,GAAWhS,IAAIO,CAAC,CAAA;QAC5CvB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;MA1QWiS,WA+QJnR,SAWN,GAXD,SAAOA,SAAU9B,CAAAA,CAAa,EAAE8C,GAAe,EAAQ;QACrD,IAAQ7B,EAAAA,GAAmBjB,CAAnBiB,CAAAA,EAAAA,EAAIC,EAAelB,GAAAA,CAAAA,CAAfkB,IAAIC,EAAWnB,GAAAA,CAAAA,CAAXmB,EAAIiD,EAAAA,EAAAA,GAAOpE,CAAPoE,CAAAA,EAAAA,CAAAA;QACpB,IAAIJ,GAAAA,GAAMlE,IAAK6B,CAAAA,IAAI,CAACV,EAAAA,GAAKA,KAAKC,EAAKA,GAAAA,EAAAA,GAAKC,EAAKA,GAAAA,EAAAA,GAAKiD,EAAKA,GAAAA,EAAAA,CAAAA,CAAAA;QACvD,IAAIJ,GAAAA,GAAMvE,QAASU,CAAAA,aAAa,EAAE;AAChC6D,YAAAA,GAAAA,GAAM,CAAIA,GAAAA,GAAAA,CAAAA;YACVlB,GAAI7B,CAAAA,EAAE,GAAGA,EAAK+C,GAAAA,GAAAA,CAAAA;YACdlB,GAAI5B,CAAAA,EAAE,GAAGA,EAAK8C,GAAAA,GAAAA,CAAAA;YACdlB,GAAI3B,CAAAA,EAAE,GAAGA,EAAK6C,GAAAA,GAAAA,CAAAA;YACdlB,GAAIsB,CAAAA,EAAE,GAAGA,EAAKJ,GAAAA,GAAAA,CAAAA;YACdlB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;SAC3C;AACH,KAAA,CAAA;AAEA;;;;MA5RWiS,WAiSJ+C,SAUN,GAVD,SAAOA,SAAUvC,CAAAA,GAAW,EAAE3Q,GAAe,EAAQ;QACnD2Q,GAAO,IAAA,GAAA,CAAA;QACP,IAAMzR,CAAAA,GAAIlC,IAAKiT,CAAAA,GAAG,CAACU,GAAAA,CAAAA,CAAAA;QACnB,IAAM5L,CAAAA,GAAI/H,IAAKkT,CAAAA,GAAG,CAACS,GAAAA,CAAAA,CAAAA;AAEnB3Q,QAAAA,GAAAA,CAAI7B,EAAE,GAAGe,CAAAA,CAAAA;AACTc,QAAAA,GAAAA,CAAI5B,EAAE,GAAG,CAAA,CAAA;AACT4B,QAAAA,GAAAA,CAAI3B,EAAE,GAAG,CAAA,CAAA;AACT2B,QAAAA,GAAAA,CAAIsB,EAAE,GAAGyD,CAAAA,CAAAA;QACT/E,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;MA7SWiS,WAkTJgD,SAUN,GAVD,SAAOA,SAAUxC,CAAAA,GAAW,EAAE3Q,GAAe,EAAQ;QACnD2Q,GAAO,IAAA,GAAA,CAAA;QACP,IAAMzR,CAAAA,GAAIlC,IAAKiT,CAAAA,GAAG,CAACU,GAAAA,CAAAA,CAAAA;QACnB,IAAM5L,CAAAA,GAAI/H,IAAKkT,CAAAA,GAAG,CAACS,GAAAA,CAAAA,CAAAA;AAEnB3Q,QAAAA,GAAAA,CAAI7B,EAAE,GAAG,CAAA,CAAA;AACT6B,QAAAA,GAAAA,CAAI5B,EAAE,GAAGc,CAAAA,CAAAA;AACTc,QAAAA,GAAAA,CAAI3B,EAAE,GAAG,CAAA,CAAA;AACT2B,QAAAA,GAAAA,CAAIsB,EAAE,GAAGyD,CAAAA,CAAAA;QACT/E,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;MA9TWiS,WAmUJiD,SAUN,GAVD,SAAOA,SAAUzC,CAAAA,GAAW,EAAE3Q,GAAe,EAAQ;QACnD2Q,GAAO,IAAA,GAAA,CAAA;QACP,IAAMzR,CAAAA,GAAIlC,IAAKiT,CAAAA,GAAG,CAACU,GAAAA,CAAAA,CAAAA;QACnB,IAAM5L,CAAAA,GAAI/H,IAAKkT,CAAAA,GAAG,CAACS,GAAAA,CAAAA,CAAAA;AAEnB3Q,QAAAA,GAAAA,CAAI7B,EAAE,GAAG,CAAA,CAAA;AACT6B,QAAAA,GAAAA,CAAI5B,EAAE,GAAG,CAAA,CAAA;AACT4B,QAAAA,GAAAA,CAAI3B,EAAE,GAAGa,CAAAA,CAAAA;AACTc,QAAAA,GAAAA,CAAIsB,EAAE,GAAGyD,CAAAA,CAAAA;QACT/E,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MA/UWiS,UAqVJO,CAAAA,OAWN,GAXD,SAAOA,OAAQlR,CAAAA,UAAsB,EAAEmR,GAAW,EAAE3Q,GAAe,EAAQ;QACzE,IAAQ7B,EAAAA,GAAmBqB,UAAnBrB,CAAAA,EAAAA,EAAIC,EAAeoB,GAAAA,UAAAA,CAAfpB,IAAIC,EAAWmB,GAAAA,UAAAA,CAAXnB,EAAIiD,EAAAA,EAAAA,GAAO9B,UAAP8B,CAAAA,EAAAA,CAAAA;QACpBqP,GAAO,IAAA,GAAA,CAAA;QACP,IAAMlQ,EAAAA,GAAKzD,IAAKiT,CAAAA,GAAG,CAACU,GAAAA,CAAAA,CAAAA;QACpB,IAAMa,EAAAA,GAAKxU,IAAKkT,CAAAA,GAAG,CAACS,GAAAA,CAAAA,CAAAA;AAEpB3Q,QAAAA,GAAAA,CAAI7B,EAAE,GAAGA,EAAKqT,GAAAA,EAAAA,GAAKlQ,EAAKb,GAAAA,EAAAA,CAAAA;AACxBT,QAAAA,GAAAA,CAAI5B,EAAE,GAAGA,EAAKoT,GAAAA,EAAAA,GAAKnT,EAAKoC,GAAAA,EAAAA,CAAAA;AACxBT,QAAAA,GAAAA,CAAI3B,EAAE,GAAGA,EAAKmT,GAAAA,EAAAA,GAAKpT,EAAKqC,GAAAA,EAAAA,CAAAA;AACxBT,QAAAA,GAAAA,CAAIsB,EAAE,GAAGA,EAAKkQ,GAAAA,EAAAA,GAAKrT,EAAKsC,GAAAA,EAAAA,CAAAA;QACxBT,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MAlWWiS,UAwWJS,CAAAA,OAWN,GAXD,SAAOA,OAAQpR,CAAAA,UAAsB,EAAEmR,GAAW,EAAE3Q,GAAe,EAAQ;QACzE,IAAQ7B,EAAAA,GAAmBqB,UAAnBrB,CAAAA,EAAAA,EAAIC,EAAeoB,GAAAA,UAAAA,CAAfpB,IAAIC,EAAWmB,GAAAA,UAAAA,CAAXnB,EAAIiD,EAAAA,EAAAA,GAAO9B,UAAP8B,CAAAA,EAAAA,CAAAA;QACpBqP,GAAO,IAAA,GAAA,CAAA;QACP,IAAMjQ,EAAAA,GAAK1D,IAAKiT,CAAAA,GAAG,CAACU,GAAAA,CAAAA,CAAAA;QACpB,IAAMa,EAAAA,GAAKxU,IAAKkT,CAAAA,GAAG,CAACS,GAAAA,CAAAA,CAAAA;AAEpB3Q,QAAAA,GAAAA,CAAI7B,EAAE,GAAGA,EAAKqT,GAAAA,EAAAA,GAAKnT,EAAKqC,GAAAA,EAAAA,CAAAA;AACxBV,QAAAA,GAAAA,CAAI5B,EAAE,GAAGA,EAAKoT,GAAAA,EAAAA,GAAKlQ,EAAKZ,GAAAA,EAAAA,CAAAA;AACxBV,QAAAA,GAAAA,CAAI3B,EAAE,GAAGA,EAAKmT,GAAAA,EAAAA,GAAKrT,EAAKuC,GAAAA,EAAAA,CAAAA;AACxBV,QAAAA,GAAAA,CAAIsB,EAAE,GAAGA,EAAKkQ,GAAAA,EAAAA,GAAKpT,EAAKsC,GAAAA,EAAAA,CAAAA;QACxBV,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MArXWiS,UA2XJU,CAAAA,OAWN,GAXD,SAAOA,OAAQrR,CAAAA,UAAsB,EAAEmR,GAAW,EAAE3Q,GAAe,EAAQ;QACzE,IAAQ7B,EAAAA,GAAmBqB,UAAnBrB,CAAAA,EAAAA,EAAIC,EAAeoB,GAAAA,UAAAA,CAAfpB,IAAIC,EAAWmB,GAAAA,UAAAA,CAAXnB,EAAIiD,EAAAA,EAAAA,GAAO9B,UAAP8B,CAAAA,EAAAA,CAAAA;QACpBqP,GAAO,IAAA,GAAA,CAAA;QACP,IAAMhQ,EAAAA,GAAK3D,IAAKiT,CAAAA,GAAG,CAACU,GAAAA,CAAAA,CAAAA;QACpB,IAAMa,EAAAA,GAAKxU,IAAKkT,CAAAA,GAAG,CAACS,GAAAA,CAAAA,CAAAA;AAEpB3Q,QAAAA,GAAAA,CAAI7B,EAAE,GAAGA,EAAKqT,GAAAA,EAAAA,GAAKpT,EAAKuC,GAAAA,EAAAA,CAAAA;AACxBX,QAAAA,GAAAA,CAAI5B,EAAE,GAAGA,EAAKoT,GAAAA,EAAAA,GAAKrT,EAAKwC,GAAAA,EAAAA,CAAAA;AACxBX,QAAAA,GAAAA,CAAI3B,EAAE,GAAGA,EAAKmT,GAAAA,EAAAA,GAAKlQ,EAAKX,GAAAA,EAAAA,CAAAA;AACxBX,QAAAA,GAAAA,CAAIsB,EAAE,GAAGA,EAAKkQ,GAAAA,EAAAA,GAAKnT,EAAKsC,GAAAA,EAAAA,CAAAA;QACxBX,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MAxYWiS,UA8YJlR,CAAAA,KAMN,GAND,SAAOA,KAAM/B,CAAAA,CAAa,EAAEgC,CAAS,EAAEc,GAAe,EAAQ;AAC5DA,QAAAA,GAAAA,CAAI7B,EAAE,GAAGjB,CAAEiB,CAAAA,EAAE,GAAGe,CAAAA,CAAAA;AAChBc,QAAAA,GAAAA,CAAI5B,EAAE,GAAGlB,CAAEkB,CAAAA,EAAE,GAAGc,CAAAA,CAAAA;AAChBc,QAAAA,GAAAA,CAAI3B,EAAE,GAAGnB,CAAEmB,CAAAA,EAAE,GAAGa,CAAAA,CAAAA;AAChBc,QAAAA,GAAAA,CAAIsB,EAAE,GAAGpE,CAAEoE,CAAAA,EAAE,GAAGpC,CAAAA,CAAAA;QAChBc,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AApZWiS,IAAAA,aAAAA,CAAAA,UAAAA,EAAAA;;YAoaApS,GAAAA,EAAAA,GAAAA;;;AADV,MACD,SAAuB,GAAA,GAAA;gBACrB,OAAO,IAAI,CAACI,EAAE,CAAA;AAChB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa6D,KAAa,EAAE;gBAC1B,IAAI,CAAC7D,EAAE,GAAG6D,KAAAA,CAAAA;AACV,gBAAA,IAAI,CAAC9D,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC9C,aAAA;;;YAKWF,GAAAA,EAAAA,GAAAA;;;AADV,MACD,SAAuB,GAAA,GAAA;gBACrB,OAAO,IAAI,CAACI,EAAE,CAAA;AAChB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa4D,KAAa,EAAE;gBAC1B,IAAI,CAAC5D,EAAE,GAAG4D,KAAAA,CAAAA;AACV,gBAAA,IAAI,CAAC9D,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC9C,aAAA;;;YAKWD,GAAAA,EAAAA,GAAAA;;;AADV,MACD,SAAuB,GAAA,GAAA;gBACrB,OAAO,IAAI,CAACI,EAAE,CAAA;AAChB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa2D,KAAa,EAAE;gBAC1B,IAAI,CAAC3D,EAAE,GAAG2D,KAAAA,CAAAA;AACV,gBAAA,IAAI,CAAC9D,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC9C,aAAA;;;YAKWmV,GAAAA,EAAAA,YAAAA;;;AADV,MACD,SAAiC,GAAA,GAAA;AAC/B,gBAAA,OACErW,KAAKI,GAAG,CAAC,IAAI,CAACe,EAAE,GAAG,IAAI,CAACA,EAAE,GAAG,IAAI,CAACC,EAAE,GAAG,IAAI,CAACA,EAAE,GAAG,IAAI,CAACC,EAAE,GAAG,IAAI,CAACA,EAAE,GAAG,IAAI,CAACiD,EAAE,GAAG,IAAI,CAACA,EAAE,GAAG,CAAA,CAAA,GACzF3E,SAASU,aAAa,CAAA;AAE1B,aAAA;;;YAKWkE,GAAAA,EAAAA,GAAAA;;;AADV,MACD,SAAe,GAAA,GAAA;gBACb,OAAO,IAAI,CAACD,EAAE,CAAA;AAChB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAaU,KAAa,EAAE;gBAC1B,IAAI,CAACV,EAAE,GAAGU,KAAAA,CAAAA;AACV,gBAAA,IAAI,CAAC9D,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC9C,aAAA;;;AAzdWiS,IAAAA,OAAAA,UAAAA,CAAAA;AAmyBZ,CAAA,GAAA;;qBAnyBYA,UAEKuB,CAAAA,YAAAA,GAAe,IAAI5T,OAAAA,EAAAA,CAAAA;;;qBAFxBqS,UAIKe,CAAAA,UAAAA,GAAa,IAAIf,UAAAA,EAAAA,CAAAA;;;ACNnC;;AAEC,IACM,IAAA,MAAMmD,4BAAN;AAAMA,IAAAA,SAAAA,MAAAA,CA6yBT/J,GAAe,EACfC,GAAe,EACfC,GAAe,EACfC,GAAe,EACfC,GAAe,EACfC,GAAe,EACfC,GAAe,EACfC,GAAe,EACfC,GAAe,EACfC,GAAe,EACfC,GAAe,EACfC,GAAe,EACfC,GAAe,EACfC,GAAe,EACfC,GAAe,EACfC,GAAe,EAAA;AAfff,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AACdC,QAAAA,IAAAA,gBAAAA,GAAc,GAAA,CAAA,CAAA;AA/ChB;;;;;;;;;MAUAlJ,IAAAA,CAAAA,QAAAA,GAAyB,IAAI4J,YAAa,CAAA,EAAA,CAAA,CAAA;QAuCxC,IAAM7J,CAAAA,GAAkB,IAAI,CAACC,QAAQ,CAAA;QAErCD,CAAC,CAAC,EAAE,GAAGoI,GAAAA,CAAAA;QACPpI,CAAC,CAAC,EAAE,GAAGqI,GAAAA,CAAAA;QACPrI,CAAC,CAAC,EAAE,GAAGsI,GAAAA,CAAAA;QACPtI,CAAC,CAAC,EAAE,GAAGuI,GAAAA,CAAAA;QAEPvI,CAAC,CAAC,EAAE,GAAGwI,GAAAA,CAAAA;QACPxI,CAAC,CAAC,EAAE,GAAGyI,GAAAA,CAAAA;QACPzI,CAAC,CAAC,EAAE,GAAG0I,GAAAA,CAAAA;QACP1I,CAAC,CAAC,EAAE,GAAG2I,GAAAA,CAAAA;QAEP3I,CAAC,CAAC,EAAE,GAAG4I,GAAAA,CAAAA;QACP5I,CAAC,CAAC,EAAE,GAAG6I,GAAAA,CAAAA;QACP7I,CAAC,CAAC,GAAG,GAAG8I,GAAAA,CAAAA;QACR9I,CAAC,CAAC,GAAG,GAAG+I,GAAAA,CAAAA;QAER/I,CAAC,CAAC,GAAG,GAAGgJ,GAAAA,CAAAA;QACRhJ,CAAC,CAAC,GAAG,GAAGiJ,GAAAA,CAAAA;QACRjJ,CAAC,CAAC,GAAG,GAAGkJ,GAAAA,CAAAA;QACRlJ,CAAC,CAAC,GAAG,GAAGmJ,GAAAA,CAAAA;;AAl1BCgJ,IAAAA,IAAAA,MAAAA,GAAAA,MAAAA,CAAAA,SAAAA,CAAAA;AAq1BX;;;;;;;;;;;;;;;;;;;AAmBC,MACDhV,OAAAA,GAyCC,GAzCDA,SAAAA,GAAAA,CACEiL,GAAW,EACXC,GAAW,EACXC,GAAW,EACXC,GAAW,EACXC,GAAW,EACXC,GAAW,EACXC,GAAW,EACXC,GAAW,EACXC,GAAW,EACXC,GAAW,EACXC,GAAW,EACXC,GAAW,EACXC,GAAW,EACXC,GAAW,EACXC,GAAW,EACXC,GAAW,EACH;QACR,IAAMnJ,CAAAA,GAAI,IAAI,CAACC,QAAQ,CAAA;QAEvBD,CAAC,CAAC,EAAE,GAAGoI,GAAAA,CAAAA;QACPpI,CAAC,CAAC,EAAE,GAAGqI,GAAAA,CAAAA;QACPrI,CAAC,CAAC,EAAE,GAAGsI,GAAAA,CAAAA;QACPtI,CAAC,CAAC,EAAE,GAAGuI,GAAAA,CAAAA;QAEPvI,CAAC,CAAC,EAAE,GAAGwI,GAAAA,CAAAA;QACPxI,CAAC,CAAC,EAAE,GAAGyI,GAAAA,CAAAA;QACPzI,CAAC,CAAC,EAAE,GAAG0I,GAAAA,CAAAA;QACP1I,CAAC,CAAC,EAAE,GAAG2I,GAAAA,CAAAA;QAEP3I,CAAC,CAAC,EAAE,GAAG4I,GAAAA,CAAAA;QACP5I,CAAC,CAAC,EAAE,GAAG6I,GAAAA,CAAAA;QACP7I,CAAC,CAAC,GAAG,GAAG8I,GAAAA,CAAAA;QACR9I,CAAC,CAAC,GAAG,GAAG+I,GAAAA,CAAAA;QAER/I,CAAC,CAAC,GAAG,GAAGgJ,GAAAA,CAAAA;QACRhJ,CAAC,CAAC,GAAG,GAAGiJ,GAAAA,CAAAA;QACRjJ,CAAC,CAAC,GAAG,GAAGkJ,GAAAA,CAAAA;QACRlJ,CAAC,CAAC,GAAG,GAAGmJ,GAAAA,CAAAA;AAER,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACD5L,OAAAA,QAGC,GAHDA,SAAAA,QAAAA,CAASF,KAAa,EAAU;AAz5BrB8U,QAAAA,MAAAA,CA05BF5U,QAAQ,CAAC,IAAI,EAAEF,OAAO,IAAI,CAAA,CAAA;AACjC,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACDyM,MAAAA,CAAAA,WAmCC,GAnCDA,SAAAA,WAAsB,GAAA;QACpB,IAAM9J,CAAAA,GAAI,IAAI,CAACC,QAAQ,CAAA;AAEvB,QAAA,IAAM8J,MAAM/J,CAAC,CAAC,EAAE,EACdgK,GAAAA,GAAMhK,CAAC,CAAC,CAAA,CAAE,EACViK,GAAAA,GAAMjK,CAAC,CAAC,CAAA,CAAE,EACV2N,GAAM3N,GAAAA,CAAC,CAAC,CAAE,CAAA,CAAA;AACZ,QAAA,IAAMkK,MAAMlK,CAAC,CAAC,EAAE,EACdmK,GAAAA,GAAMnK,CAAC,CAAC,CAAA,CAAE,EACVoK,GAAAA,GAAMpK,CAAC,CAAC,CAAA,CAAE,EACV4N,GAAM5N,GAAAA,CAAC,CAAC,CAAE,CAAA,CAAA;AACZ,QAAA,IAAMqK,MAAMrK,CAAC,CAAC,EAAE,EACdsK,GAAAA,GAAMtK,CAAC,CAAC,CAAA,CAAE,EACVuK,GAAAA,GAAMvK,CAAC,CAAC,EAAA,CAAG,EACX6N,GAAM7N,GAAAA,CAAC,CAAC,EAAG,CAAA,CAAA;AACb,QAAA,IAAM8N,MAAM9N,CAAC,CAAC,GAAG,EACf+N,GAAAA,GAAM/N,CAAC,CAAC,EAAA,CAAG,EACXgO,GAAAA,GAAMhO,CAAC,CAAC,EAAA,CAAG,EACXiO,GAAMjO,GAAAA,CAAC,CAAC,EAAG,CAAA,CAAA;QAEb,IAAMkO,GAAAA,GAAMnE,GAAMI,GAAAA,GAAAA,GAAMH,GAAME,GAAAA,GAAAA,CAAAA;QAC9B,IAAMiE,GAAAA,GAAMpE,GAAMK,GAAAA,GAAAA,GAAMH,GAAMC,GAAAA,GAAAA,CAAAA;QAC9B,IAAMkE,GAAAA,GAAMrE,GAAM6D,GAAAA,GAAAA,GAAMD,GAAMzD,GAAAA,GAAAA,CAAAA;QAC9B,IAAMmE,GAAAA,GAAMrE,GAAMI,GAAAA,GAAAA,GAAMH,GAAME,GAAAA,GAAAA,CAAAA;QAC9B,IAAMmE,GAAAA,GAAMtE,GAAM4D,GAAAA,GAAAA,GAAMD,GAAMxD,GAAAA,GAAAA,CAAAA;QAC9B,IAAMoE,GAAAA,GAAMtE,GAAM2D,GAAAA,GAAAA,GAAMD,GAAMvD,GAAAA,GAAAA,CAAAA;QAC9B,IAAMoE,GAAAA,GAAMnE,GAAM0D,GAAAA,GAAAA,GAAMzD,GAAMwD,GAAAA,GAAAA,CAAAA;QAC9B,IAAMW,GAAAA,GAAMpE,GAAM2D,GAAAA,GAAAA,GAAMzD,GAAMuD,GAAAA,GAAAA,CAAAA;QAC9B,IAAMY,GAAAA,GAAMrE,GAAM4D,GAAAA,GAAAA,GAAMJ,GAAMC,GAAAA,GAAAA,CAAAA;QAC9B,IAAMa,GAAAA,GAAMrE,GAAM0D,GAAAA,GAAAA,GAAMzD,GAAMwD,GAAAA,GAAAA,CAAAA;QAC9B,IAAMa,GAAAA,GAAMtE,GAAM2D,GAAAA,GAAAA,GAAMJ,GAAME,GAAAA,GAAAA,CAAAA;QAC9B,IAAMc,GAAAA,GAAMtE,GAAM0D,GAAAA,GAAAA,GAAMJ,GAAMG,GAAAA,GAAAA,CAAAA;;QAG9B,OAAOE,GAAAA,GAAMW,GAAMV,GAAAA,GAAAA,GAAMS,GAAMR,GAAAA,GAAAA,GAAMO,MAAMN,GAAMK,GAAAA,GAAAA,GAAMJ,GAAMG,GAAAA,GAAAA,GAAMF,GAAMC,GAAAA,GAAAA,CAAAA;AAC3E,KAAA,CAAA;AAEA;;;;;;MAOA4D,MAAAA,CAAAA,SAqDC,GArDDA,SAAAA,SAAAA,CAAUrH,WAAoB,EAAEsH,QAAoB,EAAEvU,KAAc,EAAW;QAC7E,IAAMwU,EAAAA,GAAgBH,MA/8BbA,CA+8BoBI,UAAU,CAAA;QAEvC,IAAMvS,CAAAA,GAAI,IAAI,CAACC,QAAQ,CAAA;QACvB,IAAMuS,GAAAA,GAAMF,GAAGrS,QAAQ,CAAA;QAEvB,IAAMmI,GAAAA,GAAMpI,CAAC,CAAC,CAAE,CAAA,CAAA;QAChB,IAAMqI,GAAAA,GAAMrI,CAAC,CAAC,CAAE,CAAA,CAAA;QAChB,IAAMsI,GAAAA,GAAMtI,CAAC,CAAC,CAAE,CAAA,CAAA;QAChB,IAAMuI,GAAAA,GAAMvI,CAAC,CAAC,CAAE,CAAA,CAAA;QAChB,IAAMwI,GAAAA,GAAMxI,CAAC,CAAC,CAAE,CAAA,CAAA;QAChB,IAAMyI,GAAAA,GAAMzI,CAAC,CAAC,CAAE,CAAA,CAAA;QAChB,IAAM0I,GAAAA,GAAM1I,CAAC,CAAC,CAAE,CAAA,CAAA;QAChB,IAAM2I,GAAAA,GAAM3I,CAAC,CAAC,CAAE,CAAA,CAAA;QAChB,IAAM4I,GAAAA,GAAM5I,CAAC,CAAC,CAAE,CAAA,CAAA;QAChB,IAAM6I,GAAAA,GAAM7I,CAAC,CAAC,CAAE,CAAA,CAAA;QAChB,IAAM8I,GAAAA,GAAM9I,CAAC,CAAC,EAAG,CAAA,CAAA;QACjB,IAAM+I,GAAAA,GAAM/I,CAAC,CAAC,EAAG,CAAA,CAAA;AACjB+K,QAAAA,WAAAA,CAAY5N,GAAG,CAAC6C,CAAC,CAAC,EAAG,CAAA,EAAEA,CAAC,CAAC,EAAG,CAAA,EAAEA,CAAC,CAAC,EAAG,CAAA,CAAA,CAAA;QAEnC,IAAMyS,EAAAA,GAAK5W,IAAKoU,CAAAA,IAAI,CAAC7H,GAAAA,GAAMC,GAAMC,GAAAA,GAAAA,GAAMC,GAAO,CAAA,GAAA,CAAA,GAAI,CAAC,CAAA,GAAI,CAAC,CAAA;QACxD,IAAMmK,EAAAA,GAAK7W,IAAKoU,CAAAA,IAAI,CAACzH,GAAAA,GAAMC,GAAMC,GAAAA,GAAAA,GAAMC,GAAO,CAAA,GAAA,CAAA,GAAI,CAAC,CAAA,GAAI,CAAC,CAAA;QACxD,IAAMgK,EAAAA,GAAK9W,IAAKoU,CAAAA,IAAI,CAACrH,GAAAA,GAAMC,GAAMC,GAAAA,GAAAA,GAAMC,GAAO,CAAA,GAAA,CAAA,GAAI,CAAC,CAAA,GAAI,CAAC,CAAA;QAExD,IAAM6J,EAAAA,GAAKH,KAAK5W,IAAK6B,CAAAA,IAAI,CAAC0K,GAAMA,GAAAA,GAAAA,GAAMC,GAAMA,GAAAA,GAAAA,GAAMC,GAAMA,GAAAA,GAAAA,CAAAA,CAAAA;QACxD,IAAMuK,EAAAA,GAAKH,KAAK7W,IAAK6B,CAAAA,IAAI,CAAC8K,GAAMA,GAAAA,GAAAA,GAAMC,GAAMA,GAAAA,GAAAA,GAAMC,GAAMA,GAAAA,GAAAA,CAAAA,CAAAA;QACxD,IAAMoK,EAAAA,GAAKH,KAAK9W,IAAK6B,CAAAA,IAAI,CAACkL,GAAMA,GAAAA,GAAAA,GAAMC,GAAMA,GAAAA,GAAAA,GAAMC,GAAMA,GAAAA,GAAAA,CAAAA,CAAAA;QACxDhL,KAAMX,CAAAA,GAAG,CAACyV,EAAAA,EAAIC,EAAIC,EAAAA,EAAAA,CAAAA,CAAAA;QAElB,IACEjX,IAAAA,CAAKI,GAAG,CAAC2W,EAAAA,CAAAA,GAAMpX,SAASU,aAAa,IACrCL,KAAKI,GAAG,CAAC4W,MAAMrX,QAASU,CAAAA,aAAa,IACrCL,IAAKI,CAAAA,GAAG,CAAC6W,EAAMtX,CAAAA,GAAAA,QAAAA,CAASU,aAAa,EACrC;AACAmW,YAAAA,QAAAA,CAAS1H,QAAQ,EAAA,CAAA;AACjB,YAAA,OAAO,KAAK,CAAA;SACP,MAAA;AACL,YAAA,IAAMoI,QAAQ,CAAIH,GAAAA,EAAAA,CAAAA;AAClB,YAAA,IAAMI,QAAQ,CAAIH,GAAAA,EAAAA,CAAAA;AAClB,YAAA,IAAMI,QAAQ,CAAIH,GAAAA,EAAAA,CAAAA;YAElBN,GAAG,CAAC,CAAE,CAAA,GAAGpK,GAAM2K,GAAAA,KAAAA,CAAAA;YACfP,GAAG,CAAC,CAAE,CAAA,GAAGnK,GAAM0K,GAAAA,KAAAA,CAAAA;YACfP,GAAG,CAAC,CAAE,CAAA,GAAGlK,GAAMyK,GAAAA,KAAAA,CAAAA;YACfP,GAAG,CAAC,CAAE,CAAA,GAAGhK,GAAMwK,GAAAA,KAAAA,CAAAA;YACfR,GAAG,CAAC,CAAE,CAAA,GAAG/J,GAAMuK,GAAAA,KAAAA,CAAAA;YACfR,GAAG,CAAC,CAAE,CAAA,GAAG9J,GAAMsK,GAAAA,KAAAA,CAAAA;YACfR,GAAG,CAAC,CAAE,CAAA,GAAG5J,GAAMqK,GAAAA,KAAAA,CAAAA;YACfT,GAAG,CAAC,CAAE,CAAA,GAAG3J,GAAMoK,GAAAA,KAAAA,CAAAA;YACfT,GAAG,CAAC,CAAE,CAAA,GAAG1J,GAAMmK,GAAAA,KAAAA,CAAAA;YACfjE,UAAWwC,CAAAA,iBAAiB,CAACc,EAAID,EAAAA,QAAAA,CAAAA,CAAAA;AACjC,YAAA,OAAO,IAAI,CAAA;SACZ;AACH,KAAA,CAAA;AAEA;;;;AAIC,MACDa,OAAAA,WAgCC,GAhCDA,SAAAA,WAAAA,CAAYrU,GAAe,EAAc;QACvC,IAAMmB,CAAAA,GAAI,IAAI,CAACC,QAAQ,CAAA;QACvB,IAAIkT,KAAAA,GAAQnT,CAAC,CAAC,CAAE,CAAA,GAAGA,CAAC,CAAC,CAAE,CAAA,GAAGA,CAAC,CAAC,EAAG,CAAA,CAAA;QAE/B,IAAImT,KAAAA,GAAQ3X,QAASU,CAAAA,aAAa,EAAE;AAClC,YAAA,IAAI6B,CAAIlC,GAAAA,IAAAA,CAAK6B,IAAI,CAACyV,QAAQ,GAAO,CAAA,GAAA,CAAA,CAAA;YACjCtU,GAAIsB,CAAAA,EAAE,GAAG,IAAOpC,GAAAA,CAAAA,CAAAA;AAChBc,YAAAA,GAAAA,CAAI7B,EAAE,GAAG,CAACgD,CAAC,CAAC,CAAE,CAAA,GAAGA,CAAC,CAAC,CAAE,CAAD,IAAKjC,CAAAA,CAAAA;AACzBc,YAAAA,GAAAA,CAAI5B,EAAE,GAAG,CAAC+C,CAAC,CAAC,CAAE,CAAA,GAAGA,CAAC,CAAC,CAAE,CAAD,IAAKjC,CAAAA,CAAAA;AACzBc,YAAAA,GAAAA,CAAI3B,EAAE,GAAG,CAAC8C,CAAC,CAAC,CAAE,CAAA,GAAGA,CAAC,CAAC,CAAE,CAAD,IAAKjC,CAAAA,CAAAA;AAC3B,SAAA,MAAO,IAAIiC,CAAC,CAAC,CAAE,CAAA,GAAGA,CAAC,CAAC,CAAA,CAAE,IAAIA,CAAC,CAAC,CAAE,CAAA,GAAGA,CAAC,CAAC,GAAG,EAAE;AACtC,YAAA,IAAIjC,KAAIlC,IAAK6B,CAAAA,IAAI,CAAC,GAAA,GAAMsC,CAAC,CAAC,CAAA,CAAE,GAAGA,CAAC,CAAC,CAAE,CAAA,GAAGA,CAAC,CAAC,GAAG,CAAI,GAAA,CAAA,CAAA;AAC/CnB,YAAAA,GAAAA,CAAIsB,EAAE,GAAG,CAACH,CAAC,CAAC,CAAE,CAAA,GAAGA,CAAC,CAAC,CAAE,CAAD,IAAKjC,EAAAA,CAAAA;YACzBc,GAAI7B,CAAAA,EAAE,GAAG,IAAOe,GAAAA,EAAAA,CAAAA;AAChBc,YAAAA,GAAAA,CAAI5B,EAAE,GAAG,CAAC+C,CAAC,CAAC,CAAE,CAAA,GAAGA,CAAC,CAAC,CAAE,CAAD,IAAKjC,EAAAA,CAAAA;AACzBc,YAAAA,GAAAA,CAAI3B,EAAE,GAAG,CAAC8C,CAAC,CAAC,CAAE,CAAA,GAAGA,CAAC,CAAC,CAAE,CAAD,IAAKjC,EAAAA,CAAAA;SACpB,MAAA,IAAIiC,CAAC,CAAC,CAAA,CAAE,GAAGA,CAAC,CAAC,GAAG,EAAE;AACvB,YAAA,IAAIjC,KAAIlC,IAAK6B,CAAAA,IAAI,CAAC,GAAA,GAAMsC,CAAC,CAAC,CAAA,CAAE,GAAGA,CAAC,CAAC,CAAE,CAAA,GAAGA,CAAC,CAAC,GAAG,CAAI,GAAA,CAAA,CAAA;AAC/CnB,YAAAA,GAAAA,CAAIsB,EAAE,GAAG,CAACH,CAAC,CAAC,CAAE,CAAA,GAAGA,CAAC,CAAC,CAAE,CAAD,IAAKjC,EAAAA,CAAAA;AACzBc,YAAAA,GAAAA,CAAI7B,EAAE,GAAG,CAACgD,CAAC,CAAC,CAAE,CAAA,GAAGA,CAAC,CAAC,CAAE,CAAD,IAAKjC,EAAAA,CAAAA;YACzBc,GAAI5B,CAAAA,EAAE,GAAG,IAAOc,GAAAA,EAAAA,CAAAA;AAChBc,YAAAA,GAAAA,CAAI3B,EAAE,GAAG,CAAC8C,CAAC,CAAC,CAAE,CAAA,GAAGA,CAAC,CAAC,CAAE,CAAD,IAAKjC,EAAAA,CAAAA;SACpB,MAAA;AACL,YAAA,IAAIA,KAAIlC,IAAK6B,CAAAA,IAAI,CAAC,GAAA,GAAMsC,CAAC,CAAC,EAAA,CAAG,GAAGA,CAAC,CAAC,CAAE,CAAA,GAAGA,CAAC,CAAC,EAAE,CAAI,GAAA,CAAA,CAAA;AAC/CnB,YAAAA,GAAAA,CAAIsB,EAAE,GAAG,CAACH,CAAC,CAAC,CAAE,CAAA,GAAGA,CAAC,CAAC,CAAE,CAAD,IAAKjC,EAAAA,CAAAA;AACzBc,YAAAA,GAAAA,CAAI7B,EAAE,GAAG,CAACgD,CAAC,CAAC,CAAE,CAAA,GAAGA,CAAC,CAAC,CAAE,CAAD,IAAKjC,EAAAA,CAAAA;AACzBc,YAAAA,GAAAA,CAAI5B,EAAE,GAAG,CAAC+C,CAAC,CAAC,CAAE,CAAA,GAAGA,CAAC,CAAC,CAAE,CAAD,IAAKjC,EAAAA,CAAAA;YACzBc,GAAI3B,CAAAA,EAAE,GAAG,IAAOa,GAAAA,EAAAA,CAAAA;SACjB;QAEDc,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;QAC1C,OAAO8B,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACDuU,OAAAA,UAoBC,GApBDA,SAAAA,UAAAA,CAAWvU,GAAY,EAAW;;QAEhC,IAAMmB,CAAAA,GAAI,IAAI,CAACC,QAAQ,CAAA;AACvB,QAAA,IAAMmI,GAAMpI,GAAAA,CAAC,CAAC,CAAA,CAAE,EACdqI,GAAAA,GAAMrI,CAAC,CAAC,CAAE,CAAA,EACVsI,GAAMtI,GAAAA,CAAC,CAAC,CAAE,CAAA,CAAA;AACZ,QAAA,IAAMwI,GAAMxI,GAAAA,CAAC,CAAC,CAAA,CAAE,EACdyI,GAAAA,GAAMzI,CAAC,CAAC,CAAE,CAAA,EACV0I,GAAM1I,GAAAA,CAAC,CAAC,CAAE,CAAA,CAAA;AACZ,QAAA,IAAM4I,GAAM5I,GAAAA,CAAC,CAAC,CAAA,CAAE,EACd6I,GAAAA,GAAM7I,CAAC,CAAC,CAAE,CAAA,EACV8I,GAAM9I,GAAAA,CAAC,CAAC,EAAG,CAAA,CAAA;QAEbnB,GAAI1B,CAAAA,GAAG,CACLtB,IAAAA,CAAK6B,IAAI,CAAC0K,GAAMA,GAAAA,GAAAA,GAAMC,GAAMA,GAAAA,GAAAA,GAAMC,GAAMA,GAAAA,GAAAA,CAAAA,EACxCzM,IAAK6B,CAAAA,IAAI,CAAC8K,GAAAA,GAAMA,GAAMC,GAAAA,GAAAA,GAAMA,GAAMC,GAAAA,GAAAA,GAAMA,GACxC7M,CAAAA,EAAAA,IAAAA,CAAK6B,IAAI,CAACkL,GAAMA,GAAAA,GAAAA,GAAMC,GAAMA,GAAAA,GAAAA,GAAMC,GAAMA,GAAAA,GAAAA,CAAAA,CAAAA,CAAAA;QAG1C,OAAOjK,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACDwU,OAAAA,cAIC,GAJDA,SAAAA,cAAAA,CAAexU,GAAY,EAAW;QACpC,IAAMmB,CAAAA,GAAI,IAAI,CAACC,QAAQ,CAAA;AACvBpB,QAAAA,GAAAA,CAAI1B,GAAG,CAAC6C,CAAC,CAAC,EAAG,CAAA,EAAEA,CAAC,CAAC,EAAG,CAAA,EAAEA,CAAC,CAAC,EAAG,CAAA,CAAA,CAAA;QAC3B,OAAOnB,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;AAGC,MACD8L,MAAAA,CAAAA,QAwBC,GAxBDA,SAAAA,QAAmB,GAAA;QACjB,IAAM3K,CAAAA,GAAI,IAAI,CAACC,QAAQ,CAAA;QAEvBD,CAAC,CAAC,EAAE,GAAG,CAAA,CAAA;QACPA,CAAC,CAAC,EAAE,GAAG,CAAA,CAAA;QACPA,CAAC,CAAC,EAAE,GAAG,CAAA,CAAA;QACPA,CAAC,CAAC,EAAE,GAAG,CAAA,CAAA;QAEPA,CAAC,CAAC,EAAE,GAAG,CAAA,CAAA;QACPA,CAAC,CAAC,EAAE,GAAG,CAAA,CAAA;QACPA,CAAC,CAAC,EAAE,GAAG,CAAA,CAAA;QACPA,CAAC,CAAC,EAAE,GAAG,CAAA,CAAA;QAEPA,CAAC,CAAC,EAAE,GAAG,CAAA,CAAA;QACPA,CAAC,CAAC,EAAE,GAAG,CAAA,CAAA;QACPA,CAAC,CAAC,GAAG,GAAG,CAAA,CAAA;QACRA,CAAC,CAAC,GAAG,GAAG,CAAA,CAAA;QAERA,CAAC,CAAC,GAAG,GAAG,CAAA,CAAA;QACRA,CAAC,CAAC,GAAG,GAAG,CAAA,CAAA;QACRA,CAAC,CAAC,GAAG,GAAG,CAAA,CAAA;QACRA,CAAC,CAAC,GAAG,GAAG,CAAA,CAAA;AAER,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACD4K,MAAAA,CAAAA,MAGC,GAHDA,SAAAA,MAAiB,GAAA;AApnCNuH,QAAAA,MAAAA,CAqnCFvH,MAAM,CAAC,IAAI,EAAE,IAAI,CAAA,CAAA;AACxB,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;;MAMAkF,MAAAA,CAAAA,eAGC,GAHDA,SAAAA,gBAAgBF,IAAa,EAAEvT,CAAS,EAAU;AA/nCvC8V,QAAAA,MAAAA,CAgoCFrC,eAAe,CAAC,IAAI,EAAEF,IAAAA,EAAMvT,GAAG,IAAI,CAAA,CAAA;AAC1C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDyB,OAAAA,KAGC,GAHDA,SAAAA,KAAAA,CAAMC,CAAU,EAAU;AAzoCfoU,QAAAA,MAAAA,CA0oCFrU,KAAK,CAAC,IAAI,EAAEC,GAAG,IAAI,CAAA,CAAA;AAC1B,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACD+M,OAAAA,SAGC,GAHDA,SAAAA,SAAAA,CAAUpP,CAAU,EAAU;AAnpCnByW,QAAAA,MAAAA,CAopCFrH,SAAS,CAAC,IAAI,EAAEpP,GAAG,IAAI,CAAA,CAAA;AAC9B,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACDsP,MAAAA,CAAAA,SAGC,GAHDA,SAAAA,SAAoB,GAAA;AA5pCTmH,QAAAA,MAAAA,CA6pCFnH,SAAS,CAAC,IAAI,EAAE,IAAI,CAAA,CAAA;AAC3B,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACD1M,MAAAA,CAAAA,KAqBC,GArBDA,SAAAA,KAAgB,GAAA;QACd,IAAM0B,CAAAA,GAAI,IAAI,CAACC,QAAQ,CAAA;AACvB,QAAA,IAAIgL,GAAM,GAAA,IAvqCDkH,MAwqCPnS,CAAAA,CAAC,CAAC,CAAA,CAAE,EACJA,CAAC,CAAC,CAAA,CAAE,EACJA,CAAC,CAAC,CAAE,CAAA,EACJA,CAAC,CAAC,CAAE,CAAA,EACJA,CAAC,CAAC,CAAE,CAAA,EACJA,CAAC,CAAC,CAAE,CAAA,EACJA,CAAC,CAAC,EAAE,EACJA,CAAC,CAAC,CAAA,CAAE,EACJA,CAAC,CAAC,CAAA,CAAE,EACJA,CAAC,CAAC,CAAA,CAAE,EACJA,CAAC,CAAC,EAAA,CAAG,EACLA,CAAC,CAAC,EAAG,CAAA,EACLA,CAAC,CAAC,EAAG,CAAA,EACLA,CAAC,CAAC,EAAA,CAAG,EACLA,CAAC,CAAC,EAAA,CAAG,EACLA,CAAC,CAAC,EAAG,CAAA,CAAA,CAAA;QAEP,OAAOiL,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACD1M,OAAAA,QAyBC,GAzBDA,SAAAA,QAAAA,CAASC,MAAc,EAAU;QAC/B,IAAMwB,CAAAA,GAAI,IAAI,CAACC,QAAQ,CAAA;QACvB,IAAMiL,EAAAA,GAAK1M,OAAOyB,QAAQ,CAAA;AAE1BD,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGkL,EAAE,CAAC,CAAE,CAAA,CAAA;AACZlL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGkL,EAAE,CAAC,CAAE,CAAA,CAAA;AACZlL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGkL,EAAE,CAAC,CAAE,CAAA,CAAA;AACZlL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGkL,EAAE,CAAC,CAAE,CAAA,CAAA;AAEZlL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGkL,EAAE,CAAC,CAAE,CAAA,CAAA;AACZlL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGkL,EAAE,CAAC,CAAE,CAAA,CAAA;AACZlL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGkL,EAAE,CAAC,CAAE,CAAA,CAAA;AACZlL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGkL,EAAE,CAAC,CAAE,CAAA,CAAA;AAEZlL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGkL,EAAE,CAAC,CAAE,CAAA,CAAA;AACZlL,QAAAA,CAAC,CAAC,CAAA,CAAE,GAAGkL,EAAE,CAAC,CAAE,CAAA,CAAA;AACZlL,QAAAA,CAAC,CAAC,EAAA,CAAG,GAAGkL,EAAE,CAAC,EAAG,CAAA,CAAA;AACdlL,QAAAA,CAAC,CAAC,EAAA,CAAG,GAAGkL,EAAE,CAAC,EAAG,CAAA,CAAA;AAEdlL,QAAAA,CAAC,CAAC,EAAA,CAAG,GAAGkL,EAAE,CAAC,EAAG,CAAA,CAAA;AACdlL,QAAAA,CAAC,CAAC,EAAA,CAAG,GAAGkL,EAAE,CAAC,EAAG,CAAA,CAAA;AACdlL,QAAAA,CAAC,CAAC,EAAA,CAAG,GAAGkL,EAAE,CAAC,EAAG,CAAA,CAAA;AACdlL,QAAAA,CAAC,CAAC,EAAA,CAAG,GAAGkL,EAAE,CAAC,EAAG,CAAA,CAAA;AAEd,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;;MAMAzM,MAAAA,CAAAA,aAMC,GANDA,SAAAA,cAAcC,KAAwB,EAAEC,MAAkB,EAAU;AAA5BA,QAAAA,IAAAA,mBAAAA,MAAiB,GAAA,CAAA,CAAA;QACvD,IAAMwM,IAAAA,GAAO,IAAI,CAAClL,QAAQ,CAAA;AAC1B,QAAA,IAAK,IAAIsB,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAI,IAAIA,CAAK,EAAA,CAAA;AAC3B4J,YAAAA,IAAI,CAAC5J,CAAE,CAAA,GAAG7C,KAAK,CAAC6C,IAAI5C,MAAO,CAAA,CAAA;AAC7B,SAAA;AACA,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;MAKAC,MAAAA,CAAAA,WAmBC,GAnBDA,SAAAA,YAAYC,GAA2C,EAAEC,SAAqB,EAAQ;AAA7BA,QAAAA,IAAAA,sBAAAA,SAAoB,GAAA,CAAA,CAAA;QAC3E,IAAMkB,CAAAA,GAAI,IAAI,CAACC,QAAQ,CAAA;AAEvBpB,QAAAA,GAAG,CAACC,SAAAA,CAAU,GAAGkB,CAAC,CAAC,CAAE,CAAA,CAAA;AACrBnB,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAGkB,CAAC,CAAC,CAAE,CAAA,CAAA;AACzBnB,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAGkB,CAAC,CAAC,CAAE,CAAA,CAAA;AACzBnB,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAGkB,CAAC,CAAC,CAAE,CAAA,CAAA;AACzBnB,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAGkB,CAAC,CAAC,CAAE,CAAA,CAAA;AACzBnB,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAGkB,CAAC,CAAC,CAAE,CAAA,CAAA;AACzBnB,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAGkB,CAAC,CAAC,CAAE,CAAA,CAAA;AACzBnB,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAGkB,CAAC,CAAC,CAAE,CAAA,CAAA;AACzBnB,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAGkB,CAAC,CAAC,CAAE,CAAA,CAAA;AACzBnB,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAGkB,CAAC,CAAC,CAAE,CAAA,CAAA;AACzBnB,QAAAA,GAAG,CAACC,SAAY,GAAA,EAAA,CAAG,GAAGkB,CAAC,CAAC,EAAG,CAAA,CAAA;AAC3BnB,QAAAA,GAAG,CAACC,SAAY,GAAA,EAAA,CAAG,GAAGkB,CAAC,CAAC,EAAG,CAAA,CAAA;AAC3BnB,QAAAA,GAAG,CAACC,SAAY,GAAA,EAAA,CAAG,GAAGkB,CAAC,CAAC,EAAG,CAAA,CAAA;AAC3BnB,QAAAA,GAAG,CAACC,SAAY,GAAA,EAAA,CAAG,GAAGkB,CAAC,CAAC,EAAG,CAAA,CAAA;AAC3BnB,QAAAA,GAAG,CAACC,SAAY,GAAA,EAAA,CAAG,GAAGkB,CAAC,CAAC,EAAG,CAAA,CAAA;AAC3BnB,QAAAA,GAAG,CAACC,SAAY,GAAA,EAAA,CAAG,GAAGkB,CAAC,CAAC,EAAG,CAAA,CAAA;AAC7B,KAAA,CAAA;AAxuCA;;;;;MA1BWmS,MAgCJ5U,CAAAA,QAoCN,GApCD,SAAOA,QAASyB,CAAAA,IAAY,EAAE3B,KAAa,EAAEwB,GAAW,EAAQ;QAC9D,IAAMyM,EAAAA,GAAKtM,KAAKiB,QAAQ,CAAA;QACxB,IAAMsL,EAAAA,GAAKlO,MAAM4C,QAAQ,CAAA;QACzB,IAAMuL,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;;AAGvB,QAAA,IAAMwL,MAAMH,EAAE,CAAC,CAAE,CAAA,EAAEI,MAAMJ,EAAE,CAAC,CAAE,CAAA,EAAEK,MAAML,EAAE,CAAC,CAAE,CAAA,EAAEgI,MAAMhI,EAAE,CAAC,CAAE,CAAA,EACxDM,MAAMN,EAAE,CAAC,CAAE,CAAA,EAAEO,MAAMP,EAAE,CAAC,CAAE,CAAA,EAAEQ,MAAMR,EAAE,CAAC,EAAE,EAAEiI,GAAAA,GAAMjI,EAAE,CAAC,CAAA,CAAE,EAClDS,GAAAA,GAAMT,EAAE,CAAC,CAAA,CAAE,EAAEU,GAAAA,GAAMV,EAAE,CAAC,CAAA,CAAE,EAAEW,GAAAA,GAAMX,EAAE,CAAC,EAAA,CAAG,EAAEkI,GAAAA,GAAMlI,EAAE,CAAC,EAAA,CAAG,EACpDmI,GAAAA,GAAMnI,EAAE,CAAC,EAAA,CAAG,EAAEoI,GAAAA,GAAMpI,EAAE,CAAC,EAAA,CAAG,EAAEqI,GAAAA,GAAMrI,EAAE,CAAC,EAAA,CAAG,EAAEsI,GAAMtI,GAAAA,EAAE,CAAC,EAAG,CAAA,CAAA;;AAGtD,QAAA,IAAMY,MAAMX,EAAE,CAAC,CAAE,CAAA,EAAEY,MAAMZ,EAAE,CAAC,CAAE,CAAA,EAAEa,MAAMb,EAAE,CAAC,CAAE,CAAA,EAAEsI,MAAMtI,EAAE,CAAC,CAAE,CAAA,EACxDc,MAAMd,EAAE,CAAC,CAAE,CAAA,EAAEe,MAAMf,EAAE,CAAC,CAAE,CAAA,EAAEgB,MAAMhB,EAAE,CAAC,EAAE,EAAEuI,GAAAA,GAAMvI,EAAE,CAAC,CAAA,CAAE,EAClDiB,GAAAA,GAAMjB,EAAE,CAAC,CAAA,CAAE,EAAEkB,GAAAA,GAAMlB,EAAE,CAAC,CAAA,CAAE,EAAEmB,GAAAA,GAAMnB,EAAE,CAAC,EAAA,CAAG,EAAEwI,GAAAA,GAAMxI,EAAE,CAAC,EAAA,CAAG,EACpDyI,GAAAA,GAAMzI,EAAE,CAAC,EAAA,CAAG,EAAE0I,GAAAA,GAAM1I,EAAE,CAAC,EAAA,CAAG,EAAE2I,GAAAA,GAAM3I,EAAE,CAAC,EAAA,CAAG,EAAE4I,GAAM5I,GAAAA,EAAE,CAAC,EAAG,CAAA,CAAA;QAEtDC,EAAE,CAAC,EAAE,GAAGC,GAAAA,GAAMS,MAAMN,GAAMO,GAAAA,GAAAA,GAAMJ,GAAMK,GAAAA,GAAAA,GAAMqH,GAAMI,GAAAA,GAAAA,CAAAA;QAClDrI,EAAE,CAAC,EAAE,GAAGE,GAAAA,GAAMQ,MAAML,GAAMM,GAAAA,GAAAA,GAAMH,GAAMI,GAAAA,GAAAA,GAAMsH,GAAMG,GAAAA,GAAAA,CAAAA;QAClDrI,EAAE,CAAC,EAAE,GAAGG,GAAAA,GAAMO,MAAMJ,GAAMK,GAAAA,GAAAA,GAAMF,GAAMG,GAAAA,GAAAA,GAAMuH,GAAME,GAAAA,GAAAA,CAAAA;QAClDrI,EAAE,CAAC,EAAE,GAAG8H,GAAAA,GAAMpH,MAAMqH,GAAMpH,GAAAA,GAAAA,GAAMqH,GAAMpH,GAAAA,GAAAA,GAAMwH,GAAMC,GAAAA,GAAAA,CAAAA;QAElDrI,EAAE,CAAC,EAAE,GAAGC,GAAAA,GAAMY,MAAMT,GAAMU,GAAAA,GAAAA,GAAMP,GAAMQ,GAAAA,GAAAA,GAAMkH,GAAMK,GAAAA,GAAAA,CAAAA;QAClDtI,EAAE,CAAC,EAAE,GAAGE,GAAAA,GAAMW,MAAMR,GAAMS,GAAAA,GAAAA,GAAMN,GAAMO,GAAAA,GAAAA,GAAMmH,GAAMI,GAAAA,GAAAA,CAAAA;QAClDtI,EAAE,CAAC,EAAE,GAAGG,GAAAA,GAAMU,MAAMP,GAAMQ,GAAAA,GAAAA,GAAML,GAAMM,GAAAA,GAAAA,GAAMoH,GAAMG,GAAAA,GAAAA,CAAAA;QAClDtI,EAAE,CAAC,EAAE,GAAG8H,GAAAA,GAAMjH,MAAMkH,GAAMjH,GAAAA,GAAAA,GAAMkH,GAAMjH,GAAAA,GAAAA,GAAMqH,GAAME,GAAAA,GAAAA,CAAAA;QAElDtI,EAAE,CAAC,EAAE,GAAGC,GAAAA,GAAMe,MAAMZ,GAAMa,GAAAA,GAAAA,GAAMV,GAAMW,GAAAA,GAAAA,GAAM+G,GAAMM,GAAAA,GAAAA,CAAAA;QAClDvI,EAAE,CAAC,EAAE,GAAGE,GAAAA,GAAMc,MAAMX,GAAMY,GAAAA,GAAAA,GAAMT,GAAMU,GAAAA,GAAAA,GAAMgH,GAAMK,GAAAA,GAAAA,CAAAA;QAClDvI,EAAE,CAAC,GAAG,GAAGG,GAAAA,GAAMa,MAAMV,GAAMW,GAAAA,GAAAA,GAAMR,GAAMS,GAAAA,GAAAA,GAAMiH,GAAMI,GAAAA,GAAAA,CAAAA;QACnDvI,EAAE,CAAC,GAAG,GAAG8H,GAAAA,GAAM9G,MAAM+G,GAAM9G,GAAAA,GAAAA,GAAM+G,GAAM9G,GAAAA,GAAAA,GAAMkH,GAAMG,GAAAA,GAAAA,CAAAA;QAEnDvI,EAAE,CAAC,GAAG,GAAGC,GAAAA,GAAMuI,MAAMpI,GAAMqI,GAAAA,GAAAA,GAAMlI,GAAMmI,GAAAA,GAAAA,GAAMT,GAAMU,GAAAA,GAAAA,CAAAA;QACnD3I,EAAE,CAAC,GAAG,GAAGE,GAAAA,GAAMsI,MAAMnI,GAAMoI,GAAAA,GAAAA,GAAMjI,GAAMkI,GAAAA,GAAAA,GAAMR,GAAMS,GAAAA,GAAAA,CAAAA;QACnD3I,EAAE,CAAC,GAAG,GAAGG,GAAAA,GAAMqI,MAAMlI,GAAMmI,GAAAA,GAAAA,GAAMhI,GAAMiI,GAAAA,GAAAA,GAAMP,GAAMQ,GAAAA,GAAAA,CAAAA;QACnD3I,EAAE,CAAC,GAAG,GAAG8H,GAAAA,GAAMU,MAAMT,GAAMU,GAAAA,GAAAA,GAAMT,GAAMU,GAAAA,GAAAA,GAAMN,GAAMO,GAAAA,GAAAA,CAAAA;AACrD,KAAA,CAAA;AAEA;;;;;MAtEWhC,OA4EJrW,MAsBN,GAtBD,SAAOA,MAAOkD,CAAAA,IAAY,EAAE3B,KAAa,EAAW;QAClD,IAAMiO,EAAAA,GAAKtM,KAAKiB,QAAQ,CAAA;QACxB,IAAMsL,EAAAA,GAAKlO,MAAM4C,QAAQ,CAAA;AAEzB,QAAA,OACEzE,SAASM,MAAM,CAACwP,EAAE,CAAC,CAAA,CAAE,EAAEC,EAAE,CAAC,CAAE,CAAA,CAAA,IAC5B/P,SAASM,MAAM,CAACwP,EAAE,CAAC,CAAA,CAAE,EAAEC,EAAE,CAAC,CAAE,CAAA,CAAA,IAC5B/P,SAASM,MAAM,CAACwP,EAAE,CAAC,CAAA,CAAE,EAAEC,EAAE,CAAC,CAAE,CAAA,CAAA,IAC5B/P,SAASM,MAAM,CAACwP,EAAE,CAAC,CAAA,CAAE,EAAEC,EAAE,CAAC,CAAE,CAAA,CAAA,IAC5B/P,SAASM,MAAM,CAACwP,EAAE,CAAC,CAAA,CAAE,EAAEC,EAAE,CAAC,CAAE,CAAA,CAAA,IAC5B/P,SAASM,MAAM,CAACwP,EAAE,CAAC,CAAA,CAAE,EAAEC,EAAE,CAAC,CAAE,CAAA,CAAA,IAC5B/P,SAASM,MAAM,CAACwP,EAAE,CAAC,CAAA,CAAE,EAAEC,EAAE,CAAC,EAAE,CAC5B/P,IAAAA,QAAAA,CAASM,MAAM,CAACwP,EAAE,CAAC,CAAE,CAAA,EAAEC,EAAE,CAAC,CAAA,CAAE,CAC5B/P,IAAAA,QAAAA,CAASM,MAAM,CAACwP,EAAE,CAAC,CAAE,CAAA,EAAEC,EAAE,CAAC,CAAA,CAAE,CAC5B/P,IAAAA,QAAAA,CAASM,MAAM,CAACwP,EAAE,CAAC,CAAE,CAAA,EAAEC,EAAE,CAAC,CAAA,CAAE,CAC5B/P,IAAAA,QAAAA,CAASM,MAAM,CAACwP,EAAE,CAAC,EAAG,CAAA,EAAEC,EAAE,CAAC,EAAA,CAAG,CAC9B/P,IAAAA,QAAAA,CAASM,MAAM,CAACwP,EAAE,CAAC,EAAG,CAAA,EAAEC,EAAE,CAAC,EAAA,CAAG,CAC9B/P,IAAAA,QAAAA,CAASM,MAAM,CAACwP,EAAE,CAAC,EAAG,CAAA,EAAEC,EAAE,CAAC,EAAA,CAAG,CAC9B/P,IAAAA,QAAAA,CAASM,MAAM,CAACwP,EAAE,CAAC,EAAG,CAAA,EAAEC,EAAE,CAAC,EAAA,CAAG,CAC9B/P,IAAAA,QAAAA,CAASM,MAAM,CAACwP,EAAE,CAAC,EAAG,CAAA,EAAEC,EAAE,CAAC,EAAA,CAAG,KAC9B/P,QAASM,CAAAA,MAAM,CAACwP,EAAE,CAAC,GAAG,EAAEC,EAAE,CAAC,EAAG,CAAA,CAAA,CAAA;AAElC,KAAA,CAAA;AAEA;;;;;;AAMC,MACD,MA3GW4G,CA2GJxS,IAyBN,GAzBD,SAAOA,IAAAA,CAAKC,KAAa,EAAEC,GAAW,EAAEC,CAAS,EAAEjB,GAAW,EAAQ;QACpE,IAAMqM,EAAAA,GAAKtL,MAAMK,QAAQ,CAAA;QACzB,IAAM0M,EAAAA,GAAK9M,IAAII,QAAQ,CAAA;QACvB,IAAMuL,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;AACvB,QAAA,IAAM2M,MAAM,GAAM9M,GAAAA,CAAAA,CAAAA;QAElB0L,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,CAAE,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAG7M,CAAAA,CAAAA;QAC9B0L,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,CAAE,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAG7M,CAAAA,CAAAA;QAC9B0L,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,CAAE,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAG7M,CAAAA,CAAAA;QAC9B0L,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,CAAE,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAG7M,CAAAA,CAAAA;QAE9B0L,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,CAAE,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAG7M,CAAAA,CAAAA;QAC9B0L,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,CAAE,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAG7M,CAAAA,CAAAA;QAC9B0L,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,CAAE,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAG7M,CAAAA,CAAAA;QAC9B0L,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,CAAE,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAG7M,CAAAA,CAAAA;QAE9B0L,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,CAAE,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAG7M,CAAAA,CAAAA;QAC9B0L,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,CAAE,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,CAAA,CAAE,GAAG7M,CAAAA,CAAAA;QAC9B0L,EAAE,CAAC,EAAG,CAAA,GAAGN,EAAE,CAAC,EAAG,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,EAAA,CAAG,GAAG7M,CAAAA,CAAAA;QACjC0L,EAAE,CAAC,EAAG,CAAA,GAAGN,EAAE,CAAC,EAAG,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,EAAA,CAAG,GAAG7M,CAAAA,CAAAA;QAEjC0L,EAAE,CAAC,EAAG,CAAA,GAAGN,EAAE,CAAC,EAAG,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,EAAA,CAAG,GAAG7M,CAAAA,CAAAA;QACjC0L,EAAE,CAAC,EAAG,CAAA,GAAGN,EAAE,CAAC,EAAG,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,EAAA,CAAG,GAAG7M,CAAAA,CAAAA;QACjC0L,EAAE,CAAC,EAAG,CAAA,GAAGN,EAAE,CAAC,EAAG,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,EAAA,CAAG,GAAG7M,CAAAA,CAAAA;QACjC0L,EAAE,CAAC,EAAG,CAAA,GAAGN,EAAE,CAAC,EAAG,CAAA,GAAG0B,GAAMD,GAAAA,EAAE,CAAC,EAAA,CAAG,GAAG7M,CAAAA,CAAAA;AACnC,KAAA,CAAA;AAEA;;;;;MAtIWqS,MA4IJ/U,CAAAA,GAoBN,GApBD,SAAOA,GAAI4B,CAAAA,IAAY,EAAE3B,KAAa,EAAEwB,GAAW,EAAQ;QACzD,IAAMyM,EAAAA,GAAKtM,KAAKiB,QAAQ,CAAA;QACxB,IAAMsL,EAAAA,GAAKlO,MAAM4C,QAAQ,CAAA;QACzB,IAAMuL,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;QACvBuL,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,EAAE,GAAGF,EAAE,CAAC,CAAE,CAAA,GAAGC,EAAE,CAAC,CAAE,CAAA,CAAA;QACrBC,EAAE,CAAC,GAAG,GAAGF,EAAE,CAAC,EAAG,CAAA,GAAGC,EAAE,CAAC,EAAG,CAAA,CAAA;QACxBC,EAAE,CAAC,GAAG,GAAGF,EAAE,CAAC,EAAG,CAAA,GAAGC,EAAE,CAAC,EAAG,CAAA,CAAA;QACxBC,EAAE,CAAC,GAAG,GAAGF,EAAE,CAAC,EAAG,CAAA,GAAGC,EAAE,CAAC,EAAG,CAAA,CAAA;QACxBC,EAAE,CAAC,GAAG,GAAGF,EAAE,CAAC,EAAG,CAAA,GAAGC,EAAE,CAAC,EAAG,CAAA,CAAA;QACxBC,EAAE,CAAC,GAAG,GAAGF,EAAE,CAAC,EAAG,CAAA,GAAGC,EAAE,CAAC,EAAG,CAAA,CAAA;QACxBC,EAAE,CAAC,GAAG,GAAGF,EAAE,CAAC,EAAG,CAAA,GAAGC,EAAE,CAAC,EAAG,CAAA,CAAA;AAC1B,KAAA,CAAA;AAEA;;;;;MAlKW4G,MAwKJiC,CAAAA,cAoBN,GApBD,SAAOA,cAAe5V,CAAAA,MAAc,EAAE6V,MAAc,EAAExV,GAAW,EAAQ;QACvE,IAAMqM,EAAAA,GAAK1M,OAAOyB,QAAQ,CAAA;QAC1B,IAAMuL,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;AAEvBuL,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,EAAE,GAAGmJ,MAAAA,CAAAA;AAChB7I,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,EAAE,GAAGmJ,MAAAA,CAAAA;AAChB7I,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,EAAE,GAAGmJ,MAAAA,CAAAA;AAChB7I,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,EAAE,GAAGmJ,MAAAA,CAAAA;AAChB7I,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,EAAE,GAAGmJ,MAAAA,CAAAA;AAChB7I,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,EAAE,GAAGmJ,MAAAA,CAAAA;AAChB7I,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,EAAE,GAAGmJ,MAAAA,CAAAA;AAChB7I,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,EAAE,GAAGmJ,MAAAA,CAAAA;AAChB7I,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,EAAE,GAAGmJ,MAAAA,CAAAA;AAChB7I,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGN,EAAE,CAAC,EAAE,GAAGmJ,MAAAA,CAAAA;AAChB7I,QAAAA,EAAE,CAAC,EAAG,CAAA,GAAGN,EAAE,CAAC,GAAG,GAAGmJ,MAAAA,CAAAA;AAClB7I,QAAAA,EAAE,CAAC,EAAG,CAAA,GAAGN,EAAE,CAAC,GAAG,GAAGmJ,MAAAA,CAAAA;AAClB7I,QAAAA,EAAE,CAAC,EAAG,CAAA,GAAGN,EAAE,CAAC,GAAG,GAAGmJ,MAAAA,CAAAA;AAClB7I,QAAAA,EAAE,CAAC,EAAG,CAAA,GAAGN,EAAE,CAAC,GAAG,GAAGmJ,MAAAA,CAAAA;AAClB7I,QAAAA,EAAE,CAAC,EAAG,CAAA,GAAGN,EAAE,CAAC,GAAG,GAAGmJ,MAAAA,CAAAA;AAClB7I,QAAAA,EAAE,CAAC,EAAG,CAAA,GAAGN,EAAE,CAAC,GAAG,GAAGmJ,MAAAA,CAAAA;AACpB,KAAA,CAAA;AAEA;;;;MA9LWlC,OAmMJtF,kBAoCN,GApCD,SAAOA,kBAAmBxO,CAAAA,UAAsB,EAAEQ,GAAW,EAAQ;QACnE,IAAM2M,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;AACvB,QAAA,IAAQjD,CAAIJ,GAA2ByB,UAA/BrB,CAAAA,EAAAA,EAAOC,CAAwBoB,GAAAA,UAAAA,CAAxBpB,EAAOC,EAAIJ,CAAauB,GAAAA,UAAAA,CAAjBnB,EAAOiD,EAAIC,IAAM/B,UAAV8B,CAAAA,EAAAA,CAAAA;AAC7B,QAAA,IAAIkH,KAAKzK,CAAIA,GAAAA,CAAAA,CAAAA;AACb,QAAA,IAAI0K,KAAKzK,CAAIA,GAAAA,CAAAA,CAAAA;AACb,QAAA,IAAI0K,KAAKzK,CAAIA,GAAAA,CAAAA,CAAAA;AAEb,QAAA,IAAIgQ,KAAKlQ,CAAIyK,GAAAA,EAAAA,CAAAA;AACb,QAAA,IAAI0F,KAAKlQ,CAAIwK,GAAAA,EAAAA,CAAAA;AACb,QAAA,IAAI2F,KAAKnQ,CAAIyK,GAAAA,EAAAA,CAAAA;AACb,QAAA,IAAI2F,KAAKnQ,CAAIuK,GAAAA,EAAAA,CAAAA;AACb,QAAA,IAAI6F,KAAKpQ,CAAIwK,GAAAA,EAAAA,CAAAA;AACb,QAAA,IAAI6F,KAAKrQ,CAAIyK,GAAAA,EAAAA,CAAAA;AACb,QAAA,IAAI6F,KAAKhN,CAAIiH,GAAAA,EAAAA,CAAAA;AACb,QAAA,IAAIgG,KAAKjN,CAAIkH,GAAAA,EAAAA,CAAAA;AACb,QAAA,IAAIgG,KAAKlN,CAAImH,GAAAA,EAAAA,CAAAA;AAEbiE,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAG,CAAA,GAAIwB,EAAKG,GAAAA,EAAAA,CAAAA;QACjB3B,EAAE,CAAC,CAAE,CAAA,GAAGuB,EAAKO,GAAAA,EAAAA,CAAAA;QACb9B,EAAE,CAAC,CAAE,CAAA,GAAGyB,EAAKI,GAAAA,EAAAA,CAAAA;QACb7B,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QAERA,EAAE,CAAC,CAAE,CAAA,GAAGuB,EAAKO,GAAAA,EAAAA,CAAAA;AACb9B,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAG,CAAA,GAAIsB,EAAKK,GAAAA,EAAAA,CAAAA;QACjB3B,EAAE,CAAC,CAAE,CAAA,GAAG0B,EAAKE,GAAAA,EAAAA,CAAAA;QACb5B,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QAERA,EAAE,CAAC,CAAE,CAAA,GAAGyB,EAAKI,GAAAA,EAAAA,CAAAA;QACb7B,EAAE,CAAC,CAAE,CAAA,GAAG0B,EAAKE,GAAAA,EAAAA,CAAAA;AACb5B,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAG,CAAA,GAAIsB,EAAKE,GAAAA,EAAAA,CAAAA;QAClBxB,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;QAETA,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;QACTA,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;QACTA,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;QACTA,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;AACX,KAAA,CAAA;AAEA;;;;;MAzOW2G,MA+OJxC,CAAAA,iBAuCN,GAvCD,SAAOA,iBAAkBC,CAAAA,IAAa,EAAEvT,CAAS,EAAEwC,GAAW,EAAQ;QACpE,IAAM2M,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;QACvB,IAAUrD,CAAoBgT,GAAAA,IAAAA,CAAxB5S,EAAOC,EAAIJ,IAAa+S,IAAjB3S,CAAAA,EAAAA,EAAOC,CAAIJ,GAAM8S,IAAV1S,CAAAA,EAAAA,CAAAA;QACpB,IAAI6C,GAAAA,GAAMlE,KAAK6B,IAAI,CAACd,IAAIA,CAAIC,GAAAA,CAAAA,GAAIA,IAAIC,CAAIA,GAAAA,CAAAA,CAAAA,CAAAA;AACxC,QAAA,IAAIiB,GAAG6F,CAAG9D,EAAAA,CAAAA,CAAAA;AAEV,QAAA,IAAIjE,KAAKI,GAAG,CAAC8D,GAAOvE,CAAAA,GAAAA,QAAAA,CAASU,aAAa,EAAE;AAC1C,YAAA,OAAA;SACD;AAED6D,QAAAA,GAAAA,GAAM,CAAIA,GAAAA,GAAAA,CAAAA;QACVnD,CAAKmD,IAAAA,GAAAA,CAAAA;QACLlD,CAAKkD,IAAAA,GAAAA,CAAAA;QACLjD,CAAKiD,IAAAA,GAAAA,CAAAA;QAELhC,CAAIlC,GAAAA,IAAAA,CAAKiT,GAAG,CAACzS,CAAAA,CAAAA,CAAAA;QACbuH,CAAI/H,GAAAA,IAAAA,CAAKkT,GAAG,CAAC1S,CAAAA,CAAAA,CAAAA;AACbyD,QAAAA,CAAAA,GAAI,CAAI8D,GAAAA,CAAAA,CAAAA;;AAGR4H,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAG5O,CAAAA,GAAIA,IAAIkD,CAAI8D,GAAAA,CAAAA,CAAAA;AACpB4H,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAG3O,CAAID,GAAAA,CAAAA,GAAIkD,IAAIhD,CAAIiB,GAAAA,CAAAA,CAAAA;AACxByN,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAG1O,CAAIF,GAAAA,CAAAA,GAAIkD,IAAIjD,CAAIkB,GAAAA,CAAAA,CAAAA;QACxByN,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;AAERA,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAG5O,CAAIC,GAAAA,CAAAA,GAAIiD,IAAIhD,CAAIiB,GAAAA,CAAAA,CAAAA;AACxByN,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAG3O,CAAAA,GAAIA,IAAIiD,CAAI8D,GAAAA,CAAAA,CAAAA;AACpB4H,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAG1O,CAAID,GAAAA,CAAAA,GAAIiD,IAAIlD,CAAImB,GAAAA,CAAAA,CAAAA;QACxByN,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;AAERA,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAG5O,CAAIE,GAAAA,CAAAA,GAAIgD,IAAIjD,CAAIkB,GAAAA,CAAAA,CAAAA;AACxByN,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAG3O,CAAIC,GAAAA,CAAAA,GAAIgD,IAAIlD,CAAImB,GAAAA,CAAAA,CAAAA;AACxByN,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAG1O,CAAAA,GAAIA,IAAIgD,CAAI8D,GAAAA,CAAAA,CAAAA;QACrB4H,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;QAETA,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;QACTA,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;QACTA,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;QACTA,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;AACX,KAAA,CAAA;AAEA;;;;;MAxRW2G,MA8RJmC,CAAAA,mBAON,GAPD,SAAOA,mBAAoBjW,CAAAA,UAAsB,EAAE0M,WAAoB,EAAElM,GAAW,EAAQ;QA9RjFsT,MA+RFtF,CAAAA,kBAAkB,CAACxO,UAAYQ,EAAAA,GAAAA,CAAAA,CAAAA;QAEtC,IAAM2M,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;AACvBuL,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAGT,WAAAA,CAAY/N,EAAE,CAAA;AACvBwO,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAGT,WAAAA,CAAY9N,EAAE,CAAA;AACvBuO,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAGT,WAAAA,CAAY7N,EAAE,CAAA;AACzB,KAAA,CAAA;AAEA;;;;;;AAMC,MACD,MA9SWiV,CA8SJoC,oBAuCN,GAvCD,SAAOA,oBAAAA,CAAqBzW,KAAc,EAAEuU,QAAoB,EAAEtH,WAAoB,EAAElM,GAAW,EAAQ;QACzG,IAAM2M,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;AACvB,QAAA,IAAQjD,CAAIJ,GAA2ByV,QAA/BrV,CAAAA,EAAAA,EAAOC,CAAwBoV,GAAAA,QAAAA,CAAxBpV,EAAOC,EAAIJ,CAAauV,GAAAA,QAAAA,CAAjBnV,EAAOiD,EAAIC,IAAMiS,QAAVlS,CAAAA,EAAAA,CAAAA;AAC7B,QAAA,IAAIkH,KAAKzK,CAAIA,GAAAA,CAAAA,CAAAA;AACb,QAAA,IAAI0K,KAAKzK,CAAIA,GAAAA,CAAAA,CAAAA;AACb,QAAA,IAAI0K,KAAKzK,CAAIA,GAAAA,CAAAA,CAAAA;AAEb,QAAA,IAAIgQ,KAAKlQ,CAAIyK,GAAAA,EAAAA,CAAAA;AACb,QAAA,IAAIK,KAAK9K,CAAI0K,GAAAA,EAAAA,CAAAA;AACb,QAAA,IAAIG,KAAK7K,CAAI2K,GAAAA,EAAAA,CAAAA;AACb,QAAA,IAAIyF,KAAKnQ,CAAIyK,GAAAA,EAAAA,CAAAA;AACb,QAAA,IAAIE,KAAK3K,CAAI0K,GAAAA,EAAAA,CAAAA;AACb,QAAA,IAAI4F,KAAKrQ,CAAIyK,GAAAA,EAAAA,CAAAA;AACb,QAAA,IAAI6F,KAAKhN,CAAIiH,GAAAA,EAAAA,CAAAA;AACb,QAAA,IAAIgG,KAAKjN,CAAIkH,GAAAA,EAAAA,CAAAA;AACb,QAAA,IAAIgG,KAAKlN,CAAImH,GAAAA,EAAAA,CAAAA;QACb,IAAIqL,EAAAA,GAAK9U,MAAMd,EAAE,CAAA;QACjB,IAAI6V,EAAAA,GAAK/U,MAAMb,EAAE,CAAA;QACjB,IAAI6V,EAAAA,GAAKhV,MAAMZ,EAAE,CAAA;QAEjBsO,EAAE,CAAC,CAAE,CAAA,GAAG,CAAC,KAAKwB,EAAAA,GAAKG,EAAC,CAAC,IAAKyF,EAAAA,CAAAA;AAC1BpH,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAG,CAAC9D,EAAAA,GAAK4F,EAAC,IAAKsF,EAAAA,CAAAA;AACpBpH,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAG,CAAC/D,EAAAA,GAAK4F,EAAC,IAAKuF,EAAAA,CAAAA;QACpBpH,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;AAERA,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAG,CAAC9D,EAAAA,GAAK4F,EAAC,IAAKuF,EAAAA,CAAAA;QACpBrH,EAAE,CAAC,CAAE,CAAA,GAAG,CAAC,KAAKsB,EAAAA,GAAKK,EAAC,CAAC,IAAK0F,EAAAA,CAAAA;AAC1BrH,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAG,CAAChE,EAAAA,GAAK4F,EAAC,IAAKyF,EAAAA,CAAAA;QACpBrH,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;AAERA,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAG,CAAC/D,EAAAA,GAAK4F,EAAC,IAAKyF,EAAAA,CAAAA;AACpBtH,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAG,CAAChE,EAAAA,GAAK4F,EAAC,IAAK0F,EAAAA,CAAAA;QACpBtH,EAAE,CAAC,EAAG,CAAA,GAAG,CAAC,KAAKsB,EAAAA,GAAKE,EAAC,CAAC,IAAK8F,EAAAA,CAAAA;QAC3BtH,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;AAETA,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAGT,WAAAA,CAAY/N,EAAE,CAAA;AACvBwO,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAGT,WAAAA,CAAY9N,EAAE,CAAA;AACvBuO,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAGT,WAAAA,CAAY7N,EAAE,CAAA;QACvBsO,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;AACX,KAAA,CAAA;AAEA;;;;MAvVW2G,OA4VJ5E,OAqBN,GArBD,SAAOA,OAAQxP,CAAAA,CAAU,EAAEc,GAAW,EAAQ;QAC5C,IAAM2M,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;AACvBuL,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAGzN,CAAAA,CAAEf,EAAE,CAAA;QACZwO,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QAERA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;AACRA,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAGzN,CAAAA,CAAEd,EAAE,CAAA;QACZuO,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QAERA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;AACRA,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAGzN,CAAAA,CAAEb,EAAE,CAAA;QACbsO,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;QAETA,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;QACTA,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;QACTA,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;QACTA,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;AACX,KAAA,CAAA;AAEA;;;;MAnXW2G,OAwXJpH,WAqBN,GArBD,SAAOA,WAAYA,CAAAA,WAAoB,EAAElM,GAAW,EAAQ;QAC1D,IAAM2M,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;QACvBuL,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QAERA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QAERA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;QACTA,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;AAETA,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAGT,WAAAA,CAAY/N,EAAE,CAAA;AACvBwO,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAGT,WAAAA,CAAY9N,EAAE,CAAA;AACvBuO,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAGT,WAAAA,CAAY7N,EAAE,CAAA;QACvBsO,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;AACX,KAAA,CAAA;AAEA;;;;MA/YW2G,OAoZJvH,MA2DN,GA3DD,SAAOA,MAAO7O,CAAAA,CAAS,EAAE8C,GAAW,EAAQ;QAC1C,IAAMwM,EAAAA,GAAKtP,EAAEkE,QAAQ,CAAA;QACrB,IAAMuL,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;AAEvB,QAAA,IAAM8J,MAAMsB,EAAE,CAAC,EAAE,EACfrB,GAAAA,GAAMqB,EAAE,CAAC,CAAA,CAAE,EACXpB,GAAAA,GAAMoB,EAAE,CAAC,CAAA,CAAE,EACXsC,GAAMtC,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACb,QAAA,IAAMnB,MAAMmB,EAAE,CAAC,EAAE,EACflB,GAAAA,GAAMkB,EAAE,CAAC,CAAA,CAAE,EACXjB,GAAAA,GAAMiB,EAAE,CAAC,CAAA,CAAE,EACXuC,GAAMvC,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACb,QAAA,IAAMhB,MAAMgB,EAAE,CAAC,EAAE,EACff,GAAAA,GAAMe,EAAE,CAAC,CAAA,CAAE,EACXd,GAAAA,GAAMc,EAAE,CAAC,EAAA,CAAG,EACZwC,GAAMxC,GAAAA,EAAE,CAAC,EAAG,CAAA,CAAA;AACd,QAAA,IAAMyC,MAAMzC,EAAE,CAAC,GAAG,EAChB0C,GAAAA,GAAM1C,EAAE,CAAC,EAAA,CAAG,EACZ2C,GAAAA,GAAM3C,EAAE,CAAC,EAAA,CAAG,EACZ4C,GAAM5C,GAAAA,EAAE,CAAC,EAAG,CAAA,CAAA;QAEd,IAAM6C,GAAAA,GAAMnE,GAAMI,GAAAA,GAAAA,GAAMH,GAAME,GAAAA,GAAAA,CAAAA;QAC9B,IAAMiE,GAAAA,GAAMpE,GAAMK,GAAAA,GAAAA,GAAMH,GAAMC,GAAAA,GAAAA,CAAAA;QAC9B,IAAMkE,GAAAA,GAAMrE,GAAM6D,GAAAA,GAAAA,GAAMD,GAAMzD,GAAAA,GAAAA,CAAAA;QAC9B,IAAMmE,GAAAA,GAAMrE,GAAMI,GAAAA,GAAAA,GAAMH,GAAME,GAAAA,GAAAA,CAAAA;QAC9B,IAAMmE,GAAAA,GAAMtE,GAAM4D,GAAAA,GAAAA,GAAMD,GAAMxD,GAAAA,GAAAA,CAAAA;QAC9B,IAAMoE,GAAAA,GAAMtE,GAAM2D,GAAAA,GAAAA,GAAMD,GAAMvD,GAAAA,GAAAA,CAAAA;QAC9B,IAAMoE,GAAAA,GAAMnE,GAAM0D,GAAAA,GAAAA,GAAMzD,GAAMwD,GAAAA,GAAAA,CAAAA;QAC9B,IAAMW,GAAAA,GAAMpE,GAAM2D,GAAAA,GAAAA,GAAMzD,GAAMuD,GAAAA,GAAAA,CAAAA;QAC9B,IAAMY,GAAAA,GAAMrE,GAAM4D,GAAAA,GAAAA,GAAMJ,GAAMC,GAAAA,GAAAA,CAAAA;QAC9B,IAAMa,GAAAA,GAAMrE,GAAM0D,GAAAA,GAAAA,GAAMzD,GAAMwD,GAAAA,GAAAA,CAAAA;QAC9B,IAAMa,GAAAA,GAAMtE,GAAM2D,GAAAA,GAAAA,GAAMJ,GAAME,GAAAA,GAAAA,CAAAA;QAC9B,IAAMc,GAAAA,GAAMtE,GAAM0D,GAAAA,GAAAA,GAAMJ,GAAMG,GAAAA,GAAAA,CAAAA;QAE9B,IAAIR,GAAAA,GAAMU,GAAMW,GAAAA,GAAAA,GAAMV,GAAMS,GAAAA,GAAAA,GAAMR,GAAMO,GAAAA,GAAAA,GAAMN,GAAMK,GAAAA,GAAAA,GAAMJ,GAAMG,GAAAA,GAAAA,GAAMF,GAAMC,GAAAA,GAAAA,CAAAA;AAC5E,QAAA,IAAI,CAAChB,GAAK,EAAA;AACR,YAAA,OAAO,IAAI,CAAA;SACZ;AACDA,QAAAA,GAAAA,GAAM,GAAMA,GAAAA,GAAAA,CAAAA;QAEZhC,EAAE,CAAC,CAAE,CAAA,GAAG,CAACrB,GAAM0E,GAAAA,GAAAA,GAAMzE,GAAMwE,GAAAA,GAAAA,GAAMhB,GAAMe,GAAAA,GAAE,IAAKnB,GAAAA,CAAAA;QAC9ChC,EAAE,CAAC,CAAE,CAAA,GAAG,CAACvB,GAAM2E,GAAAA,GAAAA,GAAM5E,GAAM6E,GAAAA,GAAAA,GAAMlB,GAAMgB,GAAAA,GAAE,IAAKnB,GAAAA,CAAAA;QAC9ChC,EAAE,CAAC,CAAE,CAAA,GAAG,CAACuC,GAAMQ,GAAAA,GAAAA,GAAMP,GAAMM,GAAAA,GAAAA,GAAML,GAAMI,GAAAA,GAAE,IAAKb,GAAAA,CAAAA;QAC9ChC,EAAE,CAAC,CAAE,CAAA,GAAG,CAACjB,GAAM+D,GAAAA,GAAAA,GAAMhE,GAAMiE,GAAAA,GAAAA,GAAMV,GAAMQ,GAAAA,GAAE,IAAKb,GAAAA,CAAAA;QAE9ChC,EAAE,CAAC,CAAE,CAAA,GAAG,CAACpB,GAAMsE,GAAAA,GAAAA,GAAMxE,GAAM2E,GAAAA,GAAAA,GAAMjB,GAAMa,GAAAA,GAAE,IAAKjB,GAAAA,CAAAA;QAC9ChC,EAAE,CAAC,CAAE,CAAA,GAAG,CAACzB,GAAM8E,GAAAA,GAAAA,GAAM5E,GAAMyE,GAAAA,GAAAA,GAAMf,GAAMc,GAAAA,GAAE,IAAKjB,GAAAA,CAAAA;QAC9ChC,EAAE,CAAC,CAAE,CAAA,GAAG,CAACwC,GAAMI,GAAAA,GAAAA,GAAMN,GAAMS,GAAAA,GAAAA,GAAMN,GAAME,GAAAA,GAAE,IAAKX,GAAAA,CAAAA;QAC9ChC,EAAE,CAAC,CAAE,CAAA,GAAG,CAACnB,GAAMkE,GAAAA,GAAAA,GAAMhE,GAAM6D,GAAAA,GAAAA,GAAMP,GAAMM,GAAAA,GAAE,IAAKX,GAAAA,CAAAA;QAE9ChC,EAAE,CAAC,CAAE,CAAA,GAAG,CAACtB,GAAM0E,GAAAA,GAAAA,GAAMzE,GAAMuE,GAAAA,GAAAA,GAAMd,GAAMY,GAAAA,GAAE,IAAKhB,GAAAA,CAAAA;QAC9ChC,EAAE,CAAC,CAAE,CAAA,GAAG,CAACxB,GAAM0E,GAAAA,GAAAA,GAAM3E,GAAM6E,GAAAA,GAAAA,GAAMjB,GAAMa,GAAAA,GAAE,IAAKhB,GAAAA,CAAAA;QAC9ChC,EAAE,CAAC,EAAG,CAAA,GAAG,CAACsC,GAAMQ,GAAAA,GAAAA,GAAMP,GAAMK,GAAAA,GAAAA,GAAMH,GAAMC,GAAAA,GAAE,IAAKV,GAAAA,CAAAA;QAC/ChC,EAAE,CAAC,EAAG,CAAA,GAAG,CAAClB,GAAM8D,GAAAA,GAAAA,GAAM/D,GAAMiE,GAAAA,GAAAA,GAAMT,GAAMK,GAAAA,GAAE,IAAKV,GAAAA,CAAAA;QAE/ChC,EAAE,CAAC,EAAG,CAAA,GAAG,CAACrB,GAAMsE,GAAAA,GAAAA,GAAMvE,GAAMyE,GAAAA,GAAAA,GAAMvE,GAAMoE,GAAAA,GAAE,IAAKhB,GAAAA,CAAAA;QAC/ChC,EAAE,CAAC,EAAG,CAAA,GAAG,CAACzB,GAAM4E,GAAAA,GAAAA,GAAM3E,GAAMyE,GAAAA,GAAAA,GAAMxE,GAAMuE,GAAAA,GAAE,IAAKhB,GAAAA,CAAAA;QAC/ChC,EAAE,CAAC,EAAG,CAAA,GAAG,CAACuC,GAAMI,GAAAA,GAAAA,GAAML,GAAMO,GAAAA,GAAAA,GAAML,GAAME,GAAAA,GAAE,IAAKV,GAAAA,CAAAA;QAC/ChC,EAAE,CAAC,EAAG,CAAA,GAAG,CAACnB,GAAMgE,GAAAA,GAAAA,GAAM/D,GAAM6D,GAAAA,GAAAA,GAAM5D,GAAM2D,GAAAA,GAAE,IAAKV,GAAAA,CAAAA;AACjD,KAAA,CAAA;AAEA;;;;;;AAMC,MACD,MAxdW2E,CAwdJqC,MA+BN,GA/BD,SAAOA,MAAAA,CAAOC,GAAY,EAAEC,MAAe,EAAEC,EAAW,EAAE9V,GAAW,EAAQ;QAC3E,IAAM2M,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;QACvB,IAAM2U,KAAAA,GAAiBzC,MA1ddA,CA0dqB7Q,UAAU,CAAA;QACxC,IAAMuT,KAAAA,GAAiB1C,MA3ddA,CA2dqBrP,UAAU,CAAA;QACxC,IAAMgS,KAAAA,GAAiB3C,MA5ddA,CA4dqBxO,UAAU,CAAA;QAExChH,OAAQW,CAAAA,QAAQ,CAACmX,GAAAA,EAAKC,MAAQI,EAAAA,KAAAA,CAAAA,CAAAA;AAC9BA,QAAAA,KAAAA,CAAMjX,SAAS,EAAA,CAAA;QACflB,OAAQuC,CAAAA,KAAK,CAACyV,EAAAA,EAAIG,KAAOF,EAAAA,KAAAA,CAAAA,CAAAA;AACzBA,QAAAA,KAAAA,CAAM/W,SAAS,EAAA,CAAA;QACflB,OAAQuC,CAAAA,KAAK,CAAC4V,KAAAA,EAAOF,KAAOC,EAAAA,KAAAA,CAAAA,CAAAA;AAE5BrJ,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAGoJ,KAAAA,CAAM5X,EAAE,CAAA;AAChBwO,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAGqJ,KAAAA,CAAM7X,EAAE,CAAA;AAChBwO,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAGsJ,KAAAA,CAAM9X,EAAE,CAAA;QAChBwO,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;AAERA,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAGoJ,KAAAA,CAAM3X,EAAE,CAAA;AAChBuO,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAGqJ,KAAAA,CAAM5X,EAAE,CAAA;AAChBuO,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAGsJ,KAAAA,CAAM7X,EAAE,CAAA;QAChBuO,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;AAERA,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAGoJ,KAAAA,CAAM1X,EAAE,CAAA;AAChBsO,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAGqJ,KAAAA,CAAM3X,EAAE,CAAA;AAChBsO,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAGsJ,KAAAA,CAAM5X,EAAE,CAAA;QACjBsO,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;AAETA,QAAAA,EAAE,CAAC,EAAG,CAAA,GAAG,CAAC7O,OAAQsC,CAAAA,GAAG,CAAC2V,KAAOH,EAAAA,GAAAA,CAAAA,CAAAA;AAC7BjJ,QAAAA,EAAE,CAAC,EAAG,CAAA,GAAG,CAAC7O,OAAQsC,CAAAA,GAAG,CAAC4V,KAAOJ,EAAAA,GAAAA,CAAAA,CAAAA;AAC7BjJ,QAAAA,EAAE,CAAC,EAAG,CAAA,GAAG,CAAC7O,OAAQsC,CAAAA,GAAG,CAAC6V,KAAOL,EAAAA,GAAAA,CAAAA,CAAAA;QAC7BjJ,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;AACX,KAAA,CAAA;AAEA;;;;;;;;;AASC,MACD,MAAOuJ,CAAAA,KAyBN,GAzBD,SAAOA,KAAAA,CAAM/V,IAAY,EAAE3B,KAAa,EAAE2K,MAAc,EAAED,GAAW,EAAEF,IAAY,EAAEC,GAAW,EAAEjJ,GAAW,EAAQ;QACnH,IAAM2M,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;AACvB,QAAA,IAAM+U,EAAK,GAAA,CAAA,IAAKhW,IAAAA,GAAO3B,KAAI,CAAA,CAAA;AAC3B,QAAA,IAAM4X,EAAK,GAAA,CAAA,IAAKjN,MAAAA,GAASD,GAAE,CAAA,CAAA;AAC3B,QAAA,IAAMmN,EAAK,GAAA,CAAA,IAAKrN,IAAAA,GAAOC,GAAE,CAAA,CAAA;AAEzB0D,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAG,CAAC,CAAIwJ,GAAAA,EAAAA,CAAAA;QACbxJ,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QAERA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;AACRA,QAAAA,EAAE,CAAC,CAAA,CAAE,GAAG,CAAC,CAAIyJ,GAAAA,EAAAA,CAAAA;QACbzJ,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QAERA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAG,CAAA,GAAG,CAAI0J,GAAAA,EAAAA,CAAAA;QACb1J,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;AAETA,QAAAA,EAAE,CAAC,EAAG,CAAA,GAAG,CAACxM,IAAAA,GAAO3B,KAAI,IAAK2X,EAAAA,CAAAA;AAC1BxJ,QAAAA,EAAE,CAAC,EAAG,CAAA,GAAG,CAACzD,GAAAA,GAAMC,MAAK,IAAKiN,EAAAA,CAAAA;AAC1BzJ,QAAAA,EAAE,CAAC,EAAG,CAAA,GAAG,CAAC1D,GAAAA,GAAMD,IAAG,IAAKqN,EAAAA,CAAAA;QACxB1J,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;AACX,KAAA,CAAA;AAEA;;;;;;;AAOC,MACD,MAtiBW2G,CAsiBJgD,WAwBN,GAxBD,SAAOA,WAAYC,CAAAA,IAAY,EAAEC,MAAc,EAAExN,IAAY,EAAEC,GAAW,EAAEjJ,GAAW,EAAQ;QAC7F,IAAM2M,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;AACvB,QAAA,IAAMqV,CAAI,GAAA,GAAA,GAAMzZ,IAAK0Z,CAAAA,GAAG,CAACH,IAAO,GAAA,CAAA,CAAA,CAAA;AAChC,QAAA,IAAMF,EAAK,GAAA,CAAA,IAAKrN,IAAAA,GAAOC,GAAE,CAAA,CAAA;QAEzB0D,EAAE,CAAC,CAAE,CAAA,GAAG8J,CAAID,GAAAA,MAAAA,CAAAA;QACZ7J,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QAERA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG8J,CAAAA,CAAAA;QACR9J,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QAERA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;QACRA,EAAE,CAAC,EAAE,GAAG,CAAA,CAAA;AACRA,QAAAA,EAAE,CAAC,EAAG,CAAA,GAAG,CAAC1D,GAAAA,GAAMD,IAAG,IAAKqN,EAAAA,CAAAA;QACxB1J,EAAE,CAAC,EAAG,CAAA,GAAG,CAAC,CAAA,CAAA;QAEVA,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;QACTA,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;AACTA,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAG,CAAA,GAAI1D,MAAMD,IAAOqN,GAAAA,EAAAA,CAAAA;QAC1B1J,EAAE,CAAC,GAAG,GAAG,CAAA,CAAA;AACX,KAAA,CAAA;AAEA;;;;;;AAMC,MACD,MAvkBW2G,CAukBJrC,eAoEN,GApED,SAAOA,eAAAA,CAAgB7R,CAAS,EAAE2R,IAAa,EAAEvT,CAAS,EAAEwC,GAAW,EAAQ;QAC7E,IAAUjC,CAAoBgT,GAAAA,IAAAA,CAAxB5S,EAAOC,EAAIJ,IAAa+S,IAAjB3S,CAAAA,EAAAA,EAAOC,CAAIJ,GAAM8S,IAAV1S,CAAAA,EAAAA,CAAAA;QACpB,IAAI6C,GAAAA,GAAMlE,KAAK6B,IAAI,CAACd,IAAIA,CAAIC,GAAAA,CAAAA,GAAIA,IAAIC,CAAIA,GAAAA,CAAAA,CAAAA,CAAAA;AAExC,QAAA,IAAIjB,KAAKI,GAAG,CAAC8D,GAAOvE,CAAAA,GAAAA,QAAAA,CAASU,aAAa,EAAE;AAC1C,YAAA,OAAA;SACD;QAED,IAAMiM,EAAAA,GAAKlK,EAAEgC,QAAQ,CAAA;QACrB,IAAMuL,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;AACvB,QAAA,IAAIlC,GAAG6F,CAAG9D,EAAAA,CAAAA,CAAAA;AAEVC,QAAAA,GAAAA,GAAM,CAAIA,GAAAA,GAAAA,CAAAA;QACVnD,CAAKmD,IAAAA,GAAAA,CAAAA;QACLlD,CAAKkD,IAAAA,GAAAA,CAAAA;QACLjD,CAAKiD,IAAAA,GAAAA,CAAAA;QAELhC,CAAIlC,GAAAA,IAAAA,CAAKiT,GAAG,CAACzS,CAAAA,CAAAA,CAAAA;QACbuH,CAAI/H,GAAAA,IAAAA,CAAKkT,GAAG,CAAC1S,CAAAA,CAAAA,CAAAA;AACbyD,QAAAA,CAAAA,GAAI,CAAI8D,GAAAA,CAAAA,CAAAA;AAER,QAAA,IAAImG,MAAM5B,EAAE,CAAC,EAAE,EACb6B,GAAAA,GAAM7B,EAAE,CAAC,CAAA,CAAE,EACX8B,GAAAA,GAAM9B,EAAE,CAAC,CAAA,CAAE,EACXwF,GAAMxF,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACb,QAAA,IAAI+B,MAAM/B,EAAE,CAAC,EAAE,EACbgC,GAAAA,GAAMhC,EAAE,CAAC,CAAA,CAAE,EACXiC,GAAAA,GAAMjC,EAAE,CAAC,CAAA,CAAE,EACXyF,GAAMzF,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACb,QAAA,IAAIkC,MAAMlC,EAAE,CAAC,EAAE,EACbmC,GAAAA,GAAMnC,EAAE,CAAC,CAAA,CAAE,EACXoC,GAAAA,GAAMpC,EAAE,CAAC,EAAA,CAAG,EACZ0F,GAAM1F,GAAAA,EAAE,CAAC,EAAG,CAAA,CAAA;;QAGd,IAAI0G,GAAAA,GAAMjS,CAAIA,GAAAA,CAAAA,GAAIkD,CAAI8D,GAAAA,CAAAA,CAAAA;AACtB,QAAA,IAAI4G,GAAM3N,GAAAA,CAAAA,GAAID,CAAIkD,GAAAA,CAAAA,GAAIhD,CAAIiB,GAAAA,CAAAA,CAAAA;AAC1B,QAAA,IAAIyX,GAAM1Y,GAAAA,CAAAA,GAAIF,CAAIkD,GAAAA,CAAAA,GAAIjD,CAAIkB,GAAAA,CAAAA,CAAAA;AAC1B,QAAA,IAAI0X,GAAM7Y,GAAAA,CAAAA,GAAIC,CAAIiD,GAAAA,CAAAA,GAAIhD,CAAIiB,GAAAA,CAAAA,CAAAA;QAC1B,IAAI0M,GAAAA,GAAM5N,CAAIA,GAAAA,CAAAA,GAAIiD,CAAI8D,GAAAA,CAAAA,CAAAA;AACtB,QAAA,IAAI8R,GAAM5Y,GAAAA,CAAAA,GAAID,CAAIiD,GAAAA,CAAAA,GAAIlD,CAAImB,GAAAA,CAAAA,CAAAA;AAC1B,QAAA,IAAI4X,GAAM/Y,GAAAA,CAAAA,GAAIE,CAAIgD,GAAAA,CAAAA,GAAIjD,CAAIkB,GAAAA,CAAAA,CAAAA;AAC1B,QAAA,IAAI2M,GAAM7N,GAAAA,CAAAA,GAAIC,CAAIgD,GAAAA,CAAAA,GAAIlD,CAAImB,GAAAA,CAAAA,CAAAA;QAC1B,IAAI6X,GAAAA,GAAM9Y,CAAIA,GAAAA,CAAAA,GAAIgD,CAAI8D,GAAAA,CAAAA,CAAAA;;AAGtB4H,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGzB,MAAM8E,GAAM3E,GAAAA,GAAAA,GAAMM,MAAMH,GAAMmL,GAAAA,GAAAA,CAAAA;AACtChK,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGxB,MAAM6E,GAAM1E,GAAAA,GAAAA,GAAMK,MAAMF,GAAMkL,GAAAA,GAAAA,CAAAA;AACtChK,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGvB,MAAM4E,GAAMzE,GAAAA,GAAAA,GAAMI,MAAMD,GAAMiL,GAAAA,GAAAA,CAAAA;AACtChK,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGmC,MAAMkB,GAAMjB,GAAAA,GAAAA,GAAMpD,MAAMqD,GAAM2H,GAAAA,GAAAA,CAAAA;AAEtChK,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGzB,MAAM0L,GAAMvL,GAAAA,GAAAA,GAAMO,MAAMJ,GAAMqL,GAAAA,GAAAA,CAAAA;AACtClK,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGxB,MAAMyL,GAAMtL,GAAAA,GAAAA,GAAMM,MAAMH,GAAMoL,GAAAA,GAAAA,CAAAA;AACtClK,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGvB,MAAMwL,GAAMrL,GAAAA,GAAAA,GAAMK,MAAMF,GAAMmL,GAAAA,GAAAA,CAAAA;AACtClK,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGmC,MAAM8H,GAAM7H,GAAAA,GAAAA,GAAMnD,MAAMoD,GAAM6H,GAAAA,GAAAA,CAAAA;AAEtClK,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGzB,MAAM4L,GAAMzL,GAAAA,GAAAA,GAAMQ,MAAML,GAAMuL,GAAAA,GAAAA,CAAAA;AACtCpK,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGxB,MAAM2L,GAAMxL,GAAAA,GAAAA,GAAMO,MAAMJ,GAAMsL,GAAAA,GAAAA,CAAAA;AACtCpK,QAAAA,EAAE,CAAC,EAAG,CAAA,GAAGvB,MAAM0L,GAAMvL,GAAAA,GAAAA,GAAMM,MAAMH,GAAMqL,GAAAA,GAAAA,CAAAA;AACvCpK,QAAAA,EAAE,CAAC,EAAG,CAAA,GAAGmC,MAAMgI,GAAM/H,GAAAA,GAAAA,GAAMlD,MAAMmD,GAAM+H,GAAAA,GAAAA,CAAAA;AAEvC,QAAA,IAAI3X,MAAMY,GAAK,EAAA;;AAEb2M,YAAAA,EAAE,CAAC,EAAA,CAAG,GAAGrD,EAAE,CAAC,EAAG,CAAA,CAAA;AACfqD,YAAAA,EAAE,CAAC,EAAA,CAAG,GAAGrD,EAAE,CAAC,EAAG,CAAA,CAAA;AACfqD,YAAAA,EAAE,CAAC,EAAA,CAAG,GAAGrD,EAAE,CAAC,EAAG,CAAA,CAAA;AACfqD,YAAAA,EAAE,CAAC,EAAA,CAAG,GAAGrD,EAAE,CAAC,EAAG,CAAA,CAAA;SAChB;AACH,KAAA,CAAA;AAEA;;;;;MA7oBWgK,MAmpBJrU,CAAAA,KAwBN,GAxBD,SAAOA,KAAMG,CAAAA,CAAS,EAAEF,CAAU,EAAEc,GAAW,EAAQ;QACrD,IAAMsJ,EAAAA,GAAKlK,EAAEgC,QAAQ,CAAA;QACrB,IAAMuL,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;QACvB,IAAYrD,CAAoBmB,GAAAA,CAAAA,CAAxBf,EAAOC,EAAIJ,IAAakB,CAAjBd,CAAAA,EAAAA,EAAOC,CAAIJ,GAAMiB,CAAVb,CAAAA,EAAAA,CAAAA;AAEtBsO,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGrD,EAAE,CAAC,EAAE,GAAGvL,CAAAA,CAAAA;AAChB4O,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGrD,EAAE,CAAC,EAAE,GAAGvL,CAAAA,CAAAA;AAChB4O,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGrD,EAAE,CAAC,EAAE,GAAGvL,CAAAA,CAAAA;AAChB4O,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGrD,EAAE,CAAC,EAAE,GAAGvL,CAAAA,CAAAA;AAEhB4O,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGrD,EAAE,CAAC,EAAE,GAAGtL,CAAAA,CAAAA;AAChB2O,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGrD,EAAE,CAAC,EAAE,GAAGtL,CAAAA,CAAAA;AAChB2O,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGrD,EAAE,CAAC,EAAE,GAAGtL,CAAAA,CAAAA;AAChB2O,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGrD,EAAE,CAAC,EAAE,GAAGtL,CAAAA,CAAAA;AAEhB2O,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGrD,EAAE,CAAC,EAAE,GAAGrL,CAAAA,CAAAA;AAChB0O,QAAAA,EAAE,CAAC,CAAE,CAAA,GAAGrD,EAAE,CAAC,EAAE,GAAGrL,CAAAA,CAAAA;AAChB0O,QAAAA,EAAE,CAAC,EAAG,CAAA,GAAGrD,EAAE,CAAC,GAAG,GAAGrL,CAAAA,CAAAA;AAClB0O,QAAAA,EAAE,CAAC,EAAG,CAAA,GAAGrD,EAAE,CAAC,GAAG,GAAGrL,CAAAA,CAAAA;AAElB0O,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAGrD,EAAE,CAAC,EAAG,CAAA,CAAA;AACfqD,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAGrD,EAAE,CAAC,EAAG,CAAA,CAAA;AACfqD,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAGrD,EAAE,CAAC,EAAG,CAAA,CAAA;AACfqD,QAAAA,EAAE,CAAC,EAAA,CAAG,GAAGrD,EAAE,CAAC,EAAG,CAAA,CAAA;AACjB,KAAA,CAAA;AAEA;;;;;MA7qBWgK,MAmrBJrH,CAAAA,SAiCN,GAjCD,SAAOA,SAAU7M,CAAAA,CAAS,EAAEvC,CAAU,EAAEmD,GAAW,EAAQ;QACzD,IAAMsJ,EAAAA,GAAKlK,EAAEgC,QAAQ,CAAA;QACrB,IAAMuL,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;QACvB,IAAYrD,CAAoBlB,GAAAA,CAAAA,CAAxBsB,EAAOC,EAAIJ,IAAanB,CAAjBuB,CAAAA,EAAAA,EAAOC,CAAIJ,GAAMpB,CAAVwB,CAAAA,EAAAA,CAAAA;AAEtB,QAAA,IAAIe,MAAMY,GAAK,EAAA;YACb2M,EAAE,CAAC,GAAG,GAAGrD,EAAE,CAAC,CAAE,CAAA,GAAGvL,IAAIuL,EAAE,CAAC,EAAE,GAAGtL,CAAAA,GAAIsL,EAAE,CAAC,CAAA,CAAE,GAAGrL,CAAIqL,GAAAA,EAAE,CAAC,EAAG,CAAA,CAAA;YACnDqD,EAAE,CAAC,GAAG,GAAGrD,EAAE,CAAC,CAAE,CAAA,GAAGvL,IAAIuL,EAAE,CAAC,EAAE,GAAGtL,CAAAA,GAAIsL,EAAE,CAAC,CAAA,CAAE,GAAGrL,CAAIqL,GAAAA,EAAE,CAAC,EAAG,CAAA,CAAA;YACnDqD,EAAE,CAAC,GAAG,GAAGrD,EAAE,CAAC,CAAE,CAAA,GAAGvL,IAAIuL,EAAE,CAAC,EAAE,GAAGtL,CAAAA,GAAIsL,EAAE,CAAC,EAAA,CAAG,GAAGrL,CAAIqL,GAAAA,EAAE,CAAC,EAAG,CAAA,CAAA;YACpDqD,EAAE,CAAC,GAAG,GAAGrD,EAAE,CAAC,CAAE,CAAA,GAAGvL,IAAIuL,EAAE,CAAC,EAAE,GAAGtL,CAAAA,GAAIsL,EAAE,CAAC,EAAA,CAAG,GAAGrL,CAAIqL,GAAAA,EAAE,CAAC,EAAG,CAAA,CAAA;SAC/C,MAAA;AACL,YAAA,IAAM4B,MAAM5B,EAAE,CAAC,EAAE,EACf6B,GAAAA,GAAM7B,EAAE,CAAC,CAAA,CAAE,EACX8B,GAAAA,GAAM9B,EAAE,CAAC,CAAA,CAAE,EACXwF,GAAMxF,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACb,YAAA,IAAM+B,MAAM/B,EAAE,CAAC,EAAE,EACfgC,GAAAA,GAAMhC,EAAE,CAAC,CAAA,CAAE,EACXiC,GAAAA,GAAMjC,EAAE,CAAC,CAAA,CAAE,EACXyF,GAAMzF,GAAAA,EAAE,CAAC,CAAE,CAAA,CAAA;AACb,YAAA,IAAMkC,MAAMlC,EAAE,CAAC,EAAE,EACfmC,GAAAA,GAAMnC,EAAE,CAAC,CAAA,CAAE,EACXoC,GAAAA,GAAMpC,EAAE,CAAC,EAAA,CAAG,EACZ0F,GAAM1F,GAAAA,EAAE,CAAC,EAAG,CAAA,CAAA;AAEbqD,YAAAA,EAAE,CAAC,CAAE,CAAA,GAAGzB,KAAOyB,EAAE,CAAC,EAAE,GAAGxB,GAAAA,EAAOwB,EAAE,CAAC,EAAE,GAAGvB,GAAAA,EAAOuB,EAAE,CAAC,CAAA,CAAE,GAAGmC,GAAI,CAAA;AACzDnC,YAAAA,EAAE,CAAC,CAAE,CAAA,GAAGtB,KAAOsB,EAAE,CAAC,EAAE,GAAGrB,GAAAA,EAAOqB,EAAE,CAAC,EAAE,GAAGpB,GAAAA,EAAOoB,EAAE,CAAC,CAAA,CAAE,GAAGoC,GAAI,CAAA;AACzDpC,YAAAA,EAAE,CAAC,CAAE,CAAA,GAAGnB,KAAOmB,EAAE,CAAC,EAAE,GAAGlB,GAAAA,EAAOkB,EAAE,CAAC,GAAG,GAAGjB,GAAAA,EAAOiB,EAAE,CAAC,EAAA,CAAG,GAAGqC,GAAI,CAAA;YAE5DrC,EAAE,CAAC,EAAG,CAAA,GAAGzB,GAAMnN,GAAAA,CAAAA,GAAIsN,GAAMrN,GAAAA,CAAAA,GAAIwN,GAAMvN,GAAAA,CAAAA,GAAIqL,EAAE,CAAC,EAAG,CAAA,CAAA;YAC7CqD,EAAE,CAAC,EAAG,CAAA,GAAGxB,GAAMpN,GAAAA,CAAAA,GAAIuN,GAAMtN,GAAAA,CAAAA,GAAIyN,GAAMxN,GAAAA,CAAAA,GAAIqL,EAAE,CAAC,EAAG,CAAA,CAAA;YAC7CqD,EAAE,CAAC,EAAG,CAAA,GAAGvB,GAAMrN,GAAAA,CAAAA,GAAIwN,GAAMvN,GAAAA,CAAAA,GAAI0N,GAAMzN,GAAAA,CAAAA,GAAIqL,EAAE,CAAC,EAAG,CAAA,CAAA;YAC7CqD,EAAE,CAAC,EAAG,CAAA,GAAGmC,GAAM/Q,GAAAA,CAAAA,GAAIgR,GAAM/Q,GAAAA,CAAAA,GAAIgR,GAAM/Q,GAAAA,CAAAA,GAAIqL,EAAE,CAAC,EAAG,CAAA,CAAA;SAC9C;AACH,KAAA,CAAA;AAEA;;;;MAttBWgK,OA2tBJnH,SAgDN,GAhDD,SAAOA,SAAUjP,CAAAA,CAAS,EAAE8C,GAAW,EAAQ;QAC7C,IAAMwM,EAAAA,GAAKtP,EAAEkE,QAAQ,CAAA;QACrB,IAAMuL,EAAAA,GAAK3M,IAAIoB,QAAQ,CAAA;AAEvB,QAAA,IAAIpB,QAAQ9C,CAAG,EAAA;YACb,IAAMiO,GAAAA,GAAMqB,EAAE,CAAC,CAAE,CAAA,CAAA;YACjB,IAAMpB,GAAAA,GAAMoB,EAAE,CAAC,CAAE,CAAA,CAAA;YACjB,IAAMsC,GAAAA,GAAMtC,EAAE,CAAC,CAAE,CAAA,CAAA;YACjB,IAAMjB,GAAAA,GAAMiB,EAAE,CAAC,CAAE,CAAA,CAAA;YACjB,IAAMuC,GAAAA,GAAMvC,EAAE,CAAC,CAAE,CAAA,CAAA;YACjB,IAAMwC,GAAAA,GAAMxC,EAAE,CAAC,EAAG,CAAA,CAAA;AAElBG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACbG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACbG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,EAAG,CAAA,CAAA;YAEdG,EAAE,CAAC,EAAE,GAAGxB,GAAAA,CAAAA;AACRwB,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACbG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,EAAG,CAAA,CAAA;YAEdG,EAAE,CAAC,EAAE,GAAGvB,GAAAA,CAAAA;YACRuB,EAAE,CAAC,EAAE,GAAGpB,GAAAA,CAAAA;AACRoB,YAAAA,EAAE,CAAC,EAAA,CAAG,GAAGH,EAAE,CAAC,EAAG,CAAA,CAAA;YAEfG,EAAE,CAAC,GAAG,GAAGmC,GAAAA,CAAAA;YACTnC,EAAE,CAAC,GAAG,GAAGoC,GAAAA,CAAAA;YACTpC,EAAE,CAAC,GAAG,GAAGqC,GAAAA,CAAAA;SACJ,MAAA;AACLrC,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACbG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACbG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACbG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,EAAG,CAAA,CAAA;AAEdG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACbG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACbG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACbG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,EAAG,CAAA,CAAA;AAEdG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACbG,YAAAA,EAAE,CAAC,CAAA,CAAE,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACbG,YAAAA,EAAE,CAAC,EAAA,CAAG,GAAGH,EAAE,CAAC,EAAG,CAAA,CAAA;AACfG,YAAAA,EAAE,CAAC,EAAA,CAAG,GAAGH,EAAE,CAAC,EAAG,CAAA,CAAA;AAEfG,YAAAA,EAAE,CAAC,EAAA,CAAG,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACdG,YAAAA,EAAE,CAAC,EAAA,CAAG,GAAGH,EAAE,CAAC,CAAE,CAAA,CAAA;AACdG,YAAAA,EAAE,CAAC,EAAA,CAAG,GAAGH,EAAE,CAAC,EAAG,CAAA,CAAA;AACfG,YAAAA,EAAE,CAAC,EAAA,CAAG,GAAGH,EAAE,CAAC,EAAG,CAAA,CAAA;SAChB;AACH,KAAA,CAAA;AA3wBW8G,IAAAA,OAAAA,MAAAA,CAAAA;AAmwCZ,CAAA,GAAA;;AAnwCYA,IAAAA,MAAAA,CACa7Q,aAAsB,IAAI3E,OAAAA,EAAAA,CAAAA;;;AADvCwV,IAAAA,MAAAA,CAEarP,aAAsB,IAAInG,OAAAA,EAAAA,CAAAA;;;AAFvCwV,IAAAA,MAAAA,CAGaxO,aAAsB,IAAIhH,OAAAA,EAAAA,CAAAA;;;AAHvCwV,IAAAA,MAAAA,CAIaI,aAAwB,IAAI3I,SAAAA,EAAAA,CAAAA;;;AAEpD,sCANWuI,MAOK0D,CAAAA,SAAAA,GAAoB,IAAI1D,MACtC,CAAA,GAAA,EACA,KACA,GACA,EAAA,GAAA,EACA,KACA,GACA,EAAA,GAAA,EACA,KACA,GACA,EAAA,GAAA,EACA,KACA,GACA,EAAA,GAAA,EACA,KACA,GACA,EAAA,GAAA,CAAA,CAAA;;;AC3BJ;;IAGO,IAAM2D,GAAN,iBAAA,WAAA;aAAMA,GAWCrR,CAAAA,MAAsB,EAAEF,SAAyB,EAAA;QAAjDE,IAAAA,MAAAA,KAAAA,KAAAA,CAAAA,EAAAA,SAAkB,IAAI,CAAA;QAAEF,IAAAA,SAAAA,KAAAA,KAAAA,CAAAA,EAAAA,YAAqB,IAAI,CAAA;sCAVlC,IAAA,CAClBE,SAAkB,IAAI9H,OAAAA,EAAAA,CAAAA;oDACU,IAAA,CAChC4H,YAAqB,IAAI5H,OAAAA,EAAAA,CAAAA;AAQhC8H,QAAAA,MAAAA,IAAU,IAAI,CAACA,MAAM,CAAClG,QAAQ,CAACkG,MAAAA,CAAAA,CAAAA;AAC/BF,QAAAA,SAAAA,IAAa,IAAI,CAACA,SAAS,CAAChG,QAAQ,CAACgG,SAAAA,CAAAA,CAAAA;;AAb5BuR,IAAAA,IAAAA,MAAAA,GAAAA,GAAAA,CAAAA,SAAAA,CAAAA;AAgBX;;;;AAIC,MACDC,OAAAA,cAEC,GAFDA,SAAAA,cAAAA,CAAejS,KAAY,EAAU;AACnC,QAAA,OAAOZ,aAAckB,CAAAA,qBAAqB,CAAC,IAAI,EAAEN,KAAAA,CAAAA,CAAAA;AACnD,KAAA,CAAA;AAEA;;;;AAIC,MACDkS,OAAAA,eAEC,GAFDA,SAAAA,eAAAA,CAAgBnT,MAAsB,EAAU;AAC9C,QAAA,OAAOK,aAAcoC,CAAAA,sBAAsB,CAAC,IAAI,EAAEzC,MAAAA,CAAAA,CAAAA;AACpD,KAAA,CAAA;AAEA;;;;AAIC,MACDoT,OAAAA,YAEC,GAFDA,SAAAA,YAAAA,CAAaxU,GAAgB,EAAU;AACrC,QAAA,OAAOyB,aAAcwB,CAAAA,mBAAmB,CAAC,IAAI,EAAEjD,GAAAA,CAAAA,CAAAA;AACjD,KAAA,CAAA;AAEA;;;;;MAMAyU,MAAAA,CAAAA,QAGC,GAHDA,SAAAA,SAASzW,QAAgB,EAAEZ,GAAY,EAAW;AAChDlC,QAAAA,OAAAA,CAAQmB,KAAK,CAAC,IAAI,CAACyG,SAAS,EAAE9E,QAAUZ,EAAAA,GAAAA,CAAAA,CAAAA;AACxC,QAAA,OAAOA,GAAIzB,CAAAA,GAAG,CAAC,IAAI,CAACqH,MAAM,CAAA,CAAA;AAC5B,KAAA,CAAA;AApDWqR,IAAAA,OAAAA,GAAAA,CAAAA;AAqDZ,CAAA;;AC1DD;;AAEC,IACM,IAAA,OAAMK,iBA8XV,WA9XI;aAAMA,OAmNCvZ,CAAAA,CAAa,EAAEC,CAAa,EAAA;AAA5BD,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;AAAGC,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;yBAhCzB,IAAA,CACdE,kBAA8B,IAAI,CAAA;QAgChC,IAAI,CAACC,EAAE,GAAGJ,CAAAA,CAAAA;QACV,IAAI,CAACK,EAAE,GAAGJ,CAAAA,CAAAA;;AArNDsZ,IAAAA,IAAAA,MAAAA,GAAAA,OAAAA,CAAAA,SAAAA,CAAAA;AAwNX;;;;;MAMAhZ,MAAAA,CAAAA,GAKC,GALDA,SAAAA,IAAIP,CAAS,EAAEC,CAAS,EAAW;QACjC,IAAI,CAACG,EAAE,GAAGJ,CAAAA,CAAAA;QACV,IAAI,CAACK,EAAE,GAAGJ,CAAAA,CAAAA;AACV,QAAA,IAAI,CAACE,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDK,OAAAA,GAKC,GALDA,SAAAA,GAAAA,CAAIC,KAAc,EAAW;AAC3B,QAAA,IAAI,CAACL,EAAE,IAAIK,KAAAA,CAAML,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAII,KAAAA,CAAMJ,EAAE,CAAA;AACnB,QAAA,IAAI,CAACF,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDO,OAAAA,QAKC,GALDA,SAAAA,QAAAA,CAASD,KAAc,EAAW;AAChC,QAAA,IAAI,CAACL,EAAE,IAAIK,KAAAA,CAAML,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAII,KAAAA,CAAMJ,EAAE,CAAA;AACnB,QAAA,IAAI,CAACF,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDQ,OAAAA,QAKC,GALDA,SAAAA,QAAAA,CAASF,KAAc,EAAW;AAChC,QAAA,IAAI,CAACL,EAAE,IAAIK,KAAAA,CAAML,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAII,KAAAA,CAAMJ,EAAE,CAAA;AACnB,QAAA,IAAI,CAACF,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDS,OAAAA,MAKC,GALDA,SAAAA,MAAAA,CAAOH,KAAc,EAAW;AAC9B,QAAA,IAAI,CAACL,EAAE,IAAIK,KAAAA,CAAML,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAII,KAAAA,CAAMJ,EAAE,CAAA;AACnB,QAAA,IAAI,CAACF,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACDU,MAAAA,CAAAA,MAGC,GAHDA,SAAAA,MAAiB,GAAA;AACf,QAAA,IAAmB,QAAA,IAAI,EAAfT,KAAW,KAAXA,CAAAA,EAAAA,EAAIC,KAAO,KAAPA,CAAAA,EAAAA,CAAAA;AACZ,QAAA,OAAOpB,IAAK6B,CAAAA,IAAI,CAACV,EAAAA,GAAKA,KAAKC,EAAKA,GAAAA,EAAAA,CAAAA,CAAAA;AAClC,KAAA,CAAA;AAEA;;;AAGC,MACDU,MAAAA,CAAAA,aAGC,GAHDA,SAAAA,aAAwB,GAAA;AACtB,QAAA,IAAmB,QAAA,IAAI,EAAfX,KAAW,KAAXA,CAAAA,EAAAA,EAAIC,KAAO,KAAPA,CAAAA,EAAAA,CAAAA;QACZ,OAAOD,EAAAA,GAAKA,KAAKC,EAAKA,GAAAA,EAAAA,CAAAA;AACxB,KAAA,CAAA;AAEA;;;AAGC,MACDW,MAAAA,CAAAA,MAKC,GALDA,SAAAA,MAAkB,GAAA;AAChB,QAAA,IAAI,CAACZ,EAAE,GAAG,CAAC,IAAI,CAACA,EAAE,CAAA;AAClB,QAAA,IAAI,CAACC,EAAE,GAAG,CAAC,IAAI,CAACA,EAAE,CAAA;AAClB,QAAA,IAAI,CAACF,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACDc,MAAAA,CAAAA,SAGC,GAHDA,SAAAA,SAAqB,GAAA;AAtTVsY,QAAAA,OAAAA,CAuTDtY,SAAS,CAAC,IAAI,EAAE,IAAI,CAAA,CAAA;AAC5B,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDC,OAAAA,KAKC,GALDA,SAAAA,KAAAA,CAAMC,CAAS,EAAW;QACxB,IAAI,CAACf,EAAE,IAAIe,CAAAA,CAAAA;QACX,IAAI,CAACd,EAAE,IAAIc,CAAAA,CAAAA;AACX,QAAA,IAAI,CAAChB,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACDuB,MAAAA,CAAAA,KAEC,GAFDA,SAAAA,KAAiB,GAAA;QACf,OAAO,IA5UE6X,QA4UU,IAAI,CAACnZ,EAAE,EAAE,IAAI,CAACC,EAAE,CAAA,CAAA;AACrC,KAAA,CAAA;AAEA;;;;AAIC,MACDsB,OAAAA,QAKC,GALDA,SAAAA,QAAAA,CAASC,MAAmB,EAAW;AACrC,QAAA,IAAI,CAACxB,EAAE,GAAGwB,MAAAA,CAAO5B,CAAC,CAAA;AAClB,QAAA,IAAI,CAACK,EAAE,GAAGuB,MAAAA,CAAO3B,CAAC,CAAA;AAClB,QAAA,IAAI,CAACE,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;;MAMA0B,MAAAA,CAAAA,aAKC,GALDA,SAAAA,cAAcC,KAAwB,EAAEC,MAAkB,EAAW;AAA7BA,QAAAA,IAAAA,mBAAAA,MAAiB,GAAA,CAAA,CAAA;AACvD,QAAA,IAAI,CAAC3B,EAAE,GAAG0B,KAAK,CAACC,MAAO,CAAA,CAAA;AACvB,QAAA,IAAI,CAAC1B,EAAE,GAAGyB,KAAK,CAACC,SAAS,CAAE,CAAA,CAAA;AAC3B,QAAA,IAAI,CAAC5B,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;MAKA6B,MAAAA,CAAAA,WAGC,GAHDA,SAAAA,YAAYC,GAA2C,EAAEC,SAAqB,EAAE;AAAvBA,QAAAA,IAAAA,sBAAAA,SAAoB,GAAA,CAAA,CAAA;AAC3ED,QAAAA,GAAG,CAACC,SAAAA,CAAU,GAAG,IAAI,CAAC9B,EAAE,CAAA;AACxB6B,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAG,IAAI,CAAC7B,EAAE,CAAA;AAC9B,KAAA,CAAA;AAEA;;;AAGC,MACD8B,MAAAA,CAAAA,MAKC,GALDA,SAAAA,MAAsB,GAAA;QACpB,OAAO;YACLnC,CAAG,EAAA,IAAI,CAACI,EAAE;YACVH,CAAG,EAAA,IAAI,CAACI,EAAE;AACZ,SAAA,CAAA;AACF,KAAA,CAAA;AArXA;;;;;MANWkZ,OAYJ/Y,CAAAA,GAIN,GAJD,SAAOA,GAAI4B,CAAAA,IAAa,EAAE3B,KAAc,EAAEwB,GAAY,EAAQ;AAC5DA,QAAAA,GAAAA,CAAI7B,EAAE,GAAGgC,IAAAA,CAAKhC,EAAE,GAAGK,MAAML,EAAE,CAAA;AAC3B6B,QAAAA,GAAAA,CAAI5B,EAAE,GAAG+B,IAAAA,CAAK/B,EAAE,GAAGI,MAAMJ,EAAE,CAAA;QAC3B4B,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MAlBWoZ,OAwBJ7Y,CAAAA,QAIN,GAJD,SAAOA,QAAS0B,CAAAA,IAAa,EAAE3B,KAAc,EAAEwB,GAAY,EAAQ;AACjEA,QAAAA,GAAAA,CAAI7B,EAAE,GAAGgC,IAAAA,CAAKhC,EAAE,GAAGK,MAAML,EAAE,CAAA;AAC3B6B,QAAAA,GAAAA,CAAI5B,EAAE,GAAG+B,IAAAA,CAAK/B,EAAE,GAAGI,MAAMJ,EAAE,CAAA;QAC3B4B,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MA9BWoZ,OAoCJ5Y,CAAAA,QAIN,GAJD,SAAOA,QAASyB,CAAAA,IAAa,EAAE3B,KAAc,EAAEwB,GAAY,EAAQ;AACjEA,QAAAA,GAAAA,CAAI7B,EAAE,GAAGgC,IAAAA,CAAKhC,EAAE,GAAGK,MAAML,EAAE,CAAA;AAC3B6B,QAAAA,GAAAA,CAAI5B,EAAE,GAAG+B,IAAAA,CAAK/B,EAAE,GAAGI,MAAMJ,EAAE,CAAA;QAC3B4B,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MA1CWoZ,OAgDJ3Y,CAAAA,MAIN,GAJD,SAAOA,MAAOwB,CAAAA,IAAa,EAAE3B,KAAc,EAAEwB,GAAY,EAAQ;AAC/DA,QAAAA,GAAAA,CAAI7B,EAAE,GAAGgC,IAAAA,CAAKhC,EAAE,GAAGK,MAAML,EAAE,CAAA;AAC3B6B,QAAAA,GAAAA,CAAI5B,EAAE,GAAG+B,IAAAA,CAAK/B,EAAE,GAAGI,MAAMJ,EAAE,CAAA;QAC3B4B,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MAtDWoZ,QA4DJlX,GAEN,GAFD,SAAOA,GAAID,CAAAA,IAAa,EAAE3B,KAAc,EAAU;QAChD,OAAO2B,IAAAA,CAAKhC,EAAE,GAAGK,KAAML,CAAAA,EAAE,GAAGgC,IAAK/B,CAAAA,EAAE,GAAGI,KAAAA,CAAMJ,EAAE,CAAA;AAChD,KAAA,CAAA;AAEA;;;;;MAhEWkZ,QAsEJ1W,QAIN,GAJD,SAAOA,QAAST,CAAAA,IAAa,EAAE3B,KAAc,EAAU;AACrD,QAAA,IAAMT,CAAIS,GAAAA,KAAAA,CAAML,EAAE,GAAGgC,KAAKhC,EAAE,CAAA;AAC5B,QAAA,IAAMH,CAAIQ,GAAAA,KAAAA,CAAMJ,EAAE,GAAG+B,KAAK/B,EAAE,CAAA;AAC5B,QAAA,OAAOpB,IAAK6B,CAAAA,IAAI,CAACd,CAAAA,GAAIA,IAAIC,CAAIA,GAAAA,CAAAA,CAAAA,CAAAA;AAC/B,KAAA,CAAA;AAEA;;;;;MA5EWsZ,QAkFJzW,eAIN,GAJD,SAAOA,eAAgBV,CAAAA,IAAa,EAAE3B,KAAc,EAAU;AAC5D,QAAA,IAAMT,CAAIS,GAAAA,KAAAA,CAAML,EAAE,GAAGgC,KAAKhC,EAAE,CAAA;AAC5B,QAAA,IAAMH,CAAIQ,GAAAA,KAAAA,CAAMJ,EAAE,GAAG+B,KAAK/B,EAAE,CAAA;QAC5B,OAAOL,CAAAA,GAAIA,IAAIC,CAAIA,GAAAA,CAAAA,CAAAA;AACrB,KAAA,CAAA;AAEA;;;;;MAxFWsZ,QA8FJra,MAEN,GAFD,SAAOA,MAAOkD,CAAAA,IAAa,EAAE3B,KAAc,EAAW;AACpD,QAAA,OAAO7B,SAASM,MAAM,CAACkD,IAAKhC,CAAAA,EAAE,EAAEK,KAAML,CAAAA,EAAE,CAAKxB,IAAAA,QAAAA,CAASM,MAAM,CAACkD,IAAAA,CAAK/B,EAAE,EAAEI,MAAMJ,EAAE,CAAA,CAAA;AAChF,KAAA,CAAA;AAEA;;;;;;AAMC,MACD,OAzGWkZ,CAyGJxW,IAKN,GALD,SAAOA,IAAAA,CAAKX,IAAa,EAAE3B,KAAc,EAAEyC,CAAS,EAAEjB,GAAY,EAAQ;AACxE,QAAA,IAAQ7B,EAAWgC,GAAAA,IAAAA,CAAXhC,EAAIC,EAAAA,EAAAA,GAAO+B,IAAP/B,CAAAA,EAAAA,CAAAA;QACZ4B,GAAI7B,CAAAA,EAAE,GAAGA,EAAK,GAACK,CAAAA,KAAML,CAAAA,EAAE,GAAGA,EAAC,IAAK8C,CAAAA,CAAAA;QAChCjB,GAAI5B,CAAAA,EAAE,GAAGA,EAAK,GAACI,CAAAA,KAAMJ,CAAAA,EAAE,GAAGA,EAAC,IAAK6C,CAAAA,CAAAA;QAChCjB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MAhHWoZ,OAsHJva,CAAAA,GAIN,GAJD,SAAOA,GAAIoD,CAAAA,IAAa,EAAE3B,KAAc,EAAEwB,GAAY,EAAQ;QAC5DA,GAAI7B,CAAAA,EAAE,GAAGnB,IAAKD,CAAAA,GAAG,CAACoD,IAAKhC,CAAAA,EAAE,EAAEK,KAAAA,CAAML,EAAE,CAAA,CAAA;QACnC6B,GAAI5B,CAAAA,EAAE,GAAGpB,IAAKD,CAAAA,GAAG,CAACoD,IAAK/B,CAAAA,EAAE,EAAEI,KAAAA,CAAMJ,EAAE,CAAA,CAAA;QACnC4B,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MA5HWoZ,OAkIJxa,CAAAA,GAIN,GAJD,SAAOA,GAAIqD,CAAAA,IAAa,EAAE3B,KAAc,EAAEwB,GAAY,EAAQ;QAC5DA,GAAI7B,CAAAA,EAAE,GAAGnB,IAAKF,CAAAA,GAAG,CAACqD,IAAKhC,CAAAA,EAAE,EAAEK,KAAAA,CAAML,EAAE,CAAA,CAAA;QACnC6B,GAAI5B,CAAAA,EAAE,GAAGpB,IAAKF,CAAAA,GAAG,CAACqD,IAAK/B,CAAAA,EAAE,EAAEI,KAAAA,CAAMJ,EAAE,CAAA,CAAA;QACnC4B,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;MAxIWoZ,QA6IJvY,MAIN,GAJD,SAAOA,MAAOoB,CAAAA,IAAa,EAAEH,GAAY,EAAQ;AAC/CA,QAAAA,GAAAA,CAAI7B,EAAE,GAAG,CAACgC,IAAAA,CAAKhC,EAAE,CAAA;AACjB6B,QAAAA,GAAAA,CAAI5B,EAAE,GAAG,CAAC+B,IAAAA,CAAK/B,EAAE,CAAA;QACjB4B,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;MAnJWoZ,QAwJJtY,SASN,GATD,SAAOA,SAAUmB,CAAAA,IAAa,EAAEH,GAAY,EAAQ;AAClD,QAAA,IAAQ7B,EAAWgC,GAAAA,IAAAA,CAAXhC,EAAIC,EAAAA,EAAAA,GAAO+B,IAAP/B,CAAAA,EAAAA,CAAAA;AACZ,QAAA,IAAI8C,MAAMlE,IAAK6B,CAAAA,IAAI,CAACV,EAAAA,GAAKA,KAAKC,EAAKA,GAAAA,EAAAA,CAAAA,CAAAA;QACnC,IAAI8C,GAAAA,GAAMvE,QAASU,CAAAA,aAAa,EAAE;AAChC6D,YAAAA,GAAAA,GAAM,CAAIA,GAAAA,GAAAA,CAAAA;YACVlB,GAAI7B,CAAAA,EAAE,GAAGA,EAAK+C,GAAAA,GAAAA,CAAAA;YACdlB,GAAI5B,CAAAA,EAAE,GAAGA,EAAK8C,GAAAA,GAAAA,CAAAA;YACdlB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;SAC3C;AACH,KAAA,CAAA;AAEA;;;;;MAnKWoZ,OAyKJrY,CAAAA,KAIN,GAJD,SAAOA,KAAMkB,CAAAA,IAAa,EAAEjB,CAAS,EAAEc,GAAY,EAAQ;AACzDA,QAAAA,GAAAA,CAAI7B,EAAE,GAAGgC,IAAKhC,CAAAA,EAAE,GAAGe,CAAAA,CAAAA;AACnBc,QAAAA,GAAAA,CAAI5B,EAAE,GAAG+B,IAAK/B,CAAAA,EAAE,GAAGc,CAAAA,CAAAA;QACnBc,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AA7KWoZ,IAAAA,aAAAA,CAAAA,OAAAA,EAAAA;;YAyLAvZ,GAAAA,EAAAA,GAAAA;;;AADV,MACD,SAAuB,GAAA,GAAA;gBACrB,OAAO,IAAI,CAACI,EAAE,CAAA;AAChB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa6D,KAAa,EAAE;gBAC1B,IAAI,CAAC7D,EAAE,GAAG6D,KAAAA,CAAAA;AACV,gBAAA,IAAI,CAAC9D,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC9C,aAAA;;;YAKWF,GAAAA,EAAAA,GAAAA;;;AADV,MACD,SAAuB,GAAA,GAAA;gBACrB,OAAO,IAAI,CAACI,EAAE,CAAA;AAChB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa4D,KAAa,EAAE;gBAC1B,IAAI,CAAC5D,EAAE,GAAG4D,KAAAA,CAAAA;AACV,gBAAA,IAAI,CAAC9D,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC9C,aAAA;;;AA5MWoZ,IAAAA,OAAAA,OAAAA,CAAAA;AA4XZ,CAAA,GAAA;;AA3XC,qBADWA,OAAAA,CAEKrV,KAAQ,GAAA,IAAIqV,QAAQ,GAAK,EAAA,GAAA,CAAA,CAAA;;;AACzC,qBAHWA,OAAAA,CAIKpV,IAAO,GAAA,IAAIoV,QAAQ,GAAK,EAAA,GAAA,CAAA,CAAA;;;ACL1C;;AAEC,IACM,IAAA,OAAMC,iBA+fV,WA/fI;AAAMA,IAAAA,SAAAA,OAAAA,CAyTCxZ,CAAa,EAAEC,CAAa,EAAEC,CAAa,EAAEsD,CAAa,EAAA;AAA1DxD,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;AAAGC,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;AAAGC,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;AAAGsD,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;yBA1DvD,IAAA,CACdrD,kBAA8B,IAAI,CAAA;QA0DhC,IAAI,CAACC,EAAE,GAAGJ,CAAAA,CAAAA;QACV,IAAI,CAACK,EAAE,GAAGJ,CAAAA,CAAAA;QACV,IAAI,CAACK,EAAE,GAAGJ,CAAAA,CAAAA;QACV,IAAI,CAACqD,EAAE,GAAGC,CAAAA,CAAAA;;AA7TDgW,IAAAA,IAAAA,MAAAA,GAAAA,OAAAA,CAAAA,SAAAA,CAAAA;AAgUX;;;;;;;AAOC,MACDjZ,MAAAA,CAAAA,GAOC,GAPDA,SAAAA,GAAIP,CAAAA,CAAS,EAAEC,CAAS,EAAEC,CAAS,EAAEsD,CAAS,EAAW;QACvD,IAAI,CAACpD,EAAE,GAAGJ,CAAAA,CAAAA;QACV,IAAI,CAACK,EAAE,GAAGJ,CAAAA,CAAAA;QACV,IAAI,CAACK,EAAE,GAAGJ,CAAAA,CAAAA;QACV,IAAI,CAACqD,EAAE,GAAGC,CAAAA,CAAAA;AACV,QAAA,IAAI,CAACrD,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDK,OAAAA,GAOC,GAPDA,SAAAA,GAAAA,CAAIC,KAAc,EAAW;AAC3B,QAAA,IAAI,CAACL,EAAE,IAAIK,KAAAA,CAAML,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAII,KAAAA,CAAMJ,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAIG,KAAAA,CAAMH,EAAE,CAAA;AACnB,QAAA,IAAI,CAACiD,EAAE,IAAI9C,KAAAA,CAAM8C,EAAE,CAAA;AACnB,QAAA,IAAI,CAACpD,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDO,OAAAA,QAOC,GAPDA,SAAAA,QAAAA,CAASD,KAAc,EAAW;AAChC,QAAA,IAAI,CAACL,EAAE,IAAIK,KAAAA,CAAML,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAII,KAAAA,CAAMJ,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAIG,KAAAA,CAAMH,EAAE,CAAA;AACnB,QAAA,IAAI,CAACiD,EAAE,IAAI9C,KAAAA,CAAM8C,EAAE,CAAA;AACnB,QAAA,IAAI,CAACpD,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDQ,OAAAA,QAOC,GAPDA,SAAAA,QAAAA,CAASF,KAAc,EAAW;AAChC,QAAA,IAAI,CAACL,EAAE,IAAIK,KAAAA,CAAML,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAII,KAAAA,CAAMJ,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAIG,KAAAA,CAAMH,EAAE,CAAA;AACnB,QAAA,IAAI,CAACiD,EAAE,IAAI9C,KAAAA,CAAM8C,EAAE,CAAA;AACnB,QAAA,IAAI,CAACpD,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDS,OAAAA,MAOC,GAPDA,SAAAA,MAAAA,CAAOH,KAAc,EAAW;AAC9B,QAAA,IAAI,CAACL,EAAE,IAAIK,KAAAA,CAAML,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAII,KAAAA,CAAMJ,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAIG,KAAAA,CAAMH,EAAE,CAAA;AACnB,QAAA,IAAI,CAACiD,EAAE,IAAI9C,KAAAA,CAAM8C,EAAE,CAAA;AACnB,QAAA,IAAI,CAACpD,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACDU,MAAAA,CAAAA,MAGC,GAHDA,SAAAA,MAAiB,GAAA;AACf,QAAA,IAA2B,KAAA,GAAA,IAAI,EAAvBT,EAAAA,GAAmB,KAAnBA,CAAAA,EAAAA,EAAIC,EAAe,GAAA,KAAA,CAAfA,EAAIC,EAAAA,EAAAA,GAAW,KAAXA,CAAAA,EAAAA,EAAIiD,KAAO,KAAPA,CAAAA,EAAAA,CAAAA;QACpB,OAAOtE,IAAAA,CAAK6B,IAAI,CAACV,EAAAA,GAAKA,KAAKC,EAAKA,GAAAA,EAAAA,GAAKC,EAAKA,GAAAA,EAAAA,GAAKiD,EAAKA,GAAAA,EAAAA,CAAAA,CAAAA;AACtD,KAAA,CAAA;AAEA;;;AAGC,MACDxC,MAAAA,CAAAA,aAGC,GAHDA,SAAAA,aAAwB,GAAA;AACtB,QAAA,IAA2B,KAAA,GAAA,IAAI,EAAvBX,EAAAA,GAAmB,KAAnBA,CAAAA,EAAAA,EAAIC,EAAe,GAAA,KAAA,CAAfA,EAAIC,EAAAA,EAAAA,GAAW,KAAXA,CAAAA,EAAAA,EAAIiD,KAAO,KAAPA,CAAAA,EAAAA,CAAAA;AACpB,QAAA,OAAOnD,KAAKA,EAAKC,GAAAA,EAAAA,GAAKA,EAAKC,GAAAA,EAAAA,GAAKA,KAAKiD,EAAKA,GAAAA,EAAAA,CAAAA;AAC5C,KAAA,CAAA;AAEA;;;AAGC,MACDvC,MAAAA,CAAAA,MAOC,GAPDA,SAAAA,MAAkB,GAAA;AAChB,QAAA,IAAI,CAACZ,EAAE,GAAG,CAAC,IAAI,CAACA,EAAE,CAAA;AAClB,QAAA,IAAI,CAACC,EAAE,GAAG,CAAC,IAAI,CAACA,EAAE,CAAA;AAClB,QAAA,IAAI,CAACC,EAAE,GAAG,CAAC,IAAI,CAACA,EAAE,CAAA;AAClB,QAAA,IAAI,CAACiD,EAAE,GAAG,CAAC,IAAI,CAACA,EAAE,CAAA;AAClB,QAAA,IAAI,CAACpD,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACDc,MAAAA,CAAAA,SAGC,GAHDA,SAAAA,SAAqB,GAAA;AA5aVuY,QAAAA,OAAAA,CA6aDvY,SAAS,CAAC,IAAI,EAAE,IAAI,CAAA,CAAA;AAC5B,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDC,OAAAA,KAOC,GAPDA,SAAAA,KAAAA,CAAMC,CAAS,EAAW;QACxB,IAAI,CAACf,EAAE,IAAIe,CAAAA,CAAAA;QACX,IAAI,CAACd,EAAE,IAAIc,CAAAA,CAAAA;QACX,IAAI,CAACb,EAAE,IAAIa,CAAAA,CAAAA;QACX,IAAI,CAACoC,EAAE,IAAIpC,CAAAA,CAAAA;AACX,QAAA,IAAI,CAAChB,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACDuB,MAAAA,CAAAA,KAGC,GAHDA,SAAAA,KAAiB,GAAA;AACf,QAAA,IAAI2M,MAAM,IApcDmL,OAAAA,CAoca,IAAI,CAACpZ,EAAE,EAAE,IAAI,CAACC,EAAE,EAAE,IAAI,CAACC,EAAE,EAAE,IAAI,CAACiD,EAAE,CAAA,CAAA;QACxD,OAAO8K,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACD1M,OAAAA,QAOC,GAPDA,SAAAA,QAAAA,CAASC,MAAmB,EAAW;AACrC,QAAA,IAAI,CAACxB,EAAE,GAAGwB,MAAAA,CAAO5B,CAAC,CAAA;AAClB,QAAA,IAAI,CAACK,EAAE,GAAGuB,MAAAA,CAAO3B,CAAC,CAAA;AAClB,QAAA,IAAI,CAACK,EAAE,GAAGsB,MAAAA,CAAO1B,CAAC,CAAA;AAClB,QAAA,IAAI,CAACqD,EAAE,GAAG3B,MAAAA,CAAO4B,CAAC,CAAA;AAClB,QAAA,IAAI,CAACrD,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;;MAMA0B,MAAAA,CAAAA,aAOC,GAPDA,SAAAA,cAAcC,KAAwB,EAAEC,MAAkB,EAAW;AAA7BA,QAAAA,IAAAA,mBAAAA,MAAiB,GAAA,CAAA,CAAA;AACvD,QAAA,IAAI,CAAC3B,EAAE,GAAG0B,KAAK,CAACC,MAAO,CAAA,CAAA;AACvB,QAAA,IAAI,CAAC1B,EAAE,GAAGyB,KAAK,CAACC,SAAS,CAAE,CAAA,CAAA;AAC3B,QAAA,IAAI,CAACzB,EAAE,GAAGwB,KAAK,CAACC,SAAS,CAAE,CAAA,CAAA;AAC3B,QAAA,IAAI,CAACwB,EAAE,GAAGzB,KAAK,CAACC,SAAS,CAAE,CAAA,CAAA;AAC3B,QAAA,IAAI,CAAC5B,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;MAKA6B,MAAAA,CAAAA,WAKC,GALDA,SAAAA,YAAYC,GAA2C,EAAEC,SAAqB,EAAE;AAAvBA,QAAAA,IAAAA,sBAAAA,SAAoB,GAAA,CAAA,CAAA;AAC3ED,QAAAA,GAAG,CAACC,SAAAA,CAAU,GAAG,IAAI,CAAC9B,EAAE,CAAA;AACxB6B,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAG,IAAI,CAAC7B,EAAE,CAAA;AAC5B4B,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAG,IAAI,CAAC5B,EAAE,CAAA;AAC5B2B,QAAAA,GAAG,CAACC,SAAY,GAAA,CAAA,CAAE,GAAG,IAAI,CAACqB,EAAE,CAAA;AAC9B,KAAA,CAAA;AAEA;;;AAGC,MACDpB,MAAAA,CAAAA,MAOC,GAPDA,SAAAA,MAAsB,GAAA;QACpB,OAAO;YACLnC,CAAG,EAAA,IAAI,CAACI,EAAE;YACVH,CAAG,EAAA,IAAI,CAACI,EAAE;YACVH,CAAG,EAAA,IAAI,CAACI,EAAE;YACVkD,CAAG,EAAA,IAAI,CAACD,EAAE;AACZ,SAAA,CAAA;AACF,KAAA,CAAA;AAtfA;;;;;MANWiW,OAYJhZ,CAAAA,GAMN,GAND,SAAOA,GAAI4B,CAAAA,IAAa,EAAE3B,KAAc,EAAEwB,GAAY,EAAQ;AAC5DA,QAAAA,GAAAA,CAAI7B,EAAE,GAAGgC,IAAAA,CAAKhC,EAAE,GAAGK,MAAML,EAAE,CAAA;AAC3B6B,QAAAA,GAAAA,CAAI5B,EAAE,GAAG+B,IAAAA,CAAK/B,EAAE,GAAGI,MAAMJ,EAAE,CAAA;AAC3B4B,QAAAA,GAAAA,CAAI3B,EAAE,GAAG8B,IAAAA,CAAK9B,EAAE,GAAGG,MAAMH,EAAE,CAAA;AAC3B2B,QAAAA,GAAAA,CAAIsB,EAAE,GAAGnB,IAAAA,CAAKmB,EAAE,GAAG9C,MAAM8C,EAAE,CAAA;QAC3BtB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MApBWqZ,OA0BJ9Y,CAAAA,QAMN,GAND,SAAOA,QAAS0B,CAAAA,IAAa,EAAE3B,KAAc,EAAEwB,GAAY,EAAQ;AACjEA,QAAAA,GAAAA,CAAI7B,EAAE,GAAGgC,IAAAA,CAAKhC,EAAE,GAAGK,MAAML,EAAE,CAAA;AAC3B6B,QAAAA,GAAAA,CAAI5B,EAAE,GAAG+B,IAAAA,CAAK/B,EAAE,GAAGI,MAAMJ,EAAE,CAAA;AAC3B4B,QAAAA,GAAAA,CAAI3B,EAAE,GAAG8B,IAAAA,CAAK9B,EAAE,GAAGG,MAAMH,EAAE,CAAA;AAC3B2B,QAAAA,GAAAA,CAAIsB,EAAE,GAAGnB,IAAAA,CAAKmB,EAAE,GAAG9C,MAAM8C,EAAE,CAAA;QAC3BtB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MAlCWqZ,OAwCJ7Y,CAAAA,QAMN,GAND,SAAOA,QAASyB,CAAAA,IAAa,EAAE3B,KAAc,EAAEwB,GAAY,EAAQ;AACjEA,QAAAA,GAAAA,CAAI7B,EAAE,GAAGgC,IAAAA,CAAKhC,EAAE,GAAGK,MAAML,EAAE,CAAA;AAC3B6B,QAAAA,GAAAA,CAAI5B,EAAE,GAAG+B,IAAAA,CAAK/B,EAAE,GAAGI,MAAMJ,EAAE,CAAA;AAC3B4B,QAAAA,GAAAA,CAAI3B,EAAE,GAAG8B,IAAAA,CAAK9B,EAAE,GAAGG,MAAMH,EAAE,CAAA;AAC3B2B,QAAAA,GAAAA,CAAIsB,EAAE,GAAGnB,IAAAA,CAAKmB,EAAE,GAAG9C,MAAM8C,EAAE,CAAA;QAC3BtB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MAhDWqZ,OAsDJ5Y,CAAAA,MAMN,GAND,SAAOA,MAAOwB,CAAAA,IAAa,EAAE3B,KAAc,EAAEwB,GAAY,EAAQ;AAC/DA,QAAAA,GAAAA,CAAI7B,EAAE,GAAGgC,IAAAA,CAAKhC,EAAE,GAAGK,MAAML,EAAE,CAAA;AAC3B6B,QAAAA,GAAAA,CAAI5B,EAAE,GAAG+B,IAAAA,CAAK/B,EAAE,GAAGI,MAAMJ,EAAE,CAAA;AAC3B4B,QAAAA,GAAAA,CAAI3B,EAAE,GAAG8B,IAAAA,CAAK9B,EAAE,GAAGG,MAAMH,EAAE,CAAA;AAC3B2B,QAAAA,GAAAA,CAAIsB,EAAE,GAAGnB,IAAAA,CAAKmB,EAAE,GAAG9C,MAAM8C,EAAE,CAAA;QAC3BtB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MA9DWqZ,QAoEJnX,GAEN,GAFD,SAAOA,GAAID,CAAAA,IAAa,EAAE3B,KAAc,EAAU;QAChD,OAAO2B,IAAAA,CAAKhC,EAAE,GAAGK,KAAAA,CAAML,EAAE,GAAGgC,IAAAA,CAAK/B,EAAE,GAAGI,KAAMJ,CAAAA,EAAE,GAAG+B,IAAK9B,CAAAA,EAAE,GAAGG,KAAMH,CAAAA,EAAE,GAAG8B,IAAKmB,CAAAA,EAAE,GAAG9C,KAAAA,CAAM8C,EAAE,CAAA;AAC1F,KAAA,CAAA;AAEA;;;;;MAxEWiW,QA8EJ3W,QAMN,GAND,SAAOA,QAAS1D,CAAAA,CAAU,EAAEC,CAAU,EAAU;AAC9C,QAAA,IAAMY,CAAIZ,GAAAA,CAAAA,CAAEgB,EAAE,GAAGjB,EAAEiB,EAAE,CAAA;AACrB,QAAA,IAAMH,CAAIb,GAAAA,CAAAA,CAAEiB,EAAE,GAAGlB,EAAEkB,EAAE,CAAA;AACrB,QAAA,IAAMH,CAAId,GAAAA,CAAAA,CAAEkB,EAAE,GAAGnB,EAAEmB,EAAE,CAAA;AACrB,QAAA,IAAMkD,CAAIpE,GAAAA,CAAAA,CAAEmE,EAAE,GAAGpE,EAAEoE,EAAE,CAAA;QACrB,OAAOtE,IAAAA,CAAK6B,IAAI,CAACd,CAAAA,GAAIA,IAAIC,CAAIA,GAAAA,CAAAA,GAAIC,CAAIA,GAAAA,CAAAA,GAAIsD,CAAIA,GAAAA,CAAAA,CAAAA,CAAAA;AAC/C,KAAA,CAAA;AAEA;;;;;MAtFWgW,QA4FJ1W,eAMN,GAND,SAAOA,eAAgB3D,CAAAA,CAAU,EAAEC,CAAU,EAAU;AACrD,QAAA,IAAMY,CAAIZ,GAAAA,CAAAA,CAAEgB,EAAE,GAAGjB,EAAEiB,EAAE,CAAA;AACrB,QAAA,IAAMH,CAAIb,GAAAA,CAAAA,CAAEiB,EAAE,GAAGlB,EAAEkB,EAAE,CAAA;AACrB,QAAA,IAAMH,CAAId,GAAAA,CAAAA,CAAEkB,EAAE,GAAGnB,EAAEmB,EAAE,CAAA;AACrB,QAAA,IAAMkD,CAAIpE,GAAAA,CAAAA,CAAEmE,EAAE,GAAGpE,EAAEoE,EAAE,CAAA;AACrB,QAAA,OAAOvD,IAAIA,CAAIC,GAAAA,CAAAA,GAAIA,CAAIC,GAAAA,CAAAA,GAAIA,IAAIsD,CAAIA,GAAAA,CAAAA,CAAAA;AACrC,KAAA,CAAA;AAEA;;;;;MApGWgW,QA0GJta,MAON,GAPD,SAAOA,MAAOkD,CAAAA,IAAa,EAAE3B,KAAc,EAAW;AACpD,QAAA,OACE7B,QAASM,CAAAA,MAAM,CAACkD,IAAAA,CAAKhC,EAAE,EAAEK,KAAAA,CAAML,EAAE,CAAA,IACjCxB,SAASM,MAAM,CAACkD,IAAK/B,CAAAA,EAAE,EAAEI,KAAMJ,CAAAA,EAAE,CACjCzB,IAAAA,QAAAA,CAASM,MAAM,CAACkD,IAAK9B,CAAAA,EAAE,EAAEG,KAAMH,CAAAA,EAAE,CACjC1B,IAAAA,QAAAA,CAASM,MAAM,CAACkD,IAAAA,CAAKmB,EAAE,EAAE9C,MAAM8C,EAAE,CAAA,CAAA;AAErC,KAAA,CAAA;AAEA;;;;;;AAMC,MACD,OA1HWiW,CA0HJzW,IAON,GAPD,SAAOA,IAAAA,CAAKC,KAAc,EAAEC,GAAY,EAAEC,CAAS,EAAEjB,GAAY,EAAQ;QACvE,IAAQ7B,EAAAA,GAAmB4C,KAAnB5C,CAAAA,EAAAA,EAAIC,EAAe2C,GAAAA,KAAAA,CAAf3C,IAAIC,EAAW0C,GAAAA,KAAAA,CAAX1C,EAAIiD,EAAAA,EAAAA,GAAOP,KAAPO,CAAAA,EAAAA,CAAAA;QACpBtB,GAAI7B,CAAAA,EAAE,GAAGA,EAAK,GAAC6C,CAAAA,GAAI7C,CAAAA,EAAE,GAAGA,EAAC,IAAK8C,CAAAA,CAAAA;QAC9BjB,GAAI5B,CAAAA,EAAE,GAAGA,EAAK,GAAC4C,CAAAA,GAAI5C,CAAAA,EAAE,GAAGA,EAAC,IAAK6C,CAAAA,CAAAA;QAC9BjB,GAAI3B,CAAAA,EAAE,GAAGA,EAAK,GAAC2C,CAAAA,GAAI3C,CAAAA,EAAE,GAAGA,EAAC,IAAK4C,CAAAA,CAAAA;QAC9BjB,GAAIsB,CAAAA,EAAE,GAAGA,EAAK,GAACN,CAAAA,GAAIM,CAAAA,EAAE,GAAGA,EAAC,IAAKL,CAAAA,CAAAA;QAC9BjB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MAnIWqZ,OAyIJxa,CAAAA,GAMN,GAND,SAAOA,GAAIoD,CAAAA,IAAa,EAAE3B,KAAc,EAAEwB,GAAY,EAAQ;QAC5DA,GAAI7B,CAAAA,EAAE,GAAGnB,IAAKD,CAAAA,GAAG,CAACoD,IAAKhC,CAAAA,EAAE,EAAEK,KAAAA,CAAML,EAAE,CAAA,CAAA;QACnC6B,GAAI5B,CAAAA,EAAE,GAAGpB,IAAKD,CAAAA,GAAG,CAACoD,IAAK/B,CAAAA,EAAE,EAAEI,KAAAA,CAAMJ,EAAE,CAAA,CAAA;QACnC4B,GAAI3B,CAAAA,EAAE,GAAGrB,IAAKD,CAAAA,GAAG,CAACoD,IAAK9B,CAAAA,EAAE,EAAEG,KAAAA,CAAMH,EAAE,CAAA,CAAA;QACnC2B,GAAIsB,CAAAA,EAAE,GAAGtE,IAAKD,CAAAA,GAAG,CAACoD,IAAKmB,CAAAA,EAAE,EAAE9C,KAAAA,CAAM8C,EAAE,CAAA,CAAA;QACnCtB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MAjJWqZ,OAuJJza,CAAAA,GAMN,GAND,SAAOA,GAAIqD,CAAAA,IAAa,EAAE3B,KAAc,EAAEwB,GAAY,EAAQ;QAC5DA,GAAI7B,CAAAA,EAAE,GAAGnB,IAAKF,CAAAA,GAAG,CAACqD,IAAKhC,CAAAA,EAAE,EAAEK,KAAAA,CAAML,EAAE,CAAA,CAAA;QACnC6B,GAAI5B,CAAAA,EAAE,GAAGpB,IAAKF,CAAAA,GAAG,CAACqD,IAAK/B,CAAAA,EAAE,EAAEI,KAAAA,CAAMJ,EAAE,CAAA,CAAA;QACnC4B,GAAI3B,CAAAA,EAAE,GAAGrB,IAAKF,CAAAA,GAAG,CAACqD,IAAK9B,CAAAA,EAAE,EAAEG,KAAAA,CAAMH,EAAE,CAAA,CAAA;QACnC2B,GAAIsB,CAAAA,EAAE,GAAGtE,IAAKF,CAAAA,GAAG,CAACqD,IAAKmB,CAAAA,EAAE,EAAE9C,KAAAA,CAAM8C,EAAE,CAAA,CAAA;QACnCtB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;MA/JWqZ,QAoKJxY,MAMN,GAND,SAAOA,MAAO7B,CAAAA,CAAU,EAAE8C,GAAY,EAAQ;AAC5CA,QAAAA,GAAAA,CAAI7B,EAAE,GAAG,CAACjB,CAAAA,CAAEiB,EAAE,CAAA;AACd6B,QAAAA,GAAAA,CAAI5B,EAAE,GAAG,CAAClB,CAAAA,CAAEkB,EAAE,CAAA;AACd4B,QAAAA,GAAAA,CAAI3B,EAAE,GAAG,CAACnB,CAAAA,CAAEmB,EAAE,CAAA;AACd2B,QAAAA,GAAAA,CAAIsB,EAAE,GAAG,CAACpE,CAAAA,CAAEoE,EAAE,CAAA;QACdtB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;MA5KWqZ,QAiLJvY,SAWN,GAXD,SAAOA,SAAU9B,CAAAA,CAAU,EAAE8C,GAAY,EAAQ;QAC/C,IAAQ7B,EAAAA,GAAmBjB,CAAnBiB,CAAAA,EAAAA,EAAIC,EAAelB,GAAAA,CAAAA,CAAfkB,IAAIC,EAAWnB,GAAAA,CAAAA,CAAXmB,EAAIiD,EAAAA,EAAAA,GAAOpE,CAAPoE,CAAAA,EAAAA,CAAAA;QACpB,IAAIJ,GAAAA,GAAMlE,IAAK6B,CAAAA,IAAI,CAACV,EAAAA,GAAKA,KAAKC,EAAKA,GAAAA,EAAAA,GAAKC,EAAKA,GAAAA,EAAAA,GAAKiD,EAAKA,GAAAA,EAAAA,CAAAA,CAAAA;QACvD,IAAIJ,GAAAA,GAAMvE,QAASU,CAAAA,aAAa,EAAE;AAChC6D,YAAAA,GAAAA,GAAM,CAAIA,GAAAA,GAAAA,CAAAA;YACVlB,GAAI7B,CAAAA,EAAE,GAAGA,EAAK+C,GAAAA,GAAAA,CAAAA;YACdlB,GAAI5B,CAAAA,EAAE,GAAGA,EAAK8C,GAAAA,GAAAA,CAAAA;YACdlB,GAAI3B,CAAAA,EAAE,GAAGA,EAAK6C,GAAAA,GAAAA,CAAAA;YACdlB,GAAIsB,CAAAA,EAAE,GAAGA,EAAKJ,GAAAA,GAAAA,CAAAA;YACdlB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;SAC3C;AACH,KAAA,CAAA;AAEA;;;;;MA9LWqZ,OAoMJtY,CAAAA,KAMN,GAND,SAAOA,KAAM/B,CAAAA,CAAU,EAAEgC,CAAS,EAAEc,GAAY,EAAQ;AACtDA,QAAAA,GAAAA,CAAI7B,EAAE,GAAGjB,CAAEiB,CAAAA,EAAE,GAAGe,CAAAA,CAAAA;AAChBc,QAAAA,GAAAA,CAAI5B,EAAE,GAAGlB,CAAEkB,CAAAA,EAAE,GAAGc,CAAAA,CAAAA;AAChBc,QAAAA,GAAAA,CAAI3B,EAAE,GAAGnB,CAAEmB,CAAAA,EAAE,GAAGa,CAAAA,CAAAA;AAChBc,QAAAA,GAAAA,CAAIsB,EAAE,GAAGpE,CAAEoE,CAAAA,EAAE,GAAGpC,CAAAA,CAAAA;QAChBc,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MA5MWqZ,OAkNJ/T,CAAAA,SAQN,GARD,SAAOA,SAAU3G,CAAAA,CAAU,EAAEuC,CAAS,EAAEY,GAAY,EAAQ;QAC1D,IAAQ7B,EAAAA,GAAmBtB,CAAnBsB,CAAAA,EAAAA,EAAIC,EAAevB,GAAAA,CAAAA,CAAfuB,IAAIC,EAAWxB,GAAAA,CAAAA,CAAXwB,EAAIiD,EAAAA,EAAAA,GAAOzE,CAAPyE,CAAAA,EAAAA,CAAAA;QACpB,IAAMH,CAAAA,GAAI/B,EAAEgC,QAAQ,CAAA;QACpBpB,GAAI7B,CAAAA,EAAE,GAAGA,EAAKgD,GAAAA,CAAC,CAAC,CAAE,CAAA,GAAG/C,KAAK+C,CAAC,CAAC,EAAE,GAAG9C,EAAAA,GAAK8C,CAAC,CAAC,CAAA,CAAE,GAAGG,EAAKH,GAAAA,CAAC,CAAC,EAAG,CAAA,CAAA;QACvDnB,GAAI5B,CAAAA,EAAE,GAAGD,EAAKgD,GAAAA,CAAC,CAAC,CAAE,CAAA,GAAG/C,KAAK+C,CAAC,CAAC,EAAE,GAAG9C,EAAAA,GAAK8C,CAAC,CAAC,CAAA,CAAE,GAAGG,EAAKH,GAAAA,CAAC,CAAC,EAAG,CAAA,CAAA;QACvDnB,GAAI3B,CAAAA,EAAE,GAAGF,EAAKgD,GAAAA,CAAC,CAAC,CAAE,CAAA,GAAG/C,KAAK+C,CAAC,CAAC,EAAE,GAAG9C,EAAAA,GAAK8C,CAAC,CAAC,EAAA,CAAG,GAAGG,EAAKH,GAAAA,CAAC,CAAC,EAAG,CAAA,CAAA;QACxDnB,GAAIsB,CAAAA,EAAE,GAAGnD,EAAKgD,GAAAA,CAAC,CAAC,CAAE,CAAA,GAAG/C,KAAK+C,CAAC,CAAC,EAAE,GAAG9C,EAAAA,GAAK8C,CAAC,CAAC,EAAA,CAAG,GAAGG,EAAKH,GAAAA,CAAC,CAAC,EAAG,CAAA,CAAA;QACxDnB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;MA5NWqZ,OAkOJhY,CAAAA,eAmBN,GAnBD,SAAOA,eAAgB1C,CAAAA,CAAU,EAAE2a,CAAa,EAAExX,GAAY,EAAQ;AACpE,QAAA,IAAQ7B,CAAIJ,GAA2BlB,CAA/BsB,CAAAA,EAAAA,EAAOC,CAAwBvB,GAAAA,CAAAA,CAAxBuB,EAAOC,EAAIJ,CAAapB,GAAAA,CAAAA,CAAjBwB,EAAOiD,EAAIC,IAAM1E,CAAVyE,CAAAA,EAAAA,CAAAA;QAC7B,IAAME,EAAAA,GAAKgW,EAAErZ,EAAE,CAAA;QACf,IAAMyD,EAAAA,GAAK4V,EAAEpZ,EAAE,CAAA;QACf,IAAMqD,EAAAA,GAAK+V,EAAEnZ,EAAE,CAAA;QACf,IAAMqD,EAAAA,GAAK8V,EAAElW,EAAE,CAAA;;AAGf,QAAA,IAAMK,EAAKD,GAAAA,EAAAA,GAAK3D,CAAI6D,GAAAA,EAAAA,GAAK3D,IAAIwD,EAAKzD,GAAAA,CAAAA,CAAAA;AAClC,QAAA,IAAM6D,EAAKH,GAAAA,EAAAA,GAAK1D,CAAIyD,GAAAA,EAAAA,GAAK1D,IAAIyD,EAAKvD,GAAAA,CAAAA,CAAAA;AAClC,QAAA,IAAM6D,EAAKJ,GAAAA,EAAAA,GAAKzD,CAAIuD,GAAAA,EAAAA,GAAKxD,IAAI4D,EAAK7D,GAAAA,CAAAA,CAAAA;AAClC,QAAA,IAAMgE,KAAK,CAACP,EAAAA,GAAKzD,CAAI6D,GAAAA,EAAAA,GAAK5D,IAAIyD,EAAKxD,GAAAA,CAAAA,CAAAA;;QAGnC+B,GAAI7B,CAAAA,EAAE,GAAGwD,EAAKD,GAAAA,EAAAA,GAAKK,KAAKP,EAAKK,GAAAA,EAAAA,GAAKJ,KAAKK,EAAKF,GAAAA,EAAAA,CAAAA;QAC5C5B,GAAI5B,CAAAA,EAAE,GAAGyD,EAAKH,GAAAA,EAAAA,GAAKK,KAAKH,EAAKE,GAAAA,EAAAA,GAAKN,KAAKG,EAAKF,GAAAA,EAAAA,CAAAA;QAC5CzB,GAAI3B,CAAAA,EAAE,GAAGyD,EAAKJ,GAAAA,EAAAA,GAAKK,KAAKN,EAAKE,GAAAA,EAAAA,GAAKC,KAAKC,EAAKL,GAAAA,EAAAA,CAAAA;AAC5CxB,QAAAA,GAAAA,CAAIsB,EAAE,GAAGC,CAAAA,CAAAA;QACTvB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AArPWqZ,IAAAA,aAAAA,CAAAA,OAAAA,EAAAA;;YAqQAxZ,GAAAA,EAAAA,GAAAA;;;AADV,MACD,SAAuB,GAAA,GAAA;gBACrB,OAAO,IAAI,CAACI,EAAE,CAAA;AAChB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa6D,KAAa,EAAE;gBAC1B,IAAI,CAAC7D,EAAE,GAAG6D,KAAAA,CAAAA;AACV,gBAAA,IAAI,CAAC9D,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC9C,aAAA;;;YAKWF,GAAAA,EAAAA,GAAAA;;;AADV,MACD,SAAuB,GAAA,GAAA;gBACrB,OAAO,IAAI,CAACI,EAAE,CAAA;AAChB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa4D,KAAa,EAAE;gBAC1B,IAAI,CAAC5D,EAAE,GAAG4D,KAAAA,CAAAA;AACV,gBAAA,IAAI,CAAC9D,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC9C,aAAA;;;YAKWD,GAAAA,EAAAA,GAAAA;;;AADV,MACD,SAAuB,GAAA,GAAA;gBACrB,OAAO,IAAI,CAACI,EAAE,CAAA;AAChB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa2D,KAAa,EAAE;gBAC1B,IAAI,CAAC3D,EAAE,GAAG2D,KAAAA,CAAAA;AACV,gBAAA,IAAI,CAAC9D,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC9C,aAAA;;;YAKWqD,GAAAA,EAAAA,GAAAA;;;AADV,MACD,SAAuB,GAAA,GAAA;gBACrB,OAAO,IAAI,CAACD,EAAE,CAAA;AAChB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAaU,KAAa,EAAE;gBAC1B,IAAI,CAACV,EAAE,GAAGU,KAAAA,CAAAA;AACV,gBAAA,IAAI,CAAC9D,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC9C,aAAA;;;AAhTWqZ,IAAAA,OAAAA,OAAAA,CAAAA;AA6fZ,CAAA,GAAA;;AA5fC,qBADWA,OAEKtV,CAAAA,KAAAA,GAAQ,IAAIsV,OAAQ,CAAA,GAAA,EAAK,KAAK,GAAK,EAAA,GAAA,CAAA,CAAA;;;AACnD,qBAHWA,OAIKrV,CAAAA,IAAAA,GAAO,IAAIqV,OAAQ,CAAA,GAAA,EAAK,KAAK,GAAK,EAAA,GAAA,CAAA,CAAA;;;ACTpD;;AAEC,IACM,IAAA,KAAME,iBAyTV,WAzTI;AAAMA,IAAAA,SAAAA,KAAAA,CAkLCja,CAAa,EAAEka,CAAa,EAAEva,CAAa,EAAED,CAAa,EAAA;AAA1DM,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;AAAGka,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;AAAGva,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;AAAGD,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;yBA1DvD,IAAA,CACdgB,kBAA8B,IAAI,CAAA;QA0DhC,IAAI,CAACyZ,EAAE,GAAGna,CAAAA,CAAAA;QACV,IAAI,CAACoa,EAAE,GAAGF,CAAAA,CAAAA;QACV,IAAI,CAACG,EAAE,GAAG1a,CAAAA,CAAAA;QACV,IAAI,CAAC2a,EAAE,GAAG5a,CAAAA,CAAAA;;AAtLDua,IAAAA,IAAAA,MAAAA,GAAAA,KAAAA,CAAAA,SAAAA,CAAAA;AAyLX;;;;;;;AAOC,MACDnZ,MAAAA,CAAAA,GAOC,GAPDA,SAAAA,GAAId,CAAAA,CAAS,EAAEka,CAAS,EAAEva,CAAS,EAAED,CAAS,EAAS;QACrD,IAAI,CAACya,EAAE,GAAGna,CAAAA,CAAAA;QACV,IAAI,CAACoa,EAAE,GAAGF,CAAAA,CAAAA;QACV,IAAI,CAACG,EAAE,GAAG1a,CAAAA,CAAAA;QACV,IAAI,CAAC2a,EAAE,GAAG5a,CAAAA,CAAAA;AACV,QAAA,IAAI,CAACgB,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDK,OAAAA,GAOC,GAPDA,SAAAA,GAAAA,CAAIwZ,KAAY,EAAS;AACvB,QAAA,IAAI,CAACJ,EAAE,IAAII,KAAAA,CAAMJ,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAIG,KAAAA,CAAMH,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAIE,KAAAA,CAAMF,EAAE,CAAA;AACnB,QAAA,IAAI,CAACC,EAAE,IAAIC,KAAAA,CAAMD,EAAE,CAAA;AACnB,QAAA,IAAI,CAAC5Z,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACDe,OAAAA,KAOC,GAPDA,SAAAA,KAAAA,CAAMC,CAAS,EAAS;QACtB,IAAI,CAACyY,EAAE,IAAIzY,CAAAA,CAAAA;QACX,IAAI,CAAC0Y,EAAE,IAAI1Y,CAAAA,CAAAA;QACX,IAAI,CAAC2Y,EAAE,IAAI3Y,CAAAA,CAAAA;QACX,IAAI,CAAC4Y,EAAE,IAAI5Y,CAAAA,CAAAA;AACX,QAAA,IAAI,CAAChB,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACDuB,MAAAA,CAAAA,KAGC,GAHDA,SAAAA,KAAe,GAAA;AACb,QAAA,IAAM2M,MAAM,IA3OHqL,KAAAA,CA2Oa,IAAI,CAACE,EAAE,EAAE,IAAI,CAACC,EAAE,EAAE,IAAI,CAACC,EAAE,EAAE,IAAI,CAACC,EAAE,CAAA,CAAA;QACxD,OAAO1L,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACD1M,OAAAA,QAOC,GAPDA,SAAAA,QAAAA,CAASC,MAAiB,EAAS;AACjC,QAAA,IAAI,CAACgY,EAAE,GAAGhY,MAAAA,CAAOnC,CAAC,CAAA;AAClB,QAAA,IAAI,CAACoa,EAAE,GAAGjY,MAAAA,CAAO+X,CAAC,CAAA;AAClB,QAAA,IAAI,CAACG,EAAE,GAAGlY,MAAAA,CAAOxC,CAAC,CAAA;AAClB,QAAA,IAAI,CAAC2a,EAAE,GAAGnY,MAAAA,CAAOzC,CAAC,CAAA;AAClB,QAAA,IAAI,CAACgB,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC5C,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;AAIC,MACD8Z,OAAAA,QAMC,GANDA,SAAAA,QAAAA,CAAShY,GAAU,EAAS;QAC1BA,GAAI2X,CAAAA,EAAE,GAAGF,KAnQAA,CAmQMQ,kBAAkB,CAAC,IAAI,CAACN,EAAE,CAAA,CAAA;QACzC3X,GAAI4X,CAAAA,EAAE,GAAGH,KApQAA,CAoQMQ,kBAAkB,CAAC,IAAI,CAACL,EAAE,CAAA,CAAA;QACzC5X,GAAI6X,CAAAA,EAAE,GAAGJ,KArQAA,CAqQMQ,kBAAkB,CAAC,IAAI,CAACJ,EAAE,CAAA,CAAA;AACzC,QAAA,IAAI,CAAC3Z,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;QAC5C,OAAO8B,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACDkY,OAAAA,OAMC,GANDA,SAAAA,OAAAA,CAAQlY,GAAU,EAAS;QACzBA,GAAI2X,CAAAA,EAAE,GAAGF,KAhRAA,CAgRMU,kBAAkB,CAAC,IAAI,CAACR,EAAE,CAAA,CAAA;QACzC3X,GAAI4X,CAAAA,EAAE,GAAGH,KAjRAA,CAiRMU,kBAAkB,CAAC,IAAI,CAACP,EAAE,CAAA,CAAA;QACzC5X,GAAI6X,CAAAA,EAAE,GAAGJ,KAlRAA,CAkRMU,kBAAkB,CAAC,IAAI,CAACN,EAAE,CAAA,CAAA;AACzC,QAAA,IAAI,CAAC3Z,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;QAC5C,OAAO8B,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;AAGC,MACDoY,MAAAA,CAAAA,aAcC,GAdDA,SAAAA,aAAwB,GAAA;QACtB,IAAM5a,CAAAA,GAAI,IAAI,CAACA,CAAC,CAAA;QAChB,IAAMka,CAAAA,GAAI,IAAI,CAACA,CAAC,CAAA;QAChB,IAAMva,CAAAA,GAAI,IAAI,CAACA,CAAC,CAAA;AAEhB,QAAA,IAAIJ,GAAMS,GAAAA,CAAAA,CAAAA;AACV,QAAA,IAAIV,GAAMU,GAAAA,CAAAA,CAAAA;QACV,IAAIka,CAAAA,GAAI3a,KAAKA,GAAM2a,GAAAA,CAAAA,CAAAA;QACnB,IAAIva,CAAAA,GAAIJ,KAAKA,GAAMI,GAAAA,CAAAA,CAAAA;QAEnB,IAAIua,CAAAA,GAAI5a,KAAKA,GAAM4a,GAAAA,CAAAA,CAAAA;QACnB,IAAIva,CAAAA,GAAIL,KAAKA,GAAMK,GAAAA,CAAAA,CAAAA;AAEnB,QAAA,OAAO,CAACJ,GAAMD,GAAAA,GAAE,IAAK,CAAA,CAAA;AACvB,KAAA,CAAA;AAEA;;;AAGC,MACDoD,MAAAA,CAAAA,MAOC,GAPDA,SAAAA,MAAoB,GAAA;QAClB,OAAO;YACL1C,CAAG,EAAA,IAAI,CAACma,EAAE;YACVD,CAAG,EAAA,IAAI,CAACE,EAAE;YACVza,CAAG,EAAA,IAAI,CAAC0a,EAAE;YACV3a,CAAG,EAAA,IAAI,CAAC4a,EAAE;AACZ,SAAA,CAAA;AACF,KAAA,CAAA;AArTA;;;;AAIC,MACD,KAAOG,CAAAA,kBAQN,GARD,SAAOA,kBAAAA,CAAmBjW,KAAa,EAAU;;;QAI/C,IAAIA,KAAAA,IAAS,KAAK,OAAO,GAAA,CAAA;aACpB,IAAIA,KAAAA,IAAS,OAAS,EAAA,OAAOA,KAAQ,GAAA,KAAA,CAAA;aACrC,IAAIA,KAAAA,GAAQ,GAAK,EAAA,OAAOhF,IAAKqb,CAAAA,GAAG,CAAErW,CAAAA,KAAAA,GAAQ,KAAI,IAAK,KAAO,EAAA,GAAA,CAAA,CAAA;aAC1D,OAAOhF,IAAAA,CAAKqb,GAAG,CAACrW,KAAO,EAAA,GAAA,CAAA,CAAA;AAC9B,KAAA,CAAA;AAEA;;;;AAIC,MACD,KAAOmW,CAAAA,kBAQN,GARD,SAAOA,kBAAAA,CAAmBnW,KAAa,EAAU;;;QAI/C,IAAIA,KAAAA,IAAS,KAAK,OAAO,GAAA,CAAA;aACpB,IAAIA,KAAAA,GAAQ,SAAW,EAAA,OAAO,KAAQA,GAAAA,KAAAA,CAAAA;aACtC,IAAIA,KAAAA,GAAQ,KAAK,OAAO,KAAA,GAAQhF,KAAKqb,GAAG,CAACrW,OAAO,OAAW,CAAA,GAAA,KAAA,CAAA;aAC3D,OAAOhF,IAAAA,CAAKqb,GAAG,CAACrW,KAAO,EAAA,OAAA,CAAA,CAAA;AAC9B,KAAA,CAAA;AAEA;;;;;MA/BWyV,MAqCJxa,MAON,GAPD,SAAOA,MAAOkD,CAAAA,IAAW,EAAE3B,KAAY,EAAW;AAChD,QAAA,OACE7B,QAASM,CAAAA,MAAM,CAACkD,IAAAA,CAAKwX,EAAE,EAAEnZ,KAAAA,CAAMmZ,EAAE,CAAA,IACjChb,SAASM,MAAM,CAACkD,IAAKyX,CAAAA,EAAE,EAAEpZ,KAAMoZ,CAAAA,EAAE,CACjCjb,IAAAA,QAAAA,CAASM,MAAM,CAACkD,IAAK0X,CAAAA,EAAE,EAAErZ,KAAMqZ,CAAAA,EAAE,CACjClb,IAAAA,QAAAA,CAASM,MAAM,CAACkD,IAAAA,CAAK2X,EAAE,EAAEtZ,MAAMsZ,EAAE,CAAA,CAAA;AAErC,KAAA,CAAA;AAEA;;;;;;MA9CWL,KAqDJlZ,CAAAA,GAQN,GARD,SAAOA,GAAI4B,CAAAA,IAAW,EAAE3B,KAAY,EAAEwB,GAAU,EAAS;AACvDA,QAAAA,GAAAA,CAAI2X,EAAE,GAAGxX,IAAAA,CAAKwX,EAAE,GAAGnZ,MAAMmZ,EAAE,CAAA;AAC3B3X,QAAAA,GAAAA,CAAI4X,EAAE,GAAGzX,IAAAA,CAAKyX,EAAE,GAAGpZ,MAAMoZ,EAAE,CAAA;AAC3B5X,QAAAA,GAAAA,CAAI6X,EAAE,GAAG1X,IAAAA,CAAK0X,EAAE,GAAGrZ,MAAMqZ,EAAE,CAAA;AAC3B7X,QAAAA,GAAAA,CAAI8X,EAAE,GAAG3X,IAAAA,CAAK2X,EAAE,GAAGtZ,MAAMsZ,EAAE,CAAA;QAC3B9X,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;QAE1C,OAAO8B,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;MA/DWyX,KAqEJhZ,CAAAA,QAMN,GAND,SAAOA,QAAS0B,CAAAA,IAAW,EAAE3B,KAAY,EAAEwB,GAAU,EAAQ;AAC3DA,QAAAA,GAAAA,CAAI2X,EAAE,GAAGxX,IAAAA,CAAKwX,EAAE,GAAGnZ,MAAMmZ,EAAE,CAAA;AAC3B3X,QAAAA,GAAAA,CAAI4X,EAAE,GAAGzX,IAAAA,CAAKyX,EAAE,GAAGpZ,MAAMoZ,EAAE,CAAA;AAC3B5X,QAAAA,GAAAA,CAAI6X,EAAE,GAAG1X,IAAAA,CAAK0X,EAAE,GAAGrZ,MAAMqZ,EAAE,CAAA;AAC3B7X,QAAAA,GAAAA,CAAI8X,EAAE,GAAG3X,IAAAA,CAAK2X,EAAE,GAAGtZ,MAAMsZ,EAAE,CAAA;QAC3B9X,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;AAC5C,KAAA,CAAA;AAEA;;;;;;MA7EWuZ,KAoFJxY,CAAAA,KAQN,GARD,SAAOA,KAAMkB,CAAAA,IAAW,EAAEjB,CAAS,EAAEc,GAAU,EAAS;AACtDA,QAAAA,GAAAA,CAAI2X,EAAE,GAAGxX,IAAKwX,CAAAA,EAAE,GAAGzY,CAAAA,CAAAA;AACnBc,QAAAA,GAAAA,CAAI4X,EAAE,GAAGzX,IAAKyX,CAAAA,EAAE,GAAG1Y,CAAAA,CAAAA;AACnBc,QAAAA,GAAAA,CAAI6X,EAAE,GAAG1X,IAAK0X,CAAAA,EAAE,GAAG3Y,CAAAA,CAAAA;AACnBc,QAAAA,GAAAA,CAAI8X,EAAE,GAAG3X,IAAK2X,CAAAA,EAAE,GAAG5Y,CAAAA,CAAAA;QACnBc,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;QAE1C,OAAO8B,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;;;AAMC,MACD,KArGWyX,CAqGJ3W,IASN,GATD,SAAOA,IAAAA,CAAKC,KAAY,EAAEC,GAAU,EAAEC,CAAS,EAAEjB,GAAU,EAAS;QAClE,IAAQ2X,EAAAA,GAAmB5W,KAAnB4W,CAAAA,EAAAA,EAAIC,EAAe7W,GAAAA,KAAAA,CAAf6W,IAAIC,EAAW9W,GAAAA,KAAAA,CAAX8W,EAAIC,EAAAA,EAAAA,GAAO/W,KAAP+W,CAAAA,EAAAA,CAAAA;QACpB9X,GAAI2X,CAAAA,EAAE,GAAGA,EAAK,GAAC3W,CAAAA,GAAI2W,CAAAA,EAAE,GAAGA,EAAC,IAAK1W,CAAAA,CAAAA;QAC9BjB,GAAI4X,CAAAA,EAAE,GAAGA,EAAK,GAAC5W,CAAAA,GAAI4W,CAAAA,EAAE,GAAGA,EAAC,IAAK3W,CAAAA,CAAAA;QAC9BjB,GAAI6X,CAAAA,EAAE,GAAGA,EAAK,GAAC7W,CAAAA,GAAI6W,CAAAA,EAAE,GAAGA,EAAC,IAAK5W,CAAAA,CAAAA;QAC9BjB,GAAI8X,CAAAA,EAAE,GAAGA,EAAK,GAAC9W,CAAAA,GAAI8W,CAAAA,EAAE,GAAGA,EAAC,IAAK7W,CAAAA,CAAAA;QAC9BjB,GAAI9B,CAAAA,eAAe,IAAI8B,GAAAA,CAAI9B,eAAe,EAAA,CAAA;QAE1C,OAAO8B,GAAAA,CAAAA;AACT,KAAA,CAAA;AA9GWyX,IAAAA,aAAAA,CAAAA,KAAAA,EAAAA;;YA8HAja,GAAAA,EAAAA,GAAAA;;;AADV,MACD,SAAuB,GAAA,GAAA;gBACrB,OAAO,IAAI,CAACma,EAAE,CAAA;AAChB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa3V,KAAa,EAAE;gBAC1B,IAAI,CAAC2V,EAAE,GAAG3V,KAAAA,CAAAA;AACV,gBAAA,IAAI,CAAC9D,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC9C,aAAA;;;YAKWwZ,GAAAA,EAAAA,GAAAA;;;AADV,MACD,SAAuB,GAAA,GAAA;gBACrB,OAAO,IAAI,CAACE,EAAE,CAAA;AAChB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa5V,KAAa,EAAE;gBAC1B,IAAI,CAAC4V,EAAE,GAAG5V,KAAAA,CAAAA;AACV,gBAAA,IAAI,CAAC9D,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC9C,aAAA;;;YAKWf,GAAAA,EAAAA,GAAAA;;;AADV,MACD,SAAuB,GAAA,GAAA;gBACrB,OAAO,IAAI,CAAC0a,EAAE,CAAA;AAChB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa7V,KAAa,EAAE;gBAC1B,IAAI,CAAC6V,EAAE,GAAG7V,KAAAA,CAAAA;AACV,gBAAA,IAAI,CAAC9D,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC9C,aAAA;;;YAKWhB,GAAAA,EAAAA,GAAAA;;;AADV,MACD,SAAuB,GAAA,GAAA;gBACrB,OAAO,IAAI,CAAC4a,EAAE,CAAA;AAChB,aAAA;AAEA,YAAA,GAAA,EAAA,SAAA,GAAA,CAAa9V,KAAa,EAAE;gBAC1B,IAAI,CAAC8V,EAAE,GAAG9V,KAAAA,CAAAA;AACV,gBAAA,IAAI,CAAC9D,eAAe,IAAI,IAAI,CAACA,eAAe,EAAA,CAAA;AAC9C,aAAA;;;AAzKWuZ,IAAAA,OAAAA,KAAAA,CAAAA;AAuTZ,CAAA;;AC3TD;AACO,IAAA,IAAA,iBAAA,WAAA;AAAMa,IAAAA,SAAAA,IAAAA,CAiBCva,CAAa,EAAEC,CAAa,EAAEua,KAAiB,EAAEC,MAAkB,EAAA;AAAnEza,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;AAAGC,QAAAA,IAAAA,cAAAA,CAAY,GAAA,CAAA,CAAA;AAAGua,QAAAA,IAAAA,kBAAAA,KAAgB,GAAA,CAAA,CAAA;AAAGC,QAAAA,IAAAA,mBAAAA,MAAiB,GAAA,CAAA,CAAA;QAC5E,IAAI,CAACza,CAAC,GAAGA,CAAAA,CAAAA;QACT,IAAI,CAACC,CAAC,GAAGA,CAAAA,CAAAA;QACT,IAAI,CAACua,KAAK,GAAGA,KAAAA,CAAAA;QACb,IAAI,CAACC,MAAM,GAAGA,MAAAA,CAAAA;;AArBLF,IAAAA,IAAAA,MAAAA,GAAAA,IAAAA,CAAAA,SAAAA,CAAAA;AAwBX;;;;;;;AAOC,MACDha,MAAAA,CAAAA,GAMC,GANDA,SAAAA,GAAIP,CAAAA,CAAS,EAAEC,CAAS,EAAEua,KAAa,EAAEC,MAAc,EAAQ;QAC7D,IAAI,CAACza,CAAC,GAAGA,CAAAA,CAAAA;QACT,IAAI,CAACC,CAAC,GAAGA,CAAAA,CAAAA;QACT,IAAI,CAACua,KAAK,GAAGA,KAAAA,CAAAA;QACb,IAAI,CAACC,MAAM,GAAGA,MAAAA,CAAAA;AACd,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;AAGC,MACD/Y,MAAAA,CAAAA,KAEC,GAFDA,SAAAA,KAAc,GAAA;AACZ,QAAA,OAAO,IA7CE6Y,IA6CO,CAAA,IAAI,CAACva,CAAC,EAAE,IAAI,CAACC,CAAC,EAAE,IAAI,CAACua,KAAK,EAAE,IAAI,CAACC,MAAM,CAAA,CAAA;AACzD,KAAA,CAAA;AAEA;;;;AAIC,MACD9Y,OAAAA,QAMC,GANDA,SAAAA,QAAAA,CAASC,MAAY,EAAQ;AAC3B,QAAA,IAAI,CAAC5B,CAAC,GAAG4B,MAAAA,CAAO5B,CAAC,CAAA;AACjB,QAAA,IAAI,CAACC,CAAC,GAAG2B,MAAAA,CAAO3B,CAAC,CAAA;AACjB,QAAA,IAAI,CAACua,KAAK,GAAG5Y,MAAAA,CAAO4Y,KAAK,CAAA;AACzB,QAAA,IAAI,CAACC,MAAM,GAAG7Y,MAAAA,CAAO6Y,MAAM,CAAA;AAC3B,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AA3DWF,IAAAA,OAAAA,IAAAA,CAAAA;AA4DZ,CAAA;;AC3DD;;;;;;IAOO,IAAMG,mBAAN,iBAAA,WAAA;AAAMA,IAAAA,SAAAA,mBAAAA,GAAAA;wDAGkC,IAAA,CAC7CC,YAA6B,GAAA,IAAI1N,YAAa,CAAA,EAAA,CAAA,CAAA;;AAJnCyN,IAAAA,IAAAA,MAAAA,GAAAA,mBAAAA,CAAAA,SAAAA,CAAAA;AAMX;;;;;MAMAE,MAAAA,CAAAA,QA8CC,GA9CDA,SAAAA,QAAAA,CAASjT,SAAkB,EAAEqS,KAAY,EAAEa,eAAuB,EAAQ;AACxE;;;;;;;;;;;;;;;QAiBAb,KAAAA,CAAM9Y,KAAK,CAAC2Z,eAAAA,CAAAA,CAAAA;QAEZ,IAAMC,GAAAA,GAAM,IAAI,CAACH,YAAY,CAAA;QAE7B,IAAY3a,CAAoB2H,GAAAA,SAAAA,CAAxBvH,EAAOC,EAAIJ,IAAa0H,SAAjBtH,CAAAA,EAAAA,EAAOC,CAAIJ,GAAMyH,SAAVrH,CAAAA,EAAAA,CAAAA;AACtB,QAAA,IAAQb,IAAYua,KAAZva,CAAAA,CAAAA,EAAGka,IAASK,KAATL,CAAAA,CAAAA,EAAGva,IAAM4a,KAAN5a,CAAAA,CAAAA,CAAAA;QAEd,IAAM2b,GAAAA,GAAM;AACZ,QAAA,IAAMC,GAAM,GAAA,CAAC,QAAW/a,GAAAA,CAAAA,CAAAA;QACxB,IAAMgb,GAAAA,GAAM,QAAW/a,GAAAA,CAAAA,CAAAA;AACvB,QAAA,IAAMgb,GAAM,GAAA,CAAC,QAAWlb,GAAAA,CAAAA,CAAAA;AACxB,QAAA,IAAMmb,MAAM,QAAYnb,IAAAA,CAAIC,GAAAA,CAAAA;AAC5B,QAAA,IAAMmb,MAAM,CAAC,QAAA,IAAYnb,CAAIC,GAAAA,CAAAA;QAC7B,IAAMmb,GAAAA,GAAM,YAAY,CAAA,GAAInb,IAAIA,CAAI,GAAA,CAAA;AACpC,QAAA,IAAMob,MAAM,CAAC,QAAA,IAAYtb,CAAIE,GAAAA,CAAAA;QAC7B,IAAMqb,GAAAA,GAAM,YAAYvb,CAAAA,GAAIA,IAAIC,CAAIA,GAAAA,CAAAA;AAEnC6a,QAAAA,GAAG,CAAC,CAAE,CAAA,IAAIrb,CAAIsb,GAAAA,GAAAA,EAAOD,GAAG,CAAC,CAAA,CAAE,IAAInB,CAAAA,GAAIoB,KAAOD,GAAG,CAAC,CAAE,CAAA,IAAI1b,IAAI2b,GAAI,CAAA;AAE5DD,QAAAA,GAAG,CAAC,CAAE,CAAA,IAAIrb,CAAIub,GAAAA,GAAAA,EAAOF,GAAG,CAAC,CAAA,CAAE,IAAInB,CAAAA,GAAIqB,KAAOF,GAAG,CAAC,CAAE,CAAA,IAAI1b,IAAI4b,GAAI,CAAA;AAC5DF,QAAAA,GAAG,CAAC,CAAE,CAAA,IAAIrb,CAAIwb,GAAAA,GAAAA,EAAOH,GAAG,CAAC,CAAA,CAAE,IAAInB,CAAAA,GAAIsB,KAAOH,GAAG,CAAC,CAAE,CAAA,IAAI1b,IAAI6b,GAAI,CAAA;AAC5DH,QAAAA,GAAG,CAAC,CAAE,CAAA,IAAIrb,CAAIyb,GAAAA,GAAAA,EAAOJ,GAAG,CAAC,EAAA,CAAG,IAAInB,CAAAA,GAAIuB,KAAOJ,GAAG,CAAC,EAAG,CAAA,IAAI1b,IAAI8b,GAAI,CAAA;AAE9DJ,QAAAA,GAAG,CAAC,EAAG,CAAA,IAAIrb,CAAI0b,GAAAA,GAAAA,EAAOL,GAAG,CAAC,EAAA,CAAG,IAAInB,CAAAA,GAAIwB,KAAOL,GAAG,CAAC,EAAG,CAAA,IAAI1b,IAAI+b,GAAI,CAAA;AAC/DL,QAAAA,GAAG,CAAC,EAAG,CAAA,IAAIrb,CAAI2b,GAAAA,GAAAA,EAAON,GAAG,CAAC,EAAA,CAAG,IAAInB,CAAAA,GAAIyB,KAAON,GAAG,CAAC,EAAG,CAAA,IAAI1b,IAAIgc,GAAI,CAAA;AAC/DN,QAAAA,GAAG,CAAC,EAAG,CAAA,IAAIrb,CAAI4b,GAAAA,GAAAA,EAAOP,GAAG,CAAC,EAAA,CAAG,IAAInB,CAAAA,GAAI0B,KAAOP,GAAG,CAAC,EAAG,CAAA,IAAI1b,IAAIic,GAAI,CAAA;AAC/DP,QAAAA,GAAG,CAAC,EAAG,CAAA,IAAIrb,CAAI6b,GAAAA,GAAAA,EAAOR,GAAG,CAAC,EAAA,CAAG,IAAInB,CAAAA,GAAI2B,KAAOR,GAAG,CAAC,EAAG,CAAA,IAAI1b,IAAIkc,GAAI,CAAA;AAC/DR,QAAAA,GAAG,CAAC,EAAG,CAAA,IAAIrb,CAAI8b,GAAAA,GAAAA,EAAOT,GAAG,CAAC,EAAA,CAAG,IAAInB,CAAAA,GAAI4B,KAAOT,GAAG,CAAC,EAAG,CAAA,IAAI1b,IAAImc,GAAI,CAAA;AAClE,KAAA,CAAA;AAEA;;;;MAKAC,MAAAA,CAAAA,QAuDC,GAvDDA,SAAAA,SAAS7T,SAAkB,EAAE1F,GAAU,EAAS;AAC9C;;;;;;;;;;;;;;;;;;;;;;AAsBC,QAED,IAAM6Y,GAAAA,GAAM,IAAI,CAACH,YAAY,CAAA;QAC7B,IAAY3a,CAAoB2H,GAAAA,SAAAA,CAAxBvH,EAAOC,EAAIJ,IAAa0H,SAAjBtH,CAAAA,EAAAA,EAAOC,CAAIJ,GAAMyH,SAAVrH,CAAAA,EAAAA,CAAAA;QAEtB,IAAMya,GAAAA,GAAM;AACZ,QAAA,IAAMC,GAAM,GAAA,CAAC,QAAW/a,GAAAA,CAAAA,CAAAA;QACxB,IAAMgb,GAAAA,GAAM,QAAW/a,GAAAA,CAAAA,CAAAA;AACvB,QAAA,IAAMgb,GAAM,GAAA,CAAC,QAAWlb,GAAAA,CAAAA,CAAAA;AACxB,QAAA,IAAMmb,GAAM,GAAA,QAAA,GAAWlb,CAAID,GAAAA,CAAAA,CAAAA;AAC3B,QAAA,IAAMob,GAAM,GAAA,CAAC,QAAWnb,GAAAA,CAAAA,GAAIC;QAC5B,IAAMmb,GAAAA,GAAM,YAAY,CAAA,GAAInb,IAAIA,CAAI,GAAA,CAAA;AACpC,QAAA,IAAMob,GAAM,GAAA,CAAC,QAAWpb,GAAAA,CAAAA,GAAIF;QAC5B,IAAMub,GAAAA,GAAM,YAAYvb,CAAAA,GAAIA,IAAIC,CAAIA,GAAAA,CAAAA;;AAGpC,QAAA,IAAIR,CAAIqb,GAAAA,GAAG,CAAC,CAAA,CAAE,GAAGC,GAAAA,CAAAA;AACjB,QAAA,IAAIpB,CAAImB,GAAAA,GAAG,CAAC,CAAA,CAAE,GAAGC,GAAAA,CAAAA;AACjB,QAAA,IAAI3b,CAAI0b,GAAAA,GAAG,CAAC,CAAA,CAAE,GAAGC,GAAAA,CAAAA;;AAGjBtb,QAAAA,CAAAA,IAAKqb,GAAG,CAAC,CAAE,CAAA,GAAGE,GAAMF,GAAAA,GAAG,CAAC,CAAA,CAAE,GAAGG,GAAAA,GAAMH,GAAG,CAAC,EAAE,GAAGI,GAAAA,CAAAA;AAC5CvB,QAAAA,CAAAA,IAAKmB,GAAG,CAAC,CAAE,CAAA,GAAGE,GAAMF,GAAAA,GAAG,CAAC,CAAA,CAAE,GAAGG,GAAAA,GAAMH,GAAG,CAAC,GAAG,GAAGI,GAAAA,CAAAA;AAC7C9b,QAAAA,CAAAA,IAAK0b,GAAG,CAAC,CAAE,CAAA,GAAGE,GAAMF,GAAAA,GAAG,CAAC,CAAA,CAAE,GAAGG,GAAAA,GAAMH,GAAG,CAAC,GAAG,GAAGI,GAAAA,CAAAA;;QAG7Czb,CAAKqb,IAAAA,GAAG,CAAC,EAAG,CAAA,GAAGK,MAAML,GAAG,CAAC,EAAG,CAAA,GAAGM,GAAMN,GAAAA,GAAG,CAAC,EAAG,CAAA,GAAGO,GAAMP,GAAAA,GAAG,CAAC,EAAA,CAAG,GAAGQ,GAAMR,GAAAA,GAAG,CAAC,EAAA,CAAG,GAAGS,GAAAA,CAAAA;QAC/E5B,CAAKmB,IAAAA,GAAG,CAAC,EAAG,CAAA,GAAGK,MAAML,GAAG,CAAC,EAAG,CAAA,GAAGM,GAAMN,GAAAA,GAAG,CAAC,EAAG,CAAA,GAAGO,GAAMP,GAAAA,GAAG,CAAC,EAAA,CAAG,GAAGQ,GAAMR,GAAAA,GAAG,CAAC,EAAA,CAAG,GAAGS,GAAAA,CAAAA;QAC/Enc,CAAK0b,IAAAA,GAAG,CAAC,EAAG,CAAA,GAAGK,MAAML,GAAG,CAAC,EAAG,CAAA,GAAGM,GAAMN,GAAAA,GAAG,CAAC,EAAG,CAAA,GAAGO,GAAMP,GAAAA,GAAG,CAAC,EAAA,CAAG,GAAGQ,GAAMR,GAAAA,GAAG,CAAC,EAAA,CAAG,GAAGS,GAAAA,CAAAA;AAE/EtZ,QAAAA,GAAAA,CAAI1B,GAAG,CAACd,CAAGka,EAAAA,CAAAA,EAAGva,CAAG,EAAA,GAAA,CAAA,CAAA;QACjB,OAAO6C,GAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;AAGC,MACDf,OAAAA,KAYC,GAZDA,SAAAA,KAAAA,CAAMC,CAAS,EAAQ;QACrB,IAAMsa,GAAAA,GAAM,IAAI,CAACd,YAAY,CAAA;AAE5Bc,QAAAA,GAAG,CAAC,CAAA,CAAE,IAAIta,CAAAA,EAAKsa,GAAG,CAAC,CAAE,CAAA,IAAIta,CAAKsa,EAAAA,GAAG,CAAC,CAAA,CAAE,IAAIta,CAAE,CAAA;AAC1Csa,QAAAA,GAAG,CAAC,CAAA,CAAE,IAAIta,CAAAA,EAAKsa,GAAG,CAAC,CAAE,CAAA,IAAIta,CAAKsa,EAAAA,GAAG,CAAC,CAAA,CAAE,IAAIta,CAAE,CAAA;AAC1Csa,QAAAA,GAAG,CAAC,CAAA,CAAE,IAAIta,CAAAA,EAAKsa,GAAG,CAAC,CAAE,CAAA,IAAIta,CAAKsa,EAAAA,GAAG,CAAC,CAAA,CAAE,IAAIta,CAAE,CAAA;AAC1Csa,QAAAA,GAAG,CAAC,CAAA,CAAE,IAAIta,CAAAA,EAAKsa,GAAG,CAAC,EAAG,CAAA,IAAIta,CAAKsa,EAAAA,GAAG,CAAC,EAAA,CAAG,IAAIta,CAAE,CAAA;AAC5Csa,QAAAA,GAAG,CAAC,EAAA,CAAG,IAAIta,CAAAA,EAAKsa,GAAG,CAAC,EAAG,CAAA,IAAIta,CAAKsa,EAAAA,GAAG,CAAC,EAAA,CAAG,IAAIta,CAAE,CAAA;AAC7Csa,QAAAA,GAAG,CAAC,EAAA,CAAG,IAAIta,CAAAA,EAAKsa,GAAG,CAAC,EAAG,CAAA,IAAIta,CAAKsa,EAAAA,GAAG,CAAC,EAAA,CAAG,IAAIta,CAAE,CAAA;AAC7Csa,QAAAA,GAAG,CAAC,EAAA,CAAG,IAAIta,CAAAA,EAAKsa,GAAG,CAAC,EAAG,CAAA,IAAIta,CAAKsa,EAAAA,GAAG,CAAC,EAAA,CAAG,IAAIta,CAAE,CAAA;AAC7Csa,QAAAA,GAAG,CAAC,EAAA,CAAG,IAAIta,CAAAA,EAAKsa,GAAG,CAAC,EAAG,CAAA,IAAIta,CAAKsa,EAAAA,GAAG,CAAC,EAAA,CAAG,IAAIta,CAAE,CAAA;AAC7Csa,QAAAA,GAAG,CAAC,EAAA,CAAG,IAAIta,CAAAA,EAAKsa,GAAG,CAAC,EAAG,CAAA,IAAIta,CAAKsa,EAAAA,GAAG,CAAC,EAAA,CAAG,IAAIta,CAAE,CAAA;AAChD,KAAA,CAAA;AAEA;;;AAGC,MACDO,MAAAA,CAAAA,KAIC,GAJDA,SAAAA,KAA6B,GAAA;AAC3B,QAAA,IAAMga,KAAK,IAjJFhB,mBAAAA,EAAAA,CAAAA;QAkJTgB,EAAG/Z,CAAAA,QAAQ,CAAC,IAAI,CAAA,CAAA;QAChB,OAAO+Z,EAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;;AAIC,MACD/Z,OAAAA,QAGC,GAHDA,SAAAA,QAAAA,CAASC,MAA2B,EAAuB;AACzDA,QAAAA,MAAAA,CAAOI,WAAW,CAAC,IAAI,CAAC2Y,YAAY,CAAA,CAAA;AACpC,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEA;;;;MAKA9Y,MAAAA,CAAAA,aAYC,GAZDA,SAAAA,cAAcC,KAAwB,EAAEC,MAAkB,EAAQ;AAA1BA,QAAAA,IAAAA,mBAAAA,MAAiB,GAAA,CAAA,CAAA;QACvD,IAAMZ,CAAAA,GAAI,IAAI,CAACwZ,YAAY,CAAA;QAE1BxZ,CAAC,CAAC,CAAE,CAAA,GAAGW,KAAK,CAACC,OAAO,EAAIZ,CAAC,CAAC,CAAA,CAAE,GAAGW,KAAK,CAAC,CAAIC,GAAAA,MAAAA,CAAO,EAAIZ,CAAC,CAAC,CAAA,CAAE,GAAGW,KAAK,CAAC,CAAIC,GAAAA,MAAAA,CAAO,CAAC;QAC7EZ,CAAC,CAAC,CAAE,CAAA,GAAGW,KAAK,CAAC,IAAIC,MAAO,CAAA,EAAIZ,CAAC,CAAC,CAAE,CAAA,GAAGW,KAAK,CAAC,CAAA,GAAIC,MAAO,CAAA,EAAIZ,CAAC,CAAC,CAAE,CAAA,GAAGW,KAAK,CAAC,CAAIC,GAAAA,MAAAA,CAAO,CAAC;QACjFZ,CAAC,CAAC,CAAE,CAAA,GAAGW,KAAK,CAAC,IAAIC,MAAO,CAAA,EAAIZ,CAAC,CAAC,CAAE,CAAA,GAAGW,KAAK,CAAC,CAAA,GAAIC,MAAO,CAAA,EAAIZ,CAAC,CAAC,CAAE,CAAA,GAAGW,KAAK,CAAC,CAAIC,GAAAA,MAAAA,CAAO,CAAC;QACjFZ,CAAC,CAAC,CAAE,CAAA,GAAGW,KAAK,CAAC,IAAIC,MAAO,CAAA,EAAIZ,CAAC,CAAC,EAAG,CAAA,GAAGW,KAAK,CAAC,EAAA,GAAKC,MAAO,CAAA,EAAIZ,CAAC,CAAC,EAAG,CAAA,GAAGW,KAAK,CAAC,EAAKC,GAAAA,MAAAA,CAAO,CAAC;QACrFZ,CAAC,CAAC,EAAG,CAAA,GAAGW,KAAK,CAAC,KAAKC,MAAO,CAAA,EAAIZ,CAAC,CAAC,EAAG,CAAA,GAAGW,KAAK,CAAC,EAAA,GAAKC,MAAO,CAAA,EAAIZ,CAAC,CAAC,EAAG,CAAA,GAAGW,KAAK,CAAC,EAAKC,GAAAA,MAAAA,CAAO,CAAC;QACvFZ,CAAC,CAAC,EAAG,CAAA,GAAGW,KAAK,CAAC,KAAKC,MAAO,CAAA,EAAIZ,CAAC,CAAC,EAAG,CAAA,GAAGW,KAAK,CAAC,EAAA,GAAKC,MAAO,CAAA,EAAIZ,CAAC,CAAC,EAAG,CAAA,GAAGW,KAAK,CAAC,EAAKC,GAAAA,MAAAA,CAAO,CAAC;QACvFZ,CAAC,CAAC,EAAG,CAAA,GAAGW,KAAK,CAAC,KAAKC,MAAO,CAAA,EAAIZ,CAAC,CAAC,EAAG,CAAA,GAAGW,KAAK,CAAC,EAAA,GAAKC,MAAO,CAAA,EAAIZ,CAAC,CAAC,EAAG,CAAA,GAAGW,KAAK,CAAC,EAAKC,GAAAA,MAAAA,CAAO,CAAC;QACvFZ,CAAC,CAAC,EAAG,CAAA,GAAGW,KAAK,CAAC,KAAKC,MAAO,CAAA,EAAIZ,CAAC,CAAC,EAAG,CAAA,GAAGW,KAAK,CAAC,EAAA,GAAKC,MAAO,CAAA,EAAIZ,CAAC,CAAC,EAAG,CAAA,GAAGW,KAAK,CAAC,EAAKC,GAAAA,MAAAA,CAAO,CAAC;QACvFZ,CAAC,CAAC,EAAG,CAAA,GAAGW,KAAK,CAAC,KAAKC,MAAO,CAAA,EAAIZ,CAAC,CAAC,EAAG,CAAA,GAAGW,KAAK,CAAC,EAAA,GAAKC,MAAO,CAAA,EAAIZ,CAAC,CAAC,EAAG,CAAA,GAAGW,KAAK,CAAC,EAAKC,GAAAA,MAAAA,CAAO,CAAC;AAC1F,KAAA,CAAA;AAEA;;;;MAKAC,MAAAA,CAAAA,WAcC,GAdDA,SAAAA,YAAYC,GAA2C,EAAEC,SAAqB,EAAQ;AAA7BA,QAAAA,IAAAA,sBAAAA,SAAoB,GAAA,CAAA,CAAA;QAC3E,IAAMf,CAAAA,GAAI,IAAI,CAACwZ,YAAY,CAAA;QAE1B1Y,GAAG,CAAC,CAAIC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,CAAE,CAAA,EAAIc,GAAG,CAAC,CAAIC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,CAAE,CAAA,EAAIc,GAAG,CAAC,CAAIC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,CAAA,CAAE,CAAC;QAEpFc,GAAG,CAAC,CAAIC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,CAAE,CAAA,EAAIc,GAAG,CAAC,CAAIC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,CAAE,CAAA,EAAIc,GAAG,CAAC,CAAIC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,CAAA,CAAE,CAAC;QACpFc,GAAG,CAAC,CAAIC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,CAAE,CAAA,EAAIc,GAAG,CAAC,CAAIC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,CAAE,CAAA,EAAIc,GAAG,CAAC,CAAIC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,CAAA,CAAE,CAAC;QACpFc,GAAG,CAAC,CAAIC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,CAAE,CAAA,EAAIc,GAAG,CAAC,EAAKC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,EAAG,CAAA,EAAIc,GAAG,CAAC,EAAKC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,EAAA,CAAG,CAAC;QAExFc,GAAG,CAAC,EAAKC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,EAAG,CAAA,EAAIc,GAAG,CAAC,EAAKC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,EAAG,CAAA,EAAIc,GAAG,CAAC,EAAKC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,EAAA,CAAG,CAAC;QAC1Fc,GAAG,CAAC,EAAKC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,EAAG,CAAA,EAAIc,GAAG,CAAC,EAAKC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,EAAG,CAAA,EAAIc,GAAG,CAAC,EAAKC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,EAAA,CAAG,CAAC;QAC1Fc,GAAG,CAAC,EAAKC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,EAAG,CAAA,EAAIc,GAAG,CAAC,EAAKC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,EAAG,CAAA,EAAIc,GAAG,CAAC,EAAKC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,EAAA,CAAG,CAAC;QAC1Fc,GAAG,CAAC,EAAKC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,EAAG,CAAA,EAAIc,GAAG,CAAC,EAAKC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,EAAG,CAAA,EAAIc,GAAG,CAAC,EAAKC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,EAAA,CAAG,CAAC;QAC1Fc,GAAG,CAAC,EAAKC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,EAAG,CAAA,EAAIc,GAAG,CAAC,EAAKC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,EAAG,CAAA,EAAIc,GAAG,CAAC,EAAKC,GAAAA,SAAAA,CAAU,GAAGf,CAAC,CAAC,EAAA,CAAG,CAAC;AAC7F,KAAA,CAAA;AAtMWuZ,IAAAA,OAAAA,mBAAAA,CAAAA;AAuMZ,CAAA;;;;;;;;;;;;;;;;;;;"}