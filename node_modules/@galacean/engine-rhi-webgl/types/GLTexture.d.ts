import { IPlatformTexture, Texture, TextureCubeFace, TextureDepthCompareFunction, TextureFilterMode, TextureWrapMode } from "@galacean/engine-core";
import { WebGLRenderer } from "./WebGLRenderer";
/**
 * Texture in WebGL platform.
 */
export declare class GLTexture implements IPlatformTexture {
    /**
     * Wrapping mode for texture coordinate S.
     */
    set wrapModeU(value: TextureWrapMode);
    /**
     * Wrapping mode for texture coordinate T.
     */
    set wrapModeV(value: TextureWrapMode);
    /**
     * Filter mode for texture.
     */
    set filterMode(value: TextureFilterMode);
    /**
     * Anisotropic level for texture.
     */
    set anisoLevel(value: number);
    set depthCompareFunction(value: TextureDepthCompareFunction);
    /**
     * Create texture in WebGL platform.
     */
    constructor(rhi: WebGLRenderer, texture: Texture, target: GLenum);
    /**
     * Destroy texture.
     */
    destroy(): void;
    /**
     * Generate multi-level textures based on the 0th level data.
     */
    generateMipmaps(): void;
    protected _bind(): void;
    /**
     * Pre-development mipmapping GPU memory.
     */
    protected _init(isCube: boolean): void;
    /**
     * Get the pixel color buffer according to the specified cube face and area.
     * @param face - You can choose which cube face to read
     * @param x - X coordinate of area start
     * @param y - Y coordinate of area start
     * @param width - Area width
     * @param height - Area height
     * @param out - Color buffer
     * @param mipLevel - Set mip level the data want to get from
     */
    protected _getPixelBuffer(face: TextureCubeFace | null, x: number, y: number, width: number, height: number, mipLevel: number, out: ArrayBufferView): void;
    private _setWrapMode;
    protected _getReadFrameBuffer(): WebGLFramebuffer;
}
