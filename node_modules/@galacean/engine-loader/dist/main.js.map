{"version":3,"file":"main.js","sources":["../../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_extends.js","../../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_set_prototype_of.js","../../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_inherits.js","../../../node_modules/.pnpm/tslib@2.5.0/node_modules/tslib/tslib.es6.js","../src/AnimatorControllerLoader.ts","../src/BufferLoader.ts","../src/EnvLoader.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_async_to_generator.js","../src/FontLoader.ts","../src/gltf/parser/ParserContext.ts","../src/gltf/Schema.ts","../src/gltf/GLTFUtil.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_array_like_to_array.js","../../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_array_without_holes.js","../../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_iterable_to_array.js","../../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_non_iterable_spread.js","../../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","../../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_to_consumable_array.js","../src/gltf/parser/Parser.ts","../src/gltf/extensions/ExtensionParser.ts","../src/gltf/extensions/KHR_draco_mesh_compression.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_instanceof.js","../src/gltf/extensions/KHR_lights_punctual.ts","../src/gltf/parser/MaterialParser.ts","../src/gltf/extensions/KHR_materials_clearcoat.ts","../src/gltf/extensions/KHR_materials_ior.ts","../src/gltf/extensions/KHR_materials_pbrSpecularGlossiness.ts","../src/gltf/extensions/KHR_materials_unlit.ts","../src/gltf/extensions/KHR_materials_variants.ts","../src/gltf/extensions/KHR_mesh_quantization.ts","../src/gltf/extensions/KHR_texture_transform.ts","../src/gltf/extensions/GALACEAN_materials_remap.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_create_for_of_iterator_helper_loose.js","../src/gltf/parser/AnimationParser.ts","../src/gltf/parser/BufferParser.ts","../src/gltf/parser/EntityParser.ts","../src/gltf/parser/MeshParser.ts","../src/gltf/parser/SceneParser.ts","../src/gltf/parser/SkinParser.ts","../src/gltf/parser/TextureParser.ts","../src/gltf/parser/Validator.ts","../src/gltf/GLTFParser.ts","../src/gltf/GLTFResource.ts","../src/GLTFLoader.ts","../src/HDRLoader.ts","../src/JSONLoader.ts","../src/compressed-texture/KhronosTextureContainer.ts","../src/compressed-texture/index.ts","../src/KTXCubeLoader.ts","../src/KTXLoader.ts","../src/MaterialLoader.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_create_class.js","../src/resource-deserialize/utils/BufferReader.ts","../src/resource-deserialize/utils/Decorator.ts","../src/resource-deserialize/utils/FileHeader.ts","../src/resource-deserialize/resources/mesh/MeshDecoder.ts","../src/resource-deserialize/resources/texture2D/TextureDecoder.ts","../../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_is_native_reflect_construct.js","../../../node_modules/.pnpm/@swc+helpers@0.5.0/node_modules/@swc/helpers/esm/_construct.js","../src/resource-deserialize/resources/prefab/ReflectionParser.ts","../src/resource-deserialize/resources/prefab/PrefabParser.ts","../src/resource-deserialize/resources/animationClip/ComponentMap.ts","../src/resource-deserialize/resources/animationClip/AnimationClipDecoder.ts","../src/resource-deserialize/resources/scene/SceneParserContext.ts","../src/resource-deserialize/resources/scene/SceneParser.ts","../src/resource-deserialize/resources/scene/MeshLoader.ts","../src/resource-deserialize/resources/scene/EditorTextureLoader.ts","../src/resource-deserialize/index.ts","../src/MeshLoader.ts","../src/SourceFontLoader.ts","../src/SpriteAtlasLoader.ts","../src/SpriteLoader.ts","../src/Texture2DLoader.ts","../src/TextureCubeLoader.ts","../src/AnimationClipLoader.ts","../src/SceneLoader.ts"],"sourcesContent":["export function _extends() {\n    _extends = Object.assign || function assign(target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];\n            for (var key in source) if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n        }\n\n        return target;\n    };\n\n    return _extends.apply(this, arguments);\n}\nexport { _extends as _ };\n","export function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n","import { _set_prototype_of } from \"./_set_prototype_of.js\";\n\nexport function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.push(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.push(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","import {\n  resourceLoader,\n  Loader,\n  AssetPromise,\n  AssetType,\n  LoadItem,\n  ResourceManager,\n  AnimatorController,\n  AnimatorControllerLayer,\n  AnimatorStateMachine,\n  AnimatorStateTransition\n} from \"@galacean/engine-core\";\n\n@resourceLoader(AssetType.AnimatorController, [\"json\"], false)\nclass AnimatorControllerLoader extends Loader<AnimatorController> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<AnimatorController> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<any>(item.url, {\n        ...item,\n        type: \"json\"\n      })\n        .then((data) => {\n          const animatorController = new AnimatorController();\n          const { layers } = data;\n          const promises = [];\n          layers.forEach((layerData, layerIndex: number) => {\n            const { name, blendingMode, weight, stateMachine: stateMachineData } = layerData;\n            const layer = new AnimatorControllerLayer(name);\n            layer.blendingMode = blendingMode;\n            layer.weight = weight;\n            if (stateMachineData) {\n              const { states } = stateMachineData;\n              const stateMachine = (layer.stateMachine = new AnimatorStateMachine());\n              states.forEach((stateData, stateIndex: number) => {\n                const {\n                  name,\n                  speed,\n                  wrapMode,\n                  clipStartNormalizedTime,\n                  clipEndNormalizedTime,\n                  isDefaultState,\n                  clip: clipData\n                } = stateData;\n                const state = stateMachine.addState(name);\n                isDefaultState && (stateMachine.defaultState = state);\n                state.speed = speed;\n                state.wrapMode = wrapMode;\n                state.clipStartTime = clipStartNormalizedTime;\n                state.clipEndTime = clipEndNormalizedTime;\n                if (clipData) {\n                  promises.push(\n                    new Promise((resolve) => {\n                      //@ts-ignore\n                      resourceManager.getResourceByRef(clipData).then((clip) => {\n                        resolve({\n                          layerIndex,\n                          stateIndex,\n                          clip\n                        });\n                      });\n                    })\n                  );\n                }\n              });\n              states.forEach((stateData) => {\n                const { name, transitions } = stateData;\n                transitions.forEach((transitionData) => {\n                  const { targetStateName, duration, offset, exitTime } = transitionData;\n                  const sourceState = stateMachine.findStateByName(name);\n                  const destState = stateMachine.findStateByName(targetStateName);\n                  const transition = new AnimatorStateTransition();\n                  transition.destinationState = destState;\n                  transition.duration = duration;\n                  transition.exitTime = exitTime;\n                  transition.offset = offset;\n                  sourceState.addTransition(transition);\n                });\n              });\n            }\n            animatorController.addLayer(layer);\n          });\n          Promise.all(promises).then((clipData) => {\n            clipData.forEach((data) => {\n              const { layerIndex, stateIndex, clip } = data;\n              animatorController.layers[layerIndex].stateMachine.states[stateIndex].clip = clip;\n            });\n            resolve(animatorController);\n          });\n        })\n        .catch(reject);\n    });\n  }\n}\n","import { resourceLoader, Loader, AssetPromise, AssetType, LoadItem } from \"@galacean/engine-core\";\n\nfunction isBase64(url) {\n  return /^data:(.+?);base64,/.test(url);\n}\n@resourceLoader(AssetType.Buffer, [\"bin\", \"r3bin\"], false)\nclass BufferLoader extends Loader<ArrayBuffer> {\n  load(item: LoadItem): AssetPromise<ArrayBuffer> {\n    const url = item.url;\n    if (isBase64(url)) {\n      return new AssetPromise((resolve) => {\n        const base64Str = url.slice(13 + RegExp.$1.length);\n        const result = Uint8Array.from(atob(base64Str), (c) => c.charCodeAt(0));\n        resolve(result.buffer);\n      });\n    }\n    return this.request(url, {\n      ...item,\n      type: \"arraybuffer\"\n    });\n  }\n}\n","import {\n  AmbientLight,\n  AssetPromise,\n  AssetType,\n  DiffuseMode,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  TextureCube,\n  TextureCubeFace,\n  TextureFilterMode\n} from \"@galacean/engine-core\";\nimport { SphericalHarmonics3 } from \"@galacean/engine-math\";\n\n@resourceLoader(AssetType.Env, [\"env\"])\nclass EnvLoader extends Loader<AmbientLight> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<AmbientLight> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<ArrayBuffer>(item.url, { type: \"arraybuffer\" })\n        .then((arraybuffer) => {\n          const shArray = new Float32Array(arraybuffer, 0, 27);\n          const shByteLength = 27 * 4;\n          const size = new Uint16Array(arraybuffer, shByteLength, 1)?.[0];\n\n          const texture = new TextureCube(resourceManager.engine, size);\n          texture.filterMode = TextureFilterMode.Trilinear;\n          const mipmapCount = texture.mipmapCount;\n          let offset = shByteLength + 2;\n\n          for (let mipLevel = 0; mipLevel < mipmapCount; mipLevel++) {\n            const mipSize = size >> mipLevel;\n\n            for (let face = 0; face < 6; face++) {\n              const dataSize = mipSize * mipSize * 4;\n              const data = new Uint8Array(arraybuffer, offset, dataSize);\n              offset += dataSize;\n              texture.setPixelBuffer(TextureCubeFace.PositiveX + face, data, mipLevel);\n            }\n          }\n\n          const ambientLight = new AmbientLight();\n          const sh = new SphericalHarmonics3();\n\n          ambientLight.diffuseMode = DiffuseMode.SphericalHarmonics;\n          sh.copyFromArray(shArray);\n          ambientLight.diffuseSphericalHarmonics = sh;\n          ambientLight.specularTexture = texture;\n          ambientLight.specularTextureDecodeRGBM = true;\n\n          resolve(ambientLight);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) resolve(value);\n    else Promise.resolve(value).then(_next, _throw);\n}\nexport function _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n\n            _next(undefined);\n        });\n    };\n}\nexport { _async_to_generator as _ };\n","import { AssetPromise, AssetType, Font, Loader, LoadItem, resourceLoader, ResourceManager } from \"@galacean/engine-core\";\n\n@resourceLoader(AssetType.Font, [\"font\"], false)\nclass FontLoader extends Loader<Font> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Font> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<any>(item.url, { type: \"json\" })\n        .then((data) => {\n          const { fontName, fontUrl } = data;\n\n          if (fontUrl) {\n            this._registerFont(fontName, fontUrl)\n              .then(() => {\n                const font = new Font(resourceManager.engine, fontName);\n                resolve(font);\n              })\n              .catch((e) => {\n                reject(`load font ${fontUrl} fail`);\n              });\n          } else {\n            const font = new Font(resourceManager.engine, fontName);\n            resolve(font);\n          }\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n\n  private async _registerFont(fontName: string, fontUrl: string): Promise<void> {\n    const fontFace = new FontFace(fontName, `url(${fontUrl})`);\n    await fontFace.load();\n    document.fonts.add(fontFace);\n  }\n}\n","import {\n  AnimationClip,\n  AssetPromise,\n  Buffer,\n  Entity,\n  Material,\n  ModelMesh,\n  Texture2D,\n  TypedArray\n} from \"@galacean/engine-core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { IGLTF } from \"../Schema\";\n\n/**\n * @internal\n */\nexport class ParserContext {\n  gltf: IGLTF;\n  buffers: ArrayBuffer[];\n  glTFResource: GLTFResource;\n  keepMeshData: boolean;\n  hasSkinned: boolean = false;\n  /** chain asset promise */\n  chainPromises: AssetPromise<any>[] = [];\n  accessorBufferCache: Record<string, BufferInfo> = {};\n\n  texturesPromiseInfo: PromiseInfo<Texture2D[]> = new PromiseInfo<Texture2D[]>();\n  materialsPromiseInfo: PromiseInfo<Material[]> = new PromiseInfo<Material[]>();\n  meshesPromiseInfo: PromiseInfo<ModelMesh[][]> = new PromiseInfo<ModelMesh[][]>();\n  animationClipsPromiseInfo: PromiseInfo<AnimationClip[]> = new PromiseInfo<AnimationClip[]>();\n  defaultSceneRootPromiseInfo: PromiseInfo<Entity> = new PromiseInfo<Entity>();\n  masterPromiseInfo: PromiseInfo<GLTFResource> = new PromiseInfo<GLTFResource>();\n  promiseMap: Record<string, AssetPromise<any>> = {};\n\n  constructor(url: string) {\n    const promiseMap = this.promiseMap;\n    promiseMap[`${url}?q=textures`] = this._initPromiseInfo(this.texturesPromiseInfo);\n    promiseMap[`${url}?q=materials`] = this._initPromiseInfo(this.materialsPromiseInfo);\n    promiseMap[`${url}?q=meshes`] = this._initPromiseInfo(this.meshesPromiseInfo);\n    promiseMap[`${url}?q=animations`] = this._initPromiseInfo(this.animationClipsPromiseInfo);\n    promiseMap[`${url}?q=defaultSceneRoot`] = this._initPromiseInfo(this.defaultSceneRootPromiseInfo);\n    promiseMap[`${url}`] = this._initPromiseInfo(this.masterPromiseInfo);\n  }\n\n  private _initPromiseInfo(promiseInfo): AssetPromise<any> {\n    const promise = new AssetPromise<any>((resolve, reject, setProgress, onCancel) => {\n      promiseInfo.resolve = resolve;\n      promiseInfo.reject = reject;\n      promiseInfo.setProgress = setProgress;\n      promiseInfo.onCancel = onCancel;\n    });\n    promiseInfo.promise = promise;\n    return promise;\n  }\n}\n\n/**\n * @internal\n */\nexport class BufferInfo {\n  vertexBuffer: Buffer;\n  vertexBindingInfos: Record<number, number> = {};\n  constructor(public data: TypedArray, public interleaved: boolean, public stride: number) {}\n}\n\n/**\n * @internal\n */\nexport class PromiseInfo<T> {\n  public promise: AssetPromise<T>;\n  public resolve: (value?: T | PromiseLike<T>) => void;\n  public reject: (reason?: any) => void;\n  public setProgress: (progress: number) => void;\n  public onCancel: (callback: () => void) => void;\n}\n","/**\n * Module for glTF 2.0 Interface\n */\n\nimport { MeshTopology } from \"@galacean/engine-core\";\n\n/**\n * The datatype of the components in the attribute\n */\nexport enum AccessorComponentType {\n  /**\n   * Byte\n   */\n  BYTE = 5120,\n  /**\n   * Unsigned Byte\n   */\n  UNSIGNED_BYTE = 5121,\n  /**\n   * Short\n   */\n  SHORT = 5122,\n  /**\n   * Unsigned Short\n   */\n  UNSIGNED_SHORT = 5123,\n  /**\n   * Unsigned Int\n   */\n  UNSIGNED_INT = 5125,\n  /**\n   * Float\n   */\n  FLOAT = 5126\n}\n\n/**\n * Specifies if the attirbute is a scalar, vector, or matrix\n */\nexport enum AccessorType {\n  /**\n   * Scalar\n   */\n  SCALAR = \"SCALAR\",\n  /**\n   * Vector2\n   */\n  VEC2 = \"VEC2\",\n  /**\n   * Vector3\n   */\n  VEC3 = \"VEC3\",\n  /**\n   * Vector4\n   */\n  VEC4 = \"VEC4\",\n  /**\n   * Matrix2x2\n   */\n  MAT2 = \"MAT2\",\n  /**\n   * Matrix3x3\n   */\n  MAT3 = \"MAT3\",\n  /**\n   * Matrix4x4\n   */\n  MAT4 = \"MAT4\"\n}\n\n/**\n * The name of the node's TRS property to modify, or the weights of the Morph Targets it instantiates\n */\nexport enum AnimationChannelTargetPath {\n  /**\n   * Translation\n   */\n  TRANSLATION = \"translation\",\n  /**\n   * Rotation\n   */\n  ROTATION = \"rotation\",\n  /**\n   * Scale\n   */\n  SCALE = \"scale\",\n  /**\n   * Weights\n   */\n  WEIGHTS = \"weights\"\n}\n\n/**\n * Interpolation algorithm\n */\nexport enum AnimationSamplerInterpolation {\n  /**\n   * The animated values are linearly interpolated between keyframes\n   */\n  Linear = \"LINEAR\",\n  /**\n   * The animated values remain constant to the output of the first keyframe, until the next keyframe\n   */\n  Step = \"STEP\",\n  /**\n   * The animation's interpolation is computed using a cubic spline with specified tangents\n   */\n  CubicSpine = \"CUBICSPLINE\"\n}\n\n/**\n * A camera's projection.  A node can reference a camera to apply a transform to place the camera in the scene\n */\nexport enum CameraType {\n  /**\n   * A perspective camera containing properties to create a perspective projection matrix\n   */\n  PERSPECTIVE = \"perspective\",\n  /**\n   * An orthographic camera containing properties to create an orthographic projection matrix\n   */\n  ORTHOGRAPHIC = \"orthographic\"\n}\n\n/**\n * The mime-type of the image\n */\nexport enum ImageMimeType {\n  /**\n   * JPEG Mime-type\n   */\n  JPEG = \"image/jpeg\",\n  /**\n   * PNG Mime-type\n   */\n  PNG = \"image/png\"\n}\n\n/**\n * The alpha rendering mode of the material\n */\nexport enum MaterialAlphaMode {\n  /**\n   * The alpha value is ignored and the rendered output is fully opaque\n   */\n  OPAQUE = \"OPAQUE\",\n  /**\n   * The rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value\n   */\n  MASK = \"MASK\",\n  /**\n   * The alpha value is used to composite the source and destination areas. The rendered output is combined with the background using the normal painting operation (i.e. the Porter and Duff over operator)\n   */\n  BLEND = \"BLEND\"\n}\n\n/**\n * Magnification filter.  Valid values correspond to WebGL enums: 9728 (NEAREST) and 9729 (LINEAR)\n */\nexport enum TextureMagFilter {\n  /**\n   * Nearest\n   */\n  NEAREST = 9728,\n  /**\n   * Linear\n   */\n  LINEAR = 9729\n}\n\n/**\n * Minification filter.  All valid values correspond to WebGL enums\n */\nexport enum TextureMinFilter {\n  /**\n   * Nearest\n   */\n  NEAREST = 9728,\n  /**\n   * Linear\n   */\n  LINEAR = 9729,\n  /**\n   * Nearest Mip-Map Nearest\n   */\n  NEAREST_MIPMAP_NEAREST = 9984,\n  /**\n   * Linear Mipmap Nearest\n   */\n  LINEAR_MIPMAP_NEAREST = 9985,\n  /**\n   * Nearest Mipmap Linear\n   */\n  NEAREST_MIPMAP_LINEAR = 9986,\n  /**\n   * Linear Mipmap Linear\n   */\n  LINEAR_MIPMAP_LINEAR = 9987\n}\n\n/**\n * S (U) wrapping mode.  All valid values correspond to WebGL enums\n */\nexport enum TextureWrapMode {\n  /**\n   * Clamp to Edge\n   */\n  CLAMP_TO_EDGE = 33071,\n  /**\n   * Mirrored Repeat\n   */\n  MIRRORED_REPEAT = 33648,\n  /**\n   * Repeat\n   */\n  REPEAT = 10497\n}\n\n/**\n * glTF Property\n */\nexport interface IProperty {\n  /**\n   * Dictionary object with extension-specific objects\n   */\n  extensions?: {\n    [key: string]: any;\n  };\n  /**\n   * Application-Specific data\n   */\n  extras?: any;\n}\n\n/**\n * glTF Child of Root Property\n */\nexport interface IChildRootProperty extends IProperty {\n  /**\n   * The user-defined name of this object\n   */\n  name?: string;\n}\n\n/**\n * Indices of those attributes that deviate from their initialization value\n */\nexport interface IAccessorSparseIndices extends IProperty {\n  /**\n   * The index of the bufferView with sparse indices. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target\n   */\n  bufferView: number;\n  /**\n   * The offset relative to the start of the bufferView in bytes. Must be aligned\n   */\n  byteOffset?: number;\n  /**\n   * The indices data type.  Valid values correspond to WebGL enums: 5121 (UNSIGNED_BYTE), 5123 (UNSIGNED_SHORT), 5125 (UNSIGNED_INT)\n   */\n  componentType: AccessorComponentType;\n}\n\n/**\n * Array of size accessor.sparse.count times number of components storing the displaced accessor attributes pointed by accessor.sparse.indices\n */\nexport interface IAccessorSparseValues extends IProperty {\n  /**\n   * The index of the bufferView with sparse values. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target\n   */\n  bufferView: number;\n  /**\n   * The offset relative to the start of the bufferView in bytes. Must be aligned\n   */\n  byteOffset?: number;\n}\n\n/**\n * Sparse storage of attributes that deviate from their initialization value\n */\nexport interface IAccessorSparse extends IProperty {\n  /**\n   * The number of attributes encoded in this sparse accessor\n   */\n  count: number;\n  /**\n   * Index array of size count that points to those accessor attributes that deviate from their initialization value. Indices must strictly increase\n   */\n  indices: IAccessorSparseIndices;\n  /**\n   * Array of size count times number of components, storing the displaced accessor attributes pointed by indices. Substituted values must have the same componentType and number of components as the base accessor\n   */\n  values: IAccessorSparseValues;\n}\n\n/**\n * A typed view into a bufferView.  A bufferView contains raw binary data.  An accessor provides a typed view into a bufferView or a subset of a bufferView similar to how WebGL's vertexAttribPointer() defines an attribute in a buffer\n */\nexport interface IAccessor extends IChildRootProperty {\n  /**\n   * The index of the bufferview\n   */\n  bufferView?: number;\n  /**\n   * The offset relative to the start of the bufferView in bytes\n   */\n  byteOffset?: number;\n  /**\n   * The datatype of components in the attribute\n   */\n  componentType: AccessorComponentType;\n  /**\n   * Specifies whether integer data values should be normalized\n   */\n  normalized?: boolean;\n  /**\n   * The number of attributes referenced by this accessor\n   */\n  count: number;\n  /**\n   * Specifies if the attribute is a scalar, vector, or matrix\n   */\n  type: AccessorType;\n  /**\n   * Maximum value of each component in this attribute\n   */\n  max?: number[];\n  /**\n   * Minimum value of each component in this attribute\n   */\n  min?: number[];\n  /**\n   * Sparse storage of attributes that deviate from their initialization value\n   */\n  sparse?: IAccessorSparse;\n}\n\n/**\n * Targets an animation's sampler at a node's property\n */\nexport interface IAnimationChannel extends IProperty {\n  /**\n   * The index of a sampler in this animation used to compute the value for the target\n   */\n  sampler: number;\n  /**\n   * The index of the node and TRS property to target\n   */\n  target: IAnimationChannelTarget;\n}\n\n/**\n * The index of the node and TRS property that an animation channel targets\n */\nexport interface IAnimationChannelTarget extends IProperty {\n  /**\n   * The index of the node to target\n   */\n  node: number;\n  /**\n   * The name of the node's TRS property to modify, or the weights of the Morph Targets it instantiates\n   */\n  path: AnimationChannelTargetPath;\n}\n\n/**\n * Combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target)\n */\nexport interface IAnimationSampler extends IProperty {\n  /**\n   * The index of an accessor containing keyframe input values, e.g., time\n   */\n  input: number;\n  /**\n   * Interpolation algorithm\n   */\n  interpolation?: AnimationSamplerInterpolation;\n  /**\n   * The index of an accessor, containing keyframe output values\n   */\n  output: number;\n}\n\n/**\n * A keyframe animation\n */\nexport interface IAnimation extends IChildRootProperty {\n  /**\n   * An array of channels, each of which targets an animation's sampler at a node's property\n   */\n  channels: IAnimationChannel[];\n  /**\n   * An array of samplers that combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target)\n   */\n  samplers: IAnimationSampler[];\n}\n\n/**\n * Metadata about the glTF asset\n */\nexport interface IAsset extends IChildRootProperty {\n  /**\n   * A copyright message suitable for display to credit the content creator\n   */\n  copyright?: string;\n  /**\n   * Tool that generated this glTF model.  Useful for debugging\n   */\n  generator?: string;\n  /**\n   * The glTF version that this asset targets\n   */\n  version: string;\n  /**\n   * The minimum glTF version that this asset targets\n   */\n  minVersion?: string;\n}\n\n/**\n * A buffer points to binary geometry, animation, or skins\n */\nexport interface IBuffer extends IChildRootProperty {\n  /**\n   * The uri of the buffer.  Relative paths are relative to the .gltf file.  Instead of referencing an external file, the uri can also be a data-uri\n   */\n  uri?: string;\n  /**\n   * The length of the buffer in bytes\n   */\n  byteLength: number;\n}\n\n/**\n * A view into a buffer generally representing a subset of the buffer\n */\nexport interface IBufferView extends IChildRootProperty {\n  /**\n   * The index of the buffer\n   */\n  buffer: number;\n  /**\n   * The offset into the buffer in bytes\n   */\n  byteOffset?: number;\n  /**\n   * The lenth of the bufferView in bytes\n   */\n  byteLength: number;\n  /**\n   * The stride, in bytes\n   */\n  byteStride?: number;\n}\n\n/**\n * An orthographic camera containing properties to create an orthographic projection matrix\n */\nexport interface ICameraOrthographic extends IProperty {\n  /**\n   * The floating-point horizontal magnification of the view. Must not be zero\n   */\n  xmag: number;\n  /**\n   * The floating-point vertical magnification of the view. Must not be zero\n   */\n  ymag: number;\n  /**\n   * The floating-point distance to the far clipping plane. zfar must be greater than znear\n   */\n  zfar: number;\n  /**\n   * The floating-point distance to the near clipping plane\n   */\n  znear: number;\n}\n\n/**\n * A perspective camera containing properties to create a perspective projection matrix\n */\nexport interface ICameraPerspective extends IProperty {\n  /**\n   * The floating-point aspect ratio of the field of view\n   */\n  aspectRatio?: number;\n  /**\n   * The floating-point vertical field of view in radians\n   */\n  yfov: number;\n  /**\n   * The floating-point distance to the far clipping plane\n   */\n  zfar?: number;\n  /**\n   * The floating-point distance to the near clipping plane\n   */\n  znear: number;\n}\n\n/**\n * A camera's projection.  A node can reference a camera to apply a transform to place the camera in the scene\n */\nexport interface ICamera extends IChildRootProperty {\n  /**\n   * An orthographic camera containing properties to create an orthographic projection matrix\n   */\n  orthographic?: ICameraOrthographic;\n  /**\n   * A perspective camera containing properties to create a perspective projection matrix\n   */\n  perspective?: ICameraPerspective;\n  /**\n   * Specifies if the camera uses a perspective or orthographic projection\n   */\n  type: CameraType;\n}\n\n/**\n * Image data used to create a texture. Image can be referenced by URI or bufferView index. mimeType is required in the latter case\n */\nexport interface IImage extends IChildRootProperty {\n  /**\n   * The uri of the image.  Relative paths are relative to the .gltf file.  Instead of referencing an external file, the uri can also be a data-uri.  The image format must be jpg or png\n   */\n  uri?: string;\n  /**\n   * The image's MIME type\n   */\n  mimeType?: ImageMimeType;\n  /**\n   * The index of the bufferView that contains the image. Use this instead of the image's uri property\n   */\n  bufferView?: number;\n}\n\n/**\n * Material Normal Texture Info\n */\nexport interface IMaterialNormalTextureInfo extends ITextureInfo {\n  /**\n   * The scalar multiplier applied to each normal vector of the normal texture\n   */\n  scale?: number;\n}\n\n/**\n * Material Occlusion Texture Info\n */\nexport interface IMaterialOcclusionTextureInfo extends ITextureInfo {\n  /**\n   * A scalar multiplier controlling the amount of occlusion applied\n   */\n  strength?: number;\n}\n\n/**\n * A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology\n */\nexport interface IMaterialPbrMetallicRoughness {\n  /**\n   * The material's base color factor\n   */\n  baseColorFactor?: number[];\n  /**\n   * The base color texture\n   */\n  baseColorTexture?: ITextureInfo;\n  /**\n   * The metalness of the material\n   */\n  metallicFactor?: number;\n  /**\n   * The roughness of the material\n   */\n  roughnessFactor?: number;\n  /**\n   * The metallic-roughness texture\n   */\n  metallicRoughnessTexture?: ITextureInfo;\n}\n\n/**\n * The material appearance of a primitive\n */\nexport interface IMaterial extends IChildRootProperty {\n  /**\n   * A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology. When not specified, all the default values of pbrMetallicRoughness apply\n   */\n  pbrMetallicRoughness?: IMaterialPbrMetallicRoughness;\n  /**\n   * The normal map texture\n   */\n  normalTexture?: IMaterialNormalTextureInfo;\n  /**\n   * The occlusion map texture\n   */\n  occlusionTexture?: IMaterialOcclusionTextureInfo;\n  /**\n   * The emissive map texture\n   */\n  emissiveTexture?: ITextureInfo;\n  /**\n   * The RGB components of the emissive color of the material. These values are linear. If an emissiveTexture is specified, this value is multiplied with the texel values\n   */\n  emissiveFactor?: number[];\n  /**\n   * The alpha rendering mode of the material\n   */\n  alphaMode?: MaterialAlphaMode;\n  /**\n   * The alpha cutoff value of the material\n   */\n  alphaCutoff?: number;\n  /**\n   * Specifies whether the material is double sided\n   */\n  doubleSided?: boolean;\n}\n\n/**\n * Geometry to be rendered with the given material\n */\nexport interface IMeshPrimitive extends IProperty {\n  /**\n   * A dictionary object, where each key corresponds to mesh attribute semantic and each value is the index of the accessor containing attribute's data\n   */\n  attributes: {\n    [name: string]: number;\n  };\n  /**\n   * The index of the accessor that contains the indices\n   */\n  indices?: number;\n  /**\n   * The index of the material to apply to this primitive when rendering\n   */\n  material?: number;\n  /**\n   * The type of primitives to render. All valid values correspond to WebGL enums\n   */\n  mode?: MeshTopology;\n  /**\n   * An array of Morph Targets, each  Morph Target is a dictionary mapping attributes (only POSITION, NORMAL, and TANGENT supported) to their deviations in the Morph Target\n   */\n  targets?: {\n    [name: string]: number;\n  }[];\n}\n\n/**\n * A set of primitives to be rendered.  A node can contain one mesh.  A node's transform places the mesh in the scene\n */\nexport interface IMesh extends IChildRootProperty {\n  /**\n   * An array of primitives, each defining geometry to be rendered with a material\n   */\n  primitives: IMeshPrimitive[];\n  /**\n   * Array of weights to be applied to the Morph Targets\n   */\n  weights?: number[];\n}\n\n/**\n * A node in the node hierarchy\n */\nexport interface INode extends IChildRootProperty {\n  /**\n   * The index of the camera referenced by this node\n   */\n  camera?: number;\n  /**\n   * The indices of this node's children\n   */\n  children?: number[];\n  /**\n   * The index of the skin referenced by this node\n   */\n  skin?: number;\n  /**\n   * A floating-point 4x4 transformation matrix stored in column-major order\n   */\n  matrix?: number[];\n  /**\n   * The index of the mesh in this node\n   */\n  mesh?: number;\n  /**\n   * The node's unit quaternion rotation in the order (x, y, z, w), where w is the scalar\n   */\n  rotation?: number[];\n  /**\n   * The node's non-uniform scale, given as the scaling factors along the x, y, and z axes\n   */\n  scale?: number[];\n  /**\n   * The node's translation along the x, y, and z axes\n   */\n  translation?: number[];\n  /**\n   * The weights of the instantiated Morph Target. Number of elements must match number of Morph Targets of used mesh\n   */\n  weights?: number[];\n}\n\n/**\n * Texture sampler properties for filtering and wrapping modes\n */\nexport interface ISampler extends IChildRootProperty {\n  /**\n   * Magnification filter.  Valid values correspond to WebGL enums: 9728 (NEAREST) and 9729 (LINEAR)\n   */\n  magFilter?: TextureMagFilter;\n  /**\n   * Minification filter.  All valid values correspond to WebGL enums\n   */\n  minFilter?: TextureMinFilter;\n  /**\n   * S (U) wrapping mode.  All valid values correspond to WebGL enums\n   */\n  wrapS?: TextureWrapMode;\n  /**\n   * T (V) wrapping mode.  All valid values correspond to WebGL enums\n   */\n  wrapT?: TextureWrapMode;\n}\n\n/**\n * The root nodes of a scene\n */\nexport interface IScene extends IChildRootProperty {\n  /**\n   * The indices of each root node\n   */\n  nodes: number[];\n}\n\n/**\n * Joints and matrices defining a skin\n */\nexport interface ISkin extends IChildRootProperty {\n  /**\n   * The index of the accessor containing the floating-point 4x4 inverse-bind matrices.  The default is that each matrix is a 4x4 identity matrix, which implies that inverse-bind matrices were pre-applied\n   */\n  inverseBindMatrices?: number;\n  /**\n   * The index of the node used as a skeleton root. When undefined, joints transforms resolve to scene root\n   */\n  skeleton?: number;\n  /**\n   * Indices of skeleton nodes, used as joints in this skin.  The array length must be the same as the count property of the inverseBindMatrices accessor (when defined)\n   */\n  joints: number[];\n}\n\n/**\n * A texture and its sampler\n */\nexport interface ITexture extends IChildRootProperty {\n  /**\n   * The index of the sampler used by this texture. When undefined, a sampler with repeat wrapping and auto filtering should be used\n   */\n  sampler?: number;\n  /**\n   * The index of the image used by this texture\n   */\n  source: number;\n}\n\n/**\n * Reference to a texture\n */\nexport interface ITextureInfo extends IProperty {\n  /**\n   * The index of the texture\n   */\n  index: number;\n  /**\n   * The set index of texture's TEXCOORD attribute used for texture coordinate mapping\n   */\n  texCoord?: number;\n}\n\n/**\n * The root object for a glTF asset\n */\nexport interface IGLTF extends IProperty {\n  /**\n   * An array of accessors. An accessor is a typed view into a bufferView\n   */\n  accessors?: IAccessor[];\n  /**\n   * An array of keyframe animations\n   */\n  animations?: IAnimation[];\n  /**\n   * Metadata about the glTF asset\n   */\n  asset: IAsset;\n  /**\n   * An array of buffers.  A buffer points to binary geometry, animation, or skins\n   */\n  buffers?: IBuffer[];\n  /**\n   * An array of bufferViews.  A bufferView is a view into a buffer generally representing a subset of the buffer\n   */\n  bufferViews?: IBufferView[];\n  /**\n   * An array of cameras\n   */\n  cameras?: ICamera[];\n  /**\n   * Names of glTF extensions used somewhere in this asset\n   */\n  extensionsUsed?: string[];\n  /**\n   * Names of glTF extensions required to properly load this asset\n   */\n  extensionsRequired?: string[];\n  /**\n   * An array of images.  An image defines data used to create a texture\n   */\n  images?: IImage[];\n  /**\n   * An array of materials.  A material defines the appearance of a primitive\n   */\n  materials?: IMaterial[];\n  /**\n   * An array of meshes.  A mesh is a set of primitives to be rendered\n   */\n  meshes?: IMesh[];\n  /**\n   * An array of nodes\n   */\n  nodes?: INode[];\n  /**\n   * An array of samplers.  A sampler contains properties for texture filtering and wrapping modes\n   */\n  samplers?: ISampler[];\n  /**\n   * The index of the default scene\n   */\n  scene?: number;\n  /**\n   * An array of scenes\n   */\n  scenes?: IScene[];\n  /**\n   * An array of skins.  A skin is defined by joints and matrices\n   */\n  skins?: ISkin[];\n  /**\n   * An array of textures\n   */\n  textures?: ITexture[];\n}\n","import { IndexFormat, TypedArray, VertexElementFormat } from \"@galacean/engine-core\";\nimport { Color, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { BufferInfo, ParserContext } from \"./parser/ParserContext\";\nimport { AccessorComponentType, AccessorType, IAccessor, IBufferView, IGLTF } from \"./Schema\";\n\nconst charCodeOfDot = \".\".charCodeAt(0);\nconst reEscapeChar = /\\\\(\\\\)?/g;\nconst rePropName = RegExp(\n  // Match anything that isn't a dot or bracket.\n  \"[^.[\\\\]]+\" +\n    \"|\" +\n    // Or match property names within brackets.\n    \"\\\\[(?:\" +\n    // Match a non-string expression.\n    \"([^\\\"'][^[]*)\" +\n    \"|\" +\n    // Or match strings (supports escaping characters).\n    \"([\\\"'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2\" +\n    \")\\\\]\" +\n    \"|\" +\n    // Or match \"\" as the space between consecutive dots or empty brackets.\n    \"(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))\",\n  \"g\"\n);\n\n/**\n * @internal\n */\nexport class GLTFUtil {\n  public static floatBufferToVector2Array(buffer: Float32Array): Vector2[] {\n    const bufferLen = buffer.length;\n    const array = new Array<Vector2>(bufferLen / 2);\n    for (let i = 0; i < bufferLen; i += 2) {\n      array[i / 2] = new Vector2(buffer[i], buffer[i + 1]);\n    }\n    return array;\n  }\n\n  public static floatBufferToVector3Array(buffer: Float32Array): Vector3[] {\n    const bufferLen = buffer.length;\n    const array = new Array<Vector3>(bufferLen / 3);\n    for (let i = 0; i < bufferLen; i += 3) {\n      array[i / 3] = new Vector3(buffer[i], buffer[i + 1], buffer[i + 2]);\n    }\n    return array;\n  }\n\n  public static floatBufferToVector4Array(buffer: Float32Array): Vector4[] {\n    const bufferLen = buffer.length;\n    const array = new Array<Vector4>(bufferLen / 4);\n    for (let i = 0; i < bufferLen; i += 4) {\n      array[i / 4] = new Vector4(buffer[i], buffer[i + 1], buffer[i + 2], buffer[i + 3]);\n    }\n    return array;\n  }\n\n  public static floatBufferToColorArray(buffer: Float32Array, isColor3: boolean): Color[] {\n    const bufferLen = buffer.length;\n    const colors = new Array<Color>(bufferLen / (isColor3 ? 3 : 4));\n\n    if (isColor3) {\n      for (let i = 0; i < bufferLen; i += 3) {\n        colors[i / 3] = new Color(buffer[i], buffer[i + 1], buffer[i + 2], 1.0);\n      }\n    } else {\n      for (let i = 0; i < bufferLen; i += 4) {\n        colors[i / 4] = new Color(buffer[i], buffer[i + 1], buffer[i + 2], buffer[i + 3]);\n      }\n    }\n\n    return colors;\n  }\n\n  /**\n   * Parse binary text for glb loader.\n   */\n  static decodeText(array: Uint8Array): string {\n    if (typeof TextDecoder !== \"undefined\") {\n      return new TextDecoder().decode(array);\n    }\n\n    // TextDecoder polyfill\n    let s = \"\";\n\n    for (let i = 0, il = array.length; i < il; i++) {\n      s += String.fromCharCode(array[i]);\n    }\n\n    return decodeURIComponent(encodeURIComponent(s));\n  }\n\n  /**\n   * Get the number of bytes occupied by accessor type.\n   */\n  static getAccessorTypeSize(accessorType: AccessorType): number {\n    switch (accessorType) {\n      case AccessorType.SCALAR:\n        return 1;\n      case AccessorType.VEC2:\n        return 2;\n      case AccessorType.VEC3:\n        return 3;\n      case AccessorType.VEC4:\n        return 4;\n      case AccessorType.MAT2:\n        return 4;\n      case AccessorType.MAT3:\n        return 9;\n      case AccessorType.MAT4:\n        return 16;\n    }\n  }\n\n  /**\n   * Get the TypedArray corresponding to the component type.\n   */\n  static getComponentType(componentType: AccessorComponentType) {\n    switch (componentType) {\n      case AccessorComponentType.BYTE:\n        return Int8Array;\n      case AccessorComponentType.UNSIGNED_BYTE:\n        return Uint8Array;\n      case AccessorComponentType.SHORT:\n        return Int16Array;\n      case AccessorComponentType.UNSIGNED_SHORT:\n        return Uint16Array;\n      case AccessorComponentType.UNSIGNED_INT:\n        return Uint32Array;\n      case AccessorComponentType.FLOAT:\n        return Float32Array;\n    }\n  }\n\n  static getNormalizedComponentScale(componentType: AccessorComponentType) {\n    // Reference: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization#encoding-quantized-data\n    switch (componentType) {\n      case AccessorComponentType.BYTE:\n        return 1 / 127;\n      case AccessorComponentType.UNSIGNED_BYTE:\n        return 1 / 255;\n      case AccessorComponentType.SHORT:\n        return 1 / 32767;\n      case AccessorComponentType.UNSIGNED_SHORT:\n        return 1 / 65535;\n      default:\n        throw new Error(\"Galacean.GLTFLoader: Unsupported normalized accessor component type.\");\n    }\n  }\n\n  static getAccessorBuffer(context: ParserContext, gltf: IGLTF, accessor: IAccessor): BufferInfo {\n    const { buffers } = context;\n    const bufferViews = gltf.bufferViews;\n\n    const componentType = accessor.componentType;\n    const bufferView = bufferViews[accessor.bufferView];\n\n    const buffer = buffers[bufferView.buffer];\n    const bufferByteOffset = bufferView.byteOffset || 0;\n    const byteOffset = accessor.byteOffset || 0;\n\n    const TypedArray = GLTFUtil.getComponentType(componentType);\n    const dataElmentSize = GLTFUtil.getAccessorTypeSize(accessor.type);\n    const dataElementBytes = TypedArray.BYTES_PER_ELEMENT;\n    const elementStride = dataElmentSize * dataElementBytes;\n    const accessorCount = accessor.count;\n    const bufferStride = bufferView.byteStride;\n\n    let bufferInfo: BufferInfo;\n    // According to the glTF official documentation only byteStride not undefined is allowed\n    if (bufferStride !== undefined && bufferStride !== elementStride) {\n      const bufferSlice = Math.floor(byteOffset / bufferStride);\n      const bufferCacheKey = accessor.bufferView + \":\" + componentType + \":\" + bufferSlice + \":\" + accessorCount;\n      const accessorBufferCache = context.accessorBufferCache;\n      bufferInfo = accessorBufferCache[bufferCacheKey];\n      if (!bufferInfo) {\n        const offset = bufferByteOffset + bufferSlice * bufferStride;\n        const count = accessorCount * (bufferStride / dataElementBytes);\n        const data = new TypedArray(buffer, offset, count);\n        accessorBufferCache[bufferCacheKey] = bufferInfo = new BufferInfo(data, true, bufferStride);\n      }\n    } else {\n      const offset = bufferByteOffset + byteOffset;\n      const count = accessorCount * dataElmentSize;\n      const data = new TypedArray(buffer, offset, count);\n      bufferInfo = new BufferInfo(data, false, elementStride);\n    }\n\n    if (accessor.sparse) {\n      const data = GLTFUtil.processingSparseData(gltf, accessor, buffers, bufferInfo.data);\n      bufferInfo = new BufferInfo(data, false, bufferInfo.stride);\n    }\n    return bufferInfo;\n  }\n\n  /**\n   * @deprecated\n   * Get accessor data.\n   */\n  static getAccessorData(gltf: IGLTF, accessor: IAccessor, buffers: ArrayBuffer[]): TypedArray {\n    const bufferViews = gltf.bufferViews;\n    const bufferView = bufferViews[accessor.bufferView];\n    const arrayBuffer = buffers[bufferView.buffer];\n    const accessorByteOffset = accessor.hasOwnProperty(\"byteOffset\") ? accessor.byteOffset : 0;\n    const bufferViewByteOffset = bufferView.hasOwnProperty(\"byteOffset\") ? bufferView.byteOffset : 0;\n    const byteOffset = accessorByteOffset + bufferViewByteOffset;\n    const accessorTypeSize = GLTFUtil.getAccessorTypeSize(accessor.type);\n    const length = accessorTypeSize * accessor.count;\n    const byteStride = bufferView.byteStride ?? 0;\n    const arrayType = GLTFUtil.getComponentType(accessor.componentType);\n    let uint8Array;\n    if (byteStride) {\n      const accessorByteSize = accessorTypeSize * arrayType.BYTES_PER_ELEMENT;\n      uint8Array = new Uint8Array(accessor.count * accessorByteSize);\n      const originalBufferView = new Uint8Array(arrayBuffer, bufferViewByteOffset, bufferView.byteLength);\n      for (let i = 0; i < accessor.count; i++) {\n        for (let j = 0; j < accessorByteSize; j++) {\n          uint8Array[i * accessorByteSize + j] = originalBufferView[i * byteStride + accessorByteOffset + j];\n        }\n      }\n    } else {\n      uint8Array = new Uint8Array(arrayBuffer.slice(byteOffset, byteOffset + length * arrayType.BYTES_PER_ELEMENT));\n    }\n\n    const typedArray = new arrayType(uint8Array.buffer);\n\n    if (accessor.sparse) {\n      const { count, indices, values } = accessor.sparse;\n      const indicesBufferView = bufferViews[indices.bufferView];\n      const valuesBufferView = bufferViews[values.bufferView];\n      const indicesArrayBuffer = buffers[indicesBufferView.buffer];\n      const valuesArrayBuffer = buffers[valuesBufferView.buffer];\n      const indicesByteOffset = (indices.byteOffset ?? 0) + (indicesBufferView.byteOffset ?? 0);\n      const indicesByteLength = indicesBufferView.byteLength;\n      const valuesByteOffset = (values.byteOffset ?? 0) + (valuesBufferView.byteOffset ?? 0);\n      const valuesByteLength = valuesBufferView.byteLength;\n\n      const indicesType = GLTFUtil.getComponentType(indices.componentType);\n      const indicesArray = new indicesType(\n        indicesArrayBuffer,\n        indicesByteOffset,\n        indicesByteLength / indicesType.BYTES_PER_ELEMENT\n      );\n      const valuesArray = new arrayType(\n        valuesArrayBuffer,\n        valuesByteOffset,\n        valuesByteLength / arrayType.BYTES_PER_ELEMENT\n      );\n\n      for (let i = 0; i < count; i++) {\n        const replaceIndex = indicesArray[i];\n        for (let j = 0; j < accessorTypeSize; j++) {\n          typedArray[replaceIndex * accessorTypeSize + j] = valuesArray[i * accessorTypeSize + j];\n        }\n      }\n    }\n\n    return typedArray;\n  }\n\n  static getBufferViewData(bufferView: IBufferView, buffers: ArrayBuffer[]): ArrayBuffer {\n    const { buffer, byteOffset = 0, byteLength } = bufferView;\n    const arrayBuffer = buffers[buffer];\n\n    return arrayBuffer.slice(byteOffset, byteOffset + byteLength);\n  }\n\n  /**\n   * Get accessor data.\n   */\n  static processingSparseData(\n    gltf: IGLTF,\n    accessor: IAccessor,\n    buffers: ArrayBuffer[],\n    originData: TypedArray\n  ): TypedArray {\n    const bufferViews = gltf.bufferViews;\n    const accessorTypeSize = GLTFUtil.getAccessorTypeSize(accessor.type);\n    const TypedArray = GLTFUtil.getComponentType(accessor.componentType);\n    const data = originData.slice();\n\n    const { count, indices, values } = accessor.sparse;\n    const indicesBufferView = bufferViews[indices.bufferView];\n    const valuesBufferView = bufferViews[values.bufferView];\n    const indicesArrayBuffer = buffers[indicesBufferView.buffer];\n    const valuesArrayBuffer = buffers[valuesBufferView.buffer];\n    const indicesByteOffset = (indices.byteOffset ?? 0) + (indicesBufferView.byteOffset ?? 0);\n    const indicesByteLength = indicesBufferView.byteLength;\n    const valuesByteOffset = (values.byteOffset ?? 0) + (valuesBufferView.byteOffset ?? 0);\n    const valuesByteLength = valuesBufferView.byteLength;\n\n    const IndexTypeArray = GLTFUtil.getComponentType(indices.componentType);\n    const indicesArray = new IndexTypeArray(\n      indicesArrayBuffer,\n      indicesByteOffset,\n      indicesByteLength / IndexTypeArray.BYTES_PER_ELEMENT\n    );\n    const valuesArray = new TypedArray(\n      valuesArrayBuffer,\n      valuesByteOffset,\n      valuesByteLength / TypedArray.BYTES_PER_ELEMENT\n    );\n\n    for (let i = 0; i < count; i++) {\n      const replaceIndex = indicesArray[i];\n      for (let j = 0; j < accessorTypeSize; j++) {\n        data[replaceIndex * accessorTypeSize + j] = valuesArray[i * accessorTypeSize + j];\n      }\n    }\n\n    return data;\n  }\n\n  static getIndexFormat(type: AccessorComponentType): IndexFormat {\n    switch (type) {\n      case AccessorComponentType.UNSIGNED_BYTE:\n        return IndexFormat.UInt8;\n      case AccessorComponentType.UNSIGNED_SHORT:\n        return IndexFormat.UInt16;\n      case AccessorComponentType.UNSIGNED_INT:\n        return IndexFormat.UInt32;\n    }\n  }\n\n  static getElementFormat(type: AccessorComponentType, size: number, normalized: boolean = false): VertexElementFormat {\n    if (type == AccessorComponentType.FLOAT) {\n      switch (size) {\n        case 1:\n          return VertexElementFormat.Float;\n        case 2:\n          return VertexElementFormat.Vector2;\n        case 3:\n          return VertexElementFormat.Vector3;\n        case 4:\n          return VertexElementFormat.Vector4;\n      }\n    }\n\n    if (type == AccessorComponentType.SHORT) {\n      switch (size) {\n        case 2:\n          return normalized ? VertexElementFormat.NormalizedShort2 : VertexElementFormat.Short2;\n        case 3:\n        case 4:\n          return normalized ? VertexElementFormat.NormalizedShort4 : VertexElementFormat.Short4;\n      }\n    }\n\n    if (type == AccessorComponentType.UNSIGNED_SHORT) {\n      switch (size) {\n        case 2:\n          return normalized ? VertexElementFormat.NormalizedUShort2 : VertexElementFormat.UShort2;\n        case 3:\n        case 4:\n          return normalized ? VertexElementFormat.NormalizedUShort4 : VertexElementFormat.UShort4;\n      }\n    }\n\n    if (type == AccessorComponentType.BYTE) {\n      switch (size) {\n        case 2:\n        case 3:\n        case 4:\n          return normalized ? VertexElementFormat.NormalizedByte4 : VertexElementFormat.Byte4;\n      }\n    }\n\n    if (type == AccessorComponentType.UNSIGNED_BYTE) {\n      switch (size) {\n        case 2:\n        case 3:\n        case 4:\n          return normalized ? VertexElementFormat.NormalizedUByte4 : VertexElementFormat.UByte4;\n      }\n    }\n  }\n\n  /**\n   * Load image buffer\n   */\n  static loadImageBuffer(imageBuffer: ArrayBuffer, type: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n      const blob = new window.Blob([imageBuffer], { type });\n      const img = new Image();\n      img.onerror = function () {\n        reject(new Error(\"Failed to load image buffer\"));\n      };\n      img.onload = function () {\n        // Call requestAnimationFrame to avoid iOS's bug.\n        requestAnimationFrame(() => {\n          resolve(img);\n          img.onload = null;\n          img.onerror = null;\n          img.onabort = null;\n        });\n      };\n      img.crossOrigin = \"anonymous\";\n      img.src = URL.createObjectURL(blob);\n    });\n  }\n\n  static isAbsoluteUrl(url: string): boolean {\n    return /^(?:http|blob|data:|\\/)/.test(url);\n  }\n\n  static parseRelativeUrl(baseUrl: string, relativeUrl: string): string {\n    if (GLTFUtil.isAbsoluteUrl(relativeUrl)) {\n      return relativeUrl;\n    }\n\n    return baseUrl.substring(0, baseUrl.lastIndexOf(\"/\") + 1) + GLTFUtil._formatRelativePath(relativeUrl);\n  }\n\n  /**\n   * Parse the glb format.\n   */\n  static parseGLB(glb: ArrayBuffer): {\n    gltf: IGLTF;\n    buffers: ArrayBuffer[];\n  } {\n    const UINT32_LENGTH = 4;\n    const GLB_HEADER_MAGIC = 0x46546c67; // 'glTF'\n    const GLB_HEADER_LENGTH = 12;\n    const GLB_CHUNK_TYPES = { JSON: 0x4e4f534a, BIN: 0x004e4942 };\n\n    const dataView = new DataView(glb);\n\n    // read header\n    const header = {\n      magic: dataView.getUint32(0, true),\n      version: dataView.getUint32(UINT32_LENGTH, true),\n      length: dataView.getUint32(2 * UINT32_LENGTH, true)\n    };\n\n    if (header.magic !== GLB_HEADER_MAGIC) {\n      console.error(\"Invalid glb magic number. Expected 0x46546C67, found 0x\" + header.magic.toString(16));\n      return null;\n    }\n\n    // read main data\n    let chunkLength = dataView.getUint32(GLB_HEADER_LENGTH, true);\n    let chunkType = dataView.getUint32(GLB_HEADER_LENGTH + UINT32_LENGTH, true);\n\n    // read glTF json\n    if (chunkType !== GLB_CHUNK_TYPES.JSON) {\n      console.error(\"Invalid glb chunk type. Expected 0x4E4F534A, found 0x\" + chunkType.toString(16));\n      return null;\n    }\n\n    const glTFData = new Uint8Array(glb, GLB_HEADER_LENGTH + 2 * UINT32_LENGTH, chunkLength);\n    const gltf: IGLTF = JSON.parse(GLTFUtil.decodeText(glTFData));\n\n    // read all buffers\n    const buffers: ArrayBuffer[] = [];\n    let byteOffset = GLB_HEADER_LENGTH + 2 * UINT32_LENGTH + chunkLength;\n\n    while (byteOffset < header.length) {\n      chunkLength = dataView.getUint32(byteOffset, true);\n      chunkType = dataView.getUint32(byteOffset + UINT32_LENGTH, true);\n\n      if (chunkType !== GLB_CHUNK_TYPES.BIN) {\n        console.error(\"Invalid glb chunk type. Expected 0x004E4942, found 0x\" + chunkType.toString(16));\n        return null;\n      }\n\n      const currentOffset = byteOffset + 2 * UINT32_LENGTH;\n      const buffer = glb.slice(currentOffset, currentOffset + chunkLength);\n      buffers.push(buffer);\n\n      byteOffset += chunkLength + 2 * UINT32_LENGTH;\n    }\n\n    return {\n      gltf,\n      buffers\n    };\n  }\n\n  private static _formatRelativePath(path: string): string {\n    // For example input is \"a/b\", \"/a/b\", \"./a/b\", \"./a/./b\", \"./a/../a/b\", output is \"a/b\"\n    return path\n      .split(\"/\")\n      .filter(Boolean)\n      .reduce((acc, cur) => {\n        if (cur === \"..\") acc.pop();\n        else if (cur !== \".\") acc.push(cur);\n        return acc;\n      }, [])\n      .join(\"/\");\n  }\n}\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { AnimationClip, AssetPromise, EngineObject, Material, Mesh } from \"@galacean/engine-core\";\nimport { ExtensionParser } from \"../extensions/ExtensionParser\";\nimport { ExtensionSchema } from \"../extensions/Schema\";\nimport { ParserContext } from \"./ParserContext\";\n\nexport abstract class Parser {\n  private static _extensionParsers: Record<string, ExtensionParser[]> = {};\n\n  static parseEngineResource(\n    extensionName: string,\n    extensionSchema: ExtensionSchema,\n    parseResource: EngineObject,\n    context: ParserContext,\n    ...extra\n  ): void {\n    const parsers = Parser._extensionParsers[extensionName];\n\n    if (parsers?.length) {\n      for (let i = 0; i < parsers.length; i++) {\n        parsers[i].parseEngineResource(extensionSchema, parseResource, context, ...extra);\n      }\n    }\n  }\n\n  static createEngineResource<T extends EngineObject>(\n    extensionName: string,\n    extensionSchema: ExtensionSchema,\n    context: ParserContext,\n    ...extra\n  ): T | Promise<T> {\n    const parsers = Parser._extensionParsers[extensionName];\n\n    if (parsers?.length) {\n      return parsers[0].createEngineResource(extensionSchema, context, ...extra) as T;\n    }\n  }\n\n  static hasExtensionParser(extensionName: string): boolean {\n    const parsers = Parser._extensionParsers[extensionName];\n    return !!parsers?.length;\n  }\n\n  static initialize(extensionName: string) {\n    const parsers = Parser._extensionParsers[extensionName];\n\n    if (parsers?.length) {\n      for (let i = 0; i < parsers.length; i++) {\n        parsers[i].initialize();\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _addExtensionParser(extensionName: string, extensionParser: ExtensionParser) {\n    if (!Parser._extensionParsers[extensionName]) {\n      Parser._extensionParsers[extensionName] = [];\n    }\n    Parser._extensionParsers[extensionName].push(extensionParser);\n  }\n\n  abstract parse(context: ParserContext): AssetPromise<any> | void | Material | AnimationClip | Mesh;\n}\n\n/**\n * Declare ExtensionParser's decorator.\n * @param extensionName - Extension name\n */\nexport function registerExtension(extensionName: string) {\n  return (parser: new () => ExtensionParser) => {\n    const extensionParser = new parser();\n\n    Parser._addExtensionParser(extensionName, extensionParser);\n  };\n}\n","import { EngineObject } from \"@galacean/engine-core\";\nimport { ParserContext } from \"../parser/ParserContext\";\nimport { ExtensionSchema } from \"./Schema\";\n\nexport abstract class ExtensionParser {\n  initialize(): void {}\n\n  parseEngineResource(\n    schema: ExtensionSchema,\n    parseResource: EngineObject,\n    context: ParserContext,\n    ...extra\n  ): void | Promise<void> {}\n\n  createEngineResource(\n    schema: ExtensionSchema,\n    context: ParserContext,\n    ...extra\n  ): EngineObject | Promise<EngineObject> {\n    return null;\n  }\n}\n","import { DRACODecoder } from \"@galacean/engine-draco\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ParserContext } from \"../parser/ParserContext\";\nimport { IMeshPrimitive } from \"../Schema\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRDracoMeshCompression } from \"./Schema\";\n\n@registerExtension(\"KHR_draco_mesh_compression\")\nclass KHR_draco_mesh_compression extends ExtensionParser {\n  private static _decoder: DRACODecoder;\n\n  initialize(): void {\n    if (!KHR_draco_mesh_compression._decoder) {\n      KHR_draco_mesh_compression._decoder = new DRACODecoder();\n    }\n  }\n\n  createEngineResource(schema: IKHRDracoMeshCompression, context: ParserContext, gltfPrimitive: IMeshPrimitive) {\n    const { gltf, buffers } = context;\n    const { bufferViews, accessors } = gltf;\n    const { bufferView: bufferViewIndex, attributes: gltfAttributeMap } = schema;\n\n    const attributeMap = {};\n    const attributeTypeMap = {};\n    for (let attributeName in gltfAttributeMap) {\n      attributeMap[attributeName] = gltfAttributeMap[attributeName];\n    }\n    for (let attributeName in gltfPrimitive.attributes) {\n      if (gltfAttributeMap[attributeName] !== undefined) {\n        const accessorDef = accessors[gltfPrimitive.attributes[attributeName]];\n        attributeTypeMap[attributeName] = GLTFUtil.getComponentType(accessorDef.componentType).name;\n      }\n    }\n    const indexAccessor = accessors[gltfPrimitive.indices];\n    const indexType = GLTFUtil.getComponentType(indexAccessor.componentType).name;\n    const taskConfig = {\n      attributeIDs: attributeMap,\n      attributeTypes: attributeTypeMap,\n      useUniqueIDs: true,\n      indexType\n    };\n    const buffer = GLTFUtil.getBufferViewData(bufferViews[bufferViewIndex], buffers);\n    return KHR_draco_mesh_compression._decoder.decode(buffer, taskConfig).then((parsedGeometry) => parsedGeometry);\n  }\n}\n","export function _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else return left instanceof right;\n}\nexport { _instanceof as _ };\n","import { DirectLight, Entity, PointLight, SpotLight } from \"@galacean/engine-core\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ParserContext } from \"../parser/ParserContext\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRLightsPunctual_Light } from \"./Schema\";\n\n@registerExtension(\"KHR_lights_punctual\")\nclass KHR_lights_punctual extends ExtensionParser {\n  parseEngineResource(schema: IKHRLightsPunctual_Light, entity: Entity, context: ParserContext): void {\n    const { color, intensity = 1, type, range, spot } = schema;\n    const glTFResource = context.glTFResource;\n    let light: DirectLight | PointLight | SpotLight;\n\n    if (type === \"directional\") {\n      light = entity.addComponent(DirectLight);\n    } else if (type === \"point\") {\n      light = entity.addComponent(PointLight);\n    } else if (type === \"spot\") {\n      light = entity.addComponent(SpotLight);\n    }\n\n    if (color) {\n      light.color.set(color[0], color[1], color[2], 1);\n    }\n\n    light.intensity = intensity;\n\n    if (range && !(light instanceof DirectLight)) {\n      light.distance = range;\n    }\n\n    if (spot && light instanceof SpotLight) {\n      const { innerConeAngle = 0, outerConeAngle = Math.PI / 4 } = spot;\n\n      light.angle = innerConeAngle;\n      light.penumbra = outerConeAngle - innerConeAngle;\n    }\n\n    if (!glTFResource.lights) glTFResource.lights = [];\n    glTFResource.lights.push(light);\n  }\n}\n","import {\n  AssetPromise,\n  Logger,\n  Material,\n  PBRMaterial,\n  PBRSpecularMaterial,\n  RenderFace,\n  TextureCoordinate,\n  UnlitMaterial\n} from \"@galacean/engine-core\";\nimport { Color } from \"@galacean/engine-math\";\nimport { MaterialAlphaMode } from \"../Schema\";\nimport { Parser } from \"./Parser\";\nimport { ParserContext } from \"./ParserContext\";\n\nexport class MaterialParser extends Parser {\n  /** @internal */\n  static _parseTextureTransform(material: Material, extensions: any = {}, context: ParserContext): void {\n    const schema = extensions.KHR_texture_transform;\n    if (schema) {\n      Parser.parseEngineResource(\"KHR_texture_transform\", schema, material, context);\n    }\n  }\n\n  parse(context: ParserContext): AssetPromise<Material[]> {\n    const { gltf, glTFResource } = context;\n\n    const { engine, textures } = glTFResource;\n    if (!gltf.materials) return;\n\n    const materialsPromiseInfo = context.materialsPromiseInfo;\n    const materials: Material[] = [];\n\n    for (let i = 0; i < gltf.materials.length; i++) {\n      const {\n        extensions = {},\n        pbrMetallicRoughness,\n        normalTexture,\n        occlusionTexture,\n        emissiveTexture,\n        emissiveFactor,\n        alphaMode,\n        alphaCutoff,\n        doubleSided,\n        name = \"\"\n      } = gltf.materials[i];\n\n      const {\n        KHR_materials_unlit,\n        KHR_materials_pbrSpecularGlossiness,\n        KHR_materials_clearcoat,\n        KHR_materials_ior,\n        OASIS_materials_remap\n      } = extensions;\n\n      let material: UnlitMaterial | PBRMaterial | PBRSpecularMaterial = null;\n\n      if (KHR_materials_unlit) {\n        material = <UnlitMaterial>Parser.createEngineResource(\"KHR_materials_unlit\", KHR_materials_unlit, context);\n      } else if (KHR_materials_pbrSpecularGlossiness) {\n        material = <PBRSpecularMaterial>(\n          Parser.createEngineResource(\n            \"KHR_materials_pbrSpecularGlossiness\",\n            KHR_materials_pbrSpecularGlossiness,\n            context\n          )\n        );\n      } else {\n        material = new PBRMaterial(engine);\n      }\n\n      material.name = name;\n\n      if (KHR_materials_clearcoat) {\n        Parser.parseEngineResource(\"KHR_materials_clearcoat\", KHR_materials_clearcoat, material, context);\n      }\n\n      if (KHR_materials_ior) {\n        Parser.parseEngineResource(\"KHR_materials_ior\", KHR_materials_ior, material, context);\n      }\n\n      if (pbrMetallicRoughness) {\n        const { baseColorFactor, baseColorTexture, metallicFactor, roughnessFactor, metallicRoughnessTexture } =\n          pbrMetallicRoughness;\n\n        if (baseColorFactor) {\n          material.baseColor = new Color(\n            Color.linearToGammaSpace(baseColorFactor[0]),\n            Color.linearToGammaSpace(baseColorFactor[1]),\n            Color.linearToGammaSpace(baseColorFactor[2]),\n            baseColorFactor[3]\n          );\n        }\n        if (baseColorTexture) {\n          material.baseTexture = textures[baseColorTexture.index];\n          MaterialParser._parseTextureTransform(material, baseColorTexture.extensions, context);\n        }\n\n        if (!KHR_materials_unlit && !KHR_materials_pbrSpecularGlossiness) {\n          const m = material as PBRMaterial;\n          m.metallic = metallicFactor ?? 1;\n          m.roughness = roughnessFactor ?? 1;\n          if (metallicRoughnessTexture) {\n            m.roughnessMetallicTexture = textures[metallicRoughnessTexture.index];\n            MaterialParser._parseTextureTransform(material, metallicRoughnessTexture.extensions, context);\n          }\n        }\n      }\n\n      if (!KHR_materials_unlit) {\n        const m = material as PBRMaterial | PBRSpecularMaterial;\n\n        if (emissiveTexture) {\n          m.emissiveTexture = textures[emissiveTexture.index];\n          MaterialParser._parseTextureTransform(material, emissiveTexture.extensions, context);\n        }\n\n        if (emissiveFactor) {\n          m.emissiveColor = new Color(\n            Color.linearToGammaSpace(emissiveFactor[0]),\n            Color.linearToGammaSpace(emissiveFactor[1]),\n            Color.linearToGammaSpace(emissiveFactor[2])\n          );\n        }\n\n        if (normalTexture) {\n          const { index, scale } = normalTexture;\n          m.normalTexture = textures[index];\n          MaterialParser._parseTextureTransform(material, normalTexture.extensions, context);\n          if (scale !== undefined) {\n            m.normalTextureIntensity = scale;\n          }\n        }\n\n        if (occlusionTexture) {\n          const { index, strength, texCoord } = occlusionTexture;\n          m.occlusionTexture = textures[index];\n          MaterialParser._parseTextureTransform(material, occlusionTexture.extensions, context);\n          if (strength !== undefined) {\n            m.occlusionTextureIntensity = strength;\n          }\n          if (texCoord === TextureCoordinate.UV1) {\n            m.occlusionTextureCoord = TextureCoordinate.UV1;\n          } else if (texCoord > TextureCoordinate.UV1) {\n            Logger.warn(\"Occlusion texture uv coordinate must be UV0 or UV1.\");\n          }\n        }\n      }\n\n      if (OASIS_materials_remap) {\n        gltf.extensions = gltf.extensions ?? {};\n        gltf.extensions[\"OASIS_materials_remap\"] = gltf.extensions[\"OASIS_materials_remap\"] ?? {};\n        gltf.extensions[\"OASIS_materials_remap\"][i] = Parser.createEngineResource(\n          \"OASIS_materials_remap\",\n          OASIS_materials_remap,\n          context\n        );\n      }\n\n      if (doubleSided) {\n        material.renderFace = RenderFace.Double;\n      } else {\n        material.renderFace = RenderFace.Front;\n      }\n\n      switch (alphaMode) {\n        case MaterialAlphaMode.OPAQUE:\n          material.isTransparent = false;\n          break;\n        case MaterialAlphaMode.BLEND:\n          material.isTransparent = true;\n          break;\n        case MaterialAlphaMode.MASK:\n          material.alphaCutoff = alphaCutoff ?? 0.5;\n          break;\n      }\n\n      materials[i] = material;\n    }\n\n    glTFResource.materials = materials;\n    materialsPromiseInfo.resolve(materials);\n    return materialsPromiseInfo.promise;\n  }\n}\n","import { PBRMaterial } from \"@galacean/engine-core\";\nimport { MaterialParser } from \"../parser/MaterialParser\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ParserContext } from \"../parser/ParserContext\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRMaterialsClearcoat } from \"./Schema\";\n\n@registerExtension(\"KHR_materials_clearcoat\")\nclass KHR_materials_clearcoat extends ExtensionParser {\n  parseEngineResource(schema: IKHRMaterialsClearcoat, material: PBRMaterial, context: ParserContext): void {\n    const { textures } = context.glTFResource;\n    const {\n      clearcoatFactor = 0,\n      clearcoatTexture,\n      clearcoatRoughnessFactor = 0,\n      clearcoatRoughnessTexture,\n      clearcoatNormalTexture\n    } = schema;\n\n    material.clearCoat = clearcoatFactor;\n    material.clearCoatRoughness = clearcoatRoughnessFactor;\n\n    if (clearcoatTexture) {\n      material.clearCoatTexture = textures[clearcoatTexture.index];\n      MaterialParser._parseTextureTransform(material, clearcoatTexture.extensions, context);\n    }\n    if (clearcoatRoughnessTexture) {\n      material.clearCoatRoughnessTexture = textures[clearcoatRoughnessTexture.index];\n      MaterialParser._parseTextureTransform(material, clearcoatRoughnessTexture.extensions, context);\n    }\n    if (clearcoatNormalTexture) {\n      material.clearCoatNormalTexture = textures[clearcoatNormalTexture.index];\n      MaterialParser._parseTextureTransform(material, clearcoatNormalTexture.extensions, context);\n    }\n  }\n}\n","import { PBRMaterial } from \"@galacean/engine-core\";\nimport { IKHRMaterialsIor } from \"./Schema\";\n\nimport { registerExtension } from \"../parser/Parser\";\nimport { ParserContext } from \"../parser/ParserContext\";\nimport { ExtensionParser } from \"./ExtensionParser\";\n\n@registerExtension(\"KHR_materials_ior\")\nclass KHR_materials_ior extends ExtensionParser {\n  parseEngineResource(schema: IKHRMaterialsIor, material: PBRMaterial, context: ParserContext): void {\n    const { ior = 1.5 } = schema;\n\n    material.ior = ior;\n  }\n}\n","import { PBRSpecularMaterial } from \"@galacean/engine-core\";\nimport { Color } from \"@galacean/engine-math\";\nimport { MaterialParser } from \"../parser/MaterialParser\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ParserContext } from \"../parser/ParserContext\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRMaterialsPbrSpecularGlossiness } from \"./Schema\";\n\n@registerExtension(\"KHR_materials_pbrSpecularGlossiness\")\nclass KHR_materials_pbrSpecularGlossiness extends ExtensionParser {\n  createEngineResource(schema: IKHRMaterialsPbrSpecularGlossiness, context: ParserContext): PBRSpecularMaterial {\n    const { engine, textures } = context.glTFResource;\n    const material = new PBRSpecularMaterial(engine);\n    const { diffuseFactor, diffuseTexture, specularFactor, glossinessFactor, specularGlossinessTexture } = schema;\n\n    if (diffuseFactor) {\n      material.baseColor = new Color(\n        Color.linearToGammaSpace(diffuseFactor[0]),\n        Color.linearToGammaSpace(diffuseFactor[1]),\n        Color.linearToGammaSpace(diffuseFactor[2]),\n        diffuseFactor[3]\n      );\n    }\n\n    if (diffuseTexture) {\n      material.baseTexture = textures[diffuseTexture.index];\n      MaterialParser._parseTextureTransform(material, diffuseTexture.extensions, context);\n    }\n\n    if (specularFactor) {\n      material.specularColor = new Color(\n        Color.linearToGammaSpace(specularFactor[0]),\n        Color.linearToGammaSpace(specularFactor[1]),\n        Color.linearToGammaSpace(specularFactor[2])\n      );\n    }\n\n    if (glossinessFactor !== undefined) {\n      material.glossiness = glossinessFactor;\n    }\n\n    if (specularGlossinessTexture) {\n      material.specularGlossinessTexture = textures[specularGlossinessTexture.index];\n      MaterialParser._parseTextureTransform(material, specularGlossinessTexture.extensions, context);\n    }\n\n    return material;\n  }\n}\n","import { UnlitMaterial } from \"@galacean/engine-core\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ParserContext } from \"../parser/ParserContext\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRMaterialsUnlit } from \"./Schema\";\n\n@registerExtension(\"KHR_materials_unlit\")\nclass KHR_materials_unlit extends ExtensionParser {\n  createEngineResource(schema: IKHRMaterialsUnlit, context: ParserContext): UnlitMaterial {\n    const { engine } = context.glTFResource;\n    const material = new UnlitMaterial(engine);\n\n    return material;\n  }\n}\n","import { Renderer } from \"@galacean/engine-core\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ParserContext } from \"../parser/ParserContext\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRMaterialVariants_Mapping } from \"./Schema\";\n\n@registerExtension(\"KHR_materials_variants\")\nclass KHR_materials_variants extends ExtensionParser {\n  parseEngineResource(schema: IKHRMaterialVariants_Mapping, renderer: Renderer, context: ParserContext): void {\n    const {\n      gltf: {\n        extensions: {\n          KHR_materials_variants: { variants: variantNames }\n        }\n      },\n      glTFResource\n    } = context;\n    const { mappings } = schema;\n\n    for (let i = 0; i < mappings.length; i++) {\n      const { material, variants } = mappings[i];\n      if (!glTFResource.variants) glTFResource.variants = [];\n      glTFResource.variants.push({\n        renderer,\n        material: glTFResource.materials[material],\n        variants: variants.map((index) => variantNames[index].name)\n      });\n    }\n  }\n}\n","import { registerExtension } from \"../parser/Parser\";\nimport { ExtensionParser } from \"./ExtensionParser\";\n\n@registerExtension(\"KHR_mesh_quantization\")\nclass KHR_mesh_quantization extends ExtensionParser {}\n","import { Logger, PBRBaseMaterial, UnlitMaterial } from \"@galacean/engine-core\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ParserContext } from \"../parser/ParserContext\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRTextureTransform } from \"./Schema\";\n\n@registerExtension(\"KHR_texture_transform\")\nclass KHR_texture_transform extends ExtensionParser {\n  parseEngineResource(\n    schema: IKHRTextureTransform,\n    material: PBRBaseMaterial | UnlitMaterial,\n    context: ParserContext\n  ): void {\n    const { offset, rotation, scale, texCoord } = schema;\n\n    if (offset) {\n      material.tilingOffset.z = offset[0];\n      material.tilingOffset.w = offset[1];\n    }\n\n    if (scale) {\n      material.tilingOffset.x = scale[0];\n      material.tilingOffset.y = scale[1];\n    }\n\n    if (rotation) {\n      Logger.warn(\"rotation in KHR_texture_transform is not supported now\");\n    }\n\n    if (texCoord) {\n      Logger.warn(\"texCoord in KHR_texture_transform is not supported now\");\n    }\n  }\n}\n","import { Material } from \"@galacean/engine-core\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ParserContext } from \"../parser/ParserContext\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IGalaceanMaterialRemap } from \"./Schema\";\n\n@registerExtension(\"OASIS_materials_remap\")\nclass GalaceanMaterialsRemap extends ExtensionParser {\n  createEngineResource(schema: IGalaceanMaterialRemap, context: ParserContext): Promise<Material> {\n    const { engine } = context.glTFResource;\n    // @ts-ignore\n    return engine.resourceManager.getResourceByRef<Material>(schema);\n  }\n}\n","import { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _create_for_of_iterator_helper_loose(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n    if (it) return (it = it.call(o)).next.bind(it);\n    // Fallback for engines without symbol support\n    if (Array.isArray(o) || (it = _unsupported_iterable_to_array(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n\n        var i = 0;\n\n        return function() {\n            if (i >= o.length) return { done: true };\n\n            return { done: false, value: o[i++] };\n        };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _create_for_of_iterator_helper_loose as _ };\n","import {\n  AnimationClip,\n  AnimationFloatArrayCurve,\n  AnimationQuaternionCurve,\n  AnimationVector3Curve,\n  AssetPromise,\n  Component,\n  Entity,\n  InterpolationType,\n  Keyframe,\n  SkinnedMeshRenderer,\n  Transform,\n  TypedArray\n} from \"@galacean/engine-core\";\nimport { Quaternion, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { AccessorType, AnimationChannelTargetPath, AnimationSamplerInterpolation, IAnimationChannel } from \"../Schema\";\nimport { Parser } from \"./Parser\";\nimport { ParserContext } from \"./ParserContext\";\n\nexport class AnimationParser extends Parser {\n  parse(context: ParserContext): AssetPromise<AnimationClip[]> {\n    const { gltf, buffers, glTFResource } = context;\n    const { entities } = glTFResource;\n    const { animations, accessors } = gltf;\n    if (!animations) {\n      return;\n    }\n    const animationClipsPromiseInfo = context.animationClipsPromiseInfo;\n\n    const animationClipCount = animations.length;\n    const animationClips = new Array<AnimationClip>(animationClipCount);\n    const animationsIndices = new Array<{\n      name: string;\n      index: number;\n    }>(animationClipCount);\n\n    for (let i = 0; i < animationClipCount; i++) {\n      const gltfAnimation = animations[i];\n      const { channels, samplers, name = `AnimationClip${i}` } = gltfAnimation;\n      const animationClip = new AnimationClip(name);\n      const sampleDataCollection = new Array<SampleData>();\n\n      let duration = -1;\n\n      // parse samplers\n      for (let j = 0, m = samplers.length; j < m; j++) {\n        const gltfSampler = samplers[j];\n        const inputAccessor = accessors[gltfSampler.input];\n        const outputAccessor = accessors[gltfSampler.output];\n\n        const input = GLTFUtil.getAccessorBuffer(context, gltf, inputAccessor).data;\n        let output = GLTFUtil.getAccessorBuffer(context, gltf, outputAccessor).data;\n\n        if (outputAccessor.normalized) {\n          const scale = GLTFUtil.getNormalizedComponentScale(outputAccessor.componentType);\n          const scaled = new Float32Array(output.length);\n          for (let k = 0, v = output.length; k < v; k++) {\n            scaled[k] = output[k] * scale;\n          }\n          output = scaled;\n        }\n\n        const outputStride = output.length / input.length;\n\n        const interpolation = gltfSampler.interpolation ?? AnimationSamplerInterpolation.Linear;\n        let samplerInterpolation: InterpolationType;\n        switch (interpolation) {\n          case AnimationSamplerInterpolation.CubicSpine:\n            samplerInterpolation = InterpolationType.CubicSpine;\n            break;\n          case AnimationSamplerInterpolation.Step:\n            samplerInterpolation = InterpolationType.Step;\n            break;\n          case AnimationSamplerInterpolation.Linear:\n            samplerInterpolation = InterpolationType.Linear;\n            break;\n        }\n\n        const maxTime = input[input.length - 1];\n        if (maxTime > duration) {\n          duration = maxTime;\n        }\n\n        sampleDataCollection.push({\n          type: outputAccessor.type,\n          interpolation: samplerInterpolation,\n          input,\n          output,\n          outputSize: outputStride\n        });\n      }\n\n      for (let j = 0, m = channels.length; j < m; j++) {\n        const gltfChannel = channels[j];\n        const { target } = gltfChannel;\n\n        const channelTargetEntity = entities[target.node];\n        let relativePath = \"\";\n        let entity = channelTargetEntity;\n        while (entity.parent) {\n          relativePath = relativePath === \"\" ? `${entity.name}` : `${entity.name}/${relativePath}`;\n          entity = entity.parent;\n        }\n\n        let ComponentType: new (entity: Entity) => Component;\n        let propertyName: string;\n        switch (target.path) {\n          case AnimationChannelTargetPath.TRANSLATION:\n            ComponentType = Transform;\n            propertyName = \"position\";\n            break;\n          case AnimationChannelTargetPath.ROTATION:\n            ComponentType = Transform;\n            propertyName = \"rotationQuaternion\";\n            break;\n          case AnimationChannelTargetPath.SCALE:\n            ComponentType = Transform;\n            propertyName = \"scale\";\n            break;\n          case AnimationChannelTargetPath.WEIGHTS:\n            ComponentType = SkinnedMeshRenderer;\n            propertyName = \"blendShapeWeights\";\n            break;\n          default:\n        }\n\n        const curve = this._addCurve(target.path, gltfChannel, sampleDataCollection);\n        animationClip.addCurveBinding(relativePath, ComponentType, propertyName, curve);\n      }\n\n      animationClips[i] = animationClip;\n      animationsIndices[i] = {\n        name,\n        index: i\n      };\n    }\n\n    glTFResource.animations = animationClips;\n    // @ts-ignore for editor\n    glTFResource._animationsIndices = animationsIndices;\n\n    animationClipsPromiseInfo.resolve(animationClips);\n    return animationClipsPromiseInfo.promise;\n  }\n\n  private _addCurve(\n    animationchannelTargetPath: AnimationChannelTargetPath,\n    gltfChannel: IAnimationChannel,\n    sampleDataCollection: SampleData[]\n  ) {\n    const sampleData = sampleDataCollection[gltfChannel.sampler];\n    const { input, output, outputSize } = sampleData;\n\n    switch (animationchannelTargetPath) {\n      case AnimationChannelTargetPath.TRANSLATION:\n      case AnimationChannelTargetPath.SCALE: {\n        const curve = new AnimationVector3Curve();\n        const interpolation = (curve.interpolation = sampleData.interpolation);\n\n        let offset = 0;\n        for (let i = 0, n = input.length; i < n; i++) {\n          const keyframe = new Keyframe<Vector3>();\n          keyframe.time = input[i];\n          if (interpolation === InterpolationType.CubicSpine) {\n            keyframe.inTangent = new Vector3(output[offset++], output[offset++], output[offset++]);\n            keyframe.value = new Vector3(output[offset++], output[offset++], output[offset++]);\n            keyframe.outTangent = new Vector3(output[offset++], output[offset++], output[offset++]);\n          } else {\n            keyframe.value = new Vector3(output[offset++], output[offset++], output[offset++]);\n          }\n          curve.addKey(keyframe);\n        }\n        return curve;\n      }\n      case AnimationChannelTargetPath.ROTATION: {\n        const curve = new AnimationQuaternionCurve();\n        const interpolation = (curve.interpolation = sampleData.interpolation);\n\n        let offset = 0;\n        for (let i = 0, n = input.length; i < n; i++) {\n          const keyframe = new Keyframe<Quaternion>();\n          keyframe.time = input[i];\n          if (interpolation === InterpolationType.CubicSpine) {\n            keyframe.inTangent = new Vector4(output[offset++], output[offset++], output[offset++], output[offset++]);\n            keyframe.value = new Quaternion(output[offset++], output[offset++], output[offset++], output[offset++]);\n            keyframe.outTangent = new Vector4(output[offset++], output[offset++], output[offset++], output[offset++]);\n          } else {\n            keyframe.value = new Quaternion(output[offset++], output[offset++], output[offset++], output[offset++]);\n          }\n          curve.addKey(keyframe);\n        }\n        return curve;\n      }\n      case AnimationChannelTargetPath.WEIGHTS: {\n        const curve = new AnimationFloatArrayCurve();\n        curve.interpolation = sampleData.interpolation;\n\n        let offset = 0;\n        for (let i = 0, n = input.length; i < n; i++) {\n          const keyframe = new Keyframe<Float32Array>();\n          keyframe.time = input[i];\n          if (curve.interpolation === InterpolationType.CubicSpine) {\n            keyframe.inTangent = Array.from(output.subarray(offset, offset + outputSize));\n            offset += outputSize;\n            keyframe.value = output.subarray(offset, offset + outputSize) as Float32Array;\n            offset += outputSize;\n            keyframe.outTangent = Array.from(output.subarray(offset, offset + outputSize));\n            offset += outputSize;\n          } else {\n            keyframe.value = output.subarray(offset, offset + outputSize) as Float32Array;\n            offset += outputSize;\n          }\n          curve.addKey(keyframe);\n        }\n        return curve;\n      }\n    }\n  }\n}\ninterface SampleData {\n  type: AccessorType;\n  input: TypedArray;\n  output: TypedArray;\n  interpolation: InterpolationType;\n  outputSize: number;\n}\n","import { AssetPromise, request } from \"@galacean/engine-core\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { IBuffer, IGLTF } from \"../Schema\";\nimport { Parser } from \"./Parser\";\nimport { ParserContext } from \"./ParserContext\";\n\nexport class BufferParser extends Parser {\n  parse(context: ParserContext): AssetPromise<void> {\n    const glTFResource = context.glTFResource;\n    const { url } = glTFResource;\n\n    if (this._isGLB(url)) {\n      return request<ArrayBuffer>(url, { type: \"arraybuffer\" })\n        .then(GLTFUtil.parseGLB)\n        .then(({ gltf, buffers }) => {\n          context.gltf = gltf;\n          context.buffers = buffers;\n        });\n    } else {\n      return request(url, {\n        type: \"json\"\n      }).then((gltf: IGLTF) => {\n        context.gltf = gltf;\n        return Promise.all(\n          gltf.buffers.map((buffer: IBuffer) => {\n            return request<ArrayBuffer>(GLTFUtil.parseRelativeUrl(url, buffer.uri), { type: \"arraybuffer\" });\n          })\n        ).then((buffers: ArrayBuffer[]) => {\n          context.buffers = buffers;\n        });\n      });\n    }\n  }\n\n  private _isGLB(url: string): boolean {\n    const index = url.lastIndexOf(\".\");\n    return url.substring(index + 1, index + 4) === \"glb\";\n  }\n}\n","import { Entity } from \"@galacean/engine-core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { Parser } from \"./Parser\";\nimport { ParserContext } from \"./ParserContext\";\n\nexport class EntityParser extends Parser {\n  /** @internal */\n  static _defaultName: String = \"_GLTF_ENTITY_\";\n\n  parse(context: ParserContext): void {\n    const {\n      glTFResource,\n      gltf: { nodes }\n    } = context;\n\n    const { engine } = glTFResource;\n\n    if (!nodes) return;\n\n    const entities: Entity[] = [];\n\n    for (let i = 0; i < nodes.length; i++) {\n      const gltfNode = nodes[i];\n      const { matrix, translation, rotation, scale } = gltfNode;\n      const entity = new Entity(engine, gltfNode.name || `${EntityParser._defaultName}${i}`);\n\n      const { transform } = entity;\n      if (matrix) {\n        const localMatrix = transform.localMatrix;\n        localMatrix.copyFromArray(matrix);\n        transform.localMatrix = localMatrix;\n      } else {\n        if (translation) {\n          transform.setPosition(translation[0], translation[1], translation[2]);\n        }\n        if (rotation) {\n          transform.setRotationQuaternion(rotation[0], rotation[1], rotation[2], rotation[3]);\n        }\n        if (scale) {\n          transform.setScale(scale[0], scale[1], scale[2]);\n        }\n      }\n\n      entities[i] = entity;\n    }\n\n    glTFResource.entities = entities;\n    this._buildEntityTree(context, glTFResource);\n    this._createSceneRoots(context, glTFResource);\n  }\n\n  private _buildEntityTree(context: ParserContext, glTFResource: GLTFResource): void {\n    const {\n      gltf: { nodes }\n    } = context;\n    const { entities } = glTFResource;\n\n    for (let i = 0; i < nodes.length; i++) {\n      const { children } = nodes[i];\n      const entity = entities[i];\n\n      if (children) {\n        for (let j = 0; j < children.length; j++) {\n          const childEntity = entities[children[j]];\n\n          entity.addChild(childEntity);\n        }\n      }\n    }\n  }\n\n  private _createSceneRoots(context: ParserContext, glTFResource: GLTFResource): void {\n    const { scene: sceneID = 0, scenes } = context.gltf;\n    const { engine, entities } = glTFResource;\n\n    if (!scenes) return;\n\n    const sceneRoots: Entity[] = [];\n\n    for (let i = 0; i < scenes.length; i++) {\n      const { nodes } = scenes[i];\n\n      if (!nodes) continue;\n\n      if (nodes.length === 1) {\n        sceneRoots[i] = entities[nodes[0]];\n      } else {\n        const rootEntity = new Entity(engine, \"GLTF_ROOT\");\n        for (let j = 0; j < nodes.length; j++) {\n          rootEntity.addChild(entities[nodes[j]]);\n        }\n        sceneRoots[i] = rootEntity;\n      }\n    }\n\n    glTFResource.sceneRoots = sceneRoots;\n    glTFResource.defaultSceneRoot = sceneRoots[sceneID];\n  }\n}\n","import {\n  AssetPromise,\n  BlendShape,\n  Buffer,\n  BufferBindFlag,\n  BufferUsage,\n  EngineObject,\n  ModelMesh,\n  TypedArray,\n  VertexElement\n} from \"@galacean/engine-core\";\nimport { Vector3, Vector4 } from \"@galacean/engine-math\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { AccessorType, IGLTF, IMesh, IMeshPrimitive } from \"../Schema\";\nimport { Parser } from \"./Parser\";\nimport { ParserContext } from \"./ParserContext\";\n\nexport class MeshParser extends Parser {\n  private static _tempVector3 = new Vector3();\n\n  parse(context: ParserContext) {\n    const { gltf, buffers, glTFResource } = context;\n    const { engine } = glTFResource;\n    if (!gltf.meshes) return;\n\n    const meshesPromiseInfo = context.meshesPromiseInfo;\n    const meshPromises: Promise<ModelMesh[]>[] = [];\n\n    for (let i = 0; i < gltf.meshes.length; i++) {\n      const gltfMesh = gltf.meshes[i];\n      const primitivePromises: Promise<ModelMesh>[] = [];\n\n      for (let j = 0; j < gltfMesh.primitives.length; j++) {\n        const gltfPrimitive = gltfMesh.primitives[j];\n        const { extensions = {} } = gltfPrimitive;\n        const { KHR_draco_mesh_compression } = extensions;\n\n        primitivePromises[j] = new Promise((resolve) => {\n          const mesh = new ModelMesh(engine, gltfMesh.name || j + \"\");\n\n          if (KHR_draco_mesh_compression) {\n            (<Promise<EngineObject>>(\n              Parser.createEngineResource(\n                \"KHR_draco_mesh_compression\",\n                KHR_draco_mesh_compression,\n                context,\n                gltfPrimitive\n              )\n            ))\n              .then((decodedGeometry: any) => {\n                return this._parseMeshFromGLTFPrimitiveDraco(\n                  mesh,\n                  gltfMesh,\n                  gltfPrimitive,\n                  gltf,\n                  (attributeSemantic) => {\n                    for (let j = 0; j < decodedGeometry.attributes.length; j++) {\n                      if (decodedGeometry.attributes[j].name === attributeSemantic) {\n                        return decodedGeometry.attributes[j].array;\n                      }\n                    }\n                    return null;\n                  },\n                  (attributeSemantic, shapeIndex) => {\n                    throw \"BlendShape animation is not supported when using draco.\";\n                  },\n                  () => {\n                    return decodedGeometry.index.array;\n                  },\n                  context.keepMeshData\n                );\n              })\n              .then(resolve);\n          } else {\n            this._parseMeshFromGLTFPrimitive(\n              context,\n              mesh,\n              gltfMesh,\n              gltfPrimitive,\n              gltf,\n              (attributeSemantic) => {\n                return null;\n              },\n              (attributeName, shapeIndex) => {\n                const shapeAccessorIdx = gltfPrimitive.targets[shapeIndex];\n                const attributeAccessorIdx = shapeAccessorIdx[attributeName];\n                if (attributeAccessorIdx) {\n                  const accessor = gltf.accessors[attributeAccessorIdx];\n                  return GLTFUtil.getAccessorData(gltf, accessor, buffers);\n                } else {\n                  return null;\n                }\n              },\n              () => {\n                const indexAccessor = gltf.accessors[gltfPrimitive.indices];\n                return GLTFUtil.getAccessorData(gltf, indexAccessor, buffers);\n              },\n              context.keepMeshData\n            ).then(resolve);\n          }\n        });\n      }\n\n      meshPromises[i] = Promise.all(primitivePromises);\n    }\n\n    AssetPromise.all(meshPromises)\n      .then((meshes: ModelMesh[][]) => {\n        glTFResource.meshes = meshes;\n        meshesPromiseInfo.resolve(meshes);\n      })\n      .catch(meshesPromiseInfo.reject);\n\n    return meshesPromiseInfo.promise;\n  }\n\n  private _parseMeshFromGLTFPrimitive(\n    context: ParserContext,\n    mesh: ModelMesh,\n    gltfMesh: IMesh,\n    gltfPrimitive: IMeshPrimitive,\n    gltf: IGLTF,\n    getVertexBufferData: (semantic: string) => TypedArray,\n    getBlendShapeData: (semantic: string, shapeIndex: number) => TypedArray,\n    getIndexBufferData: () => TypedArray,\n    keepMeshData: boolean\n  ): Promise<ModelMesh> {\n    const { accessors } = gltf;\n    const { buffers } = context;\n    const { attributes, targets, indices, mode } = gltfPrimitive;\n\n    const engine = mesh.engine;\n    const vertexElements = new Array<VertexElement>();\n\n    let vertexCount: number;\n    let bufferBindIndex = 0;\n    let positions: Vector3[];\n    let boneIndices: Vector4[];\n    let boneWeights: Vector4[];\n    if (keepMeshData) {\n      positions = new Array<Vector3>(vertexCount);\n      boneIndices = new Array<Vector4>(vertexCount);\n      boneWeights = new Array<Vector4>(vertexCount);\n    }\n\n    for (const attribute in attributes) {\n      const accessor = accessors[attributes[attribute]];\n      const accessorBuffer = GLTFUtil.getAccessorBuffer(context, gltf, accessor);\n\n      const dataElementSize = GLTFUtil.getAccessorTypeSize(accessor.type);\n      const accessorCount = accessor.count;\n      const vertices = accessorBuffer.data;\n\n      let vertexElement: VertexElement;\n      const meshId = mesh.instanceId;\n      const vertexBindingInfos = accessorBuffer.vertexBindingInfos;\n      const elementNormalized = accessor.normalized;\n      const elementFormat = GLTFUtil.getElementFormat(accessor.componentType, dataElementSize, elementNormalized);\n\n      let scaleFactor: number;\n      elementNormalized && (scaleFactor = GLTFUtil.getNormalizedComponentScale(accessor.componentType));\n\n      let elementOffset: number;\n      if (accessorBuffer.interleaved) {\n        const byteOffset = accessor.byteOffset || 0;\n        const stride = accessorBuffer.stride;\n        elementOffset = byteOffset % stride;\n        if (vertexBindingInfos[meshId] === undefined) {\n          vertexElement = new VertexElement(attribute, elementOffset, elementFormat, bufferBindIndex);\n\n          let vertexBuffer = accessorBuffer.vertexBuffer;\n          if (!vertexBuffer) {\n            vertexBuffer = new Buffer(engine, BufferBindFlag.VertexBuffer, vertices.byteLength, BufferUsage.Static);\n            vertexBuffer.setData(vertices);\n            accessorBuffer.vertexBuffer = vertexBuffer;\n          }\n          mesh.setVertexBufferBinding(vertexBuffer, stride, bufferBindIndex);\n          vertexBindingInfos[meshId] = bufferBindIndex++;\n        } else {\n          vertexElement = new VertexElement(attribute, elementOffset, elementFormat, vertexBindingInfos[meshId]);\n        }\n      } else {\n        elementOffset = 0;\n        vertexElement = new VertexElement(attribute, elementOffset, elementFormat, bufferBindIndex);\n\n        const vertexBuffer = new Buffer(engine, BufferBindFlag.VertexBuffer, vertices.byteLength, BufferUsage.Static);\n        vertexBuffer.setData(vertices);\n        mesh.setVertexBufferBinding(vertexBuffer, accessorBuffer.stride, bufferBindIndex);\n        vertexBindingInfos[meshId] = bufferBindIndex++;\n      }\n      vertexElements.push(vertexElement);\n\n      if (attribute === \"POSITION\") {\n        vertexCount = accessorCount;\n\n        const { min, max } = mesh.bounds;\n        if (accessor.min && accessor.max) {\n          min.copyFromArray(accessor.min);\n          max.copyFromArray(accessor.max);\n\n          if (keepMeshData) {\n            const baseOffset = elementOffset / vertices.BYTES_PER_ELEMENT;\n            const stride = vertices.length / accessorCount;\n            for (let j = 0; j < accessorCount; j++) {\n              const offset = baseOffset + j * stride;\n              const position = new Vector3(vertices[offset], vertices[offset + 1], vertices[offset + 2]);\n              elementNormalized && position.scale(scaleFactor);\n              positions[j] = position;\n            }\n          }\n        } else {\n          const position = MeshParser._tempVector3;\n          min.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n          max.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n          const baseOffset = elementOffset / vertices.BYTES_PER_ELEMENT;\n          const stride = vertices.length / accessorCount;\n          for (let j = 0; j < accessorCount; j++) {\n            const offset = baseOffset + j * stride;\n            position.copyFromArray(vertices, offset);\n            Vector3.min(min, position, min);\n            Vector3.max(max, position, max);\n\n            if (keepMeshData) {\n              const clonePosition = position.clone();\n              elementNormalized && clonePosition.scale(scaleFactor);\n              positions[j] = clonePosition;\n            }\n          }\n        }\n        if (elementNormalized) {\n          min.scale(scaleFactor);\n          max.scale(scaleFactor);\n        }\n      } else if (attribute === \"JOINTS_0\" && keepMeshData) {\n        const baseOffset = elementOffset / vertices.BYTES_PER_ELEMENT;\n        const stride = vertices.length / accessorCount;\n        for (let j = 0; j < accessorCount; j++) {\n          const offset = baseOffset + j * stride;\n          const boneIndex = new Vector4(\n            vertices[offset],\n            vertices[offset + 1],\n            vertices[offset + 2],\n            vertices[offset + 3]\n          );\n          elementNormalized && boneIndex.scale(scaleFactor);\n          boneIndices[j] = boneIndex;\n        }\n      } else if (attribute === \"WEIGHTS_0\" && keepMeshData) {\n        const baseOffset = elementOffset / vertices.BYTES_PER_ELEMENT;\n        const stride = vertices.length / accessorCount;\n        for (let j = 0; j < accessorCount; j++) {\n          const offset = baseOffset + j * stride;\n          const boneWeight = new Vector4(\n            vertices[offset],\n            vertices[offset + 1],\n            vertices[offset + 2],\n            vertices[offset + 3]\n          );\n          elementNormalized && boneWeight.scale(scaleFactor);\n          boneWeights[j] = boneWeight;\n        }\n      }\n    }\n    mesh.setVertexElements(vertexElements);\n\n    // Indices\n    if (indices !== undefined) {\n      const indexAccessor = gltf.accessors[indices];\n      const indexData = getIndexBufferData();\n      mesh.setIndices(<Uint8Array | Uint16Array | Uint32Array>indexData);\n      mesh.addSubMesh(0, indexAccessor.count, mode);\n    } else {\n      mesh.addSubMesh(0, vertexCount, mode);\n    }\n\n    // BlendShapes\n    targets && this._createBlendShape(mesh, gltfMesh, targets, getBlendShapeData);\n\n    mesh.uploadData(!keepMeshData);\n\n    //@ts-ignore\n    mesh._positions = positions;\n    //@ts-ignore\n    mesh._boneIndices = boneIndices;\n    //@ts-ignore\n    mesh._boneWeights = boneWeights;\n\n    return Promise.resolve(mesh);\n  }\n\n  private _createBlendShape(\n    mesh: ModelMesh,\n    glTFMesh: IMesh,\n    glTFTargets: {\n      [name: string]: number;\n    }[],\n    getBlendShapeData: (semantic: string, shapeIndex: number) => TypedArray\n  ): void {\n    const blendShapeNames = glTFMesh.extras ? glTFMesh.extras.targetNames : null;\n\n    for (let i = 0, n = glTFTargets.length; i < n; i++) {\n      const name = blendShapeNames ? blendShapeNames[i] : `blendShape${i}`;\n      const deltaPosBuffer = getBlendShapeData(\"POSITION\", i);\n      const deltaNorBuffer = getBlendShapeData(\"NORMAL\", i);\n      const deltaTanBuffer = getBlendShapeData(\"TANGENT\", i);\n      const deltaPositions = deltaPosBuffer ? GLTFUtil.floatBufferToVector3Array(<Float32Array>deltaPosBuffer) : null;\n      const deltaNormals = deltaNorBuffer ? GLTFUtil.floatBufferToVector3Array(<Float32Array>deltaNorBuffer) : null;\n      const deltaTangents = deltaTanBuffer ? GLTFUtil.floatBufferToVector3Array(<Float32Array>deltaTanBuffer) : null;\n\n      const blendShape = new BlendShape(name);\n      blendShape.addFrame(1.0, deltaPositions, deltaNormals, deltaTangents);\n      mesh.addBlendShape(blendShape);\n    }\n  }\n\n  /**\n   * @deprecated\n   */\n  private _parseMeshFromGLTFPrimitiveDraco(\n    mesh: ModelMesh,\n    gltfMesh: IMesh,\n    gltfPrimitive: IMeshPrimitive,\n    gltf: IGLTF,\n    getVertexBufferData: (semantic: string) => TypedArray,\n    getBlendShapeData: (semantic: string, shapeIndex: number) => TypedArray,\n    getIndexBufferData: () => TypedArray,\n    keepMeshData: boolean\n  ): Promise<ModelMesh> {\n    const { attributes, targets, indices, mode } = gltfPrimitive;\n    let vertexCount: number;\n\n    const { accessors } = gltf;\n    const accessor = accessors[attributes[\"POSITION\"]];\n    const positionBuffer = <Float32Array>getVertexBufferData(\"POSITION\");\n    const positions = GLTFUtil.floatBufferToVector3Array(positionBuffer);\n    mesh.setPositions(positions);\n\n    const { bounds } = mesh;\n    vertexCount = accessor.count;\n    if (accessor.min && accessor.max) {\n      bounds.min.copyFromArray(accessor.min);\n      bounds.max.copyFromArray(accessor.max);\n    } else {\n      const position = MeshParser._tempVector3;\n      const { min, max } = bounds;\n\n      min.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n      max.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n      const stride = positionBuffer.length / vertexCount;\n      for (let j = 0; j < vertexCount; j++) {\n        const offset = j * stride;\n        position.copyFromArray(positionBuffer, offset);\n        Vector3.min(min, position, min);\n        Vector3.max(max, position, max);\n      }\n    }\n\n    for (const attributeSemantic in attributes) {\n      if (attributeSemantic === \"POSITION\") {\n        continue;\n      }\n      const bufferData = getVertexBufferData(attributeSemantic);\n      switch (attributeSemantic) {\n        case \"NORMAL\":\n          const normals = GLTFUtil.floatBufferToVector3Array(<Float32Array>bufferData);\n          mesh.setNormals(normals);\n          break;\n        case \"TEXCOORD_0\":\n          const texturecoords = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords, 0);\n          break;\n        case \"TEXCOORD_1\":\n          const texturecoords1 = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords1, 1);\n          break;\n        case \"TEXCOORD_2\":\n          const texturecoords2 = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords2, 2);\n          break;\n        case \"TEXCOORD_3\":\n          const texturecoords3 = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords3, 3);\n          break;\n        case \"TEXCOORD_4\":\n          const texturecoords4 = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords4, 4);\n          break;\n        case \"TEXCOORD_5\":\n          const texturecoords5 = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords5, 5);\n          break;\n        case \"TEXCOORD_6\":\n          const texturecoords6 = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords6, 6);\n          break;\n        case \"TEXCOORD_7\":\n          const texturecoords7 = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords7, 7);\n          break;\n        case \"COLOR_0\":\n          const colors = GLTFUtil.floatBufferToColorArray(\n            <Float32Array>bufferData,\n            accessors[attributes[\"COLOR_0\"]].type === AccessorType.VEC3\n          );\n          mesh.setColors(colors);\n          break;\n        case \"TANGENT\":\n          const tangents = GLTFUtil.floatBufferToVector4Array(<Float32Array>bufferData);\n          mesh.setTangents(tangents);\n          break;\n\n        case \"JOINTS_0\":\n          const joints = GLTFUtil.floatBufferToVector4Array(<Float32Array>bufferData);\n          mesh.setBoneIndices(joints);\n          break;\n        case \"WEIGHTS_0\":\n          const weights = GLTFUtil.floatBufferToVector4Array(<Float32Array>bufferData);\n          mesh.setBoneWeights(weights);\n          break;\n        default:\n          // console.warn(`Unsupport attribute semantic ${attributeSemantic}.`);\n          break;\n      }\n    }\n\n    // Indices\n    if (indices !== undefined) {\n      const indexAccessor = gltf.accessors[indices];\n      const indexData = getIndexBufferData();\n      mesh.setIndices(<Uint8Array | Uint16Array | Uint32Array>indexData);\n      mesh.addSubMesh(0, indexAccessor.count, mode);\n    } else {\n      mesh.addSubMesh(0, vertexCount, mode);\n    }\n\n    // BlendShapes\n    targets && this._createBlendShape(mesh, gltfMesh, targets, getBlendShapeData);\n\n    mesh.uploadData(!keepMeshData);\n    return Promise.resolve(mesh);\n  }\n}\n","import {\n  Animator,\n  AnimatorController,\n  AnimatorControllerLayer,\n  AnimatorStateMachine,\n  AssetPromise,\n  BlinnPhongMaterial,\n  Camera,\n  Engine,\n  Entity,\n  MeshRenderer,\n  SkinnedMeshRenderer\n} from \"@galacean/engine-core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { CameraType, ICamera, INode } from \"../Schema\";\nimport { IKHRLightsPunctual, IKHRLightsPunctual_LightNode } from \"../extensions/Schema\";\nimport { Parser } from \"./Parser\";\nimport { ParserContext } from \"./ParserContext\";\n\nexport class SceneParser extends Parser {\n  private static _defaultMaterial: BlinnPhongMaterial;\n\n  private static _getDefaultMaterial(engine: Engine): BlinnPhongMaterial {\n    if (!SceneParser._defaultMaterial) {\n      SceneParser._defaultMaterial = new BlinnPhongMaterial(engine);\n    }\n\n    return SceneParser._defaultMaterial;\n  }\n\n  parse(context: ParserContext) {\n    const { glTFResource, gltf } = context;\n    const { entities } = glTFResource;\n    const { nodes, cameras: gltfCameras } = gltf;\n\n    if (!nodes) return;\n    const defaultSceneRootPromiseInfo = context.defaultSceneRootPromiseInfo;\n\n    const promises = [];\n\n    for (let i = 0; i < nodes.length; i++) {\n      const gltfNode = nodes[i];\n      const { camera: cameraID, mesh: meshID, extensions = {} } = gltfNode;\n      const KHR_lights_punctual = <IKHRLightsPunctual_LightNode>extensions.KHR_lights_punctual;\n      const entity = entities[i];\n\n      if (cameraID !== undefined) {\n        this._createCamera(glTFResource, gltfCameras[cameraID], entity);\n      }\n\n      if (meshID !== undefined) {\n        promises.push(this._createRenderer(context, gltfNode, entity));\n      }\n\n      if (KHR_lights_punctual) {\n        const lightIndex = KHR_lights_punctual.light;\n        const lights = (gltf.extensions.KHR_lights_punctual as IKHRLightsPunctual).lights;\n\n        Parser.parseEngineResource(\"KHR_lights_punctual\", lights[lightIndex], entity, context);\n      }\n    }\n\n    if (glTFResource.defaultSceneRoot) {\n      this._createAnimator(context);\n    }\n\n    gltf.extensions && delete gltf.extensions[\"OASIS_materials_remap\"];\n\n    AssetPromise.all(promises)\n      .then(() => defaultSceneRootPromiseInfo.resolve(glTFResource.defaultSceneRoot))\n      .catch(defaultSceneRootPromiseInfo.reject);\n\n    return defaultSceneRootPromiseInfo.promise;\n  }\n\n  private _createCamera(context: GLTFResource, cameraSchema: ICamera, entity: Entity): void {\n    const { orthographic, perspective, type } = cameraSchema;\n    const camera = entity.addComponent(Camera);\n\n    if (type === CameraType.ORTHOGRAPHIC) {\n      const { xmag, ymag, zfar, znear } = orthographic;\n\n      camera.isOrthographic = true;\n\n      if (znear !== undefined) {\n        camera.nearClipPlane = znear;\n      }\n      if (zfar !== undefined) {\n        camera.farClipPlane = zfar;\n      }\n\n      camera.orthographicSize = Math.max(ymag ?? 0, xmag ?? 0) / 2;\n    } else if (type === CameraType.PERSPECTIVE) {\n      const { aspectRatio, yfov, zfar, znear } = perspective;\n\n      if (aspectRatio !== undefined) {\n        camera.aspectRatio = aspectRatio;\n      }\n      if (yfov !== undefined) {\n        camera.fieldOfView = (yfov * 180) / Math.PI;\n      }\n      if (zfar !== undefined) {\n        camera.farClipPlane = zfar;\n      }\n      if (znear !== undefined) {\n        camera.nearClipPlane = znear;\n      }\n    }\n\n    if (!context.cameras) context.cameras = [];\n    context.cameras.push(camera);\n    // @todo: use engine camera by default\n    camera.enabled = false;\n  }\n\n  private _createRenderer(context: ParserContext, gltfNode: INode, entity: Entity) {\n    const { glTFResource, gltf } = context;\n    const { meshes: gltfMeshes } = gltf;\n\n    const { engine, meshes, materials, skins } = glTFResource;\n    const { mesh: meshID, skin: skinID } = gltfNode;\n    const glTFMesh = gltfMeshes[meshID];\n    const gltfMeshPrimitives = glTFMesh.primitives;\n    const blendShapeWeights = gltfNode.weights || glTFMesh.weights;\n\n    const promises = [];\n    for (let i = 0; i < gltfMeshPrimitives.length; i++) {\n      const mesh = meshes[meshID][i];\n      let renderer: MeshRenderer | SkinnedMeshRenderer;\n\n      if (skinID !== undefined || blendShapeWeights) {\n        context.hasSkinned = true;\n        const skinRenderer = entity.addComponent(SkinnedMeshRenderer);\n        skinRenderer.mesh = mesh;\n        if (skinID !== undefined) {\n          skinRenderer.skin = skins[skinID];\n        }\n        if (blendShapeWeights) {\n          skinRenderer.blendShapeWeights = new Float32Array(blendShapeWeights);\n        }\n        renderer = skinRenderer;\n      } else {\n        renderer = entity.addComponent(MeshRenderer);\n        renderer.mesh = mesh;\n      }\n\n      const materialIndex = gltfMeshPrimitives[i].material;\n      const remapMaterials = gltf.extensions && gltf.extensions[\"OASIS_materials_remap\"];\n      if (remapMaterials && remapMaterials[materialIndex]) {\n        promises.push(\n          remapMaterials[materialIndex].then((mtl) => {\n            renderer.setMaterial(mtl);\n          })\n        );\n      } else {\n        const material = materials?.[materialIndex] || SceneParser._getDefaultMaterial(engine);\n        renderer.setMaterial(material);\n\n        // Enable vertex color if mesh has COLOR_0 vertex element\n        mesh.vertexElements.forEach((element) => {\n          if (element.semantic === \"COLOR_0\") {\n            renderer.enableVertexColor = true;\n          }\n        });\n      }\n\n      const { extensions = {} } = gltfMeshPrimitives[i];\n      const { KHR_materials_variants } = extensions;\n      if (KHR_materials_variants) {\n        Parser.parseEngineResource(\"KHR_materials_variants\", KHR_materials_variants, renderer, context);\n      }\n    }\n    return Promise.all(promises);\n  }\n\n  private _createAnimator(context: ParserContext): void {\n    if (!context.hasSkinned && !context.glTFResource.animations) {\n      return;\n    }\n\n    const { defaultSceneRoot, animations } = context.glTFResource;\n    const animator = defaultSceneRoot.addComponent(Animator);\n    const animatorController = new AnimatorController();\n    const layer = new AnimatorControllerLayer(\"layer\");\n    const animatorStateMachine = new AnimatorStateMachine();\n    animatorController.addLayer(layer);\n    animator.animatorController = animatorController;\n    layer.stateMachine = animatorStateMachine;\n    if (animations) {\n      for (let i = 0; i < animations.length; i++) {\n        const animationClip = animations[i];\n        const name = animationClip.name;\n        const uniqueName = animatorStateMachine.makeUniqueStateName(name);\n        if (uniqueName !== name) {\n          console.warn(`AnimatorState name is existed, name: ${name} reset to ${uniqueName}`);\n        }\n        const animatorState = animatorStateMachine.addState(uniqueName);\n        animatorState.clip = animationClip;\n      }\n    }\n  }\n}\n","import { Entity, Skin } from \"@galacean/engine-core\";\nimport { Matrix } from \"@galacean/engine-math\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { Parser } from \"./Parser\";\nimport { ParserContext } from \"./ParserContext\";\n\nexport class SkinParser extends Parser {\n  parse(context: ParserContext): void {\n    const { glTFResource, gltf, buffers } = context;\n    const { entities } = glTFResource;\n    const gltfSkins = gltf.skins;\n\n    if (!gltfSkins) return;\n\n    const count = gltfSkins.length;\n    const skins = new Array<Skin>(count);\n\n    for (let i = 0; i < count; i++) {\n      const { inverseBindMatrices, skeleton, joints, name = `SKIN_${i}` } = gltfSkins[i];\n      const jointCount = joints.length;\n\n      const skin = new Skin(name);\n      skin.inverseBindMatrices.length = jointCount;\n\n      // parse IBM\n      const accessor = gltf.accessors[inverseBindMatrices];\n      const buffer = GLTFUtil.getAccessorBuffer(context, gltf, accessor).data;\n      for (let i = 0; i < jointCount; i++) {\n        const inverseBindMatrix = new Matrix();\n        inverseBindMatrix.copyFromArray(buffer, i * 16);\n        skin.inverseBindMatrices[i] = inverseBindMatrix;\n      }\n\n      // get joints\n      for (let i = 0; i < jointCount; i++) {\n        const jointIndex = joints[i];\n        const jointName = entities[jointIndex].name;\n        skin.joints[i] = jointName;\n        // @todo Temporary solution, but it can alleviate the current BUG, and the skinning data mechanism of SkinnedMeshRenderer will be completely refactored in the future\n        for (let j = entities.length - 1; j >= 0; j--) {\n          if (jointIndex !== j && entities[j].name === jointName) {\n            entities[j].name = `${jointName}_${j}`;\n          }\n        }\n      }\n\n      // get skeleton\n      if (skeleton !== undefined) {\n        skin.skeleton = entities[skeleton].name;\n      } else {\n        const rootBone = this._findSkeletonRootBone(joints, entities);\n        if (rootBone) {\n          skin.skeleton = rootBone.name;\n        } else {\n          throw \"Failed to find skeleton root bone.\";\n        }\n      }\n\n      skins[i] = skin;\n    }\n\n    glTFResource.skins = skins;\n  }\n\n  private _findSkeletonRootBone(joints: number[], entities: Entity[]): Entity {\n    const paths = <Record<number, Entity[]>>{};\n    for (const index of joints) {\n      const path = new Array<Entity>();\n      let entity = entities[index];\n      while (entity) {\n        path.unshift(entity);\n        entity = entity.parent;\n      }\n      paths[index] = path;\n    }\n\n    let rootNode = <Entity>null;\n    for (let i = 0; ; i++) {\n      let path = paths[joints[0]];\n      if (i >= path.length) {\n        return rootNode;\n      }\n\n      const entity = path[i];\n      for (let j = 1, m = joints.length; j < m; j++) {\n        path = paths[joints[j]];\n        if (i >= path.length || entity !== path[i]) {\n          return rootNode;\n        }\n      }\n\n      rootNode = entity;\n    }\n  }\n}\n","import { AssetPromise, AssetType, Texture2D, TextureFilterMode, TextureWrapMode } from \"@galacean/engine-core\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { ISampler, TextureMagFilter, TextureMinFilter, TextureWrapMode as GLTFTextureWrapMode } from \"../Schema\";\nimport { Parser } from \"./Parser\";\nimport { ParserContext } from \"./ParserContext\";\n\nexport class TextureParser extends Parser {\n  private static _wrapMap = {\n    [GLTFTextureWrapMode.CLAMP_TO_EDGE]: TextureWrapMode.Clamp,\n    [GLTFTextureWrapMode.MIRRORED_REPEAT]: TextureWrapMode.Mirror,\n    [GLTFTextureWrapMode.REPEAT]: TextureWrapMode.Repeat\n  };\n\n  parse(context: ParserContext): AssetPromise<Texture2D[]> {\n    const { glTFResource, gltf, buffers } = context;\n    const { engine, url } = glTFResource;\n\n    if (gltf.textures) {\n      const texturesPromiseInfo = context.texturesPromiseInfo;\n      AssetPromise.all(\n        gltf.textures.map(({ sampler, source = 0, name: textureName }, index) => {\n          const { uri, bufferView: bufferViewIndex, mimeType, name: imageName } = gltf.images[source];\n          if (uri) {\n            // TODO: support ktx extension https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_texture_basisu/README.md\n            const index = uri.lastIndexOf(\".\");\n            const ext = uri.substring(index + 1);\n            const type = ext.startsWith(\"ktx\") ? AssetType.KTX : AssetType.Texture2D;\n            return engine.resourceManager\n              .load<Texture2D>({\n                url: GLTFUtil.parseRelativeUrl(url, uri),\n                type: type\n              })\n              .then((texture) => {\n                if (!texture.name) {\n                  texture.name = textureName || imageName || `texture_${index}`;\n                }\n                if (sampler !== undefined) {\n                  this._parseSampler(texture, gltf.samplers[sampler]);\n                }\n                return texture;\n              });\n          } else {\n            const bufferView = gltf.bufferViews[bufferViewIndex];\n            const bufferViewData = GLTFUtil.getBufferViewData(bufferView, buffers);\n            return GLTFUtil.loadImageBuffer(bufferViewData, mimeType).then((image) => {\n              const texture = new Texture2D(engine, image.width, image.height);\n              texture.setImageSource(image);\n              texture.generateMipmaps();\n              texture.name = textureName || imageName || `texture_${index}`;\n              if (sampler !== undefined) {\n                this._parseSampler(texture, gltf.samplers[sampler]);\n              }\n              return texture;\n            });\n          }\n        })\n      )\n        .then((textures: Texture2D[]) => {\n          glTFResource.textures = textures;\n          texturesPromiseInfo.resolve(textures);\n        })\n        .catch(texturesPromiseInfo.reject);\n      return texturesPromiseInfo.promise;\n    }\n  }\n\n  private _parseSampler(texture: Texture2D, sampler: ISampler): void {\n    const { magFilter, minFilter, wrapS, wrapT } = sampler;\n\n    if (magFilter || minFilter) {\n      if (magFilter === TextureMagFilter.NEAREST) {\n        texture.filterMode = TextureFilterMode.Point;\n      } else if (minFilter <= TextureMinFilter.LINEAR_MIPMAP_NEAREST) {\n        texture.filterMode = TextureFilterMode.Bilinear;\n      } else {\n        texture.filterMode = TextureFilterMode.Trilinear;\n      }\n    }\n\n    if (wrapS) {\n      texture.wrapModeU = TextureParser._wrapMap[wrapS];\n    }\n\n    if (wrapT) {\n      texture.wrapModeV = TextureParser._wrapMap[wrapT];\n    }\n  }\n}\n","import { Logger } from \"@galacean/engine-core\";\nimport { Parser } from \"./Parser\";\nimport { ParserContext } from \"./ParserContext\";\n\nexport class Validator extends Parser {\n  parse(context: ParserContext): void {\n    const {\n      asset: { version },\n      extensionsUsed,\n      extensionsRequired\n    } = context.gltf;\n\n    const gltfVersion = Number(version);\n    if (!(gltfVersion >= 2 && gltfVersion < 3)) {\n      throw \"Only support gltf 2.x.\";\n    }\n\n    if (extensionsUsed) {\n      Logger.info(\"extensionsUsed: \", extensionsUsed);\n      for (let i = 0; i < extensionsUsed.length; i++) {\n        if (!Parser.hasExtensionParser(extensionsUsed[i])) {\n          Logger.warn(`Extension ${extensionsUsed[i]} is not implemented, you can customize this extension in gltf.`);\n        }\n      }\n    }\n\n    if (extensionsRequired) {\n      Logger.info(`extensionsRequired: ${extensionsRequired}`);\n      for (let i = 0; i < extensionsRequired.length; i++) {\n        const extensionRequired = extensionsRequired[i];\n\n        if (!Parser.hasExtensionParser(extensionRequired)) {\n          Logger.error(`GLTF parser has not supported required extension ${extensionRequired}.`);\n        } else {\n          Parser.initialize(extensionRequired);\n        }\n      }\n    }\n  }\n}\n","import { AssetPromise } from \"@galacean/engine-core\";\nimport { GLTFResource } from \"./GLTFResource\";\nimport { AnimationParser } from \"./parser/AnimationParser\";\nimport { BufferParser } from \"./parser/BufferParser\";\nimport { EntityParser } from \"./parser/EntityParser\";\nimport { MaterialParser } from \"./parser/MaterialParser\";\nimport { MeshParser } from \"./parser/MeshParser\";\nimport { Parser } from \"./parser/Parser\";\nimport { ParserContext } from \"./parser/ParserContext\";\nimport { SceneParser } from \"./parser/SceneParser\";\nimport { SkinParser } from \"./parser/SkinParser\";\nimport { TextureParser } from \"./parser/TextureParser\";\nimport { Validator } from \"./parser/Validator\";\n\nexport class GLTFParser {\n  static defaultPipeline = new GLTFParser([\n    BufferParser,\n    Validator,\n    TextureParser,\n    MaterialParser,\n    MeshParser,\n    EntityParser,\n    SkinParser,\n    AnimationParser,\n    SceneParser\n  ]);\n\n  private _pipes: Parser[] = [];\n\n  private constructor(pipes: (new () => Parser)[]) {\n    pipes.forEach((pipe: new () => Parser, index: number) => {\n      this._pipes[index] = new pipe();\n    });\n  }\n\n  parse(context: ParserContext): AssetPromise<GLTFResource> {\n    const glTFResource = context.glTFResource;\n    let lastPipe;\n\n    return new AssetPromise<GLTFResource>((resolve, reject) => {\n      this._pipes.forEach((parser: Parser) => {\n        if (lastPipe) {\n          lastPipe = lastPipe.then(() => {\n            return parser.parse(context);\n          });\n          if (lastPipe.cancel) {\n            context.chainPromises.push(lastPipe);\n          }\n        } else {\n          lastPipe = parser.parse(context);\n        }\n      });\n\n      if (lastPipe) {\n        lastPipe\n          .then(() => {\n            resolve(glTFResource);\n          })\n          .catch(reject);\n      }\n    });\n  }\n}\n","import {\n  AnimationClip,\n  Camera,\n  Engine,\n  EngineObject,\n  Entity,\n  Light,\n  Material,\n  ModelMesh,\n  Renderer,\n  Skin,\n  Texture2D\n} from \"@galacean/engine-core\";\n\n/**\n * Product after GLTF parser, usually, `defaultSceneRoot` is only needed to use.\n */\nexport class GLTFResource extends EngineObject {\n  /** GLTF file url. */\n  url: string;\n  /** Texture2D after TextureParser. */\n  textures?: Texture2D[];\n  /** Material after MaterialParser. */\n  materials?: Material[];\n  /** ModelMesh after MeshParser. */\n  meshes?: ModelMesh[][];\n  /** Skin after SkinParser. */\n  skins?: Skin[];\n  /** AnimationClip after AnimationParser. */\n  animations?: AnimationClip[];\n  /** Entity after EntityParser. */\n  entities: Entity[];\n  /** Camera after SceneParser. */\n  cameras?: Camera[];\n  /** Export lights in extension KHR_lights_punctual */\n  lights?: Light[];\n  /** RootEntities after SceneParser. */\n  sceneRoots: Entity[];\n  /** RootEntity after SceneParser. */\n  defaultSceneRoot: Entity;\n  /** Renderer can replace material by `renderer.setMaterial` if gltf use plugin-in KHR_materials_variants. */\n  variants?: { renderer: Renderer; material: Material; variants: string[] }[];\n\n  constructor(engine: Engine, url: string) {\n    super(engine);\n    this.url = url;\n  }\n\n  /**\n   * @override\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n\n    super.destroy();\n    this.defaultSceneRoot.destroy();\n\n    this.textures = null;\n    this.materials = null;\n    this.meshes = null;\n    this.skins = null;\n    this.animations = null;\n    this.entities = null;\n    this.cameras = null;\n    this.lights = null;\n    this.sceneRoots = null;\n    this.variants = null;\n  }\n}\n","import { AssetPromise, AssetType, Loader, LoadItem, resourceLoader, ResourceManager } from \"@galacean/engine-core\";\nimport { GLTFParser } from \"./gltf/GLTFParser\";\nimport { GLTFResource } from \"./gltf/GLTFResource\";\nimport { ParserContext } from \"./gltf/parser/ParserContext\";\n\n@resourceLoader(AssetType.Prefab, [\"gltf\", \"glb\"])\nexport class GLTFLoader extends Loader<GLTFResource> {\n  load(item: LoadItem, resourceManager: ResourceManager): Record<string, AssetPromise<any>> {\n    const url = item.url;\n    const context = new ParserContext(url);\n    const glTFResource = new GLTFResource(resourceManager.engine, url);\n    const masterPromiseInfo = context.masterPromiseInfo;\n\n    context.glTFResource = glTFResource;\n    context.keepMeshData = item.params?.keepMeshData ?? false;\n\n    masterPromiseInfo.onCancel(() => {\n      const { chainPromises } = context;\n      for (const promise of chainPromises) {\n        promise.cancel();\n      }\n    });\n\n    GLTFParser.defaultPipeline\n      .parse(context)\n      .then(masterPromiseInfo.resolve)\n      .catch((e) => {\n        console.error(e);\n        masterPromiseInfo.reject(`Error loading glTF model from ${url} .`);\n      });\n\n    return context.promiseMap;\n  }\n}\n\n/**\n * GlTF loader params.\n */\nexport interface GLTFParams {\n  /**\n   * @beta Now only contains vertex information, need to improve.\n   * Keep raw mesh data for glTF parser, default is false.\n   */\n  keepMeshData: boolean;\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  TextureCube,\n  TextureCubeFace\n} from \"@galacean/engine-core\";\nimport { Color, Vector3 } from \"@galacean/engine-math\";\n\nconst PI = Math.PI;\n\ninterface IHDRHeader {\n  /**\n   * The width of the texture in pixels.\n   */\n  width: number;\n  /**\n   * The height of the texture in pixels.\n   */\n  height: number;\n  /**\n   * The index of the beginning of the data in the binary file.\n   */\n  dataPosition: number;\n}\n\n@resourceLoader(AssetType.HDR, [\"hdr\"])\nclass HDRLoader extends Loader<TextureCube> {\n  private static _rightBottomBack = new Vector3(1.0, -1.0, -1.0);\n  private static _rightBottomFront = new Vector3(1.0, -1.0, 1.0);\n  private static _rightUpBack = new Vector3(1.0, 1.0, -1.0);\n  private static _rightUpFront = new Vector3(1.0, 1.0, 1.0);\n  private static _leftBottomBack = new Vector3(-1.0, -1.0, -1.0);\n  private static _leftBottomFront = new Vector3(-1.0, -1.0, 1.0);\n  private static _leftUpBack = new Vector3(-1.0, 1.0, -1.0);\n  private static _leftUpFront = new Vector3(-1.0, 1.0, 1.0);\n\n  private static _faceRight = [\n    HDRLoader._rightBottomBack,\n    HDRLoader._rightBottomFront,\n    HDRLoader._rightUpBack,\n    HDRLoader._rightUpFront\n  ];\n  private static _faceLeft = [\n    HDRLoader._leftBottomFront,\n    HDRLoader._leftBottomBack,\n    HDRLoader._leftUpFront,\n    HDRLoader._leftUpBack\n  ];\n  private static _faceUp = [\n    HDRLoader._leftBottomFront,\n    HDRLoader._rightBottomFront,\n    HDRLoader._leftBottomBack,\n    HDRLoader._rightBottomBack\n  ];\n  private static _faceBottom = [\n    HDRLoader._leftUpBack,\n    HDRLoader._rightUpBack,\n    HDRLoader._leftUpFront,\n    HDRLoader._rightUpFront\n  ];\n  private static _faceFront = [\n    HDRLoader._leftBottomBack,\n    HDRLoader._rightBottomBack,\n    HDRLoader._leftUpBack,\n    HDRLoader._rightUpBack\n  ];\n  private static _faceBack = [\n    HDRLoader._rightBottomFront,\n    HDRLoader._leftBottomFront,\n    HDRLoader._rightUpFront,\n    HDRLoader._leftUpFront\n  ];\n\n  private static _tempVector3 = new Vector3();\n  private static _temp2Vector3 = new Vector3();\n  private static _temp3Vector3 = new Vector3();\n  private static _temp4Vector3 = new Vector3();\n  private static _temp5Vector3 = new Vector3();\n\n  private static _convertToCubemap(\n    pixels: Uint8Array,\n    inputWidth: number,\n    inputHeight: number,\n    size: number\n  ): Uint8ClampedArray[] {\n    if (!pixels) {\n      throw \"ConvertPanoramaToCubemap: input cannot be null\";\n    }\n\n    if (pixels.length != inputWidth * inputHeight * 4) {\n      throw \"ConvertPanoramaToCubemap: input size is wrong\";\n    }\n\n    const textureRight = this._createCubemapData(size, this._faceRight, pixels, inputWidth, inputHeight);\n    const textureLeft = this._createCubemapData(size, this._faceLeft, pixels, inputWidth, inputHeight);\n    const textureUp = this._createCubemapData(size, this._faceUp, pixels, inputWidth, inputHeight);\n    const textureDown = this._createCubemapData(size, this._faceBottom, pixels, inputWidth, inputHeight);\n    const textureFront = this._createCubemapData(size, this._faceFront, pixels, inputWidth, inputHeight);\n    const textureBack = this._createCubemapData(size, this._faceBack, pixels, inputWidth, inputHeight);\n\n    return [textureRight, textureLeft, textureUp, textureDown, textureFront, textureBack];\n  }\n\n  private static _createCubemapData(\n    texSize: number,\n    faceData: Vector3[],\n    pixels: Uint8Array,\n    inputWidth: number,\n    inputHeight: number\n  ): Uint8ClampedArray {\n    const textureArray = new Uint8ClampedArray(texSize * texSize * 4);\n    const rotDX1 = this._tempVector3\n      .set(0, 0, 0)\n      .add(faceData[1])\n      .subtract(faceData[0])\n      .scale(1 / texSize);\n    const rotDX2 = this._temp2Vector3\n      .set(0, 0, 0)\n      .add(faceData[3])\n      .subtract(faceData[2])\n      .scale(1 / texSize);\n\n    const dy = 1 / texSize;\n    let fy = 0;\n\n    for (let y = 0; y < texSize; y++) {\n      let xv1 = this._temp3Vector3.set(0, 0, 0).add(faceData[0]);\n      let xv2 = this._temp4Vector3.set(0, 0, 0).add(faceData[2]);\n\n      for (let x = 0; x < texSize; x++) {\n        const v = this._temp5Vector3.set(0, 0, 0).add(xv2).subtract(xv1).scale(fy).add(xv1);\n        v.normalize();\n\n        const color = this._calcProjectionSpherical(v, pixels, inputWidth, inputHeight);\n        this._RGBEToLinear(color);\n        this._linearToRGBM(color, 5);\n\n        // 4 channels per pixels\n        const index = y * texSize * 4 + x * 4;\n        textureArray[index] = color.r;\n        textureArray[index + 1] = color.g;\n        textureArray[index + 2] = color.b;\n        textureArray[index + 3] = color.a;\n\n        xv1.add(rotDX1);\n        xv2.add(rotDX2);\n      }\n\n      fy += dy;\n    }\n\n    return textureArray;\n  }\n\n  private static _calcProjectionSpherical(\n    vDir: Vector3,\n    pixels: Uint8Array,\n    inputWidth: number,\n    inputHeight: number\n  ): Color {\n    let theta = Math.atan2(vDir.z, -vDir.x);\n    let phi = Math.acos(vDir.y);\n\n    while (theta < -PI) {\n      theta += 2 * PI;\n    }\n    while (theta > PI) {\n      theta -= 2 * PI;\n    }\n\n    let dx = theta / PI;\n    let dy = phi / PI;\n\n    // recenter.\n    dx = dx * 0.5 + 0.5;\n\n    let px = Math.round(dx * inputWidth);\n    if (px < 0) {\n      px = 0;\n    } else if (px >= inputWidth) {\n      px = inputWidth - 1;\n    }\n\n    let py = Math.round(dy * inputHeight);\n    if (py < 0) {\n      py = 0;\n    } else if (py >= inputHeight) {\n      py = inputHeight - 1;\n    }\n\n    const inputY = inputHeight - py - 1;\n    const index = inputY * inputWidth * 4 + px * 4;\n    const r = pixels[index];\n    const g = pixels[index + 1];\n    const b = pixels[index + 2];\n    const a = pixels[index + 3];\n\n    return new Color(r, g, b, a);\n  }\n\n  private static _readStringLine(uint8array: Uint8Array, startIndex: number): string {\n    let line = \"\";\n    let character = \"\";\n\n    for (let i = startIndex; i < uint8array.length - startIndex; i++) {\n      character = String.fromCharCode(uint8array[i]);\n\n      if (character == \"\\n\") {\n        break;\n      }\n\n      line += character;\n    }\n\n    return line;\n  }\n\n  private static _parseHeader(uint8array: Uint8Array): IHDRHeader {\n    let height: number = 0;\n    let width: number = 0;\n\n    let line = this._readStringLine(uint8array, 0);\n    if (line[0] != \"#\" || line[1] != \"?\") {\n      throw \"Bad HDR Format.\";\n    }\n\n    let endOfHeader = false;\n    let findFormat = false;\n    let lineIndex: number = 0;\n\n    do {\n      lineIndex += line.length + 1;\n      line = this._readStringLine(uint8array, lineIndex);\n\n      if (line == \"FORMAT=32-bit_rle_rgbe\") {\n        findFormat = true;\n      } else if (line.length == 0) {\n        endOfHeader = true;\n      }\n    } while (!endOfHeader);\n\n    if (!findFormat) {\n      throw \"HDR Bad header format, unsupported FORMAT\";\n    }\n\n    lineIndex += line.length + 1;\n    line = this._readStringLine(uint8array, lineIndex);\n\n    const sizeRegexp = /^\\-Y (.*) \\+X (.*)$/g;\n    const match = sizeRegexp.exec(line);\n\n    // TODO. Support +Y and -X if needed.\n    if (!match || match.length < 3) {\n      throw \"HDR Bad header format, no size\";\n    }\n    width = parseInt(match[2]);\n    height = parseInt(match[1]);\n\n    if (width < 8 || width > 0x7fff) {\n      throw \"HDR Bad header format, unsupported size\";\n    }\n\n    lineIndex += line.length + 1;\n\n    return {\n      height: height,\n      width: width,\n      dataPosition: lineIndex\n    };\n  }\n\n  private static _readPixels(buffer: Uint8Array, width: number, height: number): Uint8Array {\n    const scanLineWidth = width;\n    const byteLength = buffer.byteLength;\n\n    const dataRGBA = new Uint8Array(4 * width * height);\n\n    let offset = 0,\n      pos = 0;\n    const ptrEnd = 4 * scanLineWidth;\n    const rgbeStart = new Uint8Array(4);\n    const scanLineBuffer = new Uint8Array(ptrEnd);\n    let numScanLines = height; // read in each successive scanLine\n\n    while (numScanLines > 0 && pos < byteLength) {\n      rgbeStart[0] = buffer[pos++];\n      rgbeStart[1] = buffer[pos++];\n      rgbeStart[2] = buffer[pos++];\n      rgbeStart[3] = buffer[pos++];\n\n      if (2 != rgbeStart[0] || 2 != rgbeStart[1] || ((rgbeStart[2] << 8) | rgbeStart[3]) != scanLineWidth) {\n        throw \"HDR Bad header format, wrong scan line width\";\n      }\n\n      // read each of the four channels for the scanline into the buffer\n      // first red, then green, then blue, then exponent\n\n      let ptr = 0,\n        count;\n\n      while (ptr < ptrEnd && pos < byteLength) {\n        count = buffer[pos++];\n        const isEncodedRun = count > 128;\n        if (isEncodedRun) count -= 128;\n\n        if (0 === count || ptr + count > ptrEnd) {\n          throw \"HDR Bad Format, bad scanline data (run)\";\n        }\n\n        if (isEncodedRun) {\n          // a (encoded) run of the same value\n          const byteValue = buffer[pos++];\n\n          for (let i = 0; i < count; i++) {\n            scanLineBuffer[ptr++] = byteValue;\n          } //ptr += count;\n        } else {\n          // a literal-run\n          scanLineBuffer.set(buffer.subarray(pos, pos + count), ptr);\n          ptr += count;\n          pos += count;\n        }\n      } // now convert data from buffer into rgba\n      // first red, then green, then blue, then exponent (alpha)\n\n      const l = scanLineWidth; //scanLine_buffer.byteLength;\n\n      for (let i = 0; i < l; i++) {\n        let off = 0;\n        dataRGBA[offset] = scanLineBuffer[i + off];\n        off += scanLineWidth;\n\n        dataRGBA[offset + 1] = scanLineBuffer[i + off];\n        off += scanLineWidth;\n\n        dataRGBA[offset + 2] = scanLineBuffer[i + off];\n        off += scanLineWidth;\n\n        dataRGBA[offset + 3] = scanLineBuffer[i + off];\n        offset += 4;\n      }\n\n      numScanLines--;\n    }\n\n    return dataRGBA;\n  }\n\n  private static _RGBEToLinear(color: Color): void {\n    const scaleFactor = Math.pow(2, color.a - 128) / 255;\n    color.r *= scaleFactor;\n    color.g *= scaleFactor;\n    color.b *= scaleFactor;\n    color.a = 1;\n  }\n\n  private static _linearToRGBM(color: Color, maxRange: number): void {\n    const maxRGB = Math.max(color.r, Math.max(color.g, color.b));\n    let M = Math.min(maxRGB / maxRange, 1);\n    M = Math.ceil(M * 255);\n    const scaleFactor = 65025 / (M * maxRange); // 255 * (255 / (M * maxRange) )\n\n    color.r *= scaleFactor;\n    color.g *= scaleFactor;\n    color.b *= scaleFactor;\n    color.a *= M;\n  }\n\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<TextureCube> {\n    return new AssetPromise((resolve, reject) => {\n      const engine = resourceManager.engine;\n\n      this.request<ArrayBuffer>(item.url, { type: \"arraybuffer\" })\n        .then((buffer) => {\n          const uint8Array = new Uint8Array(buffer);\n          const { width, height, dataPosition } = HDRLoader._parseHeader(uint8Array);\n          const pixels = HDRLoader._readPixels(uint8Array.subarray(dataPosition), width, height);\n          const cubeSize = height >> 1;\n\n          const cubeMapData = HDRLoader._convertToCubemap(pixels, width, height, cubeSize);\n          const texture = new TextureCube(engine, cubeSize);\n\n          for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n            texture.setPixelBuffer(TextureCubeFace.PositiveX + faceIndex, cubeMapData[faceIndex], 0);\n          }\n          texture.generateMipmaps();\n          resolve(texture);\n        })\n        .catch(reject);\n    });\n  }\n}\n","import { resourceLoader, Loader, AssetPromise, AssetType, LoadItem } from \"@galacean/engine-core\";\n\n@resourceLoader(AssetType.JSON, [\"json\"], false)\nclass JSONLoader extends Loader<string> {\n  load(item: LoadItem): AssetPromise<string> {\n    return this.request(item.url, {\n      ...item,\n      type: \"json\"\n    });\n  }\n}\n","/**\n *\n * ported from https://github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.khronosTextureContainer.ts\n */\n\nimport { TextureFormat } from \"@galacean/engine-core\";\nimport { GLCompressedTextureInternalFormat } from \"@galacean/engine-rhi-webgl\";\nimport { KTXContainer, Mipmap } from \"./type\";\n\nconst HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n\n// load types\nconst COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\nconst COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\nconst TEX_2D = 2; // uses a gl.texImage2D()\nconst TEX_3D = 3; // uses a gl.texImage3D()\n\nfunction getMipmaps(ktxContainer: KTXContainer, loadMipmaps: boolean): Mipmap[] {\n  const mipmaps = [];\n\n  // initialize width & height for level 1\n  var dataOffset = HEADER_LEN + ktxContainer.bytesOfKeyValueData;\n  var width = ktxContainer.pixelWidth;\n  var height = ktxContainer.pixelHeight;\n  var mipmapCount = loadMipmaps ? ktxContainer.numberOfMipmapLevels : 1;\n\n  for (var level = 0; level < mipmapCount; level++) {\n    var imageSize = new Int32Array(ktxContainer.buffer, dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n    dataOffset += 4; // size of the image + 4 for the imageSize field\n\n    for (var face = 0; face < ktxContainer.numberOfFaces; face++) {\n      var byteArray = new Uint8Array(ktxContainer.buffer, dataOffset, imageSize);\n\n      mipmaps.push({ data: byteArray, width: width, height: height });\n\n      dataOffset += imageSize;\n      dataOffset += 3 - ((imageSize + 3) % 4); // add padding for odd sized image\n    }\n    width = Math.max(1.0, width * 0.5);\n    height = Math.max(1.0, height * 0.5);\n  }\n\n  return mipmaps;\n}\n\n/**\n * Checks if the given data starts with a KTX file identifier.\n * @param data the data to check\n * @returns true if the data is a KTX file or false otherwise\n */\nfunction isValid(data: ArrayBuffer): boolean {\n  if (data.byteLength >= 12) {\n    // '«', 'K', 'T', 'X', ' ', '1', '1', '»', '\\r', '\\n', '\\x1A', '\\n'\n    const identifier = new Uint8Array(data, 0, 12);\n    if (\n      identifier[0] === 0xab &&\n      identifier[1] === 0x4b &&\n      identifier[2] === 0x54 &&\n      identifier[3] === 0x58 &&\n      identifier[4] === 0x20 &&\n      identifier[5] === 0x31 &&\n      identifier[6] === 0x31 &&\n      identifier[7] === 0xbb &&\n      identifier[8] === 0x0d &&\n      identifier[9] === 0x0a &&\n      identifier[10] === 0x1a &&\n      identifier[11] === 0x0a\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getEngineFormat(internalFormat: GLint): TextureFormat {\n  switch (internalFormat) {\n    // case GLCompressedTextureInternalFormat.RGBA_S3TC_DXT3_EXT:\n    // case GLCompressedTextureInternalFormat.RGBA_S3TC_DXT5_EXT:\n    // break;\n    case GLCompressedTextureInternalFormat.RGB_S3TC_DXT1_EXT:\n      return TextureFormat.DXT1;\n    case GLCompressedTextureInternalFormat.RGBA_S3TC_DXT5_EXT:\n      return TextureFormat.DXT5;\n    case GLCompressedTextureInternalFormat.RGB_ETC1_WEBGL:\n      return TextureFormat.ETC1_RGB;\n    case GLCompressedTextureInternalFormat.RGB8_ETC2:\n      return TextureFormat.ETC2_RGB;\n    case GLCompressedTextureInternalFormat.RGB8_PUNCHTHROUGH_ALPHA1_ETC2:\n      return TextureFormat.ETC2_RGBA5;\n    case GLCompressedTextureInternalFormat.RGBA8_ETC2_EAC:\n      return TextureFormat.ETC2_RGBA8;\n    case GLCompressedTextureInternalFormat.RGB_PVRTC_2BPPV1_IMG:\n      return TextureFormat.PVRTC_RGB2;\n    case GLCompressedTextureInternalFormat.RGBA_PVRTC_2BPPV1_IMG:\n      return TextureFormat.PVRTC_RGBA2;\n    case GLCompressedTextureInternalFormat.RGB_PVRTC_4BPPV1_IMG:\n      return TextureFormat.PVRTC_RGB4;\n    case GLCompressedTextureInternalFormat.RGBA_PVRTC_4BPPV1_IMG:\n      return TextureFormat.PVRTC_RGBA4;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_4X4_KHR:\n      return TextureFormat.ASTC_4x4;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_5X5_KHR:\n      return TextureFormat.ASTC_5x5;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_6X6_KHR:\n      return TextureFormat.ASTC_6x6;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_8X8_KHR:\n      return TextureFormat.ASTC_8x8;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_10X10_KHR:\n      return TextureFormat.ASTC_10x10;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_12X12_KHR:\n      return TextureFormat.ASTC_12x12;\n    default:\n      const formatName: any = GLCompressedTextureInternalFormat[internalFormat];\n      throw new Error(`this format is not supported in Galacean Engine: ${formatName}`);\n  }\n}\n/**\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n */\nexport const khronosTextureContainerParser = {\n  /**\n   *\n   * @param buffer contents of the KTX container file\n   * @param facesExpected should be either 1 or 6, based whether a cube texture or or\n   * @param threeDExpected provision for indicating that data should be a 3D texture, not implemented\n   * @param textureArrayExpected provision for indicating that data should be a texture array, not implemented\n   * @param mapEngineFormat get Galacean Engine native TextureFormat?\n   */\n  parse(\n    buffer: ArrayBuffer,\n    facesExpected: number,\n    withMipmaps: boolean,\n    mapEngineFormat: boolean = false\n  ): KTXContainer {\n    if (!isValid(buffer)) {\n      throw new Error(\"khronosTextureContainerParser: invalid KTX file, texture missing KTX identifier\");\n    }\n\n    // load the reset of the header in native 32 bit uint\n    const dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    const headerDataView = new DataView(buffer, 12, 13 * dataSize);\n    const endianness = headerDataView.getUint32(0, true);\n    const littleEndian = endianness === 0x04030201;\n\n    const parsedResult: KTXContainer = {\n      buffer: buffer,\n      glType: headerDataView.getUint32(1 * dataSize, littleEndian), // must be 0 for compressed textures\n      glTypeSize: headerDataView.getUint32(2 * dataSize, littleEndian), // must be 1 for compressed textures\n      glFormat: headerDataView.getUint32(3 * dataSize, littleEndian), // must be 0 for compressed textures\n      glInternalFormat: headerDataView.getUint32(4 * dataSize, littleEndian), // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n      glBaseInternalFormat: headerDataView.getUint32(5 * dataSize, littleEndian), // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n      pixelWidth: headerDataView.getUint32(6 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n      pixelHeight: headerDataView.getUint32(7 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n      pixelDepth: headerDataView.getUint32(8 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n      numberOfArrayElements: headerDataView.getUint32(9 * dataSize, littleEndian), // used for texture arrays\n      numberOfFaces: headerDataView.getUint32(10 * dataSize, littleEndian), // used for cubemap textures, should either be 1 or 6\n      numberOfMipmapLevels: headerDataView.getUint32(11 * dataSize, littleEndian), // number of levels; disregard possibility of 0 for compressed textures\n      bytesOfKeyValueData: headerDataView.getUint32(12 * dataSize, littleEndian), // the amount of space after the header for meta-data\n      // would need to make this more elaborate & adjust checks above to support more than one load type\n      loadType: COMPRESSED_2D\n    };\n\n    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n    if (parsedResult.glType !== 0) {\n      throw new Error(\"only compressed formats currently supported\");\n    } else {\n      // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n      parsedResult.numberOfMipmapLevels = Math.max(1, parsedResult.numberOfMipmapLevels);\n    }\n\n    if (parsedResult.pixelHeight === 0 || parsedResult.pixelDepth !== 0) {\n      throw new Error(\"only 2D textures currently supported\");\n    }\n\n    if (parsedResult.numberOfArrayElements !== 0) {\n      throw new Error(\"texture arrays not currently supported\");\n    }\n\n    if (parsedResult.numberOfFaces !== facesExpected) {\n      throw new Error(\"number of faces expected\" + facesExpected + \", but found \" + parsedResult.numberOfFaces);\n    }\n\n    if (withMipmaps) {\n      parsedResult.mipmaps = getMipmaps(parsedResult, true);\n    }\n\n    if (mapEngineFormat) {\n      parsedResult.engineFormat = getEngineFormat(parsedResult.glInternalFormat);\n    }\n    return parsedResult;\n  }\n};\n","import { CompressedTextureData, CompressedCubeData } from \"./type\";\nimport { khronosTextureContainerParser } from \"./KhronosTextureContainer\";\nimport { TextureFormat } from \"@galacean/engine-core\";\n\nexport function parseSingleKTX(data: ArrayBuffer): CompressedTextureData {\n  const ktx = khronosTextureContainerParser.parse(data, 1, true, true);\n  return {\n    mipmaps: ktx.mipmaps,\n    engineFormat: ktx.engineFormat,\n    internalFormat: ktx.glInternalFormat,\n    width: ktx.pixelWidth,\n    height: ktx.pixelHeight\n  };\n}\n\nexport function parseCubeKTX(dataArray: ArrayBuffer[]): CompressedCubeData {\n  const mipmapsFaces = [];\n  let internalFormat: number;\n  let engineFormat: TextureFormat;\n  let width: number;\n  let height: number;\n  for (let i = 0; i < dataArray.length; i++) {\n    const ktx = khronosTextureContainerParser.parse(dataArray[i], 1, true, true);\n    mipmapsFaces.push(ktx.mipmaps);\n    if (i === 0) {\n      width = ktx.pixelWidth;\n      height = ktx.pixelHeight;\n      internalFormat = ktx.glInternalFormat;\n      engineFormat = ktx.engineFormat;\n    }\n  }\n  return {\n    mipmapsFaces,\n    engineFormat,\n    internalFormat,\n    width,\n    height\n  };\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  TextureCubeFace,\n  TextureCube\n} from \"@galacean/engine-core\";\nimport { parseCubeKTX } from \"./compressed-texture\";\n\n@resourceLoader(AssetType.KTXCube, [])\nclass KTXCubeLoader extends Loader<TextureCube> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<TextureCube> {\n    return new AssetPromise((resolve, reject) => {\n      Promise.all(\n        item.urls.map((url) =>\n          this.request<ArrayBuffer>(url, {\n            ...item,\n            type: \"arraybuffer\"\n          })\n        )\n      )\n        .then((data) => {\n          const parsedData = parseCubeKTX(data);\n          const { width, mipmapsFaces, engineFormat } = parsedData;\n          const mipmap = mipmapsFaces[0].length > 1;\n          const texture = new TextureCube(resourceManager.engine, width, engineFormat, mipmap);\n\n          for (let face = 0; face < 6; face++) {\n            const length = mipmapsFaces[face].length;\n\n            for (let miplevel = 0; miplevel < length; miplevel++) {\n              const { data, width, height } = mipmapsFaces[face][miplevel];\n\n              texture.setPixelBuffer(TextureCubeFace.PositiveX + face, data, miplevel, 0, 0, width, height);\n            }\n          }\n\n          resolve(texture);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  Texture2D\n} from \"@galacean/engine-core\";\nimport { parseSingleKTX } from \"./compressed-texture\";\n\n@resourceLoader(AssetType.KTX, [\"ktx\"])\nexport class KTXLoader extends Loader<Texture2D> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Texture2D> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<ArrayBuffer>(item.url, {\n        ...item,\n        type: \"arraybuffer\"\n      })\n        .then((bin) => {\n          const parsedData = parseSingleKTX(bin);\n          const { width, height, mipmaps, engineFormat } = parsedData;\n          const mipmap = mipmaps.length > 1;\n          const texture = new Texture2D(resourceManager.engine, width, height, engineFormat, mipmap);\n\n          for (let miplevel = 0; miplevel < mipmaps.length; miplevel++) {\n            const { width, height, data } = mipmaps[miplevel];\n            texture.setPixelBuffer(data, miplevel, 0, 0, width, height);\n          }\n\n          resolve(texture);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  BlinnPhongMaterial,\n  Loader,\n  LoadItem,\n  PBRBaseMaterial,\n  PBRMaterial,\n  PBRSpecularMaterial,\n  resourceLoader,\n  ResourceManager,\n  Shader,\n  Texture2D,\n  UnlitMaterial\n} from \"@galacean/engine-core\";\nimport { Color, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\n\n@resourceLoader(AssetType.Material, [\"json\"])\nclass MaterialLoader extends Loader<string> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<string> {\n    return new AssetPromise((resolve, reject) => {\n      this.request(item.url, {\n        ...item,\n        type: \"json\"\n      })\n        .then((json: { [key: string]: any }) => {\n          const engine = resourceManager.engine;\n          const { name, shader, shaderData, macros, renderState } = json;\n\n          let material;\n          switch (shader) {\n            case \"pbr\":\n              material = new PBRMaterial(engine);\n              break;\n            case \"pbr-specular\":\n              material = new PBRSpecularMaterial(engine);\n              break;\n            case \"unlit\":\n              material = new UnlitMaterial(engine);\n              break;\n            case \"blinn-phong\":\n              material = new BlinnPhongMaterial(engine);\n              break;\n            case \"bake-pbr\":\n              // @todo refactor custom shader later\n              // @ts-ignore\n              material = new PBRBaseMaterial(engine, Shader.find(\"bake-pbr\"));\n              break;\n          }\n          material.name = name;\n\n          const texturePromises = new Array<Promise<Texture2D | void>>();\n          const materialShaderData = material.shaderData;\n          for (let key in shaderData) {\n            const { type, value } = shaderData[key];\n\n            switch (type) {\n              case \"Vector2\":\n                materialShaderData.setVector2(key, new Vector2(value.x, value.y));\n                break;\n              case \"Vector3\":\n                materialShaderData.setVector3(key, new Vector3(value.x, value.y, value.z));\n                break;\n              case \"Vector4\":\n                materialShaderData.setVector4(key, new Vector4(value.x, value.y, value.z, value.w));\n                break;\n              case \"Color\":\n                materialShaderData.setColor(key, new Color(value.r, value.g, value.b, value.a));\n                break;\n              case \"Float\":\n                materialShaderData.setFloat(key, value);\n                break;\n              case \"Texture\":\n                texturePromises.push(\n                  // @ts-ignore\n                  resourceManager.getResourceByRef<Texture2D>(value).then((texture) => {\n                    materialShaderData.setTexture(key, texture);\n                  })\n                );\n                break;\n            }\n          }\n\n          for (let i = 0, length = macros.length; i < length; i++) {\n            const { name, value } = macros[i];\n            if (value == undefined) {\n              materialShaderData.enableMacro(name);\n            } else {\n              materialShaderData.enableMacro(name, value);\n            }\n          }\n\n          for (let key in renderState) {\n            material[key] = renderState[key];\n          }\n\n          return Promise.all(texturePromises).then(() => {\n            resolve(material);\n          });\n        })\n        .catch(reject);\n    });\n  }\n}\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { GLTFUtil } from \"../../gltf/GLTFUtil\";\nimport { ab2str } from \"./Utils\";\n\nclass ImageData {\n  type: \"image/png\" | \"image/jpg\" | \"image/webp\" | \"ktx\";\n  buffer: ArrayBuffer;\n}\n\nexport class BufferReader {\n  private _dataView: DataView;\n  private _littleEndian: boolean;\n  private _offset: number;\n\n  public static imageMapping = {\n    0: \"image/png\",\n    1: \"image/jpg\",\n    2: \"image/webp\",\n    3: \"ktx\"\n  };\n\n  constructor(public buffer: ArrayBuffer, byteOffset: number = 0, byteLength?: number, littleEndian: boolean = true) {\n    // byteLength = byteLength ?? _buffer.byteLength;\n    this._dataView = new DataView(buffer);\n    this._littleEndian = littleEndian;\n    this._offset = byteOffset;\n  }\n\n  get offset() {\n    return this._offset;\n  }\n\n  nextUint8() {\n    const value = this._dataView.getUint8(this._offset);\n    this._offset += 1;\n    return value;\n  }\n\n  nextUint16() {\n    const value = this._dataView.getUint16(this._offset, this._littleEndian);\n    this._offset += 2;\n    return value;\n  }\n\n  nextUint32() {\n    const value = this._dataView.getUint32(this._offset, this._littleEndian);\n    this._offset += 4;\n    return value;\n  }\n\n  nextInt32() {\n    const value = this._dataView.getInt32(this._offset, this._littleEndian);\n    this._offset += 4;\n    return value;\n  }\n\n  nextInt32Array(len: number) {\n    const value = new Int32Array(this.buffer, this._offset, len);\n    this._offset += 4 * len;\n    return value;\n  }\n\n  nextFloat32() {\n    const value = this._dataView.getFloat32(this._offset, this._littleEndian);\n    this._offset += 4;\n    return value;\n  }\n\n  nextFloat32Array(len: number) {\n    const value = new Float32Array(this.buffer, this._offset, len);\n    this._offset += 4 * len;\n    return value;\n  }\n\n  nextUint32Array(len: number) {\n    const value = new Uint32Array(this.buffer, this._offset, len);\n    this._offset += 4 * len;\n    return value;\n  }\n\n  nextUint8Array(len: number) {\n    const value = new Uint8Array(this.buffer, this._offset, len);\n    this._offset += len;\n    return value;\n  }\n\n  nextUint64() {\n    const left = this._dataView.getUint32(this._offset, this._littleEndian);\n    const right = this._dataView.getUint32(this._offset + 4, this._littleEndian);\n    const value = left + 2 ** 32 * right;\n    this._offset += 8;\n    return value;\n  }\n\n  nextStr(): string {\n    const strByteLength = this.nextUint16();\n    const uint8Array = new Uint8Array(this.buffer, this._offset, strByteLength);\n    this._offset += strByteLength;\n    return GLTFUtil.decodeText(uint8Array);\n  }\n\n  /**\n   * image data 放在最后\n   */\n  nextImageData(count: number = 0): ArrayBuffer {\n    return this.buffer.slice(this._offset);\n  }\n\n  nextImagesData(count: number): ArrayBuffer[] {\n    const imagesLen = new Array(count);\n    // Start offset of Uint32Array should be a multiple of 4. ref: https://stackoverflow.com/questions/15417310/why-typed-array-constructors-require-offset-to-be-multiple-of-underlying-type-si\n    for (let i = 0; i < count; i++) {\n      const len = this._dataView.getUint32(this._offset, this._littleEndian);\n      imagesLen[i] = len;\n      this._offset += 4;\n    }\n    const imagesData: ArrayBuffer[] = [];\n\n    for (let i = 0; i < count; i++) {\n      const len = imagesLen[i];\n      const buffer = this.buffer.slice(this._offset, this._offset + len);\n      this._offset += len;\n      imagesData.push(buffer);\n    }\n    return imagesData;\n  }\n\n  skip(bytes: number) {\n    this._offset += bytes;\n    return this;\n  }\n\n  scan(maxByteLength: number, term: number = 0x00): Uint8Array {\n    const byteOffset = this._offset;\n    let byteLength = 0;\n    while (this._dataView.getUint8(this._offset) !== term && byteLength < maxByteLength) {\n      byteLength++;\n      this._offset++;\n    }\n\n    if (byteLength < maxByteLength) this._offset++;\n\n    return new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + byteOffset, byteLength);\n  }\n}\n","import { Engine } from \"@galacean/engine-core\";\nimport type { BufferReader } from \"./BufferReader\";\n\nexport const decoderMap: Record<\n  string,\n  {\n    decode: (engine: Engine, bufferReader: BufferReader) => Promise<any>;\n  }\n> = {};\n\n/**\n * Decoder decorator generator.\n * @param type - resource file type.\n * @returns Decoder decorator\n */\nexport function decoder(type: string): ClassDecorator {\n  return (target: any) => {\n    decoderMap[type] = target;\n  };\n}","import { GLTFUtil } from \"../../gltf/GLTFUtil\";\n\nexport class FileHeader {\n  totalLength: number = 0;\n  version: number = 0;\n  type: string = \"\";\n  name: string = \"\";\n  headerLength: number = 0;\n\n  static decode(arrayBuffer: ArrayBuffer): FileHeader {\n    const dataView = new DataView(arrayBuffer);\n    const totalLen = dataView.getUint32(0, true);\n    const fileVersion = dataView.getUint8(4);\n    const typeLen = dataView.getUint16(5, true);\n    const typeUint8Array = new Uint8Array(arrayBuffer, 7, typeLen);\n    const nameLen = dataView.getUint16(7 + typeLen, true);\n    const nameUint8Array = new Uint8Array(arrayBuffer, 9 + typeLen, nameLen);\n\n    const name = GLTFUtil.decodeText(nameUint8Array);\n    const type = GLTFUtil.decodeText(typeUint8Array);\n    const header = new FileHeader();\n    header.totalLength = totalLen;\n    header.name = name;\n    header.type = type;\n    header.version = fileVersion;\n    header.headerLength = nameUint8Array.byteLength + typeUint8Array.byteLength + 9;\n    return header;\n  }\n\n  public get dataLength() {\n    return this.totalLength - this.headerLength;\n  }\n}\n","import { ModelMesh, BlendShape } from \"@galacean/engine-core\";\nimport { decoder } from \"../../utils/Decorator\";\nimport type { Engine } from \"@galacean/engine-core\";\nimport type { BufferReader } from \"../../utils/BufferReader\";\nimport { IEncodedModelMesh } from \"./IModelMesh\";\nimport { Color, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\n\n/**\n * @todo refactor \n */\n@decoder(\"Mesh\")\nexport class MeshDecoder {\n  public static decode(engine: Engine, bufferReader: BufferReader): Promise<ModelMesh> {\n    return new Promise((resolve) => {\n      const modelMesh = new ModelMesh(engine);\n      const jsonDataString = bufferReader.nextStr();\n      const encodedMeshData: IEncodedModelMesh = JSON.parse(jsonDataString);\n\n      // @ts-ignore Vector3 is not compatible with {x: number, y: number, z: number}.\n      encodedMeshData.bounds && modelMesh.bounds.copyFrom(encodedMeshData.bounds);\n\n      const offset = Math.ceil(bufferReader.offset / 4) * 4;\n\n      const float32Array = new Float32Array(\n        bufferReader.buffer,\n        encodedMeshData.positions.start + offset,\n        (encodedMeshData.positions.end - encodedMeshData.positions.start) / 4\n      );\n      const vertexCount = float32Array.length / 3;\n      const positions = float32ArrayToVector3(float32Array, vertexCount);\n      modelMesh.setPositions(positions);\n      if (encodedMeshData.normals) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.normals.start + offset,\n          (encodedMeshData.normals.end - encodedMeshData.normals.start) / 4\n        );\n        const normals = float32ArrayToVector3(float32Array, vertexCount);\n        modelMesh.setNormals(normals);\n      }\n      if (encodedMeshData.uvs) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.uvs.start + offset,\n          (encodedMeshData.uvs.end - encodedMeshData.uvs.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount));\n      }\n      if (encodedMeshData.uv1) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.uv1.start + offset,\n          (encodedMeshData.uv1.end - encodedMeshData.uv1.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount), 1);\n      }\n      if (encodedMeshData.uv2) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.uv2.start + offset,\n          (encodedMeshData.uv2.end - encodedMeshData.uv2.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount), 2);\n      }\n      if (encodedMeshData.uv3) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.uv3.start + offset,\n          (encodedMeshData.uv3.end - encodedMeshData.uv3.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount), 3);\n      }\n      if (encodedMeshData.uv4) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.uv4.start + offset,\n          (encodedMeshData.uv4.end - encodedMeshData.uv4.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount), 4);\n      }\n      if (encodedMeshData.uv5) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.uv5.start + offset,\n          (encodedMeshData.uv5.end - encodedMeshData.uv5.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount), 5);\n      }\n      if (encodedMeshData.uv6) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.uv6.start + offset,\n          (encodedMeshData.uv6.end - encodedMeshData.uv6.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount), 6);\n      }\n      if (encodedMeshData.uv7) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.uv7.start + offset,\n          (encodedMeshData.uv7.end - encodedMeshData.uv7.start) / 4\n        );\n        modelMesh.setUVs(float32ArrayToVector2(float32Array, vertexCount), 7);\n      }\n      if (encodedMeshData.colors) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.colors.start + offset,\n          (encodedMeshData.colors.end - encodedMeshData.colors.start) / 4\n        );\n        modelMesh.setColors(float32ArrayToVColor(float32Array, vertexCount));\n      }\n      if (encodedMeshData.boneWeights) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.boneWeights.start + offset,\n          (encodedMeshData.boneWeights.end - encodedMeshData.boneWeights.start) / 4\n        );\n        modelMesh.setBoneWeights(float32ArrayToVector4(float32Array, vertexCount));\n      }\n      if (encodedMeshData.boneIndices) {\n        const float32Array = new Float32Array(\n          bufferReader.buffer,\n          encodedMeshData.boneIndices.start + offset,\n          (encodedMeshData.boneIndices.end - encodedMeshData.boneIndices.start) / 4\n        );\n        modelMesh.setBoneIndices(float32ArrayToVector4(float32Array, vertexCount));\n      }\n      if (encodedMeshData.blendShapes) {\n        encodedMeshData.blendShapes.forEach((blendShapeData) => {\n          const blendShape = new BlendShape(blendShapeData.name);\n          blendShapeData.frames.forEach((frameData) => {\n            const positionArray = new Float32Array(\n              bufferReader.buffer,\n              frameData.deltaPosition.start + offset,\n              (frameData.deltaPosition.end - frameData.deltaPosition.start) / 4\n            );\n            const count = positionArray.length / 3;\n            const deltaPosition = float32ArrayToVector3(positionArray, count);\n            let deltaNormals: Vector3[] | null = null;\n            if (frameData.deltaNormals) {\n              const normalsArray = new Float32Array(\n                bufferReader.buffer,\n                frameData.deltaNormals.start + offset,\n                (frameData.deltaNormals.end - frameData.deltaNormals.start) / 4\n              );\n              deltaNormals = float32ArrayToVector3(normalsArray, count);\n            }\n            let deltaTangents: Vector4[] | null = null;\n            if (frameData.deltaTangents) {\n              const tangentsArray = new Float32Array(\n                bufferReader.buffer,\n                frameData.deltaTangents.start + offset,\n                (frameData.deltaTangents.end - frameData.deltaTangents.start) / 4\n              );\n              deltaTangents = float32ArrayToVector4(tangentsArray, count);\n            }\n            blendShape.addFrame(frameData.weight, deltaPosition);\n          });\n          modelMesh.addBlendShape(blendShape);\n        });\n      }\n      if (encodedMeshData.indices) {\n        let indices: Uint16Array | Uint32Array = null;\n        if (encodedMeshData.indices.type === 0) {\n          indices = new Uint16Array(\n            bufferReader.buffer,\n            encodedMeshData.indices.start + offset,\n            (encodedMeshData.indices.end - encodedMeshData.indices.start) / 2\n          );\n        } else {\n          indices = new Uint32Array(\n            bufferReader.buffer,\n            encodedMeshData.indices.start + offset,\n            (encodedMeshData.indices.end - encodedMeshData.indices.start) / 4\n          );\n        }\n        modelMesh.setIndices(indices);\n      }\n      \n      encodedMeshData.subMeshes.forEach((subMesh) => modelMesh.addSubMesh(subMesh));\n      modelMesh.uploadData(false);\n      resolve(modelMesh);\n    });\n  }\n}\n\nfunction float32ArrayToVColor(float32Array: Float32Array, vertexCount: number) {\n  const array = new Array(vertexCount);\n  for (let i = 0; i < vertexCount; i++) {\n    array[i] = new Color(\n      float32Array[i * 4],\n      float32Array[i * 4 + 1],\n      float32Array[i * 4 + 2],\n      float32Array[i * 4 + 3]\n    );\n  }\n  return array;\n}\n\nfunction float32ArrayToVector4(float32Array: Float32Array, vertexCount: number) {\n  const array = new Array(vertexCount);\n  for (let i = 0; i < vertexCount; i++) {\n    array[i] = new Vector4(\n      float32Array[i * 4],\n      float32Array[i * 4 + 1],\n      float32Array[i * 4 + 2],\n      float32Array[i * 4 + 3]\n    );\n  }\n  return array;\n}\n\nfunction float32ArrayToVector3(float32Array: Float32Array, vertexCount: number) {\n  const array = new Array(vertexCount);\n  for (let i = 0; i < vertexCount; i++) {\n    array[i] = new Vector3(float32Array[i * 3], float32Array[i * 3 + 1], float32Array[i * 3 + 2]);\n  }\n  return array;\n}\n\nfunction float32ArrayToVector2(float32Array: Float32Array, vertexCount: number) {\n  const array = new Array(vertexCount);\n  for (let i = 0; i < vertexCount; i++) {\n    array[i] = new Vector2(float32Array[i * 2], float32Array[i * 2 + 1]);\n  }\n  return array;\n}\n","import { Engine, Texture2D } from \"@galacean/engine-core\";\nimport { BufferReader } from \"../../utils/BufferReader\";\nimport { decoder } from \"../../utils/Decorator\";\n\n@decoder(\"Texture2D\")\nexport class Texture2DDecoder {\n  static decode(engine: Engine, bufferReader: BufferReader): Promise<Texture2D> {\n    return new Promise((resolve, reject) => {\n      const objectId = bufferReader.nextStr();\n      const mipmap = !!bufferReader.nextUint8();\n      const filterMode = bufferReader.nextUint8();\n      const anisoLevel = bufferReader.nextUint8();\n      const wrapModeU = bufferReader.nextUint8();\n      const wrapModeV = bufferReader.nextUint8();\n      const format = bufferReader.nextUint8();\n      const width = bufferReader.nextUint16();\n      const height = bufferReader.nextUint16();\n      const isPixelBuffer = bufferReader.nextUint8();\n\n      const mipCount = bufferReader.nextUint8();\n      const imagesData = bufferReader.nextImagesData(mipCount);\n\n      const texture2D = new Texture2D(engine, width, height, format, mipmap);\n      texture2D.filterMode = filterMode;\n      texture2D.anisoLevel = anisoLevel;\n      texture2D.wrapModeU = wrapModeU;\n      texture2D.wrapModeV = wrapModeV;\n\n      if (isPixelBuffer) {\n        const pixelBuffer = new Uint8Array(imagesData[0]);\n        texture2D.setPixelBuffer(pixelBuffer);\n        if (mipmap) {\n          texture2D.generateMipmaps();\n          for (let i = 1; i < mipCount; i++) {\n            const pixelBuffer = new Uint8Array(imagesData[i]);\n            texture2D.setPixelBuffer(pixelBuffer, i);\n          }\n        }\n        // @ts-ignore\n        engine.resourceManager._objectPool[objectId] = texture2D;\n        resolve(texture2D);\n      } else {\n        const blob = new window.Blob([imagesData[0]]);\n        const img = new Image();\n        img.onload = () => {\n          texture2D.setImageSource(img);\n          let completedCount = 0;\n          const onComplete = () => {\n            completedCount++;\n            if (completedCount >= mipCount) {\n              resolve(texture2D);\n            }\n          };\n          onComplete();\n          if (mipmap) {\n            texture2D.generateMipmaps();\n            for (let i = 1; i < mipCount; i++) {\n              const blob = new window.Blob([imagesData[i]]);\n              const img = new Image();\n              img.onload = () => {\n                texture2D.setImageSource(img, i);\n                onComplete();\n              };\n              img.src = URL.createObjectURL(blob);\n            }\n          }\n        };\n        img.src = URL.createObjectURL(blob);\n      }\n    });\n  }\n}\n","export function _is_native_reflect_construct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nexport { _is_native_reflect_construct as _ };\n","import { _is_native_reflect_construct } from \"./_is_native_reflect_construct.js\";\nimport { _set_prototype_of } from \"./_set_prototype_of.js\";\nexport function _construct(Parent, args, Class) {\n    if (_is_native_reflect_construct()) _construct = Reflect.construct;\n    else {\n        _construct = function construct(Parent, args, Class) {\n            var a = [null];\n            a.push.apply(a, args);\n            var Constructor = Function.bind.apply(Parent, a);\n            var instance = new Constructor();\n\n            if (Class) _set_prototype_of(instance, Class.prototype);\n\n            return instance;\n        };\n    }\n\n    return _construct.apply(null, arguments);\n}\nexport { _construct as _ };\n","import { Engine, Entity, Loader } from \"@galacean/engine-core\";\nimport { IBasicType, IClassObject, IEntity, IAssetRef } from \"./PrefabDesign\";\n\nexport class ReflectionParser {\n  static customParseComponentHandles = new Map<string, Function>();\n\n  static registerCustomParseComponent(componentType: string, handle: Function) {\n    this.customParseComponentHandles[componentType] = handle;\n  }\n\n  static parseEntity(entityConfig: IEntity, engine: Engine): Promise<Entity> {\n    return ReflectionParser.getEntityByConfig(entityConfig, engine).then((entity) => {\n      entity.isActive = entityConfig.isActive ?? true;\n      const { position, rotation, scale } = entityConfig;\n      if (position) entity.transform.position.copyFrom(position);\n      if (rotation) entity.transform.rotation.copyFrom(rotation);\n      if (scale) entity.transform.scale.copyFrom(scale);\n      return entity;\n    });\n  }\n\n  private static getEntityByConfig(entityConfig: IEntity, engine: Engine): Promise<Entity> {\n    // @ts-ignore\n    const assetRefId: string = entityConfig.assetRefId;\n    if (assetRefId) {\n      return (\n        engine.resourceManager\n          // @ts-ignore\n          .getResourceByRef<Entity>({ refId: assetRefId, key: entityConfig.key, isClone: entityConfig.isClone })\n          .then((entity) => {\n            entity.name = entityConfig.name;\n            return entity;\n          })\n      );\n    } else {\n      const entity = new Entity(engine, entityConfig.name);\n      return Promise.resolve(entity);\n    }\n  }\n\n  static parseClassObject(\n    item: IClassObject,\n    engine: Engine,\n    resourceManager: any = engine.resourceManager\n  ): Promise<any> {\n    const Class = Loader.getClass(item.class);\n    const params = item.constructParams ?? [];\n    const instance = new Class(...params);\n    return this.parsePropsAndMethods(instance, item, engine, resourceManager);\n  }\n\n  static parseBasicType(\n    value: IBasicType,\n    engine: Engine,\n    resourceManager: any = engine.resourceManager\n  ): Promise<any> {\n    if (Array.isArray(value)) {\n      return Promise.all(value.map((item) => this.parseBasicType(item, engine, resourceManager)));\n    } else if (typeof value === \"object\" && value != null) {\n      if (this._isClass(value)) {\n        // class object\n        return this.parseClassObject(value, engine, resourceManager);\n      } else if (this._isRef(value)) {\n        // reference object\n        return resourceManager.getResourceByRef(value);\n      } else {\n        // basic type\n        return Promise.resolve(value);\n      }\n    } else {\n      return Promise.resolve(value);\n    }\n  }\n\n  static parsePropsAndMethods(\n    instance: any,\n    item: Omit<IClassObject, \"class\">,\n    engine: Engine,\n    resourceManager: any = engine.resourceManager\n  ) {\n    const promises = [];\n    if (item.methods) {\n      for (let methodName in item.methods) {\n        const methodParams = item.methods[methodName];\n        for (let i = 0, count = methodParams.length; i < count; i++) {\n          const params = methodParams[i];\n          const promise = this.parseMethod(instance, methodName, params, engine, resourceManager);\n          promises.push(promise);\n        }\n      }\n    }\n\n    if (item.props) {\n      for (let key in item.props) {\n        const value = item.props[key];\n        const promise = this.parseBasicType(value, engine).then((v) => {\n          return (instance[key] = v);\n        });\n        promises.push(promise);\n      }\n    }\n\n    return Promise.all(promises).then(() => {\n      const handle = this.customParseComponentHandles[instance.constructor.name];\n      if (handle) return handle(instance, item, engine);\n      else return instance;\n    });\n  }\n\n  static parseMethod(\n    instance: any,\n    methodName: string,\n    methodParams: Array<IBasicType>,\n    engine: Engine,\n    resourceManager: any = engine.resourceManager\n  ) {\n    return Promise.all(methodParams.map((param) => this.parseBasicType(param, engine, resourceManager))).then(\n      (result) => {\n        return instance[methodName](...result);\n      }\n    );\n  }\n\n  private static _isClass(value: any): value is IClassObject {\n    return value[\"class\"] != undefined;\n  }\n\n  private static _isRef(value: any): value is IAssetRef {\n    return value[\"refId\"] != undefined;\n  }\n}\n","import { Engine, Entity } from \"@galacean/engine-core\";\nimport type { IEntity, IPrefabFile } from \"./PrefabDesign\";\nimport { ReflectionParser } from \"./ReflectionParser\";\n\nexport class PrefabParser {\n  static parseChildren(entitiesConfig: Map<string, IEntity>, entities: Map<string, Entity>, parentId: string) {\n    const children = entitiesConfig.get(parentId).children;\n    if (children && children.length > 0) {\n      const parent = entities.get(parentId);\n      for (let i = 0; i < children.length; i++) {\n        const childId = children[i];\n        const entity = entities.get(childId);\n        parent.addChild(entity);\n        this.parseChildren(entitiesConfig, entities, childId);\n      }\n    }\n  }\n}\n","import {\n  Animator,\n  Camera,\n  Component,\n  DirectLight,\n  Entity,\n  MeshRenderer,\n  ParticleRenderer,\n  Transform,\n  PointLight,\n  SpotLight,\n  Script,\n  SpriteMask,\n  SpriteRenderer,\n  TextRenderer\n} from \"@galacean/engine-core\";\n\nexport const ComponentMap: Record<string, new (entity: Entity) => Component> = {\n  Transform,\n  Animator,\n  DirectLight,\n  Camera,\n  MeshRenderer,\n  ParticleRenderer,\n  PointLight,\n  SpotLight,\n  Script,\n  SpriteMask,\n  SpriteRenderer,\n  TextRenderer\n};\n","import {\n  AnimationArrayCurve,\n  AnimationClip,\n  AnimationColorCurve,\n  AnimationCurve,\n  AnimationEvent,\n  AnimationFloatArrayCurve,\n  AnimationFloatCurve,\n  AnimationQuaternionCurve,\n  AnimationVector2Curve,\n  AnimationVector3Curve,\n  AnimationVector4Curve,\n  Engine,\n  Keyframe,\n  KeyframeValueType\n} from \"@galacean/engine-core\";\nimport { Color, Quaternion, Vector2, Vector3, Vector4 } from \"@galacean/engine-math\";\nimport type { BufferReader } from \"../../utils/BufferReader\";\nimport { decoder } from \"../../utils/Decorator\";\nimport { ComponentMap } from \"./ComponentMap\";\n\nexport { ComponentMap } from \"./ComponentMap\";\n\nexport enum InterpolableValueType {\n  Float,\n  FloatArray,\n  Vector2,\n  Vector3,\n  Vector4,\n  Quaternion,\n  Color,\n  Array,\n  Boolean\n}\n\n@decoder(\"AnimationClip\")\nexport class AnimationClipDecoder {\n  public static decode(engine: Engine, bufferReader: BufferReader): Promise<AnimationClip> {\n    return new Promise((resolve) => {\n      const name = bufferReader.nextStr();\n      const clip = new AnimationClip(name);\n      const eventsLen = bufferReader.nextUint16();\n      for (let i = 0; i < eventsLen; ++i) {\n        const event = new AnimationEvent();\n        event.time = bufferReader.nextFloat32();\n        event.functionName = bufferReader.nextStr();\n        event.parameter = JSON.parse(bufferReader.nextStr()).val;\n        clip.addEvent(event);\n      }\n\n      const curveBindingsLen = bufferReader.nextUint16();\n\n      for (let i = 0; i < curveBindingsLen; ++i) {\n        const relativePath = bufferReader.nextStr();\n        const componentStr = bufferReader.nextStr();\n        const componentType = ComponentMap[componentStr];\n        const property = bufferReader.nextStr();\n        let curve: AnimationCurve<KeyframeValueType>;\n        const interpolation = bufferReader.nextUint8();\n        const keysLen = bufferReader.nextUint16();\n        const curveType = bufferReader.nextStr();\n\n        switch (curveType) {\n          case \"AnimationFloatCurve\": {\n            curve = curve || new AnimationFloatCurve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<number>();\n              keyframe.time = bufferReader.nextFloat32();\n              keyframe.value = bufferReader.nextFloat32();\n              keyframe.inTangent = bufferReader.nextFloat32();\n              keyframe.outTangent = bufferReader.nextFloat32();\n              (<AnimationFloatCurve>curve).addKey(keyframe);\n            }\n            break;\n          }\n          case \"AnimationArrayCurve\": {\n            curve = curve || new AnimationArrayCurve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<number[]>();\n              keyframe.time = bufferReader.nextFloat32();\n              const len = bufferReader.nextUint16();\n              keyframe.value = Array.from(bufferReader.nextFloat32Array(len));\n              keyframe.inTangent = Array.from(bufferReader.nextFloat32Array(len));\n              keyframe.outTangent = Array.from(bufferReader.nextFloat32Array(len));\n              (<AnimationArrayCurve>curve).addKey(keyframe);\n            }\n            break;\n          }\n          case \"AnimationFloatArrayCurve\": {\n            curve = curve || new AnimationFloatArrayCurve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<Float32Array>();\n              keyframe.time = bufferReader.nextFloat32();\n              const len = bufferReader.nextUint16();\n              keyframe.value = bufferReader.nextFloat32Array(len);\n              keyframe.inTangent = Array.from(bufferReader.nextFloat32Array(len));\n              keyframe.outTangent = Array.from(bufferReader.nextFloat32Array(len));\n              (<AnimationFloatArrayCurve>curve).addKey(keyframe);\n            }\n            break;\n          }\n          case \"AnimationVector2Curve\": {\n            curve = curve || new AnimationVector2Curve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<Vector2>();\n              keyframe.time = bufferReader.nextFloat32();\n              keyframe.value = new Vector2(bufferReader.nextFloat32(), bufferReader.nextFloat32());\n              keyframe.inTangent = new Vector2(bufferReader.nextFloat32(), bufferReader.nextFloat32());\n              keyframe.outTangent = new Vector2(bufferReader.nextFloat32(), bufferReader.nextFloat32());\n              (<AnimationVector2Curve>curve).addKey(keyframe);\n            }\n            break;\n          }\n          case \"AnimationVector3Curve\": {\n            curve = curve || new AnimationVector3Curve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<Vector3>();\n              keyframe.time = bufferReader.nextFloat32();\n              keyframe.value = new Vector3(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              keyframe.inTangent = new Vector3(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              keyframe.outTangent = new Vector3(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              (<AnimationVector3Curve>curve).addKey(keyframe);\n            }\n            break;\n          }\n          case \"AnimationVector4Curve\": {\n            curve = curve || new AnimationVector4Curve();\n            curve.interpolation = interpolation;\n            const keyframe = new Keyframe<Vector4>();\n            keyframe.time = bufferReader.nextFloat32();\n            keyframe.value = new Vector4(\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32()\n            );\n            keyframe.inTangent = new Vector4(\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32()\n            );\n            keyframe.outTangent = new Vector4(\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32(),\n              bufferReader.nextFloat32()\n            );\n            (<AnimationVector4Curve>curve).addKey(keyframe);\n            break;\n          }\n          case \"AnimationColorCurve\": {\n            curve = curve || new AnimationColorCurve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<Color>();\n              keyframe.time = bufferReader.nextFloat32();\n              keyframe.value = new Color(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              keyframe.inTangent = new Vector4(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              keyframe.outTangent = new Vector4(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              (<AnimationColorCurve>curve).addKey(keyframe);\n            }\n            break;\n          }\n          case \"AnimationQuaternionCurve\": {\n            curve = curve || new AnimationQuaternionCurve();\n            curve.interpolation = interpolation;\n            for (let j = 0; j < keysLen; ++j) {\n              const keyframe = new Keyframe<Quaternion>();\n              keyframe.time = bufferReader.nextFloat32();\n              keyframe.value = new Quaternion(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              keyframe.inTangent = new Vector4(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              keyframe.outTangent = new Vector4(\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32(),\n                bufferReader.nextFloat32()\n              );\n              (<AnimationQuaternionCurve>curve).addKey(keyframe);\n            }\n            break;\n          }\n        }\n        clip.addCurveBinding(relativePath, componentType, property, curve);\n      }\n\n      resolve(clip);\n    });\n  }\n}\n","import { Component, Entity, Scene } from \"@galacean/engine-core\";\nimport { IEntity, IScene } from \"../prefab/PrefabDesign\";\n\nexport class SceneParserContext {\n  entityMap: Map<string, Entity> = new Map();\n  components: Map<string, Component> = new Map();\n  assets: Map<string, any> = new Map();\n  entityConfigMap: Map<string, IEntity> = new Map();\n  rootIds: string[] = [];\n  constructor(public readonly originalData: IScene, public readonly scene: Scene) {}\n\n  destroy() {\n    this.entityMap.clear();\n    this.components.clear();\n    this.assets.clear();\n    this.entityConfigMap.clear();\n    this.rootIds.length = 0;\n  }\n}\n","import { Engine, Entity, Loader, Scene } from \"@galacean/engine-core\";\nimport { IEntity, IScene } from \"../prefab/PrefabDesign\";\nimport { PrefabParser } from \"../prefab/PrefabParser\";\nimport { ReflectionParser } from \"../prefab/ReflectionParser\";\nimport { SceneParserContext } from \"./SceneParserContext\";\n\n/** @Internal */\nexport class SceneParser {\n  /**\n   * Parse scene data.\n   * @param engine - the engine of the parser context\n   * @param sceneData - scene data which is exported by editor\n   * @returns a promise of scene\n   */\n  static parse(engine: Engine, sceneData: IScene): Promise<Scene> {\n    const scene = new Scene(engine);\n    const context = new SceneParserContext(sceneData, scene);\n    const parser = new SceneParser(context);\n    parser.start();\n    return parser.promise;\n  }\n\n  /**\n   * The promise of parsed scene.\n   */\n  readonly promise: Promise<Scene>;\n\n  private _resolve: (scene: Scene) => void;\n  private _reject: (reason: any) => void;\n  private _engine: Engine;\n\n  constructor(public readonly context: SceneParserContext) {\n    this._engine = this.context.scene.engine;\n    this._organizeEntities = this._organizeEntities.bind(this);\n    this._parseComponents = this._parseComponents.bind(this);\n    this._clearAndResolveScene = this._clearAndResolveScene.bind(this);\n    this.promise = new Promise<Scene>((resolve, reject) => {\n      this._reject = reject;\n      this._resolve = resolve;\n    });\n  }\n\n  /** start parse the scene */\n  start() {\n    this._parseEntities()\n      .then(this._organizeEntities)\n      .then(this._parseComponents)\n      .then(this._clearAndResolveScene)\n      .then(this._resolve)\n      .catch(this._reject);\n  }\n\n  private _parseEntities(): Promise<Entity[]> {\n    const entitiesConfig = this.context.originalData.entities;\n    const entityConfigMap = this.context.entityConfigMap;\n    const entitiesMap = this.context.entityMap;\n    const rootIds = this.context.rootIds;\n    const engine = this._engine;\n    const promises = entitiesConfig.map((entityConfig) => {\n      entityConfigMap.set(entityConfig.id, entityConfig);\n      // record root entities\n      if (!entityConfig.parent) rootIds.push(entityConfig.id);\n      return ReflectionParser.parseEntity(entityConfig, engine);\n    });\n\n    return Promise.all(promises).then((entities) => {\n      for (let i = 0, l = entities.length; i < l; i++) {\n        entitiesMap.set(entitiesConfig[i].id, entities[i]);\n      }\n      return entities;\n    });\n  }\n\n  private _organizeEntities() {\n    const { entityConfigMap, entityMap, scene, rootIds } = this.context;\n    for (const rootId of rootIds) {\n      PrefabParser.parseChildren(entityConfigMap, entityMap, rootId);\n    }\n    const rootEntities = rootIds.map((id) => entityMap.get(id));\n    for (let i = 0; i < rootEntities.length; i++) {\n      scene.addRootEntity(rootEntities[i]);\n    }\n  }\n\n  private _parseComponents(): Promise<any[]> {\n    const entitiesConfig = this.context.originalData.entities;\n    const entityMap = this.context.entityMap;\n\n    const promises = [];\n    for (let i = 0, l = entitiesConfig.length; i < l; i++) {\n      const entityConfig = entitiesConfig[i];\n      const entity = entityMap.get(entityConfig.id);\n      for (let i = 0; i < entityConfig.components.length; i++) {\n        const componentConfig = entityConfig.components[i];\n        const key = !componentConfig.refId ? componentConfig.class : componentConfig.refId;\n        let component;\n        // TODO: remove hack code when support additional edit\n        if (key === \"Animator\") {\n          component = entity.getComponent(Loader.getClass(key));\n        }\n        component = component || entity.addComponent(Loader.getClass(key));\n        const promise = ReflectionParser.parsePropsAndMethods(component, componentConfig, entity.engine);\n        promises.push(promise);\n      }\n    }\n    return Promise.all(promises);\n  }\n\n  private _clearAndResolveScene() {\n    const scene = this.context.scene;\n    this.context.destroy();\n    return scene;\n  }\n}\n","import {\n  AssetPromise,\n  Loader,\n  LoadItem,\n  Mesh,\n  ModelMesh,\n  resourceLoader,\n  ResourceManager,\n  UnlitMaterial\n} from \"@galacean/engine-core\";\nimport { decode } from \"../..\";\n\n@resourceLoader(\"Mesh\", [\"prefab\"], true)\nexport class MeshLoader extends Loader<ModelMesh> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<ModelMesh> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<ArrayBuffer>(item.url, { type: \"arraybuffer\" }).then((data) => {\n        decode<ModelMesh>(data, resourceManager.engine).then((mesh) => {\n          resolve(mesh);\n        });\n      });\n    });\n  }\n}\n","import {\n  AssetPromise,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  Texture2D} from \"@galacean/engine-core\";\nimport { decode } from \"../..\";\n\n@resourceLoader(\"EditorTexture2D\", [\"prefab\"], true)\nexport class EditorTextureLoader extends Loader<Texture2D> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Texture2D> {\n    return new AssetPromise((resolve) => {\n      this.request<ArrayBuffer>(item.url, { type: \"arraybuffer\" }).then((data) => {\n        decode<Texture2D>(data, resourceManager.engine).then((texture) => {\n          resolve(texture);\n        });\n      });\n    });\n  }\n}\n","import { Engine } from \"@galacean/engine-core\";\nimport { BufferReader } from \"./utils/BufferReader\";\nimport { decoderMap, decoder } from \"./utils/Decorator\";\nimport { FileHeader } from \"./utils/FileHeader\";\n\nexport { MeshDecoder } from \"./resources/mesh/MeshDecoder\";\nexport { Texture2DDecoder } from \"./resources/texture2D/TextureDecoder\";\nexport { ReflectionParser } from \"./resources/prefab/ReflectionParser\";\nexport { PrefabParser } from \"./resources/prefab/PrefabParser\";\nexport * from \"./resources/animationClip/AnimationClipDecoder\";\nexport type { IModelMesh } from \"./resources/mesh/IModelMesh\";\n\n/**\n * Decode engine binary resource.\n * @param arrayBuffer - array buffer of decode binary file\n * @param engine - engine\n * @returns\n */\nexport function decode<T>(arrayBuffer: ArrayBuffer, engine: Engine): Promise<T> {\n  const header = FileHeader.decode(arrayBuffer);\n  const bufferReader = new BufferReader(arrayBuffer, header.headerLength, header.dataLength);\n  return decoderMap[header.type].decode(engine, bufferReader).then((object) => {\n    object.name = header.name;\n    return object;\n  });\n}\n\nexport * from \"./resources/prefab/PrefabDesign\";\nexport * from \"./resources/scene/SceneParser\";\nexport * from \"./resources/scene/MeshLoader\";\nexport * from \"./resources/scene/EditorTextureLoader\";\n","import {\n  resourceLoader,\n  Loader,\n  AssetPromise,\n  AssetType,\n  LoadItem,\n  ResourceManager,\n  ModelMesh\n} from \"@galacean/engine-core\";\nimport { decode } from \"./resource-deserialize\";\n\n@resourceLoader(AssetType.Mesh, [\"mesh\"])\nclass MeshLoader extends Loader<ModelMesh> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<ModelMesh> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<any>(item.url, {\n        ...item,\n        type: \"arraybuffer\"\n      })\n        .then((data) => {\n          return decode<ModelMesh>(data, resourceManager.engine);\n        })\n        .then((mesh) => {\n          resolve(mesh);\n        })\n        .catch(reject);\n    });\n  }\n}\n","import { AssetPromise, AssetType, Font, Loader, LoadItem, resourceLoader, ResourceManager } from \"@galacean/engine-core\";\n\n@resourceLoader(AssetType.SourceFont, [\"ttf\", \"otf\", \"woff\"], false)\nclass SourceFontLoader extends Loader<Font> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Font> {\n    return new AssetPromise((resolve, reject) => {\n      const { url } = item;\n      this._registerFont(url, url)\n        .then(() => {\n          const font = new Font(resourceManager.engine, url);\n          resolve(font);\n        })\n        .catch((e) => {\n          reject(`load font ${url} fail`);\n        });\n    });\n  }\n\n  private async _registerFont(fontName: string, fontUrl: string): Promise<void> {\n    const fontFace = new FontFace(fontName, `url(${fontUrl})`);\n    await fontFace.load();\n    document.fonts.add(fontFace);\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Engine,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  Sprite,\n  SpriteAtlas,\n  Texture2D\n} from \"@galacean/engine-core\";\nimport { AtlasConfig, AtlasSprite } from \"@galacean/engine-core/types/2d/atlas/types\";\nimport { Rect, Vector2, Vector4 } from \"@galacean/engine-math\";\nimport { GLTFUtil } from \"./gltf/GLTFUtil\";\n\n@resourceLoader(AssetType.SpriteAtlas, [\"atlas\"], false)\nclass SpriteAtlasLoader extends Loader<SpriteAtlas> {\n  private _tempRect: Rect = new Rect();\n  private _tempVec2: Vector2 = new Vector2();\n  private _tempVec4: Vector4 = new Vector4();\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<SpriteAtlas> {\n    return new AssetPromise<SpriteAtlas>((resolve, reject, _, onCancel) => {\n      const chainPromises = [];\n      onCancel(() => {\n        for (let i = 0; i < chainPromises.length; i++) {\n          chainPromises[i].cancel();\n        }\n      });\n      const configPromise = this.request<AtlasConfig>(item.url, {\n        ...item,\n        type: \"json\"\n      });\n      chainPromises.push(configPromise);\n      configPromise\n        .then((atlasData) => {\n          const { atlasItems, mipmap, anisoLevel, filterMode, wrapModeU, wrapModeV, format } = atlasData;\n          const atlasItemsLen = atlasItems ? atlasItems.length : 0;\n          const { engine } = resourceManager;\n          const spriteAtlas = new SpriteAtlas(engine);\n          if (atlasItemsLen < 0) {\n            resolve(spriteAtlas);\n            return;\n          }\n          chainPromises.length = 0;\n          for (let i = 0; i < atlasItems.length; i++) {\n            const atlasItem = atlasItems[i];\n            if (atlasItem.img) {\n              chainPromises.push(\n                resourceManager\n                  .load<Texture2D>({\n                    url: GLTFUtil.parseRelativeUrl(item.url, atlasItem.img),\n                    type: AssetType.Texture2D,\n                    params: { format, mipmap }\n                  })\n                  .then((texture: Texture2D) => {\n                    anisoLevel && (texture.anisoLevel = anisoLevel);\n                    filterMode !== undefined && (texture.filterMode = filterMode);\n                    wrapModeU !== undefined && (texture.wrapModeU = wrapModeU);\n                    wrapModeV !== undefined && (texture.wrapModeV = wrapModeV);\n                    for (let i = 0; i < atlasItem.sprites.length; i++) {\n                      // @ts-ignore\n                      spriteAtlas._addSprite(this._makeSprite(engine, atlasItem.sprites[i], texture));\n                    }\n                  })\n                  .catch(reject)\n              );\n            } else {\n              for (let i = 0; i < atlasItem.sprites.length; i++) {\n                // @ts-ignore\n                spriteAtlas._addSprite(this._makeSprite(engine, atlasItem.sprites[i]));\n              }\n            }\n          }\n          AssetPromise.all(chainPromises)\n            .then(() => {\n              resolve(spriteAtlas);\n            })\n            .catch(reject);\n        })\n        .catch(reject);\n    });\n  }\n\n  private _makeSprite(engine: Engine, config: AtlasSprite, texture?: Texture2D): Sprite {\n    // Generate a SpriteAtlas object.\n    const { region, atlasRegionOffset, atlasRegion, pivot, border } = config;\n    const sprite = new Sprite(\n      engine,\n      texture,\n      region ? this._tempRect.set(region.x, region.y, region.w, region.h) : undefined,\n      pivot ? this._tempVec2.set(pivot.x, pivot.y) : undefined,\n      border ? this._tempVec4.set(border.x, border.y, border.z, border.w) : undefined,\n      config.name\n    );\n    if (texture) {\n      const invW = 1 / texture.width;\n      const invH = 1 / texture.height;\n      sprite.atlasRegion.set(atlasRegion.x * invW, atlasRegion.y * invH, atlasRegion.w * invW, atlasRegion.h * invH);\n      if (atlasRegionOffset) {\n        const { x: offsetLeft, y: offsetTop, z: offsetRight, w: offsetBottom } = atlasRegionOffset;\n        sprite.atlasRegionOffset.set(offsetLeft * invW, offsetTop * invH, offsetRight * invW, offsetBottom * invH);\n      }\n      config.atlasRotated && (sprite.atlasRotated = true);\n    }\n    return sprite;\n  }\n}\n","import {\n  resourceLoader,\n  Loader,\n  AssetPromise,\n  AssetType,\n  LoadItem,\n  Sprite,\n  Texture2D,\n  ResourceManager,\n  SpriteAtlas\n} from \"@galacean/engine-core\";\n\n@resourceLoader(AssetType.Sprite, [\"sprite\"], false)\nclass SpriteLoader extends Loader<Sprite> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Sprite> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<any>(item.url, {\n        ...item,\n        type: \"json\"\n      })\n        .then((data) => {\n          if (data.belongToAtlas) {\n            resourceManager\n              // @ts-ignore\n              .getResourceByRef<SpriteAtlas>(data.belongToAtlas)\n              .then((atlas) => {\n                resolve(atlas.getSprite(data.fullPath));\n              })\n              .catch(reject);\n          } else if (data.texture) {\n            resourceManager\n              // @ts-ignore\n              .getResourceByRef<Texture2D>(data.texture)\n              .then((texture) => {\n                resolve(new Sprite(resourceManager.engine, texture, data.region, data.pivot, data.border));\n              })\n              .catch(reject);\n          } else {\n            resolve(new Sprite(resourceManager.engine, null, data.region, data.pivot, data.border));\n          }\n        })\n        .catch(reject);\n    });\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  Texture2D,\n  TextureFormat\n} from \"@galacean/engine-core\";\n\n@resourceLoader(AssetType.Texture2D, [\"png\", \"jpg\", \"webp\", \"jpeg\"])\nclass Texture2DLoader extends Loader<Texture2D> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Texture2D> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<HTMLImageElement>(item.url, {\n        ...item,\n        type: \"image\"\n      })\n        .then((image) => {\n          const params = item.params ?? {};\n          const texture = new Texture2D(\n            resourceManager.engine,\n            image.width,\n            image.height,\n            params.format,\n            params.mipmap\n          );\n          /** @ts-ignore */\n          if (!texture._platformTexture) return;\n          texture.setImageSource(image);\n          texture.generateMipmaps();\n\n          if (item.url.indexOf(\"data:\") !== 0) {\n            const splitPath = item.url.split(\"/\");\n            texture.name = splitPath[splitPath.length - 1];\n          }\n          resolve(texture);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n\n/**\n * Texture2D loader params interface.\n */\nexport interface Texture2DParams {\n  /** Texture format. default  `TextureFormat.R8G8B8A8` */\n  format: TextureFormat;\n  /** Whether to use multi-level texture, default is true. */\n  mipmap: boolean;\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  TextureCubeFace,\n  TextureCube\n} from \"@galacean/engine-core\";\n\n@resourceLoader(AssetType.TextureCube, [\"\"])\nclass TextureCubeLoader extends Loader<TextureCube> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<TextureCube> {\n    return new AssetPromise((resolve, reject) => {\n      Promise.all(\n        item.urls.map((url) =>\n          this.request<HTMLImageElement>(url, {\n            ...item,\n            type: \"image\"\n          })\n        )\n      )\n        .then((images) => {\n          const { width, height } = images[0];\n\n          if (width !== height) {\n            console.error(\"The cube texture must have the same width and height\");\n            return;\n          }\n\n          const tex = new TextureCube(resourceManager.engine, width);\n\n          /** @ts-ignore */\n          if (!tex._platformTexture) return;\n\n          for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n            tex.setImageSource(TextureCubeFace.PositiveX + faceIndex, images[faceIndex], 0);\n          }\n\n          tex.generateMipmaps();\n          resolve(tex);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n","import {\n  resourceLoader,\n  Loader,\n  AssetPromise,\n  AssetType,\n  LoadItem,\n  ResourceManager,\n  AnimationClip\n} from \"@galacean/engine-core\";\nimport { decode } from \"./resource-deserialize\";\n\n@resourceLoader(AssetType.AnimationClip, [\"ani\"])\nclass AnimationClipLoader extends Loader<AnimationClip> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<AnimationClip> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<any>(item.url, {\n        ...item,\n        type: \"arraybuffer\"\n      })\n        .then((data) => decode<AnimationClip>(data, resourceManager.engine).then(resolve))\n        .catch(reject);\n    });\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  BackgroundMode,\n  Engine,\n  Font,\n  Loader,\n  LoadItem,\n  PrimitiveMesh,\n  resourceLoader,\n  ResourceManager,\n  Scene,\n  SkyBoxMaterial\n} from \"@galacean/engine-core\";\nimport { IClassObject, ReflectionParser, SceneParser } from \"./resource-deserialize\";\n\n@resourceLoader(AssetType.Scene, [\"prefab\"], true)\nclass SceneLoader extends Loader<Scene> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Scene> {\n    const { engine } = resourceManager;\n    return new AssetPromise((resolve, reject) => {\n      this.request<any>(item.url, { type: \"json\" })\n        .then((data) => {\n          // @ts-ignore\n          engine.resourceManager.initVirtualResources(data.files);\n          return SceneParser.parse(engine, data).then((scene) => {\n            // parse ambient light\n            const ambient = data.scene.ambient;\n            let ambientLightPromise = Promise.resolve();\n            if (ambient.ambientLight) {\n              ambientLightPromise = resourceManager\n                // @ts-ignore\n                .getResourceByRef<any>(data.scene.ambient.ambientLight)\n                .then((light) => {\n                  scene.ambientLight = light;\n                  scene.ambientLight.diffuseIntensity = ambient.diffuseIntensity;\n                  scene.ambientLight.specularIntensity = ambient.specularIntensity;\n                });\n            } else {\n              scene.ambientLight.diffuseIntensity = ambient.diffuseIntensity;\n              scene.ambientLight.specularIntensity = ambient.specularIntensity;\n              scene.ambientLight.diffuseSolidColor.copyFrom(ambient.diffuseSolidColor);\n            }\n\n            const background = data.scene.background;\n            scene.background.mode = background.mode;\n\n            let backgroundPromise = Promise.resolve();\n\n            switch (scene.background.mode) {\n              case BackgroundMode.SolidColor:\n                scene.background.solidColor.copyFrom(background.color);\n                break;\n              case BackgroundMode.Sky:\n                if (background.sky) {\n                  // @ts-ignore\n                  backgroundPromise = resourceManager.getResourceByRef<any>(background.sky).then((light) => {\n                    const sky = scene.background.sky;\n                    const skyMaterial = new SkyBoxMaterial(engine);\n                    skyMaterial.textureCubeMap = light.specularTexture;\n                    skyMaterial.textureDecodeRGBM = true;\n                    sky.material = skyMaterial;\n                    sky.mesh = PrimitiveMesh.createCuboid(engine, 1, 1, 1);\n                  });\n                }\n                break;\n              case BackgroundMode.Texture:\n                if (background.texture) {\n                  // @ts-ignore\n                  backgroundPromise = resourceManager.getResourceByRef<any>(background.texture).then((texture) => {\n                    scene.background.texture = texture;\n                  });\n                }\n                break;\n            }\n\n            // parse shadow\n            const shadow = data.scene.shadow;\n            if (shadow) {\n              if (shadow.castShadows != undefined) scene.castShadows = shadow.castShadows;\n              if (shadow.shadowResolution != undefined) scene.shadowResolution = shadow.shadowResolution;\n              if (shadow.shadowDistance != undefined) scene.shadowDistance = shadow.shadowDistance;\n              if (shadow.shadowCascades != undefined) scene.shadowCascades = shadow.shadowCascades;\n            }\n\n            const fog = data.scene.fog;\n            if (fog) {\n              if (fog.fogMode != undefined) scene.fogMode = fog.fogMode;\n              if (fog.fogStart != undefined) scene.fogStart = fog.fogStart;\n              if (fog.fogEnd != undefined) scene.fogEnd = fog.fogEnd;\n              if (fog.fogDensity != undefined) scene.fogDensity = fog.fogDensity;\n              if (fog.fogColor != undefined) scene.fogColor.copyFrom(fog.fogColor);\n            }\n\n            return Promise.all([ambientLightPromise, backgroundPromise]).then(() => {\n              resolve(scene);\n            });\n          });\n        })\n        .catch(reject);\n    });\n  }\n}\n\nReflectionParser.registerCustomParseComponent(\n  \"TextRenderer\",\n  async (instance: any, item: Omit<IClassObject, \"class\">, engine: Engine) => {\n    const { props } = item;\n    if (!props.font) {\n      // @ts-ignore\n      instance.font = Font.createFromOS(engine, props.fontFamily || \"Arial\");\n    }\n    return instance;\n  }\n);\n"],"names":["AnimatorControllerLoader","load","item","resourceManager","AssetPromise","resolve","reject","request","url","type","then","data","animatorController","AnimatorController","layers","promises","forEach","layerData","layerIndex","name","blendingMode","weight","stateMachine","stateMachineData","layer","AnimatorControllerLayer","states","AnimatorStateMachine","stateData","stateIndex","speed","wrapMode","clipStartNormalizedTime","clipEndNormalizedTime","isDefaultState","clip","clipData","state","addState","defaultState","clipStartTime","clipEndTime","push","Promise","getResourceByRef","transitions","transitionData","targetStateName","duration","offset","exitTime","sourceState","findStateByName","destState","transition","AnimatorStateTransition","destinationState","addTransition","addLayer","all","catch","Loader","resourceLoader","AssetType","isBase64","test","BufferLoader","base64Str","slice","RegExp","$1","length","result","Uint8Array","from","atob","c","charCodeAt","buffer","Buffer","EnvLoader","arraybuffer","shArray","Float32Array","shByteLength","size","Uint16Array","texture","TextureCube","engine","filterMode","TextureFilterMode","Trilinear","mipmapCount","mipLevel","mipSize","face","dataSize","setPixelBuffer","TextureCubeFace","PositiveX","ambientLight","AmbientLight","sh","SphericalHarmonics3","diffuseMode","DiffuseMode","SphericalHarmonics","copyFromArray","diffuseSphericalHarmonics","specularTexture","specularTextureDecodeRGBM","e","Env","FontLoader","fontName","fontUrl","_registerFont","font","Font","fontFace","FontFace","document","fonts","add","ParserContext","hasSkinned","chainPromises","accessorBufferCache","texturesPromiseInfo","PromiseInfo","materialsPromiseInfo","meshesPromiseInfo","animationClipsPromiseInfo","defaultSceneRootPromiseInfo","masterPromiseInfo","promiseMap","_initPromiseInfo","promiseInfo","promise","setProgress","onCancel","BufferInfo","interleaved","stride","vertexBindingInfos","AccessorComponentType","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","UNSIGNED_INT","FLOAT","AccessorType","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","AnimationChannelTargetPath","TRANSLATION","ROTATION","SCALE","WEIGHTS","AnimationSamplerInterpolation","Linear","Step","CubicSpine","CameraType","PERSPECTIVE","ORTHOGRAPHIC","ImageMimeType","JPEG","PNG","MaterialAlphaMode","OPAQUE","MASK","BLEND","TextureMagFilter","NEAREST","LINEAR","TextureMinFilter","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","TextureWrapMode","CLAMP_TO_EDGE","MIRRORED_REPEAT","REPEAT","GLTFUtil","floatBufferToVector2Array","bufferLen","array","Array","i","Vector2","floatBufferToVector3Array","Vector3","floatBufferToVector4Array","Vector4","floatBufferToColorArray","isColor3","colors","Color","decodeText","TextDecoder","decode","s","il","String","fromCharCode","decodeURIComponent","encodeURIComponent","getAccessorTypeSize","accessorType","getComponentType","componentType","Int8Array","Int16Array","Uint32Array","getNormalizedComponentScale","Error","getAccessorBuffer","context","gltf","accessor","buffers","bufferViews","bufferView","bufferByteOffset","byteOffset","TypedArray","dataElmentSize","dataElementBytes","BYTES_PER_ELEMENT","elementStride","accessorCount","count","bufferStride","byteStride","bufferInfo","undefined","bufferSlice","Math","floor","bufferCacheKey","sparse","processingSparseData","getAccessorData","arrayBuffer","accessorByteOffset","hasOwnProperty","bufferViewByteOffset","accessorTypeSize","arrayType","uint8Array","accessorByteSize","originalBufferView","byteLength","j","typedArray","indices","values","indicesBufferView","valuesBufferView","indicesArrayBuffer","valuesArrayBuffer","indicesByteOffset","indicesByteLength","valuesByteOffset","valuesByteLength","indicesType","indicesArray","valuesArray","replaceIndex","getBufferViewData","originData","IndexTypeArray","getIndexFormat","IndexFormat","UInt8","UInt16","UInt32","getElementFormat","normalized","VertexElementFormat","Float","NormalizedShort2","Short2","NormalizedShort4","Short4","NormalizedUShort2","UShort2","NormalizedUShort4","UShort4","NormalizedByte4","Byte4","NormalizedUByte4","UByte4","loadImageBuffer","imageBuffer","blob","window","Blob","img","Image","onerror","onload","requestAnimationFrame","onabort","crossOrigin","src","URL","createObjectURL","isAbsoluteUrl","parseRelativeUrl","baseUrl","relativeUrl","substring","lastIndexOf","_formatRelativePath","parseGLB","glb","UINT32_LENGTH","GLB_HEADER_MAGIC","GLB_HEADER_LENGTH","GLB_CHUNK_TYPES","JSON","BIN","dataView","DataView","header","magic","getUint32","version","console","error","toString","chunkLength","chunkType","glTFData","parse","currentOffset","path","split","filter","Boolean","reduce","acc","cur","pop","join","Parser","parseEngineResource","extensionName","extensionSchema","parseResource","extra","parsers","_extensionParsers","createEngineResource","hasExtensionParser","initialize","_addExtensionParser","extensionParser","registerExtension","parser","ExtensionParser","schema","KHR_draco_mesh_compression","_decoder","DRACODecoder","gltfPrimitive","accessors","attributes","gltfAttributeMap","attributeMap","attributeTypeMap","attributeName","accessorDef","indexAccessor","indexType","taskConfig","attributeIDs","attributeTypes","useUniqueIDs","bufferViewIndex","parsedGeometry","KHR_lights_punctual","entity","color","intensity","range","spot","glTFResource","light","addComponent","DirectLight","PointLight","SpotLight","set","distance","innerConeAngle","outerConeAngle","PI","angle","penumbra","lights","MaterialParser","textures","materials","extensions","pbrMetallicRoughness","normalTexture","occlusionTexture","emissiveTexture","emissiveFactor","alphaMode","alphaCutoff","doubleSided","KHR_materials_unlit","KHR_materials_pbrSpecularGlossiness","KHR_materials_clearcoat","KHR_materials_ior","OASIS_materials_remap","material","PBRMaterial","baseColorFactor","baseColorTexture","metallicFactor","roughnessFactor","metallicRoughnessTexture","baseColor","linearToGammaSpace","baseTexture","index","_parseTextureTransform","m","metallic","roughness","roughnessMetallicTexture","emissiveColor","scale","normalTextureIntensity","strength","texCoord","occlusionTextureIntensity","TextureCoordinate","UV1","occlusionTextureCoord","Logger","warn","renderFace","RenderFace","Double","Front","isTransparent","KHR_texture_transform","clearcoatFactor","clearcoatTexture","clearcoatRoughnessFactor","clearcoatRoughnessTexture","clearcoatNormalTexture","clearCoat","clearCoatRoughness","clearCoatTexture","clearCoatRoughnessTexture","clearCoatNormalTexture","ior","PBRSpecularMaterial","diffuseFactor","diffuseTexture","specularFactor","glossinessFactor","specularGlossinessTexture","specularColor","glossiness","UnlitMaterial","KHR_materials_variants","renderer","variants","mappings","map","variantNames","KHR_mesh_quantization","rotation","tilingOffset","z","w","x","y","GalaceanMaterialsRemap","AnimationParser","entities","animations","animationClipCount","animationClips","animationsIndices","gltfAnimation","channels","samplers","animationClip","AnimationClip","sampleDataCollection","gltfSampler","inputAccessor","input","outputAccessor","output","scaled","k","v","outputStride","interpolation","samplerInterpolation","InterpolationType","outputSize","gltfChannel","target","channelTargetEntity","node","relativePath","parent","ComponentType","propertyName","Transform","SkinnedMeshRenderer","curve","_addCurve","addCurveBinding","_animationsIndices","animationchannelTargetPath","sampleData","sampler","AnimationVector3Curve","n","keyframe","Keyframe","time","inTangent","value","outTangent","addKey","AnimationQuaternionCurve","Quaternion","AnimationFloatArrayCurve","subarray","BufferParser","_isGLB","uri","EntityParser","nodes","gltfNode","matrix","translation","Entity","_defaultName","transform","localMatrix","setPosition","setRotationQuaternion","setScale","_buildEntityTree","_createSceneRoots","children","childEntity","addChild","sceneID","scene","scenes","sceneRoots","rootEntity","defaultSceneRoot","MeshParser","gltfMesh","primitives","primitivePromises","mesh","ModelMesh","decodedGeometry","_parseMeshFromGLTFPrimitiveDraco","attributeSemantic","shapeIndex","keepMeshData","_parseMeshFromGLTFPrimitive","shapeAccessorIdx","targets","attributeAccessorIdx","meshes","meshPromises","getVertexBufferData","getBlendShapeData","getIndexBufferData","mode","vertexElements","vertexCount","bufferBindIndex","positions","boneIndices","boneWeights","attribute","accessorBuffer","dataElementSize","vertices","vertexElement","meshId","instanceId","elementNormalized","elementFormat","scaleFactor","elementOffset","VertexElement","vertexBuffer","BufferBindFlag","VertexBuffer","BufferUsage","Static","setData","setVertexBufferBinding","bounds","min","max","baseOffset","position","_tempVector3","Number","MAX_VALUE","clonePosition","clone","boneIndex","boneWeight","setVertexElements","indexData","setIndices","addSubMesh","_createBlendShape","uploadData","_positions","_boneIndices","_boneWeights","glTFMesh","glTFTargets","blendShapeNames","extras","targetNames","deltaPosBuffer","deltaNorBuffer","deltaTanBuffer","deltaPositions","deltaNormals","deltaTangents","blendShape","BlendShape","addFrame","addBlendShape","positionBuffer","setPositions","bufferData","normals","setNormals","texturecoords","setUVs","texturecoords1","texturecoords2","texturecoords3","texturecoords4","texturecoords5","texturecoords6","texturecoords7","setColors","tangents","setTangents","joints","setBoneIndices","weights","setBoneWeights","SceneParser","cameras","gltfCameras","cameraID","camera","meshID","_createCamera","_createRenderer","lightIndex","_createAnimator","cameraSchema","orthographic","perspective","Camera","xmag","ymag","zfar","znear","isOrthographic","nearClipPlane","farClipPlane","orthographicSize","aspectRatio","yfov","fieldOfView","enabled","skinID","blendShapeWeights","skinRenderer","skin","skins","MeshRenderer","materialIndex","gltfMeshPrimitives","remapMaterials","mtl","setMaterial","_getDefaultMaterial","element","semantic","enableVertexColor","gltfMeshes","animator","Animator","animatorStateMachine","uniqueName","makeUniqueStateName","animatorState","_defaultMaterial","BlinnPhongMaterial","SkinParser","gltfSkins","inverseBindMatrices","skeleton","jointCount","Skin","inverseBindMatrix","Matrix","jointIndex","jointName","rootBone","_findSkeletonRootBone","paths","unshift","rootNode","TextureParser","source","images","mimeType","imageName","ext","startsWith","KTX","Texture2D","textureName","_parseSampler","bufferViewData","image","width","height","setImageSource","generateMipmaps","magFilter","minFilter","wrapS","wrapT","Point","Bilinear","wrapModeU","_wrapMap","wrapModeV","GLTFTextureWrapMode","Clamp","Mirror","Repeat","Validator","asset","extensionsUsed","extensionsRequired","gltfVersion","info","extensionRequired","GLTFParser","pipes","_pipes","pipe","lastPipe","cancel","defaultPipeline","GLTFResource","destroy","_destroyed","EngineObject","GLTFLoader","params","Prefab","HDRLoader","_parseHeader","dataPosition","pixels","_readPixels","cubeSize","cubeMapData","_convertToCubemap","faceIndex","inputWidth","inputHeight","textureRight","_createCubemapData","_faceRight","textureLeft","_faceLeft","textureUp","_faceUp","textureDown","_faceBottom","textureFront","_faceFront","textureBack","_faceBack","texSize","faceData","textureArray","Uint8ClampedArray","rotDX1","subtract","rotDX2","_temp2Vector3","dy","fy","xv1","_temp3Vector3","xv2","_temp4Vector3","_temp5Vector3","normalize","_calcProjectionSpherical","_RGBEToLinear","_linearToRGBM","r","g","b","a","vDir","theta","atan2","phi","acos","dx","px","round","py","inputY","_readStringLine","uint8array","startIndex","line","character","endOfHeader","findFormat","lineIndex","sizeRegexp","match","exec","parseInt","scanLineWidth","dataRGBA","pos","ptrEnd","rgbeStart","scanLineBuffer","numScanLines","ptr","isEncodedRun","byteValue","l","off","pow","maxRange","maxRGB","M","ceil","_rightBottomBack","_rightBottomFront","_rightUpBack","_rightUpFront","_leftBottomBack","_leftBottomFront","_leftUpBack","_leftUpFront","HDR","JSONLoader","HEADER_LEN","COMPRESSED_2D","getMipmaps","ktxContainer","loadMipmaps","mipmaps","dataOffset","bytesOfKeyValueData","pixelWidth","pixelHeight","numberOfMipmapLevels","level","imageSize","Int32Array","numberOfFaces","byteArray","isValid","identifier","getEngineFormat","internalFormat","GLCompressedTextureInternalFormat","RGB_S3TC_DXT1_EXT","TextureFormat","DXT1","RGBA_S3TC_DXT5_EXT","DXT5","RGB_ETC1_WEBGL","ETC1_RGB","RGB8_ETC2","ETC2_RGB","RGB8_PUNCHTHROUGH_ALPHA1_ETC2","ETC2_RGBA5","RGBA8_ETC2_EAC","ETC2_RGBA8","RGB_PVRTC_2BPPV1_IMG","PVRTC_RGB2","RGBA_PVRTC_2BPPV1_IMG","PVRTC_RGBA2","RGB_PVRTC_4BPPV1_IMG","PVRTC_RGB4","RGBA_PVRTC_4BPPV1_IMG","PVRTC_RGBA4","RGBA_ASTC_4X4_KHR","ASTC_4x4","RGBA_ASTC_5X5_KHR","ASTC_5x5","RGBA_ASTC_6X6_KHR","ASTC_6x6","RGBA_ASTC_8X8_KHR","ASTC_8x8","RGBA_ASTC_10X10_KHR","ASTC_10x10","RGBA_ASTC_12X12_KHR","ASTC_12x12","formatName","khronosTextureContainerParser","facesExpected","withMipmaps","mapEngineFormat","headerDataView","endianness","littleEndian","parsedResult","glType","glTypeSize","glFormat","glInternalFormat","glBaseInternalFormat","pixelDepth","numberOfArrayElements","loadType","engineFormat","parseSingleKTX","ktx","parseCubeKTX","dataArray","mipmapsFaces","KTXCubeLoader","urls","parsedData","mipmap","miplevel","KTXCube","KTXLoader","bin","MaterialLoader","json","shaderData","key","materialShaderData","setVector2","setVector3","setVector4","setColor","setFloat","texturePromises","setTexture","shader","macros","renderState","PBRBaseMaterial","Shader","find","enableMacro","Material","BufferReader","_dataView","_littleEndian","_offset","nextUint8","getUint8","nextUint16","getUint16","nextUint32","nextInt32","getInt32","nextInt32Array","len","nextFloat32","getFloat32","nextFloat32Array","nextUint32Array","nextUint8Array","nextUint64","left","right","nextStr","strByteLength","nextImageData","nextImagesData","imagesLen","imagesData","skip","bytes","scan","maxByteLength","term","imageMapping","decoderMap","decoder","FileHeader","totalLength","headerLength","totalLen","fileVersion","typeLen","typeUint8Array","nameLen","nameUint8Array","dataLength","MeshDecoder","bufferReader","modelMesh","jsonDataString","encodedMeshData","copyFrom","float32Array","start","end","float32ArrayToVector3","uvs","float32ArrayToVector2","uv1","uv2","uv3","uv4","uv5","uv6","uv7","float32ArrayToVColor","float32ArrayToVector4","blendShapes","blendShapeData","frames","frameData","positionArray","deltaPosition","normalsArray","tangentsArray","subMeshes","subMesh","Texture2DDecoder","objectId","anisoLevel","format","isPixelBuffer","mipCount","texture2D","pixelBuffer","_objectPool","completedCount","onComplete","ReflectionParser","registerCustomParseComponent","handle","customParseComponentHandles","parseEntity","entityConfig","getEntityByConfig","isActive","assetRefId","refId","isClone","parseClassObject","Class","getClass","class","constructParams","instance","parsePropsAndMethods","parseBasicType","isArray","_isClass","_isRef","methods","methodName","methodParams","parseMethod","props","constructor","param","Map","PrefabParser","parseChildren","entitiesConfig","parentId","get","childId","ComponentMap","ParticleRenderer","Script","SpriteMask","SpriteRenderer","TextRenderer","InterpolableValueType","FloatArray","AnimationClipDecoder","eventsLen","event","AnimationEvent","functionName","parameter","val","addEvent","curveBindingsLen","componentStr","property","keysLen","curveType","AnimationFloatCurve","AnimationArrayCurve","AnimationVector2Curve","AnimationVector4Curve","AnimationColorCurve","SceneParserContext","originalData","entityMap","components","assets","entityConfigMap","rootIds","clear","_engine","_organizeEntities","bind","_parseComponents","_clearAndResolveScene","_reject","_resolve","_parseEntities","entitiesMap","id","rootId","rootEntities","addRootEntity","componentConfig","component","getComponent","sceneData","Scene","MeshLoader","EditorTextureLoader","object","Mesh","SourceFontLoader","SourceFont","SpriteAtlasLoader","_tempRect","Rect","_tempVec2","_tempVec4","_","configPromise","atlasData","atlasItem","atlasItems","sprites","spriteAtlas","_addSprite","_makeSprite","atlasItemsLen","SpriteAtlas","config","region","atlasRegionOffset","atlasRegion","pivot","border","sprite","Sprite","h","invW","invH","offsetLeft","offsetRight","offsetBottom","offsetTop","atlasRotated","SpriteLoader","belongToAtlas","atlas","getSprite","fullPath","Texture2DLoader","_platformTexture","indexOf","splitPath","TextureCubeLoader","tex","AnimationClipLoader","SceneLoader","initVirtualResources","files","ambient","ambientLightPromise","diffuseIntensity","specularIntensity","diffuseSolidColor","background","backgroundPromise","BackgroundMode","SolidColor","solidColor","Sky","sky","skyMaterial","SkyBoxMaterial","textureCubeMap","textureDecodeRGBM","PrimitiveMesh","createCuboid","Texture","shadow","castShadows","shadowResolution","shadowDistance","shadowCascades","fog","fogMode","fogStart","fogEnd","fogDensity","fogColor","createFromOS","fontFamily"],"mappings":";;;;;;;;;AAAO,SAAS,QAAQ,GAAG;AAC3B,IAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,IAAI,SAAS,MAAM,CAAC,MAAM,EAAE;AACxD,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACnD,YAAY,IAAI,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AACtC,YAAY,KAAK,IAAI,GAAG,IAAI,MAAM,EAAE,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AACrH,SAAS;AACT;AACA,QAAQ,OAAO,MAAM,CAAC;AACtB,KAAK,CAAC;AACN;AACA,IAAI,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAC3C;;ACXO,SAAS,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAE;AACxC,IAAI,iBAAiB,GAAG,MAAM,CAAC,cAAc,IAAI,SAAS,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE;AAC/E,QAAQ,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC;AACxB;AACA,QAAQ,OAAO,CAAC,CAAC;AACjB,KAAK,CAAC;AACN;AACA,IAAI,OAAO,iBAAiB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACnC;;ACNO,SAAS,SAAS,CAAC,QAAQ,EAAE,UAAU,EAAE;AAChD,IAAI,IAAI,OAAO,UAAU,KAAK,UAAU,IAAI,UAAU,KAAK,IAAI,EAAE;AACjE,QAAQ,MAAM,IAAI,SAAS,CAAC,oDAAoD,CAAC,CAAC;AAClF,KAAK;AACL;AACA,IAAI,QAAQ,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,IAAI,UAAU,CAAC,SAAS,EAAE,EAAE,WAAW,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;AACrJ;AACA,IAAI,IAAI,UAAU,EAAE,iBAAiB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AAC5D;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwCA;AACO,SAAS,UAAU,CAAC,UAAU,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE;AAC1D,IAAI,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,IAAI,KAAK,IAAI,GAAG,IAAI,GAAG,MAAM,CAAC,wBAAwB,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC;AACjI,IAAI,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,OAAO,CAAC,QAAQ,KAAK,UAAU,EAAE,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;AACnI,SAAS,KAAK,IAAI,CAAC,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;AACtJ,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AAClE,CAAC;AAgED;AACO,SAAS,WAAW,CAAC,OAAO,EAAE,IAAI,EAAE;AAC3C,IAAI,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACrH,IAAI,OAAO,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,OAAO,MAAM,KAAK,UAAU,KAAK,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,WAAW,EAAE,OAAO,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC7J,IAAI,SAAS,IAAI,CAAC,CAAC,EAAE,EAAE,OAAO,UAAU,CAAC,EAAE,EAAE,OAAO,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;AACtE,IAAI,SAAS,IAAI,CAAC,EAAE,EAAE;AACtB,QAAQ,IAAI,CAAC,EAAE,MAAM,IAAI,SAAS,CAAC,iCAAiC,CAAC,CAAC;AACtE,QAAQ,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI;AACtD,YAAY,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AACzK,YAAY,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;AACpD,YAAY,QAAQ,EAAE,CAAC,CAAC,CAAC;AACzB,gBAAgB,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,MAAM;AAC9C,gBAAgB,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;AACxE,gBAAgB,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS;AACjE,gBAAgB,KAAK,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,SAAS;AACjE,gBAAgB;AAChB,oBAAoB,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,EAAE;AAChI,oBAAoB,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE;AAC1G,oBAAoB,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,MAAM,EAAE;AACzF,oBAAoB,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE;AACvF,oBAAoB,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;AAC1C,oBAAoB,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,SAAS;AAC3C,aAAa;AACb,YAAY,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;AACvC,SAAS,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE;AAClE,QAAQ,IAAI,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;AACzF,KAAK;AACL;;ICxIMA,wBADN,iBAAA,SAAA,MAAA,EAAA;;;;;;AAEEC,IAAAA,MAAAA,CAAAA,IA4EC,GA5EDA,SAAAA,KAAKC,IAAc,EAAEC,eAAgC,EAAoC;;AACvF,QAAA,OAAO,IAAIC,uBAAAA,CAAa,SAACC,OAAAA,EAASC,MAAW,EAAA;AAC3C,YAAA,KAAA,CAAKC,OAAO,CAAML,IAAKM,CAAAA,GAAG,EAAE,QACvBN,CAAAA,EAAAA,EAAAA,IAAAA,EAAAA;gBACHO,IAAM,EAAA,MAAA;gBAELC,IAAI,CAAC,SAACC,IAAS,EAAA;AACd,gBAAA,IAAMC,qBAAqB,IAAIC,6BAAAA,EAAAA,CAAAA;gBAC/B,IAAQC,SAAWH,IAAXG,CAAAA,MAAAA,CAAAA;AACR,gBAAA,IAAMC,WAAW,EAAE,CAAA;AACnBD,gBAAAA,MAAAA,CAAOE,OAAO,CAAC,SAACC,SAAAA,EAAWC,UAAuB,EAAA;oBAChD,IAAQC,IAAAA,GAA+DF,SAA/DE,CAAAA,IAAAA,EAAMC,YAAyDH,GAAAA,SAAAA,CAAzDG,YAAcC,EAAAA,MAAAA,GAA2CJ,SAA3CI,CAAAA,MAAAA,EAAQC,gBAAcC,GAAqBN,SAAnCK,CAAAA,YAAAA,CAAAA;oBACpC,IAAME,KAAAA,GAAQ,IAAIC,kCAAwBN,CAAAA,IAAAA,CAAAA,CAAAA;AAC1CK,oBAAAA,KAAAA,CAAMJ,YAAY,GAAGA,YAAAA,CAAAA;AACrBI,oBAAAA,KAAAA,CAAMH,MAAM,GAAGA,MAAAA,CAAAA;AACf,oBAAA,IAAIE,gBAAkB,EAAA;wBACpB,IAAQG,SAAWH,gBAAXG,CAAAA,MAAAA,CAAAA;AACR,wBAAA,IAAMJ,YAAgBE,GAAAA,KAAAA,CAAMF,YAAY,GAAG,IAAIK,+BAAAA,EAAAA,CAAAA;AAC/CD,wBAAAA,MAAAA,CAAOV,OAAO,CAAC,SAACY,SAAAA,EAAWC,UAAuB,EAAA;4BAChD,IACEV,IAAAA,GAOES,UAPFT,IACAW,EAAAA,KAAAA,GAMEF,UANFE,KACAC,EAAAA,QAAAA,GAKEH,UALFG,QACAC,EAAAA,uBAAAA,GAIEJ,UAJFI,uBACAC,EAAAA,qBAAAA,GAGEL,UAHFK,qBACAC,EAAAA,cAAAA,GAEEN,UAFFM,cACAC,EAAMC,WACJR,SADFO,CAAAA,IAAAA,CAAAA;4BAEF,IAAME,KAAAA,GAAQf,YAAagB,CAAAA,QAAQ,CAACnB,IAAAA,CAAAA,CAAAA;AACpCe,4BAAAA,cAAAA,KAAmBZ,YAAAA,CAAaiB,YAAY,GAAGF,KAAI,CAAA,CAAA;AACnDA,4BAAAA,KAAAA,CAAMP,KAAK,GAAGA,KAAAA,CAAAA;AACdO,4BAAAA,KAAAA,CAAMN,QAAQ,GAAGA,QAAAA,CAAAA;AACjBM,4BAAAA,KAAAA,CAAMG,aAAa,GAAGR,uBAAAA,CAAAA;AACtBK,4BAAAA,KAAAA,CAAMI,WAAW,GAAGR,qBAAAA,CAAAA;AACpB,4BAAA,IAAIG,QAAU,EAAA;AACZrB,gCAAAA,QAAAA,CAAS2B,IAAI,CACX,IAAIC,OAAAA,CAAQ,SAACtC,OAAY,EAAA;;AAEvBF,oCAAAA,eAAAA,CAAgByC,gBAAgB,CAACR,QAAAA,CAAAA,CAAU1B,IAAI,CAAC,SAACyB,IAAS,EAAA;wCACxD9B,OAAQ,CAAA;4CACNa,UAAAA,EAAAA,UAAAA;4CACAW,UAAAA,EAAAA,UAAAA;4CACAM,IAAAA,EAAAA,IAAAA;AACF,yCAAA,CAAA,CAAA;AACF,qCAAA,CAAA,CAAA;AACF,iCAAA,CAAA,CAAA,CAAA;6BAEH;AACH,yBAAA,CAAA,CAAA;wBACAT,MAAOV,CAAAA,OAAO,CAAC,SAACY,SAAc,EAAA;AAC5B,4BAAA,IAAQT,IAAsBS,GAAAA,SAAAA,CAAtBT,IAAM0B,EAAAA,WAAAA,GAAgBjB,SAAhBiB,CAAAA,WAAAA,CAAAA;4BACdA,WAAY7B,CAAAA,OAAO,CAAC,SAAC8B,cAAmB,EAAA;gCACtC,IAAQC,eAAAA,GAAgDD,cAAhDC,CAAAA,eAAAA,EAAiBC,QAA+BF,GAAAA,cAAAA,CAA/BE,UAAUC,MAAqBH,GAAAA,cAAAA,CAArBG,MAAQC,EAAAA,QAAAA,GAAaJ,cAAbI,CAAAA,QAAAA,CAAAA;gCAC3C,IAAMC,WAAAA,GAAc7B,YAAa8B,CAAAA,eAAe,CAACjC,IAAAA,CAAAA,CAAAA;gCACjD,IAAMkC,SAAAA,GAAY/B,YAAa8B,CAAAA,eAAe,CAACL,eAAAA,CAAAA,CAAAA;AAC/C,gCAAA,IAAMO,aAAa,IAAIC,kCAAAA,EAAAA,CAAAA;AACvBD,gCAAAA,UAAAA,CAAWE,gBAAgB,GAAGH,SAAAA,CAAAA;AAC9BC,gCAAAA,UAAAA,CAAWN,QAAQ,GAAGA,QAAAA,CAAAA;AACtBM,gCAAAA,UAAAA,CAAWJ,QAAQ,GAAGA,QAAAA,CAAAA;AACtBI,gCAAAA,UAAAA,CAAWL,MAAM,GAAGA,MAAAA,CAAAA;AACpBE,gCAAAA,WAAAA,CAAYM,aAAa,CAACH,UAAAA,CAAAA,CAAAA;AAC5B,6BAAA,CAAA,CAAA;AACF,yBAAA,CAAA,CAAA;qBACD;AACD1C,oBAAAA,kBAAAA,CAAmB8C,QAAQ,CAAClC,KAAAA,CAAAA,CAAAA;AAC9B,iBAAA,CAAA,CAAA;AACAmB,gBAAAA,OAAAA,CAAQgB,GAAG,CAAC5C,QAAAA,CAAAA,CAAUL,IAAI,CAAC,SAAC0B,QAAa,EAAA;oBACvCA,QAASpB,CAAAA,OAAO,CAAC,SAACL,IAAS,EAAA;AACzB,wBAAA,IAAQO,aAAiCP,IAAjCO,CAAAA,UAAAA,EAAYW,aAAqBlB,IAArBkB,CAAAA,UAAAA,EAAYM,OAASxB,IAATwB,CAAAA,IAAAA,CAAAA;wBAChCvB,kBAAmBE,CAAAA,MAAM,CAACI,UAAAA,CAAW,CAACI,YAAY,CAACI,MAAM,CAACG,UAAAA,CAAW,CAACM,IAAI,GAAGA,IAAAA,CAAAA;AAC/E,qBAAA,CAAA,CAAA;oBACA9B,OAAQO,CAAAA,kBAAAA,CAAAA,CAAAA;AACV,iBAAA,CAAA,CAAA;AACF,aAAA,CAAA,CACCgD,KAAK,CAACtD,MAAAA,CAAAA,CAAAA;AACX,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;;AA7EqCuD,CAAAA,CAAAA,iBAAAA,CAAAA,CAAAA;AAAjC7D,wBAAAA,GAAAA,UAAAA,CAAAA;IADL8D,yBAAeC,CAAAA,oBAAAA,CAAUlD,kBAAkB,EAAE;AAAC,QAAA,MAAA;AAAO,KAAA,EAAE,KAAK,CAAA;AACvDb,CAAAA,EAAAA,wBAAAA,CAAAA;;ACZN,SAASgE,QAAAA,CAASxD,GAAG,EAAE;IACrB,OAAO,qBAAA,CAAsByD,IAAI,CAACzD,GAAAA,CAAAA,CAAAA;AACpC,CAAA;IAEM0D,YADN,iBAAA,SAAA,MAAA,EAAA;;;;;;AAEEjE,IAAAA,MAAAA,CAAAA,IAaC,GAbDA,SAAAA,IAAAA,CAAKC,IAAc,EAA6B;QAC9C,IAAMM,GAAAA,GAAMN,KAAKM,GAAG,CAAA;AACpB,QAAA,IAAIwD,SAASxD,GAAM,CAAA,EAAA;YACjB,OAAO,IAAIJ,uBAAa,CAAA,SAACC,OAAY,EAAA;gBACnC,IAAM8D,SAAAA,GAAY3D,IAAI4D,KAAK,CAAC,KAAKC,MAAOC,CAAAA,EAAE,CAACC,MAAM,CAAA,CAAA;AACjD,gBAAA,IAAMC,SAASC,UAAWC,CAAAA,IAAI,CAACC,IAAAA,CAAKR,YAAY,SAACS,CAAAA,EAAAA;AAAMA,oBAAAA,OAAAA,CAAAA,CAAEC,UAAU,CAAC,CAAA,CAAA,CAAA;;AACpExE,gBAAAA,OAAAA,CAAQmE,OAAOM,MAAM,CAAA,CAAA;AACvB,aAAA,CAAA,CAAA;SACD;AACD,QAAA,OAAO,IAAI,CAACvE,OAAO,CAACC,KAAK,QACpBN,CAAAA,EAAAA,EAAAA,IAAAA,EAAAA;YACHO,IAAM,EAAA,aAAA;;AAEV,KAAA,CAAA;;AAdyBoD,CAAAA,CAAAA,iBAAAA,CAAAA,CAAAA;AAArBK,YAAAA,GAAAA,UAAAA,CAAAA;IADLJ,yBAAeC,CAAAA,oBAAAA,CAAUgB,MAAM,EAAE;AAAC,QAAA,KAAA;AAAO,QAAA,OAAA;AAAQ,KAAA,EAAE,KAAK,CAAA;AACnDb,CAAAA,EAAAA,YAAAA,CAAAA;;ICUAc,SADN,iBAAA,SAAA,MAAA,EAAA;;;;;;AAEE/E,IAAAA,MAAAA,CAAAA,IAuCC,GAvCDA,SAAAA,KAAKC,IAAc,EAAEC,eAAgC,EAA8B;;AACjF,QAAA,OAAO,IAAIC,uBAAAA,CAAa,SAACC,OAAAA,EAASC,MAAW,EAAA;AAC3C,YAAA,KAAA,CAAKC,OAAO,CAAcL,IAAKM,CAAAA,GAAG,EAAE;gBAAEC,IAAM,EAAA,aAAA;aACzCC,CAAAA,CAAAA,IAAI,CAAC,SAACuE,WAAgB,EAAA;AAGR,gBAAA,IAAA,IAAA,CAAA;AAFb,gBAAA,IAAMC,OAAU,GAAA,IAAIC,YAAaF,CAAAA,WAAAA,EAAa,CAAG,EAAA,EAAA,CAAA,CAAA;AACjD,gBAAA,IAAMG,eAAe,EAAK,GAAA,CAAA,CAAA;AAC1B,gBAAA,IAAMC,IAAO,GAAA,CAAA,IAAA,GAAA,IAAIC,WAAYL,CAAAA,WAAAA,EAAaG,YAAc,EAAA,CAAA,CAAA,KAAA,IAAA,GAA3C,KAAA,CAAA,GAAA,IAA+C,CAAC,CAAE,CAAA,CAAA;AAE/D,gBAAA,IAAMG,OAAU,GAAA,IAAIC,sBAAYrF,CAAAA,eAAAA,CAAgBsF,MAAM,EAAEJ,IAAAA,CAAAA,CAAAA;gBACxDE,OAAQG,CAAAA,UAAU,GAAGC,4BAAAA,CAAkBC,SAAS,CAAA;gBAChD,IAAMC,WAAAA,GAAcN,QAAQM,WAAW,CAAA;AACvC,gBAAA,IAAI5C,SAASmC,YAAe,GAAA,CAAA,CAAA;AAE5B,gBAAA,IAAK,IAAIU,QAAAA,GAAW,CAAGA,EAAAA,QAAAA,GAAWD,aAAaC,QAAY,EAAA,CAAA;AACzD,oBAAA,IAAMC,UAAUV,IAAQS,IAAAA,QAAAA,CAAAA;AAExB,oBAAA,IAAK,IAAIE,IAAAA,GAAO,CAAGA,EAAAA,IAAAA,GAAO,GAAGA,IAAQ,EAAA,CAAA;wBACnC,IAAMC,QAAAA,GAAWF,UAAUA,OAAU,GAAA,CAAA,CAAA;AACrC,wBAAA,IAAMpF,IAAO,GAAA,IAAI8D,UAAWQ,CAAAA,WAAAA,EAAahC,MAAQgD,EAAAA,QAAAA,CAAAA,CAAAA;wBACjDhD,MAAUgD,IAAAA,QAAAA,CAAAA;AACVV,wBAAAA,OAAAA,CAAQW,cAAc,CAACC,0BAAAA,CAAgBC,SAAS,GAAGJ,MAAMrF,IAAMmF,EAAAA,QAAAA,CAAAA,CAAAA;AACjE,qBAAA;AACF,iBAAA;AAEA,gBAAA,IAAMO,eAAe,IAAIC,uBAAAA,EAAAA,CAAAA;AACzB,gBAAA,IAAMC,KAAK,IAAIC,8BAAAA,EAAAA,CAAAA;gBAEfH,YAAaI,CAAAA,WAAW,GAAGC,sBAAAA,CAAYC,kBAAkB,CAAA;AACzDJ,gBAAAA,EAAAA,CAAGK,aAAa,CAAC1B,OAAAA,CAAAA,CAAAA;AACjBmB,gBAAAA,YAAAA,CAAaQ,yBAAyB,GAAGN,EAAAA,CAAAA;AACzCF,gBAAAA,YAAAA,CAAaS,eAAe,GAAGvB,OAAAA,CAAAA;gBAC/Bc,YAAaU,CAAAA,yBAAyB,GAAG,IAAI,CAAA;gBAE7C1G,OAAQgG,CAAAA,YAAAA,CAAAA,CAAAA;aAETzC,CAAAA,CAAAA,KAAK,CAAC,SAACoD,CAAM,EAAA;gBACZ1G,MAAO0G,CAAAA,CAAAA,CAAAA,CAAAA;AACT,aAAA,CAAA,CAAA;AACJ,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;;AAxCsBnD,CAAAA,CAAAA,iBAAAA,CAAAA,CAAAA;AAAlBmB,SAAAA,GAAAA,UAAAA,CAAAA;IADLlB,yBAAeC,CAAAA,oBAAAA,CAAUkD,GAAG,EAAE;AAAC,QAAA,KAAA;AAAM,KAAA,CAAA;AAChCjC,CAAAA,EAAAA,SAAAA,CAAAA;;AChBN,SAAS,kBAAkB,CAAC,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE;AAC3E,IAAI,IAAI;AACR,QAAQ,IAAI,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AACjC,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AAC/B,KAAK,CAAC,OAAO,KAAK,EAAE;AACpB,QAAQ,MAAM,CAAC,KAAK,CAAC,CAAC;AACtB,QAAQ,OAAO;AACf,KAAK;AACL,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;AAClC,SAAS,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AACpD,CAAC;AACM,SAAS,mBAAmB,CAAC,EAAE,EAAE;AACxC,IAAI,OAAO,WAAW;AACtB,QAAQ,IAAI,IAAI,GAAG,IAAI,EAAE,IAAI,GAAG,SAAS,CAAC;AAC1C;AACA,QAAQ,OAAO,IAAI,OAAO,CAAC,SAAS,OAAO,EAAE,MAAM,EAAE;AACrD,YAAY,IAAI,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAC3C;AACA,YAAY,SAAS,KAAK,CAAC,KAAK,EAAE;AAClC,gBAAgB,kBAAkB,CAAC,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;AACvF,aAAa;AACb;AACA,YAAY,SAAS,MAAM,CAAC,GAAG,EAAE;AACjC,gBAAgB,kBAAkB,CAAC,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;AACtF,aAAa;AACb;AACA,YAAY,KAAK,CAAC,SAAS,CAAC,CAAC;AAC7B,SAAS,CAAC,CAAC;AACX,KAAK,CAAC;AACN;;IC1BMkC,UADN,iBAAA,SAAA,MAAA,EAAA;;;;;;AAEEjH,IAAAA,MAAAA,CAAAA,IAwBC,GAxBDA,SAAAA,KAAKC,IAAc,EAAEC,eAAgC,EAAsB;;AACzE,QAAA,OAAO,IAAIC,uBAAAA,CAAa,SAACC,OAAAA,EAASC,MAAW,EAAA;AAC3C,YAAA,KAAA,CAAKC,OAAO,CAAML,IAAKM,CAAAA,GAAG,EAAE;gBAAEC,IAAM,EAAA,MAAA;aACjCC,CAAAA,CAAAA,IAAI,CAAC,SAACC,IAAS,EAAA;AACd,gBAAA,IAAQwG,QAAsBxG,GAAAA,IAAAA,CAAtBwG,QAAUC,EAAAA,OAAAA,GAAYzG,IAAZyG,CAAAA,OAAAA,CAAAA;AAElB,gBAAA,IAAIA,OAAS,EAAA;AACX,oBAAA,KAAA,CAAKC,aAAa,CAACF,QAAAA,EAAUC,OAC1B1G,CAAAA,CAAAA,IAAI,CAAC,WAAM;AACV,wBAAA,IAAM4G,IAAO,GAAA,IAAIC,eAAKpH,CAAAA,eAAAA,CAAgBsF,MAAM,EAAE0B,QAAAA,CAAAA,CAAAA;wBAC9C9G,OAAQiH,CAAAA,IAAAA,CAAAA,CAAAA;qBAET1D,CAAAA,CAAAA,KAAK,CAAC,SAACoD,CAAM,EAAA;wBACZ1G,MAAO,CAAC,eAAY8G,OAAQ,GAAA,OAAA,CAAA,CAAA;AAC9B,qBAAA,CAAA,CAAA;iBACG,MAAA;AACL,oBAAA,IAAME,IAAO,GAAA,IAAIC,eAAKpH,CAAAA,eAAAA,CAAgBsF,MAAM,EAAE0B,QAAAA,CAAAA,CAAAA;oBAC9C9G,OAAQiH,CAAAA,IAAAA,CAAAA,CAAAA;iBACT;aAEF1D,CAAAA,CAAAA,KAAK,CAAC,SAACoD,CAAM,EAAA;gBACZ1G,MAAO0G,CAAAA,CAAAA,CAAAA,CAAAA;AACT,aAAA,CAAA,CAAA;AACJ,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAcK,aAIb,GAJD,SAAcA,aAAcF,CAAAA,QAAgB,EAAEC,OAAe,EAAA;AAA7D,QAAA,OAAA,mBAAA,CAAA,WAA8E;AACtEI,YAAAA,IAAAA,QAAAA,CAAAA;;;;AAAAA,wBAAAA,QAAAA,GAAW,IAAIC,QAAAA,CAASN,QAAU,EAAC,SAAMC,OAAQ,GAAA,GAAA,CAAA,CAAA;AACvD,wBAAA,OAAA;;AAAMI,4BAAAA,QAAAA,CAASvH,IAAI,EAAA;;;AAAnB,wBAAA,MAAA,CAAA,IAAA,EAAA,CAAA;wBACAyH,QAASC,CAAAA,KAAK,CAACC,GAAG,CAACJ,QAAAA,CAAAA,CAAAA;;;;;;AACrB,SAAA,CAAA,EAAA,CAAA;;;AA/BuB3D,CAAAA,CAAAA,iBAAAA,CAAAA,CAAAA;AAAnBqD,UAAAA,GAAAA,UAAAA,CAAAA;IADLpD,yBAAeC,CAAAA,oBAAAA,CAAUwD,IAAI,EAAE;AAAC,QAAA,MAAA;AAAO,KAAA,EAAE,KAAK,CAAA;AACzCL,CAAAA,EAAAA,UAAAA,CAAAA;;ACUN;;AAEC,IACM,IAAA,aAAMW,iBAwCV,WAxCI;AAAMA,IAAAA,SAAAA,aAAAA,CAkBCrH,GAAW,EAAA;AAbvBsH,QAAAA,IAAAA,CAAAA,UAAAA,GAAsB,KAAK,CAAA;mCACH,IAAA,CACxBC,gBAAqC,EAAE,CAAA;AACvCC,QAAAA,IAAAA,CAAAA,mBAAAA,GAAkD,EAAC,CAAA;AAEnDC,QAAAA,IAAAA,CAAAA,mBAAAA,GAAgD,IAAIC,WAAAA,EAAAA,CAAAA;AACpDC,QAAAA,IAAAA,CAAAA,oBAAAA,GAAgD,IAAID,WAAAA,EAAAA,CAAAA;AACpDE,QAAAA,IAAAA,CAAAA,iBAAAA,GAAgD,IAAIF,WAAAA,EAAAA,CAAAA;AACpDG,QAAAA,IAAAA,CAAAA,yBAAAA,GAA0D,IAAIH,WAAAA,EAAAA,CAAAA;AAC9DI,QAAAA,IAAAA,CAAAA,2BAAAA,GAAmD,IAAIJ,WAAAA,EAAAA,CAAAA;AACvDK,QAAAA,IAAAA,CAAAA,iBAAAA,GAA+C,IAAIL,WAAAA,EAAAA,CAAAA;AACnDM,QAAAA,IAAAA,CAAAA,UAAAA,GAAgD,EAAC,CAAA;QAG/C,IAAMA,UAAAA,GAAa,IAAI,CAACA,UAAU,CAAA;AAClCA,QAAAA,UAAU,CAAE,EAAEhI,GAAAA,GAAAA,GAAI,aAAa,CAAA,GAAG,IAAI,CAACiI,gBAAgB,CAAC,IAAI,CAACR,mBAAmB,CAAA,CAAA;AAChFO,QAAAA,UAAU,CAAE,EAAEhI,GAAAA,GAAAA,GAAI,cAAc,CAAA,GAAG,IAAI,CAACiI,gBAAgB,CAAC,IAAI,CAACN,oBAAoB,CAAA,CAAA;AAClFK,QAAAA,UAAU,CAAE,EAAEhI,GAAAA,GAAAA,GAAI,WAAW,CAAA,GAAG,IAAI,CAACiI,gBAAgB,CAAC,IAAI,CAACL,iBAAiB,CAAA,CAAA;AAC5EI,QAAAA,UAAU,CAAE,EAAEhI,GAAAA,GAAAA,GAAI,eAAe,CAAA,GAAG,IAAI,CAACiI,gBAAgB,CAAC,IAAI,CAACJ,yBAAyB,CAAA,CAAA;AACxFG,QAAAA,UAAU,CAAE,EAAEhI,GAAAA,GAAAA,GAAI,qBAAqB,CAAA,GAAG,IAAI,CAACiI,gBAAgB,CAAC,IAAI,CAACH,2BAA2B,CAAA,CAAA;QAChGE,UAAU,CAAC,EAAC,GAAEhI,GAAM,CAAA,GAAG,IAAI,CAACiI,gBAAgB,CAAC,IAAI,CAACF,iBAAiB,CAAA,CAAA;;AAzB1DV,IAAAA,IAAAA,MAAAA,GAAAA,aAAAA,CAAAA,SAAAA,CAAAA;AA4BX,IAAA,MAAA,CAAQY,gBASP,GATD,SAAQA,gBAAAA,CAAiBC,WAAW,EAAqB;AACvD,QAAA,IAAMC,UAAU,IAAIvI,uBAAAA,CAAkB,SAACC,OAASC,EAAAA,MAAAA,EAAQsI,aAAaC,QAAa,EAAA;AAChFH,YAAAA,WAAAA,CAAYrI,OAAO,GAAGA,OAAAA,CAAAA;AACtBqI,YAAAA,WAAAA,CAAYpI,MAAM,GAAGA,MAAAA,CAAAA;AACrBoI,YAAAA,WAAAA,CAAYE,WAAW,GAAGA,WAAAA,CAAAA;AAC1BF,YAAAA,WAAAA,CAAYG,QAAQ,GAAGA,QAAAA,CAAAA;AACzB,SAAA,CAAA,CAAA;AACAH,QAAAA,WAAAA,CAAYC,OAAO,GAAGA,OAAAA,CAAAA;QACtB,OAAOA,OAAAA,CAAAA;AACT,KAAA,CAAA;AArCWd,IAAAA,OAAAA,aAAAA,CAAAA;AAsCZ,CAAA,EAAA,CAAA;AAED;;AAEC,IACM,IAAMiB,aAAN,SAAMA,UAAAA,CAGQnI,MAAyBoI,WAA6BC,EAAAA,MAAAA,EAAAA;AAAtDrI,IAAAA,IAAAA,CAAAA,IAAAA,GAAAA,IAAAA,CAAAA;AAAyBoI,IAAAA,IAAAA,CAAAA,WAAAA,GAAAA,WAAAA,CAAAA;AAA6BC,IAAAA,IAAAA,CAAAA,MAAAA,GAAAA,MAAAA,CAAAA;AADzEC,IAAAA,IAAAA,CAAAA,kBAAAA,GAA6C,EAAC,CAAA;AAE/C,CAAA,CAAA;AAED;;AAEC,IACM,IAAA,WAAMf,GAAN,SAAMA,WAAAA,GAAAA;AAMZ,CAAA;;AC1ED;;IASO,IAAA,qBAAA,CAAA;UAAKgB,qBAAqB,EAAA;AAArBA,IAAAA,qBAAAA,CAAAA,qBACV;;AAEC,MACDC,UAAO,IAAPA,CAAAA,GAAAA,MAAAA,CAAAA;AAJUD,IAAAA,qBAAAA,CAAAA,qBAKV;;AAEC,MACDE,mBAAgB,IAAhBA,CAAAA,GAAAA,eAAAA,CAAAA;AARUF,IAAAA,qBAAAA,CAAAA,qBASV;;AAEC,MACDG,WAAQ,IAARA,CAAAA,GAAAA,OAAAA,CAAAA;AAZUH,IAAAA,qBAAAA,CAAAA,qBAaV;;AAEC,MACDI,oBAAiB,IAAjBA,CAAAA,GAAAA,gBAAAA,CAAAA;AAhBUJ,IAAAA,qBAAAA,CAAAA,qBAiBV;;AAEC,MACDK,kBAAe,IAAfA,CAAAA,GAAAA,cAAAA,CAAAA;AApBUL,IAAAA,qBAAAA,CAAAA,qBAqBV;;AAEC,MACDM,WAAQ,IAARA,CAAAA,GAAAA,OAAAA,CAAAA;GAxBUN,qBAAAA,KAAAA,qBAAAA,GAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AA8BL,IAAA,YAAA,CAAA;UAAKO,YAAY,EAAA;IAAZA,YACV;;AAEC,MACDC,QAAAA,CAAAA,GAAAA,QAAAA,CAAAA;IAJUD,YAKV;;AAEC,MACDE,MAAAA,CAAAA,GAAAA,MAAAA,CAAAA;IARUF,YASV;;AAEC,MACDG,MAAAA,CAAAA,GAAAA,MAAAA,CAAAA;IAZUH,YAaV;;AAEC,MACDI,MAAAA,CAAAA,GAAAA,MAAAA,CAAAA;IAhBUJ,YAiBV;;AAEC,MACDK,MAAAA,CAAAA,GAAAA,MAAAA,CAAAA;IApBUL,YAqBV;;AAEC,MACDM,MAAAA,CAAAA,GAAAA,MAAAA,CAAAA;IAxBUN,YAyBV;;AAEC,MACDO,MAAAA,CAAAA,GAAAA,MAAAA,CAAAA;GA5BUP,YAAAA,KAAAA,YAAAA,GAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAkCL,IAAA,0BAAA,CAAA;UAAKQ,0BAA0B,EAAA;IAA1BA,0BACV;;AAEC,MACDC,aAAc,CAAA,GAAA,aAAA,CAAA;IAJJD,0BAKV;;AAEC,MACDE,UAAW,CAAA,GAAA,UAAA,CAAA;IARDF,0BASV;;AAEC,MACDG,OAAQ,CAAA,GAAA,OAAA,CAAA;IAZEH,0BAaV;;AAEC,MACDI,SAAU,CAAA,GAAA,SAAA,CAAA;GAhBAJ,0BAAAA,KAAAA,0BAAAA,GAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAsBL,IAAA,6BAAA,CAAA;UAAKK,6BAA6B,EAAA;IAA7BA,6BACV;;AAEC,MACDC,QAAS,CAAA,GAAA,QAAA,CAAA;IAJCD,6BAKV;;AAEC,MACDE,MAAO,CAAA,GAAA,MAAA,CAAA;IARGF,6BASV;;AAEC,MACDG,YAAa,CAAA,GAAA,aAAA,CAAA;GAZHH,6BAAAA,KAAAA,6BAAAA,GAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAkBL,IAAA,UAAA,CAAA;UAAKI,UAAU,EAAA;IAAVA,UACV;;AAEC,MACDC,aAAc,CAAA,GAAA,aAAA,CAAA;IAJJD,UAKV;;AAEC,MACDE,cAAe,CAAA,GAAA,cAAA,CAAA;GARLF,UAAAA,KAAAA,UAAAA,GAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAcL,IAAA,aAAA,CAAA;UAAKG,aAAa,EAAA;IAAbA,aACV;;AAEC,MACDC,MAAO,CAAA,GAAA,YAAA,CAAA;IAJGD,aAKV;;AAEC,MACDE,KAAM,CAAA,GAAA,WAAA,CAAA;GARIF,aAAAA,KAAAA,aAAAA,GAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAcL,IAAA,iBAAA,CAAA;UAAKG,iBAAiB,EAAA;IAAjBA,iBACV;;AAEC,MACDC,QAAAA,CAAAA,GAAAA,QAAAA,CAAAA;IAJUD,iBAKV;;AAEC,MACDE,MAAAA,CAAAA,GAAAA,MAAAA,CAAAA;IARUF,iBASV;;AAEC,MACDG,OAAAA,CAAAA,GAAAA,OAAAA,CAAAA;GAZUH,iBAAAA,KAAAA,iBAAAA,GAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAkBL,IAAA,gBAAA,CAAA;UAAKI,gBAAgB,EAAA;AAAhBA,IAAAA,gBAAAA,CAAAA,gBACV;;AAEC,MACDC,aAAU,IAAVA,CAAAA,GAAAA,SAAAA,CAAAA;AAJUD,IAAAA,gBAAAA,CAAAA,gBAKV;;AAEC,MACDE,YAAS,IAATA,CAAAA,GAAAA,QAAAA,CAAAA;GARUF,gBAAAA,KAAAA,gBAAAA,GAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAcL,IAAA,gBAAA,CAAA;UAAKG,gBAAgB,EAAA;AAAhBA,IAAAA,gBAAAA,CAAAA,gBACV;;AAEC,MACDF,aAAU,IAAVA,CAAAA,GAAAA,SAAAA,CAAAA;AAJUE,IAAAA,gBAAAA,CAAAA,gBAKV;;AAEC,MACDD,YAAS,IAATA,CAAAA,GAAAA,QAAAA,CAAAA;AARUC,IAAAA,gBAAAA,CAAAA,gBASV;;AAEC,MACDC,4BAAyB,IAAzBA,CAAAA,GAAAA,wBAAAA,CAAAA;AAZUD,IAAAA,gBAAAA,CAAAA,gBAaV;;AAEC,MACDE,2BAAwB,IAAxBA,CAAAA,GAAAA,uBAAAA,CAAAA;AAhBUF,IAAAA,gBAAAA,CAAAA,gBAiBV;;AAEC,MACDG,2BAAwB,IAAxBA,CAAAA,GAAAA,uBAAAA,CAAAA;AApBUH,IAAAA,gBAAAA,CAAAA,gBAqBV;;AAEC,MACDI,0BAAuB,IAAvBA,CAAAA,GAAAA,sBAAAA,CAAAA;GAxBUJ,gBAAAA,KAAAA,gBAAAA,GAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AA8BL,IAAA,eAAA,CAAA;UAAKK,eAAe,EAAA;AAAfA,IAAAA,eAAAA,CAAAA,eACV;;AAEC,MACDC,mBAAgB,KAAhBA,CAAAA,GAAAA,eAAAA,CAAAA;AAJUD,IAAAA,eAAAA,CAAAA,eAKV;;AAEC,MACDE,qBAAkB,KAAlBA,CAAAA,GAAAA,iBAAAA,CAAAA;AARUF,IAAAA,eAAAA,CAAAA,eASV;;AAEC,MACDG,YAAS,KAATA,CAAAA,GAAAA,QAAAA,CAAAA;GAZUH,eAAAA,KAAAA,eAAAA,GAAAA,EAAAA,CAAAA,CAAAA;;AClLZ;;AAEC,IACM,IAAA,QAAMI,4BAAN;AAAMA,IAAAA,SAAAA,QAAAA,GAAAA,EAAAA;AAAAA,IAAAA,QAAAA,CACGC,yBAOb,GAPD,SAAcA,yBAAAA,CAA0BnH,MAAoB,EAAa;QACvE,IAAMoH,SAAAA,GAAYpH,OAAOP,MAAM,CAAA;QAC/B,IAAM4H,KAAAA,GAAQ,IAAIC,KAAAA,CAAeF,SAAY,GAAA,CAAA,CAAA,CAAA;AAC7C,QAAA,IAAK,IAAIG,CAAI,GAAA,CAAA,EAAGA,CAAIH,GAAAA,SAAAA,EAAWG,KAAK,CAAG,CAAA;AACrCF,YAAAA,KAAK,CAACE,CAAAA,GAAI,CAAE,CAAA,GAAG,IAAIC,kBAAAA,CAAQxH,MAAM,CAACuH,CAAE,CAAA,EAAEvH,MAAM,CAACuH,IAAI,CAAE,CAAA,CAAA,CAAA;AACrD,SAAA;QACA,OAAOF,KAAAA,CAAAA;AACT,KAAA,CAAA;AARWH,IAAAA,QAAAA,CAUGO,yBAOb,GAPD,SAAcA,yBAAAA,CAA0BzH,MAAoB,EAAa;QACvE,IAAMoH,SAAAA,GAAYpH,OAAOP,MAAM,CAAA;QAC/B,IAAM4H,KAAAA,GAAQ,IAAIC,KAAAA,CAAeF,SAAY,GAAA,CAAA,CAAA,CAAA;AAC7C,QAAA,IAAK,IAAIG,CAAI,GAAA,CAAA,EAAGA,CAAIH,GAAAA,SAAAA,EAAWG,KAAK,CAAG,CAAA;AACrCF,YAAAA,KAAK,CAACE,CAAI,GAAA,CAAA,CAAE,GAAG,IAAIG,kBAAAA,CAAQ1H,MAAM,CAACuH,CAAAA,CAAE,EAAEvH,MAAM,CAACuH,CAAI,GAAA,CAAA,CAAE,EAAEvH,MAAM,CAACuH,IAAI,CAAE,CAAA,CAAA,CAAA;AACpE,SAAA;QACA,OAAOF,KAAAA,CAAAA;AACT,KAAA,CAAA;AAjBWH,IAAAA,QAAAA,CAmBGS,yBAOb,GAPD,SAAcA,yBAAAA,CAA0B3H,MAAoB,EAAa;QACvE,IAAMoH,SAAAA,GAAYpH,OAAOP,MAAM,CAAA;QAC/B,IAAM4H,KAAAA,GAAQ,IAAIC,KAAAA,CAAeF,SAAY,GAAA,CAAA,CAAA,CAAA;AAC7C,QAAA,IAAK,IAAIG,CAAI,GAAA,CAAA,EAAGA,CAAIH,GAAAA,SAAAA,EAAWG,KAAK,CAAG,CAAA;YACrCF,KAAK,CAACE,IAAI,CAAE,CAAA,GAAG,IAAIK,kBAAQ5H,CAAAA,MAAM,CAACuH,CAAAA,CAAE,EAAEvH,MAAM,CAACuH,CAAI,GAAA,CAAA,CAAE,EAAEvH,MAAM,CAACuH,CAAAA,GAAI,EAAE,EAAEvH,MAAM,CAACuH,CAAAA,GAAI,CAAE,CAAA,CAAA,CAAA;AACnF,SAAA;QACA,OAAOF,KAAAA,CAAAA;AACT,KAAA,CAAA;AA1BWH,IAAAA,QAAAA,CA4BGW,uBAeb,GAfD,SAAcA,wBAAwB7H,MAAoB,EAAE8H,QAAiB,EAAW;QACtF,IAAMV,SAAAA,GAAYpH,OAAOP,MAAM,CAAA;QAC/B,IAAMsI,MAAAA,GAAS,IAAIT,KAAaF,CAAAA,SAAAA,IAAaU,QAAW,GAAA,CAAA,GAAI,CAAC,CAAD,CAAA,CAAA;AAE5D,QAAA,IAAIA,QAAU,EAAA;AACZ,YAAA,IAAK,IAAIP,CAAI,GAAA,CAAA,EAAGA,CAAIH,GAAAA,SAAAA,EAAWG,KAAK,CAAG,CAAA;AACrCQ,gBAAAA,MAAM,CAACR,CAAI,GAAA,CAAA,CAAE,GAAG,IAAIS,gBAAAA,CAAMhI,MAAM,CAACuH,CAAAA,CAAE,EAAEvH,MAAM,CAACuH,IAAI,CAAE,CAAA,EAAEvH,MAAM,CAACuH,CAAAA,GAAI,EAAE,EAAE,GAAA,CAAA,CAAA;AACrE,aAAA;SACK,MAAA;AACL,YAAA,IAAK,IAAIA,EAAI,GAAA,CAAA,EAAGA,EAAIH,GAAAA,SAAAA,EAAWG,MAAK,CAAG,CAAA;gBACrCQ,MAAM,CAACR,KAAI,CAAE,CAAA,GAAG,IAAIS,gBAAMhI,CAAAA,MAAM,CAACuH,EAAAA,CAAE,EAAEvH,MAAM,CAACuH,EAAI,GAAA,CAAA,CAAE,EAAEvH,MAAM,CAACuH,EAAAA,GAAI,EAAE,EAAEvH,MAAM,CAACuH,EAAAA,GAAI,CAAE,CAAA,CAAA,CAAA;AAClF,aAAA;SACD;QAED,OAAOQ,MAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;AAEC,MACD,QAAOE,CAAAA,UAaN,GAbD,SAAOA,UAAAA,CAAWZ,KAAiB,EAAU;QAC3C,IAAI,OAAOa,gBAAgB,WAAa,EAAA;YACtC,OAAO,IAAIA,WAAcC,EAAAA,CAAAA,MAAM,CAACd,KAAAA,CAAAA,CAAAA;SACjC;;AAGD,QAAA,IAAIe,CAAI,GAAA,EAAA,CAAA;QAER,IAAK,IAAIb,IAAI,CAAGc,EAAAA,EAAAA,GAAKhB,MAAM5H,MAAM,EAAE8H,CAAIc,GAAAA,EAAAA,EAAId,CAAK,EAAA,CAAA;AAC9Ca,YAAAA,CAAAA,IAAKE,MAAOC,CAAAA,YAAY,CAAClB,KAAK,CAACE,CAAE,CAAA,CAAA,CAAA;AACnC,SAAA;AAEA,QAAA,OAAOiB,mBAAmBC,kBAAmBL,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAC/C,KAAA,CAAA;AAEA;;AAEC,MACD,QAAOM,CAAAA,mBAiBN,GAjBD,SAAOA,mBAAAA,CAAoBC,YAA0B,EAAU;QAC7D,OAAQA,YAAAA;AACN,YAAA,KAAKhE,aAAaC,MAAM;gBACtB,OAAO,CAAA,CAAA;AACT,YAAA,KAAKD,aAAaE,IAAI;gBACpB,OAAO,CAAA,CAAA;AACT,YAAA,KAAKF,aAAaG,IAAI;gBACpB,OAAO,CAAA,CAAA;AACT,YAAA,KAAKH,aAAaI,IAAI;gBACpB,OAAO,CAAA,CAAA;AACT,YAAA,KAAKJ,aAAaK,IAAI;gBACpB,OAAO,CAAA,CAAA;AACT,YAAA,KAAKL,aAAaM,IAAI;gBACpB,OAAO,CAAA,CAAA;AACT,YAAA,KAAKN,aAAaO,IAAI;gBACpB,OAAO,EAAA,CAAA;AACX,SAAA;AACF,KAAA,CAAA;AAEA;;AAEC,MACD,QAAO0D,CAAAA,gBAeN,GAfD,SAAOA,gBAAAA,CAAiBC,aAAoC,EAAE;QAC5D,OAAQA,aAAAA;AACN,YAAA,KAAKzE,sBAAsBC,IAAI;gBAC7B,OAAOyE,SAAAA,CAAAA;AACT,YAAA,KAAK1E,sBAAsBE,aAAa;gBACtC,OAAO3E,UAAAA,CAAAA;AACT,YAAA,KAAKyE,sBAAsBG,KAAK;gBAC9B,OAAOwE,UAAAA,CAAAA;AACT,YAAA,KAAK3E,sBAAsBI,cAAc;gBACvC,OAAOhE,WAAAA,CAAAA;AACT,YAAA,KAAK4D,sBAAsBK,YAAY;gBACrC,OAAOuE,WAAAA,CAAAA;AACT,YAAA,KAAK5E,sBAAsBM,KAAK;gBAC9B,OAAOrE,YAAAA,CAAAA;AACX,SAAA;AACF,KAAA,CAAA;AAvGW6G,IAAAA,QAAAA,CAyGJ+B,2BAcN,GAdD,SAAOA,2BAAAA,CAA4BJ,aAAoC,EAAE;;QAEvE,OAAQA,aAAAA;AACN,YAAA,KAAKzE,sBAAsBC,IAAI;AAC7B,gBAAA,OAAO,CAAI,GAAA,GAAA,CAAA;AACb,YAAA,KAAKD,sBAAsBE,aAAa;AACtC,gBAAA,OAAO,CAAI,GAAA,GAAA,CAAA;AACb,YAAA,KAAKF,sBAAsBG,KAAK;AAC9B,gBAAA,OAAO,CAAI,GAAA,KAAA,CAAA;AACb,YAAA,KAAKH,sBAAsBI,cAAc;AACvC,gBAAA,OAAO,CAAI,GAAA,KAAA,CAAA;AACb,YAAA;gBACE,MAAM,IAAI0E,MAAM,sEAAwE,CAAA,CAAA;AAC5F,SAAA;AACF,KAAA,CAAA;IAvHWhC,QAyHJiC,CAAAA,iBA2CN,GA3CD,SAAOA,iBAAAA,CAAkBC,OAAsB,EAAEC,IAAW,EAAEC,QAAmB,EAAc;QAC7F,IAAQC,UAAYH,OAAZG,CAAAA,OAAAA,CAAAA;QACR,IAAMC,WAAAA,GAAcH,KAAKG,WAAW,CAAA;QAEpC,IAAMX,aAAAA,GAAgBS,SAAST,aAAa,CAAA;AAC5C,QAAA,IAAMY,UAAaD,GAAAA,WAAW,CAACF,QAAAA,CAASG,UAAU,CAAC,CAAA;AAEnD,QAAA,IAAMzJ,MAASuJ,GAAAA,OAAO,CAACE,UAAAA,CAAWzJ,MAAM,CAAC,CAAA;QACzC,IAAM0J,gBAAAA,GAAmBD,UAAWE,CAAAA,UAAU,IAAI,CAAA,CAAA;QAClD,IAAMA,UAAAA,GAAaL,QAASK,CAAAA,UAAU,IAAI,CAAA,CAAA;AAE1C,QAAA,IAAMC,UAAa1C,GApIVA,QAoImB0B,CAAAA,gBAAgB,CAACC,aAAAA,CAAAA,CAAAA;AAC7C,QAAA,IAAMgB,iBAAiB3C,QArIdA,CAqIuBwB,mBAAmB,CAACY,SAAS3N,IAAI,CAAA,CAAA;QACjE,IAAMmO,gBAAAA,GAAmBF,WAAWG,iBAAiB,CAAA;AACrD,QAAA,IAAMC,gBAAgBH,cAAiBC,GAAAA,gBAAAA,CAAAA;QACvC,IAAMG,aAAAA,GAAgBX,SAASY,KAAK,CAAA;QACpC,IAAMC,YAAAA,GAAeV,WAAWW,UAAU,CAAA;QAE1C,IAAIC,UAAAA,CAAAA;;QAEJ,IAAIF,YAAAA,KAAiBG,SAAaH,IAAAA,YAAAA,KAAiBH,aAAe,EAAA;AAChE,YAAA,IAAMO,WAAcC,GAAAA,IAAAA,CAAKC,KAAK,CAACd,UAAaQ,GAAAA,YAAAA,CAAAA,CAAAA;YAC5C,IAAMO,cAAAA,GAAiBpB,SAASG,UAAU,GAAG,MAAMZ,aAAgB,GAAA,GAAA,GAAM0B,cAAc,GAAMN,GAAAA,aAAAA,CAAAA;YAC7F,IAAM/G,mBAAAA,GAAsBkG,QAAQlG,mBAAmB,CAAA;YACvDmH,UAAanH,GAAAA,mBAAmB,CAACwH,cAAe,CAAA,CAAA;AAChD,YAAA,IAAI,CAACL,UAAY,EAAA;gBACf,IAAMlM,MAAAA,GAASuL,mBAAmBa,WAAcJ,GAAAA,YAAAA,CAAAA;AAChD,gBAAA,IAAMD,KAAQD,GAAAA,aAAAA,IAAiBE,YAAAA,GAAeL,gBAAe,CAAA,CAAA;AAC7D,gBAAA,IAAMjO,IAAO,GAAA,IAAI+N,UAAW5J,CAAAA,MAAAA,EAAQ7B,MAAQ+L,EAAAA,KAAAA,CAAAA,CAAAA;gBAC5ChH,mBAAmB,CAACwH,eAAe,GAAGL,UAAAA,GAAa,IAAIrG,UAAWnI,CAAAA,IAAAA,EAAM,IAAI,EAAEsO,YAAAA,CAAAA,CAAAA;aAC/E;SACI,MAAA;AACL,YAAA,IAAMhM,UAASuL,gBAAmBC,GAAAA,UAAAA,CAAAA;AAClC,YAAA,IAAMO,SAAQD,aAAgBJ,GAAAA,cAAAA,CAAAA;AAC9B,YAAA,IAAMhO,KAAO,GAAA,IAAI+N,UAAW5J,CAAAA,MAAAA,EAAQ7B,OAAQ+L,EAAAA,MAAAA,CAAAA,CAAAA;AAC5CG,YAAAA,UAAAA,GAAa,IAAIrG,UAAAA,CAAWnI,KAAM,EAAA,KAAK,EAAEmO,aAAAA,CAAAA,CAAAA;SAC1C;QAED,IAAIV,QAAAA,CAASqB,MAAM,EAAE;YACnB,IAAM9O,KAAAA,GAAOqL,QAAS0D,CAAAA,oBAAoB,CAACvB,IAAMC,EAAAA,QAAAA,EAAUC,OAASc,EAAAA,UAAAA,CAAWxO,IAAI,CAAA,CAAA;AACnFwO,YAAAA,UAAAA,GAAa,IAAIrG,UAAWnI,CAAAA,KAAAA,EAAM,KAAK,EAAEwO,WAAWnG,MAAM,CAAA,CAAA;SAC3D;QACD,OAAOmG,UAAAA,CAAAA;AACT,KAAA,CAAA;AAEA;;;MAtKWnD,QA0KJ2D,CAAAA,eA2DN,GA3DD,SAAOA,eAAgBxB,CAAAA,IAAW,EAAEC,QAAmB,EAAEC,OAAsB,EAAc;QAC3F,IAAMC,WAAAA,GAAcH,KAAKG,WAAW,CAAA;AACpC,QAAA,IAAMC,UAAaD,GAAAA,WAAW,CAACF,QAAAA,CAASG,UAAU,CAAC,CAAA;AACnD,QAAA,IAAMqB,WAAcvB,GAAAA,OAAO,CAACE,UAAAA,CAAWzJ,MAAM,CAAC,CAAA;QAC9C,IAAM+K,kBAAAA,GAAqBzB,SAAS0B,cAAc,CAAC,gBAAgB1B,QAASK,CAAAA,UAAU,GAAG,CAAC,CAAA;QAC1F,IAAMsB,oBAAAA,GAAuBxB,WAAWuB,cAAc,CAAC,gBAAgBvB,UAAWE,CAAAA,UAAU,GAAG,CAAC,CAAA;AAChG,QAAA,IAAMA,aAAaoB,kBAAqBE,GAAAA,oBAAAA,CAAAA;AACxC,QAAA,IAAMC,mBAAmBhE,QAjLhBA,CAiLyBwB,mBAAmB,CAACY,SAAS3N,IAAI,CAAA,CAAA;QACnE,IAAM8D,MAAAA,GAASyL,gBAAmB5B,GAAAA,QAAAA,CAASY,KAAK,CAAA;AAC7BT,QAAAA,IAAAA,sBAAAA,CAAAA;AAAnB,QAAA,IAAMW,aAAaX,CAAAA,sBAAAA,GAAAA,WAAWW,UAAU,KAAA,IAAA,GAArBX,yBAAyB,CAAC,CAAA;AAC7C,QAAA,IAAM0B,YAAYjE,QApLTA,CAoLkB0B,gBAAgB,CAACU,SAAST,aAAa,CAAA,CAAA;QAClE,IAAIuC,UAAAA,CAAAA;AACJ,QAAA,IAAIhB,UAAY,EAAA;YACd,IAAMiB,gBAAAA,GAAmBH,gBAAmBC,GAAAA,SAAAA,CAAUpB,iBAAiB,CAAA;AACvEqB,YAAAA,UAAAA,GAAa,IAAIzL,UAAAA,CAAW2J,QAASY,CAAAA,KAAK,GAAGmB,gBAAAA,CAAAA,CAAAA;AAC7C,YAAA,IAAMC,qBAAqB,IAAI3L,UAAAA,CAAWmL,WAAaG,EAAAA,oBAAAA,EAAsBxB,WAAW8B,UAAU,CAAA,CAAA;AAClG,YAAA,IAAK,IAAIhE,CAAI,GAAA,CAAA,EAAGA,IAAI+B,QAASY,CAAAA,KAAK,EAAE3C,CAAK,EAAA,CAAA;AACvC,gBAAA,IAAK,IAAIiE,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIH,kBAAkBG,CAAK,EAAA,CAAA;oBACzCJ,UAAU,CAAC7D,CAAI8D,GAAAA,gBAAAA,GAAmBG,CAAE,CAAA,GAAGF,kBAAkB,CAAC/D,CAAAA,GAAI6C,UAAaW,GAAAA,kBAAAA,GAAqBS,CAAE,CAAA,CAAA;AACpG,iBAAA;AACF,aAAA;SACK,MAAA;YACLJ,UAAa,GAAA,IAAIzL,WAAWmL,WAAYxL,CAAAA,KAAK,CAACqK,UAAYA,EAAAA,UAAAA,GAAalK,MAAS0L,GAAAA,SAAAA,CAAUpB,iBAAiB,CAAA,CAAA,CAAA;SAC5G;AAED,QAAA,IAAM0B,UAAa,GAAA,IAAIN,SAAUC,CAAAA,UAAAA,CAAWpL,MAAM,CAAA,CAAA;QAElD,IAAIsJ,QAAAA,CAASqB,MAAM,EAAE;YACnB,IAAmCrB,gBAAAA,GAAAA,QAASqB,CAAAA,MAAM,EAA1CT,KAAAA,GAA2BZ,gBAA3BY,CAAAA,KAAAA,EAAOwB,OAAoBpC,GAAAA,gBAAAA,CAApBoC,OAASC,EAAAA,MAAAA,GAAWrC,gBAAXqC,CAAAA,MAAAA,CAAAA;AACxB,YAAA,IAAMC,iBAAoBpC,GAAAA,WAAW,CAACkC,OAAAA,CAAQjC,UAAU,CAAC,CAAA;AACzD,YAAA,IAAMoC,gBAAmBrC,GAAAA,WAAW,CAACmC,MAAAA,CAAOlC,UAAU,CAAC,CAAA;AACvD,YAAA,IAAMqC,kBAAqBvC,GAAAA,OAAO,CAACqC,iBAAAA,CAAkB5L,MAAM,CAAC,CAAA;AAC5D,YAAA,IAAM+L,iBAAoBxC,GAAAA,OAAO,CAACsC,gBAAAA,CAAiB7L,MAAM,CAAC,CAAA;gBAC/B0L,mBAA4BE,EAAAA,6BAAAA,CAAAA;YAAvD,IAAMI,iBAAAA,GAAoB,CAACN,CAAAA,sBAAAA,OAAQ/B,CAAAA,UAAU,YAAlB+B,mBAAsB,GAAA,CAAC,KAAKE,CAAAA,6BAAAA,GAAAA,iBAAAA,CAAkBjC,UAAU,KAA5BiC,IAAAA,GAAAA,6BAAAA,GAAgC,CAAC,CAAD,CAAA;YACvF,IAAMK,iBAAAA,GAAoBL,kBAAkBL,UAAU,CAAA;gBAC5BI,kBAA2BE,EAAAA,4BAAAA,CAAAA;YAArD,IAAMK,gBAAAA,GAAmB,CAACP,CAAAA,qBAAAA,MAAOhC,CAAAA,UAAU,YAAjBgC,kBAAqB,GAAA,CAAC,KAAKE,CAAAA,4BAAAA,GAAAA,gBAAAA,CAAiBlC,UAAU,KAA3BkC,IAAAA,GAAAA,4BAAAA,GAA+B,CAAC,CAAD,CAAA;YACpF,IAAMM,gBAAAA,GAAmBN,iBAAiBN,UAAU,CAAA;AAEpD,YAAA,IAAMa,cAAclF,QAhNbA,CAgNsB0B,gBAAgB,CAAC8C,QAAQ7C,aAAa,CAAA,CAAA;AACnE,YAAA,IAAMwD,eAAe,IAAID,WAAAA,CACvBN,oBACAE,iBACAC,EAAAA,iBAAAA,GAAoBG,YAAYrC,iBAAiB,CAAA,CAAA;AAEnD,YAAA,IAAMuC,cAAc,IAAInB,SAAAA,CACtBY,mBACAG,gBACAC,EAAAA,gBAAAA,GAAmBhB,UAAUpB,iBAAiB,CAAA,CAAA;AAGhD,YAAA,IAAK,IAAIxC,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAI2C,OAAO3C,EAAK,EAAA,CAAA;gBAC9B,IAAMgF,YAAAA,GAAeF,YAAY,CAAC9E,EAAE,CAAA,CAAA;AACpC,gBAAA,IAAK,IAAIiE,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAIN,kBAAkBM,EAAK,EAAA,CAAA;oBACzCC,UAAU,CAACc,eAAerB,gBAAmBM,GAAAA,EAAAA,CAAE,GAAGc,WAAW,CAAC/E,EAAI2D,GAAAA,gBAAAA,GAAmBM,EAAE,CAAA,CAAA;AACzF,iBAAA;AACF,aAAA;SACD;QAED,OAAOC,UAAAA,CAAAA;AACT,KAAA,CAAA;AArOWvE,IAAAA,QAAAA,CAuOJsF,iBAKN,GALD,SAAOA,kBAAkB/C,UAAuB,EAAEF,OAAsB,EAAe;QACrF,IAAQvJ,MAAAA,GAAuCyJ,WAAvCzJ,MAAuCyJ,EAAAA,sBAAAA,GAAAA,UAAAA,CAA/BE,YAAAA,UAAa,GAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,sBAAA,EAAG4B,aAAe9B,UAAf8B,CAAAA,UAAAA,CAAAA;QAChC,IAAMT,WAAAA,GAAcvB,OAAO,CAACvJ,MAAO,CAAA,CAAA;AAEnC,QAAA,OAAO8K,WAAYxL,CAAAA,KAAK,CAACqK,UAAAA,EAAYA,UAAa4B,GAAAA,UAAAA,CAAAA,CAAAA;AACpD,KAAA,CAAA;AAEA;;AAEC,MACD,QAjPWrE,CAiPJ0D,oBAyCN,GAzCD,SAAOA,oBAAAA,CACLvB,IAAW,EACXC,QAAmB,EACnBC,OAAsB,EACtBkD,UAAsB,EACV;QACZ,IAAMjD,WAAAA,GAAcH,KAAKG,WAAW,CAAA;AACpC,QAAA,IAAM0B,mBAAmBhE,QAxPhBA,CAwPyBwB,mBAAmB,CAACY,SAAS3N,IAAI,CAAA,CAAA;AACnE,QAAA,IAAMiO,aAAa1C,QAzPVA,CAyPmB0B,gBAAgB,CAACU,SAAST,aAAa,CAAA,CAAA;QACnE,IAAMhN,IAAAA,GAAO4Q,WAAWnN,KAAK,EAAA,CAAA;QAE7B,IAAmCgK,gBAAAA,GAAAA,QAASqB,CAAAA,MAAM,EAA1CT,KAAAA,GAA2BZ,gBAA3BY,CAAAA,KAAAA,EAAOwB,OAAoBpC,GAAAA,gBAAAA,CAApBoC,OAASC,EAAAA,MAAAA,GAAWrC,gBAAXqC,CAAAA,MAAAA,CAAAA;AACxB,QAAA,IAAMC,iBAAoBpC,GAAAA,WAAW,CAACkC,OAAAA,CAAQjC,UAAU,CAAC,CAAA;AACzD,QAAA,IAAMoC,gBAAmBrC,GAAAA,WAAW,CAACmC,MAAAA,CAAOlC,UAAU,CAAC,CAAA;AACvD,QAAA,IAAMqC,kBAAqBvC,GAAAA,OAAO,CAACqC,iBAAAA,CAAkB5L,MAAM,CAAC,CAAA;AAC5D,QAAA,IAAM+L,iBAAoBxC,GAAAA,OAAO,CAACsC,gBAAAA,CAAiB7L,MAAM,CAAC,CAAA;YAC/B0L,mBAA4BE,EAAAA,6BAAAA,CAAAA;QAAvD,IAAMI,iBAAAA,GAAoB,CAACN,CAAAA,sBAAAA,OAAQ/B,CAAAA,UAAU,YAAlB+B,mBAAsB,GAAA,CAAC,KAAKE,CAAAA,6BAAAA,GAAAA,iBAAAA,CAAkBjC,UAAU,KAA5BiC,IAAAA,GAAAA,6BAAAA,GAAgC,CAAC,CAAD,CAAA;QACvF,IAAMK,iBAAAA,GAAoBL,kBAAkBL,UAAU,CAAA;YAC5BI,kBAA2BE,EAAAA,4BAAAA,CAAAA;QAArD,IAAMK,gBAAAA,GAAmB,CAACP,CAAAA,qBAAAA,MAAOhC,CAAAA,UAAU,YAAjBgC,kBAAqB,GAAA,CAAC,KAAKE,CAAAA,4BAAAA,GAAAA,gBAAAA,CAAiBlC,UAAU,KAA3BkC,IAAAA,GAAAA,4BAAAA,GAA+B,CAAC,CAAD,CAAA;QACpF,IAAMM,gBAAAA,GAAmBN,iBAAiBN,UAAU,CAAA;AAEpD,QAAA,IAAMmB,iBAAiBxF,QAtQdA,CAsQuB0B,gBAAgB,CAAC8C,QAAQ7C,aAAa,CAAA,CAAA;AACtE,QAAA,IAAMwD,eAAe,IAAIK,cAAAA,CACvBZ,oBACAE,iBACAC,EAAAA,iBAAAA,GAAoBS,eAAe3C,iBAAiB,CAAA,CAAA;AAEtD,QAAA,IAAMuC,cAAc,IAAI1C,UAAAA,CACtBmC,mBACAG,gBACAC,EAAAA,gBAAAA,GAAmBvC,WAAWG,iBAAiB,CAAA,CAAA;AAGjD,QAAA,IAAK,IAAIxC,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAI2C,OAAO3C,CAAK,EAAA,CAAA;YAC9B,IAAMgF,YAAAA,GAAeF,YAAY,CAAC9E,CAAE,CAAA,CAAA;AACpC,YAAA,IAAK,IAAIiE,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIN,kBAAkBM,CAAK,EAAA,CAAA;gBACzC3P,IAAI,CAAC0Q,eAAerB,gBAAmBM,GAAAA,CAAAA,CAAE,GAAGc,WAAW,CAAC/E,CAAI2D,GAAAA,gBAAAA,GAAmBM,CAAE,CAAA,CAAA;AACnF,aAAA;AACF,SAAA;QAEA,OAAO3P,IAAAA,CAAAA;AACT,KAAA,CAAA;AA1RWqL,IAAAA,QAAAA,CA4RJyF,cASN,GATD,SAAOA,cAAAA,CAAehR,IAA2B,EAAe;QAC9D,OAAQA,IAAAA;AACN,YAAA,KAAKyI,sBAAsBE,aAAa;AACtC,gBAAA,OAAOsI,uBAAYC,KAAK,CAAA;AAC1B,YAAA,KAAKzI,sBAAsBI,cAAc;AACvC,gBAAA,OAAOoI,uBAAYE,MAAM,CAAA;AAC3B,YAAA,KAAK1I,sBAAsBK,YAAY;AACrC,gBAAA,OAAOmI,uBAAYG,MAAM,CAAA;AAC7B,SAAA;AACF,KAAA,CAAA;IArSW7F,QAuSJ8F,CAAAA,gBAmDN,GAnDD,SAAOA,gBAAAA,CAAiBrR,IAA2B,EAAE4E,IAAY,EAAE0M,UAA2B,EAAuB;QAAlDA,IAAAA,UAAAA,KAAAA,KAAAA,CAAAA,EAAAA,aAAsB,KAAK,CAAA;QAC5F,IAAItR,IAAAA,IAAQyI,qBAAsBM,CAAAA,KAAK,EAAE;YACvC,OAAQnE,IAAAA;gBACN,KAAK,CAAA;AACH,oBAAA,OAAO2M,+BAAoBC,KAAK,CAAA;gBAClC,KAAK,CAAA;AACH,oBAAA,OAAOD,+BAAoB1F,OAAO,CAAA;gBACpC,KAAK,CAAA;AACH,oBAAA,OAAO0F,+BAAoBxF,OAAO,CAAA;gBACpC,KAAK,CAAA;AACH,oBAAA,OAAOwF,+BAAoBtF,OAAO,CAAA;AACtC,aAAA;SACD;QAED,IAAIjM,IAAAA,IAAQyI,qBAAsBG,CAAAA,KAAK,EAAE;YACvC,OAAQhE,IAAAA;gBACN,KAAK,CAAA;AACH,oBAAA,OAAO0M,UAAaC,GAAAA,8BAAAA,CAAoBE,gBAAgB,GAAGF,+BAAoBG,MAAM,CAAA;gBACvF,KAAK,CAAA,CAAA;gBACL,KAAK,CAAA;AACH,oBAAA,OAAOJ,UAAaC,GAAAA,8BAAAA,CAAoBI,gBAAgB,GAAGJ,+BAAoBK,MAAM,CAAA;AACzF,aAAA;SACD;QAED,IAAI5R,IAAAA,IAAQyI,qBAAsBI,CAAAA,cAAc,EAAE;YAChD,OAAQjE,IAAAA;gBACN,KAAK,CAAA;AACH,oBAAA,OAAO0M,UAAaC,GAAAA,8BAAAA,CAAoBM,iBAAiB,GAAGN,+BAAoBO,OAAO,CAAA;gBACzF,KAAK,CAAA,CAAA;gBACL,KAAK,CAAA;AACH,oBAAA,OAAOR,UAAaC,GAAAA,8BAAAA,CAAoBQ,iBAAiB,GAAGR,+BAAoBS,OAAO,CAAA;AAC3F,aAAA;SACD;QAED,IAAIhS,IAAAA,IAAQyI,qBAAsBC,CAAAA,IAAI,EAAE;YACtC,OAAQ9D,IAAAA;gBACN,KAAK,CAAA,CAAA;gBACL,KAAK,CAAA,CAAA;gBACL,KAAK,CAAA;AACH,oBAAA,OAAO0M,UAAaC,GAAAA,8BAAAA,CAAoBU,eAAe,GAAGV,+BAAoBW,KAAK,CAAA;AACvF,aAAA;SACD;QAED,IAAIlS,IAAAA,IAAQyI,qBAAsBE,CAAAA,aAAa,EAAE;YAC/C,OAAQ/D,IAAAA;gBACN,KAAK,CAAA,CAAA;gBACL,KAAK,CAAA,CAAA;gBACL,KAAK,CAAA;AACH,oBAAA,OAAO0M,UAAaC,GAAAA,8BAAAA,CAAoBY,gBAAgB,GAAGZ,+BAAoBa,MAAM,CAAA;AACzF,aAAA;SACD;AACH,KAAA,CAAA;AAEA;;MA5VW7G,SA+VJ8G,eAmBN,GAnBD,SAAOA,eAAgBC,CAAAA,WAAwB,EAAEtS,IAAY,EAA6B;AACxF,QAAA,OAAO,IAAIkC,OAAAA,CAAQ,SAACtC,OAAAA,EAASC,MAAW,EAAA;AACtC,YAAA,IAAM0S,IAAO,GAAA,IAAIC,MAAOC,CAAAA,IAAI,CAAC;AAACH,gBAAAA,WAAAA;aAAY,EAAE;gBAAEtS,IAAAA,EAAAA,IAAAA;AAAK,aAAA,CAAA,CAAA;AACnD,YAAA,IAAM0S,MAAM,IAAIC,KAAAA,EAAAA,CAAAA;YAChBD,GAAIE,CAAAA,OAAO,GAAG,WAAY;AACxB/S,gBAAAA,MAAAA,CAAO,IAAI0N,KAAM,CAAA,6BAAA,CAAA,CAAA,CAAA;AACnB,aAAA,CAAA;YACAmF,GAAIG,CAAAA,MAAM,GAAG,WAAY;;AAEvBC,gBAAAA,qBAAAA,CAAsB,WAAM;oBAC1BlT,OAAQ8S,CAAAA,GAAAA,CAAAA,CAAAA;oBACRA,GAAIG,CAAAA,MAAM,GAAG,IAAI,CAAA;oBACjBH,GAAIE,CAAAA,OAAO,GAAG,IAAI,CAAA;oBAClBF,GAAIK,CAAAA,OAAO,GAAG,IAAI,CAAA;AACpB,iBAAA,CAAA,CAAA;AACF,aAAA,CAAA;AACAL,YAAAA,GAAAA,CAAIM,WAAW,GAAG,WAAA,CAAA;AAClBN,YAAAA,GAAAA,CAAIO,GAAG,GAAGC,GAAIC,CAAAA,eAAe,CAACZ,IAAAA,CAAAA,CAAAA;AAChC,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;AAlXWhH,IAAAA,QAAAA,CAoXJ6H,aAEN,GAFD,SAAOA,aAAAA,CAAcrT,GAAW,EAAW;QACzC,OAAO,yBAAA,CAA0ByD,IAAI,CAACzD,GAAAA,CAAAA,CAAAA;AACxC,KAAA,CAAA;AAtXWwL,IAAAA,QAAAA,CAwXJ8H,gBAMN,GAND,SAAOA,iBAAiBC,OAAe,EAAEC,WAAmB,EAAU;AACpE,QAAA,IAAIhI,QAzXKA,CAyXI6H,aAAa,CAACG,WAAc,CAAA,EAAA;YACvC,OAAOA,WAAAA,CAAAA;SACR;AAED,QAAA,OAAOD,OAAQE,CAAAA,SAAS,CAAC,CAAA,EAAGF,OAAQG,CAAAA,WAAW,CAAC,GAAA,CAAA,GAAO,CAAKlI,CAAAA,GA7XnDA,QA6X4DmI,CAAAA,mBAAmB,CAACH,WAAAA,CAAAA,CAAAA;AAC3F,KAAA,CAAA;AAEA;;AAEC,MACD,QAAOI,CAAAA,QA4DN,GA5DD,SAAOA,QAAAA,CAASC,GAAgB,EAG9B;AACA,QAAA,IAAMC,aAAgB,GAAA,CAAA,CAAA;QACtB,IAAMC,gBAAAA,GAAmB;AACzB,QAAA,IAAMC,iBAAoB,GAAA,EAAA,CAAA;AAC1B,QAAA,IAAMC,eAAkB,GAAA;YAAEC,IAAM,EAAA,UAAA;YAAYC,GAAK,EAAA,UAAA;AAAW,SAAA,CAAA;QAE5D,IAAMC,QAAAA,GAAW,IAAIC,QAASR,CAAAA,GAAAA,CAAAA,CAAAA;;AAG9B,QAAA,IAAMS,MAAS,GAAA;AACbC,YAAAA,KAAAA,EAAOH,QAASI,CAAAA,SAAS,CAAC,CAAA,EAAG,IAAI,CAAA;AACjCC,YAAAA,OAAAA,EAASL,QAASI,CAAAA,SAAS,CAACV,aAAAA,EAAe,IAAI,CAAA;AAC/C/P,YAAAA,MAAAA,EAAQqQ,QAASI,CAAAA,SAAS,CAAC,CAAA,GAAIV,eAAe,IAAI,CAAA;AACpD,SAAA,CAAA;QAEA,IAAIQ,MAAAA,CAAOC,KAAK,KAAKR,gBAAkB,EAAA;AACrCW,YAAAA,OAAAA,CAAQC,KAAK,CAAC,yDAAA,GAA4DL,OAAOC,KAAK,CAACK,QAAQ,CAAC,EAAA,CAAA,CAAA,CAAA;AAChG,YAAA,OAAO,IAAI,CAAA;SACZ;;AAGD,QAAA,IAAIC,WAAcT,GAAAA,QAAAA,CAASI,SAAS,CAACR,mBAAmB,IAAI,CAAA,CAAA;AAC5D,QAAA,IAAIc,YAAYV,QAASI,CAAAA,SAAS,CAACR,iBAAAA,GAAoBF,eAAe,IAAI,CAAA,CAAA;;QAG1E,IAAIgB,SAAAA,KAAcb,eAAgBC,CAAAA,IAAI,EAAE;AACtCQ,YAAAA,OAAAA,CAAQC,KAAK,CAAC,uDAA0DG,GAAAA,SAAAA,CAAUF,QAAQ,CAAC,EAAA,CAAA,CAAA,CAAA;AAC3F,YAAA,OAAO,IAAI,CAAA;SACZ;AAED,QAAA,IAAMG,WAAW,IAAI9Q,UAAAA,CAAW4P,GAAKG,EAAAA,iBAAAA,GAAoB,IAAIF,aAAee,EAAAA,WAAAA,CAAAA,CAAAA;AAC5E,QAAA,IAAMlH,OAAcuG,IAAKc,CAAAA,KAAK,CAACxJ,QAratBA,CAqa+Be,UAAU,CAACwI,QAAAA,CAAAA,CAAAA,CAAAA;;AAGnD,QAAA,IAAMlH,UAAyB,EAAE,CAAA;QACjC,IAAII,UAAAA,GAAa+F,iBAAoB,GAAA,CAAA,GAAIF,aAAgBe,GAAAA,WAAAA,CAAAA;QAEzD,MAAO5G,UAAAA,GAAaqG,MAAOvQ,CAAAA,MAAM,CAAE;AACjC8Q,YAAAA,WAAAA,GAAcT,QAASI,CAAAA,SAAS,CAACvG,UAAAA,EAAY,IAAI,CAAA,CAAA;AACjD6G,YAAAA,SAAAA,GAAYV,QAASI,CAAAA,SAAS,CAACvG,UAAAA,GAAa6F,eAAe,IAAI,CAAA,CAAA;YAE/D,IAAIgB,SAAAA,KAAcb,eAAgBE,CAAAA,GAAG,EAAE;AACrCO,gBAAAA,OAAAA,CAAQC,KAAK,CAAC,uDAA0DG,GAAAA,SAAAA,CAAUF,QAAQ,CAAC,EAAA,CAAA,CAAA,CAAA;AAC3F,gBAAA,OAAO,IAAI,CAAA;aACZ;YAED,IAAMK,aAAAA,GAAgBhH,aAAa,CAAI6F,GAAAA,aAAAA,CAAAA;AACvC,YAAA,IAAMxP,MAASuP,GAAAA,GAAAA,CAAIjQ,KAAK,CAACqR,eAAeA,aAAgBJ,GAAAA,WAAAA,CAAAA,CAAAA;AACxDhH,YAAAA,OAAAA,CAAQ3L,IAAI,CAACoC,MAAAA,CAAAA,CAAAA;AAEb2J,YAAAA,UAAAA,IAAc4G,cAAc,CAAIf,GAAAA,aAAAA,CAAAA;AAClC,SAAA;QAEA,OAAO;YACLnG,IAAAA,EAAAA,IAAAA;YACAE,OAAAA,EAAAA,OAAAA;AACF,SAAA,CAAA;AACF,KAAA,CAAA;AA/bWrC,IAAAA,QAAAA,CAicImI,mBAWd,GAXD,SAAeA,mBAAAA,CAAoBuB,IAAY,EAAU;;QAEvD,OAAOA,IAAAA,CACJC,KAAK,CAAC,GACNC,CAAAA,CAAAA,MAAM,CAACC,OAAAA,CAAAA,CACPC,MAAM,CAAC,SAACC,GAAAA,EAAKC,GAAQ,EAAA;YACpB,IAAIA,GAAAA,KAAQ,IAAMD,EAAAA,GAAAA,CAAIE,GAAG,EAAA,CAAA;AACpB,iBAAA,IAAID,GAAQ,KAAA,GAAA,EAAKD,GAAIrT,CAAAA,IAAI,CAACsT,GAAAA,CAAAA,CAAAA;YAC/B,OAAOD,GAAAA,CAAAA;SACN,EAAA,EAAE,CACJG,CAAAA,IAAI,CAAC,GAAA,CAAA,CAAA;AACV,KAAA,CAAA;AA5cWlK,IAAAA,OAAAA,QAAAA,CAAAA;AA6cZ,CAAA,EAAA;;ACzeM,SAAS,oBAAoB,CAAC,GAAG,EAAE,GAAG,EAAE;AAC/C,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC;AAC1D;AACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAC1E;AACA,IAAI,OAAO,IAAI,CAAC;AAChB;;ACJO,SAAS,oBAAoB,CAAC,GAAG,EAAE;AAC1C,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,OAAO,oBAAoB,CAAC,GAAG,CAAC,CAAC;AAC7D;;ACJO,SAAS,kBAAkB,CAAC,IAAI,EAAE;AACzC,IAAI,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,IAAI,EAAE;AACtG,QAAQ,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAChC,KAAK;AACL;;ACJO,SAAS,oBAAoB,GAAG;AACvC,IAAI,MAAM,IAAI,SAAS,CAAC,sIAAsI,CAAC,CAAC;AAChK;;ACAO,SAAS,8BAA8B,CAAC,CAAC,EAAE,MAAM,EAAE;AAC1D,IAAI,IAAI,CAAC,CAAC,EAAE,OAAO;AACnB,IAAI,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE,OAAO,oBAAoB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;AACtE;AACA,IAAI,IAAI,CAAC,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC3D;AACA,IAAI,IAAI,CAAC,KAAK,QAAQ,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC;AAChE,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,EAAE,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACzD,IAAI,IAAI,CAAC,KAAK,WAAW,IAAI,0CAA0C,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,oBAAoB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;AACxH;;ACNO,SAAS,oBAAoB,CAAC,GAAG,EAAE;AAC1C,IAAI,OAAO,oBAAoB,CAAC,GAAG,CAAC,IAAI,kBAAkB,CAAC,GAAG,CAAC,IAAI,8BAA8B,CAAC,GAAG,CAAC,IAAI,oBAAoB,EAAE,CAAC;AACjI;;ACFO,IAAA,MAAemK,iBA4DnB,WA5DI;AAAeA,IAAAA,SAAAA,MAAAA,GAAAA,EAAAA;IAAAA,MAGbC,CAAAA,mBAcN,GAdD,SAAOA,mBACLC,CAAAA,aAAqB,EACrBC,eAAgC,EAChCC,aAA2B,EAC3BrI,OAAsB,EAEhB;AADN,QAAA,IAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAGsI,QAAH,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,KAAQ,CAAR,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,MAAA,IAAA,EAAA,CAAA;AAAGA,YAAAA,KAAAA,CAAH,IAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,IAAQ,CAAA,CAAA;AAAD,SAAA;AAEP,QAAA,IAAMC,OAAUN,GAVEA,MAUKO,CAAAA,iBAAiB,CAACL,aAAc,CAAA,CAAA;AAEvD,QAAA,IAAII,OAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAAA,CAASlS,MAAM,EAAE;AACnB,YAAA,IAAK,IAAI8H,CAAI,GAAA,CAAA,EAAGA,IAAIoK,OAAQlS,CAAAA,MAAM,EAAE8H,CAAK,EAAA,CAAA;AACvCoK,gBAAAA,IAAAA,UAAAA,CAAAA;gBAAAA,CAAAA,UAAAA,GAAAA,OAAO,CAACpK,CAAAA,CAAE,EAAC+J,mBAAmB,CAA9BK,MAAAA,UAAAA,EAAAA;AAA+BH,oBAAAA,eAAAA;AAAiBC,oBAAAA,aAAAA;AAAerI,oBAAAA,OAAAA;AAAkB,iBAAA,CAAjFuI,OAAwE,oBAAGD,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAC7E,aAAA;SACD;AACH,KAAA,CAAA;IAjBoBL,MAmBbQ,CAAAA,oBAWN,GAXD,SAAOA,oBAAAA,CACLN,aAAqB,EACrBC,eAAgC,EAChCpI,OAAsB,EAEN;AADhB,QAAA,IAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAGsI,QAAH,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,KAAQ,CAAR,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,MAAA,IAAA,EAAA,CAAA;AAAGA,YAAAA,KAAAA,CAAH,IAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,IAAQ,CAAA,CAAA;AAAD,SAAA;AAEP,QAAA,IAAMC,OAAUN,GAzBEA,MAyBKO,CAAAA,iBAAiB,CAACL,aAAc,CAAA,CAAA;AAEvD,QAAA,IAAII,OAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAAA,CAASlS,MAAM,EAAE;AACZkS,YAAAA,IAAAA,SAAAA,CAAAA;YAAP,OAAOA,CAAAA,YAAAA,OAAO,CAAC,EAAE,EAACE,oBAAoB,CAA/BF,KAAAA,CAAAA,SAAAA,EAAAA;AAAgCH,gBAAAA,eAAAA;AAAiBpI,gBAAAA,OAAAA;AAAkB,aAAA,CAAnEuI,OAA0D,oBAAGD,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA;SACrE;AACH,KAAA,CAAA;AA9BoBL,IAAAA,MAAAA,CAgCbS,kBAGN,GAHD,SAAOA,kBAAAA,CAAmBP,aAAqB,EAAW;AACxD,QAAA,IAAMI,OAAUN,GAjCEA,MAiCKO,CAAAA,iBAAiB,CAACL,aAAc,CAAA,CAAA;QACvD,OAAO,CAAC,EAACI,OAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAAA,CAASlS,MAAM,CAAD,CAAA;AACzB,KAAA,CAAA;AAnCoB4R,IAAAA,MAAAA,CAqCbU,UAQN,GARD,SAAOA,UAAAA,CAAWR,aAAqB,EAAE;AACvC,QAAA,IAAMI,OAAUN,GAtCEA,MAsCKO,CAAAA,iBAAiB,CAACL,aAAc,CAAA,CAAA;AAEvD,QAAA,IAAII,OAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAAA,CAASlS,MAAM,EAAE;AACnB,YAAA,IAAK,IAAI8H,CAAI,GAAA,CAAA,EAAGA,IAAIoK,OAAQlS,CAAAA,MAAM,EAAE8H,CAAK,EAAA,CAAA;gBACvCoK,OAAO,CAACpK,CAAE,CAAA,CAACwK,UAAU,EAAA,CAAA;AACvB,aAAA;SACD;AACH,KAAA,CAAA;AAEA;;MA/CoBV,OAkDbW,mBAKN,GALD,SAAOA,mBAAoBT,CAAAA,aAAqB,EAAEU,eAAgC,EAAE;AAClF,QAAA,IAAI,CAACZ,MAnDaA,CAmDNO,iBAAiB,CAACL,cAAc,EAAE;AAnD5BF,YAAAA,MAAAA,CAoDTO,iBAAiB,CAACL,aAAc,CAAA,GAAG,EAAE,CAAA;SAC7C;AArDiBF,QAAAA,MAAAA,CAsDXO,iBAAiB,CAACL,aAAc,CAAA,CAAC3T,IAAI,CAACqU,eAAAA,CAAAA,CAAAA;AAC/C,KAAA,CAAA;AAvDoBZ,IAAAA,OAAAA,MAAAA,CAAAA;AA0DrB,CAAA,EAAA,CAAA;;AA1DqBA,IAAAA,MAAAA,CACLO,oBAAuD,EAAC,CAAA;;AA2DzE;;;AAGC,IACM,SAASM,iBAAkBX,CAAAA,aAAqB,EAAE;AACvD,IAAA,OAAO,SAACY,MAAsC,EAAA;AAC5C,QAAA,IAAMF,kBAAkB,IAAIE,MAAAA,EAAAA,CAAAA;QAE5Bd,MAAOW,CAAAA,mBAAmB,CAACT,aAAeU,EAAAA,eAAAA,CAAAA,CAAAA;AAC5C,KAAA,CAAA;AACF;;ACvEO,IAAA,eAAA,iBAAA,WAAA;AAAeG,IAAAA,SAAAA,eAAAA,GAAAA,EAAAA;AAAAA,IAAAA,IAAAA,MAAAA,GAAAA,eAAAA,CAAAA,SAAAA,CAAAA;AACpBL,IAAAA,MAAAA,CAAAA,UAAqB,GAArBA,SAAAA,UAAAA,GAAmB,EAAC,CAAA;IAEpBT,MAAAA,CAAAA,mBAK0B,GAL1BA,SAAAA,mBAAAA,CACEe,MAAuB,EACvBZ,aAA2B,EAC3BrI,OAAsB,EAEA;AADtB,QAAA,IAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAGsI,QAAH,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,KAAQ,CAAR,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,MAAA,IAAA,EAAA,CAAA;AAAGA,YAAAA,KAAAA,CAAH,IAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,IAAQ,CAAA,CAAA;AAAD,SAAA;AACgB,KAAA,CAAA;AAEzBG,IAAAA,MAAAA,CAAAA,oBAMC,GANDA,SAAAA,qBACEQ,MAAuB,EACvBjJ,OAAsB,EAEgB;AADtC,QAAA,IAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAGsI,QAAH,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,KAAQ,CAAR,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,MAAA,IAAA,EAAA,CAAA;AAAGA,YAAAA,KAAAA,CAAH,IAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,IAAQ,CAAA,CAAA;AAAD,SAAA;AAEP,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAhBoBU,IAAAA,OAAAA,eAAAA,CAAAA;AAiBrB,CAAA,EAAA;;ICZKE,0BADN,iBAAA,SAAA,eAAA,EAAA;;;;;;IAIEP,MAAAA,CAAAA,UAIC,GAJDA,SAAAA,UAAmB,GAAA;QACjB,IAAI,CAACO,0BAA2BC,CAAAA,QAAQ,EAAE;YACxCD,0BAA2BC,CAAAA,QAAQ,GAAG,IAAIC,wBAAAA,EAAAA,CAAAA;SAC3C;AACH,KAAA,CAAA;IAEAX,MAAAA,CAAAA,oBA0BC,GA1BDA,SAAAA,oBAAAA,CAAqBQ,MAAgC,EAAEjJ,OAAsB,EAAEqJ,aAA6B,EAAE;AAC5G,QAAA,IAAQpJ,IAAkBD,GAAAA,OAAAA,CAAlBC,IAAME,EAAAA,OAAAA,GAAYH,OAAZG,CAAAA,OAAAA,CAAAA;AACd,QAAA,IAAQC,WAA2BH,GAAAA,IAAAA,CAA3BG,WAAakJ,EAAAA,SAAAA,GAAcrJ,IAAdqJ,CAAAA,SAAAA,CAAAA;AACrB,QAAA,IAAQjJ,eAA8D4I,GAAAA,MAAAA,CAA9D5I,UAA6BkJ,EAAYC,mBAAqBP,MAAjCM,CAAAA,UAAAA,CAAAA;AAErC,QAAA,IAAME,eAAe,EAAC,CAAA;AACtB,QAAA,IAAMC,mBAAmB,EAAC,CAAA;QAC1B,IAAK,IAAIC,iBAAiBH,gBAAkB,CAAA;AAC1CC,YAAAA,YAAY,CAACE,aAAAA,CAAc,GAAGH,gBAAgB,CAACG,aAAc,CAAA,CAAA;AAC/D,SAAA;AACA,QAAA,IAAK,IAAIA,cAAAA,IAAiBN,aAAcE,CAAAA,UAAU,CAAE;AAClD,YAAA,IAAIC,gBAAgB,CAACG,cAAc,CAAA,KAAKzI,SAAW,EAAA;AACjD,gBAAA,IAAM0I,cAAcN,SAAS,CAACD,cAAcE,UAAU,CAACI,eAAc,CAAC,CAAA;gBACtED,gBAAgB,CAACC,eAAc,GAAG7L,QAAAA,CAAS0B,gBAAgB,CAACoK,WAAAA,CAAYnK,aAAa,CAAA,CAAExM,IAAI,CAAA;aAC5F;AACH,SAAA;AACA,QAAA,IAAM4W,aAAgBP,GAAAA,SAAS,CAACD,aAAAA,CAAc/G,OAAO,CAAC,CAAA;AACtD,QAAA,IAAMwH,YAAYhM,QAAS0B,CAAAA,gBAAgB,CAACqK,aAAcpK,CAAAA,aAAa,EAAExM,IAAI,CAAA;AAC7E,QAAA,IAAM8W,UAAa,GAAA;YACjBC,YAAcP,EAAAA,YAAAA;YACdQ,cAAgBP,EAAAA,gBAAAA;AAChBQ,YAAAA,YAAAA,EAAc,IAAI;YAClBJ,SAAAA,EAAAA,SAAAA;AACF,SAAA,CAAA;AACA,QAAA,IAAMlT,SAASkH,QAASsF,CAAAA,iBAAiB,CAAChD,WAAW,CAAC+J,gBAAgB,EAAEhK,OAAAA,CAAAA,CAAAA;QACxE,OAAO+I,0BAAAA,CAA2BC,QAAQ,CAACpK,MAAM,CAACnI,MAAQmT,EAAAA,UAAAA,CAAAA,CAAYvX,IAAI,CAAC,SAAC4X,cAAAA,EAAAA;AAAmBA,YAAAA,OAAAA,cAAAA,CAAAA;;AACjG,KAAA,CAAA;;AAnCuCpB,CAAAA,CAAAA,eAAAA,CAAAA,CAAAA;AAAnCE,0BAAAA,GAAAA,UAAAA,CAAAA;IADLJ,iBAAkB,CAAA,4BAAA,CAAA;AACbI,CAAAA,EAAAA,0BAAAA,CAAAA;;ACTC,SAAS,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE;AACzC,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE;AACrF,QAAQ,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC;AACjD,KAAK,MAAM,OAAO,IAAI,YAAY,KAAK,CAAC;AACxC;;ICGMmB,mBADN,iBAAA,SAAA,eAAA,EAAA;;;;;;IAEEnC,MAAAA,CAAAA,mBAgCC,GAhCDA,SAAAA,mBAAAA,CAAoBe,MAAgC,EAAEqB,MAAc,EAAEtK,OAAsB,EAAQ;AAClG,QAAA,IAAQuK,KAA4CtB,GAAAA,MAAAA,CAA5CsB,KAA4CtB,EAAAA,iBAAAA,GAAAA,MAAAA,CAArCuB,WAAAA,SAAY,GAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,iBAAA,EAAGjY,IAAsB0W,GAAAA,MAAAA,CAAtB1W,IAAMkY,EAAAA,KAAAA,GAAgBxB,MAAhBwB,CAAAA,KAAAA,EAAOC,OAASzB,MAATyB,CAAAA,IAAAA,CAAAA;QAC3C,IAAMC,YAAAA,GAAe3K,QAAQ2K,YAAY,CAAA;QACzC,IAAIC,KAAAA,CAAAA;AAEJ,QAAA,IAAIrY,SAAS,aAAe,EAAA;YAC1BqY,KAAQN,GAAAA,MAAAA,CAAOO,YAAY,CAACC,sBAAAA,CAAAA,CAAAA;SACvB,MAAA,IAAIvY,SAAS,OAAS,EAAA;YAC3BqY,KAAQN,GAAAA,MAAAA,CAAOO,YAAY,CAACE,qBAAAA,CAAAA,CAAAA;SACvB,MAAA,IAAIxY,SAAS,MAAQ,EAAA;YAC1BqY,KAAQN,GAAAA,MAAAA,CAAOO,YAAY,CAACG,oBAAAA,CAAAA,CAAAA;SAC7B;AAED,QAAA,IAAIT,KAAO,EAAA;AACTK,YAAAA,KAAAA,CAAML,KAAK,CAACU,GAAG,CAACV,KAAK,CAAC,CAAA,CAAE,EAAEA,KAAK,CAAC,CAAE,CAAA,EAAEA,KAAK,CAAC,EAAE,EAAE,CAAA,CAAA,CAAA;SAC/C;AAEDK,QAAAA,KAAAA,CAAMJ,SAAS,GAAGA,SAAAA,CAAAA;AAElB,QAAA,IAAIC,KAAS,IAAA,CAAEG,WAAK,CAALA,OAAiBE,sBAAc,CAAA,EAAA;AAC5CF,YAAAA,KAAAA,CAAMM,QAAQ,GAAGT,KAAAA,CAAAA;SAClB;AAED,QAAA,IAAIC,IAAQE,IAAK,WAALA,CAAAA,KAAAA,EAAiBI,oBAAW,CAAA,EAAA;YACtC,IAA6DN,oBAAAA,GAAAA,IAAAA,CAArDS,gBAAAA,cAAiB,GAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,oBAAA,EAAA,oBAAA,GAAoCT,KAAjCU,cAAAA,EAAAA,cAAAA,GAAAA,oBAAAA,KAAAA,KAAAA,CAAAA,GAAiBhK,IAAKiK,CAAAA,EAAE,GAAG,CAAA,GAAA,oBAAA,CAAA;AAEvDT,YAAAA,KAAAA,CAAMU,KAAK,GAAGH,cAAAA,CAAAA;YACdP,KAAMW,CAAAA,QAAQ,GAAGH,cAAiBD,GAAAA,cAAAA,CAAAA;SACnC;AAED,QAAA,IAAI,CAACR,YAAaa,CAAAA,MAAM,EAAEb,YAAaa,CAAAA,MAAM,GAAG,EAAE,CAAA;QAClDb,YAAaa,CAAAA,MAAM,CAAChX,IAAI,CAACoW,KAAAA,CAAAA,CAAAA;AAC3B,KAAA,CAAA;;AAjCgC5B,CAAAA,CAAAA,eAAAA,CAAAA,CAAAA;AAA5BqB,mBAAAA,GAAAA,UAAAA,CAAAA;IADLvB,iBAAkB,CAAA,qBAAA,CAAA;AACbuB,CAAAA,EAAAA,mBAAAA,CAAAA;;ACQC,IAAA,cAAA,iBAAA,SAAA,OAAA,EAAA;AAAMoB,IAAAA,SAAAA,CAAAA,cAAAA,EAAAA,OAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,cAAAA,GAAAA;;;AAAAA,IAAAA,IAAAA,MAAAA,GAAAA,cAAAA,CAAAA,SAAAA,CAAAA;AASXnE,IAAAA,MAAAA,CAAAA,KA+JC,GA/JDA,SAAAA,KAAAA,CAAMtH,OAAsB,EAA4B;AACtD,QAAA,IAAQC,IAAuBD,GAAAA,OAAAA,CAAvBC,IAAM0K,EAAAA,YAAAA,GAAiB3K,OAAjB2K,CAAAA,YAAAA,CAAAA;AAEd,QAAA,IAAQpT,MAAqBoT,GAAAA,YAAAA,CAArBpT,MAAQmU,EAAAA,QAAAA,GAAaf,YAAbe,CAAAA,QAAAA,CAAAA;QAChB,IAAI,CAACzL,IAAK0L,CAAAA,SAAS,EAAE,OAAA;QAErB,IAAM1R,oBAAAA,GAAuB+F,QAAQ/F,oBAAoB,CAAA;AACzD,QAAA,IAAM0R,YAAwB,EAAE,CAAA;QAEhC,IAAK,IAAIxN,IAAI,CAAGA,EAAAA,CAAAA,GAAI8B,KAAK0L,SAAS,CAACtV,MAAM,EAAE8H,CAAK,EAAA,CAAA;AAC9C,YAAA,IAWI8B,oBAAAA,IAAK0L,CAAAA,SAAS,CAACxN,CAAAA,CAAE,iCAAjB8B,iBAVF2L,CAAAA,UAAAA,EAAAA,UAAa,GAAA,4BAAA,KAAA,KAAA,CAAA,GAAA,mCACbC,oBASE5L,GAAAA,iBAAAA,CATF4L,oBACAC,EAAAA,aAAAA,GAQE7L,kBARF6L,aACAC,EAAAA,gBAAAA,GAOE9L,iBAPF8L,CAAAA,gBAAAA,EACAC,kBAME/L,iBANF+L,CAAAA,eAAAA,EACAC,cAKEhM,GAAAA,iBAAAA,CALFgM,gBACAC,SAIEjM,GAAAA,iBAAAA,CAJFiM,SACAC,EAAAA,WAAAA,GAGElM,kBAHFkM,WACAC,EAAAA,WAAAA,GAEEnM,kBAFFmM,WAEEnM,EAAAA,sBAAAA,GAAAA,iBAAAA,CADFhN,MAAAA,IAAO,GAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,sBAAA,CAAA;AAGT,YAAA,IACEoZ,mBAKET,GAAAA,UAAAA,CALFS,mBACAC,EAAAA,mCAAAA,GAIEV,UAJFU,CAAAA,mCAAAA,EACAC,uBAGEX,GAAAA,UAAAA,CAHFW,uBACAC,EAAAA,iBAAAA,GAEEZ,UAFFY,CAAAA,iBAAAA,EACAC,wBACEb,UADFa,CAAAA,qBAAAA,CAAAA;AAGF,YAAA,IAAIC,WAA8D,IAAI,CAAA;AAEtE,YAAA,IAAIL,mBAAqB,EAAA;AACvBK,gBAAAA,QAAAA,GAA0BzE,MAAOQ,CAAAA,oBAAoB,CAAC,qBAAA,EAAuB4D,mBAAqBrM,EAAAA,OAAAA,CAAAA,CAAAA;AACpG,aAAA,MAAO,IAAIsM,mCAAqC,EAAA;AAC9CI,gBAAAA,QAAAA,GACEzE,MAAOQ,CAAAA,oBAAoB,CACzB,qCAAA,EACA6D,mCACAtM,EAAAA,OAAAA,CAAAA,CAAAA;aAGC,MAAA;AACL0M,gBAAAA,QAAAA,GAAW,IAAIC,sBAAYpV,CAAAA,MAAAA,CAAAA,CAAAA;aAC5B;AAEDmV,YAAAA,QAAAA,CAASzZ,IAAI,GAAGA,IAAAA,CAAAA;AAEhB,YAAA,IAAIsZ,uBAAyB,EAAA;AAC3BtE,gBAAAA,MAAAA,CAAOC,mBAAmB,CAAC,yBAA2BqE,EAAAA,uBAAAA,EAAyBG,QAAU1M,EAAAA,OAAAA,CAAAA,CAAAA;aAC1F;AAED,YAAA,IAAIwM,iBAAmB,EAAA;AACrBvE,gBAAAA,MAAAA,CAAOC,mBAAmB,CAAC,mBAAqBsE,EAAAA,iBAAAA,EAAmBE,QAAU1M,EAAAA,OAAAA,CAAAA,CAAAA;aAC9E;AAED,YAAA,IAAI6L,oBAAsB,EAAA;AACxB,gBAAA,IAAQe,eACNf,GAAAA,oBAAAA,CADMe,eAAiBC,EAAAA,gBAAAA,GACvBhB,oBADuBgB,CAAAA,gBAAAA,EAAkBC,cACzCjB,GAAAA,oBAAAA,CADyCiB,cAAgBC,EAAAA,eAAAA,GACzDlB,oBADyDkB,CAAAA,eAAAA,EAAiBC,2BAC1EnB,oBAD0EmB,CAAAA,wBAAAA,CAAAA;AAG5E,gBAAA,IAAIJ,eAAiB,EAAA;oBACnBF,QAASO,CAAAA,SAAS,GAAG,IAAIrO,gBACvBA,CAAAA,gBAAAA,CAAMsO,kBAAkB,CAACN,eAAe,CAAC,CAAE,CAAA,CAAA,EAC3ChO,gBAAMsO,CAAAA,kBAAkB,CAACN,eAAe,CAAC,CAAA,CAAE,CAC3ChO,EAAAA,gBAAAA,CAAMsO,kBAAkB,CAACN,eAAe,CAAC,CAAE,CAAA,CAAA,EAC3CA,eAAe,CAAC,CAAE,CAAA,CAAA,CAAA;iBAErB;AACD,gBAAA,IAAIC,gBAAkB,EAAA;AACpBH,oBAAAA,QAAAA,CAASS,WAAW,GAAGzB,QAAQ,CAACmB,gBAAAA,CAAiBO,KAAK,CAAC,CAAA;AA/EpD3B,oBAAAA,cAAAA,CAgFY4B,sBAAsB,CAACX,QAAUG,EAAAA,gBAAAA,CAAiBjB,UAAU,EAAE5L,OAAAA,CAAAA,CAAAA;iBAC9E;gBAED,IAAI,CAACqM,mBAAuB,IAAA,CAACC,mCAAqC,EAAA;AAChE,oBAAA,IAAMgB,CAAIZ,GAAAA,QAAAA,CAAAA;AACVY,oBAAAA,CAAAA,CAAEC,QAAQ,GAAGT,cAAAA,IAAAA,IAAAA,GAAAA,cAAAA,GAAkB,CAAC,CAAA;AAChCQ,oBAAAA,CAAAA,CAAEE,SAAS,GAAGT,eAAAA,IAAAA,IAAAA,GAAAA,eAAAA,GAAmB,CAAC,CAAA;AAClC,oBAAA,IAAIC,wBAA0B,EAAA;AAC5BM,wBAAAA,CAAAA,CAAEG,wBAAwB,GAAG/B,QAAQ,CAACsB,wBAAAA,CAAyBI,KAAK,CAAC,CAAA;AAxFpE3B,wBAAAA,cAAAA,CAyFc4B,sBAAsB,CAACX,QAAUM,EAAAA,wBAAAA,CAAyBpB,UAAU,EAAE5L,OAAAA,CAAAA,CAAAA;qBACtF;iBACF;aACF;AAED,YAAA,IAAI,CAACqM,mBAAqB,EAAA;AACxB,gBAAA,IAAMiB,EAAIZ,GAAAA,QAAAA,CAAAA;AAEV,gBAAA,IAAIV,eAAiB,EAAA;AACnBsB,oBAAAA,EAAAA,CAAEtB,eAAe,GAAGN,QAAQ,CAACM,eAAAA,CAAgBoB,KAAK,CAAC,CAAA;AAlGhD3B,oBAAAA,cAAAA,CAmGY4B,sBAAsB,CAACX,QAAUV,EAAAA,eAAAA,CAAgBJ,UAAU,EAAE5L,OAAAA,CAAAA,CAAAA;iBAC7E;AAED,gBAAA,IAAIiM,cAAgB,EAAA;oBAClBqB,EAAEI,CAAAA,aAAa,GAAG,IAAI9O,gBAAAA,CACpBA,iBAAMsO,kBAAkB,CAACjB,cAAc,CAAC,CAAE,CAAA,CAAA,EAC1CrN,iBAAMsO,kBAAkB,CAACjB,cAAc,CAAC,CAAE,CAAA,CAAA,EAC1CrN,iBAAMsO,kBAAkB,CAACjB,cAAc,CAAC,CAAE,CAAA,CAAA,CAAA,CAAA;iBAE7C;AAED,gBAAA,IAAIH,aAAe,EAAA;AACjB,oBAAA,IAAQsB,KAAiBtB,GAAAA,aAAAA,CAAjBsB,KAAOO,EAAAA,KAAAA,GAAU7B,aAAV6B,CAAAA,KAAAA,CAAAA;AACfL,oBAAAA,EAAAA,CAAExB,aAAa,GAAGJ,QAAQ,CAAC0B,KAAM,CAAA,CAAA;AAhH9B3B,oBAAAA,cAAAA,CAiHY4B,sBAAsB,CAACX,QAAUZ,EAAAA,aAAAA,CAAcF,UAAU,EAAE5L,OAAAA,CAAAA,CAAAA;AAC1E,oBAAA,IAAI2N,UAAUzM,SAAW,EAAA;AACvBoM,wBAAAA,EAAAA,CAAEM,sBAAsB,GAAGD,KAAAA,CAAAA;qBAC5B;iBACF;AAED,gBAAA,IAAI5B,gBAAkB,EAAA;AACpB,oBAAA,IAAQqB,SAA8BrB,gBAA9BqB,CAAAA,KAAAA,EAAOS,WAAuB9B,gBAAvB8B,CAAAA,QAAAA,EAAUC,WAAa/B,gBAAb+B,CAAAA,QAAAA,CAAAA;AACzBR,oBAAAA,EAAAA,CAAEvB,gBAAgB,GAAGL,QAAQ,CAAC0B,MAAM,CAAA,CAAA;AAzHjC3B,oBAAAA,cAAAA,CA0HY4B,sBAAsB,CAACX,QAAUX,EAAAA,gBAAAA,CAAiBH,UAAU,EAAE5L,OAAAA,CAAAA,CAAAA;AAC7E,oBAAA,IAAI6N,aAAa3M,SAAW,EAAA;AAC1BoM,wBAAAA,EAAAA,CAAES,yBAAyB,GAAGF,QAAAA,CAAAA;qBAC/B;oBACD,IAAIC,QAAAA,KAAaE,4BAAkBC,CAAAA,GAAG,EAAE;wBACtCX,EAAEY,CAAAA,qBAAqB,GAAGF,4BAAAA,CAAkBC,GAAG,CAAA;AACjD,qBAAA,MAAO,IAAIH,QAAAA,GAAWE,4BAAkBC,CAAAA,GAAG,EAAE;AAC3CE,wBAAAA,iBAAAA,CAAOC,IAAI,CAAC,qDAAA,CAAA,CAAA;qBACb;iBACF;aACF;AAED,YAAA,IAAI3B,qBAAuB,EAAA;AACPxM,gBAAAA,IAAAA,gBAAAA,CAAAA;gBAAlBA,IAAK2L,CAAAA,UAAU,GAAG3L,CAAAA,gBAAAA,GAAAA,KAAK2L,UAAU,KAAA,IAAA,GAAf3L,gBAAmB,GAAA,EAAE,CAAA;AACIA,gBAAAA,IAAAA,sCAAAA,CAAAA;AAA3CA,gBAAAA,IAAAA,CAAK2L,UAAU,CAAC,uBAAwB,CAAA,GAAG3L,CAAAA,sCAAAA,GAAAA,IAAK2L,CAAAA,UAAU,CAAC,uBAAA,CAAwB,KAAxC3L,IAAAA,GAAAA,sCAAAA,GAA4C,EAAE,CAAA;gBACzFA,IAAK2L,CAAAA,UAAU,CAAC,uBAAA,CAAwB,CAACzN,CAAAA,CAAE,GAAG8J,MAAOQ,CAAAA,oBAAoB,CACvE,uBAAA,EACAgE,qBACAzM,EAAAA,OAAAA,CAAAA,CAAAA;aAEH;AAED,YAAA,IAAIoM,WAAa,EAAA;gBACfM,QAAS2B,CAAAA,UAAU,GAAGC,qBAAAA,CAAWC,MAAM,CAAA;aAClC,MAAA;gBACL7B,QAAS2B,CAAAA,UAAU,GAAGC,qBAAAA,CAAWE,KAAK,CAAA;aACvC;YAED,OAAQtC,SAAAA;AACN,gBAAA,KAAKpP,kBAAkBC,MAAM;oBAC3B2P,QAAS+B,CAAAA,aAAa,GAAG,KAAK,CAAA;oBAC9B,MAAM;AACR,gBAAA,KAAK3R,kBAAkBG,KAAK;oBAC1ByP,QAAS+B,CAAAA,aAAa,GAAG,IAAI,CAAA;oBAC7B,MAAM;AACR,gBAAA,KAAK3R,kBAAkBE,IAAI;AACzB0P,oBAAAA,QAAAA,CAASP,WAAW,GAAGA,WAAAA,IAAAA,IAAAA,GAAAA,WAAAA,GAAe,GAAG,CAAA;oBACzC,MAAM;AACV,aAAA;YAEAR,SAAS,CAACxN,EAAE,GAAGuO,QAAAA,CAAAA;AACjB,SAAA;AAEA/B,QAAAA,YAAAA,CAAagB,SAAS,GAAGA,SAAAA,CAAAA;AACzB1R,QAAAA,oBAAAA,CAAqB9H,OAAO,CAACwZ,SAAAA,CAAAA,CAAAA;AAC7B,QAAA,OAAO1R,qBAAqBQ,OAAO,CAAA;AACrC,KAAA,CAAA;AAvKA,qBADWgR,cAEJ4B,CAAAA,sBAKN,GALD,SAAOA,sBAAuBX,CAAAA,QAAkB,EAAEd,UAAoB,EAAE5L,OAAsB,EAAQ;QAApD4L,IAAAA,UAAAA,KAAAA,KAAAA,CAAAA,EAAAA,aAAkB,EAAC,CAAA;QACnE,IAAM3C,MAAAA,GAAS2C,WAAW8C,qBAAqB,CAAA;AAC/C,QAAA,IAAIzF,MAAQ,EAAA;AACVhB,YAAAA,MAAAA,CAAOC,mBAAmB,CAAC,uBAAyBe,EAAAA,MAAAA,EAAQyD,QAAU1M,EAAAA,OAAAA,CAAAA,CAAAA;SACvE;AACH,KAAA,CAAA;AAPWyL,IAAAA,OAAAA,cAAAA,CAAAA;EAAuBxD,MAyKnC,CAAA;;IChLKsE,uBADN,iBAAA,SAAA,eAAA,EAAA;;;;;;IAEErE,MAAAA,CAAAA,mBAyBC,GAzBDA,SAAAA,mBAAAA,CAAoBe,MAA8B,EAAEyD,QAAqB,EAAE1M,OAAsB,EAAQ;AACvG,QAAA,IAAM,QAAE0L,GAAa1L,OAAQ2K,CAAAA,YAAY,CAAjCe,QAAAA,CAAAA;AACR,QAAA,IAAA,uBAAA,GAMIzC,MALF0F,CAAAA,eAAAA,EAAAA,eAAkB,GAAA,uBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,uBAAA,EAClBC,mBAIE3F,MAJF2F,CAAAA,gBAAAA,EAAAA,gCAAAA,GAIE3F,MAHF4F,CAAAA,wBAAAA,EAAAA,yEAA2B,CAC3BC,GAAAA,gCAAAA,EAAAA,yBAAAA,GAEE7F,MAFF6F,CAAAA,yBAAAA,EACAC,yBACE9F,MADF8F,CAAAA,sBAAAA,CAAAA;AAGFrC,QAAAA,QAAAA,CAASsC,SAAS,GAAGL,eAAAA,CAAAA;AACrBjC,QAAAA,QAAAA,CAASuC,kBAAkB,GAAGJ,wBAAAA,CAAAA;AAE9B,QAAA,IAAID,gBAAkB,EAAA;AACpBlC,YAAAA,QAAAA,CAASwC,gBAAgB,GAAGxD,QAAQ,CAACkD,gBAAAA,CAAiBxB,KAAK,CAAC,CAAA;AAC5D3B,YAAAA,cAAAA,CAAe4B,sBAAsB,CAACX,QAAUkC,EAAAA,gBAAAA,CAAiBhD,UAAU,EAAE5L,OAAAA,CAAAA,CAAAA;SAC9E;AACD,QAAA,IAAI8O,yBAA2B,EAAA;AAC7BpC,YAAAA,QAAAA,CAASyC,yBAAyB,GAAGzD,QAAQ,CAACoD,yBAAAA,CAA0B1B,KAAK,CAAC,CAAA;AAC9E3B,YAAAA,cAAAA,CAAe4B,sBAAsB,CAACX,QAAUoC,EAAAA,yBAAAA,CAA0BlD,UAAU,EAAE5L,OAAAA,CAAAA,CAAAA;SACvF;AACD,QAAA,IAAI+O,sBAAwB,EAAA;AAC1BrC,YAAAA,QAAAA,CAAS0C,sBAAsB,GAAG1D,QAAQ,CAACqD,sBAAAA,CAAuB3B,KAAK,CAAC,CAAA;AACxE3B,YAAAA,cAAAA,CAAe4B,sBAAsB,CAACX,QAAUqC,EAAAA,sBAAAA,CAAuBnD,UAAU,EAAE5L,OAAAA,CAAAA,CAAAA;SACpF;AACH,KAAA,CAAA;;AA1BoCgJ,CAAAA,CAAAA,eAAAA,CAAAA,CAAAA;AAAhCuD,uBAAAA,GAAAA,UAAAA,CAAAA;IADLzD,iBAAkB,CAAA,yBAAA,CAAA;AACbyD,CAAAA,EAAAA,uBAAAA,CAAAA;;ICAAC,iBADN,iBAAA,SAAA,eAAA,EAAA;;;;;;IAEEtE,MAAAA,CAAAA,mBAIC,GAJDA,SAAAA,mBAAAA,CAAoBe,MAAwB,EAAEyD,QAAqB,EAAE1M,OAAsB,EAAQ;QACjG,IAAsBiJ,WAAAA,GAAAA,MAAAA,CAAdoG,KAAAA,GAAM,GAAA,WAAA,KAAA,KAAA,CAAA,GAAA,GAAA,GAAA,WAAA,CAAA;AAEd3C,QAAAA,QAAAA,CAAS2C,GAAG,GAAGA,GAAAA,CAAAA;AACjB,KAAA,CAAA;;AAL8BrG,CAAAA,CAAAA,eAAAA,CAAAA,CAAAA;AAA1BwD,iBAAAA,GAAAA,UAAAA,CAAAA;IADL1D,iBAAkB,CAAA,mBAAA,CAAA;AACb0D,CAAAA,EAAAA,iBAAAA,CAAAA;;ICCAF,mCADN,iBAAA,SAAA,eAAA,EAAA;;;;;;AAEE7D,IAAAA,MAAAA,CAAAA,oBAqCC,GArCDA,SAAAA,qBAAqBQ,MAA0C,EAAEjJ,OAAsB,EAAuB;QAC5G,IAA6BA,qBAAAA,GAAAA,QAAQ2K,YAAY,EAAzCpT,SAAqByI,qBAArBzI,CAAAA,MAAAA,EAAQmU,WAAa1L,qBAAb0L,CAAAA,QAAAA,CAAAA;QAChB,IAAMgB,QAAAA,GAAW,IAAI4C,8BAAoB/X,CAAAA,MAAAA,CAAAA,CAAAA;AACzC,QAAA,IAAQgY,aAA+FtG,GAAAA,MAAAA,CAA/FsG,aAAeC,EAAAA,cAAAA,GAAgFvG,MAAhFuG,CAAAA,cAAAA,EAAgBC,cAAgExG,GAAAA,MAAAA,CAAhEwG,cAAgBC,EAAAA,gBAAAA,GAAgDzG,MAAhDyG,CAAAA,gBAAAA,EAAkBC,4BAA8B1G,MAA9B0G,CAAAA,yBAAAA,CAAAA;AAEzE,QAAA,IAAIJ,aAAe,EAAA;YACjB7C,QAASO,CAAAA,SAAS,GAAG,IAAIrO,gBACvBA,CAAAA,gBAAAA,CAAMsO,kBAAkB,CAACqC,aAAa,CAAC,CAAE,CAAA,CAAA,EACzC3Q,gBAAMsO,CAAAA,kBAAkB,CAACqC,aAAa,CAAC,CAAA,CAAE,CACzC3Q,EAAAA,gBAAAA,CAAMsO,kBAAkB,CAACqC,aAAa,CAAC,CAAE,CAAA,CAAA,EACzCA,aAAa,CAAC,CAAE,CAAA,CAAA,CAAA;SAEnB;AAED,QAAA,IAAIC,cAAgB,EAAA;AAClB9C,YAAAA,QAAAA,CAASS,WAAW,GAAGzB,QAAQ,CAAC8D,cAAAA,CAAepC,KAAK,CAAC,CAAA;AACrD3B,YAAAA,cAAAA,CAAe4B,sBAAsB,CAACX,QAAU8C,EAAAA,cAAAA,CAAe5D,UAAU,EAAE5L,OAAAA,CAAAA,CAAAA;SAC5E;AAED,QAAA,IAAIyP,cAAgB,EAAA;YAClB/C,QAASkD,CAAAA,aAAa,GAAG,IAAIhR,gBAAAA,CAC3BA,iBAAMsO,kBAAkB,CAACuC,cAAc,CAAC,CAAE,CAAA,CAAA,EAC1C7Q,iBAAMsO,kBAAkB,CAACuC,cAAc,CAAC,CAAE,CAAA,CAAA,EAC1C7Q,iBAAMsO,kBAAkB,CAACuC,cAAc,CAAC,CAAE,CAAA,CAAA,CAAA,CAAA;SAE7C;AAED,QAAA,IAAIC,qBAAqBxO,SAAW,EAAA;AAClCwL,YAAAA,QAAAA,CAASmD,UAAU,GAAGH,gBAAAA,CAAAA;SACvB;AAED,QAAA,IAAIC,yBAA2B,EAAA;AAC7BjD,YAAAA,QAAAA,CAASiD,yBAAyB,GAAGjE,QAAQ,CAACiE,yBAAAA,CAA0BvC,KAAK,CAAC,CAAA;AAC9E3B,YAAAA,cAAAA,CAAe4B,sBAAsB,CAACX,QAAUiD,EAAAA,yBAAAA,CAA0B/D,UAAU,EAAE5L,OAAAA,CAAAA,CAAAA;SACvF;QAED,OAAO0M,QAAAA,CAAAA;AACT,KAAA,CAAA;;AAtCgD1D,CAAAA,CAAAA,eAAAA,CAAAA,CAAAA;AAA5CsD,mCAAAA,GAAAA,UAAAA,CAAAA;IADLxD,iBAAkB,CAAA,qCAAA,CAAA;AACbwD,CAAAA,EAAAA,mCAAAA,CAAAA;;ICFAD,mBADN,iBAAA,SAAA,eAAA,EAAA;;;;;;AAEE5D,IAAAA,MAAAA,CAAAA,oBAKC,GALDA,SAAAA,qBAAqBQ,MAA0B,EAAEjJ,OAAsB,EAAiB;AACtF,QAAA,IAAM,MAAEzI,GAAWyI,OAAQ2K,CAAAA,YAAY,CAA/BpT,MAAAA,CAAAA;QACR,IAAMmV,QAAAA,GAAW,IAAIoD,wBAAcvY,CAAAA,MAAAA,CAAAA,CAAAA;QAEnC,OAAOmV,QAAAA,CAAAA;AACT,KAAA,CAAA;;AANgC1D,CAAAA,CAAAA,eAAAA,CAAAA,CAAAA;AAA5BqD,mBAAAA,GAAAA,UAAAA,CAAAA;IADLvD,iBAAkB,CAAA,qBAAA,CAAA;AACbuD,CAAAA,EAAAA,mBAAAA,CAAAA;;ICAA0D,sBADN,iBAAA,SAAA,eAAA,EAAA;;;;;;IAEE7H,MAAAA,CAAAA,mBAoBC,GApBDA,SAAAA,mBAAAA,CAAoBe,MAAoC,EAAE+G,QAAkB,EAAEhQ,OAAsB,EAAQ;QAC1G,IAOIA,aAAAA,GAAAA,OAAAA,CANFC,+CACE2L,UACEmE,EAAAA,+CAAAA,GAAAA,wBAAAA,CAAAA,sBAAAA,EAA0BE,YAAAA,GAAAA,+CAAAA,CAAAA,QAAAA,EAG9BtF,eACE3K,OADF2K,CAAAA,YAAAA,CAAAA;QAEF,IAAQuF,WAAajH,MAAbiH,CAAAA,QAAAA,CAAAA;AAER,QAAA,IAAK,IAAI/R,CAAI,GAAA,CAAA,EAAGA,IAAI+R,QAAS7Z,CAAAA,MAAM,EAAE8H,CAAK,EAAA,CAAA;YACxC,IAA+B+R,WAAAA,GAAAA,QAAQ,CAAC/R,CAAAA,CAAE,EAAlCuO,QAAuBwD,GAAAA,WAAAA,CAAvBxD,QAAUuD,EAAAA,QAAAA,GAAaC,WAAbD,CAAAA,QAAAA,CAAAA;AAClB,YAAA,IAAI,CAACtF,YAAasF,CAAAA,QAAQ,EAAEtF,YAAasF,CAAAA,QAAQ,GAAG,EAAE,CAAA;YACtDtF,YAAasF,CAAAA,QAAQ,CAACzb,IAAI,CAAC;gBACzBwb,QAAAA,EAAAA,QAAAA;gBACAtD,QAAU/B,EAAAA,YAAAA,CAAagB,SAAS,CAACe,QAAS,CAAA;gBAC1CuD,QAAUA,EAAAA,QAAAA,CAASE,GAAG,CAAC,SAAC/C,KAAAA,EAAAA;2BAAUgD,YAAY,CAAChD,KAAM,CAAA,CAACna,IAAI,CAAA;;AAC5D,aAAA,CAAA,CAAA;AACF,SAAA;AACF,KAAA,CAAA;;AArBmC+V,CAAAA,CAAAA,eAAAA,CAAAA,CAAAA;AAA/B+G,sBAAAA,GAAAA,UAAAA,CAAAA;IADLjH,iBAAkB,CAAA,wBAAA,CAAA;AACbiH,CAAAA,EAAAA,sBAAAA,CAAAA;;ICHAM,qBADN,iBAAA,SAAA,eAAA,EAAA;;;;;;AACoCrH,CAAAA,CAAAA,eAAAA,CAAAA,CAAAA;AAA9BqH,qBAAAA,GAAAA,UAAAA,CAAAA;IADLvH,iBAAkB,CAAA,uBAAA,CAAA;AACbuH,CAAAA,EAAAA,qBAAAA,CAAAA;;ICGA3B,qBADN,iBAAA,SAAA,eAAA,EAAA;;;;;;IAEExG,MAAAA,CAAAA,mBAwBC,GAxBDA,SAAAA,mBAAAA,CACEe,MAA4B,EAC5ByD,QAAyC,EACzC1M,OAAsB,EAChB;QACN,IAAQjL,MAAAA,GAAsCkU,MAAtClU,CAAAA,MAAAA,EAAQub,QAA8BrH,GAAAA,MAAAA,CAA9BqH,UAAU3C,KAAoB1E,GAAAA,MAAAA,CAApB0E,KAAOG,EAAAA,QAAAA,GAAa7E,MAAb6E,CAAAA,QAAAA,CAAAA;AAEjC,QAAA,IAAI/Y,MAAQ,EAAA;AACV2X,YAAAA,QAAAA,CAAS6D,YAAY,CAACC,CAAC,GAAGzb,MAAM,CAAC,CAAE,CAAA,CAAA;AACnC2X,YAAAA,QAAAA,CAAS6D,YAAY,CAACE,CAAC,GAAG1b,MAAM,CAAC,CAAE,CAAA,CAAA;SACpC;AAED,QAAA,IAAI4Y,KAAO,EAAA;AACTjB,YAAAA,QAAAA,CAAS6D,YAAY,CAACG,CAAC,GAAG/C,KAAK,CAAC,CAAE,CAAA,CAAA;AAClCjB,YAAAA,QAAAA,CAAS6D,YAAY,CAACI,CAAC,GAAGhD,KAAK,CAAC,CAAE,CAAA,CAAA;SACnC;AAED,QAAA,IAAI2C,QAAU,EAAA;AACZnC,YAAAA,iBAAAA,CAAOC,IAAI,CAAC,wDAAA,CAAA,CAAA;SACb;AAED,QAAA,IAAIN,QAAU,EAAA;AACZK,YAAAA,iBAAAA,CAAOC,IAAI,CAAC,wDAAA,CAAA,CAAA;SACb;AACH,KAAA,CAAA;;AAzBkCpF,CAAAA,CAAAA,eAAAA,CAAAA,CAAAA;AAA9B0F,qBAAAA,GAAAA,UAAAA,CAAAA;IADL5F,iBAAkB,CAAA,uBAAA,CAAA;AACb4F,CAAAA,EAAAA,qBAAAA,CAAAA;;ICAAkC,sBADN,iBAAA,SAAA,eAAA,EAAA;;;;;;AAEEnI,IAAAA,MAAAA,CAAAA,oBAIC,GAJDA,SAAAA,qBAAqBQ,MAA8B,EAAEjJ,OAAsB,EAAqB;AAC9F,QAAA,IAAM,MAAEzI,GAAWyI,OAAQ2K,CAAAA,YAAY,CAA/BpT,MAAAA,CAAAA;;AAER,QAAA,OAAOA,MAAOtF,CAAAA,eAAe,CAACyC,gBAAgB,CAAWuU,MAAAA,CAAAA,CAAAA;AAC3D,KAAA,CAAA;;AALmCD,CAAAA,CAAAA,eAAAA,CAAAA,CAAAA;AAA/B4H,sBAAAA,GAAAA,UAAAA,CAAAA;IADL9H,iBAAkB,CAAA,uBAAA,CAAA;AACb8H,CAAAA,EAAAA,sBAAAA,CAAAA;;ACLC,SAAS,oCAAoC,CAAC,CAAC,EAAE,cAAc,EAAE;AACxE,IAAI,IAAI,EAAE,GAAG,OAAO,MAAM,KAAK,WAAW,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC,CAAC;AACpF;AACA,IAAI,IAAI,EAAE,EAAE,OAAO,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACnD;AACA,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,8BAA8B,CAAC,CAAC,CAAC,CAAC,IAAI,cAAc,IAAI,CAAC,IAAI,OAAO,CAAC,CAAC,MAAM,KAAK,QAAQ,EAAE;AAC7H,QAAQ,IAAI,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;AACvB;AACA,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC;AAClB;AACA,QAAQ,OAAO,WAAW;AAC1B,YAAY,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;AACrD;AACA,YAAY,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;AAClD,SAAS,CAAC;AACV,KAAK;AACL;AACA,IAAI,MAAM,IAAI,SAAS,CAAC,uIAAuI,CAAC,CAAC;AACjK;;ACAO,IAAA,eAAMC,iBAwMT,SAxMG,MAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,eAAAA,EAAAA,MAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,eAAAA,GAAAA;;;AAAAA,IAAAA,IAAAA,MAAAA,GAAAA,eAAAA,CAAAA,SAAAA,CAAAA;AACXvJ,IAAAA,MAAAA,CAAAA,KA2HC,GA3HDA,SAAAA,KAAAA,CAAMtH,OAAsB,EAAiC;AAC3D,QAAA,IAAQC,OAAgCD,OAAhCC,CAAAA,IAAAA,CAAAA,CAAgCD,OAA1BG,CAAAA,OAAAA,CAAAA,KAASwK,eAAiB3K,OAAjB2K,CAAAA,aAAAA;QACvB,IAAQmG,WAAanG,YAAbmG,CAAAA,QAAAA,CAAAA;AACR,QAAA,IAAQC,UAA0B9Q,GAAAA,IAAAA,CAA1B8Q,UAAYzH,EAAAA,SAAAA,GAAcrJ,IAAdqJ,CAAAA,SAAAA,CAAAA;AACpB,QAAA,IAAI,CAACyH,UAAY,EAAA;AACf,YAAA,OAAA;SACD;QACD,IAAM5W,yBAAAA,GAA4B6F,QAAQ7F,yBAAyB,CAAA;QAEnE,IAAM6W,kBAAAA,GAAqBD,WAAW1a,MAAM,CAAA;QAC5C,IAAM4a,cAAAA,GAAiB,IAAI/S,KAAqB8S,CAAAA,kBAAAA,CAAAA,CAAAA;QAChD,IAAME,iBAAAA,GAAoB,IAAIhT,KAG3B8S,CAAAA,kBAAAA,CAAAA,CAAAA;AAEH,QAAA,IAAK,IAAI7S,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAI6S,oBAAoB7S,CAAK,EAAA,CAAA;YAC3C,IAAMgT,aAAAA,GAAgBJ,UAAU,CAAC5S,CAAE,CAAA,CAAA;YACnC,IAAQiT,QAAAA,GAAmDD,aAAnDC,CAAAA,QAAAA,EAAUC,QAAyCF,GAAAA,aAAAA,CAAzCE,gCAAyCF,aAA/Ble,CAAAA,IAAAA,EAAAA,IAAO,GAAA,mBAAA,KAAA,KAAA,CAAA,GAAC,eAAekL,GAAAA,CAAAA,GAAAA,mBAAAA,CAAAA;YACnD,IAAMmT,aAAAA,GAAgB,IAAIC,wBAActe,CAAAA,IAAAA,CAAAA,CAAAA;AACxC,YAAA,IAAMue,uBAAuB,IAAItT,KAAAA,EAAAA,CAAAA;;YAKjC,IAAK,IAAIkE,IAAI,CAAGkL,EAAAA,CAAAA,GAAI+D,SAAShb,MAAM,EAAE+L,CAAIkL,GAAAA,CAAAA,EAAGlL,CAAK,EAAA,CAAA;gBAC/C,IAAMqP,WAAAA,GAAcJ,QAAQ,CAACjP,CAAE,CAAA,CAAA;AAC/B,gBAAA,IAAMsP,aAAgBpI,GAAAA,SAAS,CAACmI,WAAAA,CAAYE,KAAK,CAAC,CAAA;AAClD,gBAAA,IAAMC,cAAiBtI,GAAAA,SAAS,CAACmI,WAAAA,CAAYI,MAAM,CAAC,CAAA;AAEpD,gBAAA,IAAMF,QAAQ7T,QAASiC,CAAAA,iBAAiB,CAACC,OAASC,EAAAA,IAAAA,EAAMyR,eAAejf,IAAI,CAAA;AAC3E,gBAAA,IAAIof,SAAS/T,QAASiC,CAAAA,iBAAiB,CAACC,OAASC,EAAAA,IAAAA,EAAM2R,gBAAgBnf,IAAI,CAAA;gBAE3E,IAAImf,cAAAA,CAAe/N,UAAU,EAAE;AAC7B,oBAAA,IAAM8J,KAAQ7P,GAAAA,QAAAA,CAAS+B,2BAA2B,CAAC+R,eAAenS,aAAa,CAAA,CAAA;AAC/E,oBAAA,IAAMqS,MAAS,GAAA,IAAI7a,YAAa4a,CAAAA,MAAAA,CAAOxb,MAAM,CAAA,CAAA;oBAC7C,IAAK,IAAI0b,IAAI,CAAGC,EAAAA,CAAAA,GAAIH,OAAOxb,MAAM,EAAE0b,CAAIC,GAAAA,CAAAA,EAAGD,CAAK,EAAA,CAAA;AAC7CD,wBAAAA,MAAM,CAACC,CAAE,CAAA,GAAGF,MAAM,CAACE,EAAE,GAAGpE,KAAAA,CAAAA;AAC1B,qBAAA;oBACAkE,MAASC,GAAAA,MAAAA,CAAAA;iBACV;AAED,gBAAA,IAAMG,YAAeJ,GAAAA,MAAAA,CAAOxb,MAAM,GAAGsb,MAAMtb,MAAM,CAAA;AAE3Bob,gBAAAA,IAAAA,0BAAAA,CAAAA;gBAAtB,IAAMS,aAAAA,GAAgBT,CAAAA,0BAAAA,GAAAA,WAAAA,CAAYS,aAAa,KAAzBT,IAAAA,GAAAA,0BAAAA,GAA6BrV,8BAA8BC,MAAM,CAAA;AACvF,gBAAA,IAAI8V,uBAAAA,KAAAA,CAAAA,CAAAA;gBACJ,OAAQD,aAAAA;AACN,oBAAA,KAAK9V,8BAA8BG,UAAU;AAC3C4V,wBAAAA,oBAAAA,GAAuBC,6BAAkB7V,UAAU,CAAA;wBACnD,MAAM;AACR,oBAAA,KAAKH,8BAA8BE,IAAI;AACrC6V,wBAAAA,oBAAAA,GAAuBC,6BAAkB9V,IAAI,CAAA;wBAC7C,MAAM;AACR,oBAAA,KAAKF,8BAA8BC,MAAM;AACvC8V,wBAAAA,oBAAAA,GAAuBC,6BAAkB/V,MAAM,CAAA;wBAC/C,MAAM;AACV,iBAAA;AAEA,gBAAgBsV,KAAK,CAACA,KAAMtb,CAAAA,MAAM,GAAG,CAAE,EAAA;AAKvCmb,gBAAAA,oBAAAA,CAAqBhd,IAAI,CAAC;AACxBjC,oBAAAA,IAAAA,EAAMqf,eAAerf,IAAI;oBACzB2f,aAAeC,EAAAA,oBAAAA;oBACfR,KAAAA,EAAAA,KAAAA;oBACAE,MAAAA,EAAAA,MAAAA;oBACAQ,UAAYJ,EAAAA,YAAAA;AACd,iBAAA,CAAA,CAAA;AACF,aAAA;YAEA,IAAK,IAAI7P,KAAI,CAAGkL,EAAAA,EAAAA,GAAI8D,SAAS/a,MAAM,EAAE+L,EAAIkL,GAAAA,EAAAA,EAAGlL,EAAK,EAAA,CAAA;gBAC/C,IAAMkQ,WAAAA,GAAclB,QAAQ,CAAChP,EAAE,CAAA,CAAA;gBAC/B,IAAQmQ,SAAWD,WAAXC,CAAAA,MAAAA,CAAAA;AAER,gBAAA,IAAMC,mBAAsB1B,GAAAA,QAAQ,CAACyB,MAAAA,CAAOE,IAAI,CAAC,CAAA;AACjD,gBAAA,IAAIC,YAAe,GAAA,EAAA,CAAA;AACnB,gBAAA,IAAIpI,MAASkI,GAAAA,mBAAAA,CAAAA;gBACb,MAAOlI,MAAAA,CAAOqI,MAAM,CAAE;AACpBD,oBAAAA,YAAAA,GAAeA,YAAiB,KAAA,EAAA,GAAK,EAAC,GAAEpI,MAAOrX,CAAAA,IAAI,GAAQqX,MAAOrX,CAAAA,IAAI,GAAC,GAAA,GAAGyf,YAAc,CAAA;AACxFpI,oBAAAA,MAAAA,GAASA,OAAOqI,MAAM,CAAA;AACxB,iBAAA;AAEA,gBAAA,IAAIC,gBAAAA,KAAAA,CAAAA,CAAAA;AACJ,gBAAA,IAAIC,eAAAA,KAAAA,CAAAA,CAAAA;AACJ,gBAAA,OAAQN,OAAO/K,IAAI;AACjB,oBAAA,KAAKzL,2BAA2BC,WAAW;wBACzC4W,aAAgBE,GAAAA,oBAAAA,CAAAA;wBAChBD,YAAe,GAAA,UAAA,CAAA;wBACf,MAAM;AACR,oBAAA,KAAK9W,2BAA2BE,QAAQ;wBACtC2W,aAAgBE,GAAAA,oBAAAA,CAAAA;wBAChBD,YAAe,GAAA,oBAAA,CAAA;wBACf,MAAM;AACR,oBAAA,KAAK9W,2BAA2BG,KAAK;wBACnC0W,aAAgBE,GAAAA,oBAAAA,CAAAA;wBAChBD,YAAe,GAAA,OAAA,CAAA;wBACf,MAAM;AACR,oBAAA,KAAK9W,2BAA2BI,OAAO;wBACrCyW,aAAgBG,GAAAA,8BAAAA,CAAAA;wBAChBF,YAAe,GAAA,mBAAA,CAAA;wBACf,MAAM;AAEV,iBAAA;gBAEA,IAAMG,KAAAA,GAAQ,IAAI,CAACC,SAAS,CAACV,MAAO/K,CAAAA,IAAI,EAAE8K,WAAad,EAAAA,oBAAAA,CAAAA,CAAAA;AACvDF,gBAAAA,aAAAA,CAAc4B,eAAe,CAACR,YAAcE,EAAAA,aAAAA,EAAeC,YAAcG,EAAAA,KAAAA,CAAAA,CAAAA;AAC3E,aAAA;YAEA/B,cAAc,CAAC9S,EAAE,GAAGmT,aAAAA,CAAAA;YACpBJ,iBAAiB,CAAC/S,EAAE,GAAG;gBACrBlL,IAAAA,EAAAA,IAAAA;gBACAma,KAAOjP,EAAAA,CAAAA;AACT,aAAA,CAAA;AACF,SAAA;AAEAwM,QAAAA,YAAAA,CAAaoG,UAAU,GAAGE,cAAAA,CAAAA;;AAE1BtG,QAAAA,YAAAA,CAAawI,kBAAkB,GAAGjC,iBAAAA,CAAAA;AAElC/W,QAAAA,yBAAAA,CAA0BhI,OAAO,CAAC8e,cAAAA,CAAAA,CAAAA;AAClC,QAAA,OAAO9W,0BAA0BM,OAAO,CAAA;AAC1C,KAAA,CAAA;IAEA,MAAQwY,CAAAA,SAwEP,GAxED,SAAQA,SAAAA,CACNG,0BAAsD,EACtDd,WAA8B,EAC9Bd,oBAAkC,EAClC;AACA,QAAA,IAAM6B,UAAa7B,GAAAA,oBAAoB,CAACc,WAAAA,CAAYgB,OAAO,CAAC,CAAA;AAC5D,QAAA,IAAQ3B,QAA8B0B,UAA9B1B,CAAAA,KAAAA,EAAOE,SAAuBwB,UAAvBxB,CAAAA,MAAAA,EAAQQ,aAAegB,UAAfhB,CAAAA,UAAAA,CAAAA;QAEvB,OAAQe,0BAAAA;AACN,YAAA,KAAKrX,2BAA2BC,WAAW,CAAA;AAC3C,YAAA,KAAKD,2BAA2BG,KAAK;AAAE,gBAAA;AACrC,oBAAA,IAAM8W,QAAQ,IAAIO,gCAAAA,EAAAA,CAAAA;AAClB,oBAAA,IAAMrB,aAAiBc,GAAAA,KAAAA,CAAMd,aAAa,GAAGmB,WAAWnB,aAAa,CAAA;AAErE,oBAAA,IAAInd,MAAS,GAAA,CAAA,CAAA;oBACb,IAAK,IAAIoJ,IAAI,CAAGqV,EAAAA,CAAAA,GAAI7B,MAAMtb,MAAM,EAAE8H,CAAIqV,GAAAA,CAAAA,EAAGrV,CAAK,EAAA,CAAA;AAC5C,wBAAA,IAAMsV,WAAW,IAAIC,mBAAAA,EAAAA,CAAAA;AACrBD,wBAAAA,QAAAA,CAASE,IAAI,GAAGhC,KAAK,CAACxT,CAAE,CAAA,CAAA;wBACxB,IAAI+T,aAAAA,KAAkBE,4BAAkB7V,CAAAA,UAAU,EAAE;AAClDkX,4BAAAA,QAAAA,CAASG,SAAS,GAAG,IAAItV,kBAAAA,CAAQuT,MAAM,CAAC9c,MAAAA,EAAAA,CAAS,EAAE8c,MAAM,CAAC9c,MAAAA,EAAAA,CAAS,EAAE8c,MAAM,CAAC9c,MAAS,EAAA,CAAA,CAAA,CAAA;AACrF0e,4BAAAA,QAAAA,CAASI,KAAK,GAAG,IAAIvV,kBAAAA,CAAQuT,MAAM,CAAC9c,MAAAA,EAAAA,CAAS,EAAE8c,MAAM,CAAC9c,MAAAA,EAAAA,CAAS,EAAE8c,MAAM,CAAC9c,MAAS,EAAA,CAAA,CAAA,CAAA;AACjF0e,4BAAAA,QAAAA,CAASK,UAAU,GAAG,IAAIxV,kBAAAA,CAAQuT,MAAM,CAAC9c,MAAAA,EAAAA,CAAS,EAAE8c,MAAM,CAAC9c,MAAAA,EAAAA,CAAS,EAAE8c,MAAM,CAAC9c,MAAS,EAAA,CAAA,CAAA,CAAA;yBACjF,MAAA;AACL0e,4BAAAA,QAAAA,CAASI,KAAK,GAAG,IAAIvV,kBAAAA,CAAQuT,MAAM,CAAC9c,MAAAA,EAAAA,CAAS,EAAE8c,MAAM,CAAC9c,MAAAA,EAAAA,CAAS,EAAE8c,MAAM,CAAC9c,MAAS,EAAA,CAAA,CAAA,CAAA;yBAClF;AACDie,wBAAAA,KAAAA,CAAMe,MAAM,CAACN,QAAAA,CAAAA,CAAAA;AACf,qBAAA;oBACA,OAAOT,KAAAA,CAAAA;AACT,iBAAA;AACA,YAAA,KAAKjX,2BAA2BE,QAAQ;AAAE,gBAAA;AACxC,oBAAA,IAAM+W,SAAQ,IAAIgB,mCAAAA,EAAAA,CAAAA;AAClB,oBAAA,IAAM9B,cAAiBc,GAAAA,MAAAA,CAAMd,aAAa,GAAGmB,WAAWnB,aAAa,CAAA;AAErE,oBAAA,IAAInd,OAAS,GAAA,CAAA,CAAA;oBACb,IAAK,IAAIoJ,KAAI,CAAGqV,EAAAA,EAAAA,GAAI7B,MAAMtb,MAAM,EAAE8H,EAAIqV,GAAAA,EAAAA,EAAGrV,EAAK,EAAA,CAAA;AAC5C,wBAAA,IAAMsV,YAAW,IAAIC,mBAAAA,EAAAA,CAAAA;AACrBD,wBAAAA,SAAAA,CAASE,IAAI,GAAGhC,KAAK,CAACxT,EAAE,CAAA,CAAA;wBACxB,IAAI+T,cAAAA,KAAkBE,4BAAkB7V,CAAAA,UAAU,EAAE;AAClDkX,4BAAAA,SAAAA,CAASG,SAAS,GAAG,IAAIpV,mBAAQqT,MAAM,CAAC9c,UAAS,EAAE8c,MAAM,CAAC9c,OAAAA,EAAAA,CAAS,EAAE8c,MAAM,CAAC9c,UAAS,EAAE8c,MAAM,CAAC9c,OAAS,EAAA,CAAA,CAAA,CAAA;AACvG0e,4BAAAA,SAAAA,CAASI,KAAK,GAAG,IAAII,sBAAWpC,MAAM,CAAC9c,UAAS,EAAE8c,MAAM,CAAC9c,OAAAA,EAAAA,CAAS,EAAE8c,MAAM,CAAC9c,UAAS,EAAE8c,MAAM,CAAC9c,OAAS,EAAA,CAAA,CAAA,CAAA;AACtG0e,4BAAAA,SAAAA,CAASK,UAAU,GAAG,IAAItV,mBAAQqT,MAAM,CAAC9c,UAAS,EAAE8c,MAAM,CAAC9c,OAAAA,EAAAA,CAAS,EAAE8c,MAAM,CAAC9c,UAAS,EAAE8c,MAAM,CAAC9c,OAAS,EAAA,CAAA,CAAA,CAAA;yBACnG,MAAA;AACL0e,4BAAAA,SAAAA,CAASI,KAAK,GAAG,IAAII,sBAAWpC,MAAM,CAAC9c,UAAS,EAAE8c,MAAM,CAAC9c,OAAAA,EAAAA,CAAS,EAAE8c,MAAM,CAAC9c,UAAS,EAAE8c,MAAM,CAAC9c,OAAS,EAAA,CAAA,CAAA,CAAA;yBACvG;AACDie,wBAAAA,MAAAA,CAAMe,MAAM,CAACN,SAAAA,CAAAA,CAAAA;AACf,qBAAA;oBACA,OAAOT,MAAAA,CAAAA;AACT,iBAAA;AACA,YAAA,KAAKjX,2BAA2BI,OAAO;AAAE,gBAAA;AACvC,oBAAA,IAAM6W,SAAQ,IAAIkB,mCAAAA,EAAAA,CAAAA;oBAClBlB,MAAMd,CAAAA,aAAa,GAAGmB,UAAAA,CAAWnB,aAAa,CAAA;AAE9C,oBAAA,IAAInd,OAAS,GAAA,CAAA,CAAA;oBACb,IAAK,IAAIoJ,KAAI,CAAGqV,EAAAA,EAAAA,GAAI7B,MAAMtb,MAAM,EAAE8H,EAAIqV,GAAAA,EAAAA,EAAGrV,EAAK,EAAA,CAAA;AAC5C,wBAAA,IAAMsV,YAAW,IAAIC,mBAAAA,EAAAA,CAAAA;AACrBD,wBAAAA,SAAAA,CAASE,IAAI,GAAGhC,KAAK,CAACxT,EAAE,CAAA,CAAA;AACxB,wBAAA,IAAI6U,MAAMd,CAAAA,aAAa,KAAKE,4BAAAA,CAAkB7V,UAAU,EAAE;4BACxDkX,SAASG,CAAAA,SAAS,GAAG1V,KAAM1H,CAAAA,IAAI,CAACqb,MAAOsC,CAAAA,QAAQ,CAACpf,OAAAA,EAAQA,OAASsd,GAAAA,UAAAA,CAAAA,CAAAA,CAAAA;4BACjEtd,OAAUsd,IAAAA,UAAAA,CAAAA;AACVoB,4BAAAA,SAAAA,CAASI,KAAK,GAAGhC,MAAAA,CAAOsC,QAAQ,CAACpf,SAAQA,OAASsd,GAAAA,UAAAA,CAAAA,CAAAA;4BAClDtd,OAAUsd,IAAAA,UAAAA,CAAAA;4BACVoB,SAASK,CAAAA,UAAU,GAAG5V,KAAM1H,CAAAA,IAAI,CAACqb,MAAOsC,CAAAA,QAAQ,CAACpf,OAAAA,EAAQA,OAASsd,GAAAA,UAAAA,CAAAA,CAAAA,CAAAA;4BAClEtd,OAAUsd,IAAAA,UAAAA,CAAAA;yBACL,MAAA;AACLoB,4BAAAA,SAAAA,CAASI,KAAK,GAAGhC,MAAAA,CAAOsC,QAAQ,CAACpf,SAAQA,OAASsd,GAAAA,UAAAA,CAAAA,CAAAA;4BAClDtd,OAAUsd,IAAAA,UAAAA,CAAAA;yBACX;AACDW,wBAAAA,MAAAA,CAAMe,MAAM,CAACN,SAAAA,CAAAA,CAAAA;AACf,qBAAA;oBACA,OAAOT,MAAAA,CAAAA;AACT,iBAAA;AACF,SAAA;AACF,KAAA,CAAA;AAtMWnC,IAAAA,OAAAA,eAAAA,CAAAA;EAAwB5I,MAuMpC,CAAA;;ACrNM,IAAA,YAAMmM,0BAAN,MAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,YAAAA,EAAAA,MAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,YAAAA,GAAAA;;;AAAAA,IAAAA,IAAAA,MAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CAAAA;AACX9M,IAAAA,MAAAA,CAAAA,KAyBC,GAzBDA,SAAAA,KAAAA,CAAMtH,OAAsB,EAAsB;QAChD,IAAM2K,YAAAA,GAAe3K,QAAQ2K,YAAY,CAAA;QACzC,IAAQrY,MAAQqY,YAARrY,CAAAA,GAAAA,CAAAA;AAER,QAAA,IAAI,IAAI,CAAC+hB,MAAM,CAAC/hB,GAAM,CAAA,EAAA;AACpB,YAAA,OAAOD,mBAAqBC,GAAK,EAAA;gBAAEC,IAAM,EAAA,aAAA;AAAc,aAAA,CAAA,CACpDC,IAAI,CAACsL,QAAAA,CAASoI,QAAQ,CACtB1T,CAAAA,IAAI,CAAC,SAAuB,KAAA,EAAA;AAApByN,gBAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,MAAME,OAAAA,GAAAA,KAAAA,CAAAA,OAAAA,CAAAA;AACbH,gBAAAA,OAAAA,CAAQC,IAAI,GAAGA,IAAAA,CAAAA;AACfD,gBAAAA,OAAAA,CAAQG,OAAO,GAAGA,OAAAA,CAAAA;AACpB,aAAA,CAAA,CAAA;SACG,MAAA;AACL,YAAA,OAAO9N,mBAAQC,GAAK,EAAA;gBAClBC,IAAM,EAAA,MAAA;aACLC,CAAAA,CAAAA,IAAI,CAAC,SAACyN,IAAgB,EAAA;AACvBD,gBAAAA,OAAAA,CAAQC,IAAI,GAAGA,IAAAA,CAAAA;gBACf,OAAOxL,OAAAA,CAAQgB,GAAG,CAChBwK,IAAAA,CAAKE,OAAO,CAACgQ,GAAG,CAAC,SAACvZ,MAAoB,EAAA;AACpC,oBAAA,OAAOvE,mBAAqByL,QAAS8H,CAAAA,gBAAgB,CAACtT,GAAKsE,EAAAA,MAAAA,CAAO0d,GAAG,CAAG,EAAA;wBAAE/hB,IAAM,EAAA,aAAA;AAAc,qBAAA,CAAA,CAAA;iBAEhGC,CAAAA,CAAAA,CAAAA,IAAI,CAAC,SAAC2N,OAA2B,EAAA;AACjCH,oBAAAA,OAAAA,CAAQG,OAAO,GAAGA,OAAAA,CAAAA;AACpB,iBAAA,CAAA,CAAA;AACF,aAAA,CAAA,CAAA;SACD;AACH,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQkU,MAGP,GAHD,SAAQA,MAAAA,CAAO/hB,GAAW,EAAW;QACnC,IAAM8a,KAAAA,GAAQ9a,GAAI0T,CAAAA,WAAW,CAAC,GAAA,CAAA,CAAA;AAC9B,QAAA,OAAO1T,IAAIyT,SAAS,CAACqH,KAAQ,GAAA,CAAA,EAAGA,QAAQ,CAAO,CAAA,KAAA,KAAA,CAAA;AACjD,KAAA,CAAA;AA/BWgH,IAAAA,OAAAA,YAAAA,CAAAA;EAAqBnM,MAgCjC,CAAA;;ACjCM,IAAA,YAAA,iBAAA,SAAA,MAAA,EAAA;AAAMsM,IAAAA,SAAAA,CAAAA,YAAAA,EAAAA,MAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,YAAAA,GAAAA;;;AAAAA,IAAAA,IAAAA,MAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CAAAA;AAIXjN,IAAAA,MAAAA,CAAAA,KAwCC,GAxCDA,SAAAA,KAAAA,CAAMtH,OAAsB,EAAQ;AAClC,QAAA,IACE2K,eAEE3K,OAFF2K,CAAAA,YAAAA,EACA1K,KAAQuU,GACNxU,QADFC,IAAQuU,CAAAA,KAAAA,CAAAA;QAGV,IAAQjd,SAAWoT,YAAXpT,CAAAA,MAAAA,CAAAA;AAER,QAAA,IAAI,CAACid,KAAO,EAAA,OAAA;AAEZ,QAAA,IAAM1D,WAAqB,EAAE,CAAA;AAE7B,QAAA,IAAK,IAAI3S,CAAI,GAAA,CAAA,EAAGA,IAAIqW,KAAMne,CAAAA,MAAM,EAAE8H,CAAK,EAAA,CAAA;YACrC,IAAMsW,QAAAA,GAAWD,KAAK,CAACrW,CAAE,CAAA,CAAA;YACzB,IAAQuW,MAAAA,GAAyCD,QAAzCC,CAAAA,MAAAA,EAAQC,WAAiCF,GAAAA,QAAAA,CAAjCE,aAAarE,QAAoBmE,GAAAA,QAAAA,CAApBnE,QAAU3C,EAAAA,KAAAA,GAAU8G,QAAV9G,CAAAA,KAAAA,CAAAA;AACvC,YAAA,IAAMrD,MAAS,GAAA,IAAIsK,iBAAOrd,CAAAA,MAAAA,EAAQkd,QAASxhB,CAAAA,IAAI,IAAK,EAAEshB,GAnB/CA,YAmB4DM,CAAAA,YAAY,GAAG1W,CAAAA,CAAAA,CAAAA;YAElF,IAAQ2W,YAAcxK,MAAdwK,CAAAA,SAAAA,CAAAA;AACR,YAAA,IAAIJ,MAAQ,EAAA;gBACV,IAAMK,WAAAA,GAAcD,UAAUC,WAAW,CAAA;AACzCA,gBAAAA,WAAAA,CAAYrc,aAAa,CAACgc,MAAAA,CAAAA,CAAAA;AAC1BI,gBAAAA,SAAAA,CAAUC,WAAW,GAAGA,WAAAA,CAAAA;aACnB,MAAA;AACL,gBAAA,IAAIJ,WAAa,EAAA;AACfG,oBAAAA,SAAAA,CAAUE,WAAW,CAACL,WAAW,CAAC,CAAE,CAAA,EAAEA,WAAW,CAAC,CAAE,CAAA,EAAEA,WAAW,CAAC,CAAE,CAAA,CAAA,CAAA;iBACrE;AACD,gBAAA,IAAIrE,QAAU,EAAA;AACZwE,oBAAAA,SAAAA,CAAUG,qBAAqB,CAAC3E,QAAQ,CAAC,CAAA,CAAE,EAAEA,QAAQ,CAAC,CAAE,CAAA,EAAEA,QAAQ,CAAC,CAAA,CAAE,EAAEA,QAAQ,CAAC,CAAE,CAAA,CAAA,CAAA;iBACnF;AACD,gBAAA,IAAI3C,KAAO,EAAA;AACTmH,oBAAAA,SAAAA,CAAUI,QAAQ,CAACvH,KAAK,CAAC,CAAE,CAAA,EAAEA,KAAK,CAAC,CAAE,CAAA,EAAEA,KAAK,CAAC,CAAE,CAAA,CAAA,CAAA;iBAChD;aACF;YAEDmD,QAAQ,CAAC3S,EAAE,GAAGmM,MAAAA,CAAAA;AAChB,SAAA;AAEAK,QAAAA,YAAAA,CAAamG,QAAQ,GAAGA,QAAAA,CAAAA;QACxB,IAAI,CAACqE,gBAAgB,CAACnV,OAAS2K,EAAAA,YAAAA,CAAAA,CAAAA;QAC/B,IAAI,CAACyK,iBAAiB,CAACpV,OAAS2K,EAAAA,YAAAA,CAAAA,CAAAA;AAClC,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQwK,gBAkBP,GAlBD,SAAQA,iBAAiBnV,OAAsB,EAAE2K,YAA0B,EAAQ;QACjF,IACU6J,KACNxU,GAAAA,OAAAA,CADFC,IAAQuU,CAAAA,KAAAA,CAAAA;QAEV,IAAQ1D,WAAanG,YAAbmG,CAAAA,QAAAA,CAAAA;AAER,QAAA,IAAK,IAAI3S,CAAI,GAAA,CAAA,EAAGA,IAAIqW,KAAMne,CAAAA,MAAM,EAAE8H,CAAK,EAAA,CAAA;AACrC,YAAA,IAAM,QAAEkX,GAAab,KAAK,CAACrW,EAAE,CAArBkX,QAAAA,CAAAA;YACR,IAAM/K,MAAAA,GAASwG,QAAQ,CAAC3S,CAAE,CAAA,CAAA;AAE1B,YAAA,IAAIkX,QAAU,EAAA;AACZ,gBAAA,IAAK,IAAIjT,CAAI,GAAA,CAAA,EAAGA,IAAIiT,QAAShf,CAAAA,MAAM,EAAE+L,CAAK,EAAA,CAAA;AACxC,oBAAA,IAAMkT,cAAcxE,QAAQ,CAACuE,QAAQ,CAACjT,EAAE,CAAC,CAAA;AAEzCkI,oBAAAA,MAAAA,CAAOiL,QAAQ,CAACD,WAAAA,CAAAA,CAAAA;AAClB,iBAAA;aACD;AACH,SAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQF,iBA0BP,GA1BD,SAAQA,kBAAkBpV,OAAsB,EAAE2K,YAA0B,EAAQ;AAClF,QAAA,IAAuC3K,aAAAA,GAAAA,OAAAA,CAAQC,IAAI,EAApCuV,GAAwBxV,GAAAA,aAAAA,CAA/ByV,KAAOD,EAAAA,OAAAA,GAAAA,GAAU,KAAA,KAAA,CAAA,GAAA,CAAA,GAAVA,GAAaE,EAAAA,MAAAA,GAAW1V,aAAX0V,CAAAA,MAAAA,CAAAA;AAC5B,QAAA,IAAQne,MAAqBoT,GAAAA,YAAAA,CAArBpT,MAAQuZ,EAAAA,QAAAA,GAAanG,YAAbmG,CAAAA,QAAAA,CAAAA;AAEhB,QAAA,IAAI,CAAC4E,MAAQ,EAAA,OAAA;AAEb,QAAA,IAAMC,aAAuB,EAAE,CAAA;AAE/B,QAAA,IAAK,IAAIxX,CAAI,GAAA,CAAA,EAAGA,IAAIuX,MAAOrf,CAAAA,MAAM,EAAE8H,CAAK,EAAA,CAAA;AACtC,YAAA,IAAM,KAAEqW,GAAUkB,MAAM,CAACvX,EAAE,CAAnBqW,KAAAA,CAAAA;YAER,IAAI,CAACA,OAAO,SAAS;YAErB,IAAIA,KAAAA,CAAMne,MAAM,KAAK,CAAG,EAAA;gBACtBsf,UAAU,CAACxX,EAAE,GAAG2S,QAAQ,CAAC0D,KAAK,CAAC,EAAE,CAAC,CAAA;aAC7B,MAAA;gBACL,IAAMoB,UAAAA,GAAa,IAAIhB,iBAAAA,CAAOrd,MAAQ,EAAA,WAAA,CAAA,CAAA;AACtC,gBAAA,IAAK,IAAI6K,CAAI,GAAA,CAAA,EAAGA,IAAIoS,KAAMne,CAAAA,MAAM,EAAE+L,CAAK,EAAA,CAAA;AACrCwT,oBAAAA,UAAAA,CAAWL,QAAQ,CAACzE,QAAQ,CAAC0D,KAAK,CAACpS,EAAE,CAAC,CAAA,CAAA;AACxC,iBAAA;gBACAuT,UAAU,CAACxX,EAAE,GAAGyX,UAAAA,CAAAA;aACjB;AACH,SAAA;AAEAjL,QAAAA,YAAAA,CAAagL,UAAU,GAAGA,UAAAA,CAAAA;AAC1BhL,QAAAA,YAAAA,CAAakL,gBAAgB,GAAGF,UAAU,CAACH,OAAQ,CAAA,CAAA;AACrD,KAAA,CAAA;AA5FWjB,IAAAA,OAAAA,YAAAA,CAAAA;EAAqBtM,MA6FjC,CAAA,CAAA;;qBA7FYsM,aAEJM,YAAuB,GAAA,eAAA,CAAA;;;ACUzB,IAAA,UAAMiB,0BAAN,OAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,UAAAA,EAAAA,OAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,UAAAA,GAAAA;;;AAAAA,IAAAA,IAAAA,MAAAA,GAAAA,UAAAA,CAAAA,SAAAA,CAAAA;AAGXxO,IAAAA,MAAAA,CAAAA,KA8FC,GA9FDA,SAAAA,KAAAA,CAAMtH,OAAsB,EAAE;AAQiB,QAAA,IAAA,KAAA,GAAA,SAAA,CAAA,EAAA;AAIU,YAAA,IAAA,KAAA,GAAA,SAAA,CAAA,EAAA;AACnD,gBAAA,IAAMqJ,aAAgB0M,GAAAA,QAAAA,CAASC,UAAU,CAAC5T,CAAE,CAAA,CAAA;gBAC5C,IAA4BiH,yBAAAA,GAAAA,aAAAA,CAApBuC,UAAAA,EAAAA,UAAAA,GAAAA,yBAAAA,KAAAA,KAAAA,CAAAA,GAAa,EAAC,GAAA,yBAAA,CAAA;gBACtB,IAAQ1C,6BAA+B0C,UAA/B1C,CAAAA,0BAAAA,CAAAA;AAER+M,gBAAAA,iBAAiB,CAAC7T,CAAE,CAAA,GAAG,IAAI3N,OAAAA,CAAQ,SAACtC,OAAY,EAAA;AAC9C,oBAAA,IAAM+jB,OAAO,IAAIC,oBAAAA,CAAU5e,QAAQwe,QAAS9iB,CAAAA,IAAI,IAAImP,CAAI,GAAA,EAAA,CAAA,CAAA;AAExD,oBAAA,IAAI8G,0BAA4B,EAAA;wBAE5BjB,MAAOQ,CAAAA,oBAAoB,CACzB,4BACAS,EAAAA,0BAAAA,EACAlJ,SACAqJ,aAGD7W,CAAAA,CAAAA,IAAI,CAAC,SAAC4jB,eAAyB,EAAA;4BAC9B,OAAO,KAAA,CAAKC,gCAAgC,CAC1CH,IAAAA,EACAH,UACA1M,aACApJ,EAAAA,IAAAA,EACA,SAACqW,iBAAsB,EAAA;gCACrB,IAAK,IAAIlU,IAAI,CAAGA,EAAAA,CAAAA,GAAIgU,gBAAgB7M,UAAU,CAAClT,MAAM,EAAE+L,CAAK,EAAA,CAAA;AAC1D,oCAAA,IAAIgU,gBAAgB7M,UAAU,CAACnH,EAAE,CAACnP,IAAI,KAAKqjB,iBAAmB,EAAA;AAC5D,wCAAA,OAAOF,eAAgB7M,CAAAA,UAAU,CAACnH,CAAAA,CAAE,CAACnE,KAAK,CAAA;qCAC3C;AACH,iCAAA;AACA,gCAAA,OAAO,IAAI,CAAA;6BAEb,EAAA,SAACqY,mBAAmBC,UAAe,EAAA;AACjC,gCAAA,MAAM,yDAA0D,CAAA;AAClE,6BAAA,EACA,WAAM;gCACJ,OAAOH,eAAAA,CAAgBhJ,KAAK,CAACnP,KAAK,CAAA;AACpC,6BAAA,EACA+B,QAAQwW,YAAY,CAAA,CAAA;AAExB,yBAAA,CAAA,CACChkB,IAAI,CAACL,OAAAA,CAAAA,CAAAA;qBACH,MAAA;wBACL,KAAKskB,CAAAA,2BAA2B,CAC9BzW,OACAkW,EAAAA,IAAAA,EACAH,UACA1M,aACApJ,EAAAA,IAAAA,EACA,SAACqW,iBAAsB,EAAA;AACrB,4BAAA,OAAO,IAAI,CAAA;yBAEb,EAAA,SAAC3M,eAAe4M,UAAe,EAAA;AAC7B,4BAAA,IAAMG,gBAAmBrN,GAAAA,aAAAA,CAAcsN,OAAO,CAACJ,UAAW,CAAA,CAAA;4BAC1D,IAAMK,oBAAAA,GAAuBF,gBAAgB,CAAC/M,aAAc,CAAA,CAAA;AAC5D,4BAAA,IAAIiN,oBAAsB,EAAA;AACxB,gCAAA,IAAM1W,QAAWD,GAAAA,IAAAA,CAAKqJ,SAAS,CAACsN,oBAAqB,CAAA,CAAA;AACrD,gCAAA,OAAO9Y,QAAS2D,CAAAA,eAAe,CAACxB,IAAAA,EAAMC,QAAUC,EAAAA,OAAAA,CAAAA,CAAAA;6BAC3C,MAAA;AACL,gCAAA,OAAO,IAAI,CAAA;6BACZ;AACH,yBAAA,EACA,WAAM;AACJ,4BAAA,IAAM0J,gBAAgB5J,IAAKqJ,CAAAA,SAAS,CAACD,aAAAA,CAAc/G,OAAO,CAAC,CAAA;AAC3D,4BAAA,OAAOxE,QAAS2D,CAAAA,eAAe,CAACxB,IAAAA,EAAM4J,aAAe1J,EAAAA,OAAAA,CAAAA,CAAAA;AACvD,yBAAA,EACAH,OAAQwW,CAAAA,YAAY,CACpBhkB,CAAAA,IAAI,CAACL,OAAAA,CAAAA,CAAAA;qBACR;AACH,iBAAA,CAAA,CAAA;AACF,aAAA,CAAA;AAxEA,YAAA,IAAM4jB,QAAW9V,GAAAA,IAAAA,CAAK4W,MAAM,CAAC1Y,CAAE,CAAA,CAAA;AAC/B,YAAA,IAAM8X,oBAA0C,EAAE,CAAA;YAElD,IAAK,IAAI7T,IAAI,CAAGA,EAAAA,CAAAA,GAAI2T,SAASC,UAAU,CAAC3f,MAAM,EAAE+L,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAuEhD0U,YAAAA,YAAY,CAAC3Y,CAAAA,CAAE,GAAG1J,OAAAA,CAAQgB,GAAG,CAACwgB,iBAAAA,CAAAA,CAAAA;AAChC,SAAA,CAAA;;AAnFA,QAAA,IAAQhW,OAAgCD,OAAhCC,CAAAA,IAAAA,EAAME,UAA0BH,OAA1BG,CAAAA,OAAAA,EAASwK,eAAiB3K,OAAjB2K,CAAAA,YAAAA,CAAAA;QACvB,IAAQpT,SAAWoT,YAAXpT,CAAAA,MAAAA,CAAAA;QACR,IAAI,CAAC0I,IAAK4W,CAAAA,MAAM,EAAE,OAAA;QAElB,IAAM3c,iBAAAA,GAAoB8F,QAAQ9F,iBAAiB,CAAA;AACnD,QAAA,IAAM4c,eAAuC,EAAE,CAAA;QAE/C,IAAK,IAAI3Y,IAAI,CAAGA,EAAAA,CAAAA,GAAI8B,KAAK4W,MAAM,CAACxgB,MAAM,EAAE8H,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AA8ExCjM,QAAAA,uBAAAA,CAAauD,GAAG,CAACqhB,YAAAA,CAAAA,CACdtkB,IAAI,CAAC,SAACqkB,MAA0B,EAAA;AAC/BlM,YAAAA,YAAAA,CAAakM,MAAM,GAAGA,MAAAA,CAAAA;AACtB3c,YAAAA,iBAAAA,CAAkB/H,OAAO,CAAC0kB,MAAAA,CAAAA,CAAAA;SAE3BnhB,CAAAA,CAAAA,KAAK,CAACwE,iBAAAA,CAAkB9H,MAAM,CAAA,CAAA;AAEjC,QAAA,OAAO8H,kBAAkBO,OAAO,CAAA;AAClC,KAAA,CAAA;IAEA,MAAQgc,CAAAA,2BA6KP,GA7KD,SAAQA,2BAAAA,CACNzW,OAAsB,EACtBkW,IAAe,EACfH,QAAe,EACf1M,aAA6B,EAC7BpJ,IAAW,EACX8W,mBAAqD,EACrDC,iBAAuE,EACvEC,kBAAoC,EACpCT,YAAqB,EACD;QACpB,IAAQlN,YAAcrJ,IAAdqJ,CAAAA,SAAAA,CAAAA;QACYtJ,OAAZG,CAAAA,QAAAA;QACR,IAAQoJ,UAAAA,GAAuCF,aAAvCE,CAAAA,UAAAA,EAAYoN,OAA2BtN,GAAAA,aAAAA,CAA3BsN,SAASrU,OAAkB+G,GAAAA,aAAAA,CAAlB/G,OAAS4U,EAAAA,IAAAA,GAAS7N,aAAT6N,CAAAA,IAAAA,CAAAA;QAEtC,IAAM3f,MAAAA,GAAS2e,KAAK3e,MAAM,CAAA;AAC1B,QAAA,IAAM4f,iBAAiB,IAAIjZ,KAAAA,EAAAA,CAAAA;QAE3B,IAAIkZ,WAAAA,CAAAA;AACJ,QAAA,IAAIC,eAAkB,GAAA,CAAA,CAAA;QACtB,IAAIC,SAAAA,CAAAA;QACJ,IAAIC,WAAAA,CAAAA;QACJ,IAAIC,WAAAA,CAAAA;AACJ,QAAA,IAAIhB,YAAc,EAAA;AAChBc,YAAAA,SAAAA,GAAY,IAAIpZ,KAAekZ,CAAAA,WAAAA,CAAAA,CAAAA;AAC/BG,YAAAA,WAAAA,GAAc,IAAIrZ,KAAekZ,CAAAA,WAAAA,CAAAA,CAAAA;AACjCI,YAAAA,WAAAA,GAAc,IAAItZ,KAAekZ,CAAAA,WAAAA,CAAAA,CAAAA;SAClC;QAED,IAAK,IAAMK,aAAalO,UAAY,CAAA;AAClC,YAAA,IAAMrJ,WAAWoJ,SAAS,CAACC,UAAU,CAACkO,UAAU,CAAC,CAAA;AACjD,YAAA,IAAMC,cAAiB5Z,GAAAA,QAAAA,CAASiC,iBAAiB,CAACC,SAASC,IAAMC,EAAAA,QAAAA,CAAAA,CAAAA;AAEjE,YAAA,IAAMyX,eAAkB7Z,GAAAA,QAAAA,CAASwB,mBAAmB,CAACY,SAAS3N,IAAI,CAAA,CAAA;YAClE,IAAMsO,aAAAA,GAAgBX,SAASY,KAAK,CAAA;YACpC,IAAM8W,QAAAA,GAAWF,eAAejlB,IAAI,CAAA;AAEpC,YAAA,IAAIolB,gBAAAA,KAAAA,CAAAA,CAAAA;YACJ,IAAMC,MAAAA,GAAS5B,KAAK6B,UAAU,CAAA;YAC9B,IAAMhd,kBAAAA,GAAqB2c,eAAe3c,kBAAkB,CAAA;YAC5D,IAAMid,iBAAAA,GAAoB9X,SAAS2D,UAAU,CAAA;AAC7C,YAAA,IAAMoU,gBAAgBna,QAAS8F,CAAAA,gBAAgB,CAAC1D,QAAST,CAAAA,aAAa,EAAEkY,eAAiBK,EAAAA,iBAAAA,CAAAA,CAAAA;AAEzF,YAAA,IAAIE,cAAAA,KAAAA,CAAAA,CAAAA;AACJF,YAAAA,iBAAAA,KAAsBE,WAAcpa,GAAAA,QAAAA,CAAS+B,2BAA2B,CAACK,QAAAA,CAAST,aAAa,CAAA,CAAA,CAAA;AAE/F,YAAA,IAAI0Y,gBAAAA,KAAAA,CAAAA,CAAAA;YACJ,IAAIT,cAAAA,CAAe7c,WAAW,EAAE;gBAC9B,IAAM0F,UAAAA,GAAaL,QAASK,CAAAA,UAAU,IAAI,CAAA,CAAA;gBAC1C,IAAMzF,MAAAA,GAAS4c,eAAe5c,MAAM,CAAA;AACpCqd,gBAAAA,aAAAA,GAAgB5X,UAAazF,GAAAA,MAAAA,CAAAA;AAC7B,gBAAA,IAAIC,kBAAkB,CAAC+c,MAAO,CAAA,KAAK5W,SAAW,EAAA;AAC5C2W,oBAAAA,aAAAA,GAAgB,IAAIO,wBAAAA,CAAcX,SAAWU,EAAAA,aAAAA,EAAeF,aAAeZ,EAAAA,eAAAA,CAAAA,CAAAA;oBAE3E,IAAIgB,YAAAA,GAAeX,eAAeW,YAAY,CAAA;AAC9C,oBAAA,IAAI,CAACA,YAAc,EAAA;wBACjBA,YAAe,GAAA,IAAIxhB,iBAAOU,CAAAA,MAAAA,EAAQ+gB,yBAAeC,CAAAA,YAAY,EAAEX,QAASzV,CAAAA,UAAU,EAAEqW,sBAAAA,CAAYC,MAAM,CAAA,CAAA;AACtGJ,wBAAAA,YAAAA,CAAaK,OAAO,CAACd,QAAAA,CAAAA,CAAAA;AACrBF,wBAAAA,cAAAA,CAAeW,YAAY,GAAGA,YAAAA,CAAAA;qBAC/B;oBACDnC,IAAKyC,CAAAA,sBAAsB,CAACN,YAAAA,EAAcvd,MAAQuc,EAAAA,eAAAA,CAAAA,CAAAA;oBAClDtc,kBAAkB,CAAC+c,OAAO,GAAGT,eAAAA,EAAAA,CAAAA;iBACxB,MAAA;AACLQ,oBAAAA,aAAAA,GAAgB,IAAIO,wBAAcX,CAAAA,SAAAA,EAAWU,eAAeF,aAAeld,EAAAA,kBAAkB,CAAC+c,MAAO,CAAA,CAAA,CAAA;iBACtG;aACI,MAAA;gBACLK,aAAgB,GAAA,CAAA,CAAA;AAChBN,gBAAAA,aAAAA,GAAgB,IAAIO,wBAAAA,CAAcX,SAAWU,EAAAA,aAAAA,EAAeF,aAAeZ,EAAAA,eAAAA,CAAAA,CAAAA;gBAE3E,IAAMgB,aAAAA,GAAe,IAAIxhB,iBAAAA,CAAOU,MAAQ+gB,EAAAA,yBAAAA,CAAeC,YAAY,EAAEX,QAASzV,CAAAA,UAAU,EAAEqW,sBAAAA,CAAYC,MAAM,CAAA,CAAA;AAC5GJ,gBAAAA,aAAAA,CAAaK,OAAO,CAACd,QAAAA,CAAAA,CAAAA;AACrB1B,gBAAAA,IAAAA,CAAKyC,sBAAsB,CAACN,aAAcX,EAAAA,cAAAA,CAAe5c,MAAM,EAAEuc,eAAAA,CAAAA,CAAAA;gBACjEtc,kBAAkB,CAAC+c,OAAO,GAAGT,eAAAA,EAAAA,CAAAA;aAC9B;AACDF,YAAAA,cAAAA,CAAe3iB,IAAI,CAACqjB,aAAAA,CAAAA,CAAAA;AAEpB,YAAA,IAAIJ,cAAc,UAAY,EAAA;gBAC5BL,WAAcvW,GAAAA,aAAAA,CAAAA;gBAEd,IAAqBqV,YAAAA,GAAAA,KAAK0C,MAAM,EAAxBC,MAAa3C,YAAb2C,CAAAA,GAAAA,EAAKC,MAAQ5C,YAAR4C,CAAAA,GAAAA,CAAAA;AACb,gBAAA,IAAI5Y,QAAS2Y,CAAAA,GAAG,IAAI3Y,QAAAA,CAAS4Y,GAAG,EAAE;oBAChCD,GAAIngB,CAAAA,aAAa,CAACwH,QAAAA,CAAS2Y,GAAG,CAAA,CAAA;oBAC9BC,GAAIpgB,CAAAA,aAAa,CAACwH,QAAAA,CAAS4Y,GAAG,CAAA,CAAA;AAE9B,oBAAA,IAAItC,YAAc,EAAA;wBAChB,IAAMuC,UAAAA,GAAaZ,aAAgBP,GAAAA,QAAAA,CAASjX,iBAAiB,CAAA;wBAC7D,IAAM7F,OAAAA,GAAS8c,QAASvhB,CAAAA,MAAM,GAAGwK,aAAAA,CAAAA;AACjC,wBAAA,IAAK,IAAIuB,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIvB,eAAeuB,CAAK,EAAA,CAAA;4BACtC,IAAMrN,MAAAA,GAASgkB,aAAa3W,CAAItH,GAAAA,OAAAA,CAAAA;AAChC,4BAAA,IAAMke,QAAW,GAAA,IAAI1a,kBAAQsZ,CAAAA,QAAQ,CAAC7iB,MAAO,CAAA,EAAE6iB,QAAQ,CAAC7iB,SAAS,CAAE,CAAA,EAAE6iB,QAAQ,CAAC7iB,SAAS,CAAE,CAAA,CAAA,CAAA;4BACzFijB,iBAAqBgB,IAAAA,QAAAA,CAASrL,KAAK,CAACuK,WAAAA,CAAAA,CAAAA;4BACpCZ,SAAS,CAAClV,EAAE,GAAG4W,QAAAA,CAAAA;AACjB,yBAAA;qBACD;iBACI,MAAA;oBACL,IAAMA,SAAAA,GAAWlD,UAlMdA,CAkMyBmD,YAAY,CAAA;oBACxCJ,GAAI5N,CAAAA,GAAG,CAACiO,MAAOC,CAAAA,SAAS,EAAED,MAAOC,CAAAA,SAAS,EAAED,MAAAA,CAAOC,SAAS,CAAA,CAAA;AAC5DL,oBAAAA,GAAAA,CAAI7N,GAAG,CAAC,CAACiO,MAAAA,CAAOC,SAAS,EAAE,CAACD,MAAAA,CAAOC,SAAS,EAAE,CAACD,MAAAA,CAAOC,SAAS,CAAA,CAAA;oBAE/D,IAAMJ,WAAAA,GAAaZ,aAAgBP,GAAAA,QAAAA,CAASjX,iBAAiB,CAAA;oBAC7D,IAAM7F,OAAAA,GAAS8c,QAASvhB,CAAAA,MAAM,GAAGwK,aAAAA,CAAAA;AACjC,oBAAA,IAAK,IAAIuB,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAIvB,eAAeuB,EAAK,EAAA,CAAA;wBACtC,IAAMrN,OAAAA,GAASgkB,cAAa3W,EAAItH,GAAAA,OAAAA,CAAAA;wBAChCke,SAAStgB,CAAAA,aAAa,CAACkf,QAAU7iB,EAAAA,OAAAA,CAAAA,CAAAA;wBACjCuJ,kBAAQua,CAAAA,GAAG,CAACA,GAAAA,EAAKG,SAAUH,EAAAA,GAAAA,CAAAA,CAAAA;wBAC3Bva,kBAAQwa,CAAAA,GAAG,CAACA,GAAAA,EAAKE,SAAUF,EAAAA,GAAAA,CAAAA,CAAAA;AAE3B,wBAAA,IAAItC,YAAc,EAAA;4BAChB,IAAM4C,aAAAA,GAAgBJ,UAASK,KAAK,EAAA,CAAA;4BACpCrB,iBAAqBoB,IAAAA,aAAAA,CAAczL,KAAK,CAACuK,WAAAA,CAAAA,CAAAA;4BACzCZ,SAAS,CAAClV,GAAE,GAAGgX,aAAAA,CAAAA;yBAChB;AACH,qBAAA;iBACD;AACD,gBAAA,IAAIpB,iBAAmB,EAAA;AACrBa,oBAAAA,GAAAA,CAAIlL,KAAK,CAACuK,WAAAA,CAAAA,CAAAA;AACVY,oBAAAA,GAAAA,CAAInL,KAAK,CAACuK,WAAAA,CAAAA,CAAAA;iBACX;aACI,MAAA,IAAIT,SAAc,KAAA,UAAA,IAAcjB,YAAc,EAAA;gBACnD,IAAMuC,WAAAA,GAAaZ,aAAgBP,GAAAA,QAAAA,CAASjX,iBAAiB,CAAA;gBAC7D,IAAM7F,OAAAA,GAAS8c,QAASvhB,CAAAA,MAAM,GAAGwK,aAAAA,CAAAA;AACjC,gBAAA,IAAK,IAAIuB,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAIvB,eAAeuB,EAAK,EAAA,CAAA;oBACtC,IAAMrN,OAAAA,GAASgkB,cAAa3W,EAAItH,GAAAA,OAAAA,CAAAA;oBAChC,IAAMwe,SAAAA,GAAY,IAAI9a,kBACpBoZ,CAAAA,QAAQ,CAAC7iB,OAAO,CAAA,EAChB6iB,QAAQ,CAAC7iB,OAAAA,GAAS,EAAE,EACpB6iB,QAAQ,CAAC7iB,OAAS,GAAA,CAAA,CAAE,EACpB6iB,QAAQ,CAAC7iB,UAAS,CAAE,CAAA,CAAA,CAAA;oBAEtBijB,iBAAqBsB,IAAAA,SAAAA,CAAU3L,KAAK,CAACuK,WAAAA,CAAAA,CAAAA;oBACrCX,WAAW,CAACnV,GAAE,GAAGkX,SAAAA,CAAAA;AACnB,iBAAA;aACK,MAAA,IAAI7B,SAAc,KAAA,WAAA,IAAejB,YAAc,EAAA;gBACpD,IAAMuC,WAAAA,GAAaZ,aAAgBP,GAAAA,QAAAA,CAASjX,iBAAiB,CAAA;gBAC7D,IAAM7F,OAAAA,GAAS8c,QAASvhB,CAAAA,MAAM,GAAGwK,aAAAA,CAAAA;AACjC,gBAAA,IAAK,IAAIuB,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAIvB,eAAeuB,EAAK,EAAA,CAAA;oBACtC,IAAMrN,OAAAA,GAASgkB,cAAa3W,EAAItH,GAAAA,OAAAA,CAAAA;oBAChC,IAAMye,UAAAA,GAAa,IAAI/a,kBACrBoZ,CAAAA,QAAQ,CAAC7iB,OAAO,CAAA,EAChB6iB,QAAQ,CAAC7iB,OAAAA,GAAS,EAAE,EACpB6iB,QAAQ,CAAC7iB,OAAS,GAAA,CAAA,CAAE,EACpB6iB,QAAQ,CAAC7iB,UAAS,CAAE,CAAA,CAAA,CAAA;oBAEtBijB,iBAAqBuB,IAAAA,UAAAA,CAAW5L,KAAK,CAACuK,WAAAA,CAAAA,CAAAA;oBACtCV,WAAW,CAACpV,GAAE,GAAGmX,UAAAA,CAAAA;AACnB,iBAAA;aACD;AACH,SAAA;AACArD,QAAAA,IAAAA,CAAKsD,iBAAiB,CAACrC,cAAAA,CAAAA,CAAAA;;AAGvB,QAAA,IAAI7U,YAAYpB,SAAW,EAAA;AACzB,YAAA,IAAM2I,aAAgB5J,GAAAA,IAAAA,CAAKqJ,SAAS,CAAChH,OAAQ,CAAA,CAAA;AAC7C,YAAA,IAAMmX,SAAYxC,GAAAA,kBAAAA,EAAAA,CAAAA;AAClBf,YAAAA,IAAAA,CAAKwD,UAAU,CAAyCD,SAAAA,CAAAA,CAAAA;AACxDvD,YAAAA,IAAAA,CAAKyD,UAAU,CAAC,CAAG9P,EAAAA,aAAAA,CAAc/I,KAAK,EAAEoW,IAAAA,CAAAA,CAAAA;SACnC,MAAA;YACLhB,IAAKyD,CAAAA,UAAU,CAAC,CAAA,EAAGvC,WAAaF,EAAAA,IAAAA,CAAAA,CAAAA;SACjC;;AAGDP,QAAAA,OAAAA,IAAW,IAAI,CAACiD,iBAAiB,CAAC1D,IAAAA,EAAMH,UAAUY,OAASK,EAAAA,iBAAAA,CAAAA,CAAAA;QAE3Dd,IAAK2D,CAAAA,UAAU,CAAC,CAACrD,YAAAA,CAAAA,CAAAA;;AAGjBN,QAAAA,IAAAA,CAAK4D,UAAU,GAAGxC,SAAAA,CAAAA;;AAElBpB,QAAAA,IAAAA,CAAK6D,YAAY,GAAGxC,WAAAA,CAAAA;;AAEpBrB,QAAAA,IAAAA,CAAK8D,YAAY,GAAGxC,WAAAA,CAAAA;QAEpB,OAAO/iB,OAAAA,CAAQtC,OAAO,CAAC+jB,IAAAA,CAAAA,CAAAA;AACzB,KAAA,CAAA;IAEA,MAAQ0D,CAAAA,iBAuBP,GAvBD,SAAQA,iBACN1D,CAAAA,IAAe,EACf+D,QAAe,EACfC,WAEG,EACHlD,iBAAuE,EACjE;QACN,IAAMmD,eAAAA,GAAkBF,SAASG,MAAM,GAAGH,SAASG,MAAM,CAACC,WAAW,GAAG,IAAI,CAAA;QAE5E,IAAK,IAAIlc,IAAI,CAAGqV,EAAAA,CAAAA,GAAI0G,YAAY7jB,MAAM,EAAE8H,CAAIqV,GAAAA,CAAAA,EAAGrV,CAAK,EAAA,CAAA;YAClD,IAAMlL,IAAAA,GAAOknB,kBAAkBA,eAAe,CAAChc,EAAE,GAAI,eAAYA,CAAG,CAAA;YACpE,IAAMmc,cAAAA,GAAiBtD,kBAAkB,UAAY7Y,EAAAA,CAAAA,CAAAA,CAAAA;YACrD,IAAMoc,cAAAA,GAAiBvD,kBAAkB,QAAU7Y,EAAAA,CAAAA,CAAAA,CAAAA;YACnD,IAAMqc,cAAAA,GAAiBxD,kBAAkB,SAAW7Y,EAAAA,CAAAA,CAAAA,CAAAA;AACpD,YAAA,IAAMsc,iBAAiBH,cAAiBxc,GAAAA,QAAAA,CAASO,yBAAyB,CAAeic,kBAAkB,IAAI,CAAA;AAC/G,YAAA,IAAMI,eAAeH,cAAiBzc,GAAAA,QAAAA,CAASO,yBAAyB,CAAekc,kBAAkB,IAAI,CAAA;AAC7G,YAAA,IAAMI,gBAAgBH,cAAiB1c,GAAAA,QAAAA,CAASO,yBAAyB,CAAemc,kBAAkB,IAAI,CAAA;YAE9G,IAAMI,UAAAA,GAAa,IAAIC,qBAAW5nB,CAAAA,IAAAA,CAAAA,CAAAA;AAClC2nB,YAAAA,UAAAA,CAAWE,QAAQ,CAAC,GAAKL,EAAAA,cAAAA,EAAgBC,YAAcC,EAAAA,aAAAA,CAAAA,CAAAA;AACvDzE,YAAAA,IAAAA,CAAK6E,aAAa,CAACH,UAAAA,CAAAA,CAAAA;AACrB,SAAA;AACF,KAAA,CAAA;AAEA;;MAGA,MAAA,CAAQvE,gCA2HP,GA3HD,SAAQA,iCACNH,IAAe,EACfH,QAAe,EACf1M,aAA6B,EAC7BpJ,IAAW,EACX8W,mBAAqD,EACrDC,iBAAuE,EACvEC,kBAAoC,EACpCT,YAAqB,EACD;QACpB,IAAQjN,UAAAA,GAAuCF,aAAvCE,CAAAA,UAAAA,EAAYoN,OAA2BtN,GAAAA,aAAAA,CAA3BsN,SAASrU,OAAkB+G,GAAAA,aAAAA,CAAlB/G,OAAS4U,EAAAA,IAAAA,GAAS7N,aAAT6N,CAAAA,IAAAA,CAAAA;QACtC,IAAIE,WAAAA,CAAAA;QAEJ,IAAQ9N,YAAcrJ,IAAdqJ,CAAAA,SAAAA,CAAAA;AACR,QAAA,IAAMpJ,WAAWoJ,SAAS,CAACC,UAAU,CAAC,WAAW,CAAC,CAAA;AAClD,QAAA,IAAMyR,iBAA+BjE,mBAAoB,CAAA,UAAA,CAAA,CAAA;QACzD,IAAMO,SAAAA,GAAYxZ,QAASO,CAAAA,yBAAyB,CAAC2c,cAAAA,CAAAA,CAAAA;AACrD9E,QAAAA,IAAAA,CAAK+E,YAAY,CAAC3D,SAAAA,CAAAA,CAAAA;QAElB,IAAQsB,SAAW1C,IAAX0C,CAAAA,MAAAA,CAAAA;AACRxB,QAAAA,WAAAA,GAAclX,SAASY,KAAK,CAAA;AAC5B,QAAA,IAAIZ,QAAS2Y,CAAAA,GAAG,IAAI3Y,QAAAA,CAAS4Y,GAAG,EAAE;AAChCF,YAAAA,MAAAA,CAAOC,GAAG,CAACngB,aAAa,CAACwH,SAAS2Y,GAAG,CAAA,CAAA;AACrCD,YAAAA,MAAAA,CAAOE,GAAG,CAACpgB,aAAa,CAACwH,SAAS4Y,GAAG,CAAA,CAAA;SAChC,MAAA;YACL,IAAME,QAAAA,GAAWlD,UAvUVA,CAuUqBmD,YAAY,CAAA;AACxC,YAAA,IAAQJ,GAAaD,GAAAA,MAAAA,CAAbC,GAAKC,EAAAA,GAAAA,GAAQF,MAARE,CAAAA,GAAAA,CAAAA;YAEbD,GAAI5N,CAAAA,GAAG,CAACiO,MAAOC,CAAAA,SAAS,EAAED,MAAOC,CAAAA,SAAS,EAAED,MAAAA,CAAOC,SAAS,CAAA,CAAA;AAC5DL,YAAAA,GAAAA,CAAI7N,GAAG,CAAC,CAACiO,MAAAA,CAAOC,SAAS,EAAE,CAACD,MAAAA,CAAOC,SAAS,EAAE,CAACD,MAAAA,CAAOC,SAAS,CAAA,CAAA;YAE/D,IAAMre,MAAAA,GAASkgB,cAAe3kB,CAAAA,MAAM,GAAG+gB,WAAAA,CAAAA;AACvC,YAAA,IAAK,IAAIhV,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIgV,aAAahV,CAAK,EAAA,CAAA;AACpC,gBAAA,IAAMrN,SAASqN,CAAItH,GAAAA,MAAAA,CAAAA;gBACnBke,QAAStgB,CAAAA,aAAa,CAACsiB,cAAgBjmB,EAAAA,MAAAA,CAAAA,CAAAA;gBACvCuJ,kBAAQua,CAAAA,GAAG,CAACA,GAAAA,EAAKG,QAAUH,EAAAA,GAAAA,CAAAA,CAAAA;gBAC3Bva,kBAAQwa,CAAAA,GAAG,CAACA,GAAAA,EAAKE,QAAUF,EAAAA,GAAAA,CAAAA,CAAAA;AAC7B,aAAA;SACD;QAED,IAAK,IAAMxC,qBAAqB/M,UAAY,CAAA;AAC1C,YAAA,IAAI+M,sBAAsB,UAAY,EAAA;gBACpC,SAAS;aACV;AACD,YAAA,IAAM4E,aAAanE,mBAAoBT,CAAAA,iBAAAA,CAAAA,CAAAA;YACvC,OAAQA,iBAAAA;gBACN,KAAK,QAAA;oBACH,IAAM6E,OAAAA,GAAUrd,QAASO,CAAAA,yBAAyB,CAAe6c,UAAAA,CAAAA,CAAAA;AACjEhF,oBAAAA,IAAAA,CAAKkF,UAAU,CAACD,OAAAA,CAAAA,CAAAA;oBAChB,MAAM;gBACR,KAAK,YAAA;oBACH,IAAME,aAAAA,GAAgBvd,QAASC,CAAAA,yBAAyB,CAAemd,UAAAA,CAAAA,CAAAA;oBACvEhF,IAAKoF,CAAAA,MAAM,CAACD,aAAe,EAAA,CAAA,CAAA,CAAA;oBAC3B,MAAM;gBACR,KAAK,YAAA;oBACH,IAAME,cAAAA,GAAiBzd,QAASC,CAAAA,yBAAyB,CAAemd,UAAAA,CAAAA,CAAAA;oBACxEhF,IAAKoF,CAAAA,MAAM,CAACC,cAAgB,EAAA,CAAA,CAAA,CAAA;oBAC5B,MAAM;gBACR,KAAK,YAAA;oBACH,IAAMC,cAAAA,GAAiB1d,QAASC,CAAAA,yBAAyB,CAAemd,UAAAA,CAAAA,CAAAA;oBACxEhF,IAAKoF,CAAAA,MAAM,CAACE,cAAgB,EAAA,CAAA,CAAA,CAAA;oBAC5B,MAAM;gBACR,KAAK,YAAA;oBACH,IAAMC,cAAAA,GAAiB3d,QAASC,CAAAA,yBAAyB,CAAemd,UAAAA,CAAAA,CAAAA;oBACxEhF,IAAKoF,CAAAA,MAAM,CAACG,cAAgB,EAAA,CAAA,CAAA,CAAA;oBAC5B,MAAM;gBACR,KAAK,YAAA;oBACH,IAAMC,cAAAA,GAAiB5d,QAASC,CAAAA,yBAAyB,CAAemd,UAAAA,CAAAA,CAAAA;oBACxEhF,IAAKoF,CAAAA,MAAM,CAACI,cAAgB,EAAA,CAAA,CAAA,CAAA;oBAC5B,MAAM;gBACR,KAAK,YAAA;oBACH,IAAMC,cAAAA,GAAiB7d,QAASC,CAAAA,yBAAyB,CAAemd,UAAAA,CAAAA,CAAAA;oBACxEhF,IAAKoF,CAAAA,MAAM,CAACK,cAAgB,EAAA,CAAA,CAAA,CAAA;oBAC5B,MAAM;gBACR,KAAK,YAAA;oBACH,IAAMC,cAAAA,GAAiB9d,QAASC,CAAAA,yBAAyB,CAAemd,UAAAA,CAAAA,CAAAA;oBACxEhF,IAAKoF,CAAAA,MAAM,CAACM,cAAgB,EAAA,CAAA,CAAA,CAAA;oBAC5B,MAAM;gBACR,KAAK,YAAA;oBACH,IAAMC,cAAAA,GAAiB/d,QAASC,CAAAA,yBAAyB,CAAemd,UAAAA,CAAAA,CAAAA;oBACxEhF,IAAKoF,CAAAA,MAAM,CAACO,cAAgB,EAAA,CAAA,CAAA,CAAA;oBAC5B,MAAM;gBACR,KAAK,SAAA;AACH,oBAAA,IAAMld,MAASb,GAAAA,QAAAA,CAASW,uBAAuB,CAC/Byc,YACd5R,SAAS,CAACC,UAAU,CAAC,UAAU,CAAC,CAAChX,IAAI,KAAKgJ,aAAaG,IAAI,CAAA,CAAA;AAE7Dwa,oBAAAA,IAAAA,CAAK4F,SAAS,CAACnd,MAAAA,CAAAA,CAAAA;oBACf,MAAM;gBACR,KAAK,SAAA;oBACH,IAAMod,QAAAA,GAAWje,QAASS,CAAAA,yBAAyB,CAAe2c,UAAAA,CAAAA,CAAAA;AAClEhF,oBAAAA,IAAAA,CAAK8F,WAAW,CAACD,QAAAA,CAAAA,CAAAA;oBACjB,MAAM;gBAER,KAAK,UAAA;oBACH,IAAME,MAAAA,GAASne,QAASS,CAAAA,yBAAyB,CAAe2c,UAAAA,CAAAA,CAAAA;AAChEhF,oBAAAA,IAAAA,CAAKgG,cAAc,CAACD,MAAAA,CAAAA,CAAAA;oBACpB,MAAM;gBACR,KAAK,WAAA;oBACH,IAAME,OAAAA,GAAUre,QAASS,CAAAA,yBAAyB,CAAe2c,UAAAA,CAAAA,CAAAA;AACjEhF,oBAAAA,IAAAA,CAAKkG,cAAc,CAACD,OAAAA,CAAAA,CAAAA;oBACpB,MAAM;AAIV,aAAA;AACF,SAAA;;AAGA,QAAA,IAAI7Z,YAAYpB,SAAW,EAAA;AACzB,YAAA,IAAM2I,aAAgB5J,GAAAA,IAAAA,CAAKqJ,SAAS,CAAChH,OAAQ,CAAA,CAAA;AAC7C,YAAA,IAAMmX,SAAYxC,GAAAA,kBAAAA,EAAAA,CAAAA;AAClBf,YAAAA,IAAAA,CAAKwD,UAAU,CAAyCD,SAAAA,CAAAA,CAAAA;AACxDvD,YAAAA,IAAAA,CAAKyD,UAAU,CAAC,CAAG9P,EAAAA,aAAAA,CAAc/I,KAAK,EAAEoW,IAAAA,CAAAA,CAAAA;SACnC,MAAA;YACLhB,IAAKyD,CAAAA,UAAU,CAAC,CAAA,EAAGvC,WAAaF,EAAAA,IAAAA,CAAAA,CAAAA;SACjC;;AAGDP,QAAAA,OAAAA,IAAW,IAAI,CAACiD,iBAAiB,CAAC1D,IAAAA,EAAMH,UAAUY,OAASK,EAAAA,iBAAAA,CAAAA,CAAAA;QAE3Dd,IAAK2D,CAAAA,UAAU,CAAC,CAACrD,YAAAA,CAAAA,CAAAA;QACjB,OAAO/hB,OAAAA,CAAQtC,OAAO,CAAC+jB,IAAAA,CAAAA,CAAAA;AACzB,KAAA,CAAA;AAzaWJ,IAAAA,OAAAA,UAAAA,CAAAA;EAAmB7N,MA0a/B,CAAA,CAAA;;AA1aY6N,IAAAA,UAAAA,CACImD,eAAe,IAAI3a,kBAAAA,EAAAA,CAAAA;;;ACC7B,IAAA+d,aAAMA,0BAAN,OAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,WAAAA,EAAAA,OAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,WAAAA,GAAAA;;;AAAAA,IAAAA,IAAAA,MAAAA,GAAAA,WAAAA,CAAAA,SAAAA,CAAAA;AAWX/U,IAAAA,MAAAA,CAAAA,KA2CC,GA3CDA,SAAAA,KAAAA,CAAMtH,OAAsB,EAAE;AAC5B,QAAA,IAAQ2K,YAAuB3K,GAAAA,OAAAA,CAAvB2K,YAAc1K,EAAAA,IAAAA,GAASD,OAATC,CAAAA,IAAAA,CAAAA;QACtB,IAAQ6Q,WAAanG,YAAbmG,CAAAA,QAAAA,CAAAA;AACR,QAAA,IAAQ0D,KAAgCvU,GAAAA,IAAAA,CAAhCuU,KAAO8H,EAASC,cAAgBtc,IAAzBqc,CAAAA,OAAAA,CAAAA;AAEf,QAAA,IAAI,CAAC9H,KAAO,EAAA,OAAA;QACZ,IAAMpa,2BAAAA,GAA8B4F,QAAQ5F,2BAA2B,CAAA;AAEvE,QAAA,IAAMvH,WAAW,EAAE,CAAA;AAEnB,QAAA,IAAK,IAAIsL,CAAI,GAAA,CAAA,EAAGA,IAAIqW,KAAMne,CAAAA,MAAM,EAAE8H,CAAK,EAAA,CAAA;YACrC,IAAMsW,QAAAA,GAAWD,KAAK,CAACrW,CAAE,CAAA,CAAA;YACzB,IAAgBqe,QAA4C/H,GAAAA,QAAAA,CAApDgI,MAAkBvG,EAAMwG,MAA4BjI,GAAAA,QAAAA,CAAlCyB,IAAkCzB,EAAAA,oBAAAA,GAAAA,QAAAA,CAApB7I,UAAAA,EAAAA,UAAAA,GAAAA,oBAAAA,KAAAA,KAAAA,CAAAA,GAAa,EAAC,GAAA,oBAAA,CAAA;YACtD,IAAMvB,mBAAAA,GAAoDuB,WAAWvB,mBAAmB,CAAA;YACxF,IAAMC,MAAAA,GAASwG,QAAQ,CAAC3S,CAAE,CAAA,CAAA;AAE1B,YAAA,IAAIqe,aAAatb,SAAW,EAAA;AAC1B,gBAAA,IAAI,CAACyb,aAAa,CAAChS,cAAc4R,WAAW,CAACC,SAAS,EAAElS,MAAAA,CAAAA,CAAAA;aACzD;AAED,YAAA,IAAIoS,WAAWxb,SAAW,EAAA;AACxBrO,gBAAAA,QAAAA,CAAS2B,IAAI,CAAC,IAAI,CAACooB,eAAe,CAAC5c,SAASyU,QAAUnK,EAAAA,MAAAA,CAAAA,CAAAA,CAAAA;aACvD;AAED,YAAA,IAAID,mBAAqB,EAAA;gBACvB,IAAMwS,UAAAA,GAAaxS,oBAAoBO,KAAK,CAAA;AAC5C,gBAAA,IAAMY,SAAS,IAACvL,CAAK2L,UAAU,CAACvB,mBAAmB,CAAwBmB,MAAM,CAAA;AAEjFvD,gBAAAA,MAAAA,CAAOC,mBAAmB,CAAC,qBAAA,EAAuBsD,MAAM,CAACqR,UAAAA,CAAW,EAAEvS,MAAQtK,EAAAA,OAAAA,CAAAA,CAAAA;aAC/E;AACH,SAAA;QAEA,IAAI2K,YAAAA,CAAakL,gBAAgB,EAAE;YACjC,IAAI,CAACiH,eAAe,CAAC9c,OAAAA,CAAAA,CAAAA;SACtB;AAEDC,QAAAA,IAAAA,CAAK2L,UAAU,IAAI,OAAO3L,IAAK2L,CAAAA,UAAU,CAAC,uBAAwB,CAAA,CAAA;AAElE1Z,QAAAA,uBAAAA,CAAauD,GAAG,CAAC5C,QACdL,CAAAA,CAAAA,IAAI,CAAC,WAAA;mBAAM4H,2BAA4BjI,CAAAA,OAAO,CAACwY,YAAAA,CAAakL,gBAAgB,CAAA,CAAA;WAC5EngB,KAAK,CAAC0E,4BAA4BhI,MAAM,CAAA,CAAA;AAE3C,QAAA,OAAOgI,4BAA4BK,OAAO,CAAA;AAC5C,KAAA,CAAA;IAEA,MAAQkiB,CAAAA,aAsCP,GAtCD,SAAQA,aAAAA,CAAc3c,OAAqB,EAAE+c,YAAqB,EAAEzS,MAAc,EAAQ;AACxF,QAAA,IAAQ0S,eAAoCD,YAApCC,CAAAA,YAAAA,EAAcC,cAAsBF,YAAtBE,CAAAA,WAAAA,EAAa1qB,OAASwqB,YAATxqB,CAAAA,IAAAA,CAAAA;QACnC,IAAMkqB,MAAAA,GAASnS,MAAOO,CAAAA,YAAY,CAACqS,iBAAAA,CAAAA,CAAAA;QAEnC,IAAI3qB,IAAAA,KAASiK,UAAWE,CAAAA,YAAY,EAAE;YACpC,IAAQygB,IAAAA,GAA4BH,YAA5BG,CAAAA,IAAAA,EAAMC,IAAsBJ,GAAAA,YAAAA,CAAtBI,MAAMC,IAAgBL,GAAAA,YAAAA,CAAhBK,IAAMC,EAAAA,KAAAA,GAAUN,YAAVM,CAAAA,KAAAA,CAAAA;YAE1Bb,MAAOc,CAAAA,cAAc,GAAG,IAAI,CAAA;AAE5B,YAAA,IAAID,UAAUpc,SAAW,EAAA;AACvBub,gBAAAA,MAAAA,CAAOe,aAAa,GAAGF,KAAAA,CAAAA;aACxB;AACD,YAAA,IAAID,SAASnc,SAAW,EAAA;AACtBub,gBAAAA,MAAAA,CAAOgB,YAAY,GAAGJ,IAAAA,CAAAA;aACvB;AAEDZ,YAAAA,MAAAA,CAAOiB,gBAAgB,GAAGtc,IAAK0X,CAAAA,GAAG,CAACsE,IAAAA,IAAAA,IAAAA,GAAAA,IAAQ,GAAA,CAAC,EAAED,IAAAA,IAAAA,IAAAA,GAAAA,IAAQ,GAAA,CAAC,CAAI,GAAA,CAAA,CAAA;AAC7D,SAAA,MAAO,IAAI5qB,IAAAA,KAASiK,UAAWC,CAAAA,WAAW,EAAE;YAC1C,IAAQkhB,WAAAA,GAAmCV,WAAnCU,CAAAA,WAAAA,EAAaC,IAAsBX,GAAAA,WAAAA,CAAtBW,MAAMP,KAAgBJ,GAAAA,WAAAA,CAAhBI,IAAMC,EAAAA,MAAAA,GAAUL,WAAVK,CAAAA,KAAAA,CAAAA;AAEjC,YAAA,IAAIK,gBAAgBzc,SAAW,EAAA;AAC7Bub,gBAAAA,MAAAA,CAAOkB,WAAW,GAAGA,WAAAA,CAAAA;aACtB;AACD,YAAA,IAAIC,SAAS1c,SAAW,EAAA;AACtBub,gBAAAA,MAAAA,CAAOoB,WAAW,GAAID,IAAO,GAAA,GAAA,GAAOxc,KAAKiK,EAAE,CAAA;aAC5C;AACD,YAAA,IAAIgS,UAASnc,SAAW,EAAA;AACtBub,gBAAAA,MAAAA,CAAOgB,YAAY,GAAGJ,KAAAA,CAAAA;aACvB;AACD,YAAA,IAAIC,WAAUpc,SAAW,EAAA;AACvBub,gBAAAA,MAAAA,CAAOe,aAAa,GAAGF,MAAAA,CAAAA;aACxB;SACF;AAED,QAAA,IAAI,CAACtd,OAAQsc,CAAAA,OAAO,EAAEtc,OAAQsc,CAAAA,OAAO,GAAG,EAAE,CAAA;QAC1Ctc,OAAQsc,CAAAA,OAAO,CAAC9nB,IAAI,CAACioB,MAAAA,CAAAA,CAAAA;;QAErBA,MAAOqB,CAAAA,OAAO,GAAG,KAAK,CAAA;AACxB,KAAA,CAAA;IAEA,MAAQlB,CAAAA,eA0DP,GA1DD,SAAQA,eAAAA,CAAgB5c,OAAsB,EAAEyU,QAAe,EAAEnK,MAAc,EAAE;AAW3B,QAAA,IAAA,KAAA,GAAA,SAAA,CAAA,EAAA;AAClD,YAAA,IAAM4L,IAAOW,GAAAA,MAAM,CAAC6F,MAAAA,CAAO,CAACve,CAAE,CAAA,CAAA;AAC9B,YAAA,IAAI6R,WAAAA,KAAAA,CAAAA,CAAAA;YAEJ,IAAI+N,MAAAA,KAAW7c,aAAa8c,iBAAmB,EAAA;gBAC7Che,OAAQpG,CAAAA,UAAU,GAAG,IAAI,CAAA;gBACzB,IAAMqkB,YAAAA,GAAe3T,MAAOO,CAAAA,YAAY,CAACkI,8BAAAA,CAAAA,CAAAA;AACzCkL,gBAAAA,YAAAA,CAAa/H,IAAI,GAAGA,IAAAA,CAAAA;AACpB,gBAAA,IAAI6H,WAAW7c,SAAW,EAAA;AACxB+c,oBAAAA,YAAAA,CAAaC,IAAI,GAAGC,KAAK,CAACJ,MAAO,CAAA,CAAA;iBAClC;AACD,gBAAA,IAAIC,iBAAmB,EAAA;oBACrBC,YAAaD,CAAAA,iBAAiB,GAAG,IAAI/mB,YAAa+mB,CAAAA,iBAAAA,CAAAA,CAAAA;iBACnD;gBACDhO,QAAWiO,GAAAA,YAAAA,CAAAA;aACN,MAAA;gBACLjO,QAAW1F,GAAAA,MAAAA,CAAOO,YAAY,CAACuT,uBAAAA,CAAAA,CAAAA;AAC/BpO,gBAAAA,QAAAA,CAASkG,IAAI,GAAGA,IAAAA,CAAAA;aACjB;AAED,YAAA,IAAMmI,aAAgBC,GAAAA,kBAAkB,CAACngB,CAAAA,CAAE,CAACuO,QAAQ,CAAA;AACpD,YAAA,IAAM6R,iBAAiBte,IAAK2L,CAAAA,UAAU,IAAI3L,IAAK2L,CAAAA,UAAU,CAAC,uBAAwB,CAAA,CAAA;AAClF,YAAA,IAAI2S,cAAkBA,IAAAA,cAAc,CAACF,aAAAA,CAAc,EAAE;gBACnDxrB,QAAS2B,CAAAA,IAAI,CACX+pB,cAAc,CAACF,cAAc,CAAC7rB,IAAI,CAAC,SAACgsB,GAAQ,EAAA;AAC1CxO,oBAAAA,QAAAA,CAASyO,WAAW,CAACD,GAAAA,CAAAA,CAAAA;AACvB,iBAAA,CAAA,CAAA,CAAA;aAEG,MAAA;AACL,gBAAA,IAAM9R,QAAWf,GAAAA,CAAAA,SAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,SAAW,CAAC0S,aAAAA,CAAc,KAAIhC,WAxI1CA,CAwIsDqC,mBAAmB,CAACnnB,MAAAA,CAAAA,CAAAA;AAC/EyY,gBAAAA,QAAAA,CAASyO,WAAW,CAAC/R,QAAAA,CAAAA,CAAAA;;AAGrBwJ,gBAAAA,IAAAA,CAAKiB,cAAc,CAACrkB,OAAO,CAAC,SAAC6rB,OAAY,EAAA;oBACvC,IAAIA,OAAAA,CAAQC,QAAQ,KAAK,SAAW,EAAA;wBAClC5O,QAAS6O,CAAAA,iBAAiB,GAAG,IAAI,CAAA;qBAClC;AACH,iBAAA,CAAA,CAAA;aACD;YAED,IAA4BP,qBAAAA,GAAAA,kBAAkB,CAACngB,CAAAA,CAAE,qCAArBmgB,qBAApB1S,CAAAA,UAAAA,EAAAA,2DAAa,EAAC,GAAA,gCAAA,CAAA;YACtB,IAAQmE,yBAA2BnE,UAA3BmE,CAAAA,sBAAAA,CAAAA;AACR,YAAA,IAAIA,sBAAwB,EAAA;AAC1B9H,gBAAAA,MAAAA,CAAOC,mBAAmB,CAAC,wBAA0B6H,EAAAA,sBAAAA,EAAwBC,QAAUhQ,EAAAA,OAAAA,CAAAA,CAAAA;aACxF;AACH,SAAA,CAAA;AAvDA,QAAA,IAAQ2K,YAAuB3K,GAAAA,OAAAA,CAAvB2K,YAAc1K,EAAAA,IAAAA,GAASD,OAATC,CAAAA,IAAAA,CAAAA;QACtB,IAAgB6e,aAAe7e,IAAvB4W,CAAAA,MAAAA,CAAAA;QAER,IAAQtf,MAAAA,GAAqCoT,YAArCpT,CAAAA,MAAAA,EAAQsf,MAA6BlM,GAAAA,YAAAA,CAA7BkM,QAAQlL,SAAqBhB,GAAAA,YAAAA,CAArBgB,SAAWwS,EAAAA,KAAAA,GAAUxT,YAAVwT,CAAAA,KAAAA,CAAAA;AACnC,QAAA,IAAQjI,MAA+BzB,GAAAA,QAAAA,CAA/ByB,IAAcgI,EAAMH,SAAWtJ,QAAjByJ,CAAAA,IAAAA,CAAAA;QACtB,IAAMjE,QAAAA,GAAW6E,UAAU,CAACpC,MAAO,CAAA,CAAA;QACnC,IAAM4B,kBAAAA,GAAqBrE,SAASjE,UAAU,CAAA;AAC9C,QAAA,IAAMgI,iBAAoBvJ,GAAAA,QAAAA,CAAS0H,OAAO,IAAIlC,SAASkC,OAAO,CAAA;AAE9D,QAAA,IAAMtpB,WAAW,EAAE,CAAA;AACnB,QAAA,IAAK,IAAIsL,CAAI,GAAA,CAAA,EAAGA,CAAImgB,GAAAA,kBAAAA,CAAmBjoB,MAAM,EAAE8H,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA;QA8C/C,OAAO1J,OAAAA,CAAQgB,GAAG,CAAC5C,QAAAA,CAAAA,CAAAA;AACrB,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQiqB,eAyBP,GAzBD,SAAQA,eAAAA,CAAgB9c,OAAsB,EAAQ;QACpD,IAAI,CAACA,QAAQpG,UAAU,IAAI,CAACoG,OAAQ2K,CAAAA,YAAY,CAACoG,UAAU,EAAE;AAC3D,YAAA,OAAA;SACD;QAED,IAAyC/Q,qBAAAA,GAAAA,QAAQ2K,YAAY,EAArDkL,mBAAiC7V,qBAAjC6V,CAAAA,gBAAAA,EAAkB9E,aAAe/Q,qBAAf+Q,CAAAA,UAAAA,CAAAA;QAC1B,IAAMgO,QAAAA,GAAWlJ,gBAAiBhL,CAAAA,YAAY,CAACmU,mBAAAA,CAAAA,CAAAA;AAC/C,QAAA,IAAMtsB,qBAAqB,IAAIC,6BAAAA,EAAAA,CAAAA;QAC/B,IAAMW,KAAAA,GAAQ,IAAIC,kCAAwB,CAAA,OAAA,CAAA,CAAA;AAC1C,QAAA,IAAM0rB,uBAAuB,IAAIxrB,+BAAAA,EAAAA,CAAAA;AACjCf,QAAAA,kBAAAA,CAAmB8C,QAAQ,CAAClC,KAAAA,CAAAA,CAAAA;AAC5ByrB,QAAAA,QAAAA,CAASrsB,kBAAkB,GAAGA,kBAAAA,CAAAA;AAC9BY,QAAAA,KAAAA,CAAMF,YAAY,GAAG6rB,oBAAAA,CAAAA;AACrB,QAAA,IAAIlO,UAAY,EAAA;AACd,YAAA,IAAK,IAAI5S,CAAI,GAAA,CAAA,EAAGA,IAAI4S,UAAW1a,CAAAA,MAAM,EAAE8H,CAAK,EAAA,CAAA;gBAC1C,IAAMmT,aAAAA,GAAgBP,UAAU,CAAC5S,CAAE,CAAA,CAAA;gBACnC,IAAMlL,IAAAA,GAAOqe,cAAcre,IAAI,CAAA;gBAC/B,IAAMisB,UAAAA,GAAaD,oBAAqBE,CAAAA,mBAAmB,CAAClsB,IAAAA,CAAAA,CAAAA;AAC5D,gBAAA,IAAIisB,eAAejsB,IAAM,EAAA;AACvB+T,oBAAAA,OAAAA,CAAQoH,IAAI,CAAC,uCAAC,GAAuCnb,OAAK,YAAYisB,GAAAA,UAAAA,CAAAA,CAAAA;iBACvE;gBACD,IAAME,aAAAA,GAAgBH,oBAAqB7qB,CAAAA,QAAQ,CAAC8qB,UAAAA,CAAAA,CAAAA;AACpDE,gBAAAA,aAAAA,CAAcnrB,IAAI,GAAGqd,aAAAA,CAAAA;AACvB,aAAA;SACD;AACH,KAAA,CAAA;AArLW+K,IAAAA,WAAAA,CAGIqC,mBAMd,GAND,SAAeA,mBAAAA,CAAoBnnB,MAAc,EAAsB;AACrE,QAAA,IAAI,CAJK8kB,WAIQgD,CAAAA,gBAAgB,EAAE;YAJ1BhD,WAKKgD,CAAAA,gBAAgB,GAAG,IAAIC,6BAAmB/nB,CAAAA,MAAAA,CAAAA,CAAAA;SACvD;QAED,OARS8kB,YAQUgD,gBAAgB,CAAA;AACrC,KAAA,CAAA;AATWhD,IAAAA,OAAAA,WAAAA,CAAAA;EAAoBpU,MAsLhC,CAAA;;ACnMM,IAAA,UAAA,iBAAA,SAAA,MAAA,EAAA;AAAMsX,IAAAA,SAAAA,CAAAA,UAAAA,EAAAA,MAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,UAAAA,GAAAA;;;AAAAA,IAAAA,IAAAA,MAAAA,GAAAA,UAAAA,CAAAA,SAAAA,CAAAA;AACXjY,IAAAA,MAAAA,CAAAA,KAuDC,GAvDDA,SAAAA,KAAAA,CAAMtH,OAAsB,EAAQ;AAClC,QAAA,IAAQ2K,eAAgC3K,OAAhC2K,CAAAA,YAAAA,CAAAA,CAAc1K,OAAkBD,OAAlBC,CAAAA,IAAAA,CAAAA,CAAkBD,OAAZG,CAAAA,QAAAA;QAC5B,IAAQ2Q,WAAanG,YAAbmG,CAAAA,QAAAA,CAAAA;QACR,IAAM0O,SAAAA,GAAYvf,KAAKke,KAAK,CAAA;AAE5B,QAAA,IAAI,CAACqB,SAAW,EAAA,OAAA;QAEhB,IAAM1e,KAAAA,GAAQ0e,UAAUnpB,MAAM,CAAA;QAC9B,IAAM8nB,KAAAA,GAAQ,IAAIjgB,KAAY4C,CAAAA,KAAAA,CAAAA,CAAAA;AAE9B,QAAA,IAAK,IAAI3C,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAI2C,OAAO3C,CAAK,EAAA,CAAA;AAC9B,YAAA,IAAsEqhB,eAAAA,SAAS,CAACrhB,EAAE,EAA1EshB,mBAAAA,GAA8DD,aAA9DC,mBAAqBC,EAAAA,QAAAA,GAAyCF,YAAzCE,CAAAA,QAAAA,EAAUzD,SAA+BuD,YAA/BvD,CAAAA,MAAAA,EAAAA,iBAAAA,GAA+BuD,aAAvBvsB,IAAAA,EAAAA,IAAAA,GAAAA,iBAAAA,KAAAA,KAAAA,CAAAA,GAAO,OAAQkL,GAAAA,CAAAA,GAAAA,iBAAAA,CAAAA;YAC9D,IAAMwhB,UAAAA,GAAa1D,OAAO5lB,MAAM,CAAA;YAEhC,IAAM6nB,IAAAA,GAAO,IAAI0B,eAAK3sB,CAAAA,IAAAA,CAAAA,CAAAA;YACtBirB,IAAKuB,CAAAA,mBAAmB,CAACppB,MAAM,GAAGspB,UAAAA,CAAAA;;AAGlC,YAAA,IAAMzf,QAAWD,GAAAA,IAAAA,CAAKqJ,SAAS,CAACmW,mBAAoB,CAAA,CAAA;AACpD,YAAA,IAAM7oB,SAASkH,QAASiC,CAAAA,iBAAiB,CAACC,OAASC,EAAAA,IAAAA,EAAMC,UAAUzN,IAAI,CAAA;AACvE,YAAA,IAAK,IAAI0L,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAIwhB,YAAYxhB,EAAK,EAAA,CAAA;AACnC,gBAAA,IAAM0hB,oBAAoB,IAAIC,iBAAAA,EAAAA,CAAAA;gBAC9BD,iBAAkBnnB,CAAAA,aAAa,CAAC9B,MAAAA,EAAQuH,EAAI,GAAA,EAAA,CAAA,CAAA;gBAC5C+f,IAAKuB,CAAAA,mBAAmB,CAACthB,EAAAA,CAAE,GAAG0hB,iBAAAA,CAAAA;AAChC,aAAA;;AAGA,YAAA,IAAK,IAAI1hB,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAIwhB,YAAYxhB,EAAK,EAAA,CAAA;gBACnC,IAAM4hB,UAAAA,GAAa9D,MAAM,CAAC9d,EAAE,CAAA,CAAA;AAC5B,gBAAA,IAAM6hB,SAAYlP,GAAAA,QAAQ,CAACiP,UAAAA,CAAW,CAAC9sB,IAAI,CAAA;gBAC3CirB,IAAKjC,CAAAA,MAAM,CAAC9d,EAAAA,CAAE,GAAG6hB,SAAAA,CAAAA;;gBAEjB,IAAK,IAAI5d,IAAI0O,QAASza,CAAAA,MAAM,GAAG,CAAG+L,EAAAA,CAAAA,IAAK,GAAGA,CAAK,EAAA,CAAA;oBAC7C,IAAI2d,UAAAA,KAAe3d,KAAK0O,QAAQ,CAAC1O,EAAE,CAACnP,IAAI,KAAK+sB,SAAW,EAAA;AACtDlP,wBAAAA,QAAQ,CAAC1O,CAAE,CAAA,CAACnP,IAAI,GAAM+sB,YAAU,GAAG5d,GAAAA,CAAAA,CAAAA;qBACpC;AACH,iBAAA;AACF,aAAA;;AAGA,YAAA,IAAIsd,aAAaxe,SAAW,EAAA;AAC1Bgd,gBAAAA,IAAAA,CAAKwB,QAAQ,GAAG5O,QAAQ,CAAC4O,QAAAA,CAAS,CAACzsB,IAAI,CAAA;aAClC,MAAA;AACL,gBAAA,IAAMgtB,QAAW,GAAA,IAAI,CAACC,qBAAqB,CAACjE,MAAQnL,EAAAA,QAAAA,CAAAA,CAAAA;AACpD,gBAAA,IAAImP,QAAU,EAAA;oBACZ/B,IAAKwB,CAAAA,QAAQ,GAAGO,QAAAA,CAAShtB,IAAI,CAAA;iBACxB,MAAA;AACL,oBAAA,MAAM,oCAAqC,CAAA;iBAC5C;aACF;YAEDkrB,KAAK,CAAChgB,EAAE,GAAG+f,IAAAA,CAAAA;AACb,SAAA;AAEAvT,QAAAA,YAAAA,CAAawT,KAAK,GAAGA,KAAAA,CAAAA;AACvB,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQ+B,qBA6BP,GA7BD,SAAQA,sBAAsBjE,MAAgB,EAAEnL,QAAkB,EAAU;AAC1E,QAAA,IAAMqP,QAAkC,EAAC,CAAA;AACzC,QAAA,IAAA,IAAA,SAAA,GAAA,oCAAA,CAAoBlE,MAAQ,CAAA,EAAA,KAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,EAAA,EAAA,IAAA,EAAA;AAAjB7O,YAAAA,IAAAA,KAAAA,GAAAA,KAAAA,CAAAA,KAAAA,CAAAA;AACT,YAAA,IAAM5F,OAAO,IAAItJ,KAAAA,EAAAA,CAAAA;YACjB,IAAIoM,MAAAA,GAASwG,QAAQ,CAAC1D,KAAM,CAAA,CAAA;AAC5B,YAAA,MAAO9C,MAAQ,CAAA;AACb9C,gBAAAA,IAAAA,CAAK4Y,OAAO,CAAC9V,MAAAA,CAAAA,CAAAA;AACbA,gBAAAA,MAAAA,GAASA,OAAOqI,MAAM,CAAA;AACxB,aAAA;YACAwN,KAAK,CAAC/S,MAAM,GAAG5F,IAAAA,CAAAA;AACjB,SAAA;AAEA,QAAA,IAAI6Y,WAAmB,IAAI,CAAA;QAC3B,IAAK,IAAIliB,CAAI,GAAA,CAAA,GAAKA,CAAK,EAAA,CAAA;AACrB,YAAA,IAAIqJ,QAAO2Y,KAAK,CAAClE,MAAM,CAAC,EAAE,CAAC,CAAA;YAC3B,IAAI9d,CAAAA,IAAKqJ,KAAKnR,CAAAA,MAAM,EAAE;gBACpB,OAAOgqB,QAAAA,CAAAA;aACR;YAED,IAAM/V,OAAAA,GAAS9C,KAAI,CAACrJ,CAAE,CAAA,CAAA;YACtB,IAAK,IAAIiE,IAAI,CAAGkL,EAAAA,CAAAA,GAAI2O,OAAO5lB,MAAM,EAAE+L,CAAIkL,GAAAA,CAAAA,EAAGlL,CAAK,EAAA,CAAA;AAC7CoF,gBAAAA,KAAAA,GAAO2Y,KAAK,CAAClE,MAAM,CAAC7Z,EAAE,CAAC,CAAA;gBACvB,IAAIjE,CAAAA,IAAKqJ,MAAKnR,MAAM,IAAIiU,YAAW9C,KAAI,CAACrJ,EAAE,EAAE;oBAC1C,OAAOkiB,QAAAA,CAAAA;iBACR;AACH,aAAA;YAEAA,QAAW/V,GAAAA,OAAAA,CAAAA;AACb,SAAA;AACF,KAAA,CAAA;AAvFWiV,IAAAA,OAAAA,UAAAA,CAAAA;EAAmBtX,MAwF/B,CAAA;;ACxFM,IAAA,aAAMqY,0BAAN,MAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,aAAAA,EAAAA,MAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,aAAAA,GAAAA;;;AAAAA,IAAAA,IAAAA,MAAAA,GAAAA,aAAAA,CAAAA,SAAAA,CAAAA;AAOXhZ,IAAAA,MAAAA,CAAAA,KAmDC,GAnDDA,SAAAA,KAAAA,CAAMtH,OAAsB,EAA6B;;AACvD,QAAA,IAAQ2K,eAAgC3K,OAAhC2K,CAAAA,YAAAA,EAAc1K,OAAkBD,OAAlBC,CAAAA,IAAAA,EAAME,UAAYH,OAAZG,CAAAA,OAAAA,CAAAA;AAC5B,QAAA,IAAQ5I,MAAgBoT,GAAAA,YAAAA,CAAhBpT,MAAQjF,EAAAA,GAAAA,GAAQqY,YAARrY,CAAAA,GAAAA,CAAAA;QAEhB,IAAI2N,IAAAA,CAAKyL,QAAQ,EAAE;YACjB,IAAM3R,mBAAAA,GAAsBiG,QAAQjG,mBAAmB,CAAA;YACvD7H,uBAAauD,CAAAA,GAAG,CACdwK,IAAKyL,CAAAA,QAAQ,CAACyE,GAAG,CAAC,gBAA6C/C,KAAU,EAAA;AAApDkG,gBAAAA,IAAAA,OAAAA,GAAAA,KAAAA,CAAAA,OAASiN,EAAAA,aAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,MAAS,GAAA,aAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,aAAA,EAAGttB,WAAAA,GAAAA,KAAAA,CAAAA,IAAAA,CAAAA;AACxC,gBAAA,IAAwEgN,sBAAAA,IAAKugB,CAAAA,MAAM,CAACD,MAAO,CAAA,EAAnFjM,MAAgErU,mBAAhEqU,CAAAA,GAAAA,EAAKjU,eAAY8J,GAA+ClK,oBAA3DI,UAA6BogB,EAAAA,QAAAA,GAA8BxgB,oBAA9BwgB,QAAUxtB,EAAMytB,YAAczgB,mBAApBhN,CAAAA,IAAAA,CAAAA;AACpD,gBAAA,IAAIqhB,GAAK,EAAA;;oBAEP,IAAMlH,MAAAA,GAAQkH,GAAItO,CAAAA,WAAW,CAAC,GAAA,CAAA,CAAA;AAC9B,oBAAA,IAAM2a,GAAMrM,GAAAA,GAAAA,CAAIvO,SAAS,CAACqH,MAAQ,GAAA,CAAA,CAAA,CAAA;oBAClC,IAAM7a,IAAAA,GAAOouB,IAAIC,UAAU,CAAC,SAAS/qB,oBAAUgrB,CAAAA,GAAG,GAAGhrB,oBAAAA,CAAUirB,SAAS,CAAA;AACxE,oBAAA,OAAOvpB,MAAOtF,CAAAA,eAAe,CAC1BF,IAAI,CAAY;wBACfO,GAAKwL,EAAAA,QAAAA,CAAS8H,gBAAgB,CAACtT,GAAKgiB,EAAAA,GAAAA,CAAAA;wBACpC/hB,IAAMA,EAAAA,IAAAA;qBAEPC,CAAAA,CAAAA,IAAI,CAAC,SAAC6E,OAAY,EAAA;wBACjB,IAAI,CAACA,OAAQpE,CAAAA,IAAI,EAAE;AACjBoE,4BAAAA,OAAAA,CAAQpE,IAAI,GAAG8tB,WAAeL,IAAAA,SAAAA,IAAa,UAAWtT,GAAAA,MAAAA,CAAAA;yBACvD;AACD,wBAAA,IAAIkG,YAAYpS,SAAW,EAAA;AACzB,4BAAA,KAAA,CAAK8f,aAAa,CAAC3pB,OAAAA,EAAS4I,IAAKoR,CAAAA,QAAQ,CAACiC,OAAQ,CAAA,CAAA,CAAA;yBACnD;wBACD,OAAOjc,OAAAA,CAAAA;AACT,qBAAA,CAAA,CAAA;iBACG,MAAA;AACL,oBAAA,IAAMgJ,UAAaJ,GAAAA,IAAAA,CAAKG,WAAW,CAAC+J,eAAgB,CAAA,CAAA;AACpD,oBAAA,IAAM8W,cAAiBnjB,GAAAA,QAAAA,CAASsF,iBAAiB,CAAC/C,UAAYF,EAAAA,OAAAA,CAAAA,CAAAA;oBAC9D,OAAOrC,QAAAA,CAAS8G,eAAe,CAACqc,cAAAA,EAAgBR,UAAUjuB,IAAI,CAAC,SAAC0uB,KAAU,EAAA;wBACxE,IAAM7pB,OAAAA,GAAU,IAAIypB,oBAAUvpB,CAAAA,MAAAA,EAAQ2pB,MAAMC,KAAK,EAAED,MAAME,MAAM,CAAA,CAAA;AAC/D/pB,wBAAAA,OAAAA,CAAQgqB,cAAc,CAACH,KAAAA,CAAAA,CAAAA;AACvB7pB,wBAAAA,OAAAA,CAAQiqB,eAAe,EAAA,CAAA;AACvBjqB,wBAAAA,OAAAA,CAAQpE,IAAI,GAAG8tB,WAAeL,IAAAA,SAAAA,IAAa,UAAWtT,GAAAA,KAAAA,CAAAA;AACtD,wBAAA,IAAIkG,YAAYpS,SAAW,EAAA;AACzB,4BAAA,KAAA,CAAK8f,aAAa,CAAC3pB,OAAAA,EAAS4I,IAAKoR,CAAAA,QAAQ,CAACiC,OAAQ,CAAA,CAAA,CAAA;yBACnD;wBACD,OAAOjc,OAAAA,CAAAA;AACT,qBAAA,CAAA,CAAA;iBACD;aAGF7E,CAAAA,CAAAA,CAAAA,IAAI,CAAC,SAACkZ,QAA0B,EAAA;AAC/Bf,gBAAAA,YAAAA,CAAae,QAAQ,GAAGA,QAAAA,CAAAA;AACxB3R,gBAAAA,mBAAAA,CAAoB5H,OAAO,CAACuZ,QAAAA,CAAAA,CAAAA;aAE7BhW,CAAAA,CAAAA,KAAK,CAACqE,mBAAAA,CAAoB3H,MAAM,CAAA,CAAA;AACnC,YAAA,OAAO2H,oBAAoBU,OAAO,CAAA;SACnC;AACH,KAAA,CAAA;AAEA,IAAA,MAAA,CAAQumB,aAoBP,GApBD,SAAQA,cAAc3pB,OAAkB,EAAEic,OAAiB,EAAQ;QACjE,IAAQiO,SAAAA,GAAuCjO,OAAvCiO,CAAAA,SAAAA,EAAWC,SAA4BlO,GAAAA,OAAAA,CAA5BkO,WAAWC,KAAiBnO,GAAAA,OAAAA,CAAjBmO,KAAOC,EAAAA,KAAAA,GAAUpO,OAAVoO,CAAAA,KAAAA,CAAAA;AAErC,QAAA,IAAIH,aAAaC,SAAW,EAAA;YAC1B,IAAID,SAAAA,KAAcrkB,gBAAiBC,CAAAA,OAAO,EAAE;gBAC1C9F,OAAQG,CAAAA,UAAU,GAAGC,4BAAAA,CAAkBkqB,KAAK,CAAA;AAC9C,aAAA,MAAO,IAAIH,SAAAA,IAAankB,gBAAiBE,CAAAA,qBAAqB,EAAE;gBAC9DlG,OAAQG,CAAAA,UAAU,GAAGC,4BAAAA,CAAkBmqB,QAAQ,CAAA;aAC1C,MAAA;gBACLvqB,OAAQG,CAAAA,UAAU,GAAGC,4BAAAA,CAAkBC,SAAS,CAAA;aACjD;SACF;AAED,QAAA,IAAI+pB,KAAO,EAAA;AACTpqB,YAAAA,OAAAA,CAAQwqB,SAAS,GA1EVvB,aA0E2BwB,CAAAA,QAAQ,CAACL,KAAM,CAAA,CAAA;SAClD;AAED,QAAA,IAAIC,KAAO,EAAA;AACTrqB,YAAAA,OAAAA,CAAQ0qB,SAAS,GA9EVzB,aA8E2BwB,CAAAA,QAAQ,CAACJ,KAAM,CAAA,CAAA;SAClD;AACH,KAAA,CAAA;AAhFWpB,IAAAA,OAAAA,aAAAA,CAAAA;EAAsBrY,MAiFlC,CAAA,CAAA;;AAhF2B,IAAA,IAAA,IAAA,CAAA;IADfqY,aACIwB,CAAAA,QAAAA,IAAW,WAAA,IACvBE,CAAAA,eAAAA,CAAoBrkB,aAAa,CAAGD,GAAAA,0BAAAA,CAAgBukB,KAAK,EADlC,IAEvBD,CAAAA,eAAAA,CAAoBpkB,eAAe,CAAGF,GAAAA,0BAAAA,CAAgBwkB,MAAM,EAFrC,IAAA,CAGvBF,gBAAoBnkB,MAAM,CAAA,GAAGH,0BAAgBykB,CAAAA,MAAM,EAH5B,IAAA,CAAA,CAAA;;;ACHrB,IAAA,SAAA,iBAAA,SAAA,OAAA,EAAA;AAAMC,IAAAA,SAAAA,CAAAA,SAAAA,EAAAA,OAAAA,CAAAA,CAAAA;AAAAA,IAAAA,SAAAA,SAAAA,GAAAA;;;AAAAA,IAAAA,IAAAA,MAAAA,GAAAA,SAAAA,CAAAA,SAAAA,CAAAA;AACX9a,IAAAA,MAAAA,CAAAA,KAiCC,GAjCDA,SAAAA,KAAAA,CAAMtH,OAAsB,EAAQ;AAClC,QAAA,IAIIA,aAAAA,GAAAA,OAAAA,CAAQC,IAAI,EAHdoiB,OAAStb,GAGP/G,aAHFqiB,CAAAA,KAAAA,CAAStb,OACTub,EAAAA,cAAAA,GAEEtiB,aAFFsiB,CAAAA,cAAAA,EACAC,qBACEviB,aADFuiB,CAAAA,kBAAAA,CAAAA;AAGF,QAAA,IAAMC,cAActJ,MAAOnS,CAAAA,OAAAA,CAAAA,CAAAA;AAC3B,QAAA,IAAI,EAAEyb,WAAAA,IAAe,CAAKA,IAAAA,WAAAA,GAAc,CAAA,CAAI,EAAA;AAC1C,YAAA,MAAM,wBAAyB,CAAA;SAChC;AAED,QAAA,IAAIF,cAAgB,EAAA;YAClBnU,iBAAOsU,CAAAA,IAAI,CAAC,kBAAoBH,EAAAA,cAAAA,CAAAA,CAAAA;AAChC,YAAA,IAAK,IAAInkB,CAAI,GAAA,CAAA,EAAGA,IAAImkB,cAAejsB,CAAAA,MAAM,EAAE8H,CAAK,EAAA,CAAA;AAC9C,gBAAA,IAAI,CAAC8J,MAAOS,CAAAA,kBAAkB,CAAC4Z,cAAc,CAACnkB,EAAE,CAAG,EAAA;AACjDgQ,oBAAAA,iBAAAA,CAAOC,IAAI,CAAE,eAAYkU,cAAc,CAACnkB,EAAE,GAAC,gEAAA,CAAA,CAAA;iBAC5C;AACH,aAAA;SACD;AAED,QAAA,IAAIokB,kBAAoB,EAAA;YACtBpU,iBAAOsU,CAAAA,IAAI,CAAE,sBAAsBF,GAAAA,kBAAAA,CAAAA,CAAAA;AACnC,YAAA,IAAK,IAAIpkB,EAAI,GAAA,CAAA,EAAGA,KAAIokB,kBAAmBlsB,CAAAA,MAAM,EAAE8H,EAAK,EAAA,CAAA;gBAClD,IAAMukB,iBAAAA,GAAoBH,kBAAkB,CAACpkB,EAAE,CAAA,CAAA;AAE/C,gBAAA,IAAI,CAAC8J,MAAAA,CAAOS,kBAAkB,CAACga,iBAAoB,CAAA,EAAA;AACjDvU,oBAAAA,iBAAAA,CAAOlH,KAAK,CAAC,mDAAC,GAAmDyb,iBAAkB,GAAA,GAAA,CAAA,CAAA;iBAC9E,MAAA;AACLza,oBAAAA,MAAAA,CAAOU,UAAU,CAAC+Z,iBAAAA,CAAAA,CAAAA;iBACnB;AACH,aAAA;SACD;AACH,KAAA,CAAA;AAlCWN,IAAAA,OAAAA,SAAAA,CAAAA;EAAkBna,MAmC9B,CAAA;;ACzBM,IAAA,UAAA,iBAAA,WAAA;AAAM0a,IAAAA,SAAAA,UAAAA,CAeSC,KAA2B,EAAA;;AAFvCC,QAAAA,IAAAA,CAAAA,MAAAA,GAAmB,EAAE,CAAA;AAG3BD,QAAAA,KAAAA,CAAM9vB,OAAO,CAAC,SAACgwB,IAAAA,EAAwB1V,KAAkB,EAAA;AACvD,YAAA,KAAA,CAAKyV,MAAM,CAACzV,KAAM,CAAA,GAAG,IAAI0V,IAAAA,EAAAA,CAAAA;AAC3B,SAAA,CAAA,CAAA;;AAlBSH,IAAAA,IAAAA,MAAAA,GAAAA,UAAAA,CAAAA,SAAAA,CAAAA;AAqBXrb,IAAAA,MAAAA,CAAAA,KA0BC,GA1BDA,SAAAA,KAAAA,CAAMtH,OAAsB,EAA8B;;QACxD,IAAM2K,YAAAA,GAAe3K,QAAQ2K,YAAY,CAAA;QACzC,IAAIoY,QAAAA,CAAAA;AAEJ,QAAA,OAAO,IAAI7wB,uBAAAA,CAA2B,SAACC,OAAAA,EAASC,MAAW,EAAA;AACzD,YAAA,KAAA,CAAKywB,MAAM,CAAC/vB,OAAO,CAAC,SAACiW,MAAmB,EAAA;AACtC,gBAAA,IAAIga,QAAU,EAAA;oBACZA,QAAWA,GAAAA,QAAAA,CAASvwB,IAAI,CAAC,WAAM;wBAC7B,OAAOuW,MAAAA,CAAOzB,KAAK,CAACtH,OAAAA,CAAAA,CAAAA;AACtB,qBAAA,CAAA,CAAA;oBACA,IAAI+iB,QAAAA,CAASC,MAAM,EAAE;wBACnBhjB,OAAQnG,CAAAA,aAAa,CAACrF,IAAI,CAACuuB,QAAAA,CAAAA,CAAAA;qBAC5B;iBACI,MAAA;oBACLA,QAAWha,GAAAA,MAAAA,CAAOzB,KAAK,CAACtH,OAAAA,CAAAA,CAAAA;iBACzB;AACH,aAAA,CAAA,CAAA;AAEA,YAAA,IAAI+iB,QAAU,EAAA;gBACZA,QACGvwB,CAAAA,IAAI,CAAC,WAAM;oBACVL,OAAQwY,CAAAA,YAAAA,CAAAA,CAAAA;AACV,iBAAA,CAAA,CACCjV,KAAK,CAACtD,MAAAA,CAAAA,CAAAA;aACV;AACH,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;AA/CWuwB,IAAAA,OAAAA,UAAAA,CAAAA;AAgDZ,CAAA,EAAA,CAAA;;IAhDYA,UACJM,CAAAA,eAAAA,GAAkB,IAAIN,UAAW,CAAA;AACtCvO,QAAAA,YAAAA;AACAgO,QAAAA,SAAAA;AACA9B,QAAAA,aAAAA;AACA7U,QAAAA,cAAAA;AACAqK,QAAAA,UAAAA;AACAvB,QAAAA,YAAAA;AACAgL,QAAAA,UAAAA;AACA1O,QAAAA,eAAAA;AACAwL,QAAAA,aAAAA;AACD,KAAA,CAAA,CAAA;;;ACXH;;IAGO,IAAM6G,YAAN,iBAAA,SAAA,YAAA,EAAA;AAAMA,IAAAA,SAAAA,CAAAA,YAAAA,EAAAA,YAAAA,CAAAA,CAAAA;aAAAA,YA0BC3rB,CAAAA,MAAc,EAAEjF,GAAW,EAAA;;AAC/BiF,QAAAA,KAAAA,GAAAA,YAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,IAAAA,CAAAA;AACN,QAAA,KAAA,CAAKjF,GAAG,GAAGA,GAAAA,CAAAA;;;AA5BF4wB,IAAAA,IAAAA,MAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CAAAA;AA+BX;;AAEC,MACDC,MAAAA,CAAAA,OAkBC,GAlBDA,SAAAA,OAAgB,GAAA;QACd,IAAI,IAAI,CAACC,UAAU,EAAE;AACnB,YAAA,OAAA;SACD;AAED,QAAA,YAAA,CAAA,SAAA,CAAMD,OAAD,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;QACL,IAAI,CAACtN,gBAAgB,CAACsN,OAAO,EAAA,CAAA;QAE7B,IAAI,CAACzX,QAAQ,GAAG,IAAI,CAAA;QACpB,IAAI,CAACC,SAAS,GAAG,IAAI,CAAA;QACrB,IAAI,CAACkL,MAAM,GAAG,IAAI,CAAA;QAClB,IAAI,CAACsH,KAAK,GAAG,IAAI,CAAA;QACjB,IAAI,CAACpN,UAAU,GAAG,IAAI,CAAA;QACtB,IAAI,CAACD,QAAQ,GAAG,IAAI,CAAA;QACpB,IAAI,CAACwL,OAAO,GAAG,IAAI,CAAA;QACnB,IAAI,CAAC9Q,MAAM,GAAG,IAAI,CAAA;QAClB,IAAI,CAACmK,UAAU,GAAG,IAAI,CAAA;QACtB,IAAI,CAAC1F,QAAQ,GAAG,IAAI,CAAA;AACtB,KAAA,CAAA;AApDWiT,IAAAA,OAAAA,YAAAA,CAAAA;EAAqBG,uBAqDjC;;AChED,IAAaC,UAAN,iBAAA,SAAA,MAAA,EAAA;;;;;;AACLvxB,IAAAA,MAAAA,CAAAA,IAyBC,GAzBDA,SAAAA,KAAKC,IAAc,EAAEC,eAAgC,EAAqC;AAOjED,QAAAA,IAAAA,YAAAA,CAAAA;QANvB,IAAMM,GAAAA,GAAMN,KAAKM,GAAG,CAAA;QACpB,IAAM0N,OAAAA,GAAU,IAAIrG,aAAcrH,CAAAA,GAAAA,CAAAA,CAAAA;AAClC,QAAA,IAAMqY,YAAe,GAAA,IAAIuY,YAAajxB,CAAAA,eAAAA,CAAgBsF,MAAM,EAAEjF,GAAAA,CAAAA,CAAAA;QAC9D,IAAM+H,iBAAAA,GAAoB2F,QAAQ3F,iBAAiB,CAAA;AAEnD2F,QAAAA,OAAAA,CAAQ2K,YAAY,GAAGA,YAAAA,CAAAA;AACA3Y,QAAAA,IAAAA,yBAAAA,CAAAA;AAAvBgO,QAAAA,OAAAA,CAAQwW,YAAY,GAAGxkB,CAAAA,yBAAAA,GAAAA,CAAAA,YAAAA,GAAAA,IAAAA,CAAKuxB,MAAM,KAAA,IAAA,GAAXvxB,KAAAA,CAAAA,GAAAA,YAAAA,CAAawkB,YAAY,KAAA,IAAA,GAAzBxkB,4BAA6B,KAAK,CAAA;QAEzDqI,iBAAkBM,CAAAA,QAAQ,CAAC,WAAM;YAC/B,IAAQd,gBAAkBmG,OAAlBnG,CAAAA,aAAAA,CAAAA;AACR,YAAA,IAAA,IAAA,SAAA,GAAA,oCAAA,CAAsBA,aAAe,CAAA,EAAA,KAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,EAAA,EAAA,IAAA,EAAA;AAA1BY,gBAAAA,IAAAA,OAAAA,GAAAA,KAAAA,CAAAA,KAAAA,CAAAA;AACTA,gBAAAA,OAAAA,CAAQuoB,MAAM,EAAA,CAAA;AAChB,aAAA;AACF,SAAA,CAAA,CAAA;AAEAL,QAAAA,UAAAA,CAAWM,eAAe,CACvB3b,KAAK,CAACtH,OACNxN,CAAAA,CAAAA,IAAI,CAAC6H,iBAAAA,CAAkBlI,OAAO,CAAA,CAC9BuD,KAAK,CAAC,SAACoD,CAAM,EAAA;AACZkO,YAAAA,OAAAA,CAAQC,KAAK,CAACnO,CAAAA,CAAAA,CAAAA;AACduB,YAAAA,iBAAAA,CAAkBjI,MAAM,CAAC,gCAAC,GAAgCE,GAAI,GAAA,IAAA,CAAA,CAAA;AAChE,SAAA,CAAA,CAAA;AAEF,QAAA,OAAO0N,QAAQ1F,UAAU,CAAA;AAC3B,KAAA,CAAA;;EA1B8B3E,iBA2B/B,CAAA,CAAA;AA3BY2tB,UAAAA,GAAAA,UAAAA,CAAAA;IADZ1tB,yBAAeC,CAAAA,oBAAAA,CAAU2tB,MAAM,EAAE;AAAC,QAAA,MAAA;AAAQ,QAAA,KAAA;AAAM,KAAA,CAAA;AACpCF,CAAAA,EAAAA,UAAAA,CAAAA;;;ACMb,IAAMjY,EAAAA,GAAKjK,KAAKiK,EAAE,CAAA;IAkBZoY,SADN,IAAA,UAAA,iBAAA,SAAA,MAAA,EAAA;;;;;;AAuVE1xB,IAAAA,MAAAA,CAAAA,IAsBC,GAtBDA,SAAAA,KAAKC,IAAc,EAAEC,eAAgC,EAA6B;;AAChF,QAAA,OAAO,IAAIC,uBAAAA,CAAa,SAACC,OAAAA,EAASC,MAAW,EAAA;YAC3C,IAAMmF,MAAAA,GAAStF,gBAAgBsF,MAAM,CAAA;AAErC,YAAA,KAAA,CAAKlF,OAAO,CAAcL,IAAKM,CAAAA,GAAG,EAAE;gBAAEC,IAAM,EAAA,aAAA;aACzCC,CAAAA,CAAAA,IAAI,CAAC,SAACoE,MAAW,EAAA;gBAChB,IAAMoL,UAAAA,GAAa,IAAIzL,UAAWK,CAAAA,MAAAA,CAAAA,CAAAA;AAClC,gBAAA,IAAwC6sB,uBAAAA,GAAAA,SAAAA,CAAUC,YAAY,CAAC1hB,UAAvDmf,CAAAA,EAAAA,KAAAA,GAAgCsC,uBAAhCtC,CAAAA,KAAAA,EAAOC,MAAyBqC,GAAAA,uBAAAA,CAAzBrC,MAAQuC,EAAAA,YAAAA,GAAiBF,uBAAjBE,CAAAA,YAAAA,CAAAA;gBACvB,IAAMC,MAAAA,GAASH,UAAUI,WAAW,CAAC7hB,WAAWmS,QAAQ,CAACwP,eAAexC,KAAOC,EAAAA,MAAAA,CAAAA,CAAAA;AAC/E,gBAAA,IAAM0C,WAAW1C,MAAU,IAAA,CAAA,CAAA;AAE3B,gBAAA,IAAM2C,cAAcN,SAAUO,CAAAA,iBAAiB,CAACJ,MAAAA,EAAQzC,OAAOC,MAAQ0C,EAAAA,QAAAA,CAAAA,CAAAA;gBACvE,IAAMzsB,OAAAA,GAAU,IAAIC,sBAAAA,CAAYC,MAAQusB,EAAAA,QAAAA,CAAAA,CAAAA;AAExC,gBAAA,IAAK,IAAIG,SAAAA,GAAY,CAAGA,EAAAA,SAAAA,GAAY,GAAGA,SAAa,EAAA,CAAA;oBAClD5sB,OAAQW,CAAAA,cAAc,CAACC,0BAAgBC,CAAAA,SAAS,GAAG+rB,SAAWF,EAAAA,WAAW,CAACE,SAAAA,CAAU,EAAE,CAAA,CAAA,CAAA;AACxF,iBAAA;AACA5sB,gBAAAA,OAAAA,CAAQiqB,eAAe,EAAA,CAAA;gBACvBnvB,OAAQkF,CAAAA,OAAAA,CAAAA,CAAAA;AACV,aAAA,CAAA,CACC3B,KAAK,CAACtD,MAAAA,CAAAA,CAAAA;AACX,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;IAvTA,UAAe4xB,CAAAA,iBAsBd,GAtBD,SAAeA,iBACbJ,CAAAA,MAAkB,EAClBM,UAAkB,EAClBC,WAAmB,EACnBhtB,IAAY,EACS;AACrB,QAAA,IAAI,CAACysB,MAAQ,EAAA;AACX,YAAA,MAAM,gDAAiD,CAAA;SACxD;AAED,QAAA,IAAIA,MAAOvtB,CAAAA,MAAM,IAAI6tB,UAAAA,GAAaC,cAAc,CAAG,EAAA;AACjD,YAAA,MAAM,+CAAgD,CAAA;SACvD;QAED,IAAMC,YAAAA,GAAe,IAAI,CAACC,kBAAkB,CAACltB,IAAM,EAAA,IAAI,CAACmtB,UAAU,EAAEV,MAAAA,EAAQM,UAAYC,EAAAA,WAAAA,CAAAA,CAAAA;QACxF,IAAMI,WAAAA,GAAc,IAAI,CAACF,kBAAkB,CAACltB,IAAM,EAAA,IAAI,CAACqtB,SAAS,EAAEZ,MAAAA,EAAQM,UAAYC,EAAAA,WAAAA,CAAAA,CAAAA;QACtF,IAAMM,SAAAA,GAAY,IAAI,CAACJ,kBAAkB,CAACltB,IAAM,EAAA,IAAI,CAACutB,OAAO,EAAEd,MAAAA,EAAQM,UAAYC,EAAAA,WAAAA,CAAAA,CAAAA;QAClF,IAAMQ,WAAAA,GAAc,IAAI,CAACN,kBAAkB,CAACltB,IAAM,EAAA,IAAI,CAACytB,WAAW,EAAEhB,MAAAA,EAAQM,UAAYC,EAAAA,WAAAA,CAAAA,CAAAA;QACxF,IAAMU,YAAAA,GAAe,IAAI,CAACR,kBAAkB,CAACltB,IAAM,EAAA,IAAI,CAAC2tB,UAAU,EAAElB,MAAAA,EAAQM,UAAYC,EAAAA,WAAAA,CAAAA,CAAAA;QACxF,IAAMY,WAAAA,GAAc,IAAI,CAACV,kBAAkB,CAACltB,IAAM,EAAA,IAAI,CAAC6tB,SAAS,EAAEpB,MAAAA,EAAQM,UAAYC,EAAAA,WAAAA,CAAAA,CAAAA;QAEtF,OAAO;AAACC,YAAAA,YAAAA;AAAcG,YAAAA,WAAAA;AAAaE,YAAAA,SAAAA;AAAWE,YAAAA,WAAAA;AAAaE,YAAAA,YAAAA;AAAcE,YAAAA,WAAAA;AAAY,SAAA,CAAA;AACvF,KAAA,CAAA;AAEA,IAAA,UAAA,CAAeV,kBAiDd,GAjDD,SAAeA,kBAAAA,CACbY,OAAe,EACfC,QAAmB,EACnBtB,MAAkB,EAClBM,UAAkB,EAClBC,WAAmB,EACA;AACnB,QAAA,IAAMgB,YAAe,GAAA,IAAIC,iBAAkBH,CAAAA,OAAAA,GAAUA,OAAU,GAAA,CAAA,CAAA,CAAA;QAC/D,IAAMI,MAAAA,GAAS,IAAI,CAACpM,YAAY,CAC7BhO,GAAG,CAAC,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,CACVvR,GAAG,CAACwrB,QAAQ,CAAC,CAAA,CAAE,CACfI,CAAAA,QAAQ,CAACJ,QAAQ,CAAC,CAAE,CAAA,CAAA,CACpBvX,KAAK,CAAC,CAAIsX,GAAAA,OAAAA,CAAAA,CAAAA;QACb,IAAMM,MAAAA,GAAS,IAAI,CAACC,aAAa,CAC9Bva,GAAG,CAAC,CAAA,EAAG,CAAG,EAAA,CAAA,CAAA,CACVvR,GAAG,CAACwrB,QAAQ,CAAC,CAAA,CAAE,CACfI,CAAAA,QAAQ,CAACJ,QAAQ,CAAC,CAAE,CAAA,CAAA,CACpBvX,KAAK,CAAC,CAAIsX,GAAAA,OAAAA,CAAAA,CAAAA;AAEb,QAAA,IAAMQ,KAAK,CAAIR,GAAAA,OAAAA,CAAAA;AACf,QAAA,IAAIS,EAAK,GAAA,CAAA,CAAA;AAET,QAAA,IAAK,IAAI/U,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIsU,SAAStU,CAAK,EAAA,CAAA;AAChC,YAAA,IAAIgV,GAAM,GAAA,IAAI,CAACC,aAAa,CAAC3a,GAAG,CAAC,CAAG,EAAA,CAAA,EAAG,CAAGvR,CAAAA,CAAAA,GAAG,CAACwrB,QAAQ,CAAC,CAAE,CAAA,CAAA,CAAA;AACzD,YAAA,IAAIW,GAAM,GAAA,IAAI,CAACC,aAAa,CAAC7a,GAAG,CAAC,CAAG,EAAA,CAAA,EAAG,CAAGvR,CAAAA,CAAAA,GAAG,CAACwrB,QAAQ,CAAC,CAAE,CAAA,CAAA,CAAA;AAEzD,YAAA,IAAK,IAAIxU,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIuU,SAASvU,CAAK,EAAA,CAAA;gBAChC,IAAMsB,CAAAA,GAAI,IAAI,CAAC+T,aAAa,CAAC9a,GAAG,CAAC,GAAG,CAAG,EAAA,CAAA,CAAA,CAAGvR,GAAG,CAACmsB,GAAAA,CAAAA,CAAKP,QAAQ,CAACK,GAAAA,CAAAA,CAAKhY,KAAK,CAAC+X,EAAAA,CAAAA,CAAIhsB,GAAG,CAACisB,GAAAA,CAAAA,CAAAA;AAC/E3T,gBAAAA,CAAAA,CAAEgU,SAAS,EAAA,CAAA;AAEX,gBAAA,IAAMzb,QAAQ,IAAI,CAAC0b,wBAAwB,CAACjU,CAAAA,EAAG4R,QAAQM,UAAYC,EAAAA,WAAAA,CAAAA,CAAAA;gBACnE,IAAI,CAAC+B,aAAa,CAAC3b,KAAAA,CAAAA,CAAAA;gBACnB,IAAI,CAAC4b,aAAa,CAAC5b,KAAO,EAAA,CAAA,CAAA,CAAA;;AAG1B,gBAAA,IAAM6C,KAAQuD,GAAAA,CAAAA,GAAIsU,OAAU,GAAA,CAAA,GAAIvU,CAAI,GAAA,CAAA,CAAA;AACpCyU,gBAAAA,YAAY,CAAC/X,KAAAA,CAAM,GAAG7C,KAAAA,CAAM6b,CAAC,CAAA;AAC7BjB,gBAAAA,YAAY,CAAC/X,KAAAA,GAAQ,CAAE,CAAA,GAAG7C,MAAM8b,CAAC,CAAA;AACjClB,gBAAAA,YAAY,CAAC/X,KAAAA,GAAQ,CAAE,CAAA,GAAG7C,MAAM+b,CAAC,CAAA;AACjCnB,gBAAAA,YAAY,CAAC/X,KAAAA,GAAQ,CAAE,CAAA,GAAG7C,MAAMgc,CAAC,CAAA;AAEjCZ,gBAAAA,GAAAA,CAAIjsB,GAAG,CAAC2rB,MAAAA,CAAAA,CAAAA;AACRQ,gBAAAA,GAAAA,CAAInsB,GAAG,CAAC6rB,MAAAA,CAAAA,CAAAA;AACV,aAAA;YAEAG,EAAMD,IAAAA,EAAAA,CAAAA;AACR,SAAA;QAEA,OAAON,YAAAA,CAAAA;AACT,KAAA,CAAA;IAEA,UAAec,CAAAA,wBA4Cd,GA5CD,SAAeA,wBACbO,CAAAA,IAAa,EACb5C,MAAkB,EAClBM,UAAkB,EAClBC,WAAmB,EACZ;QACP,IAAIsC,KAAAA,GAAQrlB,KAAKslB,KAAK,CAACF,KAAKhW,CAAC,EAAE,CAACgW,IAAAA,CAAK9V,CAAC,CAAA,CAAA;AACtC,QAAA,IAAIiW,GAAMvlB,GAAAA,IAAAA,CAAKwlB,IAAI,CAACJ,KAAK7V,CAAC,CAAA,CAAA;QAE1B,MAAO8V,KAAAA,GAAQ,CAACpb,EAAI,CAAA;AAClBob,YAAAA,KAAAA,IAAS,CAAIpb,GAAAA,EAAAA,CAAAA;AACf,SAAA;AACA,QAAA,MAAOob,QAAQpb,EAAI,CAAA;AACjBob,YAAAA,KAAAA,IAAS,CAAIpb,GAAAA,EAAAA,CAAAA;AACf,SAAA;AAEA,QAAA,IAAIwb,KAAKJ,KAAQpb,GAAAA,EAAAA,CAAAA;AACjB,QAAA,IAAIoa,KAAKkB,GAAMtb,GAAAA,EAAAA,CAAAA;;AAGfwb,QAAAA,EAAAA,GAAKA,KAAK,GAAM,GAAA,GAAA,CAAA;AAEhB,QAAA,IAAIC,EAAK1lB,GAAAA,IAAAA,CAAK2lB,KAAK,CAACF,EAAK3C,GAAAA,UAAAA,CAAAA,CAAAA;AACzB,QAAA,IAAI4C,KAAK,CAAG,EAAA;YACVA,EAAK,GAAA,CAAA,CAAA;SACA,MAAA,IAAIA,MAAM5C,UAAY,EAAA;AAC3B4C,YAAAA,EAAAA,GAAK5C,UAAa,GAAA,CAAA,CAAA;SACnB;AAED,QAAA,IAAI8C,EAAK5lB,GAAAA,IAAAA,CAAK2lB,KAAK,CAACtB,EAAKtB,GAAAA,WAAAA,CAAAA,CAAAA;AACzB,QAAA,IAAI6C,KAAK,CAAG,EAAA;YACVA,EAAK,GAAA,CAAA,CAAA;SACA,MAAA,IAAIA,MAAM7C,WAAa,EAAA;AAC5B6C,YAAAA,EAAAA,GAAK7C,WAAc,GAAA,CAAA,CAAA;SACpB;QAED,IAAM8C,MAAAA,GAAS9C,cAAc6C,EAAK,GAAA,CAAA,CAAA;AAClC,QAAA,IAAM5Z,KAAQ6Z,GAAAA,MAAAA,GAAS/C,UAAa,GAAA,CAAA,GAAI4C,EAAK,GAAA,CAAA,CAAA;QAC7C,IAAMV,CAAAA,GAAIxC,MAAM,CAACxW,KAAM,CAAA,CAAA;AACvB,QAAA,IAAMiZ,CAAIzC,GAAAA,MAAM,CAACxW,KAAAA,GAAQ,CAAE,CAAA,CAAA;AAC3B,QAAA,IAAMkZ,CAAI1C,GAAAA,MAAM,CAACxW,KAAAA,GAAQ,CAAE,CAAA,CAAA;AAC3B,QAAA,IAAMmZ,CAAI3C,GAAAA,MAAM,CAACxW,KAAAA,GAAQ,CAAE,CAAA,CAAA;AAE3B,QAAA,OAAO,IAAIxO,gBAAAA,CAAMwnB,CAAGC,EAAAA,CAAAA,EAAGC,CAAGC,EAAAA,CAAAA,CAAAA,CAAAA;AAC5B,KAAA,CAAA;AAEA,IAAA,UAAA,CAAeW,eAed,GAfD,SAAeA,gBAAgBC,UAAsB,EAAEC,UAAkB,EAAU;AACjF,QAAA,IAAIC,IAAO,GAAA,EAAA,CAAA;AACX,QAAA,IAAIC,SAAY,GAAA,EAAA,CAAA;QAEhB,IAAK,IAAInpB,IAAIipB,UAAYjpB,EAAAA,CAAAA,GAAIgpB,WAAW9wB,MAAM,GAAG+wB,YAAYjpB,CAAK,EAAA,CAAA;AAChEmpB,YAAAA,SAAAA,GAAYpoB,MAAOC,CAAAA,YAAY,CAACgoB,UAAU,CAAChpB,CAAE,CAAA,CAAA,CAAA;AAE7C,YAAA,IAAImpB,aAAa,IAAM,EAAA;gBACrB,MAAM;aACP;YAEDD,IAAQC,IAAAA,SAAAA,CAAAA;AACV,SAAA;QAEA,OAAOD,IAAAA,CAAAA;AACT,KAAA,CAAA;AAEA,IAAA,UAAA,CAAe3D,YAoDd,GApDD,SAAeA,YAAAA,CAAayD,UAAsB,EAAc;AAC9D,QAAA,IAAI/F,MAAiB,GAAA,CAAA,CAAA;AACrB,QAAA,IAAID,KAAgB,GAAA,CAAA,CAAA;AAEpB,QAAA,IAAIkG,IAAO,GAAA,IAAI,CAACH,eAAe,CAACC,UAAY,EAAA,CAAA,CAAA,CAAA;QAC5C,IAAIE,IAAI,CAAC,CAAE,CAAA,IAAI,OAAOA,IAAI,CAAC,CAAE,CAAA,IAAI,GAAK,EAAA;AACpC,YAAA,MAAM,iBAAkB,CAAA;SACzB;AAED,QAAA,IAAIE,cAAc,KAAK,CAAA;AACvB,QAAA,IAAIC,aAAa,KAAK,CAAA;AACtB,QAAA,IAAIC,SAAoB,GAAA,CAAA,CAAA;QAExB,GAAG;YACDA,SAAaJ,IAAAA,IAAAA,CAAKhxB,MAAM,GAAG,CAAA,CAAA;AAC3BgxB,YAAAA,IAAAA,GAAO,IAAI,CAACH,eAAe,CAACC,UAAYM,EAAAA,SAAAA,CAAAA,CAAAA;AAExC,YAAA,IAAIJ,QAAQ,wBAA0B,EAAA;AACpCG,gBAAAA,UAAAA,GAAa,IAAI,CAAA;AACnB,aAAA,MAAO,IAAIH,IAAAA,CAAKhxB,MAAM,IAAI,CAAG,EAAA;AAC3BkxB,gBAAAA,WAAAA,GAAc,IAAI,CAAA;aACnB;AACH,SAAA,OAAS,CAACA,WAAa,EAAA;AAEvB,QAAA,IAAI,CAACC,UAAY,EAAA;AACf,YAAA,MAAM,2CAA4C,CAAA;SACnD;QAEDC,SAAaJ,IAAAA,IAAAA,CAAKhxB,MAAM,GAAG,CAAA,CAAA;AAC3BgxB,QAAAA,IAAAA,GAAO,IAAI,CAACH,eAAe,CAACC,UAAYM,EAAAA,SAAAA,CAAAA,CAAAA;AAExC,QAAA,IAAMC,UAAa,GAAA,sBAAA,CAAA;QACnB,IAAMC,KAAAA,GAAQD,UAAWE,CAAAA,IAAI,CAACP,IAAAA,CAAAA,CAAAA;;AAG9B,QAAA,IAAI,CAACM,KAAAA,IAASA,KAAMtxB,CAAAA,MAAM,GAAG,CAAG,EAAA;AAC9B,YAAA,MAAM,gCAAiC,CAAA;SACxC;QACD8qB,KAAQ0G,GAAAA,QAAAA,CAASF,KAAK,CAAC,CAAE,CAAA,CAAA,CAAA;QACzBvG,MAASyG,GAAAA,QAAAA,CAASF,KAAK,CAAC,CAAE,CAAA,CAAA,CAAA;QAE1B,IAAIxG,KAAAA,GAAQ,CAAKA,IAAAA,KAAAA,GAAQ,MAAQ,EAAA;AAC/B,YAAA,MAAM,yCAA0C,CAAA;SACjD;QAEDsG,SAAaJ,IAAAA,IAAAA,CAAKhxB,MAAM,GAAG,CAAA,CAAA;QAE3B,OAAO;YACL+qB,MAAQA,EAAAA,MAAAA;YACRD,KAAOA,EAAAA,KAAAA;YACPwC,YAAc8D,EAAAA,SAAAA;AAChB,SAAA,CAAA;AACF,KAAA,CAAA;IAEA,UAAe5D,CAAAA,WA2Ed,GA3ED,SAAeA,WAAAA,CAAYjtB,MAAkB,EAAEuqB,KAAa,EAAEC,MAAc,EAAc;AACxF,QAAA,IAAM0G,aAAgB3G,GAAAA,KAAAA,CAAAA;QACtB,IAAMhf,UAAAA,GAAavL,OAAOuL,UAAU,CAAA;AAEpC,QAAA,IAAM4lB,QAAW,GAAA,IAAIxxB,UAAW,CAAA,CAAA,GAAI4qB,KAAQC,GAAAA,MAAAA,CAAAA,CAAAA;QAE5C,IAAIrsB,MAAAA,GAAS,GACXizB,GAAM,GAAA,CAAA,CAAA;AACR,QAAA,IAAMC,SAAS,CAAIH,GAAAA,aAAAA,CAAAA;QACnB,IAAMI,SAAAA,GAAY,IAAI3xB,UAAW,CAAA,CAAA,CAAA,CAAA;QACjC,IAAM4xB,cAAAA,GAAiB,IAAI5xB,UAAW0xB,CAAAA,MAAAA,CAAAA,CAAAA;QACtC,IAAIG,YAAAA,GAAehH;QAEnB,MAAOgH,YAAAA,GAAe,CAAKJ,IAAAA,GAAAA,GAAM7lB,UAAY,CAAA;AAC3C+lB,YAAAA,SAAS,CAAC,CAAA,CAAE,GAAGtxB,MAAM,CAACoxB,GAAM,EAAA,CAAA,CAAA;AAC5BE,YAAAA,SAAS,CAAC,CAAA,CAAE,GAAGtxB,MAAM,CAACoxB,GAAM,EAAA,CAAA,CAAA;AAC5BE,YAAAA,SAAS,CAAC,CAAA,CAAE,GAAGtxB,MAAM,CAACoxB,GAAM,EAAA,CAAA,CAAA;AAC5BE,YAAAA,SAAS,CAAC,CAAA,CAAE,GAAGtxB,MAAM,CAACoxB,GAAM,EAAA,CAAA,CAAA;YAE5B,IAAI,CAAA,IAAKE,SAAS,CAAC,CAAA,CAAE,IAAI,CAAKA,IAAAA,SAAS,CAAC,CAAA,CAAE,IAAK,CAAA,SAAU,CAAC,CAAA,CAAE,IAAI,CAAA,GAAKA,SAAS,CAAC,CAAA,CAAE,KAAKJ,aAAe,EAAA;AACnG,gBAAA,MAAM,8CAA+C,CAAA;aACtD;;;YAKD,IAAIO,GAAAA,GAAM,CACRvnB,EAAAA,KAAAA,GAAAA,KAAAA,CAAAA,CAAAA;YAEF,MAAOunB,GAAAA,GAAMJ,MAAUD,IAAAA,GAAAA,GAAM7lB,UAAY,CAAA;gBACvCrB,KAAQlK,GAAAA,MAAM,CAACoxB,GAAM,EAAA,CAAA,CAAA;AACrB,gBAAA,IAAMM,eAAexnB,KAAQ,GAAA,GAAA,CAAA;AAC7B,gBAAA,IAAIwnB,cAAcxnB,KAAS,IAAA,GAAA,CAAA;AAE3B,gBAAA,IAAI,CAAMA,KAAAA,KAAAA,IAASunB,GAAMvnB,GAAAA,KAAAA,GAAQmnB,MAAQ,EAAA;AACvC,oBAAA,MAAM,yCAA0C,CAAA;iBACjD;AAED,gBAAA,IAAIK,YAAc,EAAA;;oBAEhB,IAAMC,SAAAA,GAAY3xB,MAAM,CAACoxB,GAAM,EAAA,CAAA,CAAA;AAE/B,oBAAA,IAAK,IAAI7pB,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAI2C,OAAO3C,CAAK,EAAA,CAAA;wBAC9BgqB,cAAc,CAACE,MAAM,GAAGE,SAAAA,CAAAA;AAC1B,qBAAA;iBACK,MAAA;;AAELJ,oBAAAA,cAAAA,CAAeld,GAAG,CAACrU,MAAAA,CAAOud,QAAQ,CAAC6T,GAAAA,EAAKA,MAAMlnB,KAAQunB,CAAAA,EAAAA,GAAAA,CAAAA,CAAAA;oBACtDA,GAAOvnB,IAAAA,KAAAA,CAAAA;oBACPknB,GAAOlnB,IAAAA,KAAAA,CAAAA;iBACR;AACH,aAAA;;YAGA,IAAM0nB,CAAAA,GAAIV;AAEV,YAAA,IAAK,IAAI3pB,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAIqqB,GAAGrqB,EAAK,EAAA,CAAA;AAC1B,gBAAA,IAAIsqB,GAAM,GAAA,CAAA,CAAA;AACVV,gBAAAA,QAAQ,CAAChzB,MAAO,CAAA,GAAGozB,cAAc,CAAChqB,KAAIsqB,GAAI,CAAA,CAAA;gBAC1CA,GAAOX,IAAAA,aAAAA,CAAAA;AAEPC,gBAAAA,QAAQ,CAAChzB,MAAS,GAAA,CAAA,CAAE,GAAGozB,cAAc,CAAChqB,KAAIsqB,GAAI,CAAA,CAAA;gBAC9CA,GAAOX,IAAAA,aAAAA,CAAAA;AAEPC,gBAAAA,QAAQ,CAAChzB,MAAS,GAAA,CAAA,CAAE,GAAGozB,cAAc,CAAChqB,KAAIsqB,GAAI,CAAA,CAAA;gBAC9CA,GAAOX,IAAAA,aAAAA,CAAAA;AAEPC,gBAAAA,QAAQ,CAAChzB,MAAS,GAAA,CAAA,CAAE,GAAGozB,cAAc,CAAChqB,KAAIsqB,GAAI,CAAA,CAAA;gBAC9C1zB,MAAU,IAAA,CAAA,CAAA;AACZ,aAAA;AAEAqzB,YAAAA,YAAAA,EAAAA,CAAAA;AACF,SAAA;QAEA,OAAOL,QAAAA,CAAAA;AACT,KAAA,CAAA;AAEA,IAAA,UAAA,CAAe7B,aAMd,GAND,SAAeA,aAAAA,CAAc3b,KAAY,EAAQ;QAC/C,IAAM2N,WAAAA,GAAc9W,KAAKsnB,GAAG,CAAC,GAAGne,KAAMgc,CAAAA,CAAC,GAAG,GAAO,CAAA,GAAA,GAAA,CAAA;AACjDhc,QAAAA,KAAAA,CAAM6b,CAAC,IAAIlO,WAAAA,CAAAA;AACX3N,QAAAA,KAAAA,CAAM8b,CAAC,IAAInO,WAAAA,CAAAA;AACX3N,QAAAA,KAAAA,CAAM+b,CAAC,IAAIpO,WAAAA,CAAAA;AACX3N,QAAAA,KAAAA,CAAMgc,CAAC,GAAG,CAAA,CAAA;AACZ,KAAA,CAAA;AAEA,IAAA,UAAA,CAAeJ,aAUd,GAVD,SAAeA,cAAc5b,KAAY,EAAEoe,QAAgB,EAAQ;AACjE,QAAA,IAAMC,MAASxnB,GAAAA,IAAAA,CAAK0X,GAAG,CAACvO,MAAM6b,CAAC,EAAEhlB,IAAK0X,CAAAA,GAAG,CAACvO,KAAAA,CAAM8b,CAAC,EAAE9b,MAAM+b,CAAC,CAAA,CAAA,CAAA;AAC1D,QAAA,IAAIuC,CAAIznB,GAAAA,IAAAA,CAAKyX,GAAG,CAAC+P,SAASD,QAAU,EAAA,CAAA,CAAA,CAAA;QACpCE,CAAIznB,GAAAA,IAAAA,CAAK0nB,IAAI,CAACD,CAAI,GAAA,GAAA,CAAA,CAAA;AAClB,QAAA,IAAM3Q,cAAc,KAAS2Q,IAAAA,CAAIF,GAAAA,QAAO;AAExCpe,QAAAA,KAAAA,CAAM6b,CAAC,IAAIlO,WAAAA,CAAAA;AACX3N,QAAAA,KAAAA,CAAM8b,CAAC,IAAInO,WAAAA,CAAAA;AACX3N,QAAAA,KAAAA,CAAM+b,CAAC,IAAIpO,WAAAA,CAAAA;AACX3N,QAAAA,KAAAA,CAAMgc,CAAC,IAAIsC,CAAAA,CAAAA;AACb,KAAA,CAAA;;AApVsBlzB,CAAAA,CAAAA,iBAAAA,CAAAA,EAAAA,WAAAA;AACPozB,IAAAA,UAAAA,CAAAA,gBAAAA,GAAmB,IAAIzqB,kBAAAA,CAAQ,GAAK,EAAA,CAAC,KAAK,CAAC,GAAA,CAAA,CAAA;;AAC3C0qB,IAAAA,UAAAA,CAAAA,iBAAAA,GAAoB,IAAI1qB,kBAAAA,CAAQ,GAAK,EAAA,CAAC,GAAK,EAAA,GAAA,CAAA,CAAA;;AAC3C2qB,IAAAA,UAAAA,CAAAA,YAAAA,GAAe,IAAI3qB,kBAAAA,CAAQ,GAAK,EAAA,GAAA,EAAK,CAAC,GAAA,CAAA,CAAA;;eACtC4qB,aAAgB,GAAA,IAAI5qB,kBAAQ,CAAA,GAAA,EAAK,GAAK,EAAA,GAAA,CAAA,CAAA;;AACtC6qB,IAAAA,UAAAA,CAAAA,eAAAA,GAAkB,IAAI7qB,kBAAQ,CAAA,CAAC,GAAK,EAAA,CAAC,KAAK,CAAC,GAAA,CAAA,CAAA;;AAC3C8qB,IAAAA,UAAAA,CAAAA,gBAAAA,GAAmB,IAAI9qB,kBAAAA,CAAQ,CAAC,GAAA,EAAK,CAAC,GAAK,EAAA,GAAA,CAAA,CAAA;;AAC3C+qB,IAAAA,UAAAA,CAAAA,WAAAA,GAAc,IAAI/qB,kBAAAA,CAAQ,CAAC,GAAA,EAAK,KAAK,CAAC,GAAA,CAAA,CAAA;;AACtCgrB,IAAAA,UAAAA,CAAAA,YAAAA,GAAe,IAAIhrB,kBAAAA,CAAQ,CAAC,GAAA,EAAK,GAAK,EAAA,GAAA,CAAA,CAAA;;eAEtCgmB,UAAa,GAAA;AAC1Bb,QAAAA,UAAAA,CAAUsF,gBAAgB;AAC1BtF,QAAAA,UAAAA,CAAUuF,iBAAiB;AAC3BvF,QAAAA,UAAAA,CAAUwF,YAAY;AACtBxF,QAAAA,UAAAA,CAAUyF,aAAa;AACxB,KAAA,CAAA;;eACc1E,SAAY,GAAA;AACzBf,QAAAA,UAAAA,CAAU2F,gBAAgB;AAC1B3F,QAAAA,UAAAA,CAAU0F,eAAe;AACzB1F,QAAAA,UAAAA,CAAU6F,YAAY;AACtB7F,QAAAA,UAAAA,CAAU4F,WAAW;AACtB,KAAA,CAAA;;eACc3E,OAAU,GAAA;AACvBjB,QAAAA,UAAAA,CAAU2F,gBAAgB;AAC1B3F,QAAAA,UAAAA,CAAUuF,iBAAiB;AAC3BvF,QAAAA,UAAAA,CAAU0F,eAAe;AACzB1F,QAAAA,UAAAA,CAAUsF,gBAAgB;AAC3B,KAAA,CAAA;;eACcnE,WAAc,GAAA;AAC3BnB,QAAAA,UAAAA,CAAU4F,WAAW;AACrB5F,QAAAA,UAAAA,CAAUwF,YAAY;AACtBxF,QAAAA,UAAAA,CAAU6F,YAAY;AACtB7F,QAAAA,UAAAA,CAAUyF,aAAa;AACxB,KAAA,CAAA;;eACcpE,UAAa,GAAA;AAC1BrB,QAAAA,UAAAA,CAAU0F,eAAe;AACzB1F,QAAAA,UAAAA,CAAUsF,gBAAgB;AAC1BtF,QAAAA,UAAAA,CAAU4F,WAAW;AACrB5F,QAAAA,UAAAA,CAAUwF,YAAY;AACvB,KAAA,CAAA;;eACcjE,SAAY,GAAA;AACzBvB,QAAAA,UAAAA,CAAUuF,iBAAiB;AAC3BvF,QAAAA,UAAAA,CAAU2F,gBAAgB;AAC1B3F,QAAAA,UAAAA,CAAUyF,aAAa;AACvBzF,QAAAA,UAAAA,CAAU6F,YAAY;AACvB,KAAA,CAAA;;AAEcrQ,IAAAA,UAAAA,CAAAA,YAAAA,GAAe,IAAI3a,kBAAAA,EAAAA,CAAAA;;AACnBknB,IAAAA,UAAAA,CAAAA,aAAAA,GAAgB,IAAIlnB,kBAAAA,EAAAA,CAAAA;;AACpBsnB,IAAAA,UAAAA,CAAAA,aAAAA,GAAgB,IAAItnB,kBAAAA,EAAAA,CAAAA;;AACpBwnB,IAAAA,UAAAA,CAAAA,aAAAA,GAAgB,IAAIxnB,kBAAAA,EAAAA,CAAAA;;AACpBynB,IAAAA,UAAAA,CAAAA,aAAAA,GAAgB,IAAIznB,kBAAAA,EAAAA,CAAAA;;AAnD/BmlB,SAAAA,GAAAA,UAAAA,CAAAA;IADL7tB,yBAAeC,CAAAA,oBAAAA,CAAU0zB,GAAG,EAAE;AAAC,QAAA,KAAA;AAAM,KAAA,CAAA;AAChC9F,CAAAA,EAAAA,SAAAA,CAAAA;;IC3BA+F,UADN,iBAAA,SAAA,MAAA,EAAA;;;;;;AAEEz3B,IAAAA,MAAAA,CAAAA,IAKC,GALDA,SAAAA,IAAAA,CAAKC,IAAc,EAAwB;AACzC,QAAA,OAAO,IAAI,CAACK,OAAO,CAACL,IAAKM,CAAAA,GAAG,EAAE,QACzBN,CAAAA,EAAAA,EAAAA,IAAAA,EAAAA;YACHO,IAAM,EAAA,MAAA;;AAEV,KAAA,CAAA;;AANuBoD,CAAAA,CAAAA,iBAAAA,CAAAA,CAAAA;AAAnB6zB,UAAAA,GAAAA,UAAAA,CAAAA;IADL5zB,yBAAeC,CAAAA,oBAAAA,CAAU2Q,IAAI,EAAE;AAAC,QAAA,MAAA;AAAO,KAAA,EAAE,KAAK,CAAA;AACzCgjB,CAAAA,EAAAA,UAAAA,CAAAA;;ACMN,IAAMC,UAAa,GAAA,EAAA,GAAK,EAAK,GAAA,CAAA,CAAA;AAE7B;AACA,IAAMC,aAAAA,GAAgB;AAKtB,SAASC,UAAWC,CAAAA,YAA0B,EAAEC,WAAoB,EAAY;AAC9E,IAAA,IAAMC,UAAU,EAAE,CAAA;;IAGlB,IAAIC,UAAAA,GAAaN,UAAaG,GAAAA,YAAAA,CAAaI,mBAAmB,CAAA;IAC9D,IAAI7I,KAAAA,GAAQyI,aAAaK,UAAU,CAAA;IACnC,IAAI7I,MAAAA,GAASwI,aAAaM,WAAW,CAAA;AACrC,IAAA,IAAIvyB,WAAckyB,GAAAA,WAAAA,GAAcD,YAAaO,CAAAA,oBAAoB,GAAG,CAAC,CAAA;AAErE,IAAA,IAAK,IAAIC,KAAAA,GAAQ,CAAGA,EAAAA,KAAAA,GAAQzyB,aAAayyB,KAAS,EAAA,CAAA;QAChD,IAAIC,SAAAA,GAAY,IAAIC,UAAAA,CAAWV,YAAahzB,CAAAA,MAAM,EAAEmzB,UAAAA,EAAY,CAAE,CAAA,CAAC,CAAE,CAAA,CAAA;AACrEA,QAAAA,UAAAA,IAAc;AAEd,QAAA,IAAK,IAAIjyB,IAAO,GAAA,CAAA,EAAGA,OAAO8xB,YAAaW,CAAAA,aAAa,EAAEzyB,IAAQ,EAAA,CAAA;AAC5D,YAAA,IAAI0yB,YAAY,IAAIj0B,UAAAA,CAAWqzB,YAAahzB,CAAAA,MAAM,EAAEmzB,UAAYM,EAAAA,SAAAA,CAAAA,CAAAA;AAEhEP,YAAAA,OAAAA,CAAQt1B,IAAI,CAAC;gBAAE/B,IAAM+3B,EAAAA,SAAAA;gBAAWrJ,KAAOA,EAAAA,KAAAA;gBAAOC,MAAQA,EAAAA,MAAAA;AAAO,aAAA,CAAA,CAAA;YAE7D2I,UAAcM,IAAAA,SAAAA,CAAAA;AACdN,YAAAA,UAAAA,IAAc,IAAK,CAACM,YAAY,CAAA,IAAK;AACvC,SAAA;AACAlJ,QAAAA,KAAAA,GAAQ/f,IAAK0X,CAAAA,GAAG,CAAC,GAAA,EAAKqI,KAAQ,GAAA,GAAA,CAAA,CAAA;AAC9BC,QAAAA,MAAAA,GAAShgB,IAAK0X,CAAAA,GAAG,CAAC,GAAA,EAAKsI,MAAS,GAAA,GAAA,CAAA,CAAA;AAClC,KAAA;IAEA,OAAO0I,OAAAA,CAAAA;AACT,CAAA;AAEA;;;;IAKA,SAASW,OAAQh4B,CAAAA,IAAiB,EAAW;IAC3C,IAAIA,IAAAA,CAAK0P,UAAU,IAAI,EAAI,EAAA;;AAEzB,QAAA,IAAMuoB,UAAa,GAAA,IAAIn0B,UAAW9D,CAAAA,IAAAA,EAAM,CAAG,EAAA,EAAA,CAAA,CAAA;QAC3C,IACEi4B,UAAU,CAAC,CAAA,CAAE,KAAK,IAAA,IAClBA,UAAU,CAAC,CAAE,CAAA,KAAK,IAClBA,IAAAA,UAAU,CAAC,CAAA,CAAE,KAAK,IAAA,IAClBA,UAAU,CAAC,CAAE,CAAA,KAAK,IAClBA,IAAAA,UAAU,CAAC,CAAA,CAAE,KAAK,IAAA,IAClBA,UAAU,CAAC,CAAE,CAAA,KAAK,IAClBA,IAAAA,UAAU,CAAC,CAAA,CAAE,KAAK,IAAA,IAClBA,UAAU,CAAC,CAAE,CAAA,KAAK,IAClBA,IAAAA,UAAU,CAAC,CAAA,CAAE,KAAK,IAAA,IAClBA,UAAU,CAAC,CAAE,CAAA,KAAK,IAClBA,IAAAA,UAAU,CAAC,EAAA,CAAG,KAAK,IAAA,IACnBA,UAAU,CAAC,EAAG,CAAA,KAAK,IACnB,EAAA;AACA,YAAA,OAAO,IAAI,CAAA;SACZ;KACF;AAED,IAAA,OAAO,KAAK,CAAA;AACd,CAAA;AAEA,SAASC,eAAAA,CAAgBC,cAAqB,EAAiB;IAC7D,OAAQA,cAAAA;;;;AAIN,QAAA,KAAKC,iDAAkCC,iBAAiB;AACtD,YAAA,OAAOC,yBAAcC,IAAI,CAAA;AAC3B,QAAA,KAAKH,iDAAkCI,kBAAkB;AACvD,YAAA,OAAOF,yBAAcG,IAAI,CAAA;AAC3B,QAAA,KAAKL,iDAAkCM,cAAc;AACnD,YAAA,OAAOJ,yBAAcK,QAAQ,CAAA;AAC/B,QAAA,KAAKP,iDAAkCQ,SAAS;AAC9C,YAAA,OAAON,yBAAcO,QAAQ,CAAA;AAC/B,QAAA,KAAKT,iDAAkCU,6BAA6B;AAClE,YAAA,OAAOR,yBAAcS,UAAU,CAAA;AACjC,QAAA,KAAKX,iDAAkCY,cAAc;AACnD,YAAA,OAAOV,yBAAcW,UAAU,CAAA;AACjC,QAAA,KAAKb,iDAAkCc,oBAAoB;AACzD,YAAA,OAAOZ,yBAAca,UAAU,CAAA;AACjC,QAAA,KAAKf,iDAAkCgB,qBAAqB;AAC1D,YAAA,OAAOd,yBAAce,WAAW,CAAA;AAClC,QAAA,KAAKjB,iDAAkCkB,oBAAoB;AACzD,YAAA,OAAOhB,yBAAciB,UAAU,CAAA;AACjC,QAAA,KAAKnB,iDAAkCoB,qBAAqB;AAC1D,YAAA,OAAOlB,yBAAcmB,WAAW,CAAA;AAClC,QAAA,KAAKrB,iDAAkCsB,iBAAiB;AACtD,YAAA,OAAOpB,yBAAcqB,QAAQ,CAAA;AAC/B,QAAA,KAAKvB,iDAAkCwB,iBAAiB;AACtD,YAAA,OAAOtB,yBAAcuB,QAAQ,CAAA;AAC/B,QAAA,KAAKzB,iDAAkC0B,iBAAiB;AACtD,YAAA,OAAOxB,yBAAcyB,QAAQ,CAAA;AAC/B,QAAA,KAAK3B,iDAAkC4B,iBAAiB;AACtD,YAAA,OAAO1B,yBAAc2B,QAAQ,CAAA;AAC/B,QAAA,KAAK7B,iDAAkC8B,mBAAmB;AACxD,YAAA,OAAO5B,yBAAc6B,UAAU,CAAA;AACjC,QAAA,KAAK/B,iDAAkCgC,mBAAmB;AACxD,YAAA,OAAO9B,yBAAc+B,UAAU,CAAA;AACjC,QAAA;YACE,IAAMC,UAAAA,GAAkBlC,gDAAiC,CAACD,cAAe,CAAA,CAAA;AACzE,YAAA,MAAM,IAAI9qB,KAAAA,CAAM,mDAAC,GAAmDitB,UAAc,CAAA,CAAA;AACtF,KAAA;AACF,CAAA;AACA;;;IAIO,IAAMC,6BAAgC,GAAA;AAC3C;;;;;;;MAQA1lB,KAAAA,EAAAA,SAAAA,KAAAA,CACE1Q,MAAmB,EACnBq2B,aAAqB,EACrBC,WAAoB,EACpBC,eAAgC,EAClB;QADdA,IAAAA,eAAAA,KAAAA,KAAAA,CAAAA,EAAAA,kBAA2B,KAAK,CAAA;QAEhC,IAAI,CAAC1C,QAAQ7zB,MAAS,CAAA,EAAA;YACpB,MAAM,IAAIkJ,MAAM,iFAAmF,CAAA,CAAA;SACpG;;QAGD,IAAM/H,QAAAA,GAAW6H,YAAYe,iBAAiB,CAAA;AAC9C,QAAA,IAAMysB,cAAiB,GAAA,IAAIzmB,QAAS/P,CAAAA,MAAAA,EAAQ,IAAI,EAAKmB,GAAAA,QAAAA,CAAAA,CAAAA;AACrD,QAAA,IAAMs1B,UAAaD,GAAAA,cAAAA,CAAetmB,SAAS,CAAC,GAAG,IAAI,CAAA,CAAA;AACnD,QAAA,IAAMwmB,eAAeD,UAAe,KAAA,UAAA,CAAA;AAEpC,QAAA,IAAME,YAA6B,GAAA;YACjC32B,MAAQA,EAAAA,MAAAA;AACR42B,YAAAA,MAAAA,EAAQJ,cAAetmB,CAAAA,SAAS,CAAC,CAAA,GAAI/O,QAAUu1B,EAAAA,YAAAA,CAAAA;AAC/CG,YAAAA,UAAAA,EAAYL,cAAetmB,CAAAA,SAAS,CAAC,CAAA,GAAI/O,QAAUu1B,EAAAA,YAAAA,CAAAA;AACnDI,YAAAA,QAAAA,EAAUN,cAAetmB,CAAAA,SAAS,CAAC,CAAA,GAAI/O,QAAUu1B,EAAAA,YAAAA,CAAAA;AACjDK,YAAAA,gBAAAA,EAAkBP,cAAetmB,CAAAA,SAAS,CAAC,CAAA,GAAI/O,QAAUu1B,EAAAA,YAAAA,CAAAA;AACzDM,YAAAA,oBAAAA,EAAsBR,cAAetmB,CAAAA,SAAS,CAAC,CAAA,GAAI/O,QAAUu1B,EAAAA,YAAAA,CAAAA;AAC7DrD,YAAAA,UAAAA,EAAYmD,cAAetmB,CAAAA,SAAS,CAAC,CAAA,GAAI/O,QAAUu1B,EAAAA,YAAAA,CAAAA;AACnDpD,YAAAA,WAAAA,EAAakD,cAAetmB,CAAAA,SAAS,CAAC,CAAA,GAAI/O,QAAUu1B,EAAAA,YAAAA,CAAAA;AACpDO,YAAAA,UAAAA,EAAYT,cAAetmB,CAAAA,SAAS,CAAC,CAAA,GAAI/O,QAAUu1B,EAAAA,YAAAA,CAAAA;AACnDQ,YAAAA,qBAAAA,EAAuBV,cAAetmB,CAAAA,SAAS,CAAC,CAAA,GAAI/O,QAAUu1B,EAAAA,YAAAA,CAAAA;AAC9D/C,YAAAA,aAAAA,EAAe6C,cAAetmB,CAAAA,SAAS,CAAC,EAAA,GAAK/O,QAAUu1B,EAAAA,YAAAA,CAAAA;AACvDnD,YAAAA,oBAAAA,EAAsBiD,cAAetmB,CAAAA,SAAS,CAAC,EAAA,GAAK/O,QAAUu1B,EAAAA,YAAAA,CAAAA;AAC9DtD,YAAAA,mBAAAA,EAAqBoD,cAAetmB,CAAAA,SAAS,CAAC,EAAA,GAAK/O,QAAUu1B,EAAAA,YAAAA,CAAAA;;YAE7DS,QAAUrE,EAAAA,aAAAA;AACZ,SAAA,CAAA;;QAGA,IAAI6D,YAAAA,CAAaC,MAAM,KAAK,CAAG,EAAA;YAC7B,MAAM,IAAI1tB,MAAM,6CAA+C,CAAA,CAAA;SAC1D,MAAA;;AAELytB,YAAAA,YAAAA,CAAapD,oBAAoB,GAAG/oB,IAAAA,CAAK0X,GAAG,CAAC,CAAA,EAAGyU,aAAapD,oBAAoB,CAAA,CAAA;SAClF;AAED,QAAA,IAAIoD,aAAarD,WAAW,KAAK,KAAKqD,YAAaM,CAAAA,UAAU,KAAK,CAAG,EAAA;YACnE,MAAM,IAAI/tB,MAAM,sCAAwC,CAAA,CAAA;SACzD;QAED,IAAIytB,YAAAA,CAAaO,qBAAqB,KAAK,CAAG,EAAA;YAC5C,MAAM,IAAIhuB,MAAM,wCAA0C,CAAA,CAAA;SAC3D;QAED,IAAIytB,YAAAA,CAAahD,aAAa,KAAK0C,aAAe,EAAA;AAChD,YAAA,MAAM,IAAIntB,KAAM,CAAA,0BAAA,GAA6BmtB,gBAAgB,cAAiBM,GAAAA,YAAAA,CAAahD,aAAa,CAAE,CAAA;SAC3G;AAED,QAAA,IAAI2C,WAAa,EAAA;AACfK,YAAAA,YAAAA,CAAazD,OAAO,GAAGH,UAAW4D,CAAAA,YAAAA,EAAc,IAAI,CAAA,CAAA;SACrD;AAED,QAAA,IAAIJ,eAAiB,EAAA;AACnBI,YAAAA,YAAAA,CAAaS,YAAY,GAAGrD,eAAgB4C,CAAAA,YAAAA,CAAaI,gBAAgB,CAAA,CAAA;SAC1E;QACD,OAAOJ,YAAAA,CAAAA;AACT,KAAA;AACF,CAAE;;AC7LK,SAASU,cAAex7B,CAAAA,IAAiB,EAAyB;IACvE,IAAMy7B,GAAAA,GAAMlB,8BAA8B1lB,KAAK,CAAC7U,MAAM,CAAG,EAAA,IAAI,EAAE,IAAI,CAAA,CAAA;IACnE,OAAO;AACLq3B,QAAAA,OAAAA,EAASoE,IAAIpE,OAAO;AACpBkE,QAAAA,YAAAA,EAAcE,IAAIF,YAAY;AAC9BpD,QAAAA,cAAAA,EAAgBsD,IAAIP,gBAAgB;AACpCxM,QAAAA,KAAAA,EAAO+M,IAAIjE,UAAU;AACrB7I,QAAAA,MAAAA,EAAQ8M,IAAIhE,WAAW;AACzB,KAAA,CAAA;AACF,CAAC;AAEM,SAASiE,YAAaC,CAAAA,SAAwB,EAAsB;AACzE,IAAA,IAAMC,eAAe,EAAE,CAAA;IACvB,IAAIzD,cAAAA,CAAAA;IACJ,IAAIoD,YAAAA,CAAAA;IACJ,IAAI7M,KAAAA,CAAAA;IACJ,IAAIC,MAAAA,CAAAA;AACJ,IAAA,IAAK,IAAIjjB,CAAI,GAAA,CAAA,EAAGA,IAAIiwB,SAAU/3B,CAAAA,MAAM,EAAE8H,CAAK,EAAA,CAAA;QACzC,IAAM+vB,GAAAA,GAAMlB,6BAA8B1lB,CAAAA,KAAK,CAAC8mB,SAAS,CAACjwB,CAAAA,CAAE,EAAE,CAAA,EAAG,IAAI,EAAE,IAAI,CAAA,CAAA;QAC3EkwB,YAAa75B,CAAAA,IAAI,CAAC05B,GAAAA,CAAIpE,OAAO,CAAA,CAAA;AAC7B,QAAA,IAAI3rB,MAAM,CAAG,EAAA;AACXgjB,YAAAA,KAAAA,GAAQ+M,IAAIjE,UAAU,CAAA;AACtB7I,YAAAA,MAAAA,GAAS8M,IAAIhE,WAAW,CAAA;AACxBU,YAAAA,cAAAA,GAAiBsD,IAAIP,gBAAgB,CAAA;AACrCK,YAAAA,YAAAA,GAAeE,IAAIF,YAAY,CAAA;SAChC;AACH,KAAA;IACA,OAAO;QACLK,YAAAA,EAAAA,YAAAA;QACAL,YAAAA,EAAAA,YAAAA;QACApD,cAAAA,EAAAA,cAAAA;QACAzJ,KAAAA,EAAAA,KAAAA;QACAC,MAAAA,EAAAA,MAAAA;AACF,KAAA,CAAA;AACF;;ICzBMkN,aADN,iBAAA,SAAA,MAAA,EAAA;;;;;;AAEEv8B,IAAAA,MAAAA,CAAAA,IAgCC,GAhCDA,SAAAA,KAAKC,IAAc,EAAEC,eAAgC,EAA6B;;AAChF,QAAA,OAAO,IAAIC,uBAAAA,CAAa,SAACC,OAAAA,EAASC,MAAW,EAAA;AAC3CqC,YAAAA,OAAAA,CAAQgB,GAAG,CACTzD,IAAAA,CAAKu8B,IAAI,CAACpe,GAAG,CAAC,SAAC7d,GAAAA,EAAAA;uBACb,KAAKD,CAAAA,OAAO,CAAcC,GAAAA,EAAK,QAC1BN,CAAAA,EAAAA,EAAAA,IAAAA,EAAAA;oBACHO,IAAM,EAAA,aAAA;;gBAITC,IAAI,CAAC,SAACC,IAAS,EAAA;AACd,gBAAA,IAAM+7B,aAAaL,YAAa17B,CAAAA,IAAAA,CAAAA,CAAAA;AAChC,gBAAA,IAAQ0uB,QAAsCqN,UAAtCrN,CAAAA,KAAAA,EAAOkN,eAA+BG,UAA/BH,CAAAA,YAAAA,EAAcL,eAAiBQ,UAAjBR,CAAAA,YAAAA,CAAAA;AAC7B,gBAAA,IAAMS,SAASJ,YAAY,CAAC,CAAE,CAAA,CAACh4B,MAAM,GAAG,CAAA,CAAA;AACxC,gBAAA,IAAMgB,UAAU,IAAIC,sBAAAA,CAAYrF,gBAAgBsF,MAAM,EAAE4pB,OAAO6M,YAAcS,EAAAA,MAAAA,CAAAA,CAAAA;AAE7E,gBAAA,IAAK,IAAI32B,IAAAA,GAAO,CAAGA,EAAAA,IAAAA,GAAO,GAAGA,IAAQ,EAAA,CAAA;AACnC,oBAAA,IAAMzB,MAASg4B,GAAAA,YAAY,CAACv2B,IAAAA,CAAK,CAACzB,MAAM,CAAA;AAExC,oBAAA,IAAK,IAAIq4B,QAAAA,GAAW,CAAGA,EAAAA,QAAAA,GAAWr4B,QAAQq4B,QAAY,EAAA,CAAA;AACpD,wBAAA,IAAgCL,2BAAAA,GAAAA,YAAY,CAACv2B,IAAAA,CAAK,CAAC42B,QAAS,CAAA,EAApDj8B,MAAwB47B,GAAAA,2BAAAA,CAAxB57B,IAAM0uB,EAAAA,MAAAA,GAAkBkN,2BAAlBlN,CAAAA,KAAAA,EAAOC,SAAWiN,2BAAXjN,CAAAA,MAAAA,CAAAA;wBAErB/pB,OAAQW,CAAAA,cAAc,CAACC,0BAAAA,CAAgBC,SAAS,GAAGJ,MAAMrF,MAAMi8B,EAAAA,QAAAA,EAAU,CAAG,EAAA,CAAA,EAAGvN,MAAOC,EAAAA,MAAAA,CAAAA,CAAAA;AACxF,qBAAA;AACF,iBAAA;gBAEAjvB,OAAQkF,CAAAA,OAAAA,CAAAA,CAAAA;aAET3B,CAAAA,CAAAA,KAAK,CAAC,SAACoD,CAAM,EAAA;gBACZ1G,MAAO0G,CAAAA,CAAAA,CAAAA,CAAAA;AACT,aAAA,CAAA,CAAA;AACJ,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;;AAjC0BnD,CAAAA,CAAAA,iBAAAA,CAAAA,CAAAA;AAAtB24B,aAAAA,GAAAA,UAAAA,CAAAA;IADL14B,yBAAeC,CAAAA,oBAAAA,CAAU84B,OAAO,EAAE,EAAE,CAAA;AAC/BL,CAAAA,EAAAA,aAAAA,CAAAA;;ACDN,IAAaM,SAAN,iBAAA,SAAA,MAAA,EAAA;;;;;;AACL78B,IAAAA,MAAAA,CAAAA,IAuBC,GAvBDA,SAAAA,KAAKC,IAAc,EAAEC,eAAgC,EAA2B;;AAC9E,QAAA,OAAO,IAAIC,uBAAAA,CAAa,SAACC,OAAAA,EAASC,MAAW,EAAA;AAC3C,YAAA,KAAA,CAAKC,OAAO,CAAcL,IAAKM,CAAAA,GAAG,EAAE,QAC/BN,CAAAA,EAAAA,EAAAA,IAAAA,EAAAA;gBACHO,IAAM,EAAA,aAAA;gBAELC,IAAI,CAAC,SAACq8B,GAAQ,EAAA;AACb,gBAAA,IAAML,aAAaP,cAAeY,CAAAA,GAAAA,CAAAA,CAAAA;gBAClC,IAAQ1N,KAAAA,GAAyCqN,UAAzCrN,CAAAA,KAAAA,EAAOC,MAAkCoN,GAAAA,UAAAA,CAAlCpN,QAAQ0I,OAA0B0E,GAAAA,UAAAA,CAA1B1E,OAASkE,EAAAA,YAAAA,GAAiBQ,UAAjBR,CAAAA,YAAAA,CAAAA;gBAChC,IAAMS,MAAAA,GAAS3E,OAAQzzB,CAAAA,MAAM,GAAG,CAAA,CAAA;gBAChC,IAAMgB,OAAAA,GAAU,IAAIypB,oBAAU7uB,CAAAA,eAAAA,CAAgBsF,MAAM,EAAE4pB,KAAAA,EAAOC,QAAQ4M,YAAcS,EAAAA,MAAAA,CAAAA,CAAAA;AAEnF,gBAAA,IAAK,IAAIC,QAAW,GAAA,CAAA,EAAGA,WAAW5E,OAAQzzB,CAAAA,MAAM,EAAEq4B,QAAY,EAAA,CAAA;AAC5D,oBAAA,IAAgC5E,iBAAAA,GAAAA,OAAO,CAAC4E,QAAAA,CAAS,EAAzCvN,MAAAA,GAAwB2I,iBAAxB3I,CAAAA,KAAAA,EAAOC,OAAiB0I,GAAAA,iBAAAA,CAAjB1I,MAAQ3uB,EAAAA,IAAAA,GAASq3B,iBAATr3B,CAAAA,IAAAA,CAAAA;AACvB4E,oBAAAA,OAAAA,CAAQW,cAAc,CAACvF,IAAAA,EAAMi8B,QAAU,EAAA,CAAA,EAAG,GAAGvN,MAAOC,EAAAA,OAAAA,CAAAA,CAAAA;AACtD,iBAAA;gBAEAjvB,OAAQkF,CAAAA,OAAAA,CAAAA,CAAAA;aAET3B,CAAAA,CAAAA,KAAK,CAAC,SAACoD,CAAM,EAAA;gBACZ1G,MAAO0G,CAAAA,CAAAA,CAAAA,CAAAA;AACT,aAAA,CAAA,CAAA;AACJ,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;;EAxB6BnD,iBAyB9B,CAAA,CAAA;AAzBYi5B,SAAAA,GAAAA,UAAAA,CAAAA;IADZh5B,yBAAeC,CAAAA,oBAAAA,CAAUgrB,GAAG,EAAE;AAAC,QAAA,KAAA;AAAM,KAAA,CAAA;AACzB+N,CAAAA,EAAAA,SAAAA,CAAAA;;ICMPE,cADN,iBAAA,SAAA,MAAA,EAAA;;;;;;AAEE/8B,IAAAA,MAAAA,CAAAA,IAmFC,GAnFDA,SAAAA,KAAKC,IAAc,EAAEC,eAAgC,EAAwB;;AAC3E,QAAA,OAAO,IAAIC,uBAAAA,CAAa,SAACC,OAAAA,EAASC,MAAW,EAAA;AAC3C,YAAA,KAAA,CAAKC,OAAO,CAACL,IAAKM,CAAAA,GAAG,EAAE,QAClBN,CAAAA,EAAAA,EAAAA,IAAAA,EAAAA;gBACHO,IAAM,EAAA,MAAA;gBAELC,IAAI,CAAC,SAACu8B,IAAiC,EAAA;AA4BV,gBAAA,IAAA,KAAA,GAAA,SAAA,GAAA,EAAA;oBAC1B,IAAwBC,eAAAA,GAAAA,UAAU,CAACC,GAAAA,CAAI,EAA/B18B,IAAgBy8B,GAAAA,eAAAA,CAAhBz8B,IAAMshB,EAAAA,KAAAA,GAAUmb,eAAVnb,CAAAA,KAAAA,CAAAA;oBAEd,OAAQthB,IAAAA;wBACN,KAAK,SAAA;4BACH28B,kBAAmBC,CAAAA,UAAU,CAACF,GAAK,EAAA,IAAI7wB,mBAAQyV,KAAMnD,CAAAA,CAAC,EAAEmD,KAAAA,CAAMlD,CAAC,CAAA,CAAA,CAAA;4BAC/D,MAAM;wBACR,KAAK,SAAA;AACHue,4BAAAA,kBAAAA,CAAmBE,UAAU,CAACH,GAAK,EAAA,IAAI3wB,kBAAQuV,CAAAA,KAAAA,CAAMnD,CAAC,EAAEmD,KAAMlD,CAAAA,CAAC,EAAEkD,KAAAA,CAAMrD,CAAC,CAAA,CAAA,CAAA;4BACxE,MAAM;wBACR,KAAK,SAAA;AACH0e,4BAAAA,kBAAAA,CAAmBG,UAAU,CAACJ,GAAK,EAAA,IAAIzwB,mBAAQqV,KAAMnD,CAAAA,CAAC,EAAEmD,KAAAA,CAAMlD,CAAC,EAAEkD,KAAAA,CAAMrD,CAAC,EAAEqD,MAAMpD,CAAC,CAAA,CAAA,CAAA;4BACjF,MAAM;wBACR,KAAK,OAAA;AACHye,4BAAAA,kBAAAA,CAAmBI,QAAQ,CAACL,GAAK,EAAA,IAAIrwB,iBAAMiV,KAAMuS,CAAAA,CAAC,EAAEvS,KAAAA,CAAMwS,CAAC,EAAExS,KAAAA,CAAMyS,CAAC,EAAEzS,MAAM0S,CAAC,CAAA,CAAA,CAAA;4BAC7E,MAAM;wBACR,KAAK,OAAA;4BACH2I,kBAAmBK,CAAAA,QAAQ,CAACN,GAAKpb,EAAAA,KAAAA,CAAAA,CAAAA;4BACjC,MAAM;wBACR,KAAK,SAAA;4BACH2b,eAAgBh7B,CAAAA,IAAI;AAElBvC,4BAAAA,eAAAA,CAAgByC,gBAAgB,CAAYmf,KAAAA,CAAAA,CAAOrhB,IAAI,CAAC,SAAC6E,OAAY,EAAA;gCACnE63B,kBAAmBO,CAAAA,UAAU,CAACR,GAAK53B,EAAAA,OAAAA,CAAAA,CAAAA;AACrC,6BAAA,CAAA,CAAA,CAAA;4BAEF,MAAM;AACV,qBAAA;AACF,iBAAA,CAAA;gBAvDA,IAAME,MAAAA,GAAStF,gBAAgBsF,MAAM,CAAA;AACrC,gBAAA,IAAQtE,IAAkD87B,GAAAA,IAAAA,CAAlD97B,IAAMy8B,EAAAA,MAAAA,GAA4CX,IAA5CW,CAAAA,MAAAA,EAAQV,UAAoCD,GAAAA,IAAAA,CAApCC,UAAYW,EAAAA,MAAAA,GAAwBZ,IAAxBY,CAAAA,MAAAA,EAAQC,cAAgBb,IAAhBa,CAAAA,WAAAA,CAAAA;gBAE1C,IAAIljB,QAAAA,CAAAA;gBACJ,OAAQgjB,MAAAA;oBACN,KAAK,KAAA;AACHhjB,wBAAAA,QAAAA,GAAW,IAAIC,sBAAYpV,CAAAA,MAAAA,CAAAA,CAAAA;wBAC3B,MAAM;oBACR,KAAK,cAAA;AACHmV,wBAAAA,QAAAA,GAAW,IAAI4C,8BAAoB/X,CAAAA,MAAAA,CAAAA,CAAAA;wBACnC,MAAM;oBACR,KAAK,OAAA;AACHmV,wBAAAA,QAAAA,GAAW,IAAIoD,wBAAcvY,CAAAA,MAAAA,CAAAA,CAAAA;wBAC7B,MAAM;oBACR,KAAK,aAAA;AACHmV,wBAAAA,QAAAA,GAAW,IAAI4S,6BAAmB/nB,CAAAA,MAAAA,CAAAA,CAAAA;wBAClC,MAAM;oBACR,KAAK,UAAA;;;AAGHmV,wBAAAA,QAAAA,GAAW,IAAImjB,0BAAAA,CAAgBt4B,MAAQu4B,EAAAA,iBAAAA,CAAOC,IAAI,CAAC,UAAA,CAAA,CAAA,CAAA;wBACnD,MAAM;AACV,iBAAA;AACArjB,gBAAAA,QAAAA,CAASzZ,IAAI,GAAGA,IAAAA,CAAAA;AAEhB,gBAAA,IAAMu8B,kBAAkB,IAAItxB,KAAAA,EAAAA,CAAAA;gBAC5B,IAAMgxB,kBAAAA,GAAqBxiB,SAASsiB,UAAU,CAAA;AAC9C,gBAAA,IAAK,IAAIC,GAAOD,IAAAA,UAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA;gBA8BhB,IAAK,IAAI7wB,IAAI,CAAG9H,EAAAA,MAAAA,GAASs5B,OAAOt5B,MAAM,EAAE8H,CAAI9H,GAAAA,MAAAA,EAAQ8H,CAAK,EAAA,CAAA;oBACvD,IAAwBwxB,SAAAA,GAAAA,MAAM,CAACxxB,CAAAA,CAAE,EAAzBlL,KAAgB08B,GAAAA,SAAAA,CAAhB18B,IAAM4gB,EAAAA,KAAAA,GAAU8b,SAAV9b,CAAAA,KAAAA,CAAAA;AACd,oBAAA,IAAIA,SAAS3S,SAAW,EAAA;AACtBguB,wBAAAA,kBAAAA,CAAmBc,WAAW,CAAC/8B,KAAAA,CAAAA,CAAAA;qBAC1B,MAAA;wBACLi8B,kBAAmBc,CAAAA,WAAW,CAAC/8B,KAAM4gB,EAAAA,KAAAA,CAAAA,CAAAA;qBACtC;AACH,iBAAA;gBAEA,IAAK,IAAIob,QAAOW,WAAa,CAAA;AAC3BljB,oBAAAA,QAAQ,CAACuiB,IAAAA,CAAI,GAAGW,WAAW,CAACX,IAAI,CAAA,CAAA;AAClC,iBAAA;AAEA,gBAAA,OAAOx6B,QAAQgB,GAAG,CAAC+5B,eAAiBh9B,CAAAA,CAAAA,IAAI,CAAC,WAAM;oBAC7CL,OAAQua,CAAAA,QAAAA,CAAAA,CAAAA;AACV,iBAAA,CAAA,CAAA;AACF,aAAA,CAAA,CACChX,KAAK,CAACtD,MAAAA,CAAAA,CAAAA;AACX,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;;AApF2BuD,CAAAA,CAAAA,iBAAAA,CAAAA,CAAAA;AAAvBm5B,cAAAA,GAAAA,UAAAA,CAAAA;IADLl5B,yBAAeC,CAAAA,oBAAAA,CAAUo6B,QAAQ,EAAE;AAAC,QAAA,MAAA;AAAO,KAAA,CAAA;AACtCnB,CAAAA,EAAAA,cAAAA,CAAAA;;AClBN,SAAS,iBAAiB,CAAC,MAAM,EAAE,KAAK,EAAE;AAC1C,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC3C,QAAQ,IAAI,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAClC,QAAQ,UAAU,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,IAAI,KAAK,CAAC;AAC/D,QAAQ,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC;AACvC;AACA,QAAQ,IAAI,OAAO,IAAI,UAAU,EAAE,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC9D;AACA,QAAQ,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;AAClE,KAAK;AACL,CAAC;AACM,SAAS,aAAa,CAAC,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE;AACpE,IAAI,IAAI,UAAU,EAAE,iBAAiB,CAAC,WAAW,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;AACzE,IAAI,IAAI,WAAW,EAAE,iBAAiB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;AACjE;AACA,IAAI,OAAO,WAAW,CAAC;AACvB;;ACRO,IAAA,YAAA,iBAAA,WAAA;AAAMoB,IAAAA,SAAAA,YAAAA,CAYQt5B,MAAqB2J,EAAAA,UAAsB,EAAE4B,UAAmB,EAAEmrB,YAA4B,EAAA;AAAzE/sB,QAAAA,IAAAA,uBAAAA,UAAqB,GAAA,CAAA,CAAA;QAAwB+sB,IAAAA,YAAAA,KAAAA,KAAAA,CAAAA,EAAAA,eAAwB,IAAI,CAAA;AAA9F12B,QAAAA,IAAAA,CAAAA,MAAAA,GAAAA,MAAAA,CAAAA;;AAEjB,QAAA,IAAI,CAACu5B,SAAS,GAAG,IAAIxpB,QAAS/P,CAAAA,MAAAA,CAAAA,CAAAA;QAC9B,IAAI,CAACw5B,aAAa,GAAG9C,YAAAA,CAAAA;QACrB,IAAI,CAAC+C,OAAO,GAAG9vB,UAAAA,CAAAA;;AAhBN2vB,IAAAA,IAAAA,MAAAA,GAAAA,YAAAA,CAAAA,SAAAA,CAAAA;IAuBXI,MAAAA,CAAAA,SAIC,GAJDA,SAAAA,SAAY,GAAA;QACV,IAAMzc,KAAAA,GAAQ,IAAI,CAACsc,SAAS,CAACI,QAAQ,CAAC,IAAI,CAACF,OAAO,CAAA,CAAA;QAClD,IAAI,CAACA,OAAO,IAAI,CAAA,CAAA;QAChB,OAAOxc,KAAAA,CAAAA;AACT,KAAA,CAAA;IAEA2c,MAAAA,CAAAA,UAIC,GAJDA,SAAAA,UAAa,GAAA;AACX,QAAA,IAAM3c,KAAQ,GAAA,IAAI,CAACsc,SAAS,CAACM,SAAS,CAAC,IAAI,CAACJ,OAAO,EAAE,IAAI,CAACD,aAAa,CAAA,CAAA;QACvE,IAAI,CAACC,OAAO,IAAI,CAAA,CAAA;QAChB,OAAOxc,KAAAA,CAAAA;AACT,KAAA,CAAA;IAEA6c,MAAAA,CAAAA,UAIC,GAJDA,SAAAA,UAAa,GAAA;AACX,QAAA,IAAM7c,KAAQ,GAAA,IAAI,CAACsc,SAAS,CAACrpB,SAAS,CAAC,IAAI,CAACupB,OAAO,EAAE,IAAI,CAACD,aAAa,CAAA,CAAA;QACvE,IAAI,CAACC,OAAO,IAAI,CAAA,CAAA;QAChB,OAAOxc,KAAAA,CAAAA;AACT,KAAA,CAAA;IAEA8c,MAAAA,CAAAA,SAIC,GAJDA,SAAAA,SAAY,GAAA;AACV,QAAA,IAAM9c,KAAQ,GAAA,IAAI,CAACsc,SAAS,CAACS,QAAQ,CAAC,IAAI,CAACP,OAAO,EAAE,IAAI,CAACD,aAAa,CAAA,CAAA;QACtE,IAAI,CAACC,OAAO,IAAI,CAAA,CAAA;QAChB,OAAOxc,KAAAA,CAAAA;AACT,KAAA,CAAA;AAEAgd,IAAAA,MAAAA,CAAAA,cAIC,GAJDA,SAAAA,cAAAA,CAAeC,GAAW,EAAE;QAC1B,IAAMjd,KAAAA,GAAQ,IAAIyW,UAAAA,CAAW,IAAI,CAAC1zB,MAAM,EAAE,IAAI,CAACy5B,OAAO,EAAES,GAAAA,CAAAA,CAAAA;QACxD,IAAI,CAACT,OAAO,IAAI,CAAIS,GAAAA,GAAAA,CAAAA;QACpB,OAAOjd,KAAAA,CAAAA;AACT,KAAA,CAAA;IAEAkd,MAAAA,CAAAA,WAIC,GAJDA,SAAAA,WAAc,GAAA;AACZ,QAAA,IAAMld,KAAQ,GAAA,IAAI,CAACsc,SAAS,CAACa,UAAU,CAAC,IAAI,CAACX,OAAO,EAAE,IAAI,CAACD,aAAa,CAAA,CAAA;QACxE,IAAI,CAACC,OAAO,IAAI,CAAA,CAAA;QAChB,OAAOxc,KAAAA,CAAAA;AACT,KAAA,CAAA;AAEAod,IAAAA,MAAAA,CAAAA,gBAIC,GAJDA,SAAAA,gBAAAA,CAAiBH,GAAW,EAAE;QAC5B,IAAMjd,KAAAA,GAAQ,IAAI5c,YAAAA,CAAa,IAAI,CAACL,MAAM,EAAE,IAAI,CAACy5B,OAAO,EAAES,GAAAA,CAAAA,CAAAA;QAC1D,IAAI,CAACT,OAAO,IAAI,CAAIS,GAAAA,GAAAA,CAAAA;QACpB,OAAOjd,KAAAA,CAAAA;AACT,KAAA,CAAA;AAEAqd,IAAAA,MAAAA,CAAAA,eAIC,GAJDA,SAAAA,eAAAA,CAAgBJ,GAAW,EAAE;QAC3B,IAAMjd,KAAAA,GAAQ,IAAIjU,WAAAA,CAAY,IAAI,CAAChJ,MAAM,EAAE,IAAI,CAACy5B,OAAO,EAAES,GAAAA,CAAAA,CAAAA;QACzD,IAAI,CAACT,OAAO,IAAI,CAAIS,GAAAA,GAAAA,CAAAA;QACpB,OAAOjd,KAAAA,CAAAA;AACT,KAAA,CAAA;AAEAsd,IAAAA,MAAAA,CAAAA,cAIC,GAJDA,SAAAA,cAAAA,CAAeL,GAAW,EAAE;QAC1B,IAAMjd,KAAAA,GAAQ,IAAItd,UAAAA,CAAW,IAAI,CAACK,MAAM,EAAE,IAAI,CAACy5B,OAAO,EAAES,GAAAA,CAAAA,CAAAA;QACxD,IAAI,CAACT,OAAO,IAAIS,GAAAA,CAAAA;QAChB,OAAOjd,KAAAA,CAAAA;AACT,KAAA,CAAA;IAEAud,MAAAA,CAAAA,UAMC,GANDA,SAAAA,UAAa,GAAA;AACX,QAAA,IAAMC,IAAO,GAAA,IAAI,CAAClB,SAAS,CAACrpB,SAAS,CAAC,IAAI,CAACupB,OAAO,EAAE,IAAI,CAACD,aAAa,CAAA,CAAA;AACtE,QAAA,IAAMkB,KAAQ,GAAA,IAAI,CAACnB,SAAS,CAACrpB,SAAS,CAAC,IAAI,CAACupB,OAAO,GAAG,CAAG,EAAA,IAAI,CAACD,aAAa,CAAA,CAAA;AAC3E,QAAA,IAAMvc,KAAQwd,GAAAA,IAAAA,GAAO,IAAA,CAAA,GAAA,CAAA,GAAK,EAAKC,CAAAA,GAAAA,KAAAA,CAAAA;QAC/B,IAAI,CAACjB,OAAO,IAAI,CAAA,CAAA;QAChB,OAAOxc,KAAAA,CAAAA;AACT,KAAA,CAAA;IAEA0d,MAAAA,CAAAA,OAKC,GALDA,SAAAA,OAAkB,GAAA;QAChB,IAAMC,aAAAA,GAAgB,IAAI,CAAChB,UAAU,EAAA,CAAA;QACrC,IAAMxuB,UAAAA,GAAa,IAAIzL,UAAAA,CAAW,IAAI,CAACK,MAAM,EAAE,IAAI,CAACy5B,OAAO,EAAEmB,aAAAA,CAAAA,CAAAA;QAC7D,IAAI,CAACnB,OAAO,IAAImB,aAAAA,CAAAA;QAChB,OAAO1zB,QAAAA,CAASe,UAAU,CAACmD,UAAAA,CAAAA,CAAAA;AAC7B,KAAA,CAAA;AAEA;;AAEC,MACDyvB,OAAAA,aAEC,GAFDA,SAAAA,aAAAA,CAAc3wB,KAAiB,EAAe;QAC5C,OAAO,IAAI,CAAClK,MAAM,CAACV,KAAK,CAAC,IAAI,CAACm6B,OAAO,CAAA,CAAA;AACvC,KAAA,CAAA;AAEAqB,IAAAA,MAAAA,CAAAA,cAiBC,GAjBDA,SAAAA,cAAAA,CAAe5wB,KAAa,EAAiB;QAC3C,IAAM6wB,SAAAA,GAAY,IAAIzzB,KAAM4C,CAAAA,KAAAA,CAAAA,CAAAA;;AAE5B,QAAA,IAAK,IAAI3C,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAI2C,OAAO3C,CAAK,EAAA,CAAA;AAC9B,YAAA,IAAM2yB,GAAM,GAAA,IAAI,CAACX,SAAS,CAACrpB,SAAS,CAAC,IAAI,CAACupB,OAAO,EAAE,IAAI,CAACD,aAAa,CAAA,CAAA;YACrEuB,SAAS,CAACxzB,EAAE,GAAG2yB,GAAAA,CAAAA;YACf,IAAI,CAACT,OAAO,IAAI,CAAA,CAAA;AAClB,SAAA;AACA,QAAA,IAAMuB,aAA4B,EAAE,CAAA;AAEpC,QAAA,IAAK,IAAIzzB,EAAAA,GAAI,CAAGA,EAAAA,EAAAA,GAAI2C,OAAO3C,EAAK,EAAA,CAAA;YAC9B,IAAM2yB,IAAAA,GAAMa,SAAS,CAACxzB,EAAE,CAAA,CAAA;AACxB,YAAA,IAAMvH,MAAS,GAAA,IAAI,CAACA,MAAM,CAACV,KAAK,CAAC,IAAI,CAACm6B,OAAO,EAAE,IAAI,CAACA,OAAO,GAAGS,IAAAA,CAAAA,CAAAA;YAC9D,IAAI,CAACT,OAAO,IAAIS,IAAAA,CAAAA;AAChBc,YAAAA,UAAAA,CAAWp9B,IAAI,CAACoC,MAAAA,CAAAA,CAAAA;AAClB,SAAA;QACA,OAAOg7B,UAAAA,CAAAA;AACT,KAAA,CAAA;AAEAC,IAAAA,MAAAA,CAAAA,IAGC,GAHDA,SAAAA,IAAAA,CAAKC,KAAa,EAAE;QAClB,IAAI,CAACzB,OAAO,IAAIyB,KAAAA,CAAAA;AAChB,QAAA,OAAO,IAAI,CAAA;AACb,KAAA,CAAA;AAEAC,IAAAA,MAAAA,CAAAA,IAWC,GAXDA,SAAAA,KAAKC,aAAqB,EAAEC,IAAmB,EAAc;AAAjCA,QAAAA,IAAAA,iBAAAA,IAAe,GAAA,IAAA,CAAA;QACzC,IAAM1xB,UAAAA,GAAa,IAAI,CAAC8vB,OAAO,CAAA;AAC/B,QAAA,IAAIluB,UAAa,GAAA,CAAA,CAAA;AACjB,QAAA,MAAO,IAAI,CAACguB,SAAS,CAACI,QAAQ,CAAC,IAAI,CAACF,OAAO,CAAA,KAAM4B,IAAQ9vB,IAAAA,UAAAA,GAAa6vB,aAAe,CAAA;AACnF7vB,YAAAA,UAAAA,EAAAA,CAAAA;AACA,YAAA,IAAI,CAACkuB,OAAO,EAAA,CAAA;AACd,SAAA;AAEA,QAAA,IAAIluB,UAAa6vB,GAAAA,aAAAA,EAAe,IAAI,CAAC3B,OAAO,EAAA,CAAA;AAE5C,QAAA,OAAO,IAAI95B,UAAAA,CAAW,IAAI,CAAC45B,SAAS,CAACv5B,MAAM,EAAE,IAAI,CAACu5B,SAAS,CAAC5vB,UAAU,GAAGA,UAAY4B,EAAAA,UAAAA,CAAAA,CAAAA;AACvF,KAAA,CAAA;AAtIW+tB,IAAAA,aAAAA,CAAAA,YAAAA,EAAAA;;YAmBPn7B,GAAAA,EAAAA,QAAAA;iBAAJ,SAAa,GAAA,GAAA;gBACX,OAAO,IAAI,CAACs7B,OAAO,CAAA;AACrB,aAAA;;;AArBWH,IAAAA,OAAAA,YAAAA,CAAAA;AAuIZ,CAAA,EAAA,CAAA;;AAvIYA,IAAAA,YAAAA,CAKGgC,YAAe,GAAA;QAC3B,CAAG,EAAA,WAAA;QACH,CAAG,EAAA,WAAA;QACH,CAAG,EAAA,YAAA;QACH,CAAG,EAAA,KAAA;AACL,KAAA,CAAA;;;ACfK,IAAMC,UAKT,GAAA,EAAG,CAAA;AAEP;;;;AAIC,IACM,SAASC,OAAQ7/B,CAAAA,IAAY,EAAkB;AACpD,IAAA,OAAO,SAACggB,MAAgB,EAAA;QACtB4f,UAAU,CAAC5/B,KAAK,GAAGggB,MAAAA,CAAAA;AACrB,KAAA,CAAA;AACF;;ACjBO,IAAA,UAAM8f,4BAAN;AAAMA,IAAAA,SAAAA,UAAAA,GAAAA;aACXC,WAAsB,GAAA,CAAA,CAAA;aACtBvrB,OAAkB,GAAA,CAAA,CAAA;aAClBxU,IAAe,GAAA,EAAA,CAAA;aACfU,IAAe,GAAA,EAAA,CAAA;aACfs/B,YAAuB,GAAA,CAAA,CAAA;;AALZF,IAAAA,UAAAA,CAOJtzB,MAkBN,GAlBD,SAAOA,MAAAA,CAAO2C,WAAwB,EAAc;QAClD,IAAMgF,QAAAA,GAAW,IAAIC,QAASjF,CAAAA,WAAAA,CAAAA,CAAAA;AAC9B,QAAA,IAAM8wB,QAAW9rB,GAAAA,QAAAA,CAASI,SAAS,CAAC,GAAG,IAAI,CAAA,CAAA;QAC3C,IAAM2rB,WAAAA,GAAc/rB,QAAS6pB,CAAAA,QAAQ,CAAC,CAAA,CAAA,CAAA;AACtC,QAAA,IAAMmC,OAAUhsB,GAAAA,QAAAA,CAAS+pB,SAAS,CAAC,GAAG,IAAI,CAAA,CAAA;AAC1C,QAAA,IAAMkC,cAAiB,GAAA,IAAIp8B,UAAWmL,CAAAA,WAAAA,EAAa,CAAGgxB,EAAAA,OAAAA,CAAAA,CAAAA;AACtD,QAAA,IAAME,UAAUlsB,QAAS+pB,CAAAA,SAAS,CAAC,CAAA,GAAIiC,SAAS,IAAI,CAAA,CAAA;AACpD,QAAA,IAAMG,cAAiB,GAAA,IAAIt8B,UAAWmL,CAAAA,WAAAA,EAAa,IAAIgxB,OAASE,EAAAA,OAAAA,CAAAA,CAAAA;QAEhE,IAAM3/B,IAAAA,GAAO6K,QAASe,CAAAA,UAAU,CAACg0B,cAAAA,CAAAA,CAAAA;QACjC,IAAMtgC,IAAAA,GAAOuL,QAASe,CAAAA,UAAU,CAAC8zB,cAAAA,CAAAA,CAAAA;AACjC,QAAA,IAAM/rB,SAAS,IAlBNyrB,UAAAA,EAAAA,CAAAA;AAmBTzrB,QAAAA,MAAAA,CAAO0rB,WAAW,GAAGE,QAAAA,CAAAA;AACrB5rB,QAAAA,MAAAA,CAAO3T,IAAI,GAAGA,IAAAA,CAAAA;AACd2T,QAAAA,MAAAA,CAAOrU,IAAI,GAAGA,IAAAA,CAAAA;AACdqU,QAAAA,MAAAA,CAAOG,OAAO,GAAG0rB,WAAAA,CAAAA;AACjB7rB,QAAAA,MAAAA,CAAO2rB,YAAY,GAAGM,cAAAA,CAAe1wB,UAAU,GAAGwwB,cAAAA,CAAexwB,UAAU,GAAG,CAAA,CAAA;QAC9E,OAAOyE,MAAAA,CAAAA;AACT,KAAA,CAAA;AAzBWyrB,IAAAA,aAAAA,CAAAA,UAAAA,EAAAA;;YA2BAS,GAAAA,EAAAA,YAAAA;iBAAX,SAAwB,GAAA,GAAA;AACtB,gBAAA,OAAO,IAAI,CAACR,WAAW,GAAG,IAAI,CAACC,YAAY,CAAA;AAC7C,aAAA;;;AA7BWF,IAAAA,OAAAA,UAAAA,CAAAA;AA8BZ,CAAA,EAAA;;ACrBYU,mBAAN,iBAAA,WAAA;;AACL,IAAA,WAAA,CAAch0B,MA4Kb,GA5KD,SAAcA,OAAOxH,MAAc,EAAEy7B,YAA0B,EAAsB;QACnF,OAAO,IAAIv+B,OAAQ,CAAA,SAACtC,OAAY,EAAA;YAC9B,IAAM8gC,SAAAA,GAAY,IAAI9c,oBAAU5e,CAAAA,MAAAA,CAAAA,CAAAA;YAChC,IAAM27B,cAAAA,GAAiBF,aAAazB,OAAO,EAAA,CAAA;YAC3C,IAAM4B,eAAAA,GAAqC3sB,IAAKc,CAAAA,KAAK,CAAC4rB,cAAAA,CAAAA,CAAAA;;YAGtDC,eAAgBva,CAAAA,MAAM,IAAIqa,SAAUra,CAAAA,MAAM,CAACwa,QAAQ,CAACD,gBAAgBva,MAAM,CAAA,CAAA;AAE1E,YAAA,IAAM7jB,SAASqM,IAAK0nB,CAAAA,IAAI,CAACkK,YAAaj+B,CAAAA,MAAM,GAAG,CAAK,CAAA,GAAA,CAAA,CAAA;YAEpD,IAAMs+B,YAAAA,GAAe,IAAIp8B,YAAAA,CACvB+7B,YAAap8B,CAAAA,MAAM,EACnBu8B,eAAgB7b,CAAAA,SAAS,CAACgc,KAAK,GAAGv+B,MAAAA,EAClC,CAACo+B,eAAAA,CAAgB7b,SAAS,CAACic,GAAG,GAAGJ,gBAAgB7b,SAAS,CAACgc,KAAI,IAAK,CAAA,CAAA,CAAA;YAEtE,IAAMlc,WAAAA,GAAcic,YAAah9B,CAAAA,MAAM,GAAG,CAAA,CAAA;YAC1C,IAAMihB,SAAAA,GAAYkc,sBAAsBH,YAAcjc,EAAAA,WAAAA,CAAAA,CAAAA;AACtD6b,YAAAA,SAAAA,CAAUhY,YAAY,CAAC3D,SAAAA,CAAAA,CAAAA;YACvB,IAAI6b,eAAAA,CAAgBhY,OAAO,EAAE;gBAC3B,IAAMkY,aAAAA,GAAe,IAAIp8B,YAAAA,CACvB+7B,YAAap8B,CAAAA,MAAM,EACnBu8B,eAAgBhY,CAAAA,OAAO,CAACmY,KAAK,GAAGv+B,MAAAA,EAChC,CAACo+B,eAAAA,CAAgBhY,OAAO,CAACoY,GAAG,GAAGJ,gBAAgBhY,OAAO,CAACmY,KAAI,IAAK,CAAA,CAAA,CAAA;gBAElE,IAAMnY,OAAAA,GAAUqY,sBAAsBH,aAAcjc,EAAAA,WAAAA,CAAAA,CAAAA;AACpD6b,gBAAAA,SAAAA,CAAU7X,UAAU,CAACD,OAAAA,CAAAA,CAAAA;aACtB;YACD,IAAIgY,eAAAA,CAAgBM,GAAG,EAAE;gBACvB,IAAMJ,aAAAA,GAAe,IAAIp8B,YAAAA,CACvB+7B,YAAap8B,CAAAA,MAAM,EACnBu8B,eAAgBM,CAAAA,GAAG,CAACH,KAAK,GAAGv+B,MAAAA,EAC5B,CAACo+B,eAAAA,CAAgBM,GAAG,CAACF,GAAG,GAAGJ,gBAAgBM,GAAG,CAACH,KAAI,IAAK,CAAA,CAAA,CAAA;gBAE1DL,SAAU3X,CAAAA,MAAM,CAACoY,qBAAAA,CAAsBL,aAAcjc,EAAAA,WAAAA,CAAAA,CAAAA,CAAAA;aACtD;YACD,IAAI+b,eAAAA,CAAgBQ,GAAG,EAAE;gBACvB,IAAMN,aAAAA,GAAe,IAAIp8B,YAAAA,CACvB+7B,YAAap8B,CAAAA,MAAM,EACnBu8B,eAAgBQ,CAAAA,GAAG,CAACL,KAAK,GAAGv+B,MAAAA,EAC5B,CAACo+B,eAAAA,CAAgBQ,GAAG,CAACJ,GAAG,GAAGJ,gBAAgBQ,GAAG,CAACL,KAAI,IAAK,CAAA,CAAA,CAAA;AAE1DL,gBAAAA,SAAAA,CAAU3X,MAAM,CAACoY,qBAAsBL,CAAAA,aAAAA,EAAcjc,WAAc,CAAA,EAAA,CAAA,CAAA,CAAA;aACpE;YACD,IAAI+b,eAAAA,CAAgBS,GAAG,EAAE;gBACvB,IAAMP,aAAAA,GAAe,IAAIp8B,YAAAA,CACvB+7B,YAAap8B,CAAAA,MAAM,EACnBu8B,eAAgBS,CAAAA,GAAG,CAACN,KAAK,GAAGv+B,MAAAA,EAC5B,CAACo+B,eAAAA,CAAgBS,GAAG,CAACL,GAAG,GAAGJ,gBAAgBS,GAAG,CAACN,KAAI,IAAK,CAAA,CAAA,CAAA;AAE1DL,gBAAAA,SAAAA,CAAU3X,MAAM,CAACoY,qBAAsBL,CAAAA,aAAAA,EAAcjc,WAAc,CAAA,EAAA,CAAA,CAAA,CAAA;aACpE;YACD,IAAI+b,eAAAA,CAAgBU,GAAG,EAAE;gBACvB,IAAMR,aAAAA,GAAe,IAAIp8B,YAAAA,CACvB+7B,YAAap8B,CAAAA,MAAM,EACnBu8B,eAAgBU,CAAAA,GAAG,CAACP,KAAK,GAAGv+B,MAAAA,EAC5B,CAACo+B,eAAAA,CAAgBU,GAAG,CAACN,GAAG,GAAGJ,gBAAgBU,GAAG,CAACP,KAAI,IAAK,CAAA,CAAA,CAAA;AAE1DL,gBAAAA,SAAAA,CAAU3X,MAAM,CAACoY,qBAAsBL,CAAAA,aAAAA,EAAcjc,WAAc,CAAA,EAAA,CAAA,CAAA,CAAA;aACpE;YACD,IAAI+b,eAAAA,CAAgBW,GAAG,EAAE;gBACvB,IAAMT,aAAAA,GAAe,IAAIp8B,YAAAA,CACvB+7B,YAAap8B,CAAAA,MAAM,EACnBu8B,eAAgBW,CAAAA,GAAG,CAACR,KAAK,GAAGv+B,MAAAA,EAC5B,CAACo+B,eAAAA,CAAgBW,GAAG,CAACP,GAAG,GAAGJ,gBAAgBW,GAAG,CAACR,KAAI,IAAK,CAAA,CAAA,CAAA;AAE1DL,gBAAAA,SAAAA,CAAU3X,MAAM,CAACoY,qBAAsBL,CAAAA,aAAAA,EAAcjc,WAAc,CAAA,EAAA,CAAA,CAAA,CAAA;aACpE;YACD,IAAI+b,eAAAA,CAAgBY,GAAG,EAAE;gBACvB,IAAMV,aAAAA,GAAe,IAAIp8B,YAAAA,CACvB+7B,YAAap8B,CAAAA,MAAM,EACnBu8B,eAAgBY,CAAAA,GAAG,CAACT,KAAK,GAAGv+B,MAAAA,EAC5B,CAACo+B,eAAAA,CAAgBY,GAAG,CAACR,GAAG,GAAGJ,gBAAgBY,GAAG,CAACT,KAAI,IAAK,CAAA,CAAA,CAAA;AAE1DL,gBAAAA,SAAAA,CAAU3X,MAAM,CAACoY,qBAAsBL,CAAAA,aAAAA,EAAcjc,WAAc,CAAA,EAAA,CAAA,CAAA,CAAA;aACpE;YACD,IAAI+b,eAAAA,CAAgBa,GAAG,EAAE;gBACvB,IAAMX,aAAAA,GAAe,IAAIp8B,YAAAA,CACvB+7B,YAAap8B,CAAAA,MAAM,EACnBu8B,eAAgBa,CAAAA,GAAG,CAACV,KAAK,GAAGv+B,MAAAA,EAC5B,CAACo+B,eAAAA,CAAgBa,GAAG,CAACT,GAAG,GAAGJ,gBAAgBa,GAAG,CAACV,KAAI,IAAK,CAAA,CAAA,CAAA;AAE1DL,gBAAAA,SAAAA,CAAU3X,MAAM,CAACoY,qBAAsBL,CAAAA,aAAAA,EAAcjc,WAAc,CAAA,EAAA,CAAA,CAAA,CAAA;aACpE;YACD,IAAI+b,eAAAA,CAAgBc,GAAG,EAAE;gBACvB,IAAMZ,aAAAA,GAAe,IAAIp8B,YAAAA,CACvB+7B,YAAap8B,CAAAA,MAAM,EACnBu8B,eAAgBc,CAAAA,GAAG,CAACX,KAAK,GAAGv+B,MAAAA,EAC5B,CAACo+B,eAAAA,CAAgBc,GAAG,CAACV,GAAG,GAAGJ,gBAAgBc,GAAG,CAACX,KAAI,IAAK,CAAA,CAAA,CAAA;AAE1DL,gBAAAA,SAAAA,CAAU3X,MAAM,CAACoY,qBAAsBL,CAAAA,aAAAA,EAAcjc,WAAc,CAAA,EAAA,CAAA,CAAA,CAAA;aACpE;YACD,IAAI+b,eAAAA,CAAgBx0B,MAAM,EAAE;gBAC1B,IAAM00B,cAAAA,GAAe,IAAIp8B,YAAAA,CACvB+7B,YAAap8B,CAAAA,MAAM,EACnBu8B,eAAgBx0B,CAAAA,MAAM,CAAC20B,KAAK,GAAGv+B,MAAAA,EAC/B,CAACo+B,eAAAA,CAAgBx0B,MAAM,CAAC40B,GAAG,GAAGJ,gBAAgBx0B,MAAM,CAAC20B,KAAI,IAAK,CAAA,CAAA,CAAA;gBAEhEL,SAAUnX,CAAAA,SAAS,CAACoY,oBAAAA,CAAqBb,cAAcjc,EAAAA,WAAAA,CAAAA,CAAAA,CAAAA;aACxD;YACD,IAAI+b,eAAAA,CAAgB3b,WAAW,EAAE;gBAC/B,IAAM6b,cAAAA,GAAe,IAAIp8B,YAAAA,CACvB+7B,YAAap8B,CAAAA,MAAM,EACnBu8B,eAAgB3b,CAAAA,WAAW,CAAC8b,KAAK,GAAGv+B,MAAAA,EACpC,CAACo+B,eAAAA,CAAgB3b,WAAW,CAAC+b,GAAG,GAAGJ,gBAAgB3b,WAAW,CAAC8b,KAAI,IAAK,CAAA,CAAA,CAAA;gBAE1EL,SAAU7W,CAAAA,cAAc,CAAC+X,qBAAAA,CAAsBd,cAAcjc,EAAAA,WAAAA,CAAAA,CAAAA,CAAAA;aAC9D;YACD,IAAI+b,eAAAA,CAAgB5b,WAAW,EAAE;gBAC/B,IAAM8b,cAAAA,GAAe,IAAIp8B,YAAAA,CACvB+7B,YAAap8B,CAAAA,MAAM,EACnBu8B,eAAgB5b,CAAAA,WAAW,CAAC+b,KAAK,GAAGv+B,MAAAA,EACpC,CAACo+B,eAAAA,CAAgB5b,WAAW,CAACgc,GAAG,GAAGJ,gBAAgB5b,WAAW,CAAC+b,KAAI,IAAK,CAAA,CAAA,CAAA;gBAE1EL,SAAU/W,CAAAA,cAAc,CAACiY,qBAAAA,CAAsBd,cAAcjc,EAAAA,WAAAA,CAAAA,CAAAA,CAAAA;aAC9D;YACD,IAAI+b,eAAAA,CAAgBiB,WAAW,EAAE;AAC/BjB,gBAAAA,eAAAA,CAAgBiB,WAAW,CAACthC,OAAO,CAAC,SAACuhC,cAAmB,EAAA;AACtD,oBAAA,IAAMzZ,UAAa,GAAA,IAAIC,qBAAWwZ,CAAAA,cAAAA,CAAephC,IAAI,CAAA,CAAA;AACrDohC,oBAAAA,cAAAA,CAAeC,MAAM,CAACxhC,OAAO,CAAC,SAACyhC,SAAc,EAAA;wBAC3C,IAAMC,aAAAA,GAAgB,IAAIv9B,YAAAA,CACxB+7B,YAAap8B,CAAAA,MAAM,EACnB29B,SAAUE,CAAAA,aAAa,CAACnB,KAAK,GAAGv+B,MAAAA,EAChC,CAACw/B,SAAAA,CAAUE,aAAa,CAAClB,GAAG,GAAGgB,UAAUE,aAAa,CAACnB,KAAI,IAAK,CAAA,CAAA,CAAA;wBAElE,IAAMxyB,KAAAA,GAAQ0zB,aAAcn+B,CAAAA,MAAM,GAAG,CAAA,CAAA;wBACrC,IAAMo+B,aAAAA,GAAgBjB,sBAAsBgB,aAAe1zB,EAAAA,KAAAA,CAAAA,CAAAA;wBAE3D,IAAIyzB,SAAAA,CAAU7Z,YAAY,EAAE;4BAC1B,IAAMga,YAAAA,GAAe,IAAIz9B,YAAAA,CACvB+7B,YAAap8B,CAAAA,MAAM,EACnB29B,SAAU7Z,CAAAA,YAAY,CAAC4Y,KAAK,GAAGv+B,MAAAA,EAC/B,CAACw/B,SAAAA,CAAU7Z,YAAY,CAAC6Y,GAAG,GAAGgB,UAAU7Z,YAAY,CAAC4Y,KAAI,IAAK,CAAA,CAAA,CAAA;AAEhE5Y,4BAAe8Y,sBAAsBkB,YAAc5zB,EAAAA,KAAAA,CAAAA,CAAAA;yBACpD;wBAED,IAAIyzB,SAAAA,CAAU5Z,aAAa,EAAE;4BAC3B,IAAMga,aAAAA,GAAgB,IAAI19B,YAAAA,CACxB+7B,YAAap8B,CAAAA,MAAM,EACnB29B,SAAU5Z,CAAAA,aAAa,CAAC2Y,KAAK,GAAGv+B,MAAAA,EAChC,CAACw/B,SAAAA,CAAU5Z,aAAa,CAAC4Y,GAAG,GAAGgB,UAAU5Z,aAAa,CAAC2Y,KAAI,IAAK,CAAA,CAAA,CAAA;AAElE3Y,4BAAgBwZ,sBAAsBQ,aAAe7zB,EAAAA,KAAAA,CAAAA,CAAAA;yBACtD;AACD8Z,wBAAAA,UAAAA,CAAWE,QAAQ,CAACyZ,SAAUphC,CAAAA,MAAM,EAAEshC,aAAAA,CAAAA,CAAAA;AACxC,qBAAA,CAAA,CAAA;AACAxB,oBAAAA,SAAAA,CAAUlY,aAAa,CAACH,UAAAA,CAAAA,CAAAA;AAC1B,iBAAA,CAAA,CAAA;aACD;YACD,IAAIuY,eAAAA,CAAgB7wB,OAAO,EAAE;AAC3B,gBAAA,IAAIA,UAAqC,IAAI,CAAA;AAC7C,gBAAA,IAAI6wB,eAAgB7wB,CAAAA,OAAO,CAAC/P,IAAI,KAAK,CAAG,EAAA;oBACtC+P,OAAU,GAAA,IAAIlL,YACZ47B,YAAap8B,CAAAA,MAAM,EACnBu8B,eAAgB7wB,CAAAA,OAAO,CAACgxB,KAAK,GAAGv+B,MAAAA,EAChC,CAACo+B,eAAAA,CAAgB7wB,OAAO,CAACixB,GAAG,GAAGJ,gBAAgB7wB,OAAO,CAACgxB,KAAI,IAAK,CAAA,CAAA,CAAA;iBAE7D,MAAA;oBACLhxB,OAAU,GAAA,IAAI1C,YACZozB,YAAap8B,CAAAA,MAAM,EACnBu8B,eAAgB7wB,CAAAA,OAAO,CAACgxB,KAAK,GAAGv+B,MAAAA,EAChC,CAACo+B,eAAAA,CAAgB7wB,OAAO,CAACixB,GAAG,GAAGJ,gBAAgB7wB,OAAO,CAACgxB,KAAI,IAAK,CAAA,CAAA,CAAA;iBAEnE;AACDL,gBAAAA,SAAAA,CAAUvZ,UAAU,CAACpX,OAAAA,CAAAA,CAAAA;aACtB;AAED6wB,YAAAA,eAAAA,CAAgByB,SAAS,CAAC9hC,OAAO,CAAC,SAAC+hC,OAAAA,EAAAA;AAAY5B,gBAAAA,OAAAA,SAAAA,CAAUtZ,UAAU,CAACkb,OAAAA,CAAAA,CAAAA;;YACpE5B,SAAUpZ,CAAAA,UAAU,CAAC,KAAK,CAAA,CAAA;YAC1B1nB,OAAQ8gC,CAAAA,SAAAA,CAAAA,CAAAA;AACV,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;;AACD,CAAA,GAAA;AA9KYF,mBAAAA,GAAAA,UAAAA,CAAAA;IADZX,OAAQ,CAAA,MAAA,CAAA;AACIW,CAAAA,EAAAA,mBAAAA,CAAAA,CAAAA;AAgLb,SAASmB,oBAAqBb,CAAAA,YAA0B,EAAEjc,WAAmB,EAAE;IAC7E,IAAMnZ,KAAAA,GAAQ,IAAIC,KAAMkZ,CAAAA,WAAAA,CAAAA,CAAAA;AACxB,IAAA,IAAK,IAAIjZ,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIiZ,aAAajZ,CAAK,EAAA,CAAA;QACpCF,KAAK,CAACE,CAAE,CAAA,GAAG,IAAIS,gBAAAA,CACby0B,YAAY,CAACl1B,CAAI,GAAA,CAAA,CAAE,EACnBk1B,YAAY,CAACl1B,CAAAA,GAAI,IAAI,CAAE,CAAA,EACvBk1B,YAAY,CAACl1B,CAAI,GAAA,CAAA,GAAI,CAAE,CAAA,EACvBk1B,YAAY,CAACl1B,CAAI,GAAA,CAAA,GAAI,CAAE,CAAA,CAAA,CAAA;AAE3B,KAAA;IACA,OAAOF,KAAAA,CAAAA;AACT,CAAA;AAEA,SAASk2B,qBAAsBd,CAAAA,YAA0B,EAAEjc,WAAmB,EAAE;IAC9E,IAAMnZ,KAAAA,GAAQ,IAAIC,KAAMkZ,CAAAA,WAAAA,CAAAA,CAAAA;AACxB,IAAA,IAAK,IAAIjZ,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIiZ,aAAajZ,CAAK,EAAA,CAAA;QACpCF,KAAK,CAACE,CAAE,CAAA,GAAG,IAAIK,kBAAAA,CACb60B,YAAY,CAACl1B,CAAI,GAAA,CAAA,CAAE,EACnBk1B,YAAY,CAACl1B,CAAAA,GAAI,IAAI,CAAE,CAAA,EACvBk1B,YAAY,CAACl1B,CAAI,GAAA,CAAA,GAAI,CAAE,CAAA,EACvBk1B,YAAY,CAACl1B,CAAI,GAAA,CAAA,GAAI,CAAE,CAAA,CAAA,CAAA;AAE3B,KAAA;IACA,OAAOF,KAAAA,CAAAA;AACT,CAAA;AAEA,SAASu1B,qBAAsBH,CAAAA,YAA0B,EAAEjc,WAAmB,EAAE;IAC9E,IAAMnZ,KAAAA,GAAQ,IAAIC,KAAMkZ,CAAAA,WAAAA,CAAAA,CAAAA;AACxB,IAAA,IAAK,IAAIjZ,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIiZ,aAAajZ,CAAK,EAAA,CAAA;QACpCF,KAAK,CAACE,EAAE,GAAG,IAAIG,mBAAQ+0B,YAAY,CAACl1B,IAAI,CAAE,CAAA,EAAEk1B,YAAY,CAACl1B,CAAAA,GAAI,IAAI,CAAE,CAAA,EAAEk1B,YAAY,CAACl1B,CAAAA,GAAI,IAAI,CAAE,CAAA,CAAA,CAAA;AAC9F,KAAA;IACA,OAAOF,KAAAA,CAAAA;AACT,CAAA;AAEA,SAASy1B,qBAAsBL,CAAAA,YAA0B,EAAEjc,WAAmB,EAAE;IAC9E,IAAMnZ,KAAAA,GAAQ,IAAIC,KAAMkZ,CAAAA,WAAAA,CAAAA,CAAAA;AACxB,IAAA,IAAK,IAAIjZ,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIiZ,aAAajZ,CAAK,EAAA,CAAA;AACpCF,QAAAA,KAAK,CAACE,CAAAA,CAAE,GAAG,IAAIC,mBAAQi1B,YAAY,CAACl1B,CAAI,GAAA,CAAA,CAAE,EAAEk1B,YAAY,CAACl1B,CAAAA,GAAI,IAAI,CAAE,CAAA,CAAA,CAAA;AACrE,KAAA;IACA,OAAOF,KAAAA,CAAAA;AACT;;AC9Na62B,wBAAN,iBAAA,WAAA;;AACL,IAAA,gBAAA,CAAO/1B,MAgEN,GAhED,SAAOA,OAAOxH,MAAc,EAAEy7B,YAA0B,EAAsB;AAC5E,QAAA,OAAO,IAAIv+B,OAAAA,CAAQ,SAACtC,OAAAA,EAASC,MAAW,EAAA;YACtC,IAAM2iC,QAAAA,GAAW/B,aAAazB,OAAO,EAAA,CAAA;AACrC,YAAA,IAAM9C,MAAS,GAAA,CAAC,CAACuE,YAAAA,CAAa1C,SAAS,EAAA,CAAA;YACvC,IAAM94B,UAAAA,GAAaw7B,aAAa1C,SAAS,EAAA,CAAA;YACzC,IAAM0E,UAAAA,GAAahC,aAAa1C,SAAS,EAAA,CAAA;YACzC,IAAMzO,SAAAA,GAAYmR,aAAa1C,SAAS,EAAA,CAAA;YACxC,IAAMvO,SAAAA,GAAYiR,aAAa1C,SAAS,EAAA,CAAA;YACxC,IAAM2E,MAAAA,GAASjC,aAAa1C,SAAS,EAAA,CAAA;YACrC,IAAMnP,KAAAA,GAAQ6R,aAAaxC,UAAU,EAAA,CAAA;YACrC,IAAMpP,MAAAA,GAAS4R,aAAaxC,UAAU,EAAA,CAAA;YACtC,IAAM0E,aAAAA,GAAgBlC,aAAa1C,SAAS,EAAA,CAAA;YAE5C,IAAM6E,QAAAA,GAAWnC,aAAa1C,SAAS,EAAA,CAAA;YACvC,IAAMsB,UAAAA,GAAaoB,YAAatB,CAAAA,cAAc,CAACyD,QAAAA,CAAAA,CAAAA;AAE/C,YAAA,IAAMC,YAAY,IAAItU,oBAAAA,CAAUvpB,MAAQ4pB,EAAAA,KAAAA,EAAOC,QAAQ6T,MAAQxG,EAAAA,MAAAA,CAAAA,CAAAA;AAC/D2G,YAAAA,SAAAA,CAAU59B,UAAU,GAAGA,UAAAA,CAAAA;AACvB49B,YAAAA,SAAAA,CAAUJ,UAAU,GAAGA,UAAAA,CAAAA;AACvBI,YAAAA,SAAAA,CAAUvT,SAAS,GAAGA,SAAAA,CAAAA;AACtBuT,YAAAA,SAAAA,CAAUrT,SAAS,GAAGA,SAAAA,CAAAA;AAEtB,YAAA,IAAImT,aAAe,EAAA;AACjB,gBAAA,IAAMG,WAAc,GAAA,IAAI9+B,UAAWq7B,CAAAA,UAAU,CAAC,CAAE,CAAA,CAAA,CAAA;AAChDwD,gBAAAA,SAAAA,CAAUp9B,cAAc,CAACq9B,WAAAA,CAAAA,CAAAA;AACzB,gBAAA,IAAI5G,MAAQ,EAAA;AACV2G,oBAAAA,SAAAA,CAAU9T,eAAe,EAAA,CAAA;AACzB,oBAAA,IAAK,IAAInjB,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIg3B,UAAUh3B,CAAK,EAAA,CAAA;AACjC,wBAAA,IAAMk3B,YAAc,GAAA,IAAI9+B,UAAWq7B,CAAAA,UAAU,CAACzzB,CAAE,CAAA,CAAA,CAAA;wBAChDi3B,SAAUp9B,CAAAA,cAAc,CAACq9B,YAAal3B,EAAAA,CAAAA,CAAAA,CAAAA;AACxC,qBAAA;iBACD;;AAED5G,gBAAAA,MAAAA,CAAOtF,eAAe,CAACqjC,WAAW,CAACP,SAAS,GAAGK,SAAAA,CAAAA;gBAC/CjjC,OAAQijC,CAAAA,SAAAA,CAAAA,CAAAA;aACH,MAAA;AACL,gBAAA,IAAMtwB,IAAO,GAAA,IAAIC,MAAOC,CAAAA,IAAI,CAAC;AAAC4sB,oBAAAA,UAAU,CAAC,CAAE,CAAA;AAAC,iBAAA,CAAA,CAAA;AAC5C,gBAAA,IAAM3sB,MAAM,IAAIC,KAAAA,EAAAA,CAAAA;gBAChBD,GAAIG,CAAAA,MAAM,GAAG,WAAM;AACjBgwB,oBAAAA,SAAAA,CAAU/T,cAAc,CAACpc,GAAAA,CAAAA,CAAAA;AACzB,oBAAA,IAAIswB,cAAiB,GAAA,CAAA,CAAA;AACrB,oBAAA,IAAMC,aAAa,WAAM;AACvBD,wBAAAA,cAAAA,EAAAA,CAAAA;AACA,wBAAA,IAAIA,kBAAkBJ,QAAU,EAAA;4BAC9BhjC,OAAQijC,CAAAA,SAAAA,CAAAA,CAAAA;yBACT;AACH,qBAAA,CAAA;AACAI,oBAAAA,UAAAA,EAAAA,CAAAA;AACA,oBAAA,IAAI/G,MAAQ,EAAA;AAEyB,wBAAA,IAAA,KAAA,GAAA,SAAA,CAAA,EAAA;AACjC,4BAAA,IAAM3pB,IAAO,GAAA,IAAIC,MAAOC,CAAAA,IAAI,CAAC;AAAC4sB,gCAAAA,UAAU,CAACzzB,CAAE,CAAA;AAAC,6BAAA,CAAA,CAAA;AAC5C,4BAAA,IAAM8G,MAAM,IAAIC,KAAAA,EAAAA,CAAAA;4BAChBD,GAAIG,CAAAA,MAAM,GAAG,WAAM;gCACjBgwB,SAAU/T,CAAAA,cAAc,CAACpc,GAAK9G,EAAAA,CAAAA,CAAAA,CAAAA;AAC9Bq3B,gCAAAA,UAAAA,EAAAA,CAAAA;AACF,6BAAA,CAAA;AACAvwB,4BAAAA,GAAAA,CAAIO,GAAG,GAAGC,GAAIC,CAAAA,eAAe,CAACZ,IAAAA,CAAAA,CAAAA;AAChC,yBAAA,CAAA;AATAswB,wBAAAA,SAAAA,CAAU9T,eAAe,EAAA,CAAA;AACzB,wBAAA,IAAK,IAAInjB,CAAAA,GAAI,CAAGA,EAAAA,CAAAA,GAAIg3B,QAAUh3B,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA;qBAS/B;AACH,iBAAA,CAAA;AACA8G,gBAAAA,GAAAA,CAAIO,GAAG,GAAGC,GAAIC,CAAAA,eAAe,CAACZ,IAAAA,CAAAA,CAAAA;aAC/B;AACH,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;;AACD,CAAA,GAAA;AAlEYgwB,wBAAAA,GAAAA,UAAAA,CAAAA;IADZ1C,OAAQ,CAAA,WAAA,CAAA;AACI0C,CAAAA,EAAAA,wBAAAA,CAAAA;;ACLN,SAAS,4BAA4B,GAAG;AAC/C,IAAI,IAAI,OAAO,OAAO,KAAK,WAAW,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,KAAK,CAAC;AAC3E,IAAI,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,KAAK,CAAC;AAC7C,IAAI,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE,OAAO,IAAI,CAAC;AACjD;AACA,IAAI,IAAI;AACR,QAAQ,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;AACtF;AACA,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK,CAAC,OAAO,CAAC,EAAE;AAChB,QAAQ,OAAO,KAAK,CAAC;AACrB,KAAK;AACL;;ACVO,SAAS,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE;AAChD,IAAI,IAAI,4BAA4B,EAAE,EAAE,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC;AACvE,SAAS;AACT,QAAQ,UAAU,GAAG,SAAS,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE;AAC7D,YAAY,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC3B,YAAY,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;AAClC,YAAY,IAAI,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AAC7D,YAAY,IAAI,QAAQ,GAAG,IAAI,WAAW,EAAE,CAAC;AAC7C;AACA,YAAY,IAAI,KAAK,EAAE,iBAAiB,CAAC,QAAQ,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;AACpE;AACA,YAAY,OAAO,QAAQ,CAAC;AAC5B,SAAS,CAAC;AACV,KAAK;AACL;AACA,IAAI,OAAO,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAC7C;;ACfO,IAAA,gBAAMW,4BAAN;AAAMA,IAAAA,SAAAA,gBAAAA,GAAAA,EAAAA;AAAAA,IAAAA,gBAAAA,CAGJC,4BAEN,GAFD,SAAOA,6BAA6Bj2B,aAAqB,EAAEk2B,MAAgB,EAAE;AAC3E,QAAA,IAAI,CAACC,2BAA2B,CAACn2B,aAAAA,CAAc,GAAGk2B,MAAAA,CAAAA;AACpD,KAAA,CAAA;AALWF,IAAAA,gBAAAA,CAOJI,WASN,GATD,SAAOA,YAAYC,YAAqB,EAAEv+B,MAAc,EAAmB;QACzE,OARSk+B,iBAQeM,iBAAiB,CAACD,cAAcv+B,MAAQ/E,CAAAA,CAAAA,IAAI,CAAC,SAAC8X,MAAW,EAAA;AAC7DwrB,YAAAA,IAAAA,sBAAAA,CAAAA;YAAlBxrB,MAAO0rB,CAAAA,QAAQ,GAAGF,CAAAA,sBAAAA,GAAAA,aAAaE,QAAQ,KAAA,IAAA,GAArBF,yBAAyB,IAAI,CAAA;AAC/C,YAAA,IAAQ9c,WAA8B8c,YAA9B9c,CAAAA,QAAAA,EAAU1I,WAAoBwlB,YAApBxlB,CAAAA,QAAAA,EAAU3C,QAAUmoB,YAAVnoB,CAAAA,KAAAA,CAAAA;AAC5B,YAAA,IAAIqL,UAAU1O,MAAOwK,CAAAA,SAAS,CAACkE,QAAQ,CAACoa,QAAQ,CAACpa,QAAAA,CAAAA,CAAAA;AACjD,YAAA,IAAI1I,UAAUhG,MAAOwK,CAAAA,SAAS,CAACxE,QAAQ,CAAC8iB,QAAQ,CAAC9iB,QAAAA,CAAAA,CAAAA;AACjD,YAAA,IAAI3C,OAAOrD,MAAOwK,CAAAA,SAAS,CAACnH,KAAK,CAACylB,QAAQ,CAACzlB,KAAAA,CAAAA,CAAAA;YAC3C,OAAOrD,MAAAA,CAAAA;AACT,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;AAhBWmrB,IAAAA,gBAAAA,CAkBIM,iBAiBd,GAjBD,SAAeA,kBAAkBD,YAAqB,EAAEv+B,MAAc,EAAmB;;QAEvF,IAAM0+B,UAAAA,GAAqBH,aAAaG,UAAU,CAAA;AAClD,QAAA,IAAIA,UAAY,EAAA;YACd,OACE1+B,MAAAA,CAAOtF,eACL;AACCyC,aAAAA,gBAAgB,CAAS;gBAAEwhC,KAAOD,EAAAA,UAAAA;AAAYhH,gBAAAA,GAAAA,EAAK6G,aAAa7G,GAAG;AAAEkH,gBAAAA,OAAAA,EAASL,aAAaK,OAAO;aAClG3jC,CAAAA,CAAAA,IAAI,CAAC,SAAC8X,MAAW,EAAA;gBAChBA,MAAOrX,CAAAA,IAAI,GAAG6iC,YAAAA,CAAa7iC,IAAI,CAAA;gBAC/B,OAAOqX,MAAAA,CAAAA;AACT,aAAA,CAAA,CAAA;SAEC,MAAA;AACL,YAAA,IAAMA,MAAS,GAAA,IAAIsK,iBAAOrd,CAAAA,MAAAA,EAAQu+B,aAAa7iC,IAAI,CAAA,CAAA;YACnD,OAAOwB,OAAAA,CAAQtC,OAAO,CAACmY,MAAAA,CAAAA,CAAAA;SACxB;AACH,KAAA,CAAA;IAnCWmrB,gBAqCJW,CAAAA,gBASN,GATD,SAAOA,gBAAAA,CACLpkC,IAAkB,EAClBuF,MAAc,EACdtF,eAA6C,EAC/B;QADdA,IAAAA,eAAAA,KAAAA,KAAAA,CAAAA,EAAAA,eAAuBsF,GAAAA,MAAAA,CAAOtF,eAAe,CAAA;AAE7C,QAAA,IAAMokC,KAAQ1gC,GAAAA,iBAAAA,CAAO2gC,QAAQ,CAACtkC,KAAKukC,KAAK,CAAA,CAAA;AACzBvkC,QAAAA,IAAAA,qBAAAA,CAAAA;AAAf,QAAA,IAAMuxB,SAASvxB,CAAAA,qBAAAA,GAAAA,KAAKwkC,eAAe,KAAA,IAAA,GAApBxkC,wBAAwB,EAAE,CAAA;QACzC,IAAMykC,QAAAA,GAAW,WAAIJ,KAAS9S,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA;AAC9B,QAAA,OAAO,IAAI,CAACmT,oBAAoB,CAACD,QAAAA,EAAUzkC,MAAMuF,MAAQtF,EAAAA,eAAAA,CAAAA,CAAAA;AAC3D,KAAA,CAAA;IA9CWwjC,gBAgDJkB,CAAAA,cAqBN,GArBD,SAAOA,cAAAA,CACL9iB,KAAiB,EACjBtc,MAAc,EACdtF,eAA6C,EAC/B;QADdA,IAAAA,eAAAA,KAAAA,KAAAA,CAAAA,EAAAA,eAAuBsF,GAAAA,MAAAA,CAAOtF,eAAe,CAAA;;QAE7C,IAAIiM,KAAAA,CAAM04B,OAAO,CAAC/iB,KAAQ,CAAA,EAAA;AACxB,YAAA,OAAOpf,QAAQgB,GAAG,CAACoe,KAAM1D,CAAAA,GAAG,CAAC,SAACne,IAAAA,EAAAA;uBAAS,KAAK2kC,CAAAA,cAAc,CAAC3kC,IAAAA,EAAMuF,MAAQtF,EAAAA,eAAAA,CAAAA,CAAAA;;AAC3E,SAAA,MAAO,IAAI,OAAO4hB,KAAAA,KAAU,QAAYA,IAAAA,KAAAA,IAAS,IAAI,EAAE;AACrD,YAAA,IAAI,IAAI,CAACgjB,QAAQ,CAAChjB,KAAQ,CAAA,EAAA;;AAExB,gBAAA,OAAO,IAAI,CAACuiB,gBAAgB,CAACviB,OAAOtc,MAAQtF,EAAAA,eAAAA,CAAAA,CAAAA;AAC9C,aAAA,MAAO,IAAI,IAAI,CAAC6kC,MAAM,CAACjjB,KAAQ,CAAA,EAAA;;gBAE7B,OAAO5hB,eAAAA,CAAgByC,gBAAgB,CAACmf,KAAAA,CAAAA,CAAAA;aACnC,MAAA;;gBAEL,OAAOpf,OAAAA,CAAQtC,OAAO,CAAC0hB,KAAAA,CAAAA,CAAAA;aACxB;SACI,MAAA;YACL,OAAOpf,OAAAA,CAAQtC,OAAO,CAAC0hB,KAAAA,CAAAA,CAAAA;SACxB;AACH,KAAA,CAAA;IArEW4hB,gBAuEJiB,CAAAA,oBAiCN,GAjCD,SAAOA,oBACLD,CAAAA,QAAa,EACbzkC,IAAiC,EACjCuF,MAAc,EACdtF,eAA6C,EAC7C;QADAA,IAAAA,eAAAA,KAAAA,KAAAA,CAAAA,EAAAA,eAAuBsF,GAAAA,MAAAA,CAAOtF,eAAe,CAAA;;AAE7C,QAAA,IAAMY,WAAW,EAAE,CAAA;QACnB,IAAIb,IAAAA,CAAK+kC,OAAO,EAAE;AAChB,YAAA,IAAK,IAAIC,UAAAA,IAAchlC,IAAK+kC,CAAAA,OAAO,CAAE;AACnC,gBAAA,IAAME,YAAejlC,GAAAA,IAAAA,CAAK+kC,OAAO,CAACC,UAAW,CAAA,CAAA;gBAC7C,IAAK,IAAI74B,IAAI,CAAG2C,EAAAA,KAAAA,GAAQm2B,aAAa5gC,MAAM,EAAE8H,CAAI2C,GAAAA,KAAAA,EAAO3C,CAAK,EAAA,CAAA;oBAC3D,IAAMolB,MAAAA,GAAS0T,YAAY,CAAC94B,CAAE,CAAA,CAAA;oBAC9B,IAAM1D,OAAAA,GAAU,IAAI,CAACy8B,WAAW,CAACT,QAAUO,EAAAA,UAAAA,EAAYzT,QAAQhsB,MAAQtF,EAAAA,eAAAA,CAAAA,CAAAA;AACvEY,oBAAAA,QAAAA,CAAS2B,IAAI,CAACiG,OAAAA,CAAAA,CAAAA;AAChB,iBAAA;AACF,aAAA;SACD;QAED,IAAIzI,IAAAA,CAAKmlC,KAAK,EAAE;AACc,YAAA,IAAA,MAAA,GAAA,IAAA,EAAA,KAAA,GAAA,SAAA,GAAA,EAAA;AAC1B,gBAAA,IAAMtjB,KAAQ7hB,GAAAA,IAAAA,CAAKmlC,KAAK,CAAClI,GAAI,CAAA,CAAA;gBAC7B,IAAMx0B,OAAAA,GAAU,OAAKk8B,cAAc,CAAC9iB,OAAOtc,MAAQ/E,CAAAA,CAAAA,IAAI,CAAC,SAACwf,CAAM,EAAA;oBAC7D,OAAQykB,QAAQ,CAACxH,GAAAA,CAAI,GAAGjd,CAAAA,CAAAA;AAC1B,iBAAA,CAAA,CAAA;AACAnf,gBAAAA,QAAAA,CAAS2B,IAAI,CAACiG,OAAAA,CAAAA,CAAAA;AAChB,aAAA,CAAA;YANA,IAAK,IAAIw0B,GAAOj9B,IAAAA,IAAAA,CAAKmlC,KAAK,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA;SAO3B;AAED,QAAA,OAAO1iC,QAAQgB,GAAG,CAAC5C,QAAUL,CAAAA,CAAAA,IAAI,CAAC,WAAM;YACtC,IAAMmjC,MAAAA,GAAS,MAAKC,2BAA2B,CAACa,SAASW,WAAW,CAACnkC,IAAI,CAAC,CAAA;AAC1E,YAAA,IAAI0iC,MAAQ,EAAA,OAAOA,MAAOc,CAAAA,QAAAA,EAAUzkC,IAAMuF,EAAAA,MAAAA,CAAAA,CAAAA;iBACrC,OAAOk/B,QAAAA,CAAAA;AACd,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;AAxGWhB,IAAAA,gBAAAA,CA0GJyB,WAYN,GAZD,SAAOA,WAAAA,CACLT,QAAa,EACbO,UAAkB,EAClBC,YAA+B,EAC/B1/B,MAAc,EACdtF,eAA6C,EAC7C;QADAA,IAAAA,eAAAA,KAAAA,KAAAA,CAAAA,EAAAA,eAAuBsF,GAAAA,MAAAA,CAAOtF,eAAe,CAAA;;AAE7C,QAAA,OAAOwC,QAAQgB,GAAG,CAACwhC,YAAa9mB,CAAAA,GAAG,CAAC,SAACknB,KAAAA,EAAAA;mBAAU,KAAKV,CAAAA,cAAc,CAACU,KAAAA,EAAO9/B,MAAQtF,EAAAA,eAAAA,CAAAA,CAAAA;YAAmBO,IAAI,CACvG,SAAC8D,MAAW,EAAA;AACHmgC,YAAAA,IAAAA,SAAAA,CAAAA;AAAP,YAAA,OAAOA,CAAAA,SAAAA,GAAAA,QAAAA,EAASO,UAAW,CAAA,CAApBP,MAAAA,SAAwBngC,EAAAA,MAAAA,CAAAA,CAAAA;AACjC,SAAA,CAAA,CAAA;AAEJ,KAAA,CAAA;AAtHWm/B,IAAAA,gBAAAA,CAwHIoB,QAEd,GAFD,SAAeA,QAAAA,CAAShjB,KAAU,EAAyB;QACzD,OAAOA,KAAK,CAAC,OAAA,CAAQ,IAAI3S,SAAAA,CAAAA;AAC3B,KAAA,CAAA;AA1HWu0B,IAAAA,gBAAAA,CA4HIqB,MAEd,GAFD,SAAeA,MAAAA,CAAOjjB,KAAU,EAAsB;QACpD,OAAOA,KAAK,CAAC,OAAA,CAAQ,IAAI3S,SAAAA,CAAAA;AAC3B,KAAA,CAAA;AA9HWu0B,IAAAA,OAAAA,gBAAAA,CAAAA;AA+HZ,CAAA,GAAA;;AA/HYA,IAAAA,gBAAAA,CACJG,8BAA8B,IAAI0B,GAAAA,EAAAA,CAAAA;;;ACApC,IAAA,YAAMC,4BAAN;AAAMA,IAAAA,SAAAA,YAAAA,GAAAA,EAAAA;IAAAA,YACJC,CAAAA,aAWN,GAXD,SAAOA,aAAAA,CAAcC,cAAoC,EAAE3mB,QAA6B,EAAE4mB,QAAgB,EAAE;AAC1G,QAAA,IAAMriB,QAAWoiB,GAAAA,cAAAA,CAAeE,GAAG,CAACD,UAAUriB,QAAQ,CAAA;AACtD,QAAA,IAAIA,QAAYA,IAAAA,QAAAA,CAAShf,MAAM,GAAG,CAAG,EAAA;YACnC,IAAMsc,MAAAA,GAAS7B,QAAS6mB,CAAAA,GAAG,CAACD,QAAAA,CAAAA,CAAAA;AAC5B,YAAA,IAAK,IAAIv5B,CAAI,GAAA,CAAA,EAAGA,IAAIkX,QAAShf,CAAAA,MAAM,EAAE8H,CAAK,EAAA,CAAA;gBACxC,IAAMy5B,OAAAA,GAAUviB,QAAQ,CAAClX,CAAE,CAAA,CAAA;gBAC3B,IAAMmM,MAAAA,GAASwG,QAAS6mB,CAAAA,GAAG,CAACC,OAAAA,CAAAA,CAAAA;AAC5BjlB,gBAAAA,MAAAA,CAAO4C,QAAQ,CAACjL,MAAAA,CAAAA,CAAAA;AAChB,gBAAA,IAAI,CAACktB,aAAa,CAACC,cAAAA,EAAgB3mB,QAAU8mB,EAAAA,OAAAA,CAAAA,CAAAA;AAC/C,aAAA;SACD;AACH,KAAA,CAAA;AAZWL,IAAAA,OAAAA,YAAAA,CAAAA;AAaZ,CAAA;;ICAYM,YAAkE,GAAA;IAC7E/kB,SAAAA,EAAAA,oBAAAA;IACAkM,QAAAA,EAAAA,mBAAAA;IACAlU,WAAAA,EAAAA,sBAAAA;IACAoS,MAAAA,EAAAA,iBAAAA;IACAkB,YAAAA,EAAAA,uBAAAA;IACA0Z,gBAAAA,EAAAA,2BAAAA;IACA/sB,UAAAA,EAAAA,qBAAAA;IACAC,SAAAA,EAAAA,oBAAAA;IACA+sB,MAAAA,EAAAA,iBAAAA;IACAC,UAAAA,EAAAA,qBAAAA;IACAC,cAAAA,EAAAA,yBAAAA;IACAC,YAAAA,EAAAA,uBAAAA;AACF;;ACPOC,uCAAA;UAAKA,qBAAqB,EAAA;IAArBA,qBAAAA,CAAAA,qBAAAA,CACVp0B,WAAAA,CAAAA,CAAAA,GAAAA,OAAAA,CAAAA;IADUo0B,qBAAAA,CAAAA,qBAAAA,CAEVC,gBAAAA,CAAAA,CAAAA,GAAAA,YAAAA,CAAAA;IAFUD,qBAAAA,CAAAA,qBAAAA,CAGV/5B,aAAAA,CAAAA,CAAAA,GAAAA,SAAAA,CAAAA;IAHU+5B,qBAAAA,CAAAA,qBAAAA,CAIV75B,aAAAA,CAAAA,CAAAA,GAAAA,SAAAA,CAAAA;IAJU65B,qBAAAA,CAAAA,qBAAAA,CAKV35B,aAAAA,CAAAA,CAAAA,GAAAA,SAAAA,CAAAA;IALU25B,qBAAAA,CAAAA,qBAAAA,CAMVlkB,gBAAAA,CAAAA,CAAAA,GAAAA,YAAAA,CAAAA;IANUkkB,qBAAAA,CAAAA,qBAAAA,CAOVv5B,WAAAA,CAAAA,CAAAA,GAAAA,OAAAA,CAAAA;IAPUu5B,qBAAAA,CAAAA,qBAAAA,CAQVj6B,WAAAA,CAAAA,CAAAA,GAAAA,OAAAA,CAAAA;IARUi6B,qBAAAA,CAAAA,qBAAAA,CASVxwB,aAAAA,CAAAA,CAAAA,GAAAA,SAAAA,CAAAA;GATUwwB,6BAAAA,KAAAA,6BAAAA,GAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAaCE,4BAAN,iBAAA,WAAA;;AACL,IAAA,oBAAA,CAAct5B,MAiMb,GAjMD,SAAcA,OAAOxH,MAAc,EAAEy7B,YAA0B,EAA0B;QACvF,OAAO,IAAIv+B,OAAQ,CAAA,SAACtC,OAAY,EAAA;YAC9B,IAAMc,IAAAA,GAAO+/B,aAAazB,OAAO,EAAA,CAAA;YACjC,IAAMt9B,IAAAA,GAAO,IAAIsd,wBAActe,CAAAA,IAAAA,CAAAA,CAAAA;YAC/B,IAAMqlC,SAAAA,GAAYtF,aAAaxC,UAAU,EAAA,CAAA;AACzC,YAAA,IAAK,IAAIryB,CAAI,GAAA,CAAA,EAAGA,CAAIm6B,GAAAA,SAAAA,EAAW,EAAEn6B,CAAG,CAAA;AAClC,gBAAA,IAAMo6B,QAAQ,IAAIC,yBAAAA,EAAAA,CAAAA;gBAClBD,KAAM5kB,CAAAA,IAAI,GAAGqf,YAAAA,CAAajC,WAAW,EAAA,CAAA;gBACrCwH,KAAME,CAAAA,YAAY,GAAGzF,YAAAA,CAAazB,OAAO,EAAA,CAAA;gBACzCgH,KAAMG,CAAAA,SAAS,GAAGlyB,IAAKc,CAAAA,KAAK,CAAC0rB,YAAazB,CAAAA,OAAO,IAAIoH,GAAG,CAAA;AACxD1kC,gBAAAA,IAAAA,CAAK2kC,QAAQ,CAACL,KAAAA,CAAAA,CAAAA;AAChB,aAAA;YAEA,IAAMM,gBAAAA,GAAmB7F,aAAaxC,UAAU,EAAA,CAAA;AAEhD,YAAA,IAAK,IAAIryB,EAAI,GAAA,CAAA,EAAGA,EAAI06B,GAAAA,gBAAAA,EAAkB,EAAE16B,EAAG,CAAA;gBACzC,IAAMuU,YAAAA,GAAesgB,aAAazB,OAAO,EAAA,CAAA;gBACzC,IAAMuH,YAAAA,GAAe9F,aAAazB,OAAO,EAAA,CAAA;gBACzC,IAAM9xB,aAAAA,GAAgBo4B,YAAY,CAACiB,YAAa,CAAA,CAAA;gBAChD,IAAMC,QAAAA,GAAW/F,aAAazB,OAAO,EAAA,CAAA;AACrC,gBAAA,IAAIve,QAAAA,KAAAA,CAAAA,CAAAA;gBACJ,IAAMd,aAAAA,GAAgB8gB,aAAa1C,SAAS,EAAA,CAAA;gBAC5C,IAAM0I,OAAAA,GAAUhG,aAAaxC,UAAU,EAAA,CAAA;gBACvC,IAAMyI,SAAAA,GAAYjG,aAAazB,OAAO,EAAA,CAAA;gBAEtC,OAAQ0H,SAAAA;oBACN,KAAK,qBAAA;AAAuB,wBAAA;AAC1BjmB,4BAAAA,KAAAA,GAAQA,SAAS,IAAIkmB,8BAAAA,EAAAA,CAAAA;AACrBlmB,4BAAAA,KAAAA,CAAMd,aAAa,GAAGA,aAAAA,CAAAA;AACtB,4BAAA,IAAK,IAAI9P,CAAI,GAAA,CAAA,EAAGA,CAAI42B,GAAAA,OAAAA,EAAS,EAAE52B,CAAG,CAAA;AAChC,gCAAA,IAAMqR,WAAW,IAAIC,mBAAAA,EAAAA,CAAAA;gCACrBD,QAASE,CAAAA,IAAI,GAAGqf,YAAAA,CAAajC,WAAW,EAAA,CAAA;gCACxCtd,QAASI,CAAAA,KAAK,GAAGmf,YAAAA,CAAajC,WAAW,EAAA,CAAA;gCACzCtd,QAASG,CAAAA,SAAS,GAAGof,YAAAA,CAAajC,WAAW,EAAA,CAAA;gCAC7Ctd,QAASK,CAAAA,UAAU,GAAGkf,YAAAA,CAAajC,WAAW,EAAA,CAAA;AACxB/d,gCAAAA,KAAAA,CAAOe,MAAM,CAACN,QAAAA,CAAAA,CAAAA;AACtC,6BAAA;4BACA,MAAM;AACR,yBAAA;oBACA,KAAK,qBAAA;AAAuB,wBAAA;AAC1BT,4BAAAA,KAAAA,GAAQA,SAAS,IAAImmB,8BAAAA,EAAAA,CAAAA;AACrBnmB,4BAAAA,KAAAA,CAAMd,aAAa,GAAGA,aAAAA,CAAAA;AACtB,4BAAA,IAAK,IAAI9P,EAAI,GAAA,CAAA,EAAGA,EAAI42B,GAAAA,OAAAA,EAAS,EAAE52B,EAAG,CAAA;AAChC,gCAAA,IAAMqR,YAAW,IAAIC,mBAAAA,EAAAA,CAAAA;gCACrBD,SAASE,CAAAA,IAAI,GAAGqf,YAAAA,CAAajC,WAAW,EAAA,CAAA;gCACxC,IAAMD,GAAAA,GAAMkC,aAAaxC,UAAU,EAAA,CAAA;AACnC/c,gCAAAA,SAAAA,CAASI,KAAK,GAAG3V,KAAAA,CAAM1H,IAAI,CAACw8B,YAAAA,CAAa/B,gBAAgB,CAACH,GAAAA,CAAAA,CAAAA,CAAAA;AAC1Drd,gCAAAA,SAAAA,CAASG,SAAS,GAAG1V,KAAAA,CAAM1H,IAAI,CAACw8B,YAAAA,CAAa/B,gBAAgB,CAACH,GAAAA,CAAAA,CAAAA,CAAAA;AAC9Drd,gCAAAA,SAAAA,CAASK,UAAU,GAAG5V,KAAAA,CAAM1H,IAAI,CAACw8B,YAAAA,CAAa/B,gBAAgB,CAACH,GAAAA,CAAAA,CAAAA,CAAAA;AACzC9d,gCAAAA,KAAAA,CAAOe,MAAM,CAACN,SAAAA,CAAAA,CAAAA;AACtC,6BAAA;4BACA,MAAM;AACR,yBAAA;oBACA,KAAK,0BAAA;AAA4B,wBAAA;AAC/BT,4BAAAA,KAAAA,GAAQA,SAAS,IAAIkB,mCAAAA,EAAAA,CAAAA;AACrBlB,4BAAAA,KAAAA,CAAMd,aAAa,GAAGA,aAAAA,CAAAA;AACtB,4BAAA,IAAK,IAAI9P,EAAI,GAAA,CAAA,EAAGA,EAAI42B,GAAAA,OAAAA,EAAS,EAAE52B,EAAG,CAAA;AAChC,gCAAA,IAAMqR,YAAW,IAAIC,mBAAAA,EAAAA,CAAAA;gCACrBD,SAASE,CAAAA,IAAI,GAAGqf,YAAAA,CAAajC,WAAW,EAAA,CAAA;gCACxC,IAAMD,IAAAA,GAAMkC,aAAaxC,UAAU,EAAA,CAAA;AACnC/c,gCAAAA,SAAAA,CAASI,KAAK,GAAGmf,YAAa/B,CAAAA,gBAAgB,CAACH,IAAAA,CAAAA,CAAAA;AAC/Crd,gCAAAA,SAAAA,CAASG,SAAS,GAAG1V,KAAAA,CAAM1H,IAAI,CAACw8B,YAAAA,CAAa/B,gBAAgB,CAACH,IAAAA,CAAAA,CAAAA,CAAAA;AAC9Drd,gCAAAA,SAAAA,CAASK,UAAU,GAAG5V,KAAAA,CAAM1H,IAAI,CAACw8B,YAAAA,CAAa/B,gBAAgB,CAACH,IAAAA,CAAAA,CAAAA,CAAAA;AACpC9d,gCAAAA,KAAAA,CAAOe,MAAM,CAACN,SAAAA,CAAAA,CAAAA;AAC3C,6BAAA;4BACA,MAAM;AACR,yBAAA;oBACA,KAAK,uBAAA;AAAyB,wBAAA;AAC5BT,4BAAAA,KAAAA,GAAQA,SAAS,IAAIomB,gCAAAA,EAAAA,CAAAA;AACrBpmB,4BAAAA,KAAAA,CAAMd,aAAa,GAAGA,aAAAA,CAAAA;AACtB,4BAAA,IAAK,IAAI9P,EAAI,GAAA,CAAA,EAAGA,EAAI42B,GAAAA,OAAAA,EAAS,EAAE52B,EAAG,CAAA;AAChC,gCAAA,IAAMqR,YAAW,IAAIC,mBAAAA,EAAAA,CAAAA;gCACrBD,SAASE,CAAAA,IAAI,GAAGqf,YAAAA,CAAajC,WAAW,EAAA,CAAA;gCACxCtd,SAASI,CAAAA,KAAK,GAAG,IAAIzV,kBAAAA,CAAQ40B,aAAajC,WAAW,EAAA,EAAIiC,aAAajC,WAAW,EAAA,CAAA,CAAA;gCACjFtd,SAASG,CAAAA,SAAS,GAAG,IAAIxV,kBAAAA,CAAQ40B,aAAajC,WAAW,EAAA,EAAIiC,aAAajC,WAAW,EAAA,CAAA,CAAA;gCACrFtd,SAASK,CAAAA,UAAU,GAAG,IAAI1V,kBAAAA,CAAQ40B,aAAajC,WAAW,EAAA,EAAIiC,aAAajC,WAAW,EAAA,CAAA,CAAA;AAC9D/d,gCAAAA,KAAAA,CAAOe,MAAM,CAACN,SAAAA,CAAAA,CAAAA;AACxC,6BAAA;4BACA,MAAM;AACR,yBAAA;oBACA,KAAK,uBAAA;AAAyB,wBAAA;AAC5BT,4BAAAA,KAAAA,GAAQA,SAAS,IAAIO,gCAAAA,EAAAA,CAAAA;AACrBP,4BAAAA,KAAAA,CAAMd,aAAa,GAAGA,aAAAA,CAAAA;AACtB,4BAAA,IAAK,IAAI9P,EAAI,GAAA,CAAA,EAAGA,EAAI42B,GAAAA,OAAAA,EAAS,EAAE52B,EAAG,CAAA;AAChC,gCAAA,IAAMqR,YAAW,IAAIC,mBAAAA,EAAAA,CAAAA;gCACrBD,SAASE,CAAAA,IAAI,GAAGqf,YAAAA,CAAajC,WAAW,EAAA,CAAA;gCACxCtd,SAASI,CAAAA,KAAK,GAAG,IAAIvV,kBACnB00B,CAAAA,YAAAA,CAAajC,WAAW,EAAA,EACxBiC,YAAajC,CAAAA,WAAW,EACxBiC,EAAAA,YAAAA,CAAajC,WAAW,EAAA,CAAA,CAAA;gCAE1Btd,SAASG,CAAAA,SAAS,GAAG,IAAItV,kBACvB00B,CAAAA,YAAAA,CAAajC,WAAW,EAAA,EACxBiC,YAAajC,CAAAA,WAAW,EACxBiC,EAAAA,YAAAA,CAAajC,WAAW,EAAA,CAAA,CAAA;gCAE1Btd,SAASK,CAAAA,UAAU,GAAG,IAAIxV,kBACxB00B,CAAAA,YAAAA,CAAajC,WAAW,EAAA,EACxBiC,YAAajC,CAAAA,WAAW,EACxBiC,EAAAA,YAAAA,CAAajC,WAAW,EAAA,CAAA,CAAA;AAEF/d,gCAAAA,KAAAA,CAAOe,MAAM,CAACN,SAAAA,CAAAA,CAAAA;AACxC,6BAAA;4BACA,MAAM;AACR,yBAAA;oBACA,KAAK,uBAAA;AAAyB,wBAAA;AAC5BT,4BAAAA,KAAAA,GAAQA,SAAS,IAAIqmB,gCAAAA,EAAAA,CAAAA;AACrBrmB,4BAAAA,KAAAA,CAAMd,aAAa,GAAGA,aAAAA,CAAAA;AACtB,4BAAA,IAAMuB,YAAW,IAAIC,mBAAAA,EAAAA,CAAAA;4BACrBD,SAASE,CAAAA,IAAI,GAAGqf,YAAAA,CAAajC,WAAW,EAAA,CAAA;AACxCtd,4BAAAA,SAAAA,CAASI,KAAK,GAAG,IAAIrV,kBAAAA,CACnBw0B,aAAajC,WAAW,EAAA,EACxBiC,YAAajC,CAAAA,WAAW,EACxBiC,EAAAA,YAAAA,CAAajC,WAAW,EAAA,EACxBiC,aAAajC,WAAW,EAAA,CAAA,CAAA;AAE1Btd,4BAAAA,SAAAA,CAASG,SAAS,GAAG,IAAIpV,kBAAAA,CACvBw0B,aAAajC,WAAW,EAAA,EACxBiC,YAAajC,CAAAA,WAAW,EACxBiC,EAAAA,YAAAA,CAAajC,WAAW,EAAA,EACxBiC,aAAajC,WAAW,EAAA,CAAA,CAAA;AAE1Btd,4BAAAA,SAAAA,CAASK,UAAU,GAAG,IAAItV,kBAAAA,CACxBw0B,aAAajC,WAAW,EAAA,EACxBiC,YAAajC,CAAAA,WAAW,EACxBiC,EAAAA,YAAAA,CAAajC,WAAW,EAAA,EACxBiC,aAAajC,WAAW,EAAA,CAAA,CAAA;AAEF/d,4BAAAA,KAAAA,CAAOe,MAAM,CAACN,SAAAA,CAAAA,CAAAA;4BACtC,MAAM;AACR,yBAAA;oBACA,KAAK,qBAAA;AAAuB,wBAAA;AAC1BT,4BAAAA,KAAAA,GAAQA,SAAS,IAAIsmB,8BAAAA,EAAAA,CAAAA;AACrBtmB,4BAAAA,KAAAA,CAAMd,aAAa,GAAGA,aAAAA,CAAAA;AACtB,4BAAA,IAAK,IAAI9P,EAAI,GAAA,CAAA,EAAGA,EAAI42B,GAAAA,OAAAA,EAAS,EAAE52B,EAAG,CAAA;AAChC,gCAAA,IAAMqR,YAAW,IAAIC,mBAAAA,EAAAA,CAAAA;gCACrBD,SAASE,CAAAA,IAAI,GAAGqf,YAAAA,CAAajC,WAAW,EAAA,CAAA;AACxCtd,gCAAAA,SAAAA,CAASI,KAAK,GAAG,IAAIjV,gBAAAA,CACnBo0B,aAAajC,WAAW,EAAA,EACxBiC,YAAajC,CAAAA,WAAW,EACxBiC,EAAAA,YAAAA,CAAajC,WAAW,EAAA,EACxBiC,aAAajC,WAAW,EAAA,CAAA,CAAA;AAE1Btd,gCAAAA,SAAAA,CAASG,SAAS,GAAG,IAAIpV,kBAAAA,CACvBw0B,aAAajC,WAAW,EAAA,EACxBiC,YAAajC,CAAAA,WAAW,EACxBiC,EAAAA,YAAAA,CAAajC,WAAW,EAAA,EACxBiC,aAAajC,WAAW,EAAA,CAAA,CAAA;AAE1Btd,gCAAAA,SAAAA,CAASK,UAAU,GAAG,IAAItV,kBAAAA,CACxBw0B,aAAajC,WAAW,EAAA,EACxBiC,YAAajC,CAAAA,WAAW,EACxBiC,EAAAA,YAAAA,CAAajC,WAAW,EAAA,EACxBiC,aAAajC,WAAW,EAAA,CAAA,CAAA;AAEJ/d,gCAAAA,KAAAA,CAAOe,MAAM,CAACN,SAAAA,CAAAA,CAAAA;AACtC,6BAAA;4BACA,MAAM;AACR,yBAAA;oBACA,KAAK,0BAAA;AAA4B,wBAAA;AAC/BT,4BAAAA,KAAAA,GAAQA,SAAS,IAAIgB,mCAAAA,EAAAA,CAAAA;AACrBhB,4BAAAA,KAAAA,CAAMd,aAAa,GAAGA,aAAAA,CAAAA;AACtB,4BAAA,IAAK,IAAI9P,EAAI,GAAA,CAAA,EAAGA,EAAI42B,GAAAA,OAAAA,EAAS,EAAE52B,EAAG,CAAA;AAChC,gCAAA,IAAMqR,YAAW,IAAIC,mBAAAA,EAAAA,CAAAA;gCACrBD,SAASE,CAAAA,IAAI,GAAGqf,YAAAA,CAAajC,WAAW,EAAA,CAAA;AACxCtd,gCAAAA,SAAAA,CAASI,KAAK,GAAG,IAAII,qBAAAA,CACnB+e,aAAajC,WAAW,EAAA,EACxBiC,YAAajC,CAAAA,WAAW,EACxBiC,EAAAA,YAAAA,CAAajC,WAAW,EAAA,EACxBiC,aAAajC,WAAW,EAAA,CAAA,CAAA;AAE1Btd,gCAAAA,SAAAA,CAASG,SAAS,GAAG,IAAIpV,kBAAAA,CACvBw0B,aAAajC,WAAW,EAAA,EACxBiC,YAAajC,CAAAA,WAAW,EACxBiC,EAAAA,YAAAA,CAAajC,WAAW,EAAA,EACxBiC,aAAajC,WAAW,EAAA,CAAA,CAAA;AAE1Btd,gCAAAA,SAAAA,CAASK,UAAU,GAAG,IAAItV,kBAAAA,CACxBw0B,aAAajC,WAAW,EAAA,EACxBiC,YAAajC,CAAAA,WAAW,EACxBiC,EAAAA,YAAAA,CAAajC,WAAW,EAAA,EACxBiC,aAAajC,WAAW,EAAA,CAAA,CAAA;AAEC/d,gCAAAA,KAAAA,CAAOe,MAAM,CAACN,SAAAA,CAAAA,CAAAA;AAC3C,6BAAA;4BACA,MAAM;AACR,yBAAA;AACF,iBAAA;AACAxf,gBAAAA,IAAAA,CAAKif,eAAe,CAACR,YAAcjT,EAAAA,aAAAA,EAAes5B,QAAU/lB,EAAAA,KAAAA,CAAAA,CAAAA;AAC9D,aAAA;YAEA7gB,OAAQ8B,CAAAA,IAAAA,CAAAA,CAAAA;AACV,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;;AACD,CAAA,GAAA;AAnMYokC,4BAAAA,GAAAA,UAAAA,CAAAA;IADZjG,OAAQ,CAAA,eAAA,CAAA;AACIiG,CAAAA,EAAAA,4BAAAA,CAAAA;;ACjCN,IAAA,kBAAA,iBAAA,WAAA;AAAMkB,IAAAA,SAAAA,kBAAAA,CAMiBC,YAAsC/jB,EAAAA,KAAAA,EAAAA;AAAtC+jB,QAAAA,IAAAA,CAAAA,YAAAA,GAAAA,YAAAA,CAAAA;AAAsC/jB,QAAAA,IAAAA,CAAAA,KAAAA,GAAAA,KAAAA,CAAAA;AALlEgkB,QAAAA,IAAAA,CAAAA,SAAAA,GAAiC,IAAInC,GAAAA,EAAAA,CAAAA;AACrCoC,QAAAA,IAAAA,CAAAA,UAAAA,GAAqC,IAAIpC,GAAAA,EAAAA,CAAAA;AACzCqC,QAAAA,IAAAA,CAAAA,MAAAA,GAA2B,IAAIrC,GAAAA,EAAAA,CAAAA;AAC/BsC,QAAAA,IAAAA,CAAAA,eAAAA,GAAwC,IAAItC,GAAAA,EAAAA,CAAAA;AAC5CuC,QAAAA,IAAAA,CAAAA,OAAAA,GAAoB,EAAE,CAAA;;AALXN,IAAAA,IAAAA,MAAAA,GAAAA,kBAAAA,CAAAA,SAAAA,CAAAA;IAQXpW,MAAAA,CAAAA,OAMC,GANDA,SAAAA,OAAU,GAAA;QACR,IAAI,CAACsW,SAAS,CAACK,KAAK,EAAA,CAAA;QACpB,IAAI,CAACJ,UAAU,CAACI,KAAK,EAAA,CAAA;QACrB,IAAI,CAACH,MAAM,CAACG,KAAK,EAAA,CAAA;QACjB,IAAI,CAACF,eAAe,CAACE,KAAK,EAAA,CAAA;AAC1B,QAAA,IAAI,CAACD,OAAO,CAACxjC,MAAM,GAAG,CAAA,CAAA;AACxB,KAAA,CAAA;AAdWkjC,IAAAA,OAAAA,kBAAAA,CAAAA;AAeZ,CAAA,EAAA;;ACZD,iBACO,IAAMld,WAAN,iBAAA,WAAA;aAAMA,WAwBiBrc,CAAAA,OAAAA,EAAAA;;AAAAA,QAAAA,IAAAA,CAAAA,OAAAA,GAAAA,OAAAA,CAAAA;QAC1B,IAAI,CAAC+5B,OAAO,GAAG,IAAI,CAAC/5B,OAAO,CAACyV,KAAK,CAACle,MAAM,CAAA;QACxC,IAAI,CAACyiC,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAA,CAAA;QACzD,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACD,IAAI,CAAC,IAAI,CAAA,CAAA;QACvD,IAAI,CAACE,qBAAqB,GAAG,IAAI,CAACA,qBAAqB,CAACF,IAAI,CAAC,IAAI,CAAA,CAAA;AACjE,QAAA,IAAI,CAACx/B,OAAO,GAAG,IAAIhG,OAAe,CAAA,SAACtC,SAASC,MAAW,EAAA;AACrD,YAAA,KAAA,CAAKgoC,OAAO,GAAGhoC,MAAAA,CAAAA;AACf,YAAA,KAAA,CAAKioC,QAAQ,GAAGloC,OAAAA,CAAAA;AAClB,SAAA,CAAA,CAAA;;AAhCSkqB,IAAAA,IAAAA,MAAAA,GAAAA,WAAAA,CAAAA,SAAAA,CAAAA;AAmCX,iCACAiX,MAAAA,CAAAA,KAOC,GAPDA,SAAAA,KAAQ,GAAA;AACN,QAAA,IAAI,CAACgH,cAAc,EAChB9nC,CAAAA,IAAI,CAAC,IAAI,CAACwnC,iBAAiB,CAC3BxnC,CAAAA,IAAI,CAAC,IAAI,CAAC0nC,gBAAgB,CAAA,CAC1B1nC,IAAI,CAAC,IAAI,CAAC2nC,qBAAqB,CAAA,CAC/B3nC,IAAI,CAAC,IAAI,CAAC6nC,QAAQ,CAClB3kC,CAAAA,KAAK,CAAC,IAAI,CAAC0kC,OAAO,CAAA,CAAA;AACvB,KAAA,CAAA;IAEA,MAAQE,CAAAA,cAmBP,GAnBD,SAAQA,cAAoC,GAAA;AAC1C,QAAA,IAAM7C,iBAAiB,IAAI,CAACz3B,OAAO,CAACw5B,YAAY,CAAC1oB,QAAQ,CAAA;AACzD,QAAA,IAAM8oB,eAAkB,GAAA,IAAI,CAAC55B,OAAO,CAAC45B,eAAe,CAAA;AACpD,QAAA,IAAMW,WAAc,GAAA,IAAI,CAACv6B,OAAO,CAACy5B,SAAS,CAAA;AAC1C,QAAA,IAAMI,OAAU,GAAA,IAAI,CAAC75B,OAAO,CAAC65B,OAAO,CAAA;QACpC,IAAMtiC,MAAAA,GAAS,IAAI,CAACwiC,OAAO,CAAA;AAC3B,QAAA,IAAMlnC,QAAW4kC,GAAAA,cAAAA,CAAetnB,GAAG,CAAC,SAAC2lB,YAAiB,EAAA;AACpD8D,YAAAA,eAAAA,CAAgB3uB,GAAG,CAAC6qB,YAAa0E,CAAAA,EAAE,EAAE1E,YAAAA,CAAAA,CAAAA;;YAErC,IAAI,CAACA,aAAanjB,MAAM,EAAEknB,QAAQrlC,IAAI,CAACshC,aAAa0E,EAAE,CAAA,CAAA;YACtD,OAAO/E,gBAAAA,CAAiBI,WAAW,CAACC,YAAcv+B,EAAAA,MAAAA,CAAAA,CAAAA;AACpD,SAAA,CAAA,CAAA;AAEA,QAAA,OAAO9C,QAAQgB,GAAG,CAAC5C,UAAUL,IAAI,CAAC,SAACse,QAAa,EAAA;YAC9C,IAAK,IAAI3S,IAAI,CAAGqqB,EAAAA,CAAAA,GAAI1X,SAASza,MAAM,EAAE8H,CAAIqqB,GAAAA,CAAAA,EAAGrqB,CAAK,EAAA,CAAA;gBAC/Co8B,WAAYtvB,CAAAA,GAAG,CAACwsB,cAAc,CAACt5B,CAAAA,CAAE,CAACq8B,EAAE,EAAE1pB,QAAQ,CAAC3S,CAAE,CAAA,CAAA,CAAA;AACnD,aAAA;YACA,OAAO2S,QAAAA,CAAAA;AACT,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;IAEA,MAAQkpB,CAAAA,iBASP,GATD,SAAQA,iBAAoB,GAAA;AAC1B,QAAA,IAAuD,aAAA,GAAA,IAAI,CAACh6B,OAAO,EAA3D45B,eAA+C,GAAA,aAAA,CAA/CA,eAAiBH,EAAAA,SAAAA,GAA8B,cAA9BA,SAAWhkB,EAAAA,KAAAA,GAAmB,aAAnBA,CAAAA,KAAAA,EAAOokB,UAAY,aAAZA,CAAAA,OAAAA,CAAAA;AAC3C,QAAA,IAAA,IAAA,SAAA,GAAA,oCAAA,CAAqBA,OAAS,CAAA,EAAA,KAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,EAAA,EAAA,IAAA,EAAA;AAAnBY,YAAAA,IAAAA,MAAAA,GAAAA,KAAAA,CAAAA,KAAAA,CAAAA;YACTlD,YAAaC,CAAAA,aAAa,CAACoC,eAAAA,EAAiBH,SAAWgB,EAAAA,MAAAA,CAAAA,CAAAA;AACzD,SAAA;AACA,QAAA,IAAMC,YAAeb,GAAAA,OAAAA,CAAQ1pB,GAAG,CAAC,SAACqqB,EAAAA,EAAAA;AAAOf,YAAAA,OAAAA,SAAAA,CAAU9B,GAAG,CAAC6C,EAAAA,CAAAA,CAAAA;;AACvD,QAAA,IAAK,IAAIr8B,CAAI,GAAA,CAAA,EAAGA,IAAIu8B,YAAarkC,CAAAA,MAAM,EAAE8H,CAAK,EAAA,CAAA;AAC5CsX,YAAAA,KAAAA,CAAMklB,aAAa,CAACD,YAAY,CAACv8B,CAAE,CAAA,CAAA,CAAA;AACrC,SAAA;AACF,KAAA,CAAA;IAEA,MAAQ+7B,CAAAA,gBAsBP,GAtBD,SAAQA,gBAAmC,GAAA;AACzC,QAAA,IAAMzC,iBAAiB,IAAI,CAACz3B,OAAO,CAACw5B,YAAY,CAAC1oB,QAAQ,CAAA;AACzD,QAAA,IAAM2oB,SAAY,GAAA,IAAI,CAACz5B,OAAO,CAACy5B,SAAS,CAAA;AAExC,QAAA,IAAM5mC,WAAW,EAAE,CAAA;QACnB,IAAK,IAAIsL,IAAI,CAAGqqB,EAAAA,CAAAA,GAAIiP,eAAephC,MAAM,EAAE8H,CAAIqqB,GAAAA,CAAAA,EAAGrqB,CAAK,EAAA,CAAA;YACrD,IAAM23B,YAAAA,GAAe2B,cAAc,CAACt5B,CAAE,CAAA,CAAA;AACtC,YAAA,IAAMmM,MAASmvB,GAAAA,SAAAA,CAAU9B,GAAG,CAAC7B,aAAa0E,EAAE,CAAA,CAAA;YAC5C,IAAK,IAAIr8B,KAAI,CAAGA,EAAAA,EAAAA,GAAI23B,aAAa4D,UAAU,CAACrjC,MAAM,EAAE8H,EAAK,EAAA,CAAA;AACvD,gBAAA,IAAMy8B,eAAkB9E,GAAAA,YAAAA,CAAa4D,UAAU,CAACv7B,EAAE,CAAA,CAAA;gBAClD,IAAM8wB,GAAAA,GAAM,CAAC2L,eAAgB1E,CAAAA,KAAK,GAAG0E,eAAgBrE,CAAAA,KAAK,GAAGqE,eAAAA,CAAgB1E,KAAK,CAAA;AAClF,gBAAA,IAAI2E,YAAAA,KAAAA,CAAAA,CAAAA;;AAEJ,gBAAA,IAAI5L,QAAQ,UAAY,EAAA;AACtB4L,oBAAAA,SAAAA,GAAYvwB,MAAOwwB,CAAAA,YAAY,CAACnlC,iBAAAA,CAAO2gC,QAAQ,CAACrH,GAAAA,CAAAA,CAAAA,CAAAA;iBACjD;AACD4L,gBAAAA,SAAAA,GAAYA,aAAavwB,MAAOO,CAAAA,YAAY,CAAClV,iBAAAA,CAAO2gC,QAAQ,CAACrH,GAAAA,CAAAA,CAAAA,CAAAA;AAC7D,gBAAA,IAAMx0B,UAAUg7B,gBAAiBiB,CAAAA,oBAAoB,CAACmE,SAAWD,EAAAA,eAAAA,EAAiBtwB,OAAO/S,MAAM,CAAA,CAAA;AAC/F1E,gBAAAA,QAAAA,CAAS2B,IAAI,CAACiG,OAAAA,CAAAA,CAAAA;AAChB,aAAA;AACF,SAAA;QACA,OAAOhG,OAAAA,CAAQgB,GAAG,CAAC5C,QAAAA,CAAAA,CAAAA;AACrB,KAAA,CAAA;IAEA,MAAQsnC,CAAAA,qBAIP,GAJD,SAAQA,qBAAwB,GAAA;AAC9B,QAAA,IAAM1kB,KAAQ,GAAA,IAAI,CAACzV,OAAO,CAACyV,KAAK,CAAA;QAChC,IAAI,CAACzV,OAAO,CAACmjB,OAAO,EAAA,CAAA;QACpB,OAAO1N,KAAAA,CAAAA;AACT,KAAA,CAAA;AAxGA;;;;;MADW4G,YAOJ/U,KAMN,GAND,SAAOA,KAAM/P,CAAAA,MAAc,EAAEwjC,SAAiB,EAAkB;QAC9D,IAAMtlB,KAAAA,GAAQ,IAAIulB,gBAAMzjC,CAAAA,MAAAA,CAAAA,CAAAA;QACxB,IAAMyI,OAAAA,GAAU,IAAIu5B,kBAAAA,CAAmBwB,SAAWtlB,EAAAA,KAAAA,CAAAA,CAAAA;QAClD,IAAM1M,MAAAA,GAAS,IAVNsT,WAUsBrc,CAAAA,OAAAA,CAAAA,CAAAA;AAC/B+I,QAAAA,MAAAA,CAAOuqB,KAAK,EAAA,CAAA;AACZ,QAAA,OAAOvqB,OAAOtO,OAAO,CAAA;AACvB,KAAA,CAAA;AAbW4hB,IAAAA,OAAAA,WAAAA,CAAAA;AA0GZ,CAAA;;ACpGY4e,kBAAN,iBAAA,SAAA,MAAA,EAAA;;;;;;AACLlpC,IAAAA,MAAAA,CAAAA,IAQC,GARDA,SAAAA,KAAKC,IAAc,EAAEC,eAAgC,EAA2B;;AAC9E,QAAA,OAAO,IAAIC,uBAAAA,CAAa,SAACC,OAAAA,EAASC,MAAW,EAAA;AAC3C,YAAA,KAAA,CAAKC,OAAO,CAAcL,IAAKM,CAAAA,GAAG,EAAE;gBAAEC,IAAM,EAAA,aAAA;aAAiBC,CAAAA,CAAAA,IAAI,CAAC,SAACC,IAAS,EAAA;AAC1EsM,gBAAAA,MAAAA,CAAkBtM,MAAMR,eAAgBsF,CAAAA,MAAM,EAAE/E,IAAI,CAAC,SAAC0jB,IAAS,EAAA;oBAC7D/jB,OAAQ+jB,CAAAA,IAAAA,CAAAA,CAAAA;AACV,iBAAA,CAAA,CAAA;AACF,aAAA,CAAA,CAAA;AACF,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;;EAT8BvgB,iBAU/B,EAAA;AAVYslC,kBAAAA,GAAAA,UAAAA,CAAAA;AADZrlC,IAAAA,yBAAAA,CAAe,MAAQ,EAAA;AAAC,QAAA,QAAA;AAAS,KAAA,EAAE,IAAI,CAAA;AAC3BqlC,CAAAA,EAAAA,kBAAAA,CAAAA;;ACHAC,2BAAN,iBAAA,SAAA,MAAA,EAAA;;;;;;AACLnpC,IAAAA,MAAAA,CAAAA,IAQC,GARDA,SAAAA,KAAKC,IAAc,EAAEC,eAAgC,EAA2B;;QAC9E,OAAO,IAAIC,uBAAa,CAAA,SAACC,OAAY,EAAA;AACnC,YAAA,KAAA,CAAKE,OAAO,CAAcL,IAAKM,CAAAA,GAAG,EAAE;gBAAEC,IAAM,EAAA,aAAA;aAAiBC,CAAAA,CAAAA,IAAI,CAAC,SAACC,IAAS,EAAA;AAC1EsM,gBAAAA,MAAAA,CAAkBtM,MAAMR,eAAgBsF,CAAAA,MAAM,EAAE/E,IAAI,CAAC,SAAC6E,OAAY,EAAA;oBAChElF,OAAQkF,CAAAA,OAAAA,CAAAA,CAAAA;AACV,iBAAA,CAAA,CAAA;AACF,aAAA,CAAA,CAAA;AACF,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;;EATuC1B,iBAUxC,EAAA;AAVYulC,2BAAAA,GAAAA,UAAAA,CAAAA;AADZtlC,IAAAA,yBAAAA,CAAe,iBAAmB,EAAA;AAAC,QAAA,QAAA;AAAS,KAAA,EAAE,IAAI,CAAA;AACtCslC,CAAAA,EAAAA,2BAAAA,CAAAA;;ACEb;;;;;AAKC,IACM,SAASn8B,MAAAA,CAAU2C,WAAwB,EAAEnK,MAAc,EAAc;IAC9E,IAAMqP,MAAAA,GAASyrB,UAAWtzB,CAAAA,MAAM,CAAC2C,WAAAA,CAAAA,CAAAA;IACjC,IAAMsxB,YAAAA,GAAe,IAAI9C,YAAaxuB,CAAAA,WAAAA,EAAakF,OAAO2rB,YAAY,EAAE3rB,OAAOksB,UAAU,CAAA,CAAA;AACzF,IAAA,OAAOX,UAAU,CAACvrB,MAAOrU,CAAAA,IAAI,CAAC,CAACwM,MAAM,CAACxH,MAAQy7B,EAAAA,YAAAA,CAAAA,CAAcxgC,IAAI,CAAC,SAAC2oC,MAAW,EAAA;QAC3EA,MAAOloC,CAAAA,IAAI,GAAG2T,MAAAA,CAAO3T,IAAI,CAAA;QACzB,OAAOkoC,MAAAA,CAAAA;AACT,KAAA,CAAA,CAAA;AACF;;ICbMF,UADN,iBAAA,SAAA,MAAA,EAAA;;;;;;AAEElpC,IAAAA,MAAAA,CAAAA,IAcC,GAdDA,SAAAA,KAAKC,IAAc,EAAEC,eAAgC,EAA2B;;AAC9E,QAAA,OAAO,IAAIC,uBAAAA,CAAa,SAACC,OAAAA,EAASC,MAAW,EAAA;AAC3C,YAAA,KAAA,CAAKC,OAAO,CAAML,IAAKM,CAAAA,GAAG,EAAE,QACvBN,CAAAA,EAAAA,EAAAA,IAAAA,EAAAA;gBACHO,IAAM,EAAA,aAAA;gBAELC,IAAI,CAAC,SAACC,IAAS,EAAA;gBACd,OAAOsM,MAAAA,CAAkBtM,IAAMR,EAAAA,eAAAA,CAAgBsF,MAAM,CAAA,CAAA;aAEtD/E,CAAAA,CAAAA,IAAI,CAAC,SAAC0jB,IAAS,EAAA;gBACd/jB,OAAQ+jB,CAAAA,IAAAA,CAAAA,CAAAA;AACV,aAAA,CAAA,CACCxgB,KAAK,CAACtD,MAAAA,CAAAA,CAAAA;AACX,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;;AAfuBuD,CAAAA,CAAAA,iBAAAA,CAAAA,CAAAA;AAAnBslC,UAAAA,GAAAA,UAAAA,CAAAA;IADLrlC,yBAAeC,CAAAA,oBAAAA,CAAUulC,IAAI,EAAE;AAAC,QAAA,MAAA;AAAO,KAAA,CAAA;AAClCH,CAAAA,EAAAA,UAAAA,CAAAA;;ICTAI,gBADN,iBAAA,SAAA,MAAA,EAAA;;;;;;AAEEtpC,IAAAA,MAAAA,CAAAA,IAYC,GAZDA,SAAAA,KAAKC,IAAc,EAAEC,eAAgC,EAAsB;;AACzE,QAAA,OAAO,IAAIC,uBAAAA,CAAa,SAACC,OAAAA,EAASC,MAAW,EAAA;YAC3C,IAAQE,MAAQN,IAARM,CAAAA,GAAAA,CAAAA;AACR,YAAA,KAAA,CAAK6G,aAAa,CAAC7G,GAAAA,EAAKA,GACrBE,CAAAA,CAAAA,IAAI,CAAC,WAAM;AACV,gBAAA,IAAM4G,IAAO,GAAA,IAAIC,eAAKpH,CAAAA,eAAAA,CAAgBsF,MAAM,EAAEjF,GAAAA,CAAAA,CAAAA;gBAC9CH,OAAQiH,CAAAA,IAAAA,CAAAA,CAAAA;aAET1D,CAAAA,CAAAA,KAAK,CAAC,SAACoD,CAAM,EAAA;gBACZ1G,MAAO,CAAC,eAAYE,GAAI,GAAA,OAAA,CAAA,CAAA;AAC1B,aAAA,CAAA,CAAA;AACJ,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAA,CAAc6G,aAIb,GAJD,SAAcA,aAAcF,CAAAA,QAAgB,EAAEC,OAAe,EAAA;AAA7D,QAAA,OAAA,mBAAA,CAAA,WAA8E;AACtEI,YAAAA,IAAAA,QAAAA,CAAAA;;;;AAAAA,wBAAAA,QAAAA,GAAW,IAAIC,QAAAA,CAASN,QAAU,EAAC,SAAMC,OAAQ,GAAA,GAAA,CAAA,CAAA;AACvD,wBAAA,OAAA;;AAAMI,4BAAAA,QAAAA,CAASvH,IAAI,EAAA;;;AAAnB,wBAAA,MAAA,CAAA,IAAA,EAAA,CAAA;wBACAyH,QAASC,CAAAA,KAAK,CAACC,GAAG,CAACJ,QAAAA,CAAAA,CAAAA;;;;;;AACrB,SAAA,CAAA,EAAA,CAAA;;;AAnB6B3D,CAAAA,CAAAA,iBAAAA,CAAAA,CAAAA;AAAzB0lC,gBAAAA,GAAAA,UAAAA,CAAAA;IADLzlC,yBAAeC,CAAAA,oBAAAA,CAAUylC,UAAU,EAAE;AAAC,QAAA,KAAA;AAAO,QAAA,KAAA;AAAO,QAAA,MAAA;AAAO,KAAA,EAAE,KAAK,CAAA;AAC7DD,CAAAA,EAAAA,gBAAAA,CAAAA;;ICcAE,iBADN,iBAAA,SAAA,MAAA,EAAA;;;;;AAEUC,QAAAA,KAAAA,CAAAA,SAAAA,GAAkB,IAAIC,eAAAA,EAAAA,CAAAA;AACtBC,QAAAA,KAAAA,CAAAA,SAAAA,GAAqB,IAAIt9B,kBAAAA,EAAAA,CAAAA;AACzBu9B,QAAAA,KAAAA,CAAAA,SAAAA,GAAqB,IAAIn9B,kBAAAA,EAAAA,CAAAA;;;;AACjCzM,IAAAA,MAAAA,CAAAA,IA6DC,GA7DDA,SAAAA,KAAKC,IAAc,EAAEC,eAAgC,EAA6B;;AAChF,QAAA,OAAO,IAAIC,uBAA0B,CAAA,SAACC,OAASC,EAAAA,MAAAA,EAAQwpC,GAAGjhC,QAAa,EAAA;AACrE,YAAA,IAAMd,gBAAgB,EAAE,CAAA;AACxBc,YAAAA,QAAAA,CAAS,WAAM;AACb,gBAAA,IAAK,IAAIwD,CAAI,GAAA,CAAA,EAAGA,IAAItE,aAAcxD,CAAAA,MAAM,EAAE8H,CAAK,EAAA,CAAA;oBAC7CtE,aAAa,CAACsE,CAAE,CAAA,CAAC6kB,MAAM,EAAA,CAAA;AACzB,iBAAA;AACF,aAAA,CAAA,CAAA;AACA,YAAA,IAAM6Y,gBAAgB,KAAKxpC,CAAAA,OAAO,CAAcL,IAAKM,CAAAA,GAAG,EAAE,QACrDN,CAAAA,EAAAA,EAAAA,IAAAA,EAAAA;gBACHO,IAAM,EAAA,MAAA;;AAERsH,YAAAA,aAAAA,CAAcrF,IAAI,CAACqnC,aAAAA,CAAAA,CAAAA;YACnBA,aACGrpC,CAAAA,IAAI,CAAC,SAACspC,SAAc,EAAA;AAUyB,gBAAA,IAAA,KAAA,GAAA,SAAA,CAAA,EAAA;oBAC1C,IAAMC,SAAAA,GAAYC,UAAU,CAAC79B,CAAE,CAAA,CAAA;oBAC/B,IAAI49B,SAAAA,CAAU92B,GAAG,EAAE;AACjBpL,wBAAAA,aAAAA,CAAcrF,IAAI,CAChBvC,eACGF,CAAAA,IAAI,CAAY;AACfO,4BAAAA,GAAAA,EAAKwL,SAAS8H,gBAAgB,CAAC5T,KAAKM,GAAG,EAAEypC,UAAU92B,GAAG,CAAA;AACtD1S,4BAAAA,IAAAA,EAAMsD,qBAAUirB,SAAS;4BACzByC,MAAQ,EAAA;gCAAE0R,MAAAA,EAAAA,MAAAA;gCAAQxG,MAAAA,EAAAA,MAAAA;AAAO,6BAAA;yBAE1Bj8B,CAAAA,CAAAA,IAAI,CAAC,SAAC6E,OAAuB,EAAA;AAC5B29B,4BAAAA,UAAAA,KAAe39B,OAAAA,CAAQ29B,UAAU,GAAGA,UAAS,CAAA,CAAA;AAC7Cx9B,4BAAAA,UAAAA,KAAe0J,SAAc7J,KAAAA,OAAQG,CAAAA,UAAU,GAAGA,UAAS,CAAA,CAAA;AAC3DqqB,4BAAAA,SAAAA,KAAc3gB,SAAc7J,KAAAA,OAAQwqB,CAAAA,SAAS,GAAGA,SAAQ,CAAA,CAAA;AACxDE,4BAAAA,SAAAA,KAAc7gB,SAAc7J,KAAAA,OAAQ0qB,CAAAA,SAAS,GAAGA,SAAQ,CAAA,CAAA;4BACxD,IAAK,IAAI5jB,IAAI,CAAGA,EAAAA,CAAAA,GAAI49B,UAAUE,OAAO,CAAC5lC,MAAM,EAAE8H,CAAK,EAAA,CAAA;;gCAEjD+9B,WAAYC,CAAAA,UAAU,CAAC,KAAA,CAAKC,WAAW,CAAC7kC,QAAQwkC,SAAUE,CAAAA,OAAO,CAAC99B,CAAAA,CAAE,EAAE9G,OAAAA,CAAAA,CAAAA,CAAAA;AACxE,6BAAA;AACF,yBAAA,CAAA,CACC3B,KAAK,CAACtD,MAAAA,CAAAA,CAAAA,CAAAA;qBAEN,MAAA;wBACL,IAAK,IAAI+L,KAAI,CAAGA,EAAAA,EAAAA,GAAI49B,UAAUE,OAAO,CAAC5lC,MAAM,EAAE8H,EAAK,EAAA,CAAA;;4BAEjD+9B,WAAYC,CAAAA,UAAU,CAAC,KAAKC,CAAAA,WAAW,CAAC7kC,MAAQwkC,EAAAA,SAAAA,CAAUE,OAAO,CAAC99B,EAAE,CAAA,CAAA,CAAA,CAAA;AACtE,yBAAA;qBACD;AACH,iBAAA,CAAA;AArCA,gBAAA,IAAQ69B,aAA6EF,SAA7EE,CAAAA,UAAAA,EAAYvN,SAAiEqN,SAAjErN,CAAAA,MAAAA,EAAQuG,aAAyD8G,SAAzD9G,CAAAA,UAAAA,EAAYx9B,aAA6CskC,SAA7CtkC,CAAAA,UAAAA,EAAYqqB,YAAiCia,SAAjCja,CAAAA,SAAAA,EAAWE,YAAsB+Z,SAAtB/Z,CAAAA,SAAAA,EAAWkT,SAAW6G,SAAX7G,CAAAA,MAAAA,CAAAA;AAC1E,gBAAA,IAAMoH,aAAgBL,GAAAA,UAAAA,GAAaA,UAAW3lC,CAAAA,MAAM,GAAG,CAAC,CAAA;gBACxD,IAAQkB,SAAWtF,eAAXsF,CAAAA,MAAAA,CAAAA;gBACR,IAAM2kC,WAAAA,GAAc,IAAII,sBAAY/kC,CAAAA,MAAAA,CAAAA,CAAAA;AACpC,gBAAA,IAAI8kC,gBAAgB,CAAG,EAAA;oBACrBlqC,OAAQ+pC,CAAAA,WAAAA,CAAAA,CAAAA;AACR,oBAAA,OAAA;iBACD;AACDriC,gBAAAA,aAAAA,CAAcxD,MAAM,GAAG,CAAA,CAAA;AACvB,gBAAA,IAAK,IAAI8H,CAAI,GAAA,CAAA,EAAGA,CAAI69B,GAAAA,UAAAA,CAAW3lC,MAAM,EAAE8H,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AA6BvCjM,gBAAAA,uBAAAA,CAAauD,GAAG,CAACoE,aACdrH,CAAAA,CAAAA,IAAI,CAAC,WAAM;oBACVL,OAAQ+pC,CAAAA,WAAAA,CAAAA,CAAAA;AACV,iBAAA,CAAA,CACCxmC,KAAK,CAACtD,MAAAA,CAAAA,CAAAA;AACX,aAAA,CAAA,CACCsD,KAAK,CAACtD,MAAAA,CAAAA,CAAAA;AACX,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;IAEA,MAAQgqC,CAAAA,WAsBP,GAtBD,SAAQA,WAAAA,CAAY7kC,MAAc,EAAEglC,MAAmB,EAAEllC,OAAmB,EAAU;;AAEpF,QAAA,IAAQmlC,MAA0DD,GAAAA,MAAAA,CAA1DC,MAAQC,EAAAA,iBAAAA,GAAkDF,MAAlDE,CAAAA,iBAAAA,EAAmBC,WAA+BH,GAAAA,MAAAA,CAA/BG,WAAaC,EAAAA,KAAAA,GAAkBJ,MAAlBI,CAAAA,KAAAA,EAAOC,SAAWL,MAAXK,CAAAA,MAAAA,CAAAA;AACvD,QAAA,IAAMC,MAAS,GAAA,IAAIC,iBACjBvlC,CAAAA,MAAAA,EACAF,OACAmlC,EAAAA,MAAAA,GAAS,IAAI,CAAChB,SAAS,CAACvwB,GAAG,CAACuxB,MAAO9rB,CAAAA,CAAC,EAAE8rB,MAAAA,CAAO7rB,CAAC,EAAE6rB,MAAO/rB,CAAAA,CAAC,EAAE+rB,MAAAA,CAAOO,CAAC,CAAA,GAAI77B,SAAS,EAC/Ey7B,KAAQ,GAAA,IAAI,CAACjB,SAAS,CAACzwB,GAAG,CAAC0xB,KAAMjsB,CAAAA,CAAC,EAAEisB,KAAAA,CAAMhsB,CAAC,CAAA,GAAIzP,SAAS,EACxD07B,MAAS,GAAA,IAAI,CAACjB,SAAS,CAAC1wB,GAAG,CAAC2xB,MAAOlsB,CAAAA,CAAC,EAAEksB,MAAAA,CAAOjsB,CAAC,EAAEisB,MAAOpsB,CAAAA,CAAC,EAAEosB,MAAAA,CAAOnsB,CAAC,CAAA,GAAIvP,SAAS,EAC/Eq7B,OAAOtpC,IAAI,CAAA,CAAA;AAEb,QAAA,IAAIoE,OAAS,EAAA;YACX,IAAM2lC,IAAAA,GAAO,CAAI3lC,GAAAA,OAAAA,CAAQ8pB,KAAK,CAAA;YAC9B,IAAM8b,IAAAA,GAAO,CAAI5lC,GAAAA,OAAAA,CAAQ+pB,MAAM,CAAA;AAC/Byb,YAAAA,MAAAA,CAAOH,WAAW,CAACzxB,GAAG,CAACyxB,WAAYhsB,CAAAA,CAAC,GAAGssB,IAAMN,EAAAA,WAAAA,CAAY/rB,CAAC,GAAGssB,MAAMP,WAAYjsB,CAAAA,CAAC,GAAGusB,IAAMN,EAAAA,WAAAA,CAAYK,CAAC,GAAGE,IAAAA,CAAAA,CAAAA;AACzG,YAAA,IAAIR,iBAAmB,EAAA;AACrB,gBAAA,IAAQ/rB,UAAGwsB,GAA8DT,iBAAjE/rB,CAAAA,CAAAA,EAAeC,SAAkD8rB,GAAAA,iBAAAA,CAAlD9rB,CAAcH,EAAG2sB,WAAiCV,GAAAA,iBAAAA,CAApCjsB,CAAgBC,EAAG2sB,eAAiBX,iBAApBhsB,CAAAA,CAAAA,CAAAA;gBACrDosB,MAAOJ,CAAAA,iBAAiB,CAACxxB,GAAG,CAACiyB,UAAAA,GAAaF,MAAMK,SAAYJ,GAAAA,IAAAA,EAAME,WAAcH,GAAAA,IAAAA,EAAMI,YAAeH,GAAAA,IAAAA,CAAAA,CAAAA;aACtG;AACDV,YAAAA,MAAAA,CAAOe,YAAY,KAAKT,OAAOS,YAAY,GAAG,IAAI,CAAD,CAAA;SAClD;QACD,OAAOT,MAAAA,CAAAA;AACT,KAAA,CAAA;;AAzF8BlnC,CAAAA,CAAAA,iBAAAA,CAAAA,CAAAA;AAA1B4lC,iBAAAA,GAAAA,UAAAA,CAAAA;IADL3lC,yBAAeC,CAAAA,oBAAAA,CAAUymC,WAAW,EAAE;AAAC,QAAA,OAAA;AAAQ,KAAA,EAAE,KAAK,CAAA;AACjDf,CAAAA,EAAAA,iBAAAA,CAAAA;;ICJAgC,YADN,iBAAA,SAAA,MAAA,EAAA;;;;;;AAEExrC,IAAAA,MAAAA,CAAAA,IA6BC,GA7BDA,SAAAA,KAAKC,IAAc,EAAEC,eAAgC,EAAwB;;AAC3E,QAAA,OAAO,IAAIC,uBAAAA,CAAa,SAACC,OAAAA,EAASC,MAAW,EAAA;AAC3C,YAAA,KAAA,CAAKC,OAAO,CAAML,IAAKM,CAAAA,GAAG,EAAE,QACvBN,CAAAA,EAAAA,EAAAA,IAAAA,EAAAA;gBACHO,IAAM,EAAA,MAAA;gBAELC,IAAI,CAAC,SAACC,IAAS,EAAA;gBACd,IAAIA,IAAAA,CAAK+qC,aAAa,EAAE;AACtBvrC,oBAAAA,eACE;AACCyC,qBAAAA,gBAAgB,CAAcjC,IAAK+qC,CAAAA,aAAa,EAChDhrC,IAAI,CAAC,SAACirC,KAAU,EAAA;AACftrC,wBAAAA,OAAAA,CAAQsrC,KAAMC,CAAAA,SAAS,CAACjrC,IAAAA,CAAKkrC,QAAQ,CAAA,CAAA,CAAA;AACvC,qBAAA,CAAA,CACCjoC,KAAK,CAACtD,MAAAA,CAAAA,CAAAA;iBACJ,MAAA,IAAIK,IAAK4E,CAAAA,OAAO,EAAE;AACvBpF,oBAAAA,eACE;AACCyC,qBAAAA,gBAAgB,CAAYjC,IAAK4E,CAAAA,OAAO,EACxC7E,IAAI,CAAC,SAAC6E,OAAY,EAAA;AACjBlF,wBAAAA,OAAAA,CAAQ,IAAI2qC,iBAAAA,CAAO7qC,eAAgBsF,CAAAA,MAAM,EAAEF,OAAAA,EAAS5E,IAAK+pC,CAAAA,MAAM,EAAE/pC,IAAAA,CAAKkqC,KAAK,EAAElqC,KAAKmqC,MAAM,CAAA,CAAA,CAAA;AAC1F,qBAAA,CAAA,CACClnC,KAAK,CAACtD,MAAAA,CAAAA,CAAAA;iBACJ,MAAA;AACLD,oBAAAA,OAAAA,CAAQ,IAAI2qC,iBAAAA,CAAO7qC,eAAgBsF,CAAAA,MAAM,EAAE,IAAI,EAAE9E,IAAK+pC,CAAAA,MAAM,EAAE/pC,IAAAA,CAAKkqC,KAAK,EAAElqC,KAAKmqC,MAAM,CAAA,CAAA,CAAA;iBACtF;AACH,aAAA,CAAA,CACClnC,KAAK,CAACtD,MAAAA,CAAAA,CAAAA;AACX,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;;AA9ByBuD,CAAAA,CAAAA,iBAAAA,CAAAA,CAAAA;AAArB4nC,YAAAA,GAAAA,UAAAA,CAAAA;IADL3nC,yBAAeC,CAAAA,oBAAAA,CAAUinC,MAAM,EAAE;AAAC,QAAA,QAAA;AAAS,KAAA,EAAE,KAAK,CAAA;AAC7CS,CAAAA,EAAAA,YAAAA,CAAAA;;ICDAK,eADN,iBAAA,SAAA,MAAA,EAAA;;;;;;AAEE7rC,IAAAA,MAAAA,CAAAA,IA8BC,GA9BDA,SAAAA,KAAKC,IAAc,EAAEC,eAAgC,EAA2B;;AAC9E,QAAA,OAAO,IAAIC,uBAAAA,CAAa,SAACC,OAAAA,EAASC,MAAW,EAAA;AAC3C,YAAA,KAAA,CAAKC,OAAO,CAAmBL,IAAKM,CAAAA,GAAG,EAAE,QACpCN,CAAAA,EAAAA,EAAAA,IAAAA,EAAAA;gBACHO,IAAM,EAAA,OAAA;gBAELC,IAAI,CAAC,SAAC0uB,KAAU,EAAA;AACAlvB,gBAAAA,IAAAA,YAAAA,CAAAA;gBAAf,IAAMuxB,MAAAA,GAASvxB,CAAAA,YAAAA,GAAAA,IAAAA,CAAKuxB,MAAM,KAAXvxB,IAAAA,GAAAA,YAAAA,GAAe,EAAE,CAAA;AAChC,gBAAA,IAAMqF,UAAU,IAAIypB,oBAAAA,CAClB7uB,eAAgBsF,CAAAA,MAAM,EACtB2pB,KAAMC,CAAAA,KAAK,EACXD,KAAAA,CAAME,MAAM,EACZmC,MAAAA,CAAO0R,MAAM,EACb1R,OAAOkL,MAAM,CAAA,CAAA;AAEf,kCACA,IAAI,CAACp3B,OAAAA,CAAQwmC,gBAAgB,EAAE,OAAA;AAC/BxmC,gBAAAA,OAAAA,CAAQgqB,cAAc,CAACH,KAAAA,CAAAA,CAAAA;AACvB7pB,gBAAAA,OAAAA,CAAQiqB,eAAe,EAAA,CAAA;AAEvB,gBAAA,IAAItvB,KAAKM,GAAG,CAACwrC,OAAO,CAAC,aAAa,CAAG,EAAA;AACnC,oBAAA,IAAMC,SAAY/rC,GAAAA,IAAAA,CAAKM,GAAG,CAACmV,KAAK,CAAC,GAAA,CAAA,CAAA;AACjCpQ,oBAAAA,OAAAA,CAAQpE,IAAI,GAAG8qC,SAAS,CAACA,SAAU1nC,CAAAA,MAAM,GAAG,CAAE,CAAA,CAAA;iBAC/C;gBACDlE,OAAQkF,CAAAA,OAAAA,CAAAA,CAAAA;aAET3B,CAAAA,CAAAA,KAAK,CAAC,SAACoD,CAAM,EAAA;gBACZ1G,MAAO0G,CAAAA,CAAAA,CAAAA,CAAAA;AACT,aAAA,CAAA,CAAA;AACJ,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;;AA/B4BnD,CAAAA,CAAAA,iBAAAA,CAAAA,CAAAA;AAAxBioC,eAAAA,GAAAA,UAAAA,CAAAA;IADLhoC,yBAAeC,CAAAA,oBAAAA,CAAUirB,SAAS,EAAE;AAAC,QAAA,KAAA;AAAO,QAAA,KAAA;AAAO,QAAA,MAAA;AAAQ,QAAA,MAAA;AAAO,KAAA,CAAA;AAC7D8c,CAAAA,EAAAA,eAAAA,CAAAA;;ICAAI,iBADN,iBAAA,SAAA,MAAA,EAAA;;;;;;AAEEjsC,IAAAA,MAAAA,CAAAA,IAkCC,GAlCDA,SAAAA,KAAKC,IAAc,EAAEC,eAAgC,EAA6B;;AAChF,QAAA,OAAO,IAAIC,uBAAAA,CAAa,SAACC,OAAAA,EAASC,MAAW,EAAA;AAC3CqC,YAAAA,OAAAA,CAAQgB,GAAG,CACTzD,IAAAA,CAAKu8B,IAAI,CAACpe,GAAG,CAAC,SAAC7d,GAAAA,EAAAA;uBACb,KAAKD,CAAAA,OAAO,CAAmBC,GAAAA,EAAK,QAC/BN,CAAAA,EAAAA,EAAAA,IAAAA,EAAAA;oBACHO,IAAM,EAAA,OAAA;;gBAITC,IAAI,CAAC,SAACguB,MAAW,EAAA;gBAChB,IAA0BA,QAAAA,GAAAA,MAAM,CAAC,CAAA,CAAE,EAA3BW,KAAkBX,GAAAA,QAAAA,CAAlBW,KAAOC,EAAAA,MAAAA,GAAWZ,QAAXY,CAAAA,MAAAA,CAAAA;AAEf,gBAAA,IAAID,UAAUC,MAAQ,EAAA;AACpBpa,oBAAAA,OAAAA,CAAQC,KAAK,CAAC,sDAAA,CAAA,CAAA;AACd,oBAAA,OAAA;iBACD;AAED,gBAAA,IAAMg3B,GAAM,GAAA,IAAI3mC,sBAAYrF,CAAAA,eAAAA,CAAgBsF,MAAM,EAAE4pB,KAAAA,CAAAA,CAAAA;AAEpD,kCACA,IAAI,CAAC8c,GAAAA,CAAIJ,gBAAgB,EAAE,OAAA;AAE3B,gBAAA,IAAK,IAAI5Z,SAAAA,GAAY,CAAGA,EAAAA,SAAAA,GAAY,GAAGA,SAAa,EAAA,CAAA;oBAClDga,GAAI5c,CAAAA,cAAc,CAACppB,0BAAgBC,CAAAA,SAAS,GAAG+rB,SAAWzD,EAAAA,MAAM,CAACyD,SAAAA,CAAU,EAAE,CAAA,CAAA,CAAA;AAC/E,iBAAA;AAEAga,gBAAAA,GAAAA,CAAI3c,eAAe,EAAA,CAAA;gBACnBnvB,OAAQ8rC,CAAAA,GAAAA,CAAAA,CAAAA;aAETvoC,CAAAA,CAAAA,KAAK,CAAC,SAACoD,CAAM,EAAA;gBACZ1G,MAAO0G,CAAAA,CAAAA,CAAAA,CAAAA;AACT,aAAA,CAAA,CAAA;AACJ,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;;AAnC8BnD,CAAAA,CAAAA,iBAAAA,CAAAA,CAAAA;AAA1BqoC,iBAAAA,GAAAA,UAAAA,CAAAA;IADLpoC,yBAAeC,CAAAA,oBAAAA,CAAUyB,WAAW,EAAE;AAAC,QAAA,EAAA;AAAG,KAAA,CAAA;AACrC0mC,CAAAA,EAAAA,iBAAAA,CAAAA;;ICAAE,mBADN,iBAAA,SAAA,MAAA,EAAA;;;;;;AAEEnsC,IAAAA,MAAAA,CAAAA,IASC,GATDA,SAAAA,KAAKC,IAAc,EAAEC,eAAgC,EAA+B;;AAClF,QAAA,OAAO,IAAIC,uBAAAA,CAAa,SAACC,OAAAA,EAASC,MAAW,EAAA;AAC3C,YAAA,KAAA,CAAKC,OAAO,CAAML,IAAKM,CAAAA,GAAG,EAAE,QACvBN,CAAAA,EAAAA,EAAAA,IAAAA,EAAAA;gBACHO,IAAM,EAAA,aAAA;AAELC,aAAAA,CAAAA,CAAAA,CAAAA,IAAI,CAAC,SAACC,IAAAA,EAAAA;AAASsM,gBAAAA,OAAAA,MAAAA,CAAsBtM,IAAMR,EAAAA,eAAAA,CAAgBsF,MAAM,CAAA,CAAE/E,IAAI,CAACL,OAAAA,CAAAA,CAAAA;AACxEuD,aAAAA,CAAAA,CAAAA,KAAK,CAACtD,MAAAA,CAAAA,CAAAA;AACX,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;;AAVgCuD,CAAAA,CAAAA,iBAAAA,CAAAA,CAAAA;AAA5BuoC,mBAAAA,GAAAA,UAAAA,CAAAA;IADLtoC,yBAAeC,CAAAA,oBAAAA,CAAU0b,aAAa,EAAE;AAAC,QAAA,KAAA;AAAM,KAAA,CAAA;AAC1C2sB,CAAAA,EAAAA,mBAAAA,CAAAA;;ICKAC,WADN,iBAAA,SAAA,MAAA,EAAA;;;;;;AAEEpsC,IAAAA,MAAAA,CAAAA,IAmFC,GAnFDA,SAAAA,KAAKC,IAAc,EAAEC,eAAgC,EAAuB;;QAC1E,IAAQsF,SAAWtF,eAAXsF,CAAAA,MAAAA,CAAAA;AACR,QAAA,OAAO,IAAIrF,uBAAAA,CAAa,SAACC,OAAAA,EAASC,MAAW,EAAA;AAC3C,YAAA,KAAA,CAAKC,OAAO,CAAML,IAAKM,CAAAA,GAAG,EAAE;gBAAEC,IAAM,EAAA,MAAA;aACjCC,CAAAA,CAAAA,IAAI,CAAC,SAACC,IAAS,EAAA;;AAEd8E,gBAAAA,MAAAA,CAAOtF,eAAe,CAACmsC,oBAAoB,CAAC3rC,KAAK4rC,KAAK,CAAA,CAAA;gBACtD,OAAOhiB,WAAAA,CAAY/U,KAAK,CAAC/P,MAAAA,EAAQ9E,MAAMD,IAAI,CAAC,SAACijB,KAAU,EAAA;;AAErD,oBAAA,IAAM6oB,OAAU7rC,GAAAA,IAAAA,CAAKgjB,KAAK,CAAC6oB,OAAO,CAAA;oBAClC,IAAIC,mBAAAA,GAAsB9pC,QAAQtC,OAAO,EAAA,CAAA;oBACzC,IAAImsC,OAAAA,CAAQnmC,YAAY,EAAE;AACxBomC,wBAAAA,mBAAAA,GAAsBtsC,eACpB;yBACCyC,gBAAgB,CAAMjC,IAAKgjB,CAAAA,KAAK,CAAC6oB,OAAO,CAACnmC,YAAY,CACrD3F,CAAAA,IAAI,CAAC,SAACoY,KAAU,EAAA;AACf6K,4BAAAA,KAAAA,CAAMtd,YAAY,GAAGyS,KAAAA,CAAAA;AACrB6K,4BAAAA,KAAAA,CAAMtd,YAAY,CAACqmC,gBAAgB,GAAGF,QAAQE,gBAAgB,CAAA;AAC9D/oB,4BAAAA,KAAAA,CAAMtd,YAAY,CAACsmC,iBAAiB,GAAGH,QAAQG,iBAAiB,CAAA;AAClE,yBAAA,CAAA,CAAA;qBACG,MAAA;AACLhpB,wBAAAA,KAAAA,CAAMtd,YAAY,CAACqmC,gBAAgB,GAAGF,QAAQE,gBAAgB,CAAA;AAC9D/oB,wBAAAA,KAAAA,CAAMtd,YAAY,CAACsmC,iBAAiB,GAAGH,QAAQG,iBAAiB,CAAA;AAChEhpB,wBAAAA,KAAAA,CAAMtd,YAAY,CAACumC,iBAAiB,CAACtL,QAAQ,CAACkL,QAAQI,iBAAiB,CAAA,CAAA;qBACxE;AAED,oBAAA,IAAMC,UAAalsC,GAAAA,IAAAA,CAAKgjB,KAAK,CAACkpB,UAAU,CAAA;AACxClpB,oBAAAA,KAAAA,CAAMkpB,UAAU,CAACznB,IAAI,GAAGynB,WAAWznB,IAAI,CAAA;oBAEvC,IAAI0nB,iBAAAA,GAAoBnqC,QAAQtC,OAAO,EAAA,CAAA;oBAEvC,OAAQsjB,KAAAA,CAAMkpB,UAAU,CAACznB,IAAI;AAC3B,wBAAA,KAAK2nB,0BAAeC,UAAU;AAC5BrpB,4BAAAA,KAAAA,CAAMkpB,UAAU,CAACI,UAAU,CAAC3L,QAAQ,CAACuL,WAAWp0B,KAAK,CAAA,CAAA;4BACrD,MAAM;AACR,wBAAA,KAAKs0B,0BAAeG,GAAG;4BACrB,IAAIL,UAAAA,CAAWM,GAAG,EAAE;;gCAElBL,iBAAoB3sC,GAAAA,eAAAA,CAAgByC,gBAAgB,CAAMiqC,UAAAA,CAAWM,GAAG,CAAEzsC,CAAAA,IAAI,CAAC,SAACoY,KAAU,EAAA;AACxF,oCAAA,IAAMq0B,GAAMxpB,GAAAA,KAAAA,CAAMkpB,UAAU,CAACM,GAAG,CAAA;oCAChC,IAAMC,WAAAA,GAAc,IAAIC,yBAAe5nC,CAAAA,MAAAA,CAAAA,CAAAA;oCACvC2nC,WAAYE,CAAAA,cAAc,GAAGx0B,KAAAA,CAAMhS,eAAe,CAAA;oCAClDsmC,WAAYG,CAAAA,iBAAiB,GAAG,IAAI,CAAA;AACpCJ,oCAAAA,GAAAA,CAAIvyB,QAAQ,GAAGwyB,WAAAA,CAAAA;AACfD,oCAAAA,GAAAA,CAAI/oB,IAAI,GAAGopB,wBAAAA,CAAcC,YAAY,CAAChoC,MAAAA,EAAQ,GAAG,CAAG,EAAA,CAAA,CAAA,CAAA;AACtD,iCAAA,CAAA,CAAA;6BACD;4BACD,MAAM;AACR,wBAAA,KAAKsnC,0BAAeW,OAAO;4BACzB,IAAIb,UAAAA,CAAWtnC,OAAO,EAAE;;gCAEtBunC,iBAAoB3sC,GAAAA,eAAAA,CAAgByC,gBAAgB,CAAMiqC,UAAAA,CAAWtnC,OAAO,CAAE7E,CAAAA,IAAI,CAAC,SAAC6E,OAAY,EAAA;oCAC9Foe,KAAMkpB,CAAAA,UAAU,CAACtnC,OAAO,GAAGA,OAAAA,CAAAA;AAC7B,iCAAA,CAAA,CAAA;6BACD;4BACD,MAAM;AACV,qBAAA;;AAGA,oBAAA,IAAMooC,MAAShtC,GAAAA,IAAAA,CAAKgjB,KAAK,CAACgqB,MAAM,CAAA;AAChC,oBAAA,IAAIA,MAAQ,EAAA;wBACV,IAAIA,MAAAA,CAAOC,WAAW,IAAIx+B,SAAAA,EAAWuU,MAAMiqB,WAAW,GAAGD,OAAOC,WAAW,CAAA;wBAC3E,IAAID,MAAAA,CAAOE,gBAAgB,IAAIz+B,SAAAA,EAAWuU,MAAMkqB,gBAAgB,GAAGF,OAAOE,gBAAgB,CAAA;wBAC1F,IAAIF,MAAAA,CAAOG,cAAc,IAAI1+B,SAAAA,EAAWuU,MAAMmqB,cAAc,GAAGH,OAAOG,cAAc,CAAA;wBACpF,IAAIH,MAAAA,CAAOI,cAAc,IAAI3+B,SAAAA,EAAWuU,MAAMoqB,cAAc,GAAGJ,OAAOI,cAAc,CAAA;qBACrF;AAED,oBAAA,IAAMC,GAAMrtC,GAAAA,IAAAA,CAAKgjB,KAAK,CAACqqB,GAAG,CAAA;AAC1B,oBAAA,IAAIA,GAAK,EAAA;wBACP,IAAIA,GAAAA,CAAIC,OAAO,IAAI7+B,SAAAA,EAAWuU,MAAMsqB,OAAO,GAAGD,IAAIC,OAAO,CAAA;wBACzD,IAAID,GAAAA,CAAIE,QAAQ,IAAI9+B,SAAAA,EAAWuU,MAAMuqB,QAAQ,GAAGF,IAAIE,QAAQ,CAAA;wBAC5D,IAAIF,GAAAA,CAAIG,MAAM,IAAI/+B,SAAAA,EAAWuU,MAAMwqB,MAAM,GAAGH,IAAIG,MAAM,CAAA;wBACtD,IAAIH,GAAAA,CAAII,UAAU,IAAIh/B,SAAAA,EAAWuU,MAAMyqB,UAAU,GAAGJ,IAAII,UAAU,CAAA;wBAClE,IAAIJ,GAAAA,CAAIK,QAAQ,IAAIj/B,SAAWuU,EAAAA,KAAAA,CAAM0qB,QAAQ,CAAC/M,QAAQ,CAAC0M,GAAAA,CAAIK,QAAQ,CAAA,CAAA;qBACpE;oBAED,OAAO1rC,OAAAA,CAAQgB,GAAG,CAAC;AAAC8oC,wBAAAA,mBAAAA;AAAqBK,wBAAAA,iBAAAA;qBAAkB,CAAEpsC,CAAAA,IAAI,CAAC,WAAM;wBACtEL,OAAQsjB,CAAAA,KAAAA,CAAAA,CAAAA;AACV,qBAAA,CAAA,CAAA;AACF,iBAAA,CAAA,CAAA;AACF,aAAA,CAAA,CACC/f,KAAK,CAACtD,MAAAA,CAAAA,CAAAA;AACX,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;;AApFwBuD,CAAAA,CAAAA,iBAAAA,CAAAA,CAAAA;AAApBwoC,WAAAA,GAAAA,UAAAA,CAAAA;IADLvoC,yBAAeC,CAAAA,oBAAAA,CAAUmlC,KAAK,EAAE;AAAC,QAAA,QAAA;AAAS,KAAA,EAAE,IAAI,CAAA;AAC3CmD,CAAAA,EAAAA,WAAAA,CAAAA,CAAAA;AAuFN1I,gBAAAA,CAAiBC,4BAA4B,CAC3C,cAAA,gBACA,oBAAA,SAAOe,QAAAA,EAAezkC,MAAmCuF,MAAmB,EAAA;AAClE4/B,IAAAA,IAAAA,KAAAA,CAAAA;;AAAAA,QAAAA,KAAAA,GAAUnlC,IAAVmlC,CAAAA,KAAAA,CAAAA;QACR,IAAI,CAACA,KAAM/9B,CAAAA,IAAI,EAAE;;YAEfq9B,QAASr9B,CAAAA,IAAI,GAAGC,eAAK+mC,CAAAA,YAAY,CAAC7oC,MAAQ4/B,EAAAA,KAAAA,CAAMkJ,UAAU,IAAI,OAAA,CAAA,CAAA;SAC/D;AACD,QAAA,OAAA;;AAAO5J,YAAAA,QAAAA;;;AACT,CAAA,CAAA,CAAA;;;;;;;;;;"}