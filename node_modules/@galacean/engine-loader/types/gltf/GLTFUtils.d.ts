import { IndexFormat, TypedArray, VertexElementFormat } from "@galacean/engine-core";
import { Color, Vector2, Vector3, Vector4 } from "@galacean/engine-math";
import { AccessorComponentType, AccessorType, IAccessor, IBufferView, IGLTF } from "./GLTFSchema";
import { BufferInfo, GLTFParserContext } from "./parser/GLTFParserContext";
/**
 * @internal
 */
export declare class GLTFUtils {
    static floatBufferToVector2Array(buffer: Float32Array): Vector2[];
    static floatBufferToVector3Array(buffer: Float32Array): Vector3[];
    static floatBufferToVector4Array(buffer: Float32Array): Vector4[];
    static floatBufferToColorArray(buffer: Float32Array, isColor3: boolean): Color[];
    /**
     * Get the number of bytes occupied by accessor type.
     */
    static getAccessorTypeSize(accessorType: AccessorType): number;
    /**
     * Get the TypedArray corresponding to the component type.
     */
    static getComponentType(componentType: AccessorComponentType): Uint8ArrayConstructor | Int8ArrayConstructor | Int16ArrayConstructor | Uint16ArrayConstructor | Uint32ArrayConstructor | Float32ArrayConstructor;
    static getNormalizedComponentScale(componentType: AccessorComponentType): number;
    static getAccessorBuffer(context: GLTFParserContext, bufferViews: IBufferView[], accessor: IAccessor): BufferInfo;
    /**
     * @deprecated
     * Get accessor data.
     */
    static getAccessorData(glTF: IGLTF, accessor: IAccessor, buffers: ArrayBuffer[]): TypedArray;
    static getBufferViewData(bufferView: IBufferView, buffers: ArrayBuffer[]): ArrayBuffer;
    /**
     * Get accessor data.
     */
    static processingSparseData(bufferViews: IBufferView[], accessor: IAccessor, buffers: ArrayBuffer[], bufferInfo: BufferInfo): void;
    static getIndexFormat(type: AccessorComponentType): IndexFormat;
    static getElementFormat(type: AccessorComponentType, size: number, normalized?: boolean): VertexElementFormat;
    /**
     * Load image buffer
     */
    static loadImageBuffer(imageBuffer: ArrayBuffer, type: string): Promise<HTMLImageElement>;
    /**
     * Parse the glb format.
     */
    static parseGLB(context: GLTFParserContext, glb: ArrayBuffer): {
        glTF: IGLTF;
        buffers: ArrayBuffer[];
    };
    private static _formatRelativePath;
}
