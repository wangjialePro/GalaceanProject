import { AssetPromise, ModelMesh, TypedArray } from "@galacean/engine-core";
import { ModelMeshRestoreInfo } from "../../GLTFContentRestorer";
import { IGLTF, IMesh, IMeshPrimitive } from "../GLTFSchema";
import { GLTFParser } from "./GLTFParser";
import { BufferInfo, GLTFParserContext } from "./GLTFParserContext";
export declare class GLTFMeshParser extends GLTFParser {
    private static _tempVector3;
    /**
     * @internal
     */
    static _parseMeshFromGLTFPrimitive(context: GLTFParserContext, mesh: ModelMesh, meshRestoreInfo: ModelMeshRestoreInfo, gltfMesh: IMesh, gltfPrimitive: IMeshPrimitive, gltf: IGLTF, getVertexBufferData: (semantic: string) => TypedArray, getBlendShapeData: (semantic: string, shapeIndex: number) => BufferInfo, getIndexBufferData: () => TypedArray, keepMeshData: boolean): Promise<ModelMesh>;
    /**
     * @internal
     */
    static _createBlendShape(mesh: ModelMesh, meshRestoreInfo: ModelMeshRestoreInfo, glTFMesh: IMesh, glTFTargets: {
        [name: string]: number;
    }[], getBlendShapeData: (semantic: string, shapeIndex: number) => BufferInfo): void;
    parse(context: GLTFParserContext): AssetPromise<ModelMesh[][]>;
}
