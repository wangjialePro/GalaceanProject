import { AnimationClip, AssetPromise, EngineObject, Material, Mesh } from "@galacean/engine-core";
import { ExtensionParser } from "../extensions/ExtensionParser";
import { ExtensionSchema } from "../extensions/Schema";
import { ParserContext } from "./ParserContext";
export declare abstract class Parser {
    private static _extensionParsers;
    static parseEngineResource(extensionName: string, extensionSchema: ExtensionSchema, parseResource: EngineObject, context: ParserContext, ...extra: any[]): void;
    static createEngineResource<T extends EngineObject>(extensionName: string, extensionSchema: ExtensionSchema, context: ParserContext, ...extra: any[]): T | Promise<T>;
    static hasExtensionParser(extensionName: string): boolean;
    static initialize(extensionName: string): void;
    /**
     * @internal
     */
    static _addExtensionParser(extensionName: string, extensionParser: ExtensionParser): void;
    abstract parse(context: ParserContext): AssetPromise<any> | void | Material | AnimationClip | Mesh;
}
/**
 * Declare ExtensionParser's decorator.
 * @param extensionName - Extension name
 */
export declare function registerExtension(extensionName: string): (parser: new () => ExtensionParser) => void;
