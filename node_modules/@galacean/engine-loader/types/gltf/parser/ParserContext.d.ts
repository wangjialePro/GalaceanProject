import { AnimationClip, AssetPromise, Buffer, Entity, Material, ModelMesh, Texture2D, TypedArray } from "@galacean/engine-core";
import { GLTFResource } from "../GLTFResource";
import { IGLTF } from "../Schema";
/**
 * @internal
 */
export declare class ParserContext {
    gltf: IGLTF;
    buffers: ArrayBuffer[];
    glTFResource: GLTFResource;
    keepMeshData: boolean;
    hasSkinned: boolean;
    /** chain asset promise */
    chainPromises: AssetPromise<any>[];
    accessorBufferCache: Record<string, BufferInfo>;
    texturesPromiseInfo: PromiseInfo<Texture2D[]>;
    materialsPromiseInfo: PromiseInfo<Material[]>;
    meshesPromiseInfo: PromiseInfo<ModelMesh[][]>;
    animationClipsPromiseInfo: PromiseInfo<AnimationClip[]>;
    defaultSceneRootPromiseInfo: PromiseInfo<Entity>;
    masterPromiseInfo: PromiseInfo<GLTFResource>;
    promiseMap: Record<string, AssetPromise<any>>;
    constructor(url: string);
    private _initPromiseInfo;
}
/**
 * @internal
 */
export declare class BufferInfo {
    data: TypedArray;
    interleaved: boolean;
    stride: number;
    vertexBuffer: Buffer;
    vertexBindingInfos: Record<number, number>;
    constructor(data: TypedArray, interleaved: boolean, stride: number);
}
/**
 * @internal
 */
export declare class PromiseInfo<T> {
    promise: AssetPromise<T>;
    resolve: (value?: T | PromiseLike<T>) => void;
    reject: (reason?: any) => void;
    setProgress: (progress: number) => void;
    onCancel: (callback: () => void) => void;
}
